
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001660  000016f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d1  00800258  00800258  0000184c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a9d  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131b  00000000  00000000  00006759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e5  00000000  00000000  00007a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  00008e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe8  00000000  00000000  00009890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f90  00000000  00000000  0000a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000c808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	7a 08       	sbc	r7, r10
      b6:	78 08       	sbc	r7, r8
      b8:	7a 08       	sbc	r7, r10
      ba:	7c 08       	sbc	r7, r12
      bc:	7c 08       	sbc	r7, r12
      be:	82 08       	sbc	r8, r2
      c0:	7c 08       	sbc	r7, r12
      c2:	82 08       	sbc	r8, r2
      c4:	82 08       	sbc	r8, r2
      c6:	82 08       	sbc	r8, r2
      c8:	82 08       	sbc	r8, r2
      ca:	82 08       	sbc	r8, r2
      cc:	7c 08       	sbc	r7, r12
      ce:	82 08       	sbc	r8, r2
      d0:	82 08       	sbc	r8, r2

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e0 e6       	ldi	r30, 0x60	; 96
      e6:	f6 e1       	ldi	r31, 0x16	; 22
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a9 32       	cpi	r26, 0x29	; 41
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 87 05 	call	0xb0e	; 0xb0e <main>
     108:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 ef 02 	call	0x5de	; 0x5de <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     238:	0e 94 2c 06 	call	0xc58	; 0xc58 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29

	clear_all_trigs();
     284:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     288:	05 e0       	ldi	r16, 0x05	; 5
     28a:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     290:	0f 2e       	mov	r0, r31
     292:	f2 e0       	ldi	r31, 0x02	; 2
     294:	af 2e       	mov	r10, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	bf 2e       	mov	r11, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	0f 2e       	mov	r0, r31
     29e:	f1 e0       	ldi	r31, 0x01	; 1
     2a0:	ef 2e       	mov	r14, r31
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	ff 2e       	mov	r15, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f5 e4       	ldi	r31, 0x45	; 69
     2ac:	9f 2e       	mov	r9, r31
     2ae:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f8 e6       	ldi	r31, 0x68	; 104
     2b4:	cf 2e       	mov	r12, r31
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	df 2e       	mov	r13, r31
     2ba:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2bc:	d5 01       	movw	r26, r10
     2be:	ec 91       	ld	r30, X
     2c0:	e6 95       	lsr	r30
     2c2:	ef 71       	andi	r30, 0x1F	; 31
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	d7 01       	movw	r26, r14
     2c8:	8c 91       	ld	r24, X
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	98 9e       	mul	r9, r24
     2d2:	e0 0d       	add	r30, r0
     2d4:	f1 1d       	adc	r31, r1
     2d6:	11 24       	eor	r1, r1
     2d8:	eb 58       	subi	r30, 0x8B	; 139
     2da:	fc 4f       	sbci	r31, 0xFC	; 252
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	93 81       	ldd	r25, Z+3	; 0x03
     2e0:	0c 2e       	mov	r0, r28
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <trigger_step+0x7a>
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <trigger_step+0x76>
     2ec:	80 ff       	sbrs	r24, 0
     2ee:	3a c0       	rjmp	.+116    	; 0x364 <trigger_step+0xf6>
			turn_on(drum_hit[i].led_index);
     2f0:	f8 01       	movw	r30, r16
     2f2:	80 81       	ld	r24, Z
     2f4:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     2f8:	de 01       	movw	r26, r28
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	ac 0f       	add	r26, r28
     300:	bd 1f       	adc	r27, r29
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	a0 50       	subi	r26, 0x00	; 0
     308:	bf 4f       	sbci	r27, 0xFF	; 255
     30a:	ec 91       	ld	r30, X
     30c:	8e 2f       	mov	r24, r30
     30e:	88 1f       	adc	r24, r24
     310:	88 27       	eor	r24, r24
     312:	88 1f       	adc	r24, r24
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	ec 91       	ld	r30, X
     318:	e7 70       	andi	r30, 0x07	; 7
     31a:	ee 0f       	add	r30, r30
     31c:	e8 2b       	or	r30, r24
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e8 59       	subi	r30, 0x98	; 152
     322:	fd 4f       	sbci	r31, 0xFD	; 253
     324:	d8 01       	movw	r26, r16
     326:	13 97       	sbiw	r26, 0x03	; 3
     328:	9c 91       	ld	r25, X
     32a:	80 81       	ld	r24, Z
     32c:	89 2b       	or	r24, r25
     32e:	80 83       	st	Z, r24
     330:	f8 01       	movw	r30, r16
     332:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     334:	80 81       	ld	r24, Z
     336:	8f 3f       	cpi	r24, 0xFF	; 255
     338:	a9 f0       	breq	.+42     	; 0x364 <trigger_step+0xf6>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     33a:	d6 01       	movw	r26, r12
     33c:	13 96       	adiw	r26, 0x03	; 3
     33e:	2c 91       	ld	r18, X
     340:	13 97       	sbiw	r26, 0x03	; 3
     342:	fe 01       	movw	r30, r28
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	ec 0f       	add	r30, r28
     34a:	fd 1f       	adc	r31, r29
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 5f       	subi	r30, 0xFC	; 252
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	90 81       	ld	r25, Z
     356:	91 70       	andi	r25, 0x01	; 1
     358:	91 95       	neg	r25
     35a:	92 27       	eor	r25, r18
     35c:	89 23       	and	r24, r25
     35e:	82 27       	eor	r24, r18
     360:	13 96       	adiw	r26, 0x03	; 3
     362:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     364:	21 96       	adiw	r28, 0x01	; 1
     366:	0a 5f       	subi	r16, 0xFA	; 250
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	c0 31       	cpi	r28, 0x10	; 16
     36c:	d1 05       	cpc	r29, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <trigger_step+0x104>
     370:	a5 cf       	rjmp	.-182    	; 0x2bc <trigger_step+0x4e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	08 95       	ret

0000038a <__vector_14>:
#include "clock.h"
#include "sequencer.h"



ISR (TIMER0_COMPA_vect) {
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	8f 93       	push	r24
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     39a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     39c:	ee e6       	ldi	r30, 0x6E	; 110
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	8d 7f       	andi	r24, 0xFD	; 253
     3a4:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     3a6:	e1 e0       	ldi	r30, 0x01	; 1
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	81 83       	std	Z+1, r24	; 0x01
	
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	8f 91       	pop	r24
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
	
	
	if (sequencer.START) { 
     3e6:	80 91 76 03 	lds	r24, 0x0376
     3ea:	81 ff       	sbrs	r24, 1
     3ec:	32 c0       	rjmp	.+100    	; 0x452 <__vector_11+0x92>
		
		if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     3ee:	e3 e7       	ldi	r30, 0x73	; 115
     3f0:	f2 e0       	ldi	r31, 0x02	; 2
     3f2:	80 81       	ld	r24, Z
     3f4:	86 95       	lsr	r24
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	98 13       	cpse	r25, r24
     3fa:	65 c0       	rjmp	.+202    	; 0x4c6 <__vector_11+0x106>
			
			spi_data[1] = sequencer.step_led_mask[sequencer.current_inst];
     3fc:	c5 e0       	ldi	r28, 0x05	; 5
     3fe:	d4 e0       	ldi	r29, 0x04	; 4
     400:	e8 81       	ld	r30, Y
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	ea 5f       	subi	r30, 0xFA	; 250
     40a:	fb 4f       	sbci	r31, 0xFB	; 251
     40c:	90 81       	ld	r25, Z
     40e:	81 81       	ldd	r24, Z+1	; 0x01
     410:	e8 e6       	ldi	r30, 0x68	; 104
     412:	f2 e0       	ldi	r31, 0x02	; 2
     414:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.step_led_mask[sequencer.current_inst] >> 8;
     416:	80 83       	st	Z, r24
			spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     418:	90 91 d6 01 	lds	r25, 0x01D6
     41c:	80 91 d3 01 	lds	r24, 0x01D3
     420:	89 2b       	or	r24, r25
     422:	80 95       	com	r24
     424:	95 81       	ldd	r25, Z+5	; 0x05
     426:	89 23       	and	r24, r25
			spi_data[5] |= sequencer.var_led_mask; 
     428:	90 91 28 04 	lds	r25, 0x0428
     42c:	89 2b       	or	r24, r25
     42e:	85 83       	std	Z+5, r24	; 0x05
			turn_off_all_inst_leds();
     430:	0e 94 02 03 	call	0x604	; 0x604 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     434:	88 81       	ld	r24, Y
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	e8 0f       	add	r30, r24
     440:	f9 1f       	adc	r31, r25
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	e0 50       	subi	r30, 0x00	; 0
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	85 81       	ldd	r24, Z+5	; 0x05
     44c:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
     450:	3a c0       	rjmp	.+116    	; 0x4c6 <__vector_11+0x106>
		}

	} else {
		spi_data[1] = 0; //need to put this somewhere else - this code is executing way too many times
     452:	e8 e6       	ldi	r30, 0x68	; 104
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	11 82       	std	Z+1, r1	; 0x01
		spi_data[0] = 0;
     458:	10 82       	st	Z, r1
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     45a:	30 91 d3 01 	lds	r19, 0x01D3
     45e:	20 91 d6 01 	lds	r18, 0x01D6
     462:	82 2f       	mov	r24, r18
     464:	83 2b       	or	r24, r19
     466:	80 95       	com	r24
     468:	95 81       	ldd	r25, Z+5	; 0x05
     46a:	89 23       	and	r24, r25
     46c:	85 83       	std	Z+5, r24	; 0x05
		switch (sequencer.variation_mode) {
     46e:	80 91 01 04 	lds	r24, 0x0401
     472:	86 95       	lsr	r24
     474:	83 70       	andi	r24, 0x03	; 3
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	91 05       	cpc	r25, r1
     47c:	41 f0       	breq	.+16     	; 0x48e <__vector_11+0xce>
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	91 05       	cpc	r25, r1
     482:	11 f0       	breq	.+4      	; 0x488 <__vector_11+0xc8>
     484:	89 2b       	or	r24, r25
     486:	29 f4       	brne	.+10     	; 0x492 <__vector_11+0xd2>
					
			case VAR_A: case VAR_AB:
			sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     488:	30 93 28 04 	sts	0x0428, r19
			break;
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__vector_11+0xd2>
					
			case VAR_B:
			sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     48e:	20 93 28 04 	sts	0x0428, r18
			break;
					
		}
		if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     492:	80 91 75 02 	lds	r24, 0x0275
     496:	83 70       	andi	r24, 0x03	; 3
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	02 97       	sbiw	r24, 0x02	; 2
     49c:	6c f4       	brge	.+26     	; 0x4b8 <__vector_11+0xf8>
			

			if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	
     49e:	80 91 01 04 	lds	r24, 0x0401
     4a2:	86 70       	andi	r24, 0x06	; 6
     4a4:	84 30       	cpi	r24, 0x04	; 4
     4a6:	29 f4       	brne	.+10     	; 0x4b2 <__vector_11+0xf2>
     4a8:	e8 e2       	ldi	r30, 0x28	; 40
     4aa:	f4 e0       	ldi	r31, 0x04	; 4
     4ac:	80 81       	ld	r24, Z
     4ae:	28 2b       	or	r18, r24
     4b0:	20 83       	st	Z, r18
					

			
			turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
		}
		spi_data[5] |= sequencer.var_led_mask;
     4b8:	e8 e6       	ldi	r30, 0x68	; 104
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	90 91 28 04 	lds	r25, 0x0428
     4c0:	85 81       	ldd	r24, Z+5	; 0x05
     4c2:	89 2b       	or	r24, r25
     4c4:	85 83       	std	Z+5, r24	; 0x05
		
	} 
	
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     4c6:	e3 e7       	ldi	r30, 0x73	; 115
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
     4ca:	81 81       	ldd	r24, Z+1	; 0x01
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	81 83       	std	Z+1, r24	; 0x01
     4d0:	90 81       	ld	r25, Z
     4d2:	89 13       	cpse	r24, r25
     4d4:	34 c0       	rjmp	.+104    	; 0x53e <__vector_11+0x17e>
	{
		sequencer.next_step_flag = 1;
     4d6:	e1 e0       	ldi	r30, 0x01	; 1
     4d8:	f4 e0       	ldi	r31, 0x04	; 4
     4da:	81 81       	ldd	r24, Z+1	; 0x01
     4dc:	80 64       	ori	r24, 0x40	; 64
		internal_clock.beat_counter++; //overflows every 4 beats
     4de:	a5 e7       	ldi	r26, 0x75	; 117
     4e0:	b2 e0       	ldi	r27, 0x02	; 2
     4e2:	9c 91       	ld	r25, X
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	29 0f       	add	r18, r25
     4e8:	23 70       	andi	r18, 0x03	; 3
     4ea:	9c 7f       	andi	r25, 0xFC	; 252
     4ec:	92 2b       	or	r25, r18
     4ee:	9c 93       	st	X, r25
		internal_clock.ppqn_counter = 0;
     4f0:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == sequencer.step_num) { //end of measure
     4f4:	28 2f       	mov	r18, r24
     4f6:	26 95       	lsr	r18
     4f8:	2f 71       	andi	r18, 0x1F	; 31
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	92 0f       	add	r25, r18
     4fe:	9f 71       	andi	r25, 0x1F	; 31
     500:	99 0f       	add	r25, r25
     502:	81 7c       	andi	r24, 0xC1	; 193
     504:	89 2b       	or	r24, r25
     506:	81 83       	std	Z+1, r24	; 0x01
     508:	90 81       	ld	r25, Z
     50a:	92 95       	swap	r25
     50c:	9f 70       	andi	r25, 0x0F	; 15
     50e:	81 70       	andi	r24, 0x01	; 1
     510:	82 95       	swap	r24
     512:	80 7f       	andi	r24, 0xF0	; 240
     514:	89 2b       	or	r24, r25
     516:	28 13       	cpse	r18, r24
     518:	12 c0       	rjmp	.+36     	; 0x53e <__vector_11+0x17e>
			
			sequencer.current_step = 0;
     51a:	81 81       	ldd	r24, Z+1	; 0x01
     51c:	81 7c       	andi	r24, 0xC1	; 193
     51e:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.var_change || sequencer.variation_mode == VAR_AB) {
     520:	80 81       	ld	r24, Z
     522:	83 fd       	sbrc	r24, 3
     524:	03 c0       	rjmp	.+6      	; 0x52c <__vector_11+0x16c>
     526:	86 70       	andi	r24, 0x06	; 6
     528:	84 30       	cpi	r24, 0x04	; 4
     52a:	49 f4       	brne	.+18     	; 0x53e <__vector_11+0x17e>
				sequencer.var_change = 0;	
     52c:	e1 e0       	ldi	r30, 0x01	; 1
     52e:	f4 e0       	ldi	r31, 0x04	; 4
     530:	80 81       	ld	r24, Z
     532:	87 7f       	andi	r24, 0xF7	; 247
				sequencer.variation ^= 1<<0;
     534:	98 2f       	mov	r25, r24
     536:	90 95       	com	r25
     538:	90 fb       	bst	r25, 0
     53a:	80 f9       	bld	r24, 0
     53c:	80 83       	st	Z, r24
			}
			//sequencer.current_measure++;
		}
	}
	
     53e:	ff 91       	pop	r31
     540:	ef 91       	pop	r30
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9c 01       	movw	r18, r24
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19
     574:	dc 01       	movw	r26, r24
     576:	a8 59       	subi	r26, 0x98	; 152
     578:	be 4f       	sbci	r27, 0xFE	; 254
     57a:	2c 91       	ld	r18, X
     57c:	e2 2f       	mov	r30, r18
     57e:	ef 70       	andi	r30, 0x0F	; 15
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	e8 59       	subi	r30, 0x98	; 152
     584:	fd 4f       	sbci	r31, 0xFD	; 253
     586:	ec 01       	movw	r28, r24
     588:	c9 59       	subi	r28, 0x99	; 153
     58a:	de 4f       	sbci	r29, 0xFE	; 254
     58c:	30 81       	ld	r19, Z
     58e:	88 81       	ld	r24, Y
     590:	83 2b       	or	r24, r19
     592:	80 83       	st	Z, r24
	led[led_index].state = 1;
     594:	82 2f       	mov	r24, r18
     596:	80 61       	ori	r24, 0x10	; 16
     598:	8c 93       	st	X, r24

}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <turn_off>:

void turn_off(uint8_t led_index) {
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9c 01       	movw	r18, r24
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	dc 01       	movw	r26, r24
     5b2:	a8 59       	subi	r26, 0x98	; 152
     5b4:	be 4f       	sbci	r27, 0xFE	; 254
     5b6:	2c 91       	ld	r18, X
     5b8:	e2 2f       	mov	r30, r18
     5ba:	ef 70       	andi	r30, 0x0F	; 15
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	e8 59       	subi	r30, 0x98	; 152
     5c0:	fd 4f       	sbci	r31, 0xFD	; 253
     5c2:	ec 01       	movw	r28, r24
     5c4:	c9 59       	subi	r28, 0x99	; 153
     5c6:	de 4f       	sbci	r29, 0xFE	; 254
     5c8:	88 81       	ld	r24, Y
     5ca:	80 95       	com	r24
     5cc:	90 81       	ld	r25, Z
     5ce:	89 23       	and	r24, r25
     5d0:	80 83       	st	Z, r24
	led[led_index].state = 0;
     5d2:	82 2f       	mov	r24, r18
     5d4:	8f 7e       	andi	r24, 0xEF	; 239
     5d6:	8c 93       	st	X, r24
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	2e 0f       	add	r18, r30
     5ea:	3f 1f       	adc	r19, r31
     5ec:	f9 01       	movw	r30, r18
     5ee:	e8 59       	subi	r30, 0x98	; 152
     5f0:	fe 4f       	sbci	r31, 0xFE	; 254
     5f2:	90 81       	ld	r25, Z
     5f4:	94 ff       	sbrs	r25, 4
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <toggle+0x20>
		
		turn_off(led_index);
     5f8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <turn_off>
     5fc:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     5fe:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
     602:	08 95       	ret

00000604 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     604:	e8 e6       	ldi	r30, 0x68	; 104
     606:	f2 e0       	ldi	r31, 0x02	; 2
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	8f 70       	andi	r24, 0x0F	; 15
     60c:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     60e:	87 81       	ldd	r24, Z+7	; 0x07
     610:	80 72       	andi	r24, 0x20	; 32
     612:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     614:	83 81       	ldd	r24, Z+3	; 0x03
     616:	8f 70       	andi	r24, 0x0F	; 15
     618:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     61a:	86 81       	ldd	r24, Z+6	; 0x06
     61c:	8f 7c       	andi	r24, 0xCF	; 207
     61e:	86 83       	std	Z+6, r24	; 0x06
     620:	08 95       	ret

00000622 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     622:	08 95       	ret

00000624 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     624:	08 95       	ret

00000626 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     626:	40 31       	cpi	r20, 0x10	; 16
     628:	20 f4       	brcc	.+8      	; 0x632 <note_on_event+0xc>
     62a:	62 2f       	mov	r22, r18
     62c:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     62e:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     632:	08 95       	ret

00000634 <update_tempo>:
}

void update_tempo() {
	
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     634:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     638:	90 93 5c 02 	sts	0x025C, r25
     63c:	80 93 5b 02 	sts	0x025B, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     640:	20 91 59 02 	lds	r18, 0x0259
     644:	30 91 5a 02 	lds	r19, 0x025A
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     64c:	95 95       	asr	r25
     64e:	87 95       	ror	r24
     650:	95 95       	asr	r25
     652:	87 95       	ror	r24
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	90 93 5a 02 	sts	0x025A, r25
     65c:	80 93 59 02 	sts	0x0259, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     660:	23 e6       	ldi	r18, 0x63	; 99
     662:	34 e0       	ldi	r19, 0x04	; 4
     664:	a9 01       	movw	r20, r18
     666:	48 1b       	sub	r20, r24
     668:	59 0b       	sbc	r21, r25
     66a:	ca 01       	movw	r24, r20
     66c:	e3 e7       	ldi	r30, 0x73	; 115
     66e:	f2 e0       	ldi	r31, 0x02	; 2
     670:	54 83       	std	Z+4, r21	; 0x04
     672:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     674:	25 81       	ldd	r18, Z+5	; 0x05
     676:	36 81       	ldd	r19, Z+6	; 0x06
     678:	42 17       	cp	r20, r18
     67a:	53 07       	cpc	r21, r19
     67c:	11 f0       	breq	.+4      	; 0x682 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     67e:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;	
     682:	e3 e7       	ldi	r30, 0x73	; 115
     684:	f2 e0       	ldi	r31, 0x02	; 2
     686:	83 81       	ldd	r24, Z+3	; 0x03
     688:	94 81       	ldd	r25, Z+4	; 0x04
     68a:	96 83       	std	Z+6, r25	; 0x06
     68c:	85 83       	std	Z+5, r24	; 0x05
     68e:	08 95       	ret

00000690 <update_step_board>:
	
}

void update_step_board() {
     690:	4f 92       	push	r4
     692:	5f 92       	push	r5
     694:	6f 92       	push	r6
     696:	7f 92       	push	r7
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     6ae:	80 91 76 03 	lds	r24, 0x0376
     6b2:	81 ff       	sbrs	r24, 1
     6b4:	c0 c0       	rjmp	.+384    	; 0x836 <update_step_board+0x1a6>
     6b6:	80 91 75 03 	lds	r24, 0x0375
     6ba:	81 50       	subi	r24, 0x01	; 1
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <update_step_board+0x32>
     6c0:	ba c0       	rjmp	.+372    	; 0x836 <update_step_board+0x1a6>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     6c2:	80 91 05 04 	lds	r24, 0x0405
     6c6:	80 31       	cpi	r24, 0x10	; 16
     6c8:	09 f0       	breq	.+2      	; 0x6cc <update_step_board+0x3c>
     6ca:	5f c0       	rjmp	.+190    	; 0x78a <update_step_board+0xfa>
     6cc:	c0 e0       	ldi	r28, 0x00	; 0
     6ce:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     6d0:	0f 2e       	mov	r0, r31
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	af 2e       	mov	r10, r31
     6d6:	f4 e0       	ldi	r31, 0x04	; 4
     6d8:	bf 2e       	mov	r11, r31
     6da:	f0 2d       	mov	r31, r0
     6dc:	cc 24       	eor	r12, r12
     6de:	c3 94       	inc	r12
     6e0:	d1 2c       	mov	r13, r1
     6e2:	0f 2e       	mov	r0, r31
     6e4:	f5 e4       	ldi	r31, 0x45	; 69
     6e6:	9f 2e       	mov	r9, r31
     6e8:	f0 2d       	mov	r31, r0
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     6ea:	0f 2e       	mov	r0, r31
     6ec:	f5 e0       	ldi	r31, 0x05	; 5
     6ee:	ef 2e       	mov	r14, r31
     6f0:	f4 e0       	ldi	r31, 0x04	; 4
     6f2:	ff 2e       	mov	r15, r31
     6f4:	f0 2d       	mov	r31, r0
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
							
				if (button[i].state) {
     6f6:	fe 01       	movw	r30, r28
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	ee 5e       	subi	r30, 0xEE	; 238
     6fe:	fd 4f       	sbci	r31, 0xFD	; 253
     700:	80 81       	ld	r24, Z
     702:	86 ff       	sbrs	r24, 6
     704:	3c c0       	rjmp	.+120    	; 0x77e <update_step_board+0xee>
								
					toggle(i);
     706:	8c 2f       	mov	r24, r28
     708:	0e 94 ef 02 	call	0x5de	; 0x5de <toggle>
					button[i].state ^= button[i].state;
     70c:	fe 01       	movw	r30, r28
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	ee 5e       	subi	r30, 0xEE	; 238
     714:	fd 4f       	sbci	r31, 0xFD	; 253
     716:	80 81       	ld	r24, Z
     718:	8f 7b       	andi	r24, 0xBF	; 191
     71a:	80 83       	st	Z, r24
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     71c:	d5 01       	movw	r26, r10
     71e:	8c 91       	ld	r24, X
     720:	08 2f       	mov	r16, r24
     722:	01 70       	andi	r16, 0x01	; 1
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	90 9e       	mul	r9, r16
     728:	f0 01       	movw	r30, r0
     72a:	91 9e       	mul	r9, r17
     72c:	f0 0d       	add	r31, r0
     72e:	11 24       	eor	r1, r1
     730:	e9 54       	subi	r30, 0x49	; 73
     732:	fc 4f       	sbci	r31, 0xFC	; 252
     734:	c6 01       	movw	r24, r12
     736:	0c 2e       	mov	r0, r28
     738:	02 c0       	rjmp	.+4      	; 0x73e <update_step_board+0xae>
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	0a 94       	dec	r0
     740:	e2 f7       	brpl	.-8      	; 0x73a <update_step_board+0xaa>
     742:	2c 01       	movw	r4, r24
     744:	09 2e       	mov	r0, r25
     746:	00 0c       	add	r0, r0
     748:	66 08       	sbc	r6, r6
     74a:	77 08       	sbc	r7, r7
     74c:	40 81       	ld	r20, Z
     74e:	51 81       	ldd	r21, Z+1	; 0x01
     750:	62 81       	ldd	r22, Z+2	; 0x02
     752:	73 81       	ldd	r23, Z+3	; 0x03
     754:	44 25       	eor	r20, r4
     756:	55 25       	eor	r21, r5
     758:	66 25       	eor	r22, r6
     75a:	77 25       	eor	r23, r7
     75c:	40 83       	st	Z, r20
     75e:	51 83       	std	Z+1, r21	; 0x01
     760:	62 83       	std	Z+2, r22	; 0x02
     762:	73 83       	std	Z+3, r23	; 0x03
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     764:	d7 01       	movw	r26, r14
     766:	ec 91       	ld	r30, X
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ea 5f       	subi	r30, 0xFA	; 250
     770:	fb 4f       	sbci	r31, 0xFB	; 251
     772:	20 81       	ld	r18, Z
     774:	31 81       	ldd	r19, Z+1	; 0x01
     776:	82 27       	eor	r24, r18
     778:	93 27       	eor	r25, r19
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     77e:	21 96       	adiw	r28, 0x01	; 1
     780:	c0 31       	cpi	r28, 0x10	; 16
     782:	d1 05       	cpc	r29, r1
     784:	09 f0       	breq	.+2      	; 0x788 <update_step_board+0xf8>
     786:	b7 cf       	rjmp	.-146    	; 0x6f6 <update_step_board+0x66>
     788:	56 c0       	rjmp	.+172    	; 0x836 <update_step_board+0x1a6>
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     78e:	0f 2e       	mov	r0, r31
     790:	f1 e0       	ldi	r31, 0x01	; 1
     792:	ef 2e       	mov	r14, r31
     794:	f4 e0       	ldi	r31, 0x04	; 4
     796:	ff 2e       	mov	r15, r31
     798:	f0 2d       	mov	r31, r0
     79a:	05 e0       	ldi	r16, 0x05	; 5
     79c:	14 e0       	ldi	r17, 0x04	; 4
     79e:	0f 2e       	mov	r0, r31
     7a0:	f5 e4       	ldi	r31, 0x45	; 69
     7a2:	bf 2e       	mov	r11, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	cc 24       	eor	r12, r12
     7a8:	c3 94       	inc	r12
     7aa:	d1 2c       	mov	r13, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     7ac:	fe 01       	movw	r30, r28
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	ee 5e       	subi	r30, 0xEE	; 238
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	80 81       	ld	r24, Z
     7b8:	86 ff       	sbrs	r24, 6
     7ba:	38 c0       	rjmp	.+112    	; 0x82c <update_step_board+0x19c>
					
				toggle(i);
     7bc:	8c 2f       	mov	r24, r28
     7be:	0e 94 ef 02 	call	0x5de	; 0x5de <toggle>
				button[i].state ^= button[i].state;
     7c2:	fe 01       	movw	r30, r28
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	df 01       	movw	r26, r30
     7ca:	ae 5e       	subi	r26, 0xEE	; 238
     7cc:	bd 4f       	sbci	r27, 0xFD	; 253
     7ce:	8c 91       	ld	r24, X
     7d0:	8f 7b       	andi	r24, 0xBF	; 191
     7d2:	8c 93       	st	X, r24
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     7d4:	d7 01       	movw	r26, r14
     7d6:	2c 91       	ld	r18, X
     7d8:	d8 01       	movw	r26, r16
     7da:	3c 91       	ld	r19, X
     7dc:	83 2f       	mov	r24, r19
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	21 70       	andi	r18, 0x01	; 1
     7e2:	b2 9e       	mul	r11, r18
     7e4:	e0 0d       	add	r30, r0
     7e6:	f1 1d       	adc	r31, r1
     7e8:	11 24       	eor	r1, r1
     7ea:	eb 58       	subi	r30, 0x8B	; 139
     7ec:	fc 4f       	sbci	r31, 0xFC	; 252
     7ee:	a6 01       	movw	r20, r12
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <update_step_board+0x166>
     7f2:	44 0f       	add	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	3a 95       	dec	r19
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <update_step_board+0x162>
     7fa:	9a 01       	movw	r18, r20
     7fc:	42 81       	ldd	r20, Z+2	; 0x02
     7fe:	53 81       	ldd	r21, Z+3	; 0x03
     800:	24 27       	eor	r18, r20
     802:	35 27       	eor	r19, r21
     804:	33 83       	std	Z+3, r19	; 0x03
     806:	22 83       	std	Z+2, r18	; 0x02
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
     808:	fc 01       	movw	r30, r24
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ea 5f       	subi	r30, 0xFA	; 250
     810:	fb 4f       	sbci	r31, 0xFB	; 251
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	96 01       	movw	r18, r12
     818:	0c 2e       	mov	r0, r28
     81a:	02 c0       	rjmp	.+4      	; 0x820 <update_step_board+0x190>
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <update_step_board+0x18c>
     824:	82 27       	eor	r24, r18
     826:	93 27       	eor	r25, r19
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	80 83       	st	Z, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	c0 31       	cpi	r28, 0x10	; 16
     830:	d1 05       	cpc	r29, r1
     832:	09 f0       	breq	.+2      	; 0x836 <update_step_board+0x1a6>
     834:	bb cf       	rjmp	.-138    	; 0x7ac <update_step_board+0x11c>
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	bf 90       	pop	r11
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	7f 90       	pop	r7
     84e:	6f 90       	pop	r6
     850:	5f 90       	pop	r5
     852:	4f 90       	pop	r4
     854:	08 95       	ret

00000856 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     856:	80 91 34 02 	lds	r24, 0x0234
     85a:	86 ff       	sbrs	r24, 6
     85c:	08 c0       	rjmp	.+16     	; 0x86e <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     85e:	e4 e3       	ldi	r30, 0x34	; 52
     860:	f2 e0       	ldi	r31, 0x02	; 2
     862:	8f 7b       	andi	r24, 0xBF	; 191
     864:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     86e:	80 91 36 02 	lds	r24, 0x0236
     872:	86 ff       	sbrs	r24, 6
     874:	08 c0       	rjmp	.+16     	; 0x886 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     876:	e6 e3       	ldi	r30, 0x36	; 54
     878:	f2 e0       	ldi	r31, 0x02	; 2
     87a:	8f 7b       	andi	r24, 0xBF	; 191
     87c:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     886:	80 91 38 02 	lds	r24, 0x0238
     88a:	86 ff       	sbrs	r24, 6
     88c:	08 c0       	rjmp	.+16     	; 0x89e <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     88e:	e8 e3       	ldi	r30, 0x38	; 56
     890:	f2 e0       	ldi	r31, 0x02	; 2
     892:	8f 7b       	andi	r24, 0xBF	; 191
     894:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     89e:	80 91 3a 02 	lds	r24, 0x023A
     8a2:	86 ff       	sbrs	r24, 6
     8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     8a6:	ea e3       	ldi	r30, 0x3A	; 58
     8a8:	f2 e0       	ldi	r31, 0x02	; 2
     8aa:	8f 7b       	andi	r24, 0xBF	; 191
     8ac:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     8b6:	80 91 3c 02 	lds	r24, 0x023C
     8ba:	86 ff       	sbrs	r24, 6
     8bc:	08 c0       	rjmp	.+16     	; 0x8ce <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     8be:	ec e3       	ldi	r30, 0x3C	; 60
     8c0:	f2 e0       	ldi	r31, 0x02	; 2
     8c2:	8f 7b       	andi	r24, 0xBF	; 191
     8c4:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     8ce:	80 91 3e 02 	lds	r24, 0x023E
     8d2:	86 ff       	sbrs	r24, 6
     8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     8d6:	ee e3       	ldi	r30, 0x3E	; 62
     8d8:	f2 e0       	ldi	r31, 0x02	; 2
     8da:	8f 7b       	andi	r24, 0xBF	; 191
     8dc:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	85 e0       	ldi	r24, 0x05	; 5
     8e2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     8e6:	80 91 40 02 	lds	r24, 0x0240
     8ea:	86 ff       	sbrs	r24, 6
     8ec:	08 c0       	rjmp	.+16     	; 0x8fe <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     8ee:	e0 e4       	ldi	r30, 0x40	; 64
     8f0:	f2 e0       	ldi	r31, 0x02	; 2
     8f2:	8f 7b       	andi	r24, 0xBF	; 191
     8f4:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	86 e0       	ldi	r24, 0x06	; 6
     8fa:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     8fe:	80 91 42 02 	lds	r24, 0x0242
     902:	86 ff       	sbrs	r24, 6
     904:	08 c0       	rjmp	.+16     	; 0x916 <__stack+0x17>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     906:	e2 e4       	ldi	r30, 0x42	; 66
     908:	f2 e0       	ldi	r31, 0x02	; 2
     90a:	8f 7b       	andi	r24, 0xBF	; 191
     90c:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     916:	80 91 44 02 	lds	r24, 0x0244
     91a:	86 ff       	sbrs	r24, 6
     91c:	08 c0       	rjmp	.+16     	; 0x92e <__stack+0x2f>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     91e:	e4 e4       	ldi	r30, 0x44	; 68
     920:	f2 e0       	ldi	r31, 0x02	; 2
     922:	8f 7b       	andi	r24, 0xBF	; 191
     924:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     92e:	80 91 46 02 	lds	r24, 0x0246
     932:	86 ff       	sbrs	r24, 6
     934:	08 c0       	rjmp	.+16     	; 0x946 <__stack+0x47>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     936:	e6 e4       	ldi	r30, 0x46	; 70
     938:	f2 e0       	ldi	r31, 0x02	; 2
     93a:	8f 7b       	andi	r24, 0xBF	; 191
     93c:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	89 e0       	ldi	r24, 0x09	; 9
     942:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     946:	80 91 48 02 	lds	r24, 0x0248
     94a:	86 ff       	sbrs	r24, 6
     94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0x5f>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     94e:	e8 e4       	ldi	r30, 0x48	; 72
     950:	f2 e0       	ldi	r31, 0x02	; 2
     952:	8f 7b       	andi	r24, 0xBF	; 191
     954:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     95e:	08 95       	ret

00000960 <refresh>:
}




void refresh(void) {
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     968:	0e 94 1a 03 	call	0x634	; 0x634 <update_tempo>
	read_switches();
     96c:	0e 94 50 06 	call	0xca0	; 0xca0 <read_switches>
	check_start_stop_tap();
     970:	0e 94 c0 06 	call	0xd80	; 0xd80 <check_start_stop_tap>
	
	parse_switch_data();
     974:	0e 94 99 06 	call	0xd32	; 0xd32 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     978:	80 91 75 03 	lds	r24, 0x0375
     97c:	83 30       	cpi	r24, 0x03	; 3
     97e:	11 f4       	brne	.+4      	; 0x984 <refresh+0x24>
     980:	0e 94 2b 04 	call	0x856	; 0x856 <live_hits>
	update_mode();
     984:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <update_mode>
	check_variation_switches();
     988:	0e 94 9c 07 	call	0xf38	; 0xf38 <check_variation_switches>
	check_inst_switches();
     98c:	0e 94 f7 06 	call	0xdee	; 0xdee <check_inst_switches>
	update_step_board();
     990:	0e 94 48 03 	call	0x690	; 0x690 <update_step_board>
	if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     994:	80 91 76 03 	lds	r24, 0x0376
     998:	81 ff       	sbrs	r24, 1
     99a:	6a c0       	rjmp	.+212    	; 0xa70 <refresh+0x110>
		
		if (sequencer.next_step_flag) {
     99c:	80 91 02 04 	lds	r24, 0x0402
     9a0:	86 ff       	sbrs	r24, 6
     9a2:	6f c0       	rjmp	.+222    	; 0xa82 <refresh+0x122>
			sequencer.next_step_flag = 0;
     9a4:	e1 e0       	ldi	r30, 0x01	; 1
     9a6:	f4 e0       	ldi	r31, 0x04	; 4
     9a8:	81 81       	ldd	r24, Z+1	; 0x01
     9aa:	8f 7b       	andi	r24, 0xBF	; 191
     9ac:	81 83       	std	Z+1, r24	; 0x01
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     9ae:	80 78       	andi	r24, 0x80	; 128
     9b0:	88 23       	and	r24, r24
     9b2:	f1 f3       	breq	.-4      	; 0x9b0 <refresh+0x50>
			PORTD |= (1<<TRIG);
     9b4:	5d 9a       	sbi	0x0b, 5	; 11
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];
     9b6:	02 e0       	ldi	r16, 0x02	; 2
     9b8:	14 e0       	ldi	r17, 0x04	; 4
     9ba:	d8 01       	movw	r26, r16
     9bc:	8c 91       	ld	r24, X
     9be:	86 95       	lsr	r24
     9c0:	8f 71       	andi	r24, 0x1F	; 31
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <refresh+0x6c>
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	8a 95       	dec	r24
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <refresh+0x68>
     9d0:	e0 91 05 04 	lds	r30, 0x0405
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	ea 5f       	subi	r30, 0xFA	; 250
     9dc:	fb 4f       	sbci	r31, 0xFB	; 251
     9de:	90 81       	ld	r25, Z
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     9e2:	e8 e6       	ldi	r30, 0x68	; 104
     9e4:	f2 e0       	ldi	r31, 0x02	; 2
     9e6:	49 2f       	mov	r20, r25
     9e8:	42 23       	and	r20, r18
     9ea:	40 95       	com	r20
		
		if (sequencer.next_step_flag) {
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];
     9ec:	92 2b       	or	r25, r18
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     9ee:	94 23       	and	r25, r20
     9f0:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     9f2:	98 2f       	mov	r25, r24
     9f4:	93 23       	and	r25, r19
     9f6:	90 95       	com	r25
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);
     9f8:	83 2b       	or	r24, r19
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     9fa:	89 23       	and	r24, r25
     9fc:	80 83       	st	Z, r24
			trigger_step(); 
     9fe:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
			if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     a02:	80 91 01 04 	lds	r24, 0x0401
     a06:	81 70       	andi	r24, 0x01	; 1
     a08:	c8 2f       	mov	r28, r24
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	db 2f       	mov	r29, r27
     a0e:	85 e4       	ldi	r24, 0x45	; 69
     a10:	8c 9f       	mul	r24, r28
     a12:	f0 01       	movw	r30, r0
     a14:	8d 9f       	mul	r24, r29
     a16:	f0 0d       	add	r31, r0
     a18:	11 24       	eor	r1, r1
     a1a:	e9 54       	subi	r30, 0x49	; 73
     a1c:	fc 4f       	sbci	r31, 0xFC	; 252
     a1e:	d8 01       	movw	r26, r16
     a20:	8c 91       	ld	r24, X
     a22:	86 95       	lsr	r24
     a24:	8f 71       	andi	r24, 0x1F	; 31
     a26:	40 81       	ld	r20, Z
     a28:	51 81       	ldd	r21, Z+1	; 0x01
     a2a:	62 81       	ldd	r22, Z+2	; 0x02
     a2c:	73 81       	ldd	r23, Z+3	; 0x03
     a2e:	8a 01       	movw	r16, r20
     a30:	9b 01       	movw	r18, r22
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <refresh+0xdc>
     a34:	36 95       	lsr	r19
     a36:	27 95       	ror	r18
     a38:	17 95       	ror	r17
     a3a:	07 95       	ror	r16
     a3c:	8a 95       	dec	r24
     a3e:	d2 f7       	brpl	.-12     	; 0xa34 <refresh+0xd4>
     a40:	00 ff       	sbrs	r16, 0
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <refresh+0xf4>
				spi_data[8] |= 1<<ACCENT;
     a44:	e8 e6       	ldi	r30, 0x68	; 104
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	80 85       	ldd	r24, Z+8	; 0x08
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 87       	std	Z+8, r24	; 0x08
				turn_on(ACCENT_1_LED);
     a4e:	84 e1       	ldi	r24, 0x14	; 20
     a50:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
			}
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     a54:	ee e6       	ldi	r30, 0x6E	; 110
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	82 60       	ori	r24, 0x02	; 2
     a5c:	80 83       	st	Z, r24
			TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     a5e:	85 b5       	in	r24, 0x25	; 37
     a60:	83 60       	ori	r24, 0x03	; 3
     a62:	85 bd       	out	0x25, r24	; 37
			sequencer.trigger_finished = 0;
     a64:	e1 e0       	ldi	r30, 0x01	; 1
     a66:	f4 e0       	ldi	r31, 0x04	; 4
     a68:	81 81       	ldd	r24, Z+1	; 0x01
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	81 83       	std	Z+1, r24	; 0x01
     a6e:	09 c0       	rjmp	.+18     	; 0xa82 <refresh+0x122>
		} else {
			

			
		}		
	} else if (sequencer.next_step_flag){
     a70:	80 91 02 04 	lds	r24, 0x0402
     a74:	86 ff       	sbrs	r24, 6
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <refresh+0x122>
		
			sequencer.next_step_flag = 0;
     a78:	e1 e0       	ldi	r30, 0x01	; 1
     a7a:	f4 e0       	ldi	r31, 0x04	; 4
     a7c:	81 81       	ldd	r24, Z+1	; 0x01
     a7e:	8f 7b       	andi	r24, 0xBF	; 191
     a80:	81 83       	std	Z+1, r24	; 0x01
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     a82:	0e 94 2c 06 	call	0xc58	; 0xc58 <update_spi>
	PORTD &= ~(1<<TRIG);
     a86:	5d 98       	cbi	0x0b, 5	; 11
	//if (trigger_finished && sequencer.SHIFT) update_tempo(); //turning off SPI during pot read creates problem for trigger interrupt
	
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     a92:	8f e1       	ldi	r24, 0x1F	; 31
     a94:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     a98:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     a9c:	88 e9       	ldi	r24, 0x98	; 152
     a9e:	80 93 c1 00 	sts	0x00C1, r24
     aa2:	08 95       	ret

00000aa4 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     aa4:	1f 92       	push	r1
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	2f 93       	push	r18
     ab0:	3f 93       	push	r19
     ab2:	4f 93       	push	r20
     ab4:	5f 93       	push	r21
     ab6:	6f 93       	push	r22
     ab8:	7f 93       	push	r23
     aba:	8f 93       	push	r24
     abc:	9f 93       	push	r25
     abe:	af 93       	push	r26
     ac0:	bf 93       	push	r27
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	1f 92       	push	r1
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     ad0:	80 91 c6 00 	lds	r24, 0x00C6
     ad4:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     ad6:	ae 01       	movw	r20, r28
     ad8:	4f 5f       	subi	r20, 0xFF	; 255
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	88 e8       	ldi	r24, 0x88	; 136
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 c1 08 	call	0x1182	; 0x1182 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     ae6:	0f 90       	pop	r0
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	bf 91       	pop	r27
     af2:	af 91       	pop	r26
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	7f 91       	pop	r23
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     b0e:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     b10:	8d b1       	in	r24, 0x0d	; 13
     b12:	8c 60       	ori	r24, 0x0C	; 12
     b14:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     b16:	87 b1       	in	r24, 0x07	; 7
     b18:	8e 60       	ori	r24, 0x0E	; 14
     b1a:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     b1c:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     b1e:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     b20:	88 b1       	in	r24, 0x08	; 8
     b22:	81 7f       	andi	r24, 0xF1	; 241
     b24:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     b26:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     b28:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     b2a:	80 e5       	ldi	r24, 0x50	; 80
     b2c:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     b30:	ed ea       	ldi	r30, 0xAD	; 173
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     b40:	8d e1       	ldi	r24, 0x1D	; 29
     b42:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
	turn_on(FILL_MANUAL);
     b46:	82 e2       	ldi	r24, 0x22	; 34
     b48:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
	
	update_spi();
     b4c:	0e 94 2c 06 	call	0xc58	; 0xc58 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     b50:	84 b5       	in	r24, 0x24	; 36
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     b56:	81 ee       	ldi	r24, 0xE1	; 225
     b58:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     b5a:	88 e8       	ldi	r24, 0x88	; 136
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 90 08 	call	0x1120	; 0x1120 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     b62:	63 e1       	ldi	r22, 0x13	; 19
     b64:	73 e0       	ldi	r23, 0x03	; 3
     b66:	88 e8       	ldi	r24, 0x88	; 136
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 84 08 	call	0x1108	; 0x1108 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     b6e:	61 e1       	ldi	r22, 0x11	; 17
     b70:	73 e0       	ldi	r23, 0x03	; 3
     b72:	88 e8       	ldi	r24, 0x88	; 136
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 88 08 	call	0x1110	; 0x1110 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     b7a:	62 e1       	ldi	r22, 0x12	; 18
     b7c:	73 e0       	ldi	r23, 0x03	; 3
     b7e:	88 e8       	ldi	r24, 0x88	; 136
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 8c 08 	call	0x1118	; 0x1118 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     b86:	0e 94 49 05 	call	0xa92	; 0xa92 <setup_midi_usart>
	
	setup_internal_clock();
     b8a:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     b8e:	e3 e7       	ldi	r30, 0x73	; 115
     b90:	f2 e0       	ldi	r31, 0x02	; 2
     b92:	86 e0       	ldi	r24, 0x06	; 6
     b94:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	81 83       	std	Z+1, r24	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     b9a:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     b9e:	e1 e0       	ldi	r30, 0x01	; 1
     ba0:	f4 e0       	ldi	r31, 0x04	; 4
     ba2:	91 81       	ldd	r25, Z+1	; 0x01
     ba4:	90 68       	ori	r25, 0x80	; 128
	sequencer.START = 0;
     ba6:	a6 e7       	ldi	r26, 0x76	; 118
     ba8:	b3 e0       	ldi	r27, 0x03	; 3
     baa:	8c 91       	ld	r24, X
     bac:	8d 7f       	andi	r24, 0xFD	; 253
     bae:	8c 93       	st	X, r24
	//update_tempo();
	sequencer.variation_mode = 0;
     bb0:	80 81       	ld	r24, Z
     bb2:	89 7f       	andi	r24, 0xF9	; 249
	sequencer.step_num = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     bb4:	80 6f       	ori	r24, 0xF0	; 240
     bb6:	80 83       	st	Z, r24
     bb8:	9e 7f       	andi	r25, 0xFE	; 254
     bba:	91 83       	std	Z+1, r25	; 0x01
	turn_on(BASIC_VAR_A_LED);
     bbc:	84 e2       	ldi	r24, 0x24	; 36
     bbe:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
	sei(); //enable global interrupts	
     bc2:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     bc4:	88 e8       	ldi	r24, 0x88	; 136
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <midi_device_process>
	
	refresh();		
     bcc:	0e 94 b0 04 	call	0x960	; 0x960 <refresh>

	
	}
     bd0:	f9 cf       	rjmp	.-14     	; 0xbc4 <main+0xb6>

00000bd2 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     bd2:	80 91 52 02 	lds	r24, 0x0252
     bd6:	86 ff       	sbrs	r24, 6
     bd8:	34 c0       	rjmp	.+104    	; 0xc42 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     bda:	e2 e5       	ldi	r30, 0x52	; 82
     bdc:	f2 e0       	ldi	r31, 0x02	; 2
     bde:	8f 7b       	andi	r24, 0xBF	; 191
     be0:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     be2:	80 91 76 03 	lds	r24, 0x0376
     be6:	80 ff       	sbrs	r24, 0
     be8:	0c c0       	rjmp	.+24     	; 0xc02 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     bea:	80 91 5d 02 	lds	r24, 0x025D
     bee:	88 23       	and	r24, r24
     bf0:	21 f0       	breq	.+8      	; 0xbfa <update_mode+0x28>
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	80 93 5d 02 	sts	0x025D, r24
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <update_mode+0x44>
     bfa:	85 e0       	ldi	r24, 0x05	; 5
     bfc:	80 93 5d 02 	sts	0x025D, r24
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c02:	80 91 5d 02 	lds	r24, 0x025D
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	86 30       	cpi	r24, 0x06	; 6
     c0a:	19 f0       	breq	.+6      	; 0xc12 <update_mode+0x40>
     c0c:	80 93 5d 02 	sts	0x025D, r24
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <update_mode+0x44>
     c12:	10 92 5d 02 	sts	0x025D, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c16:	20 91 5d 02 	lds	r18, 0x025D
     c1a:	e2 2f       	mov	r30, r18
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	e4 5f       	subi	r30, 0xF4	; 244
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	80 81       	ld	r24, Z
     c24:	80 93 75 03 	sts	0x0375, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     c28:	e8 e6       	ldi	r30, 0x68	; 104
     c2a:	f2 e0       	ldi	r31, 0x02	; 2
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <update_mode+0x64>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	2a 95       	dec	r18
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     c3a:	94 81       	ldd	r25, Z+4	; 0x04
     c3c:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     c3e:	89 2b       	or	r24, r25
     c40:	84 83       	std	Z+4, r24	; 0x04
     c42:	08 95       	ret

00000c44 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     c44:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     c48:	ed ea       	ldi	r30, 0xAD	; 173
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 23       	and	r24, r24
     c50:	ec f7       	brge	.-6      	; 0xc4c <spi_shift_byte+0x8>
	return SPDR1;
     c52:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     c56:	08 95       	ret

00000c58 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     c5c:	c8 e6       	ldi	r28, 0x68	; 104
     c5e:	d2 e0       	ldi	r29, 0x02	; 2
     c60:	88 81       	ld	r24, Y
     c62:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     c78:	8c 81       	ldd	r24, Y+4	; 0x04
     c7a:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     c8a:	8f 81       	ldd	r24, Y+7	; 0x07
     c8c:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     c90:	88 85       	ldd	r24, Y+8	; 0x08
     c92:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     c96:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     c98:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <read_switches>:

void read_switches(void) { //reads switch data
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     ca4:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
     cac:	c3 e6       	ldi	r28, 0x63	; 99
     cae:	d2 e0       	ldi	r29, 0x02	; 2
     cb0:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
     cb8:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
     cc0:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
     cc8:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_shift_byte>
     cd0:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     cd2:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     cd4:	98 81       	ld	r25, Y
     cd6:	39 2f       	mov	r19, r25
     cd8:	36 95       	lsr	r19
     cda:	e6 e7       	ldi	r30, 0x76	; 118
     cdc:	f3 e0       	ldi	r31, 0x03	; 3
     cde:	20 81       	ld	r18, Z
     ce0:	30 fb       	bst	r19, 0
     ce2:	20 f9       	bld	r18, 0
     ce4:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     ce6:	ee e5       	ldi	r30, 0x5E	; 94
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	20 81       	ld	r18, Z
     cec:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     cee:	29 27       	eor	r18, r25
     cf0:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     cf2:	92 23       	and	r25, r18
     cf4:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     cf6:	21 81       	ldd	r18, Z+1	; 0x01
     cf8:	99 81       	ldd	r25, Y+1	; 0x01
     cfa:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     cfc:	29 27       	eor	r18, r25
     cfe:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     d00:	92 23       	and	r25, r18
     d02:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     d04:	22 81       	ldd	r18, Z+2	; 0x02
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     d0a:	29 27       	eor	r18, r25
     d0c:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     d0e:	92 23       	and	r25, r18
     d10:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     d12:	23 81       	ldd	r18, Z+3	; 0x03
     d14:	9b 81       	ldd	r25, Y+3	; 0x03
     d16:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     d18:	29 27       	eor	r18, r25
     d1a:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     d1c:	92 23       	and	r25, r18
     d1e:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     d20:	94 81       	ldd	r25, Z+4	; 0x04
     d22:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     d24:	98 27       	eor	r25, r24
     d26:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     d28:	89 23       	and	r24, r25
     d2a:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     d36:	da 01       	movw	r26, r20
     d38:	aa 0f       	add	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	ae 5e       	subi	r26, 0xEE	; 238
     d3e:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     d40:	8c 91       	ld	r24, X
     d42:	e8 2f       	mov	r30, r24
     d44:	e6 95       	lsr	r30
     d46:	e6 95       	lsr	r30
     d48:	e6 95       	lsr	r30
     d4a:	e7 70       	andi	r30, 0x07	; 7
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	ed 59       	subi	r30, 0x9D	; 157
     d50:	fd 4f       	sbci	r31, 0xFD	; 253
     d52:	20 81       	ld	r18, Z
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	98 2f       	mov	r25, r24
     d58:	97 70       	andi	r25, 0x07	; 7
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <parse_switch_data+0x2e>
     d5c:	35 95       	asr	r19
     d5e:	27 95       	ror	r18
     d60:	9a 95       	dec	r25
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <parse_switch_data+0x2a>
     d64:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     d66:	86 fb       	bst	r24, 6
     d68:	99 27       	eor	r25, r25
     d6a:	90 f9       	bld	r25, 0
     d6c:	29 27       	eor	r18, r25
     d6e:	20 fb       	bst	r18, 0
     d70:	86 f9       	bld	r24, 6
     d72:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     d74:	4f 5f       	subi	r20, 0xFF	; 255
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	43 32       	cpi	r20, 0x23	; 35
     d7a:	51 05       	cpc	r21, r1
     d7c:	e1 f6       	brne	.-72     	; 0xd36 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     d7e:	08 95       	ret

00000d80 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     d80:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     d82:	80 91 71 02 	lds	r24, 0x0271
     d86:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     d88:	89 27       	eor	r24, r25
     d8a:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     d8e:	89 23       	and	r24, r25
     d90:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
     d94:	e6 e7       	ldi	r30, 0x76	; 118
     d96:	f3 e0       	ldi	r31, 0x03	; 3
     d98:	90 81       	ld	r25, Z
     d9a:	91 fb       	bst	r25, 1
     d9c:	22 27       	eor	r18, r18
     d9e:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     da0:	86 95       	lsr	r24
     da2:	82 27       	eor	r24, r18
     da4:	80 fb       	bst	r24, 0
     da6:	91 f9       	bld	r25, 1
     da8:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
     daa:	91 ff       	sbrs	r25, 1
     dac:	1d c0       	rjmp	.+58     	; 0xde8 <check_start_stop_tap+0x68>
     dae:	21 11       	cpse	r18, r1
     db0:	1d c0       	rjmp	.+58     	; 0xdec <check_start_stop_tap+0x6c>
		
		sequencer.current_step = 0;
     db2:	e1 e0       	ldi	r30, 0x01	; 1
     db4:	f4 e0       	ldi	r31, 0x04	; 4
     db6:	81 81       	ldd	r24, Z+1	; 0x01
		sequencer.next_step_flag = 1;
     db8:	81 7c       	andi	r24, 0xC1	; 193
     dba:	80 64       	ori	r24, 0x40	; 64
     dbc:	81 83       	std	Z+1, r24	; 0x01
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
     dbe:	10 92 74 02 	sts	0x0274, r1
     dc2:	08 95       	ret
		
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
     dc4:	0e 94 02 03 	call	0x604	; 0x604 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
     dc8:	80 91 05 04 	lds	r24, 0x0405
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	e8 0f       	add	r30, r24
     dd6:	f9 1f       	adc	r31, r25
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	e0 50       	subi	r30, 0x00	; 0
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	85 81       	ldd	r24, Z+5	; 0x05
     de2:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
     de6:	08 95       	ret
		sequencer.next_step_flag = 1;
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
		
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
     de8:	21 30       	cpi	r18, 0x01	; 1
     dea:	61 f3       	breq	.-40     	; 0xdc4 <check_start_stop_tap+0x44>
     dec:	08 95       	ret

00000dee <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
     dee:	3f 92       	push	r3
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	0f 2e       	mov	r0, r31
     e12:	f5 e0       	ldi	r31, 0x05	; 5
     e14:	ef 2e       	mov	r14, r31
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	ff 2e       	mov	r15, r31
     e1a:	f0 2d       	mov	r31, r0
     e1c:	0f 2e       	mov	r0, r31
     e1e:	fb e3       	ldi	r31, 0x3B	; 59
     e20:	8f 2e       	mov	r8, r31
     e22:	f1 e0       	ldi	r31, 0x01	; 1
     e24:	9f 2e       	mov	r9, r31
     e26:	f0 2d       	mov	r31, r0
     e28:	02 e1       	ldi	r16, 0x12	; 18
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	c1 e1       	ldi	r28, 0x11	; 17
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
     e30:	c1 2c       	mov	r12, r1
     e32:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     e34:	0f 2e       	mov	r0, r31
     e36:	f5 e0       	ldi	r31, 0x05	; 5
     e38:	af 2e       	mov	r10, r31
     e3a:	f4 e0       	ldi	r31, 0x04	; 4
     e3c:	bf 2e       	mov	r11, r31
     e3e:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     e40:	0f 2e       	mov	r0, r31
     e42:	ff e5       	ldi	r31, 0x5F	; 95
     e44:	4f 2e       	mov	r4, r31
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	5f 2e       	mov	r5, r31
     e4a:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     e4c:	0f 2e       	mov	r0, r31
     e4e:	ff e0       	ldi	r31, 0x0F	; 15
     e50:	3f 2e       	mov	r3, r31
     e52:	f0 2d       	mov	r31, r0
     e54:	0c c0       	rjmp	.+24     	; 0xe6e <check_inst_switches+0x80>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	c8 1a       	sub	r12, r24
     e5a:	d8 0a       	sbc	r13, r24
     e5c:	21 96       	adiw	r28, 0x01	; 1
     e5e:	0f 5f       	subi	r16, 0xFF	; 255
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	a6 e0       	ldi	r26, 0x06	; 6
     e64:	ea 0e       	add	r14, r26
     e66:	f1 1c       	adc	r15, r1
     e68:	b6 e0       	ldi	r27, 0x06	; 6
     e6a:	8b 0e       	add	r8, r27
     e6c:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     e6e:	fe 01       	movw	r30, r28
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ee 5e       	subi	r30, 0xEE	; 238
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	80 81       	ld	r24, Z
     e7a:	86 ff       	sbrs	r24, 6
     e7c:	37 c0       	rjmp	.+110    	; 0xeec <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
     e7e:	fe 01       	movw	r30, r28
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ee 5e       	subi	r30, 0xEE	; 238
     e86:	fd 4f       	sbci	r31, 0xFD	; 253
     e88:	8f 7b       	andi	r24, 0xBF	; 191
     e8a:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
     e8c:	0e 94 02 03 	call	0x604	; 0x604 <turn_off_all_inst_leds>
     e90:	f7 01       	movw	r30, r14
     e92:	d7 01       	movw	r26, r14
     e94:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
     e96:	8c 91       	ld	r24, X
     e98:	8f 3f       	cpi	r24, 0xFF	; 255
     e9a:	a9 f0       	breq	.+42     	; 0xec6 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
     e9c:	d5 01       	movw	r26, r10
     e9e:	8c 91       	ld	r24, X
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	c8 16       	cp	r12, r24
     ea4:	d9 06       	cpc	r13, r25
     ea6:	49 f4       	brne	.+18     	; 0xeba <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
     ea8:	f4 01       	movw	r30, r8
     eaa:	80 81       	ld	r24, Z
     eac:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
     eb0:	89 e0       	ldi	r24, 0x09	; 9
     eb2:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
     eb4:	d5 01       	movw	r26, r10
     eb6:	8c 93       	st	X, r24
     eb8:	19 c0       	rjmp	.+50     	; 0xeec <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
     eba:	80 81       	ld	r24, Z
     ebc:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
     ec0:	f5 01       	movw	r30, r10
     ec2:	c0 82       	st	Z, r12
     ec4:	13 c0       	rjmp	.+38     	; 0xeec <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     ec6:	d5 01       	movw	r26, r10
     ec8:	8c 91       	ld	r24, X
     eca:	86 30       	cpi	r24, 0x06	; 6
     ecc:	51 f4       	brne	.+20     	; 0xee2 <check_inst_switches+0xf4>
     ece:	c7 31       	cpi	r28, 0x17	; 23
     ed0:	d1 05       	cpc	r29, r1
     ed2:	39 f4       	brne	.+14     	; 0xee2 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
     ed4:	f2 01       	movw	r30, r4
     ed6:	80 81       	ld	r24, Z
     ed8:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
					sequencer.current_inst = MA;
     edc:	d5 01       	movw	r26, r10
     ede:	3c 92       	st	X, r3
     ee0:	ba cf       	rjmp	.-140    	; 0xe56 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
     ee2:	80 81       	ld	r24, Z
     ee4:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
     ee8:	f5 01       	movw	r30, r10
     eea:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
     eec:	0c 31       	cpi	r16, 0x1C	; 28
     eee:	11 05       	cpc	r17, r1
     ef0:	0c f4       	brge	.+2      	; 0xef4 <check_inst_switches+0x106>
     ef2:	b1 cf       	rjmp	.-158    	; 0xe56 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
     ef4:	80 91 32 02 	lds	r24, 0x0232
     ef8:	86 ff       	sbrs	r24, 6
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f2 e0       	ldi	r31, 0x02	; 2
     f00:	8f 7b       	andi	r24, 0xBF	; 191
     f02:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
     f04:	0e 94 02 03 	call	0x604	; 0x604 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
     f08:	84 e1       	ldi	r24, 0x14	; 20
     f0a:	0e 94 b2 02 	call	0x564	; 0x564 <turn_on>
		sequencer.current_inst = AC;
     f0e:	80 e1       	ldi	r24, 0x10	; 16
     f10:	80 93 05 04 	sts	0x0405, r24
	}
	
}	
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	9f 90       	pop	r9
     f2a:	8f 90       	pop	r8
     f2c:	7f 90       	pop	r7
     f2e:	6f 90       	pop	r6
     f30:	5f 90       	pop	r5
     f32:	4f 90       	pop	r4
     f34:	3f 90       	pop	r3
     f36:	08 95       	ret

00000f38 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
     f38:	80 91 4e 02 	lds	r24, 0x024E
     f3c:	86 ff       	sbrs	r24, 6
     f3e:	21 c0       	rjmp	.+66     	; 0xf82 <check_variation_switches+0x4a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
     f40:	ee e4       	ldi	r30, 0x4E	; 78
     f42:	f2 e0       	ldi	r31, 0x02	; 2
     f44:	8f 7b       	andi	r24, 0xBF	; 191
     f46:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
     f48:	80 91 01 04 	lds	r24, 0x0401
     f4c:	86 95       	lsr	r24
     f4e:	8f 5f       	subi	r24, 0xFF	; 255
     f50:	83 70       	andi	r24, 0x03	; 3
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	41 f0       	breq	.+16     	; 0xf66 <check_variation_switches+0x2e>
     f56:	e1 e0       	ldi	r30, 0x01	; 1
     f58:	f4 e0       	ldi	r31, 0x04	; 4
     f5a:	88 0f       	add	r24, r24
     f5c:	90 81       	ld	r25, Z
     f5e:	99 7f       	andi	r25, 0xF9	; 249
     f60:	89 2b       	or	r24, r25
     f62:	80 83       	st	Z, r24
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <check_variation_switches+0x38>
     f66:	e1 e0       	ldi	r30, 0x01	; 1
     f68:	f4 e0       	ldi	r31, 0x04	; 4
     f6a:	80 81       	ld	r24, Z
     f6c:	89 7f       	andi	r24, 0xF9	; 249
     f6e:	80 83       	st	Z, r24
		if (sequencer.START) sequencer.var_change = 1;
     f70:	80 91 76 03 	lds	r24, 0x0376
     f74:	81 ff       	sbrs	r24, 1
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <check_variation_switches+0x4a>
     f78:	e1 e0       	ldi	r30, 0x01	; 1
     f7a:	f4 e0       	ldi	r31, 0x04	; 4
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	80 83       	st	Z, r24
     f82:	08 95       	ret

00000f84 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     f84:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     f86:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     f88:	74 83       	std	Z+4, r23	; 0x04
     f8a:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	10 82       	st	Z, r1
     f90:	08 95       	ret

00000f92 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     fa0:	0e 94 42 08 	call	0x1084	; 0x1084 <store_and_clear_interrupt>
     fa4:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     fa6:	f9 80       	ldd	r15, Y+1	; 0x01
     fa8:	4f 2d       	mov	r20, r15
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	ca 01       	movw	r24, r20
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	2a 81       	ldd	r18, Y+2	; 0x02
     fb2:	62 2f       	mov	r22, r18
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divmodhi4>
     fba:	28 81       	ld	r18, Y
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	82 17       	cp	r24, r18
     fc0:	93 07       	cpc	r25, r19
     fc2:	29 f4       	brne	.+10     	; 0xfce <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
     fc4:	81 2f       	mov	r24, r17
     fc6:	0e 94 45 08 	call	0x108a	; 0x108a <restore_interrupt_setting>
      return false;
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	12 c0       	rjmp	.+36     	; 0xff2 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
     fce:	eb 81       	ldd	r30, Y+3	; 0x03
     fd0:	fc 81       	ldd	r31, Y+4	; 0x04
     fd2:	ef 0d       	add	r30, r15
     fd4:	f1 1d       	adc	r31, r1
     fd6:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
     fd8:	29 81       	ldd	r18, Y+1	; 0x01
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	c9 01       	movw	r24, r18
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	6a 81       	ldd	r22, Y+2	; 0x02
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divmodhi4>
     fe8:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     fea:	81 2f       	mov	r24, r17
     fec:	0e 94 45 08 	call	0x108a	; 0x108a <restore_interrupt_setting>
      return true;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	08 95       	ret

00000ffe <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1004:	0e 94 42 08 	call	0x1084	; 0x1084 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1008:	39 81       	ldd	r19, Y+1	; 0x01
    100a:	28 81       	ld	r18, Y
    100c:	32 17       	cp	r19, r18
    100e:	18 f0       	brcs	.+6      	; 0x1016 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1010:	c3 2f       	mov	r28, r19
    1012:	c2 1b       	sub	r28, r18
    1014:	04 c0       	rjmp	.+8      	; 0x101e <bytequeue_length+0x20>
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	c3 2f       	mov	r28, r19
    101a:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    101c:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    101e:	0e 94 45 08 	call	0x108a	; 0x108a <restore_interrupt_setting>
   return len;
}
    1022:	8c 2f       	mov	r24, r28
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    102a:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    102c:	80 81       	ld	r24, Z
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	9b 01       	movw	r18, r22
    1032:	28 0f       	add	r18, r24
    1034:	31 1d       	adc	r19, r1
    1036:	c9 01       	movw	r24, r18
    1038:	62 81       	ldd	r22, Z+2	; 0x02
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divmodhi4>
    1040:	03 80       	ldd	r0, Z+3	; 0x03
    1042:	f4 81       	ldd	r31, Z+4	; 0x04
    1044:	e0 2d       	mov	r30, r0
    1046:	e8 0f       	add	r30, r24
    1048:	f9 1f       	adc	r31, r25
}
    104a:	80 81       	ld	r24, Z
    104c:	08 95       	ret

0000104e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1058:	0e 94 42 08 	call	0x1084	; 0x1084 <store_and_clear_interrupt>
    105c:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    105e:	88 81       	ld	r24, Y
    1060:	21 2f       	mov	r18, r17
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	b9 01       	movw	r22, r18
    1066:	68 0f       	add	r22, r24
    1068:	71 1d       	adc	r23, r1
    106a:	cb 01       	movw	r24, r22
    106c:	6a 81       	ldd	r22, Y+2	; 0x02
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divmodhi4>
    1074:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1076:	84 2f       	mov	r24, r20
    1078:	0e 94 45 08 	call	0x108a	; 0x108a <restore_interrupt_setting>
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	08 95       	ret

00001084 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1084:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1086:	f8 94       	cli
   return sreg;
}
    1088:	08 95       	ret

0000108a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    108a:	8f bf       	out	0x3f, r24	; 63
    108c:	08 95       	ret

0000108e <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    108e:	88 1f       	adc	r24, r24
    1090:	88 27       	eor	r24, r24
    1092:	88 1f       	adc	r24, r24
    1094:	08 95       	ret

00001096 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	88 3f       	cpi	r24, 0xF8	; 248
    109a:	08 f4       	brcc	.+2      	; 0x109e <midi_is_realtime+0x8>
    109c:	90 e0       	ldi	r25, 0x00	; 0
}
    109e:	89 2f       	mov	r24, r25
    10a0:	08 95       	ret

000010a2 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    10a2:	98 2f       	mov	r25, r24
    10a4:	90 7f       	andi	r25, 0xF0	; 240
    10a6:	90 3c       	cpi	r25, 0xC0	; 192
    10a8:	b1 f0       	breq	.+44     	; 0x10d6 <midi_packet_length+0x34>
    10aa:	58 f4       	brcc	.+22     	; 0x10c2 <midi_packet_length+0x20>
    10ac:	90 39       	cpi	r25, 0x90	; 144
    10ae:	41 f1       	breq	.+80     	; 0x1100 <midi_packet_length+0x5e>
    10b0:	18 f4       	brcc	.+6      	; 0x10b8 <midi_packet_length+0x16>
    10b2:	90 38       	cpi	r25, 0x80	; 128
    10b4:	19 f5       	brne	.+70     	; 0x10fc <midi_packet_length+0x5a>
    10b6:	24 c0       	rjmp	.+72     	; 0x1100 <midi_packet_length+0x5e>
    10b8:	90 3a       	cpi	r25, 0xA0	; 160
    10ba:	11 f1       	breq	.+68     	; 0x1100 <midi_packet_length+0x5e>
    10bc:	90 3b       	cpi	r25, 0xB0	; 176
    10be:	f1 f4       	brne	.+60     	; 0x10fc <midi_packet_length+0x5a>
    10c0:	1f c0       	rjmp	.+62     	; 0x1100 <midi_packet_length+0x5e>
    10c2:	90 3e       	cpi	r25, 0xE0	; 224
    10c4:	e9 f0       	breq	.+58     	; 0x1100 <midi_packet_length+0x5e>
    10c6:	18 f4       	brcc	.+6      	; 0x10ce <midi_packet_length+0x2c>
    10c8:	90 3d       	cpi	r25, 0xD0	; 208
    10ca:	29 f0       	breq	.+10     	; 0x10d6 <midi_packet_length+0x34>
    10cc:	17 c0       	rjmp	.+46     	; 0x10fc <midi_packet_length+0x5a>
    10ce:	90 3f       	cpi	r25, 0xF0	; 240
    10d0:	21 f0       	breq	.+8      	; 0x10da <midi_packet_length+0x38>
    10d2:	93 3f       	cpi	r25, 0xF3	; 243
    10d4:	99 f4       	brne	.+38     	; 0x10fc <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	08 95       	ret
      case 0xF0:
         switch(status) {
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	fc 01       	movw	r30, r24
    10de:	e1 5f       	subi	r30, 0xF1	; 241
    10e0:	f1 09       	sbc	r31, r1
    10e2:	ef 30       	cpi	r30, 0x0F	; 15
    10e4:	f1 05       	cpc	r31, r1
    10e6:	40 f4       	brcc	.+16     	; 0x10f8 <midi_packet_length+0x56>
    10e8:	e6 5a       	subi	r30, 0xA6	; 166
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	08 95       	ret
         }
      default:
         return UNDEFINED;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1106:	08 95       	ret

00001108 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1108:	fc 01       	movw	r30, r24
    110a:	75 83       	std	Z+5, r23	; 0x05
    110c:	64 83       	std	Z+4, r22	; 0x04
    110e:	08 95       	ret

00001110 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1110:	fc 01       	movw	r30, r24
    1112:	77 83       	std	Z+7, r23	; 0x07
    1114:	66 83       	std	Z+6, r22	; 0x06
    1116:	08 95       	ret

00001118 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1118:	fc 01       	movw	r30, r24
    111a:	77 8b       	std	Z+23, r23	; 0x17
    111c:	66 8b       	std	Z+22, r22	; 0x16
    111e:	08 95       	ret

00001120 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1126:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1128:	1f a2       	std	Y+39, r1	; 0x27
    112a:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    112c:	bc 01       	movw	r22, r24
    112e:	68 5d       	subi	r22, 0xD8	; 216
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	40 ec       	ldi	r20, 0xC0	; 192
    1134:	88 51       	subi	r24, 0x18	; 24
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	0e 94 c2 07 	call	0xf84	; 0xf84 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    113c:	1b 82       	std	Y+3, r1	; 0x03
    113e:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1140:	1d 82       	std	Y+5, r1	; 0x05
    1142:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1144:	1f 82       	std	Y+7, r1	; 0x07
    1146:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1148:	19 86       	std	Y+9, r1	; 0x09
    114a:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    114c:	1b 86       	std	Y+11, r1	; 0x0b
    114e:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1150:	1d 86       	std	Y+13, r1	; 0x0d
    1152:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1154:	1f 86       	std	Y+15, r1	; 0x0f
    1156:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1158:	19 8a       	std	Y+17, r1	; 0x11
    115a:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    115c:	1b 8a       	std	Y+19, r1	; 0x13
    115e:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1160:	1d 8a       	std	Y+21, r1	; 0x15
    1162:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1164:	1f 8a       	std	Y+23, r1	; 0x17
    1166:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1168:	19 8e       	std	Y+25, r1	; 0x19
    116a:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    116c:	1b 8e       	std	Y+27, r1	; 0x1b
    116e:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1170:	1d 8e       	std	Y+29, r1	; 0x1d
    1172:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1174:	1f 8e       	std	Y+31, r1	; 0x1f
    1176:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1178:	19 a2       	std	Y+33, r1	; 0x21
    117a:	18 a2       	std	Y+32, r1	; 0x20
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    118e:	66 23       	and	r22, r22
    1190:	99 f0       	breq	.+38     	; 0x11b8 <midi_device_input+0x36>
    1192:	ea 01       	movw	r28, r20
    1194:	61 50       	subi	r22, 0x01	; 1
    1196:	06 2f       	mov	r16, r22
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	0f 5f       	subi	r16, 0xFF	; 255
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	04 0f       	add	r16, r20
    11a0:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    11a2:	7c 01       	movw	r14, r24
    11a4:	28 ee       	ldi	r18, 0xE8	; 232
    11a6:	e2 0e       	add	r14, r18
    11a8:	f1 1c       	adc	r15, r1
    11aa:	69 91       	ld	r22, Y+
    11ac:	c7 01       	movw	r24, r14
    11ae:	0e 94 c9 07 	call	0xf92	; 0xf92 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    11b2:	c0 17       	cp	r28, r16
    11b4:	d1 07       	cpc	r29, r17
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	00 d0       	rcall	.+0      	; 0x11dc <midi_input_callbacks+0x16>
    11dc:	1f 92       	push	r1
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	7c 01       	movw	r14, r24
    11e4:	6b 01       	movw	r12, r22
    11e6:	14 2f       	mov	r17, r20
    11e8:	b2 2e       	mov	r11, r18
    11ea:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    11ec:	dc 01       	movw	r26, r24
    11ee:	95 96       	adiw	r26, 0x25	; 37
    11f0:	8c 91       	ld	r24, X
    11f2:	95 97       	sbiw	r26, 0x25	; 37
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	11 f5       	brne	.+68     	; 0x123c <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    11f8:	5a 96       	adiw	r26, 0x1a	; 26
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	5b 97       	sbiw	r26, 0x1b	; 27
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	09 f4       	brne	.+2      	; 0x1206 <midi_input_callbacks+0x40>
    1204:	cc c0       	rjmp	.+408    	; 0x139e <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1206:	9b 01       	movw	r18, r22
    1208:	21 50       	subi	r18, 0x01	; 1
    120a:	31 09       	sbc	r19, r1
    120c:	ab ea       	ldi	r26, 0xAB	; 171
    120e:	ba ea       	ldi	r27, 0xAA	; 170
    1210:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__umulhisi3>
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	9c 01       	movw	r18, r24
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1222:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1224:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1226:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1228:	4c 2d       	mov	r20, r12
    122a:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    122c:	9e 01       	movw	r18, r28
    122e:	2f 5f       	subi	r18, 0xFF	; 255
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	68 2f       	mov	r22, r24
    1234:	79 2f       	mov	r23, r25
    1236:	c7 01       	movw	r24, r14
    1238:	09 95       	icall
    123a:	be c0       	rjmp	.+380    	; 0x13b8 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    123c:	62 30       	cpi	r22, 0x02	; 2
    123e:	71 05       	cpc	r23, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <midi_input_callbacks+0x7e>
    1242:	55 c0       	rjmp	.+170    	; 0x12ee <midi_input_callbacks+0x128>
    1244:	63 30       	cpi	r22, 0x03	; 3
    1246:	71 05       	cpc	r23, r1
    1248:	29 f0       	breq	.+10     	; 0x1254 <midi_input_callbacks+0x8e>
    124a:	61 30       	cpi	r22, 0x01	; 1
    124c:	71 05       	cpc	r23, r1
    124e:	09 f0       	breq	.+2      	; 0x1252 <midi_input_callbacks+0x8c>
    1250:	a1 c0       	rjmp	.+322    	; 0x1394 <midi_input_callbacks+0x1ce>
    1252:	88 c0       	rjmp	.+272    	; 0x1364 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1254:	84 2f       	mov	r24, r20
    1256:	80 7f       	andi	r24, 0xF0	; 240
    1258:	80 3a       	cpi	r24, 0xA0	; 160
    125a:	f1 f0       	breq	.+60     	; 0x1298 <midi_input_callbacks+0xd2>
    125c:	28 f4       	brcc	.+10     	; 0x1268 <midi_input_callbacks+0xa2>
    125e:	80 38       	cpi	r24, 0x80	; 128
    1260:	a9 f0       	breq	.+42     	; 0x128c <midi_input_callbacks+0xc6>
    1262:	80 39       	cpi	r24, 0x90	; 144
    1264:	69 f0       	breq	.+26     	; 0x1280 <midi_input_callbacks+0xba>
    1266:	2f c0       	rjmp	.+94     	; 0x12c6 <midi_input_callbacks+0x100>
    1268:	80 3e       	cpi	r24, 0xE0	; 224
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <midi_input_callbacks+0xde>
    126c:	80 3f       	cpi	r24, 0xF0	; 240
    126e:	01 f1       	breq	.+64     	; 0x12b0 <midi_input_callbacks+0xea>
    1270:	80 3b       	cpi	r24, 0xB0	; 176
    1272:	49 f5       	brne	.+82     	; 0x12c6 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    1274:	d7 01       	movw	r26, r14
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	ed 91       	ld	r30, X+
    127a:	fc 91       	ld	r31, X
    127c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    127e:	25 c0       	rjmp	.+74     	; 0x12ca <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1280:	d7 01       	movw	r26, r14
    1282:	14 96       	adiw	r26, 0x04	; 4
    1284:	ed 91       	ld	r30, X+
    1286:	fc 91       	ld	r31, X
    1288:	15 97       	sbiw	r26, 0x05	; 5
              break;
    128a:	1f c0       	rjmp	.+62     	; 0x12ca <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    128c:	d7 01       	movw	r26, r14
    128e:	16 96       	adiw	r26, 0x06	; 6
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1296:	19 c0       	rjmp	.+50     	; 0x12ca <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1298:	d7 01       	movw	r26, r14
    129a:	18 96       	adiw	r26, 0x08	; 8
    129c:	ed 91       	ld	r30, X+
    129e:	fc 91       	ld	r31, X
    12a0:	19 97       	sbiw	r26, 0x09	; 9
              break;
    12a2:	13 c0       	rjmp	.+38     	; 0x12ca <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    12a4:	d7 01       	movw	r26, r14
    12a6:	1a 96       	adiw	r26, 0x0a	; 10
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    12b0:	42 3f       	cpi	r20, 0xF2	; 242
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <midi_input_callbacks+0xf0>
    12b4:	74 c0       	rjmp	.+232    	; 0x139e <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    12b6:	d7 01       	movw	r26, r14
    12b8:	1c 96       	adiw	r26, 0x0c	; 12
    12ba:	ed 91       	ld	r30, X+
    12bc:	fc 91       	ld	r31, X
    12be:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    12c0:	30 97       	sbiw	r30, 0x00	; 0
    12c2:	41 f4       	brne	.+16     	; 0x12d4 <midi_input_callbacks+0x10e>
    12c4:	6c c0       	rjmp	.+216    	; 0x139e <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    12c6:	e0 e0       	ldi	r30, 0x00	; 0
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    12ca:	30 97       	sbiw	r30, 0x00	; 0
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <midi_input_callbacks+0x10a>
    12ce:	67 c0       	rjmp	.+206    	; 0x139e <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    12d0:	12 3f       	cpi	r17, 0xF2	; 242
    12d2:	31 f4       	brne	.+12     	; 0x12e0 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    12d4:	2a 2d       	mov	r18, r10
    12d6:	4b 2d       	mov	r20, r11
    12d8:	62 ef       	ldi	r22, 0xF2	; 242
    12da:	c7 01       	movw	r24, r14
    12dc:	09 95       	icall
    12de:	6c c0       	rjmp	.+216    	; 0x13b8 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    12e0:	2a 2d       	mov	r18, r10
    12e2:	4b 2d       	mov	r20, r11
    12e4:	61 2f       	mov	r22, r17
    12e6:	6f 70       	andi	r22, 0x0F	; 15
    12e8:	c7 01       	movw	r24, r14
    12ea:	09 95       	icall
    12ec:	65 c0       	rjmp	.+202    	; 0x13b8 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    12ee:	84 2f       	mov	r24, r20
    12f0:	80 7f       	andi	r24, 0xF0	; 240
    12f2:	80 3d       	cpi	r24, 0xD0	; 208
    12f4:	51 f0       	breq	.+20     	; 0x130a <midi_input_callbacks+0x144>
    12f6:	80 3f       	cpi	r24, 0xF0	; 240
    12f8:	71 f0       	breq	.+28     	; 0x1316 <midi_input_callbacks+0x150>
    12fa:	80 3c       	cpi	r24, 0xC0	; 192
    12fc:	01 f5       	brne	.+64     	; 0x133e <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    12fe:	d7 01       	movw	r26, r14
    1300:	1e 96       	adiw	r26, 0x0e	; 14
    1302:	ed 91       	ld	r30, X+
    1304:	fc 91       	ld	r31, X
    1306:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1308:	1c c0       	rjmp	.+56     	; 0x1342 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    130a:	d7 01       	movw	r26, r14
    130c:	50 96       	adiw	r26, 0x10	; 16
    130e:	ed 91       	ld	r30, X+
    1310:	fc 91       	ld	r31, X
    1312:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1314:	16 c0       	rjmp	.+44     	; 0x1342 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1316:	43 3f       	cpi	r20, 0xF3	; 243
    1318:	41 f4       	brne	.+16     	; 0x132a <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    131a:	d7 01       	movw	r26, r14
    131c:	52 96       	adiw	r26, 0x12	; 18
    131e:	ed 91       	ld	r30, X+
    1320:	fc 91       	ld	r31, X
    1322:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1324:	30 97       	sbiw	r30, 0x00	; 0
    1326:	99 f4       	brne	.+38     	; 0x134e <midi_input_callbacks+0x188>
    1328:	3a c0       	rjmp	.+116    	; 0x139e <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    132a:	41 3f       	cpi	r20, 0xF1	; 241
    132c:	c1 f5       	brne	.+112    	; 0x139e <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    132e:	d7 01       	movw	r26, r14
    1330:	54 96       	adiw	r26, 0x14	; 20
    1332:	ed 91       	ld	r30, X+
    1334:	fc 91       	ld	r31, X
    1336:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1338:	30 97       	sbiw	r30, 0x00	; 0
    133a:	49 f4       	brne	.+18     	; 0x134e <midi_input_callbacks+0x188>
    133c:	30 c0       	rjmp	.+96     	; 0x139e <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    133e:	e0 e0       	ldi	r30, 0x00	; 0
    1340:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1342:	30 97       	sbiw	r30, 0x00	; 0
    1344:	61 f1       	breq	.+88     	; 0x139e <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1346:	81 2f       	mov	r24, r17
    1348:	8d 7f       	andi	r24, 0xFD	; 253
    134a:	81 3f       	cpi	r24, 0xF1	; 241
    134c:	29 f4       	brne	.+10     	; 0x1358 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    134e:	4b 2d       	mov	r20, r11
    1350:	61 2f       	mov	r22, r17
    1352:	c7 01       	movw	r24, r14
    1354:	09 95       	icall
    1356:	30 c0       	rjmp	.+96     	; 0x13b8 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1358:	4b 2d       	mov	r20, r11
    135a:	61 2f       	mov	r22, r17
    135c:	6f 70       	andi	r22, 0x0F	; 15
    135e:	c7 01       	movw	r24, r14
    1360:	09 95       	icall
    1362:	2a c0       	rjmp	.+84     	; 0x13b8 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1364:	84 2f       	mov	r24, r20
    1366:	0e 94 4b 08 	call	0x1096	; 0x1096 <midi_is_realtime>
    136a:	88 23       	and	r24, r24
    136c:	31 f0       	breq	.+12     	; 0x137a <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    136e:	d7 01       	movw	r26, r14
    1370:	56 96       	adiw	r26, 0x16	; 22
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	57 97       	sbiw	r26, 0x17	; 23
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    137a:	16 3f       	cpi	r17, 0xF6	; 246
    137c:	81 f4       	brne	.+32     	; 0x139e <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    137e:	d7 01       	movw	r26, r14
    1380:	58 96       	adiw	r26, 0x18	; 24
    1382:	ed 91       	ld	r30, X+
    1384:	fc 91       	ld	r31, X
    1386:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1388:	30 97       	sbiw	r30, 0x00	; 0
    138a:	49 f0       	breq	.+18     	; 0x139e <midi_input_callbacks+0x1d8>
            func(device, byte0);
    138c:	61 2f       	mov	r22, r17
    138e:	c7 01       	movw	r24, r14
    1390:	09 95       	icall
    1392:	12 c0       	rjmp	.+36     	; 0x13b8 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1394:	64 30       	cpi	r22, 0x04	; 4
    1396:	71 05       	cpc	r23, r1
    1398:	10 f0       	brcs	.+4      	; 0x139e <midi_input_callbacks+0x1d8>
          cnt = 0;
    139a:	c1 2c       	mov	r12, r1
    139c:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    139e:	d7 01       	movw	r26, r14
    13a0:	5c 96       	adiw	r26, 0x1c	; 28
    13a2:	ed 91       	ld	r30, X+
    13a4:	fc 91       	ld	r31, X
    13a6:	5d 97       	sbiw	r26, 0x1d	; 29
    13a8:	30 97       	sbiw	r30, 0x00	; 0
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    13ac:	0a 2d       	mov	r16, r10
    13ae:	2b 2d       	mov	r18, r11
    13b0:	41 2f       	mov	r20, r17
    13b2:	b6 01       	movw	r22, r12
    13b4:	c7 01       	movw	r24, r14
    13b6:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    13b8:	d7 01       	movw	r26, r14
    13ba:	5e 96       	adiw	r26, 0x1e	; 30
    13bc:	ed 91       	ld	r30, X+
    13be:	fc 91       	ld	r31, X
    13c0:	5f 97       	sbiw	r26, 0x1f	; 31
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    13c6:	0a 2d       	mov	r16, r10
    13c8:	2b 2d       	mov	r18, r11
    13ca:	41 2f       	mov	r20, r17
    13cc:	b6 01       	movw	r22, r12
    13ce:	c7 01       	movw	r24, r14
    13d0:	09 95       	icall
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	bf 90       	pop	r11
    13ea:	af 90       	pop	r10
    13ec:	08 95       	ret

000013ee <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
    13fa:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    13fc:	86 2f       	mov	r24, r22
    13fe:	0e 94 4b 08 	call	0x1096	; 0x1096 <midi_is_realtime>
    1402:	88 23       	and	r24, r24
    1404:	69 f0       	breq	.+26     	; 0x1420 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1406:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    140c:	00 e0       	ldi	r16, 0x00	; 0
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	41 2f       	mov	r20, r17
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	ce 01       	movw	r24, r28
    1418:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <midi_input_callbacks>
    device->input_state = state;
    141c:	fd a2       	std	Y+37, r15	; 0x25
    141e:	a4 c0       	rjmp	.+328    	; 0x1568 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1420:	81 2f       	mov	r24, r17
    1422:	0e 94 47 08 	call	0x108e	; 0x108e <midi_is_statusbyte>
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <midi_process_byte+0x3e>
    142a:	5d c0       	rjmp	.+186    	; 0x14e6 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    142c:	8d a1       	ldd	r24, Y+37	; 0x25
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	29 f0       	breq	.+10     	; 0x143c <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1432:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9f a3       	std	Y+39, r25	; 0x27
    143a:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    143c:	81 2f       	mov	r24, r17
    143e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <midi_packet_length>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	31 f0       	breq	.+12     	; 0x1452 <midi_process_byte+0x64>
    1446:	b8 f0       	brcs	.+46     	; 0x1476 <midi_process_byte+0x88>
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	79 f0       	breq	.+30     	; 0x146a <midi_process_byte+0x7c>
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	81 f0       	breq	.+32     	; 0x1470 <midi_process_byte+0x82>
    1450:	46 c0       	rjmp	.+140    	; 0x14de <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1456:	00 e0       	ldi	r16, 0x00	; 0
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	41 2f       	mov	r20, r17
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	ce 01       	movw	r24, r28
    1462:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <midi_input_callbacks>
        device->input_state = IDLE;
    1466:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1468:	7f c0       	rjmp	.+254    	; 0x1568 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	8d a3       	std	Y+37, r24	; 0x25
        break;
    146e:	7c c0       	rjmp	.+248    	; 0x1568 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1474:	79 c0       	rjmp	.+242    	; 0x1568 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1476:	10 3f       	cpi	r17, 0xF0	; 240
    1478:	19 f0       	breq	.+6      	; 0x1480 <midi_process_byte+0x92>
    147a:	17 3f       	cpi	r17, 0xF7	; 247
    147c:	51 f0       	breq	.+20     	; 0x1492 <midi_process_byte+0xa4>
    147e:	2b c0       	rjmp	.+86     	; 0x14d6 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1480:	84 e0       	ldi	r24, 0x04	; 4
    1482:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1484:	80 ef       	ldi	r24, 0xF0	; 240
    1486:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9f a3       	std	Y+39, r25	; 0x27
    148e:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1490:	6b c0       	rjmp	.+214    	; 0x1568 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1492:	4e a1       	ldd	r20, Y+38	; 0x26
    1494:	5f a1       	ldd	r21, Y+39	; 0x27
    1496:	9a 01       	movw	r18, r20
    1498:	ab ea       	ldi	r26, 0xAB	; 171
    149a:	ba ea       	ldi	r27, 0xAA	; 170
    149c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__umulhisi3>
    14a0:	96 95       	lsr	r25
    14a2:	87 95       	ror	r24
    14a4:	9c 01       	movw	r18, r24
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	82 0f       	add	r24, r18
    14ac:	93 1f       	adc	r25, r19
    14ae:	fa 01       	movw	r30, r20
    14b0:	e8 1b       	sub	r30, r24
    14b2:	f9 0b       	sbc	r31, r25
    14b4:	ec 0f       	add	r30, r28
    14b6:	fd 1f       	adc	r31, r29
    14b8:	87 ef       	ldi	r24, 0xF7	; 247
    14ba:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    14bc:	ba 01       	movw	r22, r20
    14be:	6f 5f       	subi	r22, 0xFF	; 255
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	7f a3       	std	Y+39, r23	; 0x27
    14c4:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    14c6:	0c a1       	ldd	r16, Y+36	; 0x24
    14c8:	2b a1       	ldd	r18, Y+35	; 0x23
    14ca:	4a a1       	ldd	r20, Y+34	; 0x22
    14cc:	ce 01       	movw	r24, r28
    14ce:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    14d2:	1d a2       	std	Y+37, r1	; 0x25
            break;
    14d4:	49 c0       	rjmp	.+146    	; 0x1568 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    14d6:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    14d8:	1f a2       	std	Y+39, r1	; 0x27
    14da:	1e a2       	std	Y+38, r1	; 0x26
    14dc:	45 c0       	rjmp	.+138    	; 0x1568 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    14de:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    14e0:	1f a2       	std	Y+39, r1	; 0x27
    14e2:	1e a2       	std	Y+38, r1	; 0x26
        break;
    14e4:	41 c0       	rjmp	.+130    	; 0x1568 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    14e6:	ed a1       	ldd	r30, Y+37	; 0x25
    14e8:	ee 23       	and	r30, r30
    14ea:	f1 f1       	breq	.+124    	; 0x1568 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    14ec:	4e a1       	ldd	r20, Y+38	; 0x26
    14ee:	5f a1       	ldd	r21, Y+39	; 0x27
    14f0:	9a 01       	movw	r18, r20
    14f2:	ab ea       	ldi	r26, 0xAB	; 171
    14f4:	ba ea       	ldi	r27, 0xAA	; 170
    14f6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__umulhisi3>
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	9c 01       	movw	r18, r24
    1500:	22 0f       	add	r18, r18
    1502:	33 1f       	adc	r19, r19
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	9a 01       	movw	r18, r20
    150a:	28 1b       	sub	r18, r24
    150c:	39 0b       	sbc	r19, r25
    150e:	de 01       	movw	r26, r28
    1510:	a2 0f       	add	r26, r18
    1512:	b3 1f       	adc	r27, r19
    1514:	92 96       	adiw	r26, 0x22	; 34
    1516:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1518:	ba 01       	movw	r22, r20
    151a:	6f 5f       	subi	r22, 0xFF	; 255
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	7f a3       	std	Y+39, r23	; 0x27
    1520:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1522:	21 30       	cpi	r18, 0x01	; 1
    1524:	31 05       	cpc	r19, r1
    1526:	89 f0       	breq	.+34     	; 0x154a <midi_process_byte+0x15c>
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	e9 f4       	brne	.+58     	; 0x1568 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    152e:	0c a1       	ldd	r16, Y+36	; 0x24
    1530:	2b a1       	ldd	r18, Y+35	; 0x23
    1532:	4a a1       	ldd	r20, Y+34	; 0x22
    1534:	ce 01       	movw	r24, r28
    1536:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    153a:	8d a1       	ldd	r24, Y+37	; 0x25
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	a1 f0       	breq	.+40     	; 0x1568 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9f a3       	std	Y+39, r25	; 0x27
    1546:	8e a3       	std	Y+38, r24	; 0x26
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    154a:	e2 30       	cpi	r30, 0x02	; 2
    154c:	69 f4       	brne	.+26     	; 0x1568 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    154e:	00 e0       	ldi	r16, 0x00	; 0
    1550:	2b a1       	ldd	r18, Y+35	; 0x23
    1552:	4a a1       	ldd	r20, Y+34	; 0x22
    1554:	ce 01       	movw	r24, r28
    1556:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    155a:	8d a1       	ldd	r24, Y+37	; 0x25
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	21 f0       	breq	.+8      	; 0x1568 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9f a3       	std	Y+39, r25	; 0x27
    1566:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	08 95       	ret

00001574 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1586:	dc 01       	movw	r26, r24
    1588:	90 96       	adiw	r26, 0x20	; 32
    158a:	ed 91       	ld	r30, X+
    158c:	fc 91       	ld	r31, X
    158e:	91 97       	sbiw	r26, 0x21	; 33
    1590:	30 97       	sbiw	r30, 0x00	; 0
    1592:	09 f0       	breq	.+2      	; 0x1596 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1594:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1596:	86 01       	movw	r16, r12
    1598:	08 51       	subi	r16, 0x18	; 24
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	c8 01       	movw	r24, r16
    159e:	0e 94 ff 07 	call	0xffe	; 0xffe <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    15a2:	e8 2e       	mov	r14, r24
    15a4:	f1 2c       	mov	r15, r1
    15a6:	e1 14       	cp	r14, r1
    15a8:	f1 04       	cpc	r15, r1
    15aa:	91 f0       	breq	.+36     	; 0x15d0 <midi_device_process+0x5c>
    15ac:	c0 e0       	ldi	r28, 0x00	; 0
    15ae:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	c8 01       	movw	r24, r16
    15b4:	0e 94 15 08 	call	0x102a	; 0x102a <bytequeue_get>
    15b8:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    15ba:	c6 01       	movw	r24, r12
    15bc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	c8 01       	movw	r24, r16
    15c4:	0e 94 27 08 	call	0x104e	; 0x104e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    15c8:	21 96       	adiw	r28, 0x01	; 1
    15ca:	ce 15       	cp	r28, r14
    15cc:	df 05       	cpc	r29, r15
    15ce:	81 f7       	brne	.-32     	; 0x15b0 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	08 95       	ret

000015e2 <__divmodhi4>:
    15e2:	97 fb       	bst	r25, 7
    15e4:	07 2e       	mov	r0, r23
    15e6:	16 f4       	brtc	.+4      	; 0x15ec <__divmodhi4+0xa>
    15e8:	00 94       	com	r0
    15ea:	07 d0       	rcall	.+14     	; 0x15fa <__divmodhi4_neg1>
    15ec:	77 fd       	sbrc	r23, 7
    15ee:	09 d0       	rcall	.+18     	; 0x1602 <__divmodhi4_neg2>
    15f0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__udivmodhi4>
    15f4:	07 fc       	sbrc	r0, 7
    15f6:	05 d0       	rcall	.+10     	; 0x1602 <__divmodhi4_neg2>
    15f8:	3e f4       	brtc	.+14     	; 0x1608 <__divmodhi4_exit>

000015fa <__divmodhi4_neg1>:
    15fa:	90 95       	com	r25
    15fc:	81 95       	neg	r24
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	08 95       	ret

00001602 <__divmodhi4_neg2>:
    1602:	70 95       	com	r23
    1604:	61 95       	neg	r22
    1606:	7f 4f       	sbci	r23, 0xFF	; 255

00001608 <__divmodhi4_exit>:
    1608:	08 95       	ret

0000160a <__tablejump2__>:
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	05 90       	lpm	r0, Z+
    1610:	f4 91       	lpm	r31, Z
    1612:	e0 2d       	mov	r30, r0
    1614:	09 94       	ijmp

00001616 <__umulhisi3>:
    1616:	a2 9f       	mul	r26, r18
    1618:	b0 01       	movw	r22, r0
    161a:	b3 9f       	mul	r27, r19
    161c:	c0 01       	movw	r24, r0
    161e:	a3 9f       	mul	r26, r19
    1620:	70 0d       	add	r23, r0
    1622:	81 1d       	adc	r24, r1
    1624:	11 24       	eor	r1, r1
    1626:	91 1d       	adc	r25, r1
    1628:	b2 9f       	mul	r27, r18
    162a:	70 0d       	add	r23, r0
    162c:	81 1d       	adc	r24, r1
    162e:	11 24       	eor	r1, r1
    1630:	91 1d       	adc	r25, r1
    1632:	08 95       	ret

00001634 <__udivmodhi4>:
    1634:	aa 1b       	sub	r26, r26
    1636:	bb 1b       	sub	r27, r27
    1638:	51 e1       	ldi	r21, 0x11	; 17
    163a:	07 c0       	rjmp	.+14     	; 0x164a <__udivmodhi4_ep>

0000163c <__udivmodhi4_loop>:
    163c:	aa 1f       	adc	r26, r26
    163e:	bb 1f       	adc	r27, r27
    1640:	a6 17       	cp	r26, r22
    1642:	b7 07       	cpc	r27, r23
    1644:	10 f0       	brcs	.+4      	; 0x164a <__udivmodhi4_ep>
    1646:	a6 1b       	sub	r26, r22
    1648:	b7 0b       	sbc	r27, r23

0000164a <__udivmodhi4_ep>:
    164a:	88 1f       	adc	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	5a 95       	dec	r21
    1650:	a9 f7       	brne	.-22     	; 0x163c <__udivmodhi4_loop>
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	08 95       	ret

0000165c <_exit>:
    165c:	f8 94       	cli

0000165e <__stop_program>:
    165e:	ff cf       	rjmp	.-2      	; 0x165e <__stop_program>
