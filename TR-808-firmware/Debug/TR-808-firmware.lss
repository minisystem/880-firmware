
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001808  0000189c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f3  00800258  00800258  000019f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a96  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131b  00000000  00000000  000068fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001404  00000000  00000000  00007c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  0000901c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe8  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002000  00000000  00000000  0000aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000ca60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	4e 09       	sbc	r20, r14
      b6:	4c 09       	sbc	r20, r12
      b8:	4e 09       	sbc	r20, r14
      ba:	50 09       	sbc	r21, r0
      bc:	50 09       	sbc	r21, r0
      be:	56 09       	sbc	r21, r6
      c0:	50 09       	sbc	r21, r0
      c2:	56 09       	sbc	r21, r6
      c4:	56 09       	sbc	r21, r6
      c6:	56 09       	sbc	r21, r6
      c8:	56 09       	sbc	r21, r6
      ca:	56 09       	sbc	r21, r6
      cc:	50 09       	sbc	r21, r0
      ce:	56 09       	sbc	r21, r6
      d0:	56 09       	sbc	r21, r6

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e8 e0       	ldi	r30, 0x08	; 8
      e6:	f8 e1       	ldi	r31, 0x18	; 24
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ab 34       	cpi	r26, 0x4B	; 75
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 3f 06 	call	0xc7e	; 0xc7e <main>
     108:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 82 03 	call	0x704	; 0x704 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     238:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29

	clear_all_trigs();
     284:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     288:	05 e0       	ldi	r16, 0x05	; 5
     28a:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     290:	0f 2e       	mov	r0, r31
     292:	f6 e4       	ldi	r31, 0x46	; 70
     294:	af 2e       	mov	r10, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	bf 2e       	mov	r11, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	0f 2e       	mov	r0, r31
     29e:	f5 e4       	ldi	r31, 0x45	; 69
     2a0:	ef 2e       	mov	r14, r31
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	ff 2e       	mov	r15, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f7 e6       	ldi	r31, 0x67	; 103
     2ac:	9f 2e       	mov	r9, r31
     2ae:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f8 e6       	ldi	r31, 0x68	; 104
     2b4:	cf 2e       	mov	r12, r31
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	df 2e       	mov	r13, r31
     2ba:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2bc:	d5 01       	movw	r26, r10
     2be:	ec 91       	ld	r30, X
     2c0:	e6 95       	lsr	r30
     2c2:	ef 71       	andi	r30, 0x1F	; 31
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	d7 01       	movw	r26, r14
     2c8:	8c 91       	ld	r24, X
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	98 9e       	mul	r9, r24
     2d2:	e0 0d       	add	r30, r0
     2d4:	f1 1d       	adc	r31, r1
     2d6:	11 24       	eor	r1, r1
     2d8:	eb 58       	subi	r30, 0x8B	; 139
     2da:	fc 4f       	sbci	r31, 0xFC	; 252
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	93 81       	ldd	r25, Z+3	; 0x03
     2e0:	0c 2e       	mov	r0, r28
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <trigger_step+0x7a>
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <trigger_step+0x76>
     2ec:	80 ff       	sbrs	r24, 0
     2ee:	3a c0       	rjmp	.+116    	; 0x364 <trigger_step+0xf6>
			turn_on(drum_hit[i].led_index);
     2f0:	f8 01       	movw	r30, r16
     2f2:	80 81       	ld	r24, Z
     2f4:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     2f8:	de 01       	movw	r26, r28
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	ac 0f       	add	r26, r28
     300:	bd 1f       	adc	r27, r29
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	a0 50       	subi	r26, 0x00	; 0
     308:	bf 4f       	sbci	r27, 0xFF	; 255
     30a:	ec 91       	ld	r30, X
     30c:	8e 2f       	mov	r24, r30
     30e:	88 1f       	adc	r24, r24
     310:	88 27       	eor	r24, r24
     312:	88 1f       	adc	r24, r24
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	ec 91       	ld	r30, X
     318:	e7 70       	andi	r30, 0x07	; 7
     31a:	ee 0f       	add	r30, r30
     31c:	e8 2b       	or	r30, r24
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e8 59       	subi	r30, 0x98	; 152
     322:	fd 4f       	sbci	r31, 0xFD	; 253
     324:	d8 01       	movw	r26, r16
     326:	13 97       	sbiw	r26, 0x03	; 3
     328:	9c 91       	ld	r25, X
     32a:	80 81       	ld	r24, Z
     32c:	89 2b       	or	r24, r25
     32e:	80 83       	st	Z, r24
     330:	f8 01       	movw	r30, r16
     332:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     334:	80 81       	ld	r24, Z
     336:	8f 3f       	cpi	r24, 0xFF	; 255
     338:	a9 f0       	breq	.+42     	; 0x364 <trigger_step+0xf6>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     33a:	d6 01       	movw	r26, r12
     33c:	13 96       	adiw	r26, 0x03	; 3
     33e:	2c 91       	ld	r18, X
     340:	13 97       	sbiw	r26, 0x03	; 3
     342:	fe 01       	movw	r30, r28
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	ec 0f       	add	r30, r28
     34a:	fd 1f       	adc	r31, r29
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 5f       	subi	r30, 0xFC	; 252
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	90 81       	ld	r25, Z
     356:	91 70       	andi	r25, 0x01	; 1
     358:	91 95       	neg	r25
     35a:	92 27       	eor	r25, r18
     35c:	89 23       	and	r24, r25
     35e:	82 27       	eor	r24, r18
     360:	13 96       	adiw	r26, 0x03	; 3
     362:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     364:	21 96       	adiw	r28, 0x01	; 1
     366:	0a 5f       	subi	r16, 0xFA	; 250
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	c0 31       	cpi	r28, 0x10	; 16
     36c:	d1 05       	cpc	r29, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <trigger_step+0x104>
     370:	a5 cf       	rjmp	.-182    	; 0x2bc <trigger_step+0x4e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	08 95       	ret

0000038a <__vector_14>:
#include "clock.h"
#include "sequencer.h"



ISR (TIMER0_COMPA_vect) {
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	8f 93       	push	r24
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     39a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     39c:	ee e6       	ldi	r30, 0x6E	; 110
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	8d 7f       	andi	r24, 0xFD	; 253
     3a4:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     3a6:	e5 e4       	ldi	r30, 0x45	; 69
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	81 83       	std	Z+1, r24	; 0x01
	
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	8f 91       	pop	r24
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ef 93       	push	r30
     3e8:	ff 93       	push	r31
	
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     3ea:	e3 e7       	ldi	r30, 0x73	; 115
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	91 81       	ldd	r25, Z+1	; 0x01
     3f0:	9f 5f       	subi	r25, 0xFF	; 255
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	80 81       	ld	r24, Z
     3f6:	98 13       	cpse	r25, r24
     3f8:	4d c0       	rjmp	.+154    	; 0x494 <__vector_11+0xd4>
	{
		sequencer.next_step_flag = 1;
     3fa:	e5 e4       	ldi	r30, 0x45	; 69
     3fc:	f4 e0       	ldi	r31, 0x04	; 4
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	90 64       	ori	r25, 0x40	; 64
		internal_clock.beat_counter++; //overflows every 4 beats
     402:	a5 e7       	ldi	r26, 0x75	; 117
     404:	b2 e0       	ldi	r27, 0x02	; 2
     406:	2c 91       	ld	r18, X
     408:	31 e0       	ldi	r19, 0x01	; 1
     40a:	32 0f       	add	r19, r18
     40c:	33 70       	andi	r19, 0x03	; 3
     40e:	2c 7f       	andi	r18, 0xFC	; 252
     410:	23 2b       	or	r18, r19
     412:	2c 93       	st	X, r18
		internal_clock.ppqn_counter = 0;
     414:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == sequencer.step_num) { //end of measure
     418:	39 2f       	mov	r19, r25
     41a:	36 95       	lsr	r19
     41c:	3f 71       	andi	r19, 0x1F	; 31
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	23 0f       	add	r18, r19
     422:	2f 71       	andi	r18, 0x1F	; 31
     424:	22 0f       	add	r18, r18
     426:	91 7c       	andi	r25, 0xC1	; 193
     428:	92 2b       	or	r25, r18
     42a:	91 83       	std	Z+1, r25	; 0x01
     42c:	20 81       	ld	r18, Z
     42e:	22 95       	swap	r18
     430:	2f 70       	andi	r18, 0x0F	; 15
     432:	91 70       	andi	r25, 0x01	; 1
     434:	92 95       	swap	r25
     436:	90 7f       	andi	r25, 0xF0	; 240
     438:	92 2b       	or	r25, r18
     43a:	39 13       	cpse	r19, r25
     43c:	2b c0       	rjmp	.+86     	; 0x494 <__vector_11+0xd4>
				
			sequencer.current_step = 0;
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	91 7c       	andi	r25, 0xC1	; 193
     442:	91 83       	std	Z+1, r25	; 0x01
				
			if (sequencer.var_change == 1) {
     444:	90 81       	ld	r25, Z
     446:	93 ff       	sbrs	r25, 3
     448:	1a c0       	rjmp	.+52     	; 0x47e <__vector_11+0xbe>
				sequencer.var_change = 0;
     44a:	29 2f       	mov	r18, r25
     44c:	27 7f       	andi	r18, 0xF7	; 247
     44e:	20 83       	st	Z, r18
				switch (sequencer.variation_mode) {
     450:	26 95       	lsr	r18
     452:	23 70       	andi	r18, 0x03	; 3
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	21 30       	cpi	r18, 0x01	; 1
     458:	31 05       	cpc	r19, r1
     45a:	59 f0       	breq	.+22     	; 0x472 <__vector_11+0xb2>
     45c:	22 30       	cpi	r18, 0x02	; 2
     45e:	31 05       	cpc	r19, r1
     460:	11 f0       	breq	.+4      	; 0x466 <__vector_11+0xa6>
     462:	23 2b       	or	r18, r19
     464:	b9 f4       	brne	.+46     	; 0x494 <__vector_11+0xd4>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     466:	e5 e4       	ldi	r30, 0x45	; 69
     468:	f4 e0       	ldi	r31, 0x04	; 4
     46a:	90 81       	ld	r25, Z
     46c:	9e 7f       	andi	r25, 0xFE	; 254
     46e:	90 83       	st	Z, r25
					break;
     470:	11 c0       	rjmp	.+34     	; 0x494 <__vector_11+0xd4>
				case VAR_B:
					sequencer.variation = VAR_B;
     472:	e5 e4       	ldi	r30, 0x45	; 69
     474:	f4 e0       	ldi	r31, 0x04	; 4
     476:	90 81       	ld	r25, Z
     478:	91 60       	ori	r25, 0x01	; 1
     47a:	90 83       	st	Z, r25
					break;	
     47c:	0b c0       	rjmp	.+22     	; 0x494 <__vector_11+0xd4>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     47e:	96 70       	andi	r25, 0x06	; 6
     480:	94 30       	cpi	r25, 0x04	; 4
     482:	41 f4       	brne	.+16     	; 0x494 <__vector_11+0xd4>
					
				sequencer.variation ^= 1<<0; //toggle state
     484:	e5 e4       	ldi	r30, 0x45	; 69
     486:	f4 e0       	ldi	r31, 0x04	; 4
     488:	90 81       	ld	r25, Z
     48a:	29 2f       	mov	r18, r25
     48c:	20 95       	com	r18
     48e:	20 fb       	bst	r18, 0
     490:	90 f9       	bld	r25, 0
     492:	90 83       	st	Z, r25
			}
			//sequencer.current_measure++;
		}
	}
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     494:	86 95       	lsr	r24
     496:	90 91 74 02 	lds	r25, 0x0274
     49a:	98 13       	cpse	r25, r24
     49c:	e1 c0       	rjmp	.+450    	; 0x660 <__vector_11+0x2a0>
		
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     49e:	30 91 d3 01 	lds	r19, 0x01D3
     4a2:	20 91 d6 01 	lds	r18, 0x01D6
     4a6:	e8 e6       	ldi	r30, 0x68	; 104
     4a8:	f2 e0       	ldi	r31, 0x02	; 2
     4aa:	82 2f       	mov	r24, r18
     4ac:	83 2b       	or	r24, r19
     4ae:	80 95       	com	r24
     4b0:	95 81       	ldd	r25, Z+5	; 0x05
     4b2:	89 23       	and	r24, r25
     4b4:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     4b6:	80 91 76 03 	lds	r24, 0x0376
     4ba:	81 ff       	sbrs	r24, 1
     4bc:	a1 c0       	rjmp	.+322    	; 0x600 <__vector_11+0x240>
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     4be:	c9 e4       	ldi	r28, 0x49	; 73
     4c0:	d4 e0       	ldi	r29, 0x04	; 4
     4c2:	e8 81       	ld	r30, Y
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	b2 96       	adiw	r30, 0x22	; 34
     4c8:	05 e4       	ldi	r16, 0x45	; 69
     4ca:	14 e0       	ldi	r17, 0x04	; 4
     4cc:	d8 01       	movw	r26, r16
     4ce:	8c 91       	ld	r24, X
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	81 70       	andi	r24, 0x01	; 1
     4d6:	b7 e6       	ldi	r27, 0x67	; 103
     4d8:	8b 9f       	mul	r24, r27
     4da:	e0 0d       	add	r30, r0
     4dc:	f1 1d       	adc	r31, r1
     4de:	11 24       	eor	r1, r1
     4e0:	eb 58       	subi	r30, 0x8B	; 139
     4e2:	fc 4f       	sbci	r31, 0xFC	; 252
     4e4:	92 81       	ldd	r25, Z+2	; 0x02
     4e6:	83 81       	ldd	r24, Z+3	; 0x03
     4e8:	e8 e6       	ldi	r30, 0x68	; 104
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     4ee:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     4f0:	0e 94 95 03 	call	0x72a	; 0x72a <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     4f4:	88 81       	ld	r24, Y
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	e8 0f       	add	r30, r24
     500:	f9 1f       	adc	r31, r25
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	e0 50       	subi	r30, 0x00	; 0
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	85 81       	ldd	r24, Z+5	; 0x05
     50c:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
								
			switch (sequencer.variation_mode) {
     510:	f8 01       	movw	r30, r16
     512:	80 81       	ld	r24, Z
     514:	86 95       	lsr	r24
     516:	83 70       	andi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	91 05       	cpc	r25, r1
     51e:	51 f0       	breq	.+20     	; 0x534 <__vector_11+0x174>
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	91 05       	cpc	r25, r1
     524:	61 f0       	breq	.+24     	; 0x53e <__vector_11+0x17e>
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	b9 f4       	brne	.+46     	; 0x558 <__vector_11+0x198>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     52a:	20 91 d3 01 	lds	r18, 0x01D3
     52e:	20 93 4a 04 	sts	0x044A, r18
					break;					
     532:	12 c0       	rjmp	.+36     	; 0x558 <__vector_11+0x198>
				case VAR_B:
					sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     534:	20 91 d6 01 	lds	r18, 0x01D6
     538:	20 93 4a 04 	sts	0x044A, r18
					break;			
     53c:	0d c0       	rjmp	.+26     	; 0x558 <__vector_11+0x198>
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     53e:	20 91 45 04 	lds	r18, 0x0445
     542:	20 fd       	sbrc	r18, 0
     544:	05 c0       	rjmp	.+10     	; 0x550 <__vector_11+0x190>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     546:	20 91 d3 01 	lds	r18, 0x01D3
     54a:	20 93 4a 04 	sts	0x044A, r18
     54e:	04 c0       	rjmp	.+8      	; 0x558 <__vector_11+0x198>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     550:	20 91 d6 01 	lds	r18, 0x01D6
     554:	20 93 4a 04 	sts	0x044A, r18
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     558:	20 91 75 02 	lds	r18, 0x0275
     55c:	23 70       	andi	r18, 0x03	; 3
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	22 30       	cpi	r18, 0x02	; 2
     562:	31 05       	cpc	r19, r1
     564:	0c f0       	brlt	.+2      	; 0x568 <__vector_11+0x1a8>
     566:	75 c0       	rjmp	.+234    	; 0x652 <__vector_11+0x292>
				
				if (sequencer.var_change == 1) {
     568:	20 91 45 04 	lds	r18, 0x0445
     56c:	23 ff       	sbrs	r18, 3
     56e:	32 c0       	rjmp	.+100    	; 0x5d4 <__vector_11+0x214>
					
					switch (sequencer.variation_mode) {
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	91 05       	cpc	r25, r1
     574:	69 f0       	breq	.+26     	; 0x590 <__vector_11+0x1d0>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	91 05       	cpc	r25, r1
     57a:	91 f0       	breq	.+36     	; 0x5a0 <__vector_11+0x1e0>
     57c:	89 2b       	or	r24, r25
     57e:	51 f5       	brne	.+84     	; 0x5d4 <__vector_11+0x214>
						
						case VAR_A:
						sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     580:	ea e4       	ldi	r30, 0x4A	; 74
     582:	f4 e0       	ldi	r31, 0x04	; 4
     584:	90 91 d6 01 	lds	r25, 0x01D6
     588:	80 81       	ld	r24, Z
     58a:	89 2b       	or	r24, r25
     58c:	80 83       	st	Z, r24
						break;
     58e:	22 c0       	rjmp	.+68     	; 0x5d4 <__vector_11+0x214>
						case VAR_B:
						sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     590:	ea e4       	ldi	r30, 0x4A	; 74
     592:	f4 e0       	ldi	r31, 0x04	; 4
     594:	90 91 d3 01 	lds	r25, 0x01D3
     598:	80 81       	ld	r24, Z
     59a:	89 2b       	or	r24, r25
     59c:	80 83       	st	Z, r24
						break;
     59e:	1a c0       	rjmp	.+52     	; 0x5d4 <__vector_11+0x214>
						case VAR_AB:
						if (sequencer.variation == VAR_A) {
     5a0:	20 fd       	sbrc	r18, 0
     5a2:	0c c0       	rjmp	.+24     	; 0x5bc <__vector_11+0x1fc>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     5a4:	ea e4       	ldi	r30, 0x4A	; 74
     5a6:	f4 e0       	ldi	r31, 0x04	; 4
     5a8:	90 91 d6 01 	lds	r25, 0x01D6
     5ac:	80 81       	ld	r24, Z
     5ae:	89 2b       	or	r24, r25
     5b0:	80 83       	st	Z, r24
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     5b2:	26 70       	andi	r18, 0x06	; 6
     5b4:	24 30       	cpi	r18, 0x04	; 4
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_11+0x1fa>
     5b8:	4c c0       	rjmp	.+152    	; 0x652 <__vector_11+0x292>
     5ba:	12 c0       	rjmp	.+36     	; 0x5e0 <__vector_11+0x220>
						break;
						case VAR_AB:
						if (sequencer.variation == VAR_A) {
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     5bc:	ea e4       	ldi	r30, 0x4A	; 74
     5be:	f4 e0       	ldi	r31, 0x04	; 4
     5c0:	90 91 d3 01 	lds	r25, 0x01D3
     5c4:	80 81       	ld	r24, Z
     5c6:	89 2b       	or	r24, r25
     5c8:	80 83       	st	Z, r24
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     5ca:	26 70       	andi	r18, 0x06	; 6
     5cc:	24 30       	cpi	r18, 0x04	; 4
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <__vector_11+0x212>
     5d0:	40 c0       	rjmp	.+128    	; 0x652 <__vector_11+0x292>
     5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <__vector_11+0x230>
     5d4:	82 2f       	mov	r24, r18
     5d6:	86 70       	andi	r24, 0x06	; 6
     5d8:	84 30       	cpi	r24, 0x04	; 4
     5da:	d9 f5       	brne	.+118    	; 0x652 <__vector_11+0x292>
						if (sequencer.variation == VAR_A) {
     5dc:	20 fd       	sbrc	r18, 0
     5de:	08 c0       	rjmp	.+16     	; 0x5f0 <__vector_11+0x230>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     5e0:	ea e4       	ldi	r30, 0x4A	; 74
     5e2:	f4 e0       	ldi	r31, 0x04	; 4
     5e4:	90 91 d6 01 	lds	r25, 0x01D6
     5e8:	80 81       	ld	r24, Z
     5ea:	89 2b       	or	r24, r25
     5ec:	80 83       	st	Z, r24
     5ee:	31 c0       	rjmp	.+98     	; 0x652 <__vector_11+0x292>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     5f0:	ea e4       	ldi	r30, 0x4A	; 74
     5f2:	f4 e0       	ldi	r31, 0x04	; 4
     5f4:	90 91 d3 01 	lds	r25, 0x01D3
     5f8:	80 81       	ld	r24, Z
     5fa:	89 2b       	or	r24, r25
     5fc:	80 83       	st	Z, r24
     5fe:	29 c0       	rjmp	.+82     	; 0x652 <__vector_11+0x292>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     600:	e8 e6       	ldi	r30, 0x68	; 104
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     606:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     608:	80 91 45 04 	lds	r24, 0x0445
     60c:	86 95       	lsr	r24
     60e:	83 70       	andi	r24, 0x03	; 3
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	91 05       	cpc	r25, r1
     616:	41 f0       	breq	.+16     	; 0x628 <__vector_11+0x268>
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	91 05       	cpc	r25, r1
     61c:	11 f0       	breq	.+4      	; 0x622 <__vector_11+0x262>
     61e:	89 2b       	or	r24, r25
     620:	29 f4       	brne	.+10     	; 0x62c <__vector_11+0x26c>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     622:	30 93 4a 04 	sts	0x044A, r19
				break;
     626:	02 c0       	rjmp	.+4      	; 0x62c <__vector_11+0x26c>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     628:	20 93 4a 04 	sts	0x044A, r18
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     62c:	80 91 75 02 	lds	r24, 0x0275
     630:	83 70       	andi	r24, 0x03	; 3
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	02 97       	sbiw	r24, 0x02	; 2
     636:	6c f4       	brge	.+26     	; 0x652 <__vector_11+0x292>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     638:	80 91 45 04 	lds	r24, 0x0445
     63c:	86 70       	andi	r24, 0x06	; 6
     63e:	84 30       	cpi	r24, 0x04	; 4
     640:	29 f4       	brne	.+10     	; 0x64c <__vector_11+0x28c>
     642:	ea e4       	ldi	r30, 0x4A	; 74
     644:	f4 e0       	ldi	r31, 0x04	; 4
     646:	80 81       	ld	r24, Z
     648:	28 2b       	or	r18, r24
     64a:	20 83       	st	Z, r18
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     652:	e8 e6       	ldi	r30, 0x68	; 104
     654:	f2 e0       	ldi	r31, 0x02	; 2
     656:	90 91 4a 04 	lds	r25, 0x044A
     65a:	85 81       	ldd	r24, Z+5	; 0x05
     65c:	89 2b       	or	r24, r25
     65e:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     660:	ff 91       	pop	r31
     662:	ef 91       	pop	r30
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	9c 01       	movw	r18, r24
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	dc 01       	movw	r26, r24
     69c:	a8 59       	subi	r26, 0x98	; 152
     69e:	be 4f       	sbci	r27, 0xFE	; 254
     6a0:	2c 91       	ld	r18, X
     6a2:	e2 2f       	mov	r30, r18
     6a4:	ef 70       	andi	r30, 0x0F	; 15
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	e8 59       	subi	r30, 0x98	; 152
     6aa:	fd 4f       	sbci	r31, 0xFD	; 253
     6ac:	ec 01       	movw	r28, r24
     6ae:	c9 59       	subi	r28, 0x99	; 153
     6b0:	de 4f       	sbci	r29, 0xFE	; 254
     6b2:	30 81       	ld	r19, Z
     6b4:	88 81       	ld	r24, Y
     6b6:	83 2b       	or	r24, r19
     6b8:	80 83       	st	Z, r24
	led[led_index].state = 1;
     6ba:	82 2f       	mov	r24, r18
     6bc:	80 61       	ori	r24, 0x10	; 16
     6be:	8c 93       	st	X, r24

}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <turn_off>:

void turn_off(uint8_t led_index) {
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	9c 01       	movw	r18, r24
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	82 0f       	add	r24, r18
     6d4:	93 1f       	adc	r25, r19
     6d6:	dc 01       	movw	r26, r24
     6d8:	a8 59       	subi	r26, 0x98	; 152
     6da:	be 4f       	sbci	r27, 0xFE	; 254
     6dc:	2c 91       	ld	r18, X
     6de:	e2 2f       	mov	r30, r18
     6e0:	ef 70       	andi	r30, 0x0F	; 15
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	e8 59       	subi	r30, 0x98	; 152
     6e6:	fd 4f       	sbci	r31, 0xFD	; 253
     6e8:	ec 01       	movw	r28, r24
     6ea:	c9 59       	subi	r28, 0x99	; 153
     6ec:	de 4f       	sbci	r29, 0xFE	; 254
     6ee:	88 81       	ld	r24, Y
     6f0:	80 95       	com	r24
     6f2:	90 81       	ld	r25, Z
     6f4:	89 23       	and	r24, r25
     6f6:	80 83       	st	Z, r24
	led[led_index].state = 0;
     6f8:	82 2f       	mov	r24, r18
     6fa:	8f 7e       	andi	r24, 0xEF	; 239
     6fc:	8c 93       	st	X, r24
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     704:	28 2f       	mov	r18, r24
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	f9 01       	movw	r30, r18
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	2e 0f       	add	r18, r30
     710:	3f 1f       	adc	r19, r31
     712:	f9 01       	movw	r30, r18
     714:	e8 59       	subi	r30, 0x98	; 152
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	90 81       	ld	r25, Z
     71a:	94 ff       	sbrs	r25, 4
     71c:	03 c0       	rjmp	.+6      	; 0x724 <toggle+0x20>
		
		turn_off(led_index);
     71e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <turn_off>
     722:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     724:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
     728:	08 95       	ret

0000072a <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     72a:	e8 e6       	ldi	r30, 0x68	; 104
     72c:	f2 e0       	ldi	r31, 0x02	; 2
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	8f 70       	andi	r24, 0x0F	; 15
     732:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     734:	87 81       	ldd	r24, Z+7	; 0x07
     736:	80 72       	andi	r24, 0x20	; 32
     738:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     73a:	83 81       	ldd	r24, Z+3	; 0x03
     73c:	8f 70       	andi	r24, 0x0F	; 15
     73e:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     740:	86 81       	ldd	r24, Z+6	; 0x06
     742:	8f 7c       	andi	r24, 0xCF	; 207
     744:	86 83       	std	Z+6, r24	; 0x06
     746:	08 95       	ret

00000748 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     748:	08 95       	ret

0000074a <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     74a:	08 95       	ret

0000074c <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     74c:	40 31       	cpi	r20, 0x10	; 16
     74e:	20 f4       	brcc	.+8      	; 0x758 <note_on_event+0xc>
     750:	62 2f       	mov	r22, r18
     752:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     754:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     758:	08 95       	ret

0000075a <update_tempo>:
}

void update_tempo() {
	
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     75a:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     75e:	90 93 5c 02 	sts	0x025C, r25
     762:	80 93 5b 02 	sts	0x025B, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     766:	20 91 59 02 	lds	r18, 0x0259
     76a:	30 91 5a 02 	lds	r19, 0x025A
     76e:	82 1b       	sub	r24, r18
     770:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     772:	95 95       	asr	r25
     774:	87 95       	ror	r24
     776:	95 95       	asr	r25
     778:	87 95       	ror	r24
     77a:	82 0f       	add	r24, r18
     77c:	93 1f       	adc	r25, r19
     77e:	90 93 5a 02 	sts	0x025A, r25
     782:	80 93 59 02 	sts	0x0259, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     786:	23 e6       	ldi	r18, 0x63	; 99
     788:	34 e0       	ldi	r19, 0x04	; 4
     78a:	a9 01       	movw	r20, r18
     78c:	48 1b       	sub	r20, r24
     78e:	59 0b       	sbc	r21, r25
     790:	ca 01       	movw	r24, r20
     792:	e3 e7       	ldi	r30, 0x73	; 115
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	54 83       	std	Z+4, r21	; 0x04
     798:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     79a:	25 81       	ldd	r18, Z+5	; 0x05
     79c:	36 81       	ldd	r19, Z+6	; 0x06
     79e:	42 17       	cp	r20, r18
     7a0:	53 07       	cpc	r21, r19
     7a2:	11 f0       	breq	.+4      	; 0x7a8 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     7a4:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;	
     7a8:	e3 e7       	ldi	r30, 0x73	; 115
     7aa:	f2 e0       	ldi	r31, 0x02	; 2
     7ac:	83 81       	ldd	r24, Z+3	; 0x03
     7ae:	94 81       	ldd	r25, Z+4	; 0x04
     7b0:	96 83       	std	Z+6, r25	; 0x06
     7b2:	85 83       	std	Z+5, r24	; 0x05
     7b4:	08 95       	ret

000007b6 <update_step_board>:
	
}

void update_step_board() {
     7b6:	4f 92       	push	r4
     7b8:	5f 92       	push	r5
     7ba:	6f 92       	push	r6
     7bc:	7f 92       	push	r7
     7be:	9f 92       	push	r9
     7c0:	af 92       	push	r10
     7c2:	bf 92       	push	r11
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     7d4:	80 91 76 03 	lds	r24, 0x0376
     7d8:	81 ff       	sbrs	r24, 1
     7da:	ce c0       	rjmp	.+412    	; 0x978 <__stack+0x79>
     7dc:	80 91 75 03 	lds	r24, 0x0375
     7e0:	81 50       	subi	r24, 0x01	; 1
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <update_step_board+0x32>
     7e6:	c8 c0       	rjmp	.+400    	; 0x978 <__stack+0x79>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     7e8:	80 91 49 04 	lds	r24, 0x0449
     7ec:	80 31       	cpi	r24, 0x10	; 16
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <update_step_board+0x3c>
     7f0:	60 c0       	rjmp	.+192    	; 0x8b2 <update_step_board+0xfc>
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     7f6:	0f 2e       	mov	r0, r31
     7f8:	f5 e4       	ldi	r31, 0x45	; 69
     7fa:	af 2e       	mov	r10, r31
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	bf 2e       	mov	r11, r31
     800:	f0 2d       	mov	r31, r0
     802:	cc 24       	eor	r12, r12
     804:	c3 94       	inc	r12
     806:	d1 2c       	mov	r13, r1
     808:	0f 2e       	mov	r0, r31
     80a:	f7 e6       	ldi	r31, 0x67	; 103
     80c:	9f 2e       	mov	r9, r31
     80e:	f0 2d       	mov	r31, r0
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     810:	09 e4       	ldi	r16, 0x49	; 73
     812:	14 e0       	ldi	r17, 0x04	; 4
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
							
				if (button[i].state) {
     814:	fe 01       	movw	r30, r28
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ee 5e       	subi	r30, 0xEE	; 238
     81c:	fd 4f       	sbci	r31, 0xFD	; 253
     81e:	80 81       	ld	r24, Z
     820:	86 ff       	sbrs	r24, 6
     822:	41 c0       	rjmp	.+130    	; 0x8a6 <update_step_board+0xf0>
								
					toggle(i);
     824:	8c 2f       	mov	r24, r28
     826:	0e 94 82 03 	call	0x704	; 0x704 <toggle>
					button[i].state ^= button[i].state;
     82a:	fe 01       	movw	r30, r28
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	ee 5e       	subi	r30, 0xEE	; 238
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	80 81       	ld	r24, Z
     836:	8f 7b       	andi	r24, 0xBF	; 191
     838:	80 83       	st	Z, r24
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     83a:	d5 01       	movw	r26, r10
     83c:	8c 91       	ld	r24, X
     83e:	80 fb       	bst	r24, 0
     840:	ee 24       	eor	r14, r14
     842:	e0 f8       	bld	r14, 0
     844:	f1 2c       	mov	r15, r1
     846:	9e 9c       	mul	r9, r14
     848:	c0 01       	movw	r24, r0
     84a:	9f 9c       	mul	r9, r15
     84c:	90 0d       	add	r25, r0
     84e:	11 24       	eor	r1, r1
     850:	fc 01       	movw	r30, r24
     852:	e9 54       	subi	r30, 0x49	; 73
     854:	fc 4f       	sbci	r31, 0xFC	; 252
     856:	96 01       	movw	r18, r12
     858:	0c 2e       	mov	r0, r28
     85a:	02 c0       	rjmp	.+4      	; 0x860 <update_step_board+0xaa>
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <update_step_board+0xa6>
     864:	29 01       	movw	r4, r18
     866:	03 2e       	mov	r0, r19
     868:	00 0c       	add	r0, r0
     86a:	66 08       	sbc	r6, r6
     86c:	77 08       	sbc	r7, r7
     86e:	40 81       	ld	r20, Z
     870:	51 81       	ldd	r21, Z+1	; 0x01
     872:	62 81       	ldd	r22, Z+2	; 0x02
     874:	73 81       	ldd	r23, Z+3	; 0x03
     876:	44 25       	eor	r20, r4
     878:	55 25       	eor	r21, r5
     87a:	66 25       	eor	r22, r6
     87c:	77 25       	eor	r23, r7
     87e:	40 83       	st	Z, r20
     880:	51 83       	std	Z+1, r21	; 0x01
     882:	62 83       	std	Z+2, r22	; 0x02
     884:	73 83       	std	Z+3, r23	; 0x03
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     886:	d8 01       	movw	r26, r16
     888:	ec 91       	ld	r30, X
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	b2 96       	adiw	r30, 0x22	; 34
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e8 0f       	add	r30, r24
     894:	f9 1f       	adc	r31, r25
     896:	eb 58       	subi	r30, 0x8B	; 139
     898:	fc 4f       	sbci	r31, 0xFC	; 252
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	28 27       	eor	r18, r24
     8a0:	39 27       	eor	r19, r25
     8a2:	33 83       	std	Z+3, r19	; 0x03
     8a4:	22 83       	std	Z+2, r18	; 0x02
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     8a6:	21 96       	adiw	r28, 0x01	; 1
     8a8:	c0 31       	cpi	r28, 0x10	; 16
     8aa:	d1 05       	cpc	r29, r1
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <update_step_board+0xfa>
     8ae:	b2 cf       	rjmp	.-156    	; 0x814 <update_step_board+0x5e>
     8b0:	63 c0       	rjmp	.+198    	; 0x978 <__stack+0x79>
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
     8b4:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f5 e4       	ldi	r31, 0x45	; 69
     8ba:	cf 2e       	mov	r12, r31
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	df 2e       	mov	r13, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	0f 2e       	mov	r0, r31
     8c4:	f9 e4       	ldi	r31, 0x49	; 73
     8c6:	ef 2e       	mov	r14, r31
     8c8:	f4 e0       	ldi	r31, 0x04	; 4
     8ca:	ff 2e       	mov	r15, r31
     8cc:	f0 2d       	mov	r31, r0
     8ce:	0f 2e       	mov	r0, r31
     8d0:	f7 e6       	ldi	r31, 0x67	; 103
     8d2:	9f 2e       	mov	r9, r31
     8d4:	f0 2d       	mov	r31, r0
     8d6:	aa 24       	eor	r10, r10
     8d8:	a3 94       	inc	r10
     8da:	b1 2c       	mov	r11, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     8dc:	fe 01       	movw	r30, r28
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ee 5e       	subi	r30, 0xEE	; 238
     8e4:	fd 4f       	sbci	r31, 0xFD	; 253
     8e6:	80 81       	ld	r24, Z
     8e8:	86 ff       	sbrs	r24, 6
     8ea:	41 c0       	rjmp	.+130    	; 0x96e <__stack+0x6f>
					
				toggle(i);
     8ec:	8c 2f       	mov	r24, r28
     8ee:	0e 94 82 03 	call	0x704	; 0x704 <toggle>
				button[i].state ^= button[i].state;
     8f2:	fe 01       	movw	r30, r28
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	df 01       	movw	r26, r30
     8fa:	ae 5e       	subi	r26, 0xEE	; 238
     8fc:	bd 4f       	sbci	r27, 0xFD	; 253
     8fe:	8c 91       	ld	r24, X
     900:	8f 7b       	andi	r24, 0xBF	; 191
     902:	8c 93       	st	X, r24
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     904:	d6 01       	movw	r26, r12
     906:	8c 91       	ld	r24, X
     908:	08 2f       	mov	r16, r24
     90a:	01 70       	andi	r16, 0x01	; 1
     90c:	10 e0       	ldi	r17, 0x00	; 0
     90e:	d7 01       	movw	r26, r14
     910:	4c 91       	ld	r20, X
     912:	24 2f       	mov	r18, r20
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	90 9e       	mul	r9, r16
     918:	c0 01       	movw	r24, r0
     91a:	91 9e       	mul	r9, r17
     91c:	90 0d       	add	r25, r0
     91e:	11 24       	eor	r1, r1
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
     924:	eb 58       	subi	r30, 0x8B	; 139
     926:	fc 4f       	sbci	r31, 0xFC	; 252
     928:	b5 01       	movw	r22, r10
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	4a 95       	dec	r20
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0x2d>
     934:	ab 01       	movw	r20, r22
     936:	62 81       	ldd	r22, Z+2	; 0x02
     938:	73 81       	ldd	r23, Z+3	; 0x03
     93a:	46 27       	eor	r20, r22
     93c:	57 27       	eor	r21, r23
     93e:	53 83       	std	Z+3, r21	; 0x03
     940:	42 83       	std	Z+2, r20	; 0x02
				sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;				
     942:	f9 01       	movw	r30, r18
     944:	b2 96       	adiw	r30, 0x22	; 34
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	8e 0f       	add	r24, r30
     94c:	9f 1f       	adc	r25, r31
     94e:	fc 01       	movw	r30, r24
     950:	eb 58       	subi	r30, 0x8B	; 139
     952:	fc 4f       	sbci	r31, 0xFC	; 252
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	95 01       	movw	r18, r10
     95a:	0c 2e       	mov	r0, r28
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x63>
     95e:	22 0f       	add	r18, r18
     960:	33 1f       	adc	r19, r19
     962:	0a 94       	dec	r0
     964:	e2 f7       	brpl	.-8      	; 0x95e <__stack+0x5f>
     966:	82 27       	eor	r24, r18
     968:	93 27       	eor	r25, r19
     96a:	93 83       	std	Z+3, r25	; 0x03
     96c:	82 83       	std	Z+2, r24	; 0x02
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     96e:	21 96       	adiw	r28, 0x01	; 1
     970:	c0 31       	cpi	r28, 0x10	; 16
     972:	d1 05       	cpc	r29, r1
     974:	09 f0       	breq	.+2      	; 0x978 <__stack+0x79>
     976:	b2 cf       	rjmp	.-156    	; 0x8dc <update_step_board+0x126>
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	9f 90       	pop	r9
     98e:	7f 90       	pop	r7
     990:	6f 90       	pop	r6
     992:	5f 90       	pop	r5
     994:	4f 90       	pop	r4
     996:	08 95       	ret

00000998 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     998:	80 91 34 02 	lds	r24, 0x0234
     99c:	86 ff       	sbrs	r24, 6
     99e:	08 c0       	rjmp	.+16     	; 0x9b0 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     9a0:	e4 e3       	ldi	r30, 0x34	; 52
     9a2:	f2 e0       	ldi	r31, 0x02	; 2
     9a4:	8f 7b       	andi	r24, 0xBF	; 191
     9a6:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     9b0:	80 91 36 02 	lds	r24, 0x0236
     9b4:	86 ff       	sbrs	r24, 6
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     9b8:	e6 e3       	ldi	r30, 0x36	; 54
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	8f 7b       	andi	r24, 0xBF	; 191
     9be:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     9c8:	80 91 38 02 	lds	r24, 0x0238
     9cc:	86 ff       	sbrs	r24, 6
     9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     9d0:	e8 e3       	ldi	r30, 0x38	; 56
     9d2:	f2 e0       	ldi	r31, 0x02	; 2
     9d4:	8f 7b       	andi	r24, 0xBF	; 191
     9d6:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     9e0:	80 91 3a 02 	lds	r24, 0x023A
     9e4:	86 ff       	sbrs	r24, 6
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     9e8:	ea e3       	ldi	r30, 0x3A	; 58
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	8f 7b       	andi	r24, 0xBF	; 191
     9ee:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     9f8:	80 91 3c 02 	lds	r24, 0x023C
     9fc:	86 ff       	sbrs	r24, 6
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     a00:	ec e3       	ldi	r30, 0x3C	; 60
     a02:	f2 e0       	ldi	r31, 0x02	; 2
     a04:	8f 7b       	andi	r24, 0xBF	; 191
     a06:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	84 e0       	ldi	r24, 0x04	; 4
     a0c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     a10:	80 91 3e 02 	lds	r24, 0x023E
     a14:	86 ff       	sbrs	r24, 6
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     a18:	ee e3       	ldi	r30, 0x3E	; 62
     a1a:	f2 e0       	ldi	r31, 0x02	; 2
     a1c:	8f 7b       	andi	r24, 0xBF	; 191
     a1e:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	85 e0       	ldi	r24, 0x05	; 5
     a24:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     a28:	80 91 40 02 	lds	r24, 0x0240
     a2c:	86 ff       	sbrs	r24, 6
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     a30:	e0 e4       	ldi	r30, 0x40	; 64
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	8f 7b       	andi	r24, 0xBF	; 191
     a36:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	86 e0       	ldi	r24, 0x06	; 6
     a3c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     a40:	80 91 42 02 	lds	r24, 0x0242
     a44:	86 ff       	sbrs	r24, 6
     a46:	08 c0       	rjmp	.+16     	; 0xa58 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     a48:	e2 e4       	ldi	r30, 0x42	; 66
     a4a:	f2 e0       	ldi	r31, 0x02	; 2
     a4c:	8f 7b       	andi	r24, 0xBF	; 191
     a4e:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	87 e0       	ldi	r24, 0x07	; 7
     a54:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     a58:	80 91 44 02 	lds	r24, 0x0244
     a5c:	86 ff       	sbrs	r24, 6
     a5e:	08 c0       	rjmp	.+16     	; 0xa70 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     a60:	e4 e4       	ldi	r30, 0x44	; 68
     a62:	f2 e0       	ldi	r31, 0x02	; 2
     a64:	8f 7b       	andi	r24, 0xBF	; 191
     a66:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	88 e0       	ldi	r24, 0x08	; 8
     a6c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     a70:	80 91 46 02 	lds	r24, 0x0246
     a74:	86 ff       	sbrs	r24, 6
     a76:	08 c0       	rjmp	.+16     	; 0xa88 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     a78:	e6 e4       	ldi	r30, 0x46	; 70
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	8f 7b       	andi	r24, 0xBF	; 191
     a7e:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	89 e0       	ldi	r24, 0x09	; 9
     a84:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     a88:	80 91 48 02 	lds	r24, 0x0248
     a8c:	86 ff       	sbrs	r24, 6
     a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     a90:	e8 e4       	ldi	r30, 0x48	; 72
     a92:	f2 e0       	ldi	r31, 0x02	; 2
     a94:	8f 7b       	andi	r24, 0xBF	; 191
     a96:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     aa0:	08 95       	ret

00000aa2 <refresh>:
}




void refresh(void) {
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     ab0:	0e 94 ad 03 	call	0x75a	; 0x75a <update_tempo>
	read_switches();
     ab4:	0e 94 08 07 	call	0xe10	; 0xe10 <read_switches>
	check_start_stop_tap();
     ab8:	0e 94 78 07 	call	0xef0	; 0xef0 <check_start_stop_tap>
	
	parse_switch_data();
     abc:	0e 94 51 07 	call	0xea2	; 0xea2 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     ac0:	80 91 75 03 	lds	r24, 0x0375
     ac4:	83 30       	cpi	r24, 0x03	; 3
     ac6:	11 f4       	brne	.+4      	; 0xacc <refresh+0x2a>
     ac8:	0e 94 cc 04 	call	0x998	; 0x998 <live_hits>
	update_mode();
     acc:	0e 94 a1 06 	call	0xd42	; 0xd42 <update_mode>
	check_variation_switches();
     ad0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <check_variation_switches>
	check_inst_switches();
     ad4:	0e 94 bc 07 	call	0xf78	; 0xf78 <check_inst_switches>
	update_step_board();
     ad8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <update_step_board>
	if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     adc:	80 91 76 03 	lds	r24, 0x0376
     ae0:	81 ff       	sbrs	r24, 1
     ae2:	7b c0       	rjmp	.+246    	; 0xbda <refresh+0x138>
		
		if (sequencer.next_step_flag) {
     ae4:	80 91 46 04 	lds	r24, 0x0446
     ae8:	86 ff       	sbrs	r24, 6
     aea:	80 c0       	rjmp	.+256    	; 0xbec <refresh+0x14a>
			sequencer.next_step_flag = 0;
     aec:	e5 e4       	ldi	r30, 0x45	; 69
     aee:	f4 e0       	ldi	r31, 0x04	; 4
     af0:	81 81       	ldd	r24, Z+1	; 0x01
     af2:	8f 7b       	andi	r24, 0xBF	; 191
     af4:	81 83       	std	Z+1, r24	; 0x01
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     af6:	80 78       	andi	r24, 0x80	; 128
     af8:	88 23       	and	r24, r24
     afa:	f1 f3       	breq	.-4      	; 0xaf8 <refresh+0x56>
			PORTD |= (1<<TRIG);
     afc:	5d 9a       	sbi	0x0b, 5	; 11
			spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     afe:	06 e4       	ldi	r16, 0x46	; 70
     b00:	14 e0       	ldi	r17, 0x04	; 4
     b02:	d8 01       	movw	r26, r16
     b04:	8c 91       	ld	r24, X
     b06:	86 95       	lsr	r24
     b08:	8f 71       	andi	r24, 0x1F	; 31
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <refresh+0x72>
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	8a 95       	dec	r24
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <refresh+0x6e>
     b18:	e0 91 49 04 	lds	r30, 0x0449
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	b2 96       	adiw	r30, 0x22	; 34
     b20:	0f 2e       	mov	r0, r31
     b22:	f5 e4       	ldi	r31, 0x45	; 69
     b24:	ef 2e       	mov	r14, r31
     b26:	f4 e0       	ldi	r31, 0x04	; 4
     b28:	ff 2e       	mov	r15, r31
     b2a:	f0 2d       	mov	r31, r0
     b2c:	d7 01       	movw	r26, r14
     b2e:	8c 91       	ld	r24, X
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	0f 2e       	mov	r0, r31
     b36:	f7 e6       	ldi	r31, 0x67	; 103
     b38:	df 2e       	mov	r13, r31
     b3a:	f0 2d       	mov	r31, r0
     b3c:	81 70       	andi	r24, 0x01	; 1
     b3e:	d8 9e       	mul	r13, r24
     b40:	e0 0d       	add	r30, r0
     b42:	f1 1d       	adc	r31, r1
     b44:	11 24       	eor	r1, r1
     b46:	eb 58       	subi	r30, 0x8B	; 139
     b48:	fc 4f       	sbci	r31, 0xFC	; 252
     b4a:	92 81       	ldd	r25, Z+2	; 0x02
     b4c:	83 81       	ldd	r24, Z+3	; 0x03
			spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     b4e:	e8 e6       	ldi	r30, 0x68	; 104
     b50:	f2 e0       	ldi	r31, 0x02	; 2
     b52:	49 2f       	mov	r20, r25
     b54:	42 23       	and	r20, r18
     b56:	40 95       	com	r20
		
		if (sequencer.next_step_flag) {
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     b58:	92 2b       	or	r25, r18
			spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     b5a:	94 23       	and	r25, r20
     b5c:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
			spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     b5e:	98 2f       	mov	r25, r24
     b60:	93 23       	and	r25, r19
     b62:	90 95       	com	r25
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
			spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     b64:	83 2b       	or	r24, r19
			spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     b66:	89 23       	and	r24, r25
     b68:	80 83       	st	Z, r24
			trigger_step(); 
     b6a:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
			if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     b6e:	f7 01       	movw	r30, r14
     b70:	80 81       	ld	r24, Z
     b72:	81 70       	andi	r24, 0x01	; 1
     b74:	c8 2f       	mov	r28, r24
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	df 2f       	mov	r29, r31
     b7a:	dc 9e       	mul	r13, r28
     b7c:	f0 01       	movw	r30, r0
     b7e:	dd 9e       	mul	r13, r29
     b80:	f0 0d       	add	r31, r0
     b82:	11 24       	eor	r1, r1
     b84:	e9 54       	subi	r30, 0x49	; 73
     b86:	fc 4f       	sbci	r31, 0xFC	; 252
     b88:	d8 01       	movw	r26, r16
     b8a:	8c 91       	ld	r24, X
     b8c:	86 95       	lsr	r24
     b8e:	8f 71       	andi	r24, 0x1F	; 31
     b90:	40 81       	ld	r20, Z
     b92:	51 81       	ldd	r21, Z+1	; 0x01
     b94:	62 81       	ldd	r22, Z+2	; 0x02
     b96:	73 81       	ldd	r23, Z+3	; 0x03
     b98:	8a 01       	movw	r16, r20
     b9a:	9b 01       	movw	r18, r22
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <refresh+0x104>
     b9e:	36 95       	lsr	r19
     ba0:	27 95       	ror	r18
     ba2:	17 95       	ror	r17
     ba4:	07 95       	ror	r16
     ba6:	8a 95       	dec	r24
     ba8:	d2 f7       	brpl	.-12     	; 0xb9e <refresh+0xfc>
     baa:	00 ff       	sbrs	r16, 0
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <refresh+0x11c>
				spi_data[8] |= 1<<ACCENT;
     bae:	e8 e6       	ldi	r30, 0x68	; 104
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	80 85       	ldd	r24, Z+8	; 0x08
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	80 87       	std	Z+8, r24	; 0x08
				turn_on(ACCENT_1_LED);
     bb8:	84 e1       	ldi	r24, 0x14	; 20
     bba:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
			}
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     bbe:	ee e6       	ldi	r30, 0x6E	; 110
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	82 60       	ori	r24, 0x02	; 2
     bc6:	80 83       	st	Z, r24
			TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     bc8:	85 b5       	in	r24, 0x25	; 37
     bca:	83 60       	ori	r24, 0x03	; 3
     bcc:	85 bd       	out	0x25, r24	; 37
			sequencer.trigger_finished = 0;
     bce:	e5 e4       	ldi	r30, 0x45	; 69
     bd0:	f4 e0       	ldi	r31, 0x04	; 4
     bd2:	81 81       	ldd	r24, Z+1	; 0x01
     bd4:	8f 77       	andi	r24, 0x7F	; 127
     bd6:	81 83       	std	Z+1, r24	; 0x01
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <refresh+0x14a>
		} else {
			

			
		}		
	} else if (sequencer.next_step_flag){
     bda:	80 91 46 04 	lds	r24, 0x0446
     bde:	86 ff       	sbrs	r24, 6
     be0:	05 c0       	rjmp	.+10     	; 0xbec <refresh+0x14a>
		
			sequencer.next_step_flag = 0;
     be2:	e5 e4       	ldi	r30, 0x45	; 69
     be4:	f4 e0       	ldi	r31, 0x04	; 4
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	8f 7b       	andi	r24, 0xBF	; 191
     bea:	81 83       	std	Z+1, r24	; 0x01
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     bec:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <update_spi>
	PORTD &= ~(1<<TRIG);
     bf0:	5d 98       	cbi	0x0b, 5	; 11
	//if (trigger_finished && sequencer.SHIFT) update_tempo(); //turning off SPI during pot read creates problem for trigger interrupt
	
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	08 95       	ret

00000c02 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     c02:	8f e1       	ldi	r24, 0x1F	; 31
     c04:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     c08:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     c0c:	88 e9       	ldi	r24, 0x98	; 152
     c0e:	80 93 c1 00 	sts	0x00C1, r24
     c12:	08 95       	ret

00000c14 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     c40:	80 91 c6 00 	lds	r24, 0x00C6
     c44:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     c46:	ae 01       	movw	r20, r28
     c48:	4f 5f       	subi	r20, 0xFF	; 255
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	88 e8       	ldi	r24, 0x88	; 136
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0e 94 95 09 	call	0x132a	; 0x132a <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     c7e:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     c80:	8d b1       	in	r24, 0x0d	; 13
     c82:	8c 60       	ori	r24, 0x0C	; 12
     c84:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     c86:	87 b1       	in	r24, 0x07	; 7
     c88:	8e 60       	ori	r24, 0x0E	; 14
     c8a:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     c8c:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     c8e:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     c90:	88 b1       	in	r24, 0x08	; 8
     c92:	81 7f       	andi	r24, 0xF1	; 241
     c94:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     c96:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     c98:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     c9a:	80 e5       	ldi	r24, 0x50	; 80
     c9c:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     ca0:	ed ea       	ldi	r30, 0xAD	; 173
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     cb0:	8d e1       	ldi	r24, 0x1D	; 29
     cb2:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
	turn_on(FILL_MANUAL);
     cb6:	82 e2       	ldi	r24, 0x22	; 34
     cb8:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
	
	update_spi();
     cbc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     cc0:	84 b5       	in	r24, 0x24	; 36
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     cc6:	81 ee       	ldi	r24, 0xE1	; 225
     cc8:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     cca:	88 e8       	ldi	r24, 0x88	; 136
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 64 09 	call	0x12c8	; 0x12c8 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     cd2:	66 ea       	ldi	r22, 0xA6	; 166
     cd4:	73 e0       	ldi	r23, 0x03	; 3
     cd6:	88 e8       	ldi	r24, 0x88	; 136
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 58 09 	call	0x12b0	; 0x12b0 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     cde:	64 ea       	ldi	r22, 0xA4	; 164
     ce0:	73 e0       	ldi	r23, 0x03	; 3
     ce2:	88 e8       	ldi	r24, 0x88	; 136
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     cea:	65 ea       	ldi	r22, 0xA5	; 165
     cec:	73 e0       	ldi	r23, 0x03	; 3
     cee:	88 e8       	ldi	r24, 0x88	; 136
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     cf6:	0e 94 01 06 	call	0xc02	; 0xc02 <setup_midi_usart>
	
	setup_internal_clock();
     cfa:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     cfe:	e3 e7       	ldi	r30, 0x73	; 115
     d00:	f2 e0       	ldi	r31, 0x02	; 2
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	81 83       	std	Z+1, r24	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     d0a:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     d0e:	e5 e4       	ldi	r30, 0x45	; 69
     d10:	f4 e0       	ldi	r31, 0x04	; 4
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	90 68       	ori	r25, 0x80	; 128
	sequencer.START = 0;
     d16:	a6 e7       	ldi	r26, 0x76	; 118
     d18:	b3 e0       	ldi	r27, 0x03	; 3
     d1a:	8c 91       	ld	r24, X
     d1c:	8d 7f       	andi	r24, 0xFD	; 253
     d1e:	8c 93       	st	X, r24
	//update_tempo();
	sequencer.variation_mode = 0;
     d20:	80 81       	ld	r24, Z
     d22:	89 7f       	andi	r24, 0xF9	; 249
	sequencer.step_num = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     d24:	80 6f       	ori	r24, 0xF0	; 240
     d26:	80 83       	st	Z, r24
     d28:	9e 7f       	andi	r25, 0xFE	; 254
     d2a:	91 83       	std	Z+1, r25	; 0x01
	turn_on(BASIC_VAR_A_LED);
     d2c:	84 e2       	ldi	r24, 0x24	; 36
     d2e:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
	sei(); //enable global interrupts	
     d32:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     d34:	88 e8       	ldi	r24, 0x88	; 136
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	0e 94 8e 0b 	call	0x171c	; 0x171c <midi_device_process>
	
	refresh();		
     d3c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <refresh>

	
	}
     d40:	f9 cf       	rjmp	.-14     	; 0xd34 <main+0xb6>

00000d42 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     d42:	80 91 52 02 	lds	r24, 0x0252
     d46:	86 ff       	sbrs	r24, 6
     d48:	34 c0       	rjmp	.+104    	; 0xdb2 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     d4a:	e2 e5       	ldi	r30, 0x52	; 82
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	8f 7b       	andi	r24, 0xBF	; 191
     d50:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     d52:	80 91 76 03 	lds	r24, 0x0376
     d56:	80 ff       	sbrs	r24, 0
     d58:	0c c0       	rjmp	.+24     	; 0xd72 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     d5a:	80 91 5d 02 	lds	r24, 0x025D
     d5e:	88 23       	and	r24, r24
     d60:	21 f0       	breq	.+8      	; 0xd6a <update_mode+0x28>
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	80 93 5d 02 	sts	0x025D, r24
     d68:	0e c0       	rjmp	.+28     	; 0xd86 <update_mode+0x44>
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	80 93 5d 02 	sts	0x025D, r24
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     d72:	80 91 5d 02 	lds	r24, 0x025D
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	86 30       	cpi	r24, 0x06	; 6
     d7a:	19 f0       	breq	.+6      	; 0xd82 <update_mode+0x40>
     d7c:	80 93 5d 02 	sts	0x025D, r24
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <update_mode+0x44>
     d82:	10 92 5d 02 	sts	0x025D, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d86:	20 91 5d 02 	lds	r18, 0x025D
     d8a:	e2 2f       	mov	r30, r18
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e4 5f       	subi	r30, 0xF4	; 244
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	80 81       	ld	r24, Z
     d94:	80 93 75 03 	sts	0x0375, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     d98:	e8 e6       	ldi	r30, 0x68	; 104
     d9a:	f2 e0       	ldi	r31, 0x02	; 2
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <update_mode+0x64>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     daa:	94 81       	ldd	r25, Z+4	; 0x04
     dac:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     dae:	89 2b       	or	r24, r25
     db0:	84 83       	std	Z+4, r24	; 0x04
     db2:	08 95       	ret

00000db4 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     db4:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     db8:	ed ea       	ldi	r30, 0xAD	; 173
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	ec f7       	brge	.-6      	; 0xdbc <spi_shift_byte+0x8>
	return SPDR1;
     dc2:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     dc6:	08 95       	ret

00000dc8 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     dcc:	c8 e6       	ldi	r28, 0x68	; 104
     dce:	d2 e0       	ldi	r29, 0x02	; 2
     dd0:	88 81       	ld	r24, Y
     dd2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     df4:	8e 81       	ldd	r24, Y+6	; 0x06
     df6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     dfa:	8f 81       	ldd	r24, Y+7	; 0x07
     dfc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     e00:	88 85       	ldd	r24, Y+8	; 0x08
     e02:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     e06:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     e08:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <read_switches>:

void read_switches(void) { //reads switch data
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     e14:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
     e1c:	c3 e6       	ldi	r28, 0x63	; 99
     e1e:	d2 e0       	ldi	r29, 0x02	; 2
     e20:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
     e28:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
     e30:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
     e38:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <spi_shift_byte>
     e40:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     e42:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     e44:	98 81       	ld	r25, Y
     e46:	39 2f       	mov	r19, r25
     e48:	36 95       	lsr	r19
     e4a:	e6 e7       	ldi	r30, 0x76	; 118
     e4c:	f3 e0       	ldi	r31, 0x03	; 3
     e4e:	20 81       	ld	r18, Z
     e50:	30 fb       	bst	r19, 0
     e52:	20 f9       	bld	r18, 0
     e54:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     e56:	ee e5       	ldi	r30, 0x5E	; 94
     e58:	f2 e0       	ldi	r31, 0x02	; 2
     e5a:	20 81       	ld	r18, Z
     e5c:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     e5e:	29 27       	eor	r18, r25
     e60:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     e62:	92 23       	and	r25, r18
     e64:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     e66:	21 81       	ldd	r18, Z+1	; 0x01
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     e6c:	29 27       	eor	r18, r25
     e6e:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     e70:	92 23       	and	r25, r18
     e72:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     e74:	22 81       	ldd	r18, Z+2	; 0x02
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     e7a:	29 27       	eor	r18, r25
     e7c:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     e7e:	92 23       	and	r25, r18
     e80:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     e82:	23 81       	ldd	r18, Z+3	; 0x03
     e84:	9b 81       	ldd	r25, Y+3	; 0x03
     e86:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     e88:	29 27       	eor	r18, r25
     e8a:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     e8c:	92 23       	and	r25, r18
     e8e:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     e90:	94 81       	ldd	r25, Z+4	; 0x04
     e92:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     e94:	98 27       	eor	r25, r24
     e96:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     e98:	89 23       	and	r24, r25
     e9a:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     ea6:	da 01       	movw	r26, r20
     ea8:	aa 0f       	add	r26, r26
     eaa:	bb 1f       	adc	r27, r27
     eac:	ae 5e       	subi	r26, 0xEE	; 238
     eae:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     eb0:	8c 91       	ld	r24, X
     eb2:	e8 2f       	mov	r30, r24
     eb4:	e6 95       	lsr	r30
     eb6:	e6 95       	lsr	r30
     eb8:	e6 95       	lsr	r30
     eba:	e7 70       	andi	r30, 0x07	; 7
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	ed 59       	subi	r30, 0x9D	; 157
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
     ec2:	20 81       	ld	r18, Z
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	98 2f       	mov	r25, r24
     ec8:	97 70       	andi	r25, 0x07	; 7
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <parse_switch_data+0x2e>
     ecc:	35 95       	asr	r19
     ece:	27 95       	ror	r18
     ed0:	9a 95       	dec	r25
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <parse_switch_data+0x2a>
     ed4:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     ed6:	86 fb       	bst	r24, 6
     ed8:	99 27       	eor	r25, r25
     eda:	90 f9       	bld	r25, 0
     edc:	29 27       	eor	r18, r25
     ede:	20 fb       	bst	r18, 0
     ee0:	86 f9       	bld	r24, 6
     ee2:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     ee4:	4f 5f       	subi	r20, 0xFF	; 255
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	43 32       	cpi	r20, 0x23	; 35
     eea:	51 05       	cpc	r21, r1
     eec:	e1 f6       	brne	.-72     	; 0xea6 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     eee:	08 95       	ret

00000ef0 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     ef0:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     ef2:	80 91 71 02 	lds	r24, 0x0271
     ef6:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     ef8:	89 27       	eor	r24, r25
     efa:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     efe:	89 23       	and	r24, r25
     f00:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
     f04:	e6 e7       	ldi	r30, 0x76	; 118
     f06:	f3 e0       	ldi	r31, 0x03	; 3
     f08:	90 81       	ld	r25, Z
     f0a:	91 fb       	bst	r25, 1
     f0c:	22 27       	eor	r18, r18
     f0e:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     f10:	86 95       	lsr	r24
     f12:	82 27       	eor	r24, r18
     f14:	80 fb       	bst	r24, 0
     f16:	91 f9       	bld	r25, 1
     f18:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
     f1a:	91 ff       	sbrs	r25, 1
     f1c:	2a c0       	rjmp	.+84     	; 0xf72 <check_start_stop_tap+0x82>
     f1e:	21 11       	cpse	r18, r1
     f20:	2a c0       	rjmp	.+84     	; 0xf76 <check_start_stop_tap+0x86>
		
		sequencer.current_step = 0;
     f22:	e5 e4       	ldi	r30, 0x45	; 69
     f24:	f4 e0       	ldi	r31, 0x04	; 4
     f26:	81 81       	ldd	r24, Z+1	; 0x01
		sequencer.next_step_flag = 1;
     f28:	81 7c       	andi	r24, 0xC1	; 193
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	81 83       	std	Z+1, r24	; 0x01
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
     f2e:	10 92 74 02 	sts	0x0274, r1
		sequencer.var_change = 0;
     f32:	80 81       	ld	r24, Z
     f34:	87 7f       	andi	r24, 0xF7	; 247
     f36:	80 83       	st	Z, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
     f38:	81 fd       	sbrc	r24, 1
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <check_start_stop_tap+0x52>
			
			sequencer.variation = VAR_A; //start on variation A
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	80 83       	st	Z, r24
     f40:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
     f42:	e5 e4       	ldi	r30, 0x45	; 69
     f44:	f4 e0       	ldi	r31, 0x04	; 4
     f46:	80 81       	ld	r24, Z
     f48:	81 60       	ori	r24, 0x01	; 1
     f4a:	80 83       	st	Z, r24
     f4c:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
     f4e:	0e 94 95 03 	call	0x72a	; 0x72a <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
     f52:	80 91 49 04 	lds	r24, 0x0449
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	fc 01       	movw	r30, r24
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	e8 0f       	add	r30, r24
     f60:	f9 1f       	adc	r31, r25
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	e0 50       	subi	r30, 0x00	; 0
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	85 81       	ldd	r24, Z+5	; 0x05
     f6c:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
     f70:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	61 f3       	breq	.-40     	; 0xf4e <check_start_stop_tap+0x5e>
     f76:	08 95       	ret

00000f78 <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
     f78:	3f 92       	push	r3
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	0f 2e       	mov	r0, r31
     f9c:	f5 e0       	ldi	r31, 0x05	; 5
     f9e:	ef 2e       	mov	r14, r31
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	ff 2e       	mov	r15, r31
     fa4:	f0 2d       	mov	r31, r0
     fa6:	0f 2e       	mov	r0, r31
     fa8:	fb e3       	ldi	r31, 0x3B	; 59
     faa:	8f 2e       	mov	r8, r31
     fac:	f1 e0       	ldi	r31, 0x01	; 1
     fae:	9f 2e       	mov	r9, r31
     fb0:	f0 2d       	mov	r31, r0
     fb2:	02 e1       	ldi	r16, 0x12	; 18
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	c1 e1       	ldi	r28, 0x11	; 17
     fb8:	d0 e0       	ldi	r29, 0x00	; 0
     fba:	c1 2c       	mov	r12, r1
     fbc:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     fbe:	0f 2e       	mov	r0, r31
     fc0:	f9 e4       	ldi	r31, 0x49	; 73
     fc2:	af 2e       	mov	r10, r31
     fc4:	f4 e0       	ldi	r31, 0x04	; 4
     fc6:	bf 2e       	mov	r11, r31
     fc8:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     fca:	0f 2e       	mov	r0, r31
     fcc:	ff e5       	ldi	r31, 0x5F	; 95
     fce:	4f 2e       	mov	r4, r31
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	5f 2e       	mov	r5, r31
     fd4:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     fd6:	0f 2e       	mov	r0, r31
     fd8:	ff e0       	ldi	r31, 0x0F	; 15
     fda:	3f 2e       	mov	r3, r31
     fdc:	f0 2d       	mov	r31, r0
     fde:	0c c0       	rjmp	.+24     	; 0xff8 <check_inst_switches+0x80>
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	c8 1a       	sub	r12, r24
     fe4:	d8 0a       	sbc	r13, r24
     fe6:	21 96       	adiw	r28, 0x01	; 1
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	a6 e0       	ldi	r26, 0x06	; 6
     fee:	ea 0e       	add	r14, r26
     ff0:	f1 1c       	adc	r15, r1
     ff2:	b6 e0       	ldi	r27, 0x06	; 6
     ff4:	8b 0e       	add	r8, r27
     ff6:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     ff8:	fe 01       	movw	r30, r28
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	ee 5e       	subi	r30, 0xEE	; 238
    1000:	fd 4f       	sbci	r31, 0xFD	; 253
    1002:	80 81       	ld	r24, Z
    1004:	86 ff       	sbrs	r24, 6
    1006:	37 c0       	rjmp	.+110    	; 0x1076 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1008:	fe 01       	movw	r30, r28
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 5e       	subi	r30, 0xEE	; 238
    1010:	fd 4f       	sbci	r31, 0xFD	; 253
    1012:	8f 7b       	andi	r24, 0xBF	; 191
    1014:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    1016:	0e 94 95 03 	call	0x72a	; 0x72a <turn_off_all_inst_leds>
    101a:	f7 01       	movw	r30, r14
    101c:	d7 01       	movw	r26, r14
    101e:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1020:	8c 91       	ld	r24, X
    1022:	8f 3f       	cpi	r24, 0xFF	; 255
    1024:	a9 f0       	breq	.+42     	; 0x1050 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1026:	d5 01       	movw	r26, r10
    1028:	8c 91       	ld	r24, X
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	c8 16       	cp	r12, r24
    102e:	d9 06       	cpc	r13, r25
    1030:	49 f4       	brne	.+18     	; 0x1044 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1032:	f4 01       	movw	r30, r8
    1034:	80 81       	ld	r24, Z
    1036:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
    103a:	89 e0       	ldi	r24, 0x09	; 9
    103c:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    103e:	d5 01       	movw	r26, r10
    1040:	8c 93       	st	X, r24
    1042:	19 c0       	rjmp	.+50     	; 0x1076 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1044:	80 81       	ld	r24, Z
    1046:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    104a:	f5 01       	movw	r30, r10
    104c:	c0 82       	st	Z, r12
    104e:	13 c0       	rjmp	.+38     	; 0x1076 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1050:	d5 01       	movw	r26, r10
    1052:	8c 91       	ld	r24, X
    1054:	86 30       	cpi	r24, 0x06	; 6
    1056:	51 f4       	brne	.+20     	; 0x106c <check_inst_switches+0xf4>
    1058:	c7 31       	cpi	r28, 0x17	; 23
    105a:	d1 05       	cpc	r29, r1
    105c:	39 f4       	brne	.+14     	; 0x106c <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    105e:	f2 01       	movw	r30, r4
    1060:	80 81       	ld	r24, Z
    1062:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
					sequencer.current_inst = MA;
    1066:	d5 01       	movw	r26, r10
    1068:	3c 92       	st	X, r3
    106a:	ba cf       	rjmp	.-140    	; 0xfe0 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    106c:	80 81       	ld	r24, Z
    106e:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1072:	f5 01       	movw	r30, r10
    1074:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1076:	0c 31       	cpi	r16, 0x1C	; 28
    1078:	11 05       	cpc	r17, r1
    107a:	0c f4       	brge	.+2      	; 0x107e <check_inst_switches+0x106>
    107c:	b1 cf       	rjmp	.-158    	; 0xfe0 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    107e:	80 91 32 02 	lds	r24, 0x0232
    1082:	86 ff       	sbrs	r24, 6
    1084:	0c c0       	rjmp	.+24     	; 0x109e <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f2 e0       	ldi	r31, 0x02	; 2
    108a:	8f 7b       	andi	r24, 0xBF	; 191
    108c:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    108e:	0e 94 95 03 	call	0x72a	; 0x72a <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    1092:	84 e1       	ldi	r24, 0x14	; 20
    1094:	0e 94 45 03 	call	0x68a	; 0x68a <turn_on>
		sequencer.current_inst = AC;
    1098:	80 e1       	ldi	r24, 0x10	; 16
    109a:	80 93 49 04 	sts	0x0449, r24
	}
	
}	
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	08 95       	ret

000010c2 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    10c2:	80 91 4e 02 	lds	r24, 0x024E
    10c6:	86 ff       	sbrs	r24, 6
    10c8:	30 c0       	rjmp	.+96     	; 0x112a <check_variation_switches+0x68>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    10ca:	ee e4       	ldi	r30, 0x4E	; 78
    10cc:	f2 e0       	ldi	r31, 0x02	; 2
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    10d2:	80 91 45 04 	lds	r24, 0x0445
    10d6:	86 95       	lsr	r24
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	83 70       	andi	r24, 0x03	; 3
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	41 f0       	breq	.+16     	; 0x10f0 <check_variation_switches+0x2e>
    10e0:	e5 e4       	ldi	r30, 0x45	; 69
    10e2:	f4 e0       	ldi	r31, 0x04	; 4
    10e4:	88 0f       	add	r24, r24
    10e6:	90 81       	ld	r25, Z
    10e8:	99 7f       	andi	r25, 0xF9	; 249
    10ea:	89 2b       	or	r24, r25
    10ec:	80 83       	st	Z, r24
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <check_variation_switches+0x38>
    10f0:	e5 e4       	ldi	r30, 0x45	; 69
    10f2:	f4 e0       	ldi	r31, 0x04	; 4
    10f4:	80 81       	ld	r24, Z
    10f6:	89 7f       	andi	r24, 0xF9	; 249
    10f8:	80 83       	st	Z, r24
		if (sequencer.START) {
    10fa:	80 91 76 03 	lds	r24, 0x0376
    10fe:	81 ff       	sbrs	r24, 1
    1100:	06 c0       	rjmp	.+12     	; 0x110e <check_variation_switches+0x4c>
			
			 sequencer.var_change = 1; //set change flag to be handled when new measure starts
    1102:	e5 e4       	ldi	r30, 0x45	; 69
    1104:	f4 e0       	ldi	r31, 0x04	; 4
    1106:	80 81       	ld	r24, Z
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	80 83       	st	Z, r24
    110c:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    110e:	80 91 45 04 	lds	r24, 0x0445
    1112:	81 fd       	sbrc	r24, 1
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <check_variation_switches+0x5e>
				
				sequencer.variation = VAR_A;
    1116:	e5 e4       	ldi	r30, 0x45	; 69
    1118:	f4 e0       	ldi	r31, 0x04	; 4
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	80 83       	st	Z, r24
    111e:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1120:	e5 e4       	ldi	r30, 0x45	; 69
    1122:	f4 e0       	ldi	r31, 0x04	; 4
    1124:	80 81       	ld	r24, Z
    1126:	81 60       	ori	r24, 0x01	; 1
    1128:	80 83       	st	Z, r24
    112a:	08 95       	ret

0000112c <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    112c:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    112e:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1130:	74 83       	std	Z+4, r23	; 0x04
    1132:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1134:	11 82       	std	Z+1, r1	; 0x01
    1136:	10 82       	st	Z, r1
    1138:	08 95       	ret

0000113a <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
    1146:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1148:	0e 94 16 09 	call	0x122c	; 0x122c <store_and_clear_interrupt>
    114c:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    114e:	f9 80       	ldd	r15, Y+1	; 0x01
    1150:	4f 2d       	mov	r20, r15
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	ca 01       	movw	r24, r20
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	2a 81       	ldd	r18, Y+2	; 0x02
    115a:	62 2f       	mov	r22, r18
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
    1162:	28 81       	ld	r18, Y
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	82 17       	cp	r24, r18
    1168:	93 07       	cpc	r25, r19
    116a:	29 f4       	brne	.+10     	; 0x1176 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    116c:	81 2f       	mov	r24, r17
    116e:	0e 94 19 09 	call	0x1232	; 0x1232 <restore_interrupt_setting>
      return false;
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	12 c0       	rjmp	.+36     	; 0x119a <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1176:	eb 81       	ldd	r30, Y+3	; 0x03
    1178:	fc 81       	ldd	r31, Y+4	; 0x04
    117a:	ef 0d       	add	r30, r15
    117c:	f1 1d       	adc	r31, r1
    117e:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1180:	29 81       	ldd	r18, Y+1	; 0x01
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	c9 01       	movw	r24, r18
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	6a 81       	ldd	r22, Y+2	; 0x02
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
    1190:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1192:	81 2f       	mov	r24, r17
    1194:	0e 94 19 09 	call	0x1232	; 0x1232 <restore_interrupt_setting>
      return true;
    1198:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	08 95       	ret

000011a6 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    11ac:	0e 94 16 09 	call	0x122c	; 0x122c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    11b0:	39 81       	ldd	r19, Y+1	; 0x01
    11b2:	28 81       	ld	r18, Y
    11b4:	32 17       	cp	r19, r18
    11b6:	18 f0       	brcs	.+6      	; 0x11be <bytequeue_length+0x18>
      len = queue->end - queue->start;
    11b8:	c3 2f       	mov	r28, r19
    11ba:	c2 1b       	sub	r28, r18
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <bytequeue_length+0x20>
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	c3 2f       	mov	r28, r19
    11c2:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    11c4:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    11c6:	0e 94 19 09 	call	0x1232	; 0x1232 <restore_interrupt_setting>
   return len;
}
    11ca:	8c 2f       	mov	r24, r28
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    11d2:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    11d4:	80 81       	ld	r24, Z
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	9b 01       	movw	r18, r22
    11da:	28 0f       	add	r18, r24
    11dc:	31 1d       	adc	r19, r1
    11de:	c9 01       	movw	r24, r18
    11e0:	62 81       	ldd	r22, Z+2	; 0x02
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
    11e8:	03 80       	ldd	r0, Z+3	; 0x03
    11ea:	f4 81       	ldd	r31, Z+4	; 0x04
    11ec:	e0 2d       	mov	r30, r0
    11ee:	e8 0f       	add	r30, r24
    11f0:	f9 1f       	adc	r31, r25
}
    11f2:	80 81       	ld	r24, Z
    11f4:	08 95       	ret

000011f6 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1200:	0e 94 16 09 	call	0x122c	; 0x122c <store_and_clear_interrupt>
    1204:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1206:	88 81       	ld	r24, Y
    1208:	21 2f       	mov	r18, r17
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	b9 01       	movw	r22, r18
    120e:	68 0f       	add	r22, r24
    1210:	71 1d       	adc	r23, r1
    1212:	cb 01       	movw	r24, r22
    1214:	6a 81       	ldd	r22, Y+2	; 0x02
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divmodhi4>
    121c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    121e:	84 2f       	mov	r24, r20
    1220:	0e 94 19 09 	call	0x1232	; 0x1232 <restore_interrupt_setting>
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	08 95       	ret

0000122c <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    122c:	8f b7       	in	r24, 0x3f	; 63
   cli();
    122e:	f8 94       	cli
   return sreg;
}
    1230:	08 95       	ret

00001232 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1232:	8f bf       	out	0x3f, r24	; 63
    1234:	08 95       	ret

00001236 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1236:	88 1f       	adc	r24, r24
    1238:	88 27       	eor	r24, r24
    123a:	88 1f       	adc	r24, r24
    123c:	08 95       	ret

0000123e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	88 3f       	cpi	r24, 0xF8	; 248
    1242:	08 f4       	brcc	.+2      	; 0x1246 <midi_is_realtime+0x8>
    1244:	90 e0       	ldi	r25, 0x00	; 0
}
    1246:	89 2f       	mov	r24, r25
    1248:	08 95       	ret

0000124a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    124a:	98 2f       	mov	r25, r24
    124c:	90 7f       	andi	r25, 0xF0	; 240
    124e:	90 3c       	cpi	r25, 0xC0	; 192
    1250:	b1 f0       	breq	.+44     	; 0x127e <midi_packet_length+0x34>
    1252:	58 f4       	brcc	.+22     	; 0x126a <midi_packet_length+0x20>
    1254:	90 39       	cpi	r25, 0x90	; 144
    1256:	41 f1       	breq	.+80     	; 0x12a8 <midi_packet_length+0x5e>
    1258:	18 f4       	brcc	.+6      	; 0x1260 <midi_packet_length+0x16>
    125a:	90 38       	cpi	r25, 0x80	; 128
    125c:	19 f5       	brne	.+70     	; 0x12a4 <midi_packet_length+0x5a>
    125e:	24 c0       	rjmp	.+72     	; 0x12a8 <midi_packet_length+0x5e>
    1260:	90 3a       	cpi	r25, 0xA0	; 160
    1262:	11 f1       	breq	.+68     	; 0x12a8 <midi_packet_length+0x5e>
    1264:	90 3b       	cpi	r25, 0xB0	; 176
    1266:	f1 f4       	brne	.+60     	; 0x12a4 <midi_packet_length+0x5a>
    1268:	1f c0       	rjmp	.+62     	; 0x12a8 <midi_packet_length+0x5e>
    126a:	90 3e       	cpi	r25, 0xE0	; 224
    126c:	e9 f0       	breq	.+58     	; 0x12a8 <midi_packet_length+0x5e>
    126e:	18 f4       	brcc	.+6      	; 0x1276 <midi_packet_length+0x2c>
    1270:	90 3d       	cpi	r25, 0xD0	; 208
    1272:	29 f0       	breq	.+10     	; 0x127e <midi_packet_length+0x34>
    1274:	17 c0       	rjmp	.+46     	; 0x12a4 <midi_packet_length+0x5a>
    1276:	90 3f       	cpi	r25, 0xF0	; 240
    1278:	21 f0       	breq	.+8      	; 0x1282 <midi_packet_length+0x38>
    127a:	93 3f       	cpi	r25, 0xF3	; 243
    127c:	99 f4       	brne	.+38     	; 0x12a4 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	08 95       	ret
      case 0xF0:
         switch(status) {
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	fc 01       	movw	r30, r24
    1286:	e1 5f       	subi	r30, 0xF1	; 241
    1288:	f1 09       	sbc	r31, r1
    128a:	ef 30       	cpi	r30, 0x0F	; 15
    128c:	f1 05       	cpc	r31, r1
    128e:	40 f4       	brcc	.+16     	; 0x12a0 <midi_packet_length+0x56>
    1290:	e6 5a       	subi	r30, 0xA6	; 166
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret
         }
      default:
         return UNDEFINED;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    12ae:	08 95       	ret

000012b0 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    12b0:	fc 01       	movw	r30, r24
    12b2:	75 83       	std	Z+5, r23	; 0x05
    12b4:	64 83       	std	Z+4, r22	; 0x04
    12b6:	08 95       	ret

000012b8 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    12b8:	fc 01       	movw	r30, r24
    12ba:	77 83       	std	Z+7, r23	; 0x07
    12bc:	66 83       	std	Z+6, r22	; 0x06
    12be:	08 95       	ret

000012c0 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    12c0:	fc 01       	movw	r30, r24
    12c2:	77 8b       	std	Z+23, r23	; 0x17
    12c4:	66 8b       	std	Z+22, r22	; 0x16
    12c6:	08 95       	ret

000012c8 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    12ce:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    12d0:	1f a2       	std	Y+39, r1	; 0x27
    12d2:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    12d4:	bc 01       	movw	r22, r24
    12d6:	68 5d       	subi	r22, 0xD8	; 216
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	40 ec       	ldi	r20, 0xC0	; 192
    12dc:	88 51       	subi	r24, 0x18	; 24
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	0e 94 96 08 	call	0x112c	; 0x112c <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    12e4:	1b 82       	std	Y+3, r1	; 0x03
    12e6:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    12e8:	1d 82       	std	Y+5, r1	; 0x05
    12ea:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    12ec:	1f 82       	std	Y+7, r1	; 0x07
    12ee:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    12f0:	19 86       	std	Y+9, r1	; 0x09
    12f2:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    12f4:	1b 86       	std	Y+11, r1	; 0x0b
    12f6:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    12f8:	1d 86       	std	Y+13, r1	; 0x0d
    12fa:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    12fc:	1f 86       	std	Y+15, r1	; 0x0f
    12fe:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1300:	19 8a       	std	Y+17, r1	; 0x11
    1302:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1304:	1b 8a       	std	Y+19, r1	; 0x13
    1306:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1308:	1d 8a       	std	Y+21, r1	; 0x15
    130a:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    130c:	1f 8a       	std	Y+23, r1	; 0x17
    130e:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1310:	19 8e       	std	Y+25, r1	; 0x19
    1312:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1314:	1b 8e       	std	Y+27, r1	; 0x1b
    1316:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1318:	1d 8e       	std	Y+29, r1	; 0x1d
    131a:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    131c:	1f 8e       	std	Y+31, r1	; 0x1f
    131e:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1320:	19 a2       	std	Y+33, r1	; 0x21
    1322:	18 a2       	std	Y+32, r1	; 0x20
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1336:	66 23       	and	r22, r22
    1338:	99 f0       	breq	.+38     	; 0x1360 <midi_device_input+0x36>
    133a:	ea 01       	movw	r28, r20
    133c:	61 50       	subi	r22, 0x01	; 1
    133e:	06 2f       	mov	r16, r22
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	04 0f       	add	r16, r20
    1348:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    134a:	7c 01       	movw	r14, r24
    134c:	28 ee       	ldi	r18, 0xE8	; 232
    134e:	e2 0e       	add	r14, r18
    1350:	f1 1c       	adc	r15, r1
    1352:	69 91       	ld	r22, Y+
    1354:	c7 01       	movw	r24, r14
    1356:	0e 94 9d 08 	call	0x113a	; 0x113a <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    135a:	c0 17       	cp	r28, r16
    135c:	d1 07       	cpc	r29, r17
    135e:	c9 f7       	brne	.-14     	; 0x1352 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	08 95       	ret

0000136e <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	00 d0       	rcall	.+0      	; 0x1384 <midi_input_callbacks+0x16>
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	7c 01       	movw	r14, r24
    138c:	6b 01       	movw	r12, r22
    138e:	14 2f       	mov	r17, r20
    1390:	b2 2e       	mov	r11, r18
    1392:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1394:	dc 01       	movw	r26, r24
    1396:	95 96       	adiw	r26, 0x25	; 37
    1398:	8c 91       	ld	r24, X
    139a:	95 97       	sbiw	r26, 0x25	; 37
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	11 f5       	brne	.+68     	; 0x13e4 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    13a0:	5a 96       	adiw	r26, 0x1a	; 26
    13a2:	ed 91       	ld	r30, X+
    13a4:	fc 91       	ld	r31, X
    13a6:	5b 97       	sbiw	r26, 0x1b	; 27
    13a8:	30 97       	sbiw	r30, 0x00	; 0
    13aa:	09 f4       	brne	.+2      	; 0x13ae <midi_input_callbacks+0x40>
    13ac:	cc c0       	rjmp	.+408    	; 0x1546 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    13ae:	9b 01       	movw	r18, r22
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	31 09       	sbc	r19, r1
    13b4:	ab ea       	ldi	r26, 0xAB	; 171
    13b6:	ba ea       	ldi	r27, 0xAA	; 170
    13b8:	0e 94 df 0b 	call	0x17be	; 0x17be <__umulhisi3>
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	9c 01       	movw	r18, r24
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	82 0f       	add	r24, r18
    13c8:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    13ca:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    13cc:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    13ce:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    13d0:	4c 2d       	mov	r20, r12
    13d2:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    13d4:	9e 01       	movw	r18, r28
    13d6:	2f 5f       	subi	r18, 0xFF	; 255
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	68 2f       	mov	r22, r24
    13dc:	79 2f       	mov	r23, r25
    13de:	c7 01       	movw	r24, r14
    13e0:	09 95       	icall
    13e2:	be c0       	rjmp	.+380    	; 0x1560 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    13e4:	62 30       	cpi	r22, 0x02	; 2
    13e6:	71 05       	cpc	r23, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <midi_input_callbacks+0x7e>
    13ea:	55 c0       	rjmp	.+170    	; 0x1496 <midi_input_callbacks+0x128>
    13ec:	63 30       	cpi	r22, 0x03	; 3
    13ee:	71 05       	cpc	r23, r1
    13f0:	29 f0       	breq	.+10     	; 0x13fc <midi_input_callbacks+0x8e>
    13f2:	61 30       	cpi	r22, 0x01	; 1
    13f4:	71 05       	cpc	r23, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <midi_input_callbacks+0x8c>
    13f8:	a1 c0       	rjmp	.+322    	; 0x153c <midi_input_callbacks+0x1ce>
    13fa:	88 c0       	rjmp	.+272    	; 0x150c <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    13fc:	84 2f       	mov	r24, r20
    13fe:	80 7f       	andi	r24, 0xF0	; 240
    1400:	80 3a       	cpi	r24, 0xA0	; 160
    1402:	f1 f0       	breq	.+60     	; 0x1440 <midi_input_callbacks+0xd2>
    1404:	28 f4       	brcc	.+10     	; 0x1410 <midi_input_callbacks+0xa2>
    1406:	80 38       	cpi	r24, 0x80	; 128
    1408:	a9 f0       	breq	.+42     	; 0x1434 <midi_input_callbacks+0xc6>
    140a:	80 39       	cpi	r24, 0x90	; 144
    140c:	69 f0       	breq	.+26     	; 0x1428 <midi_input_callbacks+0xba>
    140e:	2f c0       	rjmp	.+94     	; 0x146e <midi_input_callbacks+0x100>
    1410:	80 3e       	cpi	r24, 0xE0	; 224
    1412:	e1 f0       	breq	.+56     	; 0x144c <midi_input_callbacks+0xde>
    1414:	80 3f       	cpi	r24, 0xF0	; 240
    1416:	01 f1       	breq	.+64     	; 0x1458 <midi_input_callbacks+0xea>
    1418:	80 3b       	cpi	r24, 0xB0	; 176
    141a:	49 f5       	brne	.+82     	; 0x146e <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    141c:	d7 01       	movw	r26, r14
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	ed 91       	ld	r30, X+
    1422:	fc 91       	ld	r31, X
    1424:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1426:	25 c0       	rjmp	.+74     	; 0x1472 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1428:	d7 01       	movw	r26, r14
    142a:	14 96       	adiw	r26, 0x04	; 4
    142c:	ed 91       	ld	r30, X+
    142e:	fc 91       	ld	r31, X
    1430:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1432:	1f c0       	rjmp	.+62     	; 0x1472 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1434:	d7 01       	movw	r26, r14
    1436:	16 96       	adiw	r26, 0x06	; 6
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
    143c:	17 97       	sbiw	r26, 0x07	; 7
              break;
    143e:	19 c0       	rjmp	.+50     	; 0x1472 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1440:	d7 01       	movw	r26, r14
    1442:	18 96       	adiw	r26, 0x08	; 8
    1444:	ed 91       	ld	r30, X+
    1446:	fc 91       	ld	r31, X
    1448:	19 97       	sbiw	r26, 0x09	; 9
              break;
    144a:	13 c0       	rjmp	.+38     	; 0x1472 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    144c:	d7 01       	movw	r26, r14
    144e:	1a 96       	adiw	r26, 0x0a	; 10
    1450:	ed 91       	ld	r30, X+
    1452:	fc 91       	ld	r31, X
    1454:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1458:	42 3f       	cpi	r20, 0xF2	; 242
    145a:	09 f0       	breq	.+2      	; 0x145e <midi_input_callbacks+0xf0>
    145c:	74 c0       	rjmp	.+232    	; 0x1546 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    145e:	d7 01       	movw	r26, r14
    1460:	1c 96       	adiw	r26, 0x0c	; 12
    1462:	ed 91       	ld	r30, X+
    1464:	fc 91       	ld	r31, X
    1466:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1468:	30 97       	sbiw	r30, 0x00	; 0
    146a:	41 f4       	brne	.+16     	; 0x147c <midi_input_callbacks+0x10e>
    146c:	6c c0       	rjmp	.+216    	; 0x1546 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    146e:	e0 e0       	ldi	r30, 0x00	; 0
    1470:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	09 f4       	brne	.+2      	; 0x1478 <midi_input_callbacks+0x10a>
    1476:	67 c0       	rjmp	.+206    	; 0x1546 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1478:	12 3f       	cpi	r17, 0xF2	; 242
    147a:	31 f4       	brne	.+12     	; 0x1488 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    147c:	2a 2d       	mov	r18, r10
    147e:	4b 2d       	mov	r20, r11
    1480:	62 ef       	ldi	r22, 0xF2	; 242
    1482:	c7 01       	movw	r24, r14
    1484:	09 95       	icall
    1486:	6c c0       	rjmp	.+216    	; 0x1560 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1488:	2a 2d       	mov	r18, r10
    148a:	4b 2d       	mov	r20, r11
    148c:	61 2f       	mov	r22, r17
    148e:	6f 70       	andi	r22, 0x0F	; 15
    1490:	c7 01       	movw	r24, r14
    1492:	09 95       	icall
    1494:	65 c0       	rjmp	.+202    	; 0x1560 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1496:	84 2f       	mov	r24, r20
    1498:	80 7f       	andi	r24, 0xF0	; 240
    149a:	80 3d       	cpi	r24, 0xD0	; 208
    149c:	51 f0       	breq	.+20     	; 0x14b2 <midi_input_callbacks+0x144>
    149e:	80 3f       	cpi	r24, 0xF0	; 240
    14a0:	71 f0       	breq	.+28     	; 0x14be <midi_input_callbacks+0x150>
    14a2:	80 3c       	cpi	r24, 0xC0	; 192
    14a4:	01 f5       	brne	.+64     	; 0x14e6 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    14a6:	d7 01       	movw	r26, r14
    14a8:	1e 96       	adiw	r26, 0x0e	; 14
    14aa:	ed 91       	ld	r30, X+
    14ac:	fc 91       	ld	r31, X
    14ae:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    14b0:	1c c0       	rjmp	.+56     	; 0x14ea <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    14b2:	d7 01       	movw	r26, r14
    14b4:	50 96       	adiw	r26, 0x10	; 16
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	51 97       	sbiw	r26, 0x11	; 17
              break;
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    14be:	43 3f       	cpi	r20, 0xF3	; 243
    14c0:	41 f4       	brne	.+16     	; 0x14d2 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    14c2:	d7 01       	movw	r26, r14
    14c4:	52 96       	adiw	r26, 0x12	; 18
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	99 f4       	brne	.+38     	; 0x14f6 <midi_input_callbacks+0x188>
    14d0:	3a c0       	rjmp	.+116    	; 0x1546 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    14d2:	41 3f       	cpi	r20, 0xF1	; 241
    14d4:	c1 f5       	brne	.+112    	; 0x1546 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    14d6:	d7 01       	movw	r26, r14
    14d8:	54 96       	adiw	r26, 0x14	; 20
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	49 f4       	brne	.+18     	; 0x14f6 <midi_input_callbacks+0x188>
    14e4:	30 c0       	rjmp	.+96     	; 0x1546 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    14e6:	e0 e0       	ldi	r30, 0x00	; 0
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    14ea:	30 97       	sbiw	r30, 0x00	; 0
    14ec:	61 f1       	breq	.+88     	; 0x1546 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    14ee:	81 2f       	mov	r24, r17
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	81 3f       	cpi	r24, 0xF1	; 241
    14f4:	29 f4       	brne	.+10     	; 0x1500 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    14f6:	4b 2d       	mov	r20, r11
    14f8:	61 2f       	mov	r22, r17
    14fa:	c7 01       	movw	r24, r14
    14fc:	09 95       	icall
    14fe:	30 c0       	rjmp	.+96     	; 0x1560 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1500:	4b 2d       	mov	r20, r11
    1502:	61 2f       	mov	r22, r17
    1504:	6f 70       	andi	r22, 0x0F	; 15
    1506:	c7 01       	movw	r24, r14
    1508:	09 95       	icall
    150a:	2a c0       	rjmp	.+84     	; 0x1560 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    150c:	84 2f       	mov	r24, r20
    150e:	0e 94 1f 09 	call	0x123e	; 0x123e <midi_is_realtime>
    1512:	88 23       	and	r24, r24
    1514:	31 f0       	breq	.+12     	; 0x1522 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1516:	d7 01       	movw	r26, r14
    1518:	56 96       	adiw	r26, 0x16	; 22
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	57 97       	sbiw	r26, 0x17	; 23
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1522:	16 3f       	cpi	r17, 0xF6	; 246
    1524:	81 f4       	brne	.+32     	; 0x1546 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1526:	d7 01       	movw	r26, r14
    1528:	58 96       	adiw	r26, 0x18	; 24
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1530:	30 97       	sbiw	r30, 0x00	; 0
    1532:	49 f0       	breq	.+18     	; 0x1546 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1534:	61 2f       	mov	r22, r17
    1536:	c7 01       	movw	r24, r14
    1538:	09 95       	icall
    153a:	12 c0       	rjmp	.+36     	; 0x1560 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    153c:	64 30       	cpi	r22, 0x04	; 4
    153e:	71 05       	cpc	r23, r1
    1540:	10 f0       	brcs	.+4      	; 0x1546 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1542:	c1 2c       	mov	r12, r1
    1544:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1546:	d7 01       	movw	r26, r14
    1548:	5c 96       	adiw	r26, 0x1c	; 28
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	5d 97       	sbiw	r26, 0x1d	; 29
    1550:	30 97       	sbiw	r30, 0x00	; 0
    1552:	31 f0       	breq	.+12     	; 0x1560 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1554:	0a 2d       	mov	r16, r10
    1556:	2b 2d       	mov	r18, r11
    1558:	41 2f       	mov	r20, r17
    155a:	b6 01       	movw	r22, r12
    155c:	c7 01       	movw	r24, r14
    155e:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1560:	d7 01       	movw	r26, r14
    1562:	5e 96       	adiw	r26, 0x1e	; 30
    1564:	ed 91       	ld	r30, X+
    1566:	fc 91       	ld	r31, X
    1568:	5f 97       	sbiw	r26, 0x1f	; 31
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	31 f0       	breq	.+12     	; 0x157a <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    156e:	0a 2d       	mov	r16, r10
    1570:	2b 2d       	mov	r18, r11
    1572:	41 2f       	mov	r20, r17
    1574:	b6 01       	movw	r22, r12
    1576:	c7 01       	movw	r24, r14
    1578:	09 95       	icall
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	08 95       	ret

00001596 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ec 01       	movw	r28, r24
    15a2:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    15a4:	86 2f       	mov	r24, r22
    15a6:	0e 94 1f 09 	call	0x123e	; 0x123e <midi_is_realtime>
    15aa:	88 23       	and	r24, r24
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    15ae:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    15b4:	00 e0       	ldi	r16, 0x00	; 0
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	41 2f       	mov	r20, r17
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	ce 01       	movw	r24, r28
    15c0:	0e 94 b7 09 	call	0x136e	; 0x136e <midi_input_callbacks>
    device->input_state = state;
    15c4:	fd a2       	std	Y+37, r15	; 0x25
    15c6:	a4 c0       	rjmp	.+328    	; 0x1710 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    15c8:	81 2f       	mov	r24, r17
    15ca:	0e 94 1b 09 	call	0x1236	; 0x1236 <midi_is_statusbyte>
    15ce:	88 23       	and	r24, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <midi_process_byte+0x3e>
    15d2:	5d c0       	rjmp	.+186    	; 0x168e <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    15d4:	8d a1       	ldd	r24, Y+37	; 0x25
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    15da:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9f a3       	std	Y+39, r25	; 0x27
    15e2:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    15e4:	81 2f       	mov	r24, r17
    15e6:	0e 94 25 09 	call	0x124a	; 0x124a <midi_packet_length>
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	31 f0       	breq	.+12     	; 0x15fa <midi_process_byte+0x64>
    15ee:	b8 f0       	brcs	.+46     	; 0x161e <midi_process_byte+0x88>
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	79 f0       	breq	.+30     	; 0x1612 <midi_process_byte+0x7c>
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	81 f0       	breq	.+32     	; 0x1618 <midi_process_byte+0x82>
    15f8:	46 c0       	rjmp	.+140    	; 0x1686 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    15fe:	00 e0       	ldi	r16, 0x00	; 0
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	41 2f       	mov	r20, r17
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	ce 01       	movw	r24, r28
    160a:	0e 94 b7 09 	call	0x136e	; 0x136e <midi_input_callbacks>
        device->input_state = IDLE;
    160e:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1610:	7f c0       	rjmp	.+254    	; 0x1710 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1616:	7c c0       	rjmp	.+248    	; 0x1710 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	8d a3       	std	Y+37, r24	; 0x25
        break;
    161c:	79 c0       	rjmp	.+242    	; 0x1710 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    161e:	10 3f       	cpi	r17, 0xF0	; 240
    1620:	19 f0       	breq	.+6      	; 0x1628 <midi_process_byte+0x92>
    1622:	17 3f       	cpi	r17, 0xF7	; 247
    1624:	51 f0       	breq	.+20     	; 0x163a <midi_process_byte+0xa4>
    1626:	2b c0       	rjmp	.+86     	; 0x167e <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    162c:	80 ef       	ldi	r24, 0xF0	; 240
    162e:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9f a3       	std	Y+39, r25	; 0x27
    1636:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1638:	6b c0       	rjmp	.+214    	; 0x1710 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    163a:	4e a1       	ldd	r20, Y+38	; 0x26
    163c:	5f a1       	ldd	r21, Y+39	; 0x27
    163e:	9a 01       	movw	r18, r20
    1640:	ab ea       	ldi	r26, 0xAB	; 171
    1642:	ba ea       	ldi	r27, 0xAA	; 170
    1644:	0e 94 df 0b 	call	0x17be	; 0x17be <__umulhisi3>
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	9c 01       	movw	r18, r24
    164e:	22 0f       	add	r18, r18
    1650:	33 1f       	adc	r19, r19
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	fa 01       	movw	r30, r20
    1658:	e8 1b       	sub	r30, r24
    165a:	f9 0b       	sbc	r31, r25
    165c:	ec 0f       	add	r30, r28
    165e:	fd 1f       	adc	r31, r29
    1660:	87 ef       	ldi	r24, 0xF7	; 247
    1662:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1664:	ba 01       	movw	r22, r20
    1666:	6f 5f       	subi	r22, 0xFF	; 255
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	7f a3       	std	Y+39, r23	; 0x27
    166c:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    166e:	0c a1       	ldd	r16, Y+36	; 0x24
    1670:	2b a1       	ldd	r18, Y+35	; 0x23
    1672:	4a a1       	ldd	r20, Y+34	; 0x22
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 b7 09 	call	0x136e	; 0x136e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    167a:	1d a2       	std	Y+37, r1	; 0x25
            break;
    167c:	49 c0       	rjmp	.+146    	; 0x1710 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    167e:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1680:	1f a2       	std	Y+39, r1	; 0x27
    1682:	1e a2       	std	Y+38, r1	; 0x26
    1684:	45 c0       	rjmp	.+138    	; 0x1710 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1686:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1688:	1f a2       	std	Y+39, r1	; 0x27
    168a:	1e a2       	std	Y+38, r1	; 0x26
        break;
    168c:	41 c0       	rjmp	.+130    	; 0x1710 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    168e:	ed a1       	ldd	r30, Y+37	; 0x25
    1690:	ee 23       	and	r30, r30
    1692:	f1 f1       	breq	.+124    	; 0x1710 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1694:	4e a1       	ldd	r20, Y+38	; 0x26
    1696:	5f a1       	ldd	r21, Y+39	; 0x27
    1698:	9a 01       	movw	r18, r20
    169a:	ab ea       	ldi	r26, 0xAB	; 171
    169c:	ba ea       	ldi	r27, 0xAA	; 170
    169e:	0e 94 df 0b 	call	0x17be	; 0x17be <__umulhisi3>
    16a2:	96 95       	lsr	r25
    16a4:	87 95       	ror	r24
    16a6:	9c 01       	movw	r18, r24
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	82 0f       	add	r24, r18
    16ae:	93 1f       	adc	r25, r19
    16b0:	9a 01       	movw	r18, r20
    16b2:	28 1b       	sub	r18, r24
    16b4:	39 0b       	sbc	r19, r25
    16b6:	de 01       	movw	r26, r28
    16b8:	a2 0f       	add	r26, r18
    16ba:	b3 1f       	adc	r27, r19
    16bc:	92 96       	adiw	r26, 0x22	; 34
    16be:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    16c0:	ba 01       	movw	r22, r20
    16c2:	6f 5f       	subi	r22, 0xFF	; 255
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	7f a3       	std	Y+39, r23	; 0x27
    16c8:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    16ca:	21 30       	cpi	r18, 0x01	; 1
    16cc:	31 05       	cpc	r19, r1
    16ce:	89 f0       	breq	.+34     	; 0x16f2 <midi_process_byte+0x15c>
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	e9 f4       	brne	.+58     	; 0x1710 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    16d6:	0c a1       	ldd	r16, Y+36	; 0x24
    16d8:	2b a1       	ldd	r18, Y+35	; 0x23
    16da:	4a a1       	ldd	r20, Y+34	; 0x22
    16dc:	ce 01       	movw	r24, r28
    16de:	0e 94 b7 09 	call	0x136e	; 0x136e <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    16e2:	8d a1       	ldd	r24, Y+37	; 0x25
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	a1 f0       	breq	.+40     	; 0x1710 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9f a3       	std	Y+39, r25	; 0x27
    16ee:	8e a3       	std	Y+38, r24	; 0x26
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    16f2:	e2 30       	cpi	r30, 0x02	; 2
    16f4:	69 f4       	brne	.+26     	; 0x1710 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    16f6:	00 e0       	ldi	r16, 0x00	; 0
    16f8:	2b a1       	ldd	r18, Y+35	; 0x23
    16fa:	4a a1       	ldd	r20, Y+34	; 0x22
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 b7 09 	call	0x136e	; 0x136e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1702:	8d a1       	ldd	r24, Y+37	; 0x25
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	21 f0       	breq	.+8      	; 0x1710 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9f a3       	std	Y+39, r25	; 0x27
    170e:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	08 95       	ret

0000171c <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    172e:	dc 01       	movw	r26, r24
    1730:	90 96       	adiw	r26, 0x20	; 32
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	91 97       	sbiw	r26, 0x21	; 33
    1738:	30 97       	sbiw	r30, 0x00	; 0
    173a:	09 f0       	breq	.+2      	; 0x173e <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    173c:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    173e:	86 01       	movw	r16, r12
    1740:	08 51       	subi	r16, 0x18	; 24
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	c8 01       	movw	r24, r16
    1746:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    174a:	e8 2e       	mov	r14, r24
    174c:	f1 2c       	mov	r15, r1
    174e:	e1 14       	cp	r14, r1
    1750:	f1 04       	cpc	r15, r1
    1752:	91 f0       	breq	.+36     	; 0x1778 <midi_device_process+0x5c>
    1754:	c0 e0       	ldi	r28, 0x00	; 0
    1756:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	c8 01       	movw	r24, r16
    175c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <bytequeue_get>
    1760:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1762:	c6 01       	movw	r24, r12
    1764:	0e 94 cb 0a 	call	0x1596	; 0x1596 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	c8 01       	movw	r24, r16
    176c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1770:	21 96       	adiw	r28, 0x01	; 1
    1772:	ce 15       	cp	r28, r14
    1774:	df 05       	cpc	r29, r15
    1776:	81 f7       	brne	.-32     	; 0x1758 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	08 95       	ret

0000178a <__divmodhi4>:
    178a:	97 fb       	bst	r25, 7
    178c:	07 2e       	mov	r0, r23
    178e:	16 f4       	brtc	.+4      	; 0x1794 <__divmodhi4+0xa>
    1790:	00 94       	com	r0
    1792:	07 d0       	rcall	.+14     	; 0x17a2 <__divmodhi4_neg1>
    1794:	77 fd       	sbrc	r23, 7
    1796:	09 d0       	rcall	.+18     	; 0x17aa <__divmodhi4_neg2>
    1798:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__udivmodhi4>
    179c:	07 fc       	sbrc	r0, 7
    179e:	05 d0       	rcall	.+10     	; 0x17aa <__divmodhi4_neg2>
    17a0:	3e f4       	brtc	.+14     	; 0x17b0 <__divmodhi4_exit>

000017a2 <__divmodhi4_neg1>:
    17a2:	90 95       	com	r25
    17a4:	81 95       	neg	r24
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	08 95       	ret

000017aa <__divmodhi4_neg2>:
    17aa:	70 95       	com	r23
    17ac:	61 95       	neg	r22
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255

000017b0 <__divmodhi4_exit>:
    17b0:	08 95       	ret

000017b2 <__tablejump2__>:
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	05 90       	lpm	r0, Z+
    17b8:	f4 91       	lpm	r31, Z
    17ba:	e0 2d       	mov	r30, r0
    17bc:	09 94       	ijmp

000017be <__umulhisi3>:
    17be:	a2 9f       	mul	r26, r18
    17c0:	b0 01       	movw	r22, r0
    17c2:	b3 9f       	mul	r27, r19
    17c4:	c0 01       	movw	r24, r0
    17c6:	a3 9f       	mul	r26, r19
    17c8:	70 0d       	add	r23, r0
    17ca:	81 1d       	adc	r24, r1
    17cc:	11 24       	eor	r1, r1
    17ce:	91 1d       	adc	r25, r1
    17d0:	b2 9f       	mul	r27, r18
    17d2:	70 0d       	add	r23, r0
    17d4:	81 1d       	adc	r24, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	91 1d       	adc	r25, r1
    17da:	08 95       	ret

000017dc <__udivmodhi4>:
    17dc:	aa 1b       	sub	r26, r26
    17de:	bb 1b       	sub	r27, r27
    17e0:	51 e1       	ldi	r21, 0x11	; 17
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <__udivmodhi4_ep>

000017e4 <__udivmodhi4_loop>:
    17e4:	aa 1f       	adc	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	a6 17       	cp	r26, r22
    17ea:	b7 07       	cpc	r27, r23
    17ec:	10 f0       	brcs	.+4      	; 0x17f2 <__udivmodhi4_ep>
    17ee:	a6 1b       	sub	r26, r22
    17f0:	b7 0b       	sbc	r27, r23

000017f2 <__udivmodhi4_ep>:
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	5a 95       	dec	r21
    17f8:	a9 f7       	brne	.-22     	; 0x17e4 <__udivmodhi4_loop>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	08 95       	ret

00001804 <_exit>:
    1804:	f8 94       	cli

00001806 <__stop_program>:
    1806:	ff cf       	rjmp	.-2      	; 0x1806 <__stop_program>
