
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00001f04  00001f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  0080025e  0080025e  000020f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000555f  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f2  00000000  00000000  00007b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015be  00000000  00000000  00008ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b80  00000000  00000000  0000a5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010c8  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000220a  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000e40a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	cc 0c       	add	r12, r12
      b6:	ca 0c       	add	r12, r10
      b8:	cc 0c       	add	r12, r12
      ba:	ce 0c       	add	r12, r14
      bc:	ce 0c       	add	r12, r14
      be:	d4 0c       	add	r13, r4
      c0:	ce 0c       	add	r12, r14
      c2:	d4 0c       	add	r13, r4
      c4:	d4 0c       	add	r13, r4
      c6:	d4 0c       	add	r13, r4
      c8:	d4 0c       	add	r13, r4
      ca:	d4 0c       	add	r13, r4
      cc:	ce 0c       	add	r12, r14
      ce:	d4 0c       	add	r13, r4
      d0:	d4 0c       	add	r13, r4

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e4 e0       	ldi	r30, 0x04	; 4
      e6:	ff e1       	ldi	r31, 0x1F	; 31
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	ae 35       	cpi	r26, 0x5E	; 94
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	ae e5       	ldi	r26, 0x5E	; 94
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a3 35       	cpi	r26, 0x53	; 83
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
     108:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 5e 02 	sts	0x025E, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a3 59       	subi	r26, 0x93	; 147
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	ad e6       	ldi	r26, 0x6D	; 109
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	ed e6       	ldi	r30, 0x6D	; 109
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 dd 09 	call	0x13ba	; 0x13ba <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	ed e6       	ldi	r30, 0x6D	; 109
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29

	clear_all_trigs();
     28c:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     290:	0f 2e       	mov	r0, r31
     292:	f5 e0       	ldi	r31, 0x05	; 5
     294:	ef 2e       	mov	r14, r31
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
	for (int i = BD; i <= MA; i++) {
     29c:	c0 e0       	ldi	r28, 0x00	; 0
     29e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fe e4       	ldi	r31, 0x4E	; 78
     2a4:	8f 2e       	mov	r8, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	9f 2e       	mov	r9, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f9 e4       	ldi	r31, 0x49	; 73
     2b0:	af 2e       	mov	r10, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	bf 2e       	mov	r11, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fd e4       	ldi	r31, 0x4D	; 77
     2bc:	cf 2e       	mov	r12, r31
     2be:	f4 e0       	ldi	r31, 0x04	; 4
     2c0:	df 2e       	mov	r13, r31
     2c2:	f0 2d       	mov	r31, r0
     2c4:	0f 2e       	mov	r0, r31
     2c6:	f3 e3       	ldi	r31, 0x33	; 51
     2c8:	5f 2e       	mov	r5, r31
     2ca:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fd e6       	ldi	r31, 0x6D	; 109
     2d0:	6f 2e       	mov	r6, r31
     2d2:	f2 e0       	ldi	r31, 0x02	; 2
     2d4:	7f 2e       	mov	r7, r31
     2d6:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2d8:	f4 01       	movw	r30, r8
     2da:	80 81       	ld	r24, Z
     2dc:	81 fb       	bst	r24, 1
     2de:	00 27       	eor	r16, r16
     2e0:	00 f9       	bld	r16, 0
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	f5 01       	movw	r30, r10
     2e6:	20 81       	ld	r18, Z
     2e8:	f6 01       	movw	r30, r12
     2ea:	90 81       	ld	r25, Z
     2ec:	92 95       	swap	r25
     2ee:	96 95       	lsr	r25
     2f0:	97 70       	andi	r25, 0x07	; 7
     2f2:	81 70       	andi	r24, 0x01	; 1
     2f4:	88 0f       	add	r24, r24
     2f6:	88 0f       	add	r24, r24
     2f8:	88 0f       	add	r24, r24
     2fa:	89 2b       	or	r24, r25
     2fc:	f8 01       	movw	r30, r16
     2fe:	e2 95       	swap	r30
     300:	f2 95       	swap	r31
     302:	f0 7f       	andi	r31, 0xF0	; 240
     304:	fe 27       	eor	r31, r30
     306:	e0 7f       	andi	r30, 0xF0	; 240
     308:	fe 27       	eor	r31, r30
     30a:	92 2f       	mov	r25, r18
     30c:	91 70       	andi	r25, 0x01	; 1
     30e:	59 9e       	mul	r5, r25
     310:	e0 0d       	add	r30, r0
     312:	f1 1d       	adc	r31, r1
     314:	11 24       	eor	r1, r1
     316:	e8 0f       	add	r30, r24
     318:	f1 1d       	adc	r31, r1
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e3 58       	subi	r30, 0x83	; 131
     320:	fc 4f       	sbci	r31, 0xFC	; 252
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	0c 2e       	mov	r0, r28
     328:	02 c0       	rjmp	.+4      	; 0x32e <trigger_step+0xc0>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <trigger_step+0xbc>
     332:	80 ff       	sbrs	r24, 0
     334:	38 c0       	rjmp	.+112    	; 0x3a6 <trigger_step+0x138>
			turn_on(drum_hit[i].led_index);
     336:	f7 01       	movw	r30, r14
     338:	80 81       	ld	r24, Z
     33a:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     33e:	de 01       	movw	r26, r28
     340:	aa 0f       	add	r26, r26
     342:	bb 1f       	adc	r27, r27
     344:	ac 0f       	add	r26, r28
     346:	bd 1f       	adc	r27, r29
     348:	aa 0f       	add	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	a0 50       	subi	r26, 0x00	; 0
     34e:	bf 4f       	sbci	r27, 0xFF	; 255
     350:	ec 91       	ld	r30, X
     352:	8e 2f       	mov	r24, r30
     354:	88 1f       	adc	r24, r24
     356:	88 27       	eor	r24, r24
     358:	88 1f       	adc	r24, r24
     35a:	11 96       	adiw	r26, 0x01	; 1
     35c:	ec 91       	ld	r30, X
     35e:	e7 70       	andi	r30, 0x07	; 7
     360:	ee 0f       	add	r30, r30
     362:	e8 2b       	or	r30, r24
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	e3 59       	subi	r30, 0x93	; 147
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	d7 01       	movw	r26, r14
     36c:	13 97       	sbiw	r26, 0x03	; 3
     36e:	9c 91       	ld	r25, X
     370:	80 81       	ld	r24, Z
     372:	89 2b       	or	r24, r25
     374:	80 83       	st	Z, r24
     376:	f7 01       	movw	r30, r14
     378:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     37a:	80 81       	ld	r24, Z
     37c:	8f 3f       	cpi	r24, 0xFF	; 255
     37e:	99 f0       	breq	.+38     	; 0x3a6 <trigger_step+0x138>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     380:	f3 01       	movw	r30, r6
     382:	23 81       	ldd	r18, Z+3	; 0x03
     384:	fe 01       	movw	r30, r28
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ec 0f       	add	r30, r28
     38c:	fd 1f       	adc	r31, r29
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	ec 5f       	subi	r30, 0xFC	; 252
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	90 81       	ld	r25, Z
     398:	91 70       	andi	r25, 0x01	; 1
     39a:	91 95       	neg	r25
     39c:	92 27       	eor	r25, r18
     39e:	89 23       	and	r24, r25
     3a0:	82 27       	eor	r24, r18
     3a2:	f3 01       	movw	r30, r6
     3a4:	83 83       	std	Z+3, r24	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3a6:	21 96       	adiw	r28, 0x01	; 1
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	ef 0e       	add	r14, r31
     3ac:	f1 1c       	adc	r15, r1
     3ae:	c0 31       	cpi	r28, 0x10	; 16
     3b0:	d1 05       	cpc	r29, r1
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <trigger_step+0x148>
     3b4:	91 cf       	rjmp	.-222    	; 0x2d8 <trigger_step+0x6a>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	08 95       	ret

000003d6 <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3d6:	80 91 3a 02 	lds	r24, 0x023A
     3da:	86 ff       	sbrs	r24, 6
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3de:	ea e3       	ldi	r30, 0x3A	; 58
     3e0:	f2 e0       	ldi	r31, 0x02	; 2
     3e2:	8f 7b       	andi	r24, 0xBF	; 191
     3e4:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3ee:	80 91 3c 02 	lds	r24, 0x023C
     3f2:	86 ff       	sbrs	r24, 6
     3f4:	08 c0       	rjmp	.+16     	; 0x406 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3f6:	ec e3       	ldi	r30, 0x3C	; 60
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	8f 7b       	andi	r24, 0xBF	; 191
     3fc:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     406:	80 91 3e 02 	lds	r24, 0x023E
     40a:	86 ff       	sbrs	r24, 6
     40c:	08 c0       	rjmp	.+16     	; 0x41e <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     40e:	ee e3       	ldi	r30, 0x3E	; 62
     410:	f2 e0       	ldi	r31, 0x02	; 2
     412:	8f 7b       	andi	r24, 0xBF	; 191
     414:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     41e:	80 91 40 02 	lds	r24, 0x0240
     422:	86 ff       	sbrs	r24, 6
     424:	08 c0       	rjmp	.+16     	; 0x436 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     426:	e0 e4       	ldi	r30, 0x40	; 64
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	8f 7b       	andi	r24, 0xBF	; 191
     42c:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     436:	80 91 42 02 	lds	r24, 0x0242
     43a:	86 ff       	sbrs	r24, 6
     43c:	08 c0       	rjmp	.+16     	; 0x44e <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     43e:	e2 e4       	ldi	r30, 0x42	; 66
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	8f 7b       	andi	r24, 0xBF	; 191
     444:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     44e:	80 91 44 02 	lds	r24, 0x0244
     452:	86 ff       	sbrs	r24, 6
     454:	08 c0       	rjmp	.+16     	; 0x466 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     456:	e4 e4       	ldi	r30, 0x44	; 68
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	8f 7b       	andi	r24, 0xBF	; 191
     45c:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	85 e0       	ldi	r24, 0x05	; 5
     462:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     466:	80 91 46 02 	lds	r24, 0x0246
     46a:	86 ff       	sbrs	r24, 6
     46c:	08 c0       	rjmp	.+16     	; 0x47e <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     46e:	e6 e4       	ldi	r30, 0x46	; 70
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	8f 7b       	andi	r24, 0xBF	; 191
     474:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     47e:	80 91 48 02 	lds	r24, 0x0248
     482:	86 ff       	sbrs	r24, 6
     484:	08 c0       	rjmp	.+16     	; 0x496 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     486:	e8 e4       	ldi	r30, 0x48	; 72
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	8f 7b       	andi	r24, 0xBF	; 191
     48c:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     496:	80 91 4a 02 	lds	r24, 0x024A
     49a:	86 ff       	sbrs	r24, 6
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     49e:	ea e4       	ldi	r30, 0x4A	; 74
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	8f 7b       	andi	r24, 0xBF	; 191
     4a4:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4ae:	80 91 4c 02 	lds	r24, 0x024C
     4b2:	86 ff       	sbrs	r24, 6
     4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4b6:	ec e4       	ldi	r30, 0x4C	; 76
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	8f 7b       	andi	r24, 0xBF	; 191
     4bc:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	89 e0       	ldi	r24, 0x09	; 9
     4c2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4c6:	80 91 4e 02 	lds	r24, 0x024E
     4ca:	86 ff       	sbrs	r24, 6
     4cc:	08 c0       	rjmp	.+16     	; 0x4de <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4ce:	ee e4       	ldi	r30, 0x4E	; 78
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	8f 7b       	andi	r24, 0xBF	; 191
     4d4:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4de:	08 95       	ret

000004e0 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	8f 93       	push	r24
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4f0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4f2:	ee e6       	ldi	r30, 0x6E	; 110
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8d 7f       	andi	r24, 0xFD	; 253
     4fa:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     4fc:	80 91 7a 03 	lds	r24, 0x037A
     500:	88 60       	ori	r24, 0x08	; 8
     502:	80 93 7a 03 	sts	0x037A, r24
	
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	8f 91       	pop	r24
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     540:	e8 e7       	ldi	r30, 0x78	; 120
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	81 81       	ldd	r24, Z+1	; 0x01
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	81 83       	std	Z+1, r24	; 0x01
     54a:	90 81       	ld	r25, Z
     54c:	89 13       	cpse	r24, r25
     54e:	96 c0       	rjmp	.+300    	; 0x67c <__vector_11+0x166>
	{
		flag.next_step = 1;
     550:	80 91 7a 03 	lds	r24, 0x037A
     554:	81 60       	ori	r24, 0x01	; 1
     556:	80 93 7a 03 	sts	0x037A, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     55a:	ea e7       	ldi	r30, 0x7A	; 122
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	80 81       	ld	r24, Z
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	98 0f       	add	r25, r24
     564:	93 70       	andi	r25, 0x03	; 3
     566:	8c 7f       	andi	r24, 0xFC	; 252
     568:	89 2b       	or	r24, r25
     56a:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     56c:	10 92 79 02 	sts	0x0279, r1
		if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) { 
     570:	ed e4       	ldi	r30, 0x4D	; 77
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	90 81       	ld	r25, Z
     576:	89 2f       	mov	r24, r25
     578:	82 95       	swap	r24
     57a:	86 95       	lsr	r24
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	20 91 4e 04 	lds	r18, 0x044E
     582:	21 70       	andi	r18, 0x01	; 1
     584:	22 0f       	add	r18, r18
     586:	22 0f       	add	r18, r18
     588:	22 0f       	add	r18, r18
     58a:	28 2b       	or	r18, r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	82 0f       	add	r24, r18
     590:	38 2f       	mov	r19, r24
     592:	32 95       	swap	r19
     594:	33 0f       	add	r19, r19
     596:	30 7e       	andi	r19, 0xE0	; 224
     598:	9f 71       	andi	r25, 0x1F	; 31
     59a:	93 2b       	or	r25, r19
     59c:	90 83       	st	Z, r25
     59e:	83 fb       	bst	r24, 3
     5a0:	99 27       	eor	r25, r25
     5a2:	90 f9       	bld	r25, 0
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	89 2b       	or	r24, r25
     5aa:	81 83       	std	Z+1, r24	; 0x01
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	81 fb       	bst	r24, 1
     5b0:	44 27       	eor	r20, r20
     5b2:	40 f9       	bld	r20, 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	45 58       	subi	r20, 0x85	; 133
     5b8:	5c 4f       	sbci	r21, 0xFC	; 252
     5ba:	fa 01       	movw	r30, r20
     5bc:	e0 53       	subi	r30, 0x30	; 48
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 81       	ld	r24, Z
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	28 17       	cp	r18, r24
     5c6:	39 07       	cpc	r19, r25
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_11+0xb6>
     5ca:	58 c0       	rjmp	.+176    	; 0x67c <__vector_11+0x166>
     5cc:	80 91 7c 03 	lds	r24, 0x037C
     5d0:	81 ff       	sbrs	r24, 1
     5d2:	54 c0       	rjmp	.+168    	; 0x67c <__vector_11+0x166>
			flag.new_measure = 1;
     5d4:	80 91 7a 03 	lds	r24, 0x037A
     5d8:	80 62       	ori	r24, 0x20	; 32
     5da:	80 93 7a 03 	sts	0x037A, r24
			sequencer.current_step = 0;
     5de:	ed e4       	ldi	r30, 0x4D	; 77
     5e0:	f4 e0       	ldi	r31, 0x04	; 4
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 71       	andi	r24, 0x1F	; 31
     5e6:	80 83       	st	Z, r24
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying exception handler
     5ee:	80 91 4c 04 	lds	r24, 0x044C
     5f2:	80 31       	cpi	r24, 0x10	; 16
     5f4:	09 f1       	breq	.+66     	; 0x638 <__vector_11+0x122>
				
				if (sequencer.part_playing == SECOND) {
     5f6:	80 91 4e 04 	lds	r24, 0x044E
     5fa:	81 ff       	sbrs	r24, 1
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <__vector_11+0xfa>
					turn_off(SECOND_PART_LED);
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
					turn_on(FIRST_PART_LED);
     604:	8a e2       	ldi	r24, 0x2A	; 42
     606:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					toggle_variation(); //only toggle variation at the end of the 2nd part
     60a:	0e 94 ac 09 	call	0x1358	; 0x1358 <toggle_variation>
     60e:	06 c0       	rjmp	.+12     	; 0x61c <__vector_11+0x106>
				} else {
					turn_off(FIRST_PART_LED); 
     610:	8a e2       	ldi	r24, 0x2A	; 42
     612:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
					turn_on(SECOND_PART_LED);
     616:	8b e2       	ldi	r24, 0x2B	; 43
     618:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
				}
				sequencer.part_playing ^= 1 << 0;
     61c:	80 91 4e 04 	lds	r24, 0x044E
     620:	81 fb       	bst	r24, 1
     622:	99 27       	eor	r25, r25
     624:	90 f9       	bld	r25, 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	89 27       	eor	r24, r25
     62a:	ed e4       	ldi	r30, 0x4D	; 77
     62c:	f4 e0       	ldi	r31, 0x04	; 4
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	80 fb       	bst	r24, 0
     632:	91 f9       	bld	r25, 1
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	02 c0       	rjmp	.+4      	; 0x63c <__vector_11+0x126>
			} else { 
	
				toggle_variation(); //no second part, so toggle variation 
     638:	0e 94 ac 09 	call	0x1358	; 0x1358 <toggle_variation>
				
			}
			//update step number
			sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
     63c:	80 91 4e 04 	lds	r24, 0x044E
     640:	82 fb       	bst	r24, 2
     642:	00 27       	eor	r16, r16
     644:	00 f9       	bld	r16, 0
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	05 58       	subi	r16, 0x85	; 133
     64a:	1c 4f       	sbci	r17, 0xFC	; 252
     64c:	f8 01       	movw	r30, r16
     64e:	e0 53       	subi	r30, 0x30	; 48
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	80 91 4d 04 	lds	r24, 0x044D
     656:	8f 71       	andi	r24, 0x1F	; 31
     658:	80 83       	st	Z, r24
			update_step_led_mask();
     65a:	0e 94 9c 04 	call	0x938	; 0x938 <update_step_led_mask>
			
			//handle pre-scale change
			if (flag.pre_scale_change) {
     65e:	80 91 7a 03 	lds	r24, 0x037A
     662:	86 ff       	sbrs	r24, 6
     664:	0b c0       	rjmp	.+22     	; 0x67c <__vector_11+0x166>
				
				flag.pre_scale_change = 0;
     666:	8f 7b       	andi	r24, 0xBF	; 191
     668:	80 93 7a 03 	sts	0x037A, r24
				internal_clock.divider = pre_scale[pre_scale_index];
     66c:	e0 91 17 02 	lds	r30, 0x0217
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	ed 5e       	subi	r30, 0xED	; 237
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	80 81       	ld	r24, Z
     678:	80 93 78 02 	sts	0x0278, r24
	
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     67c:	e8 e7       	ldi	r30, 0x78	; 120
     67e:	f2 e0       	ldi	r31, 0x02	; 2
     680:	80 81       	ld	r24, Z
     682:	86 95       	lsr	r24
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	98 13       	cpse	r25, r24
     688:	e3 c0       	rjmp	.+454    	; 0x850 <__vector_11+0x33a>
		flag.half_step = 1;
     68a:	80 91 7a 03 	lds	r24, 0x037A
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	80 93 7a 03 	sts	0x037A, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     694:	40 91 d3 01 	lds	r20, 0x01D3
     698:	30 91 d6 01 	lds	r19, 0x01D6
     69c:	ed e6       	ldi	r30, 0x6D	; 109
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	83 2f       	mov	r24, r19
     6a2:	84 2b       	or	r24, r20
     6a4:	80 95       	com	r24
     6a6:	95 81       	ldd	r25, Z+5	; 0x05
     6a8:	89 23       	and	r24, r25
     6aa:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     6ac:	80 91 7c 03 	lds	r24, 0x037C
     6b0:	81 ff       	sbrs	r24, 1
     6b2:	a0 c0       	rjmp	.+320    	; 0x7f4 <__vector_11+0x2de>
	
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     6b4:	80 91 49 04 	lds	r24, 0x0449
     6b8:	81 70       	andi	r24, 0x01	; 1
     6ba:	c8 2f       	mov	r28, r24
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	d8 2f       	mov	r29, r24
     6c0:	01 e5       	ldi	r16, 0x51	; 81
     6c2:	14 e0       	ldi	r17, 0x04	; 4
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	93 e3       	ldi	r25, 0x33	; 51
     6ca:	9c 9f       	mul	r25, r28
     6cc:	f0 01       	movw	r30, r0
     6ce:	9d 9f       	mul	r25, r29
     6d0:	f0 0d       	add	r31, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	e8 0f       	add	r30, r24
     6d6:	f1 1d       	adc	r31, r1
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ef 53       	subi	r30, 0x3F	; 63
     6de:	fc 4f       	sbci	r31, 0xFC	; 252
     6e0:	90 81       	ld	r25, Z
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	ed e6       	ldi	r30, 0x6D	; 109
     6e6:	f2 e0       	ldi	r31, 0x02	; 2
     6e8:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     6ea:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     6ec:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     6f0:	f8 01       	movw	r30, r16
     6f2:	80 81       	ld	r24, Z
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	fc 01       	movw	r30, r24
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e8 0f       	add	r30, r24
     6fe:	f9 1f       	adc	r31, r25
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	e0 50       	subi	r30, 0x00	; 0
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	85 81       	ldd	r24, Z+5	; 0x05
     70a:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
								
			switch (sequencer.variation_mode) {
     70e:	20 91 4a 04 	lds	r18, 0x044A
     712:	21 30       	cpi	r18, 0x01	; 1
     714:	49 f0       	breq	.+18     	; 0x728 <__vector_11+0x212>
     716:	18 f0       	brcs	.+6      	; 0x71e <__vector_11+0x208>
     718:	22 30       	cpi	r18, 0x02	; 2
     71a:	a1 f0       	breq	.+40     	; 0x744 <__vector_11+0x22e>
     71c:	20 c0       	rjmp	.+64     	; 0x75e <__vector_11+0x248>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     71e:	80 91 d3 01 	lds	r24, 0x01D3
     722:	80 93 52 04 	sts	0x0452, r24
					break;					
     726:	1b c0       	rjmp	.+54     	; 0x75e <__vector_11+0x248>
				case VAR_B:
					if (flag.variation_change == 1) {
     728:	80 91 7a 03 	lds	r24, 0x037A
     72c:	82 ff       	sbrs	r24, 2
     72e:	05 c0       	rjmp	.+10     	; 0x73a <__vector_11+0x224>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     730:	80 91 d3 01 	lds	r24, 0x01D3
     734:	80 93 52 04 	sts	0x0452, r24
     738:	12 c0       	rjmp	.+36     	; 0x75e <__vector_11+0x248>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     73a:	80 91 d6 01 	lds	r24, 0x01D6
     73e:	80 93 52 04 	sts	0x0452, r24
     742:	0d c0       	rjmp	.+26     	; 0x75e <__vector_11+0x248>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     744:	80 91 49 04 	lds	r24, 0x0449
     748:	80 fd       	sbrc	r24, 0
     74a:	05 c0       	rjmp	.+10     	; 0x756 <__vector_11+0x240>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     74c:	80 91 d3 01 	lds	r24, 0x01D3
     750:	80 93 52 04 	sts	0x0452, r24
     754:	04 c0       	rjmp	.+8      	; 0x75e <__vector_11+0x248>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     756:	80 91 d6 01 	lds	r24, 0x01D6
     75a:	80 93 52 04 	sts	0x0452, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     75e:	80 91 7a 02 	lds	r24, 0x027A
     762:	83 70       	andi	r24, 0x03	; 3
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	02 97       	sbiw	r24, 0x02	; 2
     768:	0c f0       	brlt	.+2      	; 0x76c <__vector_11+0x256>
     76a:	6b c0       	rjmp	.+214    	; 0x842 <__vector_11+0x32c>
				
				if (flag.variation_change == 1) {
     76c:	80 91 7a 03 	lds	r24, 0x037A
     770:	82 ff       	sbrs	r24, 2
     772:	2a c0       	rjmp	.+84     	; 0x7c8 <__vector_11+0x2b2>
					
					switch (sequencer.variation_mode) {
     774:	21 30       	cpi	r18, 0x01	; 1
     776:	61 f0       	breq	.+24     	; 0x790 <__vector_11+0x27a>
     778:	18 f0       	brcs	.+6      	; 0x780 <__vector_11+0x26a>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	89 f0       	breq	.+34     	; 0x7a0 <__vector_11+0x28a>
     77e:	24 c0       	rjmp	.+72     	; 0x7c8 <__vector_11+0x2b2>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     780:	e2 e5       	ldi	r30, 0x52	; 82
     782:	f4 e0       	ldi	r31, 0x04	; 4
     784:	90 91 d6 01 	lds	r25, 0x01D6
     788:	80 81       	ld	r24, Z
     78a:	89 2b       	or	r24, r25
     78c:	80 83       	st	Z, r24
							break;
     78e:	59 c0       	rjmp	.+178    	; 0x842 <__vector_11+0x32c>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     790:	e2 e5       	ldi	r30, 0x52	; 82
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	90 91 d6 01 	lds	r25, 0x01D6
     798:	80 81       	ld	r24, Z
     79a:	89 2b       	or	r24, r25
     79c:	80 83       	st	Z, r24
     79e:	51 c0       	rjmp	.+162    	; 0x842 <__vector_11+0x32c>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     7a0:	80 91 49 04 	lds	r24, 0x0449
     7a4:	80 fd       	sbrc	r24, 0
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <__vector_11+0x2a2>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7a8:	e2 e5       	ldi	r30, 0x52	; 82
     7aa:	f4 e0       	ldi	r31, 0x04	; 4
     7ac:	90 91 d6 01 	lds	r25, 0x01D6
     7b0:	80 81       	ld	r24, Z
     7b2:	89 2b       	or	r24, r25
     7b4:	80 83       	st	Z, r24
     7b6:	0a c0       	rjmp	.+20     	; 0x7cc <__vector_11+0x2b6>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7b8:	e2 e5       	ldi	r30, 0x52	; 82
     7ba:	f4 e0       	ldi	r31, 0x04	; 4
     7bc:	90 91 d3 01 	lds	r25, 0x01D3
     7c0:	80 81       	ld	r24, Z
     7c2:	89 2b       	or	r24, r25
     7c4:	80 83       	st	Z, r24
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <__vector_11+0x2b6>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     7c8:	22 30       	cpi	r18, 0x02	; 2
     7ca:	d9 f5       	brne	.+118    	; 0x842 <__vector_11+0x32c>
						if (sequencer.variation == VAR_A) {
     7cc:	80 91 49 04 	lds	r24, 0x0449
     7d0:	80 fd       	sbrc	r24, 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <__vector_11+0x2ce>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7d4:	e2 e5       	ldi	r30, 0x52	; 82
     7d6:	f4 e0       	ldi	r31, 0x04	; 4
     7d8:	90 91 d6 01 	lds	r25, 0x01D6
     7dc:	80 81       	ld	r24, Z
     7de:	89 2b       	or	r24, r25
     7e0:	80 83       	st	Z, r24
     7e2:	2f c0       	rjmp	.+94     	; 0x842 <__vector_11+0x32c>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7e4:	e2 e5       	ldi	r30, 0x52	; 82
     7e6:	f4 e0       	ldi	r31, 0x04	; 4
     7e8:	90 91 d3 01 	lds	r25, 0x01D3
     7ec:	80 81       	ld	r24, Z
     7ee:	89 2b       	or	r24, r25
     7f0:	80 83       	st	Z, r24
     7f2:	27 c0       	rjmp	.+78     	; 0x842 <__vector_11+0x32c>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     7f4:	ed e6       	ldi	r30, 0x6D	; 109
     7f6:	f2 e0       	ldi	r31, 0x02	; 2
     7f8:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     7fa:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     7fc:	20 91 4a 04 	lds	r18, 0x044A
     800:	21 30       	cpi	r18, 0x01	; 1
     802:	31 f0       	breq	.+12     	; 0x810 <__vector_11+0x2fa>
     804:	10 f0       	brcs	.+4      	; 0x80a <__vector_11+0x2f4>
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	61 f4       	brne	.+24     	; 0x822 <__vector_11+0x30c>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     80a:	40 93 52 04 	sts	0x0452, r20
				break;
     80e:	09 c0       	rjmp	.+18     	; 0x822 <__vector_11+0x30c>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     810:	30 93 52 04 	sts	0x0452, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     814:	80 91 7a 02 	lds	r24, 0x027A
     818:	83 70       	andi	r24, 0x03	; 3
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 97       	sbiw	r24, 0x02	; 2
     81e:	8c f4       	brge	.+34     	; 0x842 <__vector_11+0x32c>
     820:	0d c0       	rjmp	.+26     	; 0x83c <__vector_11+0x326>
     822:	80 91 7a 02 	lds	r24, 0x027A
     826:	83 70       	andi	r24, 0x03	; 3
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	02 97       	sbiw	r24, 0x02	; 2
     82c:	54 f4       	brge	.+20     	; 0x842 <__vector_11+0x32c>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     82e:	22 30       	cpi	r18, 0x02	; 2
     830:	29 f4       	brne	.+10     	; 0x83c <__vector_11+0x326>
     832:	e2 e5       	ldi	r30, 0x52	; 82
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	80 81       	ld	r24, Z
     838:	38 2b       	or	r19, r24
     83a:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     842:	ed e6       	ldi	r30, 0x6D	; 109
     844:	f2 e0       	ldi	r31, 0x02	; 2
     846:	90 91 52 04 	lds	r25, 0x0452
     84a:	85 81       	ldd	r24, Z+5	; 0x05
     84c:	89 2b       	or	r24, r25
     84e:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9c 01       	movw	r18, r24
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	82 0f       	add	r24, r18
     888:	93 1f       	adc	r25, r19
     88a:	dc 01       	movw	r26, r24
     88c:	a8 59       	subi	r26, 0x98	; 152
     88e:	be 4f       	sbci	r27, 0xFE	; 254
     890:	2c 91       	ld	r18, X
     892:	e2 2f       	mov	r30, r18
     894:	ef 70       	andi	r30, 0x0F	; 15
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	e3 59       	subi	r30, 0x93	; 147
     89a:	fd 4f       	sbci	r31, 0xFD	; 253
     89c:	ec 01       	movw	r28, r24
     89e:	c9 59       	subi	r28, 0x99	; 153
     8a0:	de 4f       	sbci	r29, 0xFE	; 254
     8a2:	30 81       	ld	r19, Z
     8a4:	88 81       	ld	r24, Y
     8a6:	83 2b       	or	r24, r19
     8a8:	80 83       	st	Z, r24
	led[led_index].state = 1;
     8aa:	82 2f       	mov	r24, r18
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	8c 93       	st	X, r24

}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <turn_off>:

void turn_off(uint8_t led_index) {
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	9c 01       	movw	r18, r24
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	dc 01       	movw	r26, r24
     8c8:	a8 59       	subi	r26, 0x98	; 152
     8ca:	be 4f       	sbci	r27, 0xFE	; 254
     8cc:	2c 91       	ld	r18, X
     8ce:	e2 2f       	mov	r30, r18
     8d0:	ef 70       	andi	r30, 0x0F	; 15
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e3 59       	subi	r30, 0x93	; 147
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	ec 01       	movw	r28, r24
     8da:	c9 59       	subi	r28, 0x99	; 153
     8dc:	de 4f       	sbci	r29, 0xFE	; 254
     8de:	88 81       	ld	r24, Y
     8e0:	80 95       	com	r24
     8e2:	90 81       	ld	r25, Z
     8e4:	89 23       	and	r24, r25
     8e6:	80 83       	st	Z, r24
	led[led_index].state = 0;
     8e8:	82 2f       	mov	r24, r18
     8ea:	8f 7e       	andi	r24, 0xEF	; 239
     8ec:	8c 93       	st	X, r24
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	2e 0f       	add	r18, r30
     900:	3f 1f       	adc	r19, r31
     902:	f9 01       	movw	r30, r18
     904:	e8 59       	subi	r30, 0x98	; 152
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	90 81       	ld	r25, Z
     90a:	94 ff       	sbrs	r25, 4
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
		
		turn_off(led_index);
     90e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
     912:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     914:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
     918:	08 95       	ret

0000091a <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     91a:	ed e6       	ldi	r30, 0x6D	; 109
     91c:	f2 e0       	ldi	r31, 0x02	; 2
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	8f 70       	andi	r24, 0x0F	; 15
     922:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     924:	87 81       	ldd	r24, Z+7	; 0x07
     926:	80 72       	andi	r24, 0x20	; 32
     928:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	8f 7c       	andi	r24, 0xCF	; 207
     934:	86 83       	std	Z+6, r24	; 0x06
     936:	08 95       	ret

00000938 <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     938:	2f 92       	push	r2
     93a:	3f 92       	push	r3
     93c:	4f 92       	push	r4
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     95c:	22 e2       	ldi	r18, 0x22	; 34
     95e:	e1 ec       	ldi	r30, 0xC1	; 193
     960:	f3 e0       	ldi	r31, 0x03	; 3
     962:	df 01       	movw	r26, r30
     964:	42 2f       	mov	r20, r18
     966:	1d 92       	st	X+, r1
     968:	4a 95       	dec	r20
     96a:	e9 f7       	brne	.-6      	; 0x966 <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     96c:	e7 e2       	ldi	r30, 0x27	; 39
     96e:	f4 e0       	ldi	r31, 0x04	; 4
     970:	df 01       	movw	r26, r30
     972:	1d 92       	st	X+, r1
     974:	2a 95       	dec	r18
     976:	e9 f7       	brne	.-6      	; 0x972 <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     978:	20 91 4e 04 	lds	r18, 0x044E
     97c:	22 fb       	bst	r18, 2
     97e:	88 27       	eor	r24, r24
     980:	80 f9       	bld	r24, 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	00 e0       	ldi	r16, 0x00	; 0
     986:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     988:	6c 01       	movw	r12, r24
     98a:	cc 0c       	add	r12, r12
     98c:	dd 1c       	adc	r13, r13
     98e:	cc 0c       	add	r12, r12
     990:	dd 1c       	adc	r13, r13
     992:	cc 0c       	add	r12, r12
     994:	dd 1c       	adc	r13, r13
     996:	cc 0c       	add	r12, r12
     998:	dd 1c       	adc	r13, r13
     99a:	ee 24       	eor	r14, r14
     99c:	e3 94       	inc	r14
     99e:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     9a0:	5c 01       	movw	r10, r24
     9a2:	b1 e2       	ldi	r27, 0x21	; 33
     9a4:	ab 0e       	add	r10, r27
     9a6:	b1 1c       	adc	r11, r1
     9a8:	95 01       	movw	r18, r10
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	f9 01       	movw	r30, r18
     9b0:	e5 58       	subi	r30, 0x85	; 133
     9b2:	fc 4f       	sbci	r31, 0xFC	; 252
     9b4:	5f 01       	movw	r10, r30
     9b6:	0f 2e       	mov	r0, r31
     9b8:	f1 ee       	ldi	r31, 0xE1	; 225
     9ba:	8f 2e       	mov	r8, r31
     9bc:	f3 e0       	ldi	r31, 0x03	; 3
     9be:	9f 2e       	mov	r9, r31
     9c0:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     9c2:	3c 01       	movw	r6, r24
     9c4:	f4 e5       	ldi	r31, 0x54	; 84
     9c6:	6f 0e       	add	r6, r31
     9c8:	71 1c       	adc	r7, r1
     9ca:	93 01       	movw	r18, r6
     9cc:	22 0f       	add	r18, r18
     9ce:	33 1f       	adc	r19, r19
     9d0:	a9 01       	movw	r20, r18
     9d2:	45 58       	subi	r20, 0x85	; 133
     9d4:	5c 4f       	sbci	r21, 0xFC	; 252
     9d6:	3a 01       	movw	r6, r20
     9d8:	0f 2e       	mov	r0, r31
     9da:	f7 e4       	ldi	r31, 0x47	; 71
     9dc:	4f 2e       	mov	r4, r31
     9de:	f4 e0       	ldi	r31, 0x04	; 4
     9e0:	5f 2e       	mov	r5, r31
     9e2:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9e4:	85 58       	subi	r24, 0x85	; 133
     9e6:	9c 4f       	sbci	r25, 0xFC	; 252
     9e8:	1c 01       	movw	r2, r24
     9ea:	50 ed       	ldi	r21, 0xD0	; 208
     9ec:	25 0e       	add	r2, r21
     9ee:	31 1c       	adc	r3, r1
     9f0:	52 c0       	rjmp	.+164    	; 0xa96 <update_step_led_mask+0x15e>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9f2:	9e 01       	movw	r18, r28
     9f4:	08 2e       	mov	r0, r24
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <update_step_led_mask+0xc4>
     9f8:	36 95       	lsr	r19
     9fa:	27 95       	ror	r18
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <update_step_led_mask+0xc0>
     a00:	20 ff       	sbrs	r18, 0
     a02:	06 c0       	rjmp	.+12     	; 0xa10 <update_step_led_mask+0xd8>
     a04:	20 81       	ld	r18, Z
     a06:	31 81       	ldd	r19, Z+1	; 0x01
     a08:	24 2b       	or	r18, r20
     a0a:	35 2b       	or	r19, r21
     a0c:	31 83       	std	Z+1, r19	; 0x01
     a0e:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a10:	9b 01       	movw	r18, r22
     a12:	08 2e       	mov	r0, r24
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <update_step_led_mask+0xe2>
     a16:	36 95       	lsr	r19
     a18:	27 95       	ror	r18
     a1a:	0a 94       	dec	r0
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <update_step_led_mask+0xde>
     a1e:	20 ff       	sbrs	r18, 0
     a20:	08 c0       	rjmp	.+16     	; 0xa32 <update_step_led_mask+0xfa>
     a22:	2d 91       	ld	r18, X+
     a24:	3c 91       	ld	r19, X
     a26:	11 97       	sbiw	r26, 0x01	; 1
     a28:	24 2b       	or	r18, r20
     a2a:	35 2b       	or	r19, r21
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	3c 93       	st	X, r19
     a30:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	32 96       	adiw	r30, 0x02	; 2
     a38:	80 31       	cpi	r24, 0x10	; 16
     a3a:	91 05       	cpc	r25, r1
     a3c:	d1 f6       	brne	.-76     	; 0x9f2 <update_step_led_mask+0xba>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a3e:	d5 01       	movw	r26, r10
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	00 2e       	mov	r0, r16
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <update_step_led_mask+0x114>
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <update_step_led_mask+0x110>
     a50:	80 ff       	sbrs	r24, 0
     a52:	07 c0       	rjmp	.+14     	; 0xa62 <update_step_led_mask+0x12a>
     a54:	f4 01       	movw	r30, r8
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	84 2b       	or	r24, r20
     a5c:	95 2b       	or	r25, r21
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a62:	d3 01       	movw	r26, r6
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	00 2e       	mov	r0, r16
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <update_step_led_mask+0x138>
     a6c:	96 95       	lsr	r25
     a6e:	87 95       	ror	r24
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <update_step_led_mask+0x134>
     a74:	80 ff       	sbrs	r24, 0
     a76:	07 c0       	rjmp	.+14     	; 0xa86 <update_step_led_mask+0x14e>
     a78:	f2 01       	movw	r30, r4
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	48 2b       	or	r20, r24
     a80:	59 2b       	or	r21, r25
     a82:	51 83       	std	Z+1, r21	; 0x01
     a84:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     a86:	0f 5f       	subi	r16, 0xFF	; 255
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	d1 01       	movw	r26, r2
     a8c:	8c 91       	ld	r24, X
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	80 17       	cp	r24, r16
     a92:	91 07       	cpc	r25, r17
     a94:	fc f0       	brlt	.+62     	; 0xad4 <update_step_led_mask+0x19c>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a96:	c6 01       	movw	r24, r12
     a98:	80 0f       	add	r24, r16
     a9a:	91 1f       	adc	r25, r17
     a9c:	fc 01       	movw	r30, r24
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	e3 58       	subi	r30, 0x83	; 131
     aa4:	fc 4f       	sbci	r31, 0xFC	; 252
     aa6:	c0 81       	ld	r28, Z
     aa8:	d1 81       	ldd	r29, Z+1	; 0x01
     aaa:	a7 01       	movw	r20, r14
     aac:	00 2e       	mov	r0, r16
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <update_step_led_mask+0x17c>
     ab0:	44 0f       	add	r20, r20
     ab2:	55 1f       	adc	r21, r21
     ab4:	0a 94       	dec	r0
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <update_step_led_mask+0x178>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	fc 01       	movw	r30, r24
     abe:	ed 51       	subi	r30, 0x1D	; 29
     ac0:	fc 4f       	sbci	r31, 0xFC	; 252
     ac2:	60 81       	ld	r22, Z
     ac4:	71 81       	ldd	r23, Z+1	; 0x01
     ac6:	a7 e2       	ldi	r26, 0x27	; 39
     ac8:	b4 e0       	ldi	r27, 0x04	; 4
     aca:	e1 ec       	ldi	r30, 0xC1	; 193
     acc:	f3 e0       	ldi	r31, 0x03	; 3
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	8f cf       	rjmp	.-226    	; 0x9f2 <update_step_led_mask+0xba>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	9f 90       	pop	r9
     aea:	8f 90       	pop	r8
     aec:	7f 90       	pop	r7
     aee:	6f 90       	pop	r6
     af0:	5f 90       	pop	r5
     af2:	4f 90       	pop	r4
     af4:	3f 90       	pop	r3
     af6:	2f 90       	pop	r2
     af8:	08 95       	ret

00000afa <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     afa:	08 95       	ret

00000afc <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     afc:	08 95       	ret

00000afe <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     afe:	40 31       	cpi	r20, 0x10	; 16
     b00:	20 f4       	brcc	.+8      	; 0xb0a <note_on_event+0xc>
     b02:	62 2f       	mov	r22, r18
     b04:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     b06:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     b0a:	08 95       	ret

00000b0c <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     b0c:	0e 94 c0 06 	call	0xd80	; 0xd80 <update_tempo>
	read_switches();
     b10:	0e 94 01 0a 	call	0x1402	; 0x1402 <read_switches>
	check_start_stop_tap();
     b14:	0e 94 76 0a 	call	0x14ec	; 0x14ec <check_start_stop_tap>
	
	parse_switch_data();
     b18:	0e 94 4f 0a 	call	0x149e	; 0x149e <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b1c:	80 91 7b 03 	lds	r24, 0x037B
     b20:	83 30       	cpi	r24, 0x03	; 3
     b22:	11 f4       	brne	.+4      	; 0xb28 <refresh+0x1c>
     b24:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <live_hits>
	update_mode();
     b28:	0e 94 67 06 	call	0xcce	; 0xcce <update_mode>
	check_clear_switch();
     b2c:	0e 94 b7 0b 	call	0x176e	; 0x176e <check_clear_switch>
	check_variation_switches();
     b30:	0e 94 89 0b 	call	0x1712	; 0x1712 <check_variation_switches>
	update_prescale();
     b34:	0e 94 43 08 	call	0x1086	; 0x1086 <update_prescale>
	//update_variation();
	check_inst_switches();	
     b38:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <check_inst_switches>
	update_step_board();
     b3c:	0e 94 ee 06 	call	0xddc	; 0xddc <update_step_board>
	//update_step_led_mask();
	process_step();
     b40:	0e 94 0b 09 	call	0x1216	; 0x1216 <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     b44:	0e 94 dd 09 	call	0x13ba	; 0x13ba <update_spi>
	PORTD &= ~(1<<TRIG);
     b48:	5d 98       	cbi	0x0b, 5	; 11
     b4a:	08 95       	ret

00000b4c <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     b4c:	8f e1       	ldi	r24, 0x1F	; 31
     b4e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     b52:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     b56:	88 ed       	ldi	r24, 0xD8	; 216
     b58:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     b5c:	51 9a       	sbi	0x0a, 1	; 10
     b5e:	08 95       	ret

00000b60 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     b8c:	80 91 c6 00 	lds	r24, 0x00C6
     b90:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     b92:	ae 01       	movw	r20, r28
     b94:	4f 5f       	subi	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	8d e8       	ldi	r24, 0x8D	; 141
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     ba2:	0f 90       	pop	r0
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_20>:

ISR (USART0_TX_vect) {
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1


	
}
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	1f 90       	pop	r1
     bdc:	18 95       	reti

00000bde <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     bde:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     be0:	8d b1       	in	r24, 0x0d	; 13
     be2:	8c 60       	ori	r24, 0x0C	; 12
     be4:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     be6:	87 b1       	in	r24, 0x07	; 7
     be8:	8e 60       	ori	r24, 0x0E	; 14
     bea:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     bec:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     bee:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     bf0:	88 b1       	in	r24, 0x08	; 8
     bf2:	81 7f       	andi	r24, 0xF1	; 241
     bf4:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     bf6:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     bf8:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     bfa:	80 e5       	ldi	r24, 0x50	; 80
     bfc:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     c00:	ed ea       	ldi	r30, 0xAD	; 173
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     c10:	8d e1       	ldi	r24, 0x1D	; 29
     c12:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	turn_on(FILL_MANUAL);
     c16:	82 e2       	ldi	r24, 0x22	; 34
     c18:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	
	update_spi();
     c1c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     c20:	84 b5       	in	r24, 0x24	; 36
     c22:	82 60       	ori	r24, 0x02	; 2
     c24:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     c26:	81 ee       	ldi	r24, 0xE1	; 225
     c28:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     c2a:	8d e8       	ldi	r24, 0x8D	; 141
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     c32:	6f e7       	ldi	r22, 0x7F	; 127
     c34:	75 e0       	ldi	r23, 0x05	; 5
     c36:	8d e8       	ldi	r24, 0x8D	; 141
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     c3e:	6d e7       	ldi	r22, 0x7D	; 125
     c40:	75 e0       	ldi	r23, 0x05	; 5
     c42:	8d e8       	ldi	r24, 0x8D	; 141
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     c4a:	6e e7       	ldi	r22, 0x7E	; 126
     c4c:	75 e0       	ldi	r23, 0x05	; 5
     c4e:	8d e8       	ldi	r24, 0x8D	; 141
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0e 94 de 0c 	call	0x19bc	; 0x19bc <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     c56:	0e 94 a6 05 	call	0xb4c	; 0xb4c <setup_midi_usart>
	
	setup_internal_clock();
     c5a:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	internal_clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     c5e:	e8 e7       	ldi	r30, 0x78	; 120
     c60:	f2 e0       	ldi	r31, 0x02	; 2
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     c6a:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     c6e:	80 91 7a 03 	lds	r24, 0x037A
	flag.pre_scale_change = 0;
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	8f 7b       	andi	r24, 0xBF	; 191
     c76:	80 93 7a 03 	sts	0x037A, r24
	sequencer.START = 0;
     c7a:	ec e7       	ldi	r30, 0x7C	; 124
     c7c:	f3 e0       	ldi	r31, 0x03	; 3
     c7e:	80 81       	ld	r24, Z
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     c84:	8f e0       	ldi	r24, 0x0F	; 15
     c86:	80 93 4b 04 	sts	0x044B, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	80 93 4c 04 	sts	0x044C, r24
	sequencer.step_num_new = 15;
     c90:	cd e4       	ldi	r28, 0x4D	; 77
     c92:	d4 e0       	ldi	r29, 0x04	; 4
     c94:	88 81       	ld	r24, Y
     c96:	80 7e       	andi	r24, 0xE0	; 224
     c98:	8f 60       	ori	r24, 0x0F	; 15
     c9a:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     c9c:	10 92 4a 04 	sts	0x044A, r1
	turn_on(BASIC_VAR_A_LED);
     ca0:	84 e2       	ldi	r24, 0x24	; 36
     ca2:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	sequencer.mode = FIRST_PART;
     ca6:	10 93 7b 03 	sts	0x037B, r17

	sequencer.part_playing = FIRST;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     cac:	8d 7f       	andi	r24, 0xFD	; 253
     cae:	8b 7f       	andi	r24, 0xFB	; 251
     cb0:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     cb2:	8a e2       	ldi	r24, 0x2A	; 42
     cb4:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	turn_on(SCALE_3_LED);
     cb8:	87 e2       	ldi	r24, 0x27	; 39
     cba:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	sei(); //enable global interrupts	
     cbe:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     cc0:	8d e8       	ldi	r24, 0x8D	; 141
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <midi_device_process>
	
	refresh();		
     cc8:	0e 94 86 05 	call	0xb0c	; 0xb0c <refresh>

	
	}
     ccc:	f9 cf       	rjmp	.-14     	; 0xcc0 <main+0xe2>

00000cce <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     cce:	80 91 58 02 	lds	r24, 0x0258
     cd2:	86 ff       	sbrs	r24, 6
     cd4:	54 c0       	rjmp	.+168    	; 0xd7e <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     cd6:	e8 e5       	ldi	r30, 0x58	; 88
     cd8:	f2 e0       	ldi	r31, 0x02	; 2
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     cde:	80 91 7c 03 	lds	r24, 0x037C
     ce2:	80 ff       	sbrs	r24, 0
     ce4:	0c c0       	rjmp	.+24     	; 0xcfe <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     ce6:	80 91 12 02 	lds	r24, 0x0212
     cea:	88 23       	and	r24, r24
     cec:	21 f0       	breq	.+8      	; 0xcf6 <update_mode+0x28>
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	80 93 12 02 	sts	0x0212, r24
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <update_mode+0x44>
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	80 93 12 02 	sts	0x0212, r24
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     cfe:	80 91 12 02 	lds	r24, 0x0212
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	86 30       	cpi	r24, 0x06	; 6
     d06:	19 f0       	breq	.+6      	; 0xd0e <update_mode+0x40>
     d08:	80 93 12 02 	sts	0x0212, r24
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <update_mode+0x44>
     d0e:	10 92 12 02 	sts	0x0212, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d12:	30 91 12 02 	lds	r19, 0x0212
     d16:	e3 2f       	mov	r30, r19
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	e4 5f       	subi	r30, 0xF4	; 244
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	20 81       	ld	r18, Z
     d20:	20 93 7b 03 	sts	0x037B, r18
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
		spi_data[4] |= (1<< mode_index);
     d24:	ed e6       	ldi	r30, 0x6D	; 109
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <update_mode+0x64>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	3a 95       	dec	r19
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <update_mode+0x60>
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
     d36:	94 81       	ldd	r25, Z+4	; 0x04
     d38:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] |= (1<< mode_index);
     d3a:	89 2b       	or	r24, r25
     d3c:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	82 0f       	add	r24, r18
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	e0 f4       	brcc	.+56     	; 0xd7e <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     d46:	e1 e0       	ldi	r30, 0x01	; 1
     d48:	21 30       	cpi	r18, 0x01	; 1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <update_mode+0x80>
     d4c:	e0 e0       	ldi	r30, 0x00	; 0
     d4e:	ad e4       	ldi	r26, 0x4D	; 77
     d50:	b4 e0       	ldi	r27, 0x04	; 4
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	8c 91       	ld	r24, X
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	e0 fb       	bst	r30, 0
     d5a:	82 f9       	bld	r24, 2
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	8c 93       	st	X, r24
     d60:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e5 58       	subi	r30, 0x85	; 133
     d66:	fc 4f       	sbci	r31, 0xFC	; 252
     d68:	e0 53       	subi	r30, 0x30	; 48
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 81       	ld	r24, Z
     d6e:	98 2f       	mov	r25, r24
     d70:	9f 71       	andi	r25, 0x1F	; 31
     d72:	8c 91       	ld	r24, X
     d74:	80 7e       	andi	r24, 0xE0	; 224
     d76:	89 2b       	or	r24, r25
     d78:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     d7a:	0e 94 9c 04 	call	0x938	; 0x938 <update_step_led_mask>
     d7e:	08 95       	ret

00000d80 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     d80:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     d84:	90 93 62 02 	sts	0x0262, r25
     d88:	80 93 61 02 	sts	0x0261, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     d8c:	20 91 5f 02 	lds	r18, 0x025F
     d90:	30 91 60 02 	lds	r19, 0x0260
     d94:	82 1b       	sub	r24, r18
     d96:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     d98:	95 95       	asr	r25
     d9a:	87 95       	ror	r24
     d9c:	95 95       	asr	r25
     d9e:	87 95       	ror	r24
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	90 93 60 02 	sts	0x0260, r25
     da8:	80 93 5f 02 	sts	0x025F, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     dac:	23 e6       	ldi	r18, 0x63	; 99
     dae:	34 e0       	ldi	r19, 0x04	; 4
     db0:	a9 01       	movw	r20, r18
     db2:	48 1b       	sub	r20, r24
     db4:	59 0b       	sbc	r21, r25
     db6:	ca 01       	movw	r24, r20
     db8:	e8 e7       	ldi	r30, 0x78	; 120
     dba:	f2 e0       	ldi	r31, 0x02	; 2
     dbc:	54 83       	std	Z+4, r21	; 0x04
     dbe:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     dc0:	25 81       	ldd	r18, Z+5	; 0x05
     dc2:	36 81       	ldd	r19, Z+6	; 0x06
     dc4:	42 17       	cp	r20, r18
     dc6:	53 07       	cpc	r21, r19
     dc8:	11 f0       	breq	.+4      	; 0xdce <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     dca:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     dce:	e8 e7       	ldi	r30, 0x78	; 120
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	83 81       	ldd	r24, Z+3	; 0x03
     dd4:	94 81       	ldd	r25, Z+4	; 0x04
     dd6:	96 83       	std	Z+6, r25	; 0x06
     dd8:	85 83       	std	Z+5, r24	; 0x05
     dda:	08 95       	ret

00000ddc <update_step_board>:
			//turn_on(STEP_1_LED);
			
		}
}

void update_step_board() {
     ddc:	2f 92       	push	r2
     dde:	3f 92       	push	r3
     de0:	4f 92       	push	r4
     de2:	5f 92       	push	r5
     de4:	6f 92       	push	r6
     de6:	7f 92       	push	r7
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
	
	if (sequencer.START) {
     e00:	90 91 7c 03 	lds	r25, 0x037C
     e04:	91 ff       	sbrs	r25, 1
     e06:	2c c1       	rjmp	.+600    	; 0x1060 <update_step_board+0x284>
		
			switch (sequencer.mode) {		
     e08:	80 91 7b 03 	lds	r24, 0x037B
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	08 f0       	brcs	.+2      	; 0xe14 <update_step_board+0x38>
     e12:	26 c1       	rjmp	.+588    	; 0x1060 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e14:	92 ff       	sbrs	r25, 2
     e16:	26 c0       	rjmp	.+76     	; 0xe64 <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     e18:	80 91 18 02 	lds	r24, 0x0218
     e1c:	86 fd       	sbrc	r24, 6
     e1e:	0b c0       	rjmp	.+22     	; 0xe36 <update_step_board+0x5a>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	fc 01       	movw	r30, r24
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	e8 5e       	subi	r30, 0xE8	; 232
     e2c:	fd 4f       	sbci	r31, 0xFD	; 253
     e2e:	20 81       	ld	r18, Z
     e30:	26 ff       	sbrs	r18, 6
     e32:	13 c0       	rjmp	.+38     	; 0xe5a <update_step_board+0x7e>
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <update_step_board+0x5e>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e8 5e       	subi	r30, 0xE8	; 232
     e42:	fd 4f       	sbci	r31, 0xFD	; 253
     e44:	90 81       	ld	r25, Z
     e46:	9f 7b       	andi	r25, 0xBF	; 191
     e48:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     e4a:	ed e4       	ldi	r30, 0x4D	; 77
     e4c:	f4 e0       	ldi	r31, 0x04	; 4
     e4e:	8f 71       	andi	r24, 0x1F	; 31
     e50:	90 81       	ld	r25, Z
     e52:	90 7e       	andi	r25, 0xE0	; 224
     e54:	89 2b       	or	r24, r25
     e56:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     e58:	03 c1       	rjmp	.+518    	; 0x1060 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	80 31       	cpi	r24, 0x10	; 16
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f7       	brne	.-62     	; 0xe24 <update_step_board+0x48>
     e62:	fe c0       	rjmp	.+508    	; 0x1060 <update_step_board+0x284>
					
					break; //break or return? or is it needed?
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     e64:	80 91 51 04 	lds	r24, 0x0451
     e68:	80 31       	cpi	r24, 0x10	; 16
     e6a:	09 f0       	breq	.+2      	; 0xe6e <update_step_board+0x92>
     e6c:	72 c0       	rjmp	.+228    	; 0xf52 <update_step_board+0x176>
     e6e:	00 e0       	ldi	r16, 0x00	; 0
     e70:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     e72:	ce e4       	ldi	r28, 0x4E	; 78
     e74:	d4 e0       	ldi	r29, 0x04	; 4
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     e76:	0f 2e       	mov	r0, r31
     e78:	f9 e4       	ldi	r31, 0x49	; 73
     e7a:	6f 2e       	mov	r6, r31
     e7c:	f4 e0       	ldi	r31, 0x04	; 4
     e7e:	7f 2e       	mov	r7, r31
     e80:	f0 2d       	mov	r31, r0
     e82:	cc 24       	eor	r12, r12
     e84:	c3 94       	inc	r12
     e86:	d1 2c       	mov	r13, r1
     e88:	0f 2e       	mov	r0, r31
     e8a:	f3 e3       	ldi	r31, 0x33	; 51
     e8c:	bf 2e       	mov	r11, r31
     e8e:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     e90:	0f 2e       	mov	r0, r31
     e92:	f1 e5       	ldi	r31, 0x51	; 81
     e94:	4f 2e       	mov	r4, r31
     e96:	f4 e0       	ldi	r31, 0x04	; 4
     e98:	5f 2e       	mov	r5, r31
     e9a:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     e9c:	f8 01       	movw	r30, r16
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	e8 5e       	subi	r30, 0xE8	; 232
     ea4:	fd 4f       	sbci	r31, 0xFD	; 253
     ea6:	80 81       	ld	r24, Z
     ea8:	86 ff       	sbrs	r24, 6
     eaa:	4c c0       	rjmp	.+152    	; 0xf44 <update_step_board+0x168>
					
							
							button[i].state ^= button[i].state;
     eac:	f8 01       	movw	r30, r16
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	e8 5e       	subi	r30, 0xE8	; 232
     eb4:	fd 4f       	sbci	r31, 0xFD	; 253
     eb6:	8f 7b       	andi	r24, 0xBF	; 191
     eb8:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     eba:	88 81       	ld	r24, Y
     ebc:	82 fb       	bst	r24, 2
     ebe:	88 24       	eor	r8, r8
     ec0:	80 f8       	bld	r8, 0
     ec2:	91 2c       	mov	r9, r1
     ec4:	f4 01       	movw	r30, r8
     ec6:	e5 58       	subi	r30, 0x85	; 133
     ec8:	fc 4f       	sbci	r31, 0xFC	; 252
     eca:	e0 53       	subi	r30, 0x30	; 48
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	80 17       	cp	r24, r16
     ed4:	91 07       	cpc	r25, r17
     ed6:	b4 f1       	brlt	.+108    	; 0xf44 <update_step_board+0x168>
								toggle(i);
     ed8:	80 2f       	mov	r24, r16
     eda:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     ede:	d3 01       	movw	r26, r6
     ee0:	8c 91       	ld	r24, X
     ee2:	80 fb       	bst	r24, 0
     ee4:	22 24       	eor	r2, r2
     ee6:	20 f8       	bld	r2, 0
     ee8:	31 2c       	mov	r3, r1
     eea:	88 81       	ld	r24, Y
     eec:	82 fb       	bst	r24, 2
     eee:	ee 24       	eor	r14, r14
     ef0:	e0 f8       	bld	r14, 0
     ef2:	f1 2c       	mov	r15, r1
     ef4:	b2 9c       	mul	r11, r2
     ef6:	f0 01       	movw	r30, r0
     ef8:	b3 9c       	mul	r11, r3
     efa:	f0 0d       	add	r31, r0
     efc:	11 24       	eor	r1, r1
     efe:	df 01       	movw	r26, r30
     f00:	ae 0d       	add	r26, r14
     f02:	bf 1d       	adc	r27, r15
     f04:	aa 0f       	add	r26, r26
     f06:	bb 1f       	adc	r27, r27
     f08:	a3 54       	subi	r26, 0x43	; 67
     f0a:	bc 4f       	sbci	r27, 0xFC	; 252
     f0c:	2d 91       	ld	r18, X+
     f0e:	3c 91       	ld	r19, X
     f10:	11 97       	sbiw	r26, 0x01	; 1
     f12:	c6 01       	movw	r24, r12
     f14:	00 2e       	mov	r0, r16
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <update_step_board+0x140>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <update_step_board+0x13c>
     f20:	28 27       	eor	r18, r24
     f22:	39 27       	eor	r19, r25
     f24:	2d 93       	st	X+, r18
     f26:	3c 93       	st	X, r19
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f28:	d2 01       	movw	r26, r4
     f2a:	2c 91       	ld	r18, X
     f2c:	e2 0f       	add	r30, r18
     f2e:	f1 1d       	adc	r31, r1
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ef 53       	subi	r30, 0x3F	; 63
     f36:	fc 4f       	sbci	r31, 0xFC	; 252
     f38:	20 81       	ld	r18, Z
     f3a:	31 81       	ldd	r19, Z+1	; 0x01
     f3c:	82 27       	eor	r24, r18
     f3e:	93 27       	eor	r25, r19
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	00 31       	cpi	r16, 0x10	; 16
     f4a:	11 05       	cpc	r17, r1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <update_step_board+0x174>
     f4e:	a6 cf       	rjmp	.-180    	; 0xe9c <update_step_board+0xc0>
     f50:	87 c0       	rjmp	.+270    	; 0x1060 <update_step_board+0x284>
     f52:	c0 e0       	ldi	r28, 0x00	; 0
     f54:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
     f56:	0f 2e       	mov	r0, r31
     f58:	fe e4       	ldi	r31, 0x4E	; 78
     f5a:	ef 2e       	mov	r14, r31
     f5c:	f4 e0       	ldi	r31, 0x04	; 4
     f5e:	ff 2e       	mov	r15, r31
     f60:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
     f62:	0f 2e       	mov	r0, r31
     f64:	f9 e4       	ldi	r31, 0x49	; 73
     f66:	6f 2e       	mov	r6, r31
     f68:	f4 e0       	ldi	r31, 0x04	; 4
     f6a:	7f 2e       	mov	r7, r31
     f6c:	f0 2d       	mov	r31, r0
     f6e:	0f 2e       	mov	r0, r31
     f70:	f1 e5       	ldi	r31, 0x51	; 81
     f72:	4f 2e       	mov	r4, r31
     f74:	f4 e0       	ldi	r31, 0x04	; 4
     f76:	5f 2e       	mov	r5, r31
     f78:	f0 2d       	mov	r31, r0
     f7a:	0f 2e       	mov	r0, r31
     f7c:	f3 e3       	ldi	r31, 0x33	; 51
     f7e:	3f 2e       	mov	r3, r31
     f80:	f0 2d       	mov	r31, r0
     f82:	88 24       	eor	r8, r8
     f84:	83 94       	inc	r8
     f86:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
     f88:	fe 01       	movw	r30, r28
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e8 5e       	subi	r30, 0xE8	; 232
     f90:	fd 4f       	sbci	r31, 0xFD	; 253
     f92:	80 81       	ld	r24, Z
     f94:	86 ff       	sbrs	r24, 6
     f96:	5f c0       	rjmp	.+190    	; 0x1056 <update_step_board+0x27a>
						
						
						button[i].state ^= button[i].state;
     f98:	fe 01       	movw	r30, r28
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	e8 5e       	subi	r30, 0xE8	; 232
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
     fa6:	f7 01       	movw	r30, r14
     fa8:	80 81       	ld	r24, Z
     faa:	82 fb       	bst	r24, 2
     fac:	00 27       	eor	r16, r16
     fae:	00 f9       	bld	r16, 0
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	f8 01       	movw	r30, r16
     fb4:	e5 58       	subi	r30, 0x85	; 133
     fb6:	fc 4f       	sbci	r31, 0xFC	; 252
     fb8:	e0 53       	subi	r30, 0x30	; 48
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	8c 17       	cp	r24, r28
     fc2:	9d 07       	cpc	r25, r29
     fc4:	0c f4       	brge	.+2      	; 0xfc8 <update_step_board+0x1ec>
     fc6:	47 c0       	rjmp	.+142    	; 0x1056 <update_step_board+0x27a>
							toggle(i);
     fc8:	8c 2f       	mov	r24, r28
     fca:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
     fce:	d3 01       	movw	r26, r6
     fd0:	8c 91       	ld	r24, X
     fd2:	80 fb       	bst	r24, 0
     fd4:	cc 24       	eor	r12, r12
     fd6:	c0 f8       	bld	r12, 0
     fd8:	d1 2c       	mov	r13, r1
     fda:	f7 01       	movw	r30, r14
     fdc:	80 81       	ld	r24, Z
     fde:	82 fb       	bst	r24, 2
     fe0:	aa 24       	eor	r10, r10
     fe2:	a0 f8       	bld	r10, 0
     fe4:	b1 2c       	mov	r11, r1
     fe6:	d2 01       	movw	r26, r4
     fe8:	6c 91       	ld	r22, X
     fea:	c5 01       	movw	r24, r10
     fec:	82 95       	swap	r24
     fee:	92 95       	swap	r25
     ff0:	90 7f       	andi	r25, 0xF0	; 240
     ff2:	98 27       	eor	r25, r24
     ff4:	80 7f       	andi	r24, 0xF0	; 240
     ff6:	98 27       	eor	r25, r24
     ff8:	3c 9c       	mul	r3, r12
     ffa:	90 01       	movw	r18, r0
     ffc:	3d 9c       	mul	r3, r13
     ffe:	30 0d       	add	r19, r0
    1000:	11 24       	eor	r1, r1
    1002:	82 0f       	add	r24, r18
    1004:	93 1f       	adc	r25, r19
    1006:	8c 0f       	add	r24, r28
    1008:	9d 1f       	adc	r25, r29
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	fc 01       	movw	r30, r24
    1010:	e3 58       	subi	r30, 0x83	; 131
    1012:	fc 4f       	sbci	r31, 0xFC	; 252
    1014:	c4 01       	movw	r24, r8
    1016:	06 2e       	mov	r0, r22
    1018:	02 c0       	rjmp	.+4      	; 0x101e <update_step_board+0x242>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <update_step_board+0x23e>
    1022:	40 81       	ld	r20, Z
    1024:	51 81       	ldd	r21, Z+1	; 0x01
    1026:	84 27       	eor	r24, r20
    1028:	95 27       	eor	r25, r21
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    102e:	f9 01       	movw	r30, r18
    1030:	e6 0f       	add	r30, r22
    1032:	f1 1d       	adc	r31, r1
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ef 53       	subi	r30, 0x3F	; 63
    103a:	fc 4f       	sbci	r31, 0xFC	; 252
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	94 01       	movw	r18, r8
    1042:	0c 2e       	mov	r0, r28
    1044:	02 c0       	rjmp	.+4      	; 0x104a <update_step_board+0x26e>
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <update_step_board+0x26a>
    104e:	82 27       	eor	r24, r18
    1050:	93 27       	eor	r25, r19
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    1056:	21 96       	adiw	r28, 0x01	; 1
    1058:	c0 31       	cpi	r28, 0x10	; 16
    105a:	d1 05       	cpc	r29, r1
    105c:	09 f0       	breq	.+2      	; 0x1060 <update_step_board+0x284>
    105e:	94 cf       	rjmp	.-216    	; 0xf88 <update_step_board+0x1ac>
	} else {
		
		//handle changing selected pattern and rhythm. Not currently handling switches presses now when sequencer is stopped, which means they get added once sequencer starts
		
	}
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret

00001086 <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    1086:	80 91 54 02 	lds	r24, 0x0254
    108a:	86 ff       	sbrs	r24, 6
    108c:	29 c0       	rjmp	.+82     	; 0x10e0 <update_prescale+0x5a>
    108e:	80 91 7c 03 	lds	r24, 0x037C
    1092:	80 ff       	sbrs	r24, 0
    1094:	25 c0       	rjmp	.+74     	; 0x10e0 <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    1096:	e4 e5       	ldi	r30, 0x54	; 84
    1098:	f2 e0       	ldi	r31, 0x02	; 2
    109a:	80 81       	ld	r24, Z
    109c:	8f 7b       	andi	r24, 0xBF	; 191
    109e:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    10a0:	80 91 17 02 	lds	r24, 0x0217
    10a4:	88 23       	and	r24, r24
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <update_prescale+0x2a>
    10a8:	81 50       	subi	r24, 0x01	; 1
    10aa:	80 93 17 02 	sts	0x0217, r24
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	80 93 17 02 	sts	0x0217, r24
					
		}
		flag.pre_scale_change = 1;
    10b6:	80 91 7a 03 	lds	r24, 0x037A
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	80 93 7a 03 	sts	0x037A, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    10c0:	ed e6       	ldi	r30, 0x6D	; 109
    10c2:	f2 e0       	ldi	r31, 0x02	; 2
    10c4:	20 91 17 02 	lds	r18, 0x0217
    10c8:	2e 5f       	subi	r18, 0xFE	; 254
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <update_prescale+0x4e>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	2a 95       	dec	r18
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    10d8:	95 81       	ldd	r25, Z+5	; 0x05
    10da:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    10dc:	89 2b       	or	r24, r25
    10de:	85 83       	std	Z+5, r24	; 0x05
    10e0:	08 95       	ret

000010e2 <check_tap>:
	}
}

void check_tap(void) {
	
	if (flag.tap) {
    10e2:	80 91 7a 03 	lds	r24, 0x037A
    10e6:	88 23       	and	r24, r24
    10e8:	0c f0       	brlt	.+2      	; 0x10ec <check_tap+0xa>
    10ea:	94 c0       	rjmp	.+296    	; 0x1214 <check_tap+0x132>
		
		flag.tap = 0;
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	80 93 7a 03 	sts	0x037A, r24
		if (sequencer.current_inst == AC) {
    10f2:	40 91 51 04 	lds	r20, 0x0451
    10f6:	40 31       	cpi	r20, 0x10	; 16
    10f8:	69 f5       	brne	.+90     	; 0x1154 <check_tap+0x72>
			sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] |= 1<<sequencer.current_step;	
    10fa:	90 91 49 04 	lds	r25, 0x0449
    10fe:	80 91 4e 04 	lds	r24, 0x044E
    1102:	82 fb       	bst	r24, 2
    1104:	66 27       	eor	r22, r22
    1106:	60 f9       	bld	r22, 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	91 70       	andi	r25, 0x01	; 1
    110c:	fb 01       	movw	r30, r22
    110e:	53 e3       	ldi	r21, 0x33	; 51
    1110:	95 9f       	mul	r25, r21
    1112:	e0 0d       	add	r30, r0
    1114:	f1 1d       	adc	r31, r1
    1116:	11 24       	eor	r1, r1
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	e3 54       	subi	r30, 0x43	; 67
    111e:	fc 4f       	sbci	r31, 0xFC	; 252
    1120:	90 91 4d 04 	lds	r25, 0x044D
    1124:	92 95       	swap	r25
    1126:	96 95       	lsr	r25
    1128:	97 70       	andi	r25, 0x07	; 7
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	88 0f       	add	r24, r24
    112e:	88 0f       	add	r24, r24
    1130:	88 0f       	add	r24, r24
    1132:	89 2b       	or	r24, r25
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	db 01       	movw	r26, r22
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <check_tap+0x5e>
    113c:	aa 0f       	add	r26, r26
    113e:	bb 1f       	adc	r27, r27
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <check_tap+0x5a>
    1144:	cd 01       	movw	r24, r26
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	86 2b       	or	r24, r22
    114c:	97 2b       	or	r25, r23
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
    1152:	33 c0       	rjmp	.+102    	; 0x11ba <check_tap+0xd8>
		} else {
			sequencer.pattern[sequencer.variation].part[sequencer.part_editing][sequencer.current_step] |= 1<<sequencer.current_inst;
    1154:	50 91 49 04 	lds	r21, 0x0449
    1158:	80 91 4e 04 	lds	r24, 0x044E
    115c:	82 fb       	bst	r24, 2
    115e:	ee 27       	eor	r30, r30
    1160:	e0 f9       	bld	r30, 0
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	90 91 4d 04 	lds	r25, 0x044D
    1168:	92 95       	swap	r25
    116a:	96 95       	lsr	r25
    116c:	97 70       	andi	r25, 0x07	; 7
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	88 0f       	add	r24, r24
    1172:	88 0f       	add	r24, r24
    1174:	88 0f       	add	r24, r24
    1176:	89 2b       	or	r24, r25
    1178:	e2 95       	swap	r30
    117a:	f2 95       	swap	r31
    117c:	f0 7f       	andi	r31, 0xF0	; 240
    117e:	fe 27       	eor	r31, r30
    1180:	e0 7f       	andi	r30, 0xF0	; 240
    1182:	fe 27       	eor	r31, r30
    1184:	95 2f       	mov	r25, r21
    1186:	91 70       	andi	r25, 0x01	; 1
    1188:	b3 e3       	ldi	r27, 0x33	; 51
    118a:	9b 9f       	mul	r25, r27
    118c:	e0 0d       	add	r30, r0
    118e:	f1 1d       	adc	r31, r1
    1190:	11 24       	eor	r1, r1
    1192:	e8 0f       	add	r30, r24
    1194:	f1 1d       	adc	r31, r1
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	e3 58       	subi	r30, 0x83	; 131
    119c:	fc 4f       	sbci	r31, 0xFC	; 252
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	04 2e       	mov	r0, r20
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <check_tap+0xc8>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <check_tap+0xc4>
    11ae:	60 81       	ld	r22, Z
    11b0:	71 81       	ldd	r23, Z+1	; 0x01
    11b2:	86 2b       	or	r24, r22
    11b4:	97 2b       	or	r25, r23
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
		}
		sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= 1<<sequencer.current_step;
    11ba:	80 91 49 04 	lds	r24, 0x0449
    11be:	28 2f       	mov	r18, r24
    11c0:	21 70       	andi	r18, 0x01	; 1
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	83 e3       	ldi	r24, 0x33	; 51
    11c6:	82 9f       	mul	r24, r18
    11c8:	f0 01       	movw	r30, r0
    11ca:	83 9f       	mul	r24, r19
    11cc:	f0 0d       	add	r31, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	e4 0f       	add	r30, r20
    11d2:	f1 1d       	adc	r31, r1
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	ef 53       	subi	r30, 0x3F	; 63
    11da:	fc 4f       	sbci	r31, 0xFC	; 252
    11dc:	80 91 4d 04 	lds	r24, 0x044D
    11e0:	98 2f       	mov	r25, r24
    11e2:	92 95       	swap	r25
    11e4:	96 95       	lsr	r25
    11e6:	97 70       	andi	r25, 0x07	; 7
    11e8:	80 91 4e 04 	lds	r24, 0x044E
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	88 0f       	add	r24, r24
    11f0:	88 0f       	add	r24, r24
    11f2:	88 0f       	add	r24, r24
    11f4:	89 2b       	or	r24, r25
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <check_tap+0x120>
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <check_tap+0x11c>
    1206:	ca 01       	movw	r24, r20
    1208:	20 81       	ld	r18, Z
    120a:	31 81       	ldd	r19, Z+1	; 0x01
    120c:	82 2b       	or	r24, r18
    120e:	93 2b       	or	r25, r19
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	08 95       	ret

00001216 <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
    121e:	80 91 7c 03 	lds	r24, 0x037C
    1222:	81 ff       	sbrs	r24, 1
    1224:	8d c0       	rjmp	.+282    	; 0x1340 <process_step+0x12a>
			
			//if (sequencer.part_playing == FIRST || sequencer.part_playing == SECOND) {	
				if (flag.next_step) {
    1226:	80 91 7a 03 	lds	r24, 0x037A
    122a:	80 ff       	sbrs	r24, 0
    122c:	90 c0       	rjmp	.+288    	; 0x134e <process_step+0x138>
					flag.next_step = 0;
    122e:	8e 7f       	andi	r24, 0xFE	; 254
    1230:	80 93 7a 03 	sts	0x037A, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
    1234:	88 70       	andi	r24, 0x08	; 8
    1236:	88 23       	and	r24, r24
    1238:	f1 f3       	breq	.-4      	; 0x1236 <process_step+0x20>
					
					check_tap();
    123a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <check_tap>
					PORTD |= (1<<TRIG);
    123e:	5d 9a       	sbi	0x0b, 5	; 11
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
    1240:	80 91 4e 04 	lds	r24, 0x044E
    1244:	82 fb       	bst	r24, 2
    1246:	99 27       	eor	r25, r25
    1248:	90 f9       	bld	r25, 0
    124a:	86 95       	lsr	r24
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	98 13       	cpse	r25, r24
    1250:	37 c0       	rjmp	.+110    	; 0x12c0 <process_step+0xaa>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    1252:	80 91 4d 04 	lds	r24, 0x044D
    1256:	98 2f       	mov	r25, r24
    1258:	92 95       	swap	r25
    125a:	96 95       	lsr	r25
    125c:	97 70       	andi	r25, 0x07	; 7
    125e:	80 91 4e 04 	lds	r24, 0x044E
    1262:	81 70       	andi	r24, 0x01	; 1
    1264:	88 0f       	add	r24, r24
    1266:	88 0f       	add	r24, r24
    1268:	88 0f       	add	r24, r24
    126a:	89 2b       	or	r24, r25
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <process_step+0x60>
    1272:	22 0f       	add	r18, r18
    1274:	33 1f       	adc	r19, r19
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <process_step+0x5c>
    127a:	80 91 49 04 	lds	r24, 0x0449
    127e:	08 2f       	mov	r16, r24
    1280:	01 70       	andi	r16, 0x01	; 1
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	80 91 51 04 	lds	r24, 0x0451
    1288:	93 e3       	ldi	r25, 0x33	; 51
    128a:	90 9f       	mul	r25, r16
    128c:	f0 01       	movw	r30, r0
    128e:	91 9f       	mul	r25, r17
    1290:	f0 0d       	add	r31, r0
    1292:	11 24       	eor	r1, r1
    1294:	e8 0f       	add	r30, r24
    1296:	f1 1d       	adc	r31, r1
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ef 53       	subi	r30, 0x3F	; 63
    129e:	fc 4f       	sbci	r31, 0xFC	; 252
    12a0:	90 81       	ld	r25, Z
    12a2:	81 81       	ldd	r24, Z+1	; 0x01
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    12a4:	ed e6       	ldi	r30, 0x6D	; 109
    12a6:	f2 e0       	ldi	r31, 0x02	; 2
    12a8:	49 2f       	mov	r20, r25
    12aa:	42 23       	and	r20, r18
    12ac:	40 95       	com	r20
					check_tap();
					PORTD |= (1<<TRIG);
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    12ae:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    12b0:	94 23       	and	r25, r20
    12b2:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    12b4:	98 2f       	mov	r25, r24
    12b6:	93 23       	and	r25, r19
    12b8:	90 95       	com	r25
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
    12ba:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    12bc:	89 23       	and	r24, r25
    12be:	80 83       	st	Z, r24
					} else {
						
						
					}

					trigger_step();
    12c0:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
    12c4:	90 91 49 04 	lds	r25, 0x0449
    12c8:	80 91 4e 04 	lds	r24, 0x044E
    12cc:	81 fb       	bst	r24, 1
    12ce:	22 27       	eor	r18, r18
    12d0:	20 f9       	bld	r18, 0
    12d2:	c2 2f       	mov	r28, r18
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	d4 2f       	mov	r29, r20
    12d8:	91 70       	andi	r25, 0x01	; 1
    12da:	53 e3       	ldi	r21, 0x33	; 51
    12dc:	95 9f       	mul	r25, r21
    12de:	c0 0d       	add	r28, r0
    12e0:	d1 1d       	adc	r29, r1
    12e2:	11 24       	eor	r1, r1
    12e4:	cc 0f       	add	r28, r28
    12e6:	dd 1f       	adc	r29, r29
    12e8:	c3 54       	subi	r28, 0x43	; 67
    12ea:	dc 4f       	sbci	r29, 0xFC	; 252
    12ec:	90 91 4d 04 	lds	r25, 0x044D
    12f0:	92 95       	swap	r25
    12f2:	96 95       	lsr	r25
    12f4:	97 70       	andi	r25, 0x07	; 7
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	88 0f       	add	r24, r24
    12fa:	88 0f       	add	r24, r24
    12fc:	88 0f       	add	r24, r24
    12fe:	89 2b       	or	r24, r25
    1300:	28 81       	ld	r18, Y
    1302:	39 81       	ldd	r19, Y+1	; 0x01
    1304:	a9 01       	movw	r20, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <process_step+0xf6>
    1308:	56 95       	lsr	r21
    130a:	47 95       	ror	r20
    130c:	8a 95       	dec	r24
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <process_step+0xf2>
    1310:	40 ff       	sbrs	r20, 0
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <process_step+0x10e>
						spi_data[8] |= 1<<ACCENT;
    1314:	ed e6       	ldi	r30, 0x6D	; 109
    1316:	f2 e0       	ldi	r31, 0x02	; 2
    1318:	80 85       	ldd	r24, Z+8	; 0x08
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
    131e:	84 e1       	ldi	r24, 0x14	; 20
    1320:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
    1324:	ee e6       	ldi	r30, 0x6E	; 110
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
    132e:	85 b5       	in	r24, 0x25	; 37
    1330:	83 60       	ori	r24, 0x03	; 3
    1332:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
    1334:	80 91 7a 03 	lds	r24, 0x037A
    1338:	87 7f       	andi	r24, 0xF7	; 247
    133a:	80 93 7a 03 	sts	0x037A, r24
    133e:	07 c0       	rjmp	.+14     	; 0x134e <process_step+0x138>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
    1340:	80 91 7a 03 	lds	r24, 0x037A
    1344:	80 ff       	sbrs	r24, 0
    1346:	03 c0       	rjmp	.+6      	; 0x134e <process_step+0x138>
			
			flag.next_step = 0;
    1348:	8e 7f       	andi	r24, 0xFE	; 254
    134a:	80 93 7a 03 	sts	0x037A, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <toggle_variation>:
	
}

void toggle_variation(void) {
	
	if (flag.variation_change == 1) {
    1358:	80 91 7a 03 	lds	r24, 0x037A
    135c:	82 ff       	sbrs	r24, 2
    135e:	16 c0       	rjmp	.+44     	; 0x138c <toggle_variation+0x34>
		flag.variation_change = 0;
    1360:	8b 7f       	andi	r24, 0xFB	; 251
    1362:	80 93 7a 03 	sts	0x037A, r24
		switch (sequencer.variation_mode) {
    1366:	80 91 4a 04 	lds	r24, 0x044A
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	49 f0       	breq	.+18     	; 0x1380 <toggle_variation+0x28>
    136e:	10 f0       	brcs	.+4      	; 0x1374 <toggle_variation+0x1c>
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	c1 f4       	brne	.+48     	; 0x13a4 <toggle_variation+0x4c>
					
			case VAR_A: case VAR_AB:
			sequencer.variation = VAR_A;
    1374:	e9 e4       	ldi	r30, 0x49	; 73
    1376:	f4 e0       	ldi	r31, 0x04	; 4
    1378:	80 81       	ld	r24, Z
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	80 83       	st	Z, r24
			break;
    137e:	08 95       	ret
			case VAR_B:
			sequencer.variation = VAR_B;
    1380:	e9 e4       	ldi	r30, 0x49	; 73
    1382:	f4 e0       	ldi	r31, 0x04	; 4
    1384:	80 81       	ld	r24, Z
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 83       	st	Z, r24
			break;
    138a:	08 95       	ret
					
					
		}
				
		} else if (sequencer.variation_mode == VAR_AB) {
    138c:	80 91 4a 04 	lds	r24, 0x044A
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	41 f4       	brne	.+16     	; 0x13a4 <toggle_variation+0x4c>
				
		sequencer.variation ^= 1<<0; //toggle state
    1394:	e9 e4       	ldi	r30, 0x49	; 73
    1396:	f4 e0       	ldi	r31, 0x04	; 4
    1398:	80 81       	ld	r24, Z
    139a:	98 2f       	mov	r25, r24
    139c:	90 95       	com	r25
    139e:	90 fb       	bst	r25, 0
    13a0:	80 f9       	bld	r24, 0
    13a2:	80 83       	st	Z, r24
    13a4:	08 95       	ret

000013a6 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    13a6:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    13aa:	ed ea       	ldi	r30, 0xAD	; 173
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	88 23       	and	r24, r24
    13b2:	ec f7       	brge	.-6      	; 0x13ae <spi_shift_byte+0x8>
	return SPDR1;
    13b4:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    13b8:	08 95       	ret

000013ba <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    13be:	cd e6       	ldi	r28, 0x6D	; 109
    13c0:	d2 e0       	ldi	r29, 0x02	; 2
    13c2:	88 81       	ld	r24, Y
    13c4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    13ec:	8f 81       	ldd	r24, Y+7	; 0x07
    13ee:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    13f2:	88 85       	ldd	r24, Y+8	; 0x08
    13f4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    13f8:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    13fa:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <read_switches>:

void read_switches(void) { //reads switch data
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    1406:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
    140e:	c8 e6       	ldi	r28, 0x68	; 104
    1410:	d2 e0       	ldi	r29, 0x02	; 2
    1412:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
    141a:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
    1422:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
    142a:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <spi_shift_byte>
    1432:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    1434:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    1436:	28 81       	ld	r18, Y
    1438:	92 2f       	mov	r25, r18
    143a:	96 95       	lsr	r25
    143c:	ec e7       	ldi	r30, 0x7C	; 124
    143e:	f3 e0       	ldi	r31, 0x03	; 3
    1440:	30 81       	ld	r19, Z
    1442:	90 fb       	bst	r25, 0
    1444:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	49 2f       	mov	r20, r25
    144a:	42 95       	swap	r20
    144c:	4f 70       	andi	r20, 0x0F	; 15
    144e:	40 fb       	bst	r20, 0
    1450:	32 f9       	bld	r19, 2
    1452:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    1454:	e3 e6       	ldi	r30, 0x63	; 99
    1456:	f2 e0       	ldi	r31, 0x02	; 2
    1458:	30 81       	ld	r19, Z
    145a:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    145c:	32 27       	eor	r19, r18
    145e:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1460:	23 23       	and	r18, r19
    1462:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    1464:	31 81       	ldd	r19, Z+1	; 0x01
    1466:	29 81       	ldd	r18, Y+1	; 0x01
    1468:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    146a:	32 27       	eor	r19, r18
    146c:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    146e:	23 23       	and	r18, r19
    1470:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1472:	22 81       	ldd	r18, Z+2	; 0x02
    1474:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    1476:	29 27       	eor	r18, r25
    1478:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    147a:	92 23       	and	r25, r18
    147c:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    147e:	23 81       	ldd	r18, Z+3	; 0x03
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    1484:	29 27       	eor	r18, r25
    1486:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    1488:	92 23       	and	r25, r18
    148a:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    148c:	94 81       	ldd	r25, Z+4	; 0x04
    148e:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1490:	98 27       	eor	r25, r24
    1492:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    1494:	89 23       	and	r24, r25
    1496:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    14a2:	da 01       	movw	r26, r20
    14a4:	aa 0f       	add	r26, r26
    14a6:	bb 1f       	adc	r27, r27
    14a8:	a8 5e       	subi	r26, 0xE8	; 232
    14aa:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    14ac:	8c 91       	ld	r24, X
    14ae:	e8 2f       	mov	r30, r24
    14b0:	e6 95       	lsr	r30
    14b2:	e6 95       	lsr	r30
    14b4:	e6 95       	lsr	r30
    14b6:	e7 70       	andi	r30, 0x07	; 7
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	e8 59       	subi	r30, 0x98	; 152
    14bc:	fd 4f       	sbci	r31, 0xFD	; 253
    14be:	20 81       	ld	r18, Z
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	98 2f       	mov	r25, r24
    14c4:	97 70       	andi	r25, 0x07	; 7
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <parse_switch_data+0x2e>
    14c8:	35 95       	asr	r19
    14ca:	27 95       	ror	r18
    14cc:	9a 95       	dec	r25
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <parse_switch_data+0x2a>
    14d0:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    14d2:	86 fb       	bst	r24, 6
    14d4:	99 27       	eor	r25, r25
    14d6:	90 f9       	bld	r25, 0
    14d8:	29 27       	eor	r18, r25
    14da:	20 fb       	bst	r18, 0
    14dc:	86 f9       	bld	r24, 6
    14de:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    14e0:	4f 5f       	subi	r20, 0xFF	; 255
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	43 32       	cpi	r20, 0x23	; 35
    14e6:	51 05       	cpc	r21, r1
    14e8:	e1 f6       	brne	.-72     	; 0x14a2 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    14ea:	08 95       	ret

000014ec <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    14ec:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    14ee:	80 91 76 02 	lds	r24, 0x0276
    14f2:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    14f4:	89 27       	eor	r24, r25
    14f6:	80 93 76 02 	sts	0x0276, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    14fa:	89 23       	and	r24, r25
    14fc:	80 93 77 02 	sts	0x0277, r24
	uint8_t start_state = sequencer.START;
    1500:	ec e7       	ldi	r30, 0x7C	; 124
    1502:	f3 e0       	ldi	r31, 0x03	; 3
    1504:	90 81       	ld	r25, Z
    1506:	91 fb       	bst	r25, 1
    1508:	22 27       	eor	r18, r18
    150a:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    150c:	86 95       	lsr	r24
    150e:	82 27       	eor	r24, r18
    1510:	80 fb       	bst	r24, 0
    1512:	91 f9       	bld	r25, 1
    1514:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    1516:	91 ff       	sbrs	r25, 1
    1518:	54 c0       	rjmp	.+168    	; 0x15c2 <check_start_stop_tap+0xd6>
    151a:	21 11       	cpse	r18, r1
    151c:	40 c0       	rjmp	.+128    	; 0x159e <check_start_stop_tap+0xb2>
		
		sequencer.current_step = 0;
    151e:	ed e4       	ldi	r30, 0x4D	; 77
    1520:	f4 e0       	ldi	r31, 0x04	; 4
    1522:	80 81       	ld	r24, Z
    1524:	8f 71       	andi	r24, 0x1F	; 31
    1526:	80 83       	st	Z, r24
    1528:	81 81       	ldd	r24, Z+1	; 0x01
    152a:	8e 7f       	andi	r24, 0xFE	; 254
    152c:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
    152e:	80 91 7a 03 	lds	r24, 0x037A
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1532:	10 92 79 02 	sts	0x0279, r1
		
		flag.variation_change = 0;
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	8b 7f       	andi	r24, 0xFB	; 251
    153a:	80 93 7a 03 	sts	0x037A, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    153e:	80 91 4a 04 	lds	r24, 0x044A
    1542:	8d 7f       	andi	r24, 0xFD	; 253
    1544:	31 f4       	brne	.+12     	; 0x1552 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    1546:	e9 e4       	ldi	r30, 0x49	; 73
    1548:	f4 e0       	ldi	r31, 0x04	; 4
    154a:	80 81       	ld	r24, Z
    154c:	8e 7f       	andi	r24, 0xFE	; 254
    154e:	80 83       	st	Z, r24
    1550:	26 c0       	rjmp	.+76     	; 0x159e <check_start_stop_tap+0xb2>
		} else {
			
			sequencer.variation = VAR_B;
    1552:	e9 e4       	ldi	r30, 0x49	; 73
    1554:	f4 e0       	ldi	r31, 0x04	; 4
    1556:	80 81       	ld	r24, Z
    1558:	81 60       	ori	r24, 0x01	; 1
    155a:	80 83       	st	Z, r24
    155c:	20 c0       	rjmp	.+64     	; 0x159e <check_start_stop_tap+0xb2>
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		if (sequencer.part_playing == SECOND) { //reset part playing
    155e:	80 91 4e 04 	lds	r24, 0x044E
    1562:	81 ff       	sbrs	r24, 1
    1564:	0b c0       	rjmp	.+22     	; 0x157c <check_start_stop_tap+0x90>
			sequencer.part_playing = FIRST;
    1566:	ed e4       	ldi	r30, 0x4D	; 77
    1568:	f4 e0       	ldi	r31, 0x04	; 4
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	8d 7f       	andi	r24, 0xFD	; 253
    156e:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
    1570:	8b e2       	ldi	r24, 0x2B	; 43
    1572:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
			turn_on (FIRST_PART_LED);	
    1576:	8a e2       	ldi	r24, 0x2A	; 42
    1578:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
			
		}
		turn_off_all_inst_leds();
    157c:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1580:	80 91 51 04 	lds	r24, 0x0451
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	fc 01       	movw	r30, r24
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	e8 0f       	add	r30, r24
    158e:	f9 1f       	adc	r31, r25
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	e0 50       	subi	r30, 0x00	; 0
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	85 81       	ldd	r24, Z+5	; 0x05
    159a:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
		
	} 
	
	if ((sequencer.START && (current_start_stop_tap_state >> TAP) &1)) {
    159e:	80 91 7c 03 	lds	r24, 0x037C
    15a2:	81 ff       	sbrs	r24, 1
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <check_start_stop_tap+0xda>
    15a6:	80 91 77 02 	lds	r24, 0x0277
    15aa:	82 ff       	sbrs	r24, 2
    15ac:	0c c0       	rjmp	.+24     	; 0x15c6 <check_start_stop_tap+0xda>
		
		current_start_stop_tap_state ^= (1<<TAP); //toggle tap switch bit
    15ae:	94 e0       	ldi	r25, 0x04	; 4
    15b0:	89 27       	eor	r24, r25
    15b2:	80 93 77 02 	sts	0x0277, r24
		flag.tap = 1;
    15b6:	80 91 7a 03 	lds	r24, 0x037A
    15ba:	80 68       	ori	r24, 0x80	; 128
    15bc:	80 93 7a 03 	sts	0x037A, r24
    15c0:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    15c2:	21 30       	cpi	r18, 0x01	; 1
    15c4:	61 f2       	breq	.-104    	; 0x155e <check_start_stop_tap+0x72>
    15c6:	08 95       	ret

000015c8 <check_inst_switches>:
		
	}
	
}
	
void check_inst_switches(void) {
    15c8:	3f 92       	push	r3
    15ca:	4f 92       	push	r4
    15cc:	5f 92       	push	r5
    15ce:	6f 92       	push	r6
    15d0:	7f 92       	push	r7
    15d2:	8f 92       	push	r8
    15d4:	9f 92       	push	r9
    15d6:	af 92       	push	r10
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	0f 2e       	mov	r0, r31
    15ec:	f5 e0       	ldi	r31, 0x05	; 5
    15ee:	ef 2e       	mov	r14, r31
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	ff 2e       	mov	r15, r31
    15f4:	f0 2d       	mov	r31, r0
    15f6:	0f 2e       	mov	r0, r31
    15f8:	fb e3       	ldi	r31, 0x3B	; 59
    15fa:	8f 2e       	mov	r8, r31
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	9f 2e       	mov	r9, r31
    1600:	f0 2d       	mov	r31, r0
    1602:	02 e1       	ldi	r16, 0x12	; 18
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	c1 e1       	ldi	r28, 0x11	; 17
    1608:	d0 e0       	ldi	r29, 0x00	; 0
    160a:	c1 2c       	mov	r12, r1
    160c:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    160e:	0f 2e       	mov	r0, r31
    1610:	f1 e5       	ldi	r31, 0x51	; 81
    1612:	af 2e       	mov	r10, r31
    1614:	f4 e0       	ldi	r31, 0x04	; 4
    1616:	bf 2e       	mov	r11, r31
    1618:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    161a:	0f 2e       	mov	r0, r31
    161c:	ff e5       	ldi	r31, 0x5F	; 95
    161e:	4f 2e       	mov	r4, r31
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	5f 2e       	mov	r5, r31
    1624:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    1626:	0f 2e       	mov	r0, r31
    1628:	ff e0       	ldi	r31, 0x0F	; 15
    162a:	3f 2e       	mov	r3, r31
    162c:	f0 2d       	mov	r31, r0
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <check_inst_switches+0x80>
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	c8 1a       	sub	r12, r24
    1634:	d8 0a       	sbc	r13, r24
    1636:	21 96       	adiw	r28, 0x01	; 1
    1638:	0f 5f       	subi	r16, 0xFF	; 255
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	a6 e0       	ldi	r26, 0x06	; 6
    163e:	ea 0e       	add	r14, r26
    1640:	f1 1c       	adc	r15, r1
    1642:	b6 e0       	ldi	r27, 0x06	; 6
    1644:	8b 0e       	add	r8, r27
    1646:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    1648:	fe 01       	movw	r30, r28
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	e8 5e       	subi	r30, 0xE8	; 232
    1650:	fd 4f       	sbci	r31, 0xFD	; 253
    1652:	80 81       	ld	r24, Z
    1654:	86 ff       	sbrs	r24, 6
    1656:	37 c0       	rjmp	.+110    	; 0x16c6 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1658:	fe 01       	movw	r30, r28
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	e8 5e       	subi	r30, 0xE8	; 232
    1660:	fd 4f       	sbci	r31, 0xFD	; 253
    1662:	8f 7b       	andi	r24, 0xBF	; 191
    1664:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    1666:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
    166a:	f7 01       	movw	r30, r14
    166c:	d7 01       	movw	r26, r14
    166e:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1670:	8c 91       	ld	r24, X
    1672:	8f 3f       	cpi	r24, 0xFF	; 255
    1674:	a9 f0       	breq	.+42     	; 0x16a0 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1676:	d5 01       	movw	r26, r10
    1678:	8c 91       	ld	r24, X
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	c8 16       	cp	r12, r24
    167e:	d9 06       	cpc	r13, r25
    1680:	49 f4       	brne	.+18     	; 0x1694 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1682:	f4 01       	movw	r30, r8
    1684:	80 81       	ld	r24, Z
    1686:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
    168a:	89 e0       	ldi	r24, 0x09	; 9
    168c:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    168e:	d5 01       	movw	r26, r10
    1690:	8c 93       	st	X, r24
    1692:	19 c0       	rjmp	.+50     	; 0x16c6 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1694:	80 81       	ld	r24, Z
    1696:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    169a:	f5 01       	movw	r30, r10
    169c:	c0 82       	st	Z, r12
    169e:	13 c0       	rjmp	.+38     	; 0x16c6 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    16a0:	d5 01       	movw	r26, r10
    16a2:	8c 91       	ld	r24, X
    16a4:	86 30       	cpi	r24, 0x06	; 6
    16a6:	51 f4       	brne	.+20     	; 0x16bc <check_inst_switches+0xf4>
    16a8:	c7 31       	cpi	r28, 0x17	; 23
    16aa:	d1 05       	cpc	r29, r1
    16ac:	39 f4       	brne	.+14     	; 0x16bc <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    16ae:	f2 01       	movw	r30, r4
    16b0:	80 81       	ld	r24, Z
    16b2:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					sequencer.current_inst = MA;
    16b6:	d5 01       	movw	r26, r10
    16b8:	3c 92       	st	X, r3
    16ba:	ba cf       	rjmp	.-140    	; 0x1630 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    16bc:	80 81       	ld	r24, Z
    16be:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    16c2:	f5 01       	movw	r30, r10
    16c4:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    16c6:	0c 31       	cpi	r16, 0x1C	; 28
    16c8:	11 05       	cpc	r17, r1
    16ca:	0c f4       	brge	.+2      	; 0x16ce <check_inst_switches+0x106>
    16cc:	b1 cf       	rjmp	.-158    	; 0x1630 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    16ce:	80 91 38 02 	lds	r24, 0x0238
    16d2:	86 ff       	sbrs	r24, 6
    16d4:	0c c0       	rjmp	.+24     	; 0x16ee <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    16d6:	e8 e3       	ldi	r30, 0x38	; 56
    16d8:	f2 e0       	ldi	r31, 0x02	; 2
    16da:	8f 7b       	andi	r24, 0xBF	; 191
    16dc:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    16de:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    16e2:	84 e1       	ldi	r24, 0x14	; 20
    16e4:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
		sequencer.current_inst = AC;
    16e8:	80 e1       	ldi	r24, 0x10	; 16
    16ea:	80 93 51 04 	sts	0x0451, r24
	}
	
}	
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	bf 90       	pop	r11
    1700:	af 90       	pop	r10
    1702:	9f 90       	pop	r9
    1704:	8f 90       	pop	r8
    1706:	7f 90       	pop	r7
    1708:	6f 90       	pop	r6
    170a:	5f 90       	pop	r5
    170c:	4f 90       	pop	r4
    170e:	3f 90       	pop	r3
    1710:	08 95       	ret

00001712 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    1712:	80 91 54 02 	lds	r24, 0x0254
    1716:	86 ff       	sbrs	r24, 6
    1718:	29 c0       	rjmp	.+82     	; 0x176c <check_variation_switches+0x5a>
    171a:	90 91 7c 03 	lds	r25, 0x037C
    171e:	90 fd       	sbrc	r25, 0
    1720:	25 c0       	rjmp	.+74     	; 0x176c <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    1722:	e4 e5       	ldi	r30, 0x54	; 84
    1724:	f2 e0       	ldi	r31, 0x02	; 2
    1726:	8f 7b       	andi	r24, 0xBF	; 191
    1728:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    172a:	ea e4       	ldi	r30, 0x4A	; 74
    172c:	f4 e0       	ldi	r31, 0x04	; 4
    172e:	80 81       	ld	r24, Z
    1730:	8f 5f       	subi	r24, 0xFF	; 255
    1732:	80 83       	st	Z, r24
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	29 f4       	brne	.+10     	; 0x1742 <check_variation_switches+0x30>
    1738:	10 92 4a 04 	sts	0x044A, r1
		if (sequencer.START) {
    173c:	91 ff       	sbrs	r25, 1
    173e:	0b c0       	rjmp	.+22     	; 0x1756 <check_variation_switches+0x44>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <check_variation_switches+0x34>
    1742:	91 ff       	sbrs	r25, 1
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    1746:	80 91 7a 03 	lds	r24, 0x037A
    174a:	84 60       	ori	r24, 0x04	; 4
    174c:	80 93 7a 03 	sts	0x037A, r24
    1750:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	31 f4       	brne	.+12     	; 0x1762 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1756:	e9 e4       	ldi	r30, 0x49	; 73
    1758:	f4 e0       	ldi	r31, 0x04	; 4
    175a:	80 81       	ld	r24, Z
    175c:	8e 7f       	andi	r24, 0xFE	; 254
    175e:	80 83       	st	Z, r24
    1760:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1762:	e9 e4       	ldi	r30, 0x49	; 73
    1764:	f4 e0       	ldi	r31, 0x04	; 4
    1766:	80 81       	ld	r24, Z
    1768:	81 60       	ori	r24, 0x01	; 1
    176a:	80 83       	st	Z, r24
    176c:	08 95       	ret

0000176e <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    177a:	80 91 7c 03 	lds	r24, 0x037C
    177e:	86 70       	andi	r24, 0x06	; 6
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	09 f0       	breq	.+2      	; 0x1786 <check_clear_switch+0x18>
    1784:	43 c0       	rjmp	.+134    	; 0x180c <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    1786:	80 91 7b 03 	lds	r24, 0x037B
    178a:	81 11       	cpse	r24, r1
    178c:	46 c0       	rjmp	.+140    	; 0x181a <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    178e:	8c e1       	ldi	r24, 0x1C	; 28
    1790:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1794:	e9 e4       	ldi	r30, 0x49	; 73
    1796:	f4 e0       	ldi	r31, 0x04	; 4
    1798:	80 81       	ld	r24, Z
    179a:	80 fb       	bst	r24, 0
    179c:	ee 24       	eor	r14, r14
    179e:	e0 f8       	bld	r14, 0
    17a0:	f1 2c       	mov	r15, r1
    17a2:	26 e6       	ldi	r18, 0x66	; 102
    17a4:	2e 9d       	mul	r18, r14
    17a6:	d0 01       	movw	r26, r0
    17a8:	2f 9d       	mul	r18, r15
    17aa:	b0 0d       	add	r27, r0
    17ac:	11 24       	eor	r1, r1
    17ae:	a3 58       	subi	r26, 0x83	; 131
    17b0:	bc 4f       	sbci	r27, 0xFC	; 252
    17b2:	80 e4       	ldi	r24, 0x40	; 64
    17b4:	ed 01       	movw	r28, r26
    17b6:	19 92       	st	Y+, r1
    17b8:	8a 95       	dec	r24
    17ba:	e9 f7       	brne	.-6      	; 0x17b6 <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    17bc:	80 81       	ld	r24, Z
    17be:	08 2f       	mov	r16, r24
    17c0:	01 70       	andi	r16, 0x01	; 1
    17c2:	10 e0       	ldi	r17, 0x00	; 0
    17c4:	20 9f       	mul	r18, r16
    17c6:	d0 01       	movw	r26, r0
    17c8:	21 9f       	mul	r18, r17
    17ca:	b0 0d       	add	r27, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	af 53       	subi	r26, 0x3F	; 63
    17d0:	bc 4f       	sbci	r27, 0xFC	; 252
    17d2:	82 e2       	ldi	r24, 0x22	; 34
    17d4:	ed 01       	movw	r28, r26
    17d6:	19 92       	st	Y+, r1
    17d8:	8a 95       	dec	r24
    17da:	e9 f7       	brne	.-6      	; 0x17d6 <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    17dc:	80 81       	ld	r24, Z
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	c8 2f       	mov	r28, r24
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	d8 2f       	mov	r29, r24
    17e6:	2c 9f       	mul	r18, r28
    17e8:	c0 01       	movw	r24, r0
    17ea:	2d 9f       	mul	r18, r29
    17ec:	90 0d       	add	r25, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	85 58       	subi	r24, 0x85	; 133
    17f2:	9c 4f       	sbci	r25, 0xFC	; 252
    17f4:	fc 01       	movw	r30, r24
    17f6:	ee 5b       	subi	r30, 0xBE	; 190
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    17fe:	32 96       	adiw	r30, 0x02	; 2
    1800:	11 82       	std	Z+1, r1	; 0x01
    1802:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    1804:	80 e1       	ldi	r24, 0x10	; 16
    1806:	80 93 4c 04 	sts	0x044C, r24
				break;
    180a:	07 c0       	rjmp	.+14     	; 0x181a <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    180c:	80 91 7b 03 	lds	r24, 0x037B
    1810:	81 11       	cpse	r24, r1
    1812:	03 c0       	rjmp	.+6      	; 0x181a <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    1814:	8c e1       	ldi	r24, 0x1C	; 28
    1816:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
		}
		
	}
	
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	08 95       	ret

00001828 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1828:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    182a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    182c:	74 83       	std	Z+4, r23	; 0x04
    182e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1830:	11 82       	std	Z+1, r1	; 0x01
    1832:	10 82       	st	Z, r1
    1834:	08 95       	ret

00001836 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1844:	0e 94 94 0c 	call	0x1928	; 0x1928 <store_and_clear_interrupt>
    1848:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    184a:	f9 80       	ldd	r15, Y+1	; 0x01
    184c:	4f 2d       	mov	r20, r15
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	ca 01       	movw	r24, r20
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	2a 81       	ldd	r18, Y+2	; 0x02
    1856:	62 2f       	mov	r22, r18
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
    185e:	28 81       	ld	r18, Y
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	82 17       	cp	r24, r18
    1864:	93 07       	cpc	r25, r19
    1866:	29 f4       	brne	.+10     	; 0x1872 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1868:	81 2f       	mov	r24, r17
    186a:	0e 94 97 0c 	call	0x192e	; 0x192e <restore_interrupt_setting>
      return false;
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	12 c0       	rjmp	.+36     	; 0x1896 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1872:	eb 81       	ldd	r30, Y+3	; 0x03
    1874:	fc 81       	ldd	r31, Y+4	; 0x04
    1876:	ef 0d       	add	r30, r15
    1878:	f1 1d       	adc	r31, r1
    187a:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    187c:	29 81       	ldd	r18, Y+1	; 0x01
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	c9 01       	movw	r24, r18
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	6a 81       	ldd	r22, Y+2	; 0x02
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
    188c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    188e:	81 2f       	mov	r24, r17
    1890:	0e 94 97 0c 	call	0x192e	; 0x192e <restore_interrupt_setting>
      return true;
    1894:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	08 95       	ret

000018a2 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    18a8:	0e 94 94 0c 	call	0x1928	; 0x1928 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    18ac:	39 81       	ldd	r19, Y+1	; 0x01
    18ae:	28 81       	ld	r18, Y
    18b0:	32 17       	cp	r19, r18
    18b2:	18 f0       	brcs	.+6      	; 0x18ba <bytequeue_length+0x18>
      len = queue->end - queue->start;
    18b4:	c3 2f       	mov	r28, r19
    18b6:	c2 1b       	sub	r28, r18
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <bytequeue_length+0x20>
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	c3 2f       	mov	r28, r19
    18be:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    18c0:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    18c2:	0e 94 97 0c 	call	0x192e	; 0x192e <restore_interrupt_setting>
   return len;
}
    18c6:	8c 2f       	mov	r24, r28
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    18ce:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    18d0:	80 81       	ld	r24, Z
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	9b 01       	movw	r18, r22
    18d6:	28 0f       	add	r18, r24
    18d8:	31 1d       	adc	r19, r1
    18da:	c9 01       	movw	r24, r18
    18dc:	62 81       	ldd	r22, Z+2	; 0x02
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
    18e4:	03 80       	ldd	r0, Z+3	; 0x03
    18e6:	f4 81       	ldd	r31, Z+4	; 0x04
    18e8:	e0 2d       	mov	r30, r0
    18ea:	e8 0f       	add	r30, r24
    18ec:	f9 1f       	adc	r31, r25
}
    18ee:	80 81       	ld	r24, Z
    18f0:	08 95       	ret

000018f2 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
    18fa:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    18fc:	0e 94 94 0c 	call	0x1928	; 0x1928 <store_and_clear_interrupt>
    1900:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1902:	88 81       	ld	r24, Y
    1904:	21 2f       	mov	r18, r17
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	b9 01       	movw	r22, r18
    190a:	68 0f       	add	r22, r24
    190c:	71 1d       	adc	r23, r1
    190e:	cb 01       	movw	r24, r22
    1910:	6a 81       	ldd	r22, Y+2	; 0x02
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
    1918:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    191a:	84 2f       	mov	r24, r20
    191c:	0e 94 97 0c 	call	0x192e	; 0x192e <restore_interrupt_setting>
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	08 95       	ret

00001928 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1928:	8f b7       	in	r24, 0x3f	; 63
   cli();
    192a:	f8 94       	cli
   return sreg;
}
    192c:	08 95       	ret

0000192e <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    192e:	8f bf       	out	0x3f, r24	; 63
    1930:	08 95       	ret

00001932 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1932:	88 1f       	adc	r24, r24
    1934:	88 27       	eor	r24, r24
    1936:	88 1f       	adc	r24, r24
    1938:	08 95       	ret

0000193a <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	88 3f       	cpi	r24, 0xF8	; 248
    193e:	08 f4       	brcc	.+2      	; 0x1942 <midi_is_realtime+0x8>
    1940:	90 e0       	ldi	r25, 0x00	; 0
}
    1942:	89 2f       	mov	r24, r25
    1944:	08 95       	ret

00001946 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1946:	98 2f       	mov	r25, r24
    1948:	90 7f       	andi	r25, 0xF0	; 240
    194a:	90 3c       	cpi	r25, 0xC0	; 192
    194c:	b1 f0       	breq	.+44     	; 0x197a <midi_packet_length+0x34>
    194e:	58 f4       	brcc	.+22     	; 0x1966 <midi_packet_length+0x20>
    1950:	90 39       	cpi	r25, 0x90	; 144
    1952:	41 f1       	breq	.+80     	; 0x19a4 <midi_packet_length+0x5e>
    1954:	18 f4       	brcc	.+6      	; 0x195c <midi_packet_length+0x16>
    1956:	90 38       	cpi	r25, 0x80	; 128
    1958:	19 f5       	brne	.+70     	; 0x19a0 <midi_packet_length+0x5a>
    195a:	24 c0       	rjmp	.+72     	; 0x19a4 <midi_packet_length+0x5e>
    195c:	90 3a       	cpi	r25, 0xA0	; 160
    195e:	11 f1       	breq	.+68     	; 0x19a4 <midi_packet_length+0x5e>
    1960:	90 3b       	cpi	r25, 0xB0	; 176
    1962:	f1 f4       	brne	.+60     	; 0x19a0 <midi_packet_length+0x5a>
    1964:	1f c0       	rjmp	.+62     	; 0x19a4 <midi_packet_length+0x5e>
    1966:	90 3e       	cpi	r25, 0xE0	; 224
    1968:	e9 f0       	breq	.+58     	; 0x19a4 <midi_packet_length+0x5e>
    196a:	18 f4       	brcc	.+6      	; 0x1972 <midi_packet_length+0x2c>
    196c:	90 3d       	cpi	r25, 0xD0	; 208
    196e:	29 f0       	breq	.+10     	; 0x197a <midi_packet_length+0x34>
    1970:	17 c0       	rjmp	.+46     	; 0x19a0 <midi_packet_length+0x5a>
    1972:	90 3f       	cpi	r25, 0xF0	; 240
    1974:	21 f0       	breq	.+8      	; 0x197e <midi_packet_length+0x38>
    1976:	93 3f       	cpi	r25, 0xF3	; 243
    1978:	99 f4       	brne	.+38     	; 0x19a0 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	08 95       	ret
      case 0xF0:
         switch(status) {
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	fc 01       	movw	r30, r24
    1982:	e1 5f       	subi	r30, 0xF1	; 241
    1984:	f1 09       	sbc	r31, r1
    1986:	ef 30       	cpi	r30, 0x0F	; 15
    1988:	f1 05       	cpc	r31, r1
    198a:	40 f4       	brcc	.+16     	; 0x199c <midi_packet_length+0x56>
    198c:	e6 5a       	subi	r30, 0xA6	; 166
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1994:	83 e0       	ldi	r24, 0x03	; 3
    1996:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	08 95       	ret
         }
      default:
         return UNDEFINED;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    19aa:	08 95       	ret

000019ac <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    19ac:	fc 01       	movw	r30, r24
    19ae:	75 83       	std	Z+5, r23	; 0x05
    19b0:	64 83       	std	Z+4, r22	; 0x04
    19b2:	08 95       	ret

000019b4 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    19b4:	fc 01       	movw	r30, r24
    19b6:	77 83       	std	Z+7, r23	; 0x07
    19b8:	66 83       	std	Z+6, r22	; 0x06
    19ba:	08 95       	ret

000019bc <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    19bc:	fc 01       	movw	r30, r24
    19be:	77 8b       	std	Z+23, r23	; 0x17
    19c0:	66 8b       	std	Z+22, r22	; 0x16
    19c2:	08 95       	ret

000019c4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    19ca:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    19cc:	1f a2       	std	Y+39, r1	; 0x27
    19ce:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    19d0:	bc 01       	movw	r22, r24
    19d2:	68 5d       	subi	r22, 0xD8	; 216
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	40 ec       	ldi	r20, 0xC0	; 192
    19d8:	88 51       	subi	r24, 0x18	; 24
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	0e 94 14 0c 	call	0x1828	; 0x1828 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    19e0:	1b 82       	std	Y+3, r1	; 0x03
    19e2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    19e4:	1d 82       	std	Y+5, r1	; 0x05
    19e6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    19e8:	1f 82       	std	Y+7, r1	; 0x07
    19ea:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    19ec:	19 86       	std	Y+9, r1	; 0x09
    19ee:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    19f0:	1b 86       	std	Y+11, r1	; 0x0b
    19f2:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    19f4:	1d 86       	std	Y+13, r1	; 0x0d
    19f6:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    19f8:	1f 86       	std	Y+15, r1	; 0x0f
    19fa:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    19fc:	19 8a       	std	Y+17, r1	; 0x11
    19fe:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1a00:	1b 8a       	std	Y+19, r1	; 0x13
    1a02:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1a04:	1d 8a       	std	Y+21, r1	; 0x15
    1a06:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1a08:	1f 8a       	std	Y+23, r1	; 0x17
    1a0a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1a0c:	19 8e       	std	Y+25, r1	; 0x19
    1a0e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1a10:	1b 8e       	std	Y+27, r1	; 0x1b
    1a12:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1a14:	1d 8e       	std	Y+29, r1	; 0x1d
    1a16:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1a18:	1f 8e       	std	Y+31, r1	; 0x1f
    1a1a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1a1c:	19 a2       	std	Y+33, r1	; 0x21
    1a1e:	18 a2       	std	Y+32, r1	; 0x20
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1a32:	66 23       	and	r22, r22
    1a34:	99 f0       	breq	.+38     	; 0x1a5c <midi_device_input+0x36>
    1a36:	ea 01       	movw	r28, r20
    1a38:	61 50       	subi	r22, 0x01	; 1
    1a3a:	06 2f       	mov	r16, r22
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	0f 5f       	subi	r16, 0xFF	; 255
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	04 0f       	add	r16, r20
    1a44:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1a46:	7c 01       	movw	r14, r24
    1a48:	28 ee       	ldi	r18, 0xE8	; 232
    1a4a:	e2 0e       	add	r14, r18
    1a4c:	f1 1c       	adc	r15, r1
    1a4e:	69 91       	ld	r22, Y+
    1a50:	c7 01       	movw	r24, r14
    1a52:	0e 94 1b 0c 	call	0x1836	; 0x1836 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1a56:	c0 17       	cp	r28, r16
    1a58:	d1 07       	cpc	r29, r17
    1a5a:	c9 f7       	brne	.-14     	; 0x1a4e <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	08 95       	ret

00001a6a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <midi_input_callbacks+0x16>
    1a80:	1f 92       	push	r1
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	7c 01       	movw	r14, r24
    1a88:	6b 01       	movw	r12, r22
    1a8a:	14 2f       	mov	r17, r20
    1a8c:	b2 2e       	mov	r11, r18
    1a8e:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1a90:	dc 01       	movw	r26, r24
    1a92:	95 96       	adiw	r26, 0x25	; 37
    1a94:	8c 91       	ld	r24, X
    1a96:	95 97       	sbiw	r26, 0x25	; 37
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	11 f5       	brne	.+68     	; 0x1ae0 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1a9c:	5a 96       	adiw	r26, 0x1a	; 26
    1a9e:	ed 91       	ld	r30, X+
    1aa0:	fc 91       	ld	r31, X
    1aa2:	5b 97       	sbiw	r26, 0x1b	; 27
    1aa4:	30 97       	sbiw	r30, 0x00	; 0
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <midi_input_callbacks+0x40>
    1aa8:	cc c0       	rjmp	.+408    	; 0x1c42 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1aaa:	9b 01       	movw	r18, r22
    1aac:	21 50       	subi	r18, 0x01	; 1
    1aae:	31 09       	sbc	r19, r1
    1ab0:	ab ea       	ldi	r26, 0xAB	; 171
    1ab2:	ba ea       	ldi	r27, 0xAA	; 170
    1ab4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__umulhisi3>
    1ab8:	96 95       	lsr	r25
    1aba:	87 95       	ror	r24
    1abc:	9c 01       	movw	r18, r24
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	82 0f       	add	r24, r18
    1ac4:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1ac6:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1ac8:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1aca:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1acc:	4c 2d       	mov	r20, r12
    1ace:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	2f 5f       	subi	r18, 0xFF	; 255
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	68 2f       	mov	r22, r24
    1ad8:	79 2f       	mov	r23, r25
    1ada:	c7 01       	movw	r24, r14
    1adc:	09 95       	icall
    1ade:	be c0       	rjmp	.+380    	; 0x1c5c <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1ae0:	62 30       	cpi	r22, 0x02	; 2
    1ae2:	71 05       	cpc	r23, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <midi_input_callbacks+0x7e>
    1ae6:	55 c0       	rjmp	.+170    	; 0x1b92 <midi_input_callbacks+0x128>
    1ae8:	63 30       	cpi	r22, 0x03	; 3
    1aea:	71 05       	cpc	r23, r1
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <midi_input_callbacks+0x8e>
    1aee:	61 30       	cpi	r22, 0x01	; 1
    1af0:	71 05       	cpc	r23, r1
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <midi_input_callbacks+0x8c>
    1af4:	a1 c0       	rjmp	.+322    	; 0x1c38 <midi_input_callbacks+0x1ce>
    1af6:	88 c0       	rjmp	.+272    	; 0x1c08 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1af8:	84 2f       	mov	r24, r20
    1afa:	80 7f       	andi	r24, 0xF0	; 240
    1afc:	80 3a       	cpi	r24, 0xA0	; 160
    1afe:	f1 f0       	breq	.+60     	; 0x1b3c <midi_input_callbacks+0xd2>
    1b00:	28 f4       	brcc	.+10     	; 0x1b0c <midi_input_callbacks+0xa2>
    1b02:	80 38       	cpi	r24, 0x80	; 128
    1b04:	a9 f0       	breq	.+42     	; 0x1b30 <midi_input_callbacks+0xc6>
    1b06:	80 39       	cpi	r24, 0x90	; 144
    1b08:	69 f0       	breq	.+26     	; 0x1b24 <midi_input_callbacks+0xba>
    1b0a:	2f c0       	rjmp	.+94     	; 0x1b6a <midi_input_callbacks+0x100>
    1b0c:	80 3e       	cpi	r24, 0xE0	; 224
    1b0e:	e1 f0       	breq	.+56     	; 0x1b48 <midi_input_callbacks+0xde>
    1b10:	80 3f       	cpi	r24, 0xF0	; 240
    1b12:	01 f1       	breq	.+64     	; 0x1b54 <midi_input_callbacks+0xea>
    1b14:	80 3b       	cpi	r24, 0xB0	; 176
    1b16:	49 f5       	brne	.+82     	; 0x1b6a <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    1b18:	d7 01       	movw	r26, r14
    1b1a:	12 96       	adiw	r26, 0x02	; 2
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    1b20:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1b22:	25 c0       	rjmp	.+74     	; 0x1b6e <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1b24:	d7 01       	movw	r26, r14
    1b26:	14 96       	adiw	r26, 0x04	; 4
    1b28:	ed 91       	ld	r30, X+
    1b2a:	fc 91       	ld	r31, X
    1b2c:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1b2e:	1f c0       	rjmp	.+62     	; 0x1b6e <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1b30:	d7 01       	movw	r26, r14
    1b32:	16 96       	adiw	r26, 0x06	; 6
    1b34:	ed 91       	ld	r30, X+
    1b36:	fc 91       	ld	r31, X
    1b38:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1b3a:	19 c0       	rjmp	.+50     	; 0x1b6e <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1b3c:	d7 01       	movw	r26, r14
    1b3e:	18 96       	adiw	r26, 0x08	; 8
    1b40:	ed 91       	ld	r30, X+
    1b42:	fc 91       	ld	r31, X
    1b44:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1b46:	13 c0       	rjmp	.+38     	; 0x1b6e <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1b48:	d7 01       	movw	r26, r14
    1b4a:	1a 96       	adiw	r26, 0x0a	; 10
    1b4c:	ed 91       	ld	r30, X+
    1b4e:	fc 91       	ld	r31, X
    1b50:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1b52:	0d c0       	rjmp	.+26     	; 0x1b6e <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1b54:	42 3f       	cpi	r20, 0xF2	; 242
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <midi_input_callbacks+0xf0>
    1b58:	74 c0       	rjmp	.+232    	; 0x1c42 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1b5a:	d7 01       	movw	r26, r14
    1b5c:	1c 96       	adiw	r26, 0x0c	; 12
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1b64:	30 97       	sbiw	r30, 0x00	; 0
    1b66:	41 f4       	brne	.+16     	; 0x1b78 <midi_input_callbacks+0x10e>
    1b68:	6c c0       	rjmp	.+216    	; 0x1c42 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1b6a:	e0 e0       	ldi	r30, 0x00	; 0
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1b6e:	30 97       	sbiw	r30, 0x00	; 0
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <midi_input_callbacks+0x10a>
    1b72:	67 c0       	rjmp	.+206    	; 0x1c42 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1b74:	12 3f       	cpi	r17, 0xF2	; 242
    1b76:	31 f4       	brne	.+12     	; 0x1b84 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1b78:	2a 2d       	mov	r18, r10
    1b7a:	4b 2d       	mov	r20, r11
    1b7c:	62 ef       	ldi	r22, 0xF2	; 242
    1b7e:	c7 01       	movw	r24, r14
    1b80:	09 95       	icall
    1b82:	6c c0       	rjmp	.+216    	; 0x1c5c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1b84:	2a 2d       	mov	r18, r10
    1b86:	4b 2d       	mov	r20, r11
    1b88:	61 2f       	mov	r22, r17
    1b8a:	6f 70       	andi	r22, 0x0F	; 15
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	09 95       	icall
    1b90:	65 c0       	rjmp	.+202    	; 0x1c5c <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1b92:	84 2f       	mov	r24, r20
    1b94:	80 7f       	andi	r24, 0xF0	; 240
    1b96:	80 3d       	cpi	r24, 0xD0	; 208
    1b98:	51 f0       	breq	.+20     	; 0x1bae <midi_input_callbacks+0x144>
    1b9a:	80 3f       	cpi	r24, 0xF0	; 240
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <midi_input_callbacks+0x150>
    1b9e:	80 3c       	cpi	r24, 0xC0	; 192
    1ba0:	01 f5       	brne	.+64     	; 0x1be2 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1ba2:	d7 01       	movw	r26, r14
    1ba4:	1e 96       	adiw	r26, 0x0e	; 14
    1ba6:	ed 91       	ld	r30, X+
    1ba8:	fc 91       	ld	r31, X
    1baa:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1bac:	1c c0       	rjmp	.+56     	; 0x1be6 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1bae:	d7 01       	movw	r26, r14
    1bb0:	50 96       	adiw	r26, 0x10	; 16
    1bb2:	ed 91       	ld	r30, X+
    1bb4:	fc 91       	ld	r31, X
    1bb6:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1bba:	43 3f       	cpi	r20, 0xF3	; 243
    1bbc:	41 f4       	brne	.+16     	; 0x1bce <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1bbe:	d7 01       	movw	r26, r14
    1bc0:	52 96       	adiw	r26, 0x12	; 18
    1bc2:	ed 91       	ld	r30, X+
    1bc4:	fc 91       	ld	r31, X
    1bc6:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1bc8:	30 97       	sbiw	r30, 0x00	; 0
    1bca:	99 f4       	brne	.+38     	; 0x1bf2 <midi_input_callbacks+0x188>
    1bcc:	3a c0       	rjmp	.+116    	; 0x1c42 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1bce:	41 3f       	cpi	r20, 0xF1	; 241
    1bd0:	c1 f5       	brne	.+112    	; 0x1c42 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1bd2:	d7 01       	movw	r26, r14
    1bd4:	54 96       	adiw	r26, 0x14	; 20
    1bd6:	ed 91       	ld	r30, X+
    1bd8:	fc 91       	ld	r31, X
    1bda:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1bdc:	30 97       	sbiw	r30, 0x00	; 0
    1bde:	49 f4       	brne	.+18     	; 0x1bf2 <midi_input_callbacks+0x188>
    1be0:	30 c0       	rjmp	.+96     	; 0x1c42 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1be2:	e0 e0       	ldi	r30, 0x00	; 0
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1be6:	30 97       	sbiw	r30, 0x00	; 0
    1be8:	61 f1       	breq	.+88     	; 0x1c42 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1bea:	81 2f       	mov	r24, r17
    1bec:	8d 7f       	andi	r24, 0xFD	; 253
    1bee:	81 3f       	cpi	r24, 0xF1	; 241
    1bf0:	29 f4       	brne	.+10     	; 0x1bfc <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1bf2:	4b 2d       	mov	r20, r11
    1bf4:	61 2f       	mov	r22, r17
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	09 95       	icall
    1bfa:	30 c0       	rjmp	.+96     	; 0x1c5c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1bfc:	4b 2d       	mov	r20, r11
    1bfe:	61 2f       	mov	r22, r17
    1c00:	6f 70       	andi	r22, 0x0F	; 15
    1c02:	c7 01       	movw	r24, r14
    1c04:	09 95       	icall
    1c06:	2a c0       	rjmp	.+84     	; 0x1c5c <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1c08:	84 2f       	mov	r24, r20
    1c0a:	0e 94 9d 0c 	call	0x193a	; 0x193a <midi_is_realtime>
    1c0e:	88 23       	and	r24, r24
    1c10:	31 f0       	breq	.+12     	; 0x1c1e <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1c12:	d7 01       	movw	r26, r14
    1c14:	56 96       	adiw	r26, 0x16	; 22
    1c16:	ed 91       	ld	r30, X+
    1c18:	fc 91       	ld	r31, X
    1c1a:	57 97       	sbiw	r26, 0x17	; 23
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1c1e:	16 3f       	cpi	r17, 0xF6	; 246
    1c20:	81 f4       	brne	.+32     	; 0x1c42 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1c22:	d7 01       	movw	r26, r14
    1c24:	58 96       	adiw	r26, 0x18	; 24
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1c2c:	30 97       	sbiw	r30, 0x00	; 0
    1c2e:	49 f0       	breq	.+18     	; 0x1c42 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1c30:	61 2f       	mov	r22, r17
    1c32:	c7 01       	movw	r24, r14
    1c34:	09 95       	icall
    1c36:	12 c0       	rjmp	.+36     	; 0x1c5c <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1c38:	64 30       	cpi	r22, 0x04	; 4
    1c3a:	71 05       	cpc	r23, r1
    1c3c:	10 f0       	brcs	.+4      	; 0x1c42 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1c3e:	c1 2c       	mov	r12, r1
    1c40:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1c42:	d7 01       	movw	r26, r14
    1c44:	5c 96       	adiw	r26, 0x1c	; 28
    1c46:	ed 91       	ld	r30, X+
    1c48:	fc 91       	ld	r31, X
    1c4a:	5d 97       	sbiw	r26, 0x1d	; 29
    1c4c:	30 97       	sbiw	r30, 0x00	; 0
    1c4e:	31 f0       	breq	.+12     	; 0x1c5c <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1c50:	0a 2d       	mov	r16, r10
    1c52:	2b 2d       	mov	r18, r11
    1c54:	41 2f       	mov	r20, r17
    1c56:	b6 01       	movw	r22, r12
    1c58:	c7 01       	movw	r24, r14
    1c5a:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1c5c:	d7 01       	movw	r26, r14
    1c5e:	5e 96       	adiw	r26, 0x1e	; 30
    1c60:	ed 91       	ld	r30, X+
    1c62:	fc 91       	ld	r31, X
    1c64:	5f 97       	sbiw	r26, 0x1f	; 31
    1c66:	30 97       	sbiw	r30, 0x00	; 0
    1c68:	31 f0       	breq	.+12     	; 0x1c76 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1c6a:	0a 2d       	mov	r16, r10
    1c6c:	2b 2d       	mov	r18, r11
    1c6e:	41 2f       	mov	r20, r17
    1c70:	b6 01       	movw	r22, r12
    1c72:	c7 01       	movw	r24, r14
    1c74:	09 95       	icall
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	af 90       	pop	r10
    1c90:	08 95       	ret

00001c92 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1ca0:	86 2f       	mov	r24, r22
    1ca2:	0e 94 9d 0c 	call	0x193a	; 0x193a <midi_is_realtime>
    1ca6:	88 23       	and	r24, r24
    1ca8:	69 f0       	breq	.+26     	; 0x1cc4 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1caa:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1cb0:	00 e0       	ldi	r16, 0x00	; 0
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	41 2f       	mov	r20, r17
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <midi_input_callbacks>
    device->input_state = state;
    1cc0:	fd a2       	std	Y+37, r15	; 0x25
    1cc2:	a4 c0       	rjmp	.+328    	; 0x1e0c <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1cc4:	81 2f       	mov	r24, r17
    1cc6:	0e 94 99 0c 	call	0x1932	; 0x1932 <midi_is_statusbyte>
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <midi_process_byte+0x3e>
    1cce:	5d c0       	rjmp	.+186    	; 0x1d8a <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd2:	84 30       	cpi	r24, 0x04	; 4
    1cd4:	29 f0       	breq	.+10     	; 0x1ce0 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1cd6:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9f a3       	std	Y+39, r25	; 0x27
    1cde:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1ce0:	81 2f       	mov	r24, r17
    1ce2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <midi_packet_length>
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <midi_process_byte+0x64>
    1cea:	b8 f0       	brcs	.+46     	; 0x1d1a <midi_process_byte+0x88>
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	79 f0       	breq	.+30     	; 0x1d0e <midi_process_byte+0x7c>
    1cf0:	83 30       	cpi	r24, 0x03	; 3
    1cf2:	81 f0       	breq	.+32     	; 0x1d14 <midi_process_byte+0x82>
    1cf4:	46 c0       	rjmp	.+140    	; 0x1d82 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1cfa:	00 e0       	ldi	r16, 0x00	; 0
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	41 2f       	mov	r20, r17
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <midi_input_callbacks>
        device->input_state = IDLE;
    1d0a:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1d0c:	7f c0       	rjmp	.+254    	; 0x1e0c <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1d12:	7c c0       	rjmp	.+248    	; 0x1e0c <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1d18:	79 c0       	rjmp	.+242    	; 0x1e0c <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1d1a:	10 3f       	cpi	r17, 0xF0	; 240
    1d1c:	19 f0       	breq	.+6      	; 0x1d24 <midi_process_byte+0x92>
    1d1e:	17 3f       	cpi	r17, 0xF7	; 247
    1d20:	51 f0       	breq	.+20     	; 0x1d36 <midi_process_byte+0xa4>
    1d22:	2b c0       	rjmp	.+86     	; 0x1d7a <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1d24:	84 e0       	ldi	r24, 0x04	; 4
    1d26:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1d28:	80 ef       	ldi	r24, 0xF0	; 240
    1d2a:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9f a3       	std	Y+39, r25	; 0x27
    1d32:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1d34:	6b c0       	rjmp	.+214    	; 0x1e0c <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1d36:	4e a1       	ldd	r20, Y+38	; 0x26
    1d38:	5f a1       	ldd	r21, Y+39	; 0x27
    1d3a:	9a 01       	movw	r18, r20
    1d3c:	ab ea       	ldi	r26, 0xAB	; 171
    1d3e:	ba ea       	ldi	r27, 0xAA	; 170
    1d40:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__umulhisi3>
    1d44:	96 95       	lsr	r25
    1d46:	87 95       	ror	r24
    1d48:	9c 01       	movw	r18, r24
    1d4a:	22 0f       	add	r18, r18
    1d4c:	33 1f       	adc	r19, r19
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	fa 01       	movw	r30, r20
    1d54:	e8 1b       	sub	r30, r24
    1d56:	f9 0b       	sbc	r31, r25
    1d58:	ec 0f       	add	r30, r28
    1d5a:	fd 1f       	adc	r31, r29
    1d5c:	87 ef       	ldi	r24, 0xF7	; 247
    1d5e:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1d60:	ba 01       	movw	r22, r20
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	7f a3       	std	Y+39, r23	; 0x27
    1d68:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1d6a:	0c a1       	ldd	r16, Y+36	; 0x24
    1d6c:	2b a1       	ldd	r18, Y+35	; 0x23
    1d6e:	4a a1       	ldd	r20, Y+34	; 0x22
    1d70:	ce 01       	movw	r24, r28
    1d72:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1d76:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1d78:	49 c0       	rjmp	.+146    	; 0x1e0c <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1d7a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1d7c:	1f a2       	std	Y+39, r1	; 0x27
    1d7e:	1e a2       	std	Y+38, r1	; 0x26
    1d80:	45 c0       	rjmp	.+138    	; 0x1e0c <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1d82:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1d84:	1f a2       	std	Y+39, r1	; 0x27
    1d86:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1d88:	41 c0       	rjmp	.+130    	; 0x1e0c <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1d8a:	ed a1       	ldd	r30, Y+37	; 0x25
    1d8c:	ee 23       	and	r30, r30
    1d8e:	f1 f1       	breq	.+124    	; 0x1e0c <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1d90:	4e a1       	ldd	r20, Y+38	; 0x26
    1d92:	5f a1       	ldd	r21, Y+39	; 0x27
    1d94:	9a 01       	movw	r18, r20
    1d96:	ab ea       	ldi	r26, 0xAB	; 171
    1d98:	ba ea       	ldi	r27, 0xAA	; 170
    1d9a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__umulhisi3>
    1d9e:	96 95       	lsr	r25
    1da0:	87 95       	ror	r24
    1da2:	9c 01       	movw	r18, r24
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	9a 01       	movw	r18, r20
    1dae:	28 1b       	sub	r18, r24
    1db0:	39 0b       	sbc	r19, r25
    1db2:	de 01       	movw	r26, r28
    1db4:	a2 0f       	add	r26, r18
    1db6:	b3 1f       	adc	r27, r19
    1db8:	92 96       	adiw	r26, 0x22	; 34
    1dba:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1dbc:	ba 01       	movw	r22, r20
    1dbe:	6f 5f       	subi	r22, 0xFF	; 255
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	7f a3       	std	Y+39, r23	; 0x27
    1dc4:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1dc6:	21 30       	cpi	r18, 0x01	; 1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	89 f0       	breq	.+34     	; 0x1dee <midi_process_byte+0x15c>
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	e9 f4       	brne	.+58     	; 0x1e0c <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1dd2:	0c a1       	ldd	r16, Y+36	; 0x24
    1dd4:	2b a1       	ldd	r18, Y+35	; 0x23
    1dd6:	4a a1       	ldd	r20, Y+34	; 0x22
    1dd8:	ce 01       	movw	r24, r28
    1dda:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1dde:	8d a1       	ldd	r24, Y+37	; 0x25
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	a1 f0       	breq	.+40     	; 0x1e0c <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9f a3       	std	Y+39, r25	; 0x27
    1dea:	8e a3       	std	Y+38, r24	; 0x26
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1dee:	e2 30       	cpi	r30, 0x02	; 2
    1df0:	69 f4       	brne	.+26     	; 0x1e0c <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1df2:	00 e0       	ldi	r16, 0x00	; 0
    1df4:	2b a1       	ldd	r18, Y+35	; 0x23
    1df6:	4a a1       	ldd	r20, Y+34	; 0x22
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1dfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1e00:	84 30       	cpi	r24, 0x04	; 4
    1e02:	21 f0       	breq	.+8      	; 0x1e0c <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9f a3       	std	Y+39, r25	; 0x27
    1e0a:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	08 95       	ret

00001e18 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	90 96       	adiw	r26, 0x20	; 32
    1e2e:	ed 91       	ld	r30, X+
    1e30:	fc 91       	ld	r31, X
    1e32:	91 97       	sbiw	r26, 0x21	; 33
    1e34:	30 97       	sbiw	r30, 0x00	; 0
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1e38:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1e3a:	86 01       	movw	r16, r12
    1e3c:	08 51       	subi	r16, 0x18	; 24
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	c8 01       	movw	r24, r16
    1e42:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1e46:	e8 2e       	mov	r14, r24
    1e48:	f1 2c       	mov	r15, r1
    1e4a:	e1 14       	cp	r14, r1
    1e4c:	f1 04       	cpc	r15, r1
    1e4e:	91 f0       	breq	.+36     	; 0x1e74 <midi_device_process+0x5c>
    1e50:	c0 e0       	ldi	r28, 0x00	; 0
    1e52:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	c8 01       	movw	r24, r16
    1e58:	0e 94 67 0c 	call	0x18ce	; 0x18ce <bytequeue_get>
    1e5c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1e5e:	c6 01       	movw	r24, r12
    1e60:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	c8 01       	movw	r24, r16
    1e68:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1e6c:	21 96       	adiw	r28, 0x01	; 1
    1e6e:	ce 15       	cp	r28, r14
    1e70:	df 05       	cpc	r29, r15
    1e72:	81 f7       	brne	.-32     	; 0x1e54 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	cf 90       	pop	r12
    1e84:	08 95       	ret

00001e86 <__divmodhi4>:
    1e86:	97 fb       	bst	r25, 7
    1e88:	07 2e       	mov	r0, r23
    1e8a:	16 f4       	brtc	.+4      	; 0x1e90 <__divmodhi4+0xa>
    1e8c:	00 94       	com	r0
    1e8e:	07 d0       	rcall	.+14     	; 0x1e9e <__divmodhi4_neg1>
    1e90:	77 fd       	sbrc	r23, 7
    1e92:	09 d0       	rcall	.+18     	; 0x1ea6 <__divmodhi4_neg2>
    1e94:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodhi4>
    1e98:	07 fc       	sbrc	r0, 7
    1e9a:	05 d0       	rcall	.+10     	; 0x1ea6 <__divmodhi4_neg2>
    1e9c:	3e f4       	brtc	.+14     	; 0x1eac <__divmodhi4_exit>

00001e9e <__divmodhi4_neg1>:
    1e9e:	90 95       	com	r25
    1ea0:	81 95       	neg	r24
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	08 95       	ret

00001ea6 <__divmodhi4_neg2>:
    1ea6:	70 95       	com	r23
    1ea8:	61 95       	neg	r22
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255

00001eac <__divmodhi4_exit>:
    1eac:	08 95       	ret

00001eae <__tablejump2__>:
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	f4 91       	lpm	r31, Z
    1eb6:	e0 2d       	mov	r30, r0
    1eb8:	09 94       	ijmp

00001eba <__umulhisi3>:
    1eba:	a2 9f       	mul	r26, r18
    1ebc:	b0 01       	movw	r22, r0
    1ebe:	b3 9f       	mul	r27, r19
    1ec0:	c0 01       	movw	r24, r0
    1ec2:	a3 9f       	mul	r26, r19
    1ec4:	70 0d       	add	r23, r0
    1ec6:	81 1d       	adc	r24, r1
    1ec8:	11 24       	eor	r1, r1
    1eca:	91 1d       	adc	r25, r1
    1ecc:	b2 9f       	mul	r27, r18
    1ece:	70 0d       	add	r23, r0
    1ed0:	81 1d       	adc	r24, r1
    1ed2:	11 24       	eor	r1, r1
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	08 95       	ret

00001ed8 <__udivmodhi4>:
    1ed8:	aa 1b       	sub	r26, r26
    1eda:	bb 1b       	sub	r27, r27
    1edc:	51 e1       	ldi	r21, 0x11	; 17
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <__udivmodhi4_ep>

00001ee0 <__udivmodhi4_loop>:
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	a6 17       	cp	r26, r22
    1ee6:	b7 07       	cpc	r27, r23
    1ee8:	10 f0       	brcs	.+4      	; 0x1eee <__udivmodhi4_ep>
    1eea:	a6 1b       	sub	r26, r22
    1eec:	b7 0b       	sbc	r27, r23

00001eee <__udivmodhi4_ep>:
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	5a 95       	dec	r21
    1ef4:	a9 f7       	brne	.-22     	; 0x1ee0 <__udivmodhi4_loop>
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	08 95       	ret

00001f00 <_exit>:
    1f00:	f8 94       	cli

00001f02 <__stop_program>:
    1f02:	ff cf       	rjmp	.-2      	; 0x1f02 <__stop_program>
