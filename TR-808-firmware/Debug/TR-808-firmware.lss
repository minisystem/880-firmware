
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  000020ee  00002182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  00800270  00800270  000022f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005691  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f2  00000000  00000000  00007e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f2  00000000  00000000  0000932f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb0  00000000  00000000  0000a924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ea  00000000  00000000  0000b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000227e  00000000  00000000  0000c5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e83c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	c1 0d       	add	r28, r1
      b6:	bf 0d       	add	r27, r15
      b8:	c1 0d       	add	r28, r1
      ba:	c3 0d       	add	r28, r3
      bc:	c3 0d       	add	r28, r3
      be:	c9 0d       	add	r28, r9
      c0:	c3 0d       	add	r28, r3
      c2:	c9 0d       	add	r28, r9
      c4:	c9 0d       	add	r28, r9
      c6:	c9 0d       	add	r28, r9
      c8:	c9 0d       	add	r28, r9
      ca:	c9 0d       	add	r28, r9
      cc:	c3 0d       	add	r28, r3
      ce:	c9 0d       	add	r28, r9
      d0:	c9 0d       	add	r28, r9

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ee ee       	ldi	r30, 0xEE	; 238
      e6:	f0 e2       	ldi	r31, 0x20	; 32
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a0 37       	cpi	r26, 0x70	; 112
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a0 e7       	ldi	r26, 0x70	; 112
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a5 36       	cpi	r26, 0x65	; 101
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 1d 06 	call	0xc3a	; 0xc3a <main>
     108:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,NO_SWITCH, 0, MA_LED},
	{16,8, 1<<ACCENT,NO_SWITCH, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 70 02 	sts	0x0270, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	97 e0       	ldi	r25, 0x07	; 7
     1b0:	89 9f       	mul	r24, r25
     1b2:	f0 01       	movw	r30, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	e0 50       	subi	r30, 0x00	; 0
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	a0 81       	ld	r26, Z
     1bc:	8a 2f       	mov	r24, r26
     1be:	88 1f       	adc	r24, r24
     1c0:	88 27       	eor	r24, r24
     1c2:	88 1f       	adc	r24, r24
     1c4:	a1 81       	ldd	r26, Z+1	; 0x01
     1c6:	a7 70       	andi	r26, 0x07	; 7
     1c8:	aa 0f       	add	r26, r26
     1ca:	a8 2b       	or	r26, r24
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	a1 58       	subi	r26, 0x81	; 129
     1d0:	bd 4f       	sbci	r27, 0xFD	; 253
     1d2:	9c 91       	ld	r25, X
     1d4:	82 81       	ldd	r24, Z+2	; 0x02
     1d6:	89 2b       	or	r24, r25
     1d8:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != NO_SWITCH) {//need to set instrument switch
     1da:	83 81       	ldd	r24, Z+3	; 0x03
     1dc:	8f 3f       	cpi	r24, 0xFF	; 255
     1de:	f1 f0       	breq	.+60     	; 0x21c <trigger_drum+0x7e>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e0:	84 e1       	ldi	r24, 0x14	; 20
     1e2:	0e 94 83 04 	call	0x906	; 0x906 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1e6:	ef e7       	ldi	r30, 0x7F	; 127
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	93 81       	ldd	r25, Z+3	; 0x03
     1ec:	9e 01       	movw	r18, r28
     1ee:	22 0f       	add	r18, r18
     1f0:	33 1f       	adc	r19, r19
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	22 0f       	add	r18, r18
     1f8:	33 1f       	adc	r19, r19
     1fa:	2c 1b       	sub	r18, r28
     1fc:	3d 0b       	sbc	r19, r29
     1fe:	d9 01       	movw	r26, r18
     200:	ac 5f       	subi	r26, 0xFC	; 252
     202:	be 4f       	sbci	r27, 0xFE	; 254
     204:	8c 91       	ld	r24, X
     206:	81 70       	andi	r24, 0x01	; 1
     208:	81 95       	neg	r24
     20a:	89 27       	eor	r24, r25
     20c:	d9 01       	movw	r26, r18
     20e:	a0 50       	subi	r26, 0x00	; 0
     210:	bf 4f       	sbci	r27, 0xFF	; 255
     212:	13 96       	adiw	r26, 0x03	; 3
     214:	2c 91       	ld	r18, X
     216:	82 23       	and	r24, r18
     218:	98 27       	eor	r25, r24
     21a:	93 83       	std	Z+3, r25	; 0x03
					
		}
			
		if (velocity > 64) {
     21c:	11 34       	cpi	r17, 0x41	; 65
     21e:	28 f0       	brcs	.+10     	; 0x22a <trigger_drum+0x8c>
			spi_data[8] |= (1<<ACCENT);
     220:	ef e7       	ldi	r30, 0x7F	; 127
     222:	f2 e0       	ldi	r31, 0x02	; 2
     224:	80 85       	ldd	r24, Z+8	; 0x08
     226:	81 60       	ori	r24, 0x01	; 1
     228:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     22a:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     22c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     230:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     232:	ee e6       	ldi	r30, 0x6E	; 110
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     23c:	85 b5       	in	r24, 0x25	; 37
     23e:	83 60       	ori	r24, 0x03	; 3
     240:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     242:	10 92 77 01 	sts	0x0177, r1
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	08 95       	ret

0000024e <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     24e:	ef e7       	ldi	r30, 0x7F	; 127
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     254:	86 81       	ldd	r24, Z+6	; 0x06
     256:	80 7f       	andi	r24, 0xF0	; 240
     258:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     25a:	87 81       	ldd	r24, Z+7	; 0x07
     25c:	8f 7d       	andi	r24, 0xDF	; 223
     25e:	87 83       	std	Z+7, r24	; 0x07
     260:	08 95       	ret

00000262 <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     262:	5f 92       	push	r5
     264:	6f 92       	push	r6
     266:	7f 92       	push	r7
     268:	8f 92       	push	r8
     26a:	9f 92       	push	r9
     26c:	af 92       	push	r10
     26e:	bf 92       	push	r11
     270:	cf 92       	push	r12
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29

	clear_all_trigs();
     280:	0e 94 27 01 	call	0x24e	; 0x24e <clear_all_trigs>
     284:	05 e0       	ldi	r16, 0x05	; 5
     286:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     288:	c0 e0       	ldi	r28, 0x00	; 0
     28a:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     28c:	0f 2e       	mov	r0, r31
     28e:	f0 e6       	ldi	r31, 0x60	; 96
     290:	8f 2e       	mov	r8, r31
     292:	f4 e0       	ldi	r31, 0x04	; 4
     294:	9f 2e       	mov	r9, r31
     296:	f0 2d       	mov	r31, r0
     298:	0f 2e       	mov	r0, r31
     29a:	fb e5       	ldi	r31, 0x5B	; 91
     29c:	af 2e       	mov	r10, r31
     29e:	f4 e0       	ldi	r31, 0x04	; 4
     2a0:	bf 2e       	mov	r11, r31
     2a2:	f0 2d       	mov	r31, r0
     2a4:	0f 2e       	mov	r0, r31
     2a6:	ff e5       	ldi	r31, 0x5F	; 95
     2a8:	cf 2e       	mov	r12, r31
     2aa:	f4 e0       	ldi	r31, 0x04	; 4
     2ac:	df 2e       	mov	r13, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f3 e3       	ldi	r31, 0x33	; 51
     2b4:	5f 2e       	mov	r5, r31
     2b6:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2b8:	0f 2e       	mov	r0, r31
     2ba:	ff e7       	ldi	r31, 0x7F	; 127
     2bc:	6f 2e       	mov	r6, r31
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	7f 2e       	mov	r7, r31
     2c2:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2c4:	fe 01       	movw	r30, r28
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	ee 0f       	add	r30, r30
     2d0:	ff 1f       	adc	r31, r31
     2d2:	ec 1b       	sub	r30, r28
     2d4:	fd 0b       	sbc	r31, r29
     2d6:	ea 5f       	subi	r30, 0xFA	; 250
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	80 81       	ld	r24, Z
     2dc:	80 fd       	sbrc	r24, 0
     2de:	6b c0       	rjmp	.+214    	; 0x3b6 <trigger_step+0x154>
     2e0:	f4 01       	movw	r30, r8
     2e2:	80 81       	ld	r24, Z
     2e4:	81 fb       	bst	r24, 1
     2e6:	ee 24       	eor	r14, r14
     2e8:	e0 f8       	bld	r14, 0
     2ea:	f1 2c       	mov	r15, r1
     2ec:	f5 01       	movw	r30, r10
     2ee:	20 81       	ld	r18, Z
     2f0:	f6 01       	movw	r30, r12
     2f2:	90 81       	ld	r25, Z
     2f4:	92 95       	swap	r25
     2f6:	96 95       	lsr	r25
     2f8:	97 70       	andi	r25, 0x07	; 7
     2fa:	81 70       	andi	r24, 0x01	; 1
     2fc:	88 0f       	add	r24, r24
     2fe:	88 0f       	add	r24, r24
     300:	88 0f       	add	r24, r24
     302:	89 2b       	or	r24, r25
     304:	f7 01       	movw	r30, r14
     306:	e2 95       	swap	r30
     308:	f2 95       	swap	r31
     30a:	f0 7f       	andi	r31, 0xF0	; 240
     30c:	fe 27       	eor	r31, r30
     30e:	e0 7f       	andi	r30, 0xF0	; 240
     310:	fe 27       	eor	r31, r30
     312:	92 2f       	mov	r25, r18
     314:	91 70       	andi	r25, 0x01	; 1
     316:	59 9e       	mul	r5, r25
     318:	e0 0d       	add	r30, r0
     31a:	f1 1d       	adc	r31, r1
     31c:	11 24       	eor	r1, r1
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e1 57       	subi	r30, 0x71	; 113
     328:	fc 4f       	sbci	r31, 0xFC	; 252
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	0c 2e       	mov	r0, r28
     330:	02 c0       	rjmp	.+4      	; 0x336 <trigger_step+0xd4>
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <trigger_step+0xd0>
     33a:	80 ff       	sbrs	r24, 0
     33c:	3c c0       	rjmp	.+120    	; 0x3b6 <trigger_step+0x154>
			turn_on(drum_hit[i].led_index);
     33e:	f8 01       	movw	r30, r16
     340:	80 81       	ld	r24, Z
     342:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     346:	de 01       	movw	r26, r28
     348:	aa 0f       	add	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	aa 0f       	add	r26, r26
     34e:	bb 1f       	adc	r27, r27
     350:	aa 0f       	add	r26, r26
     352:	bb 1f       	adc	r27, r27
     354:	ac 1b       	sub	r26, r28
     356:	bd 0b       	sbc	r27, r29
     358:	a0 50       	subi	r26, 0x00	; 0
     35a:	bf 4f       	sbci	r27, 0xFF	; 255
     35c:	ec 91       	ld	r30, X
     35e:	8e 2f       	mov	r24, r30
     360:	88 1f       	adc	r24, r24
     362:	88 27       	eor	r24, r24
     364:	88 1f       	adc	r24, r24
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	ec 91       	ld	r30, X
     36a:	e7 70       	andi	r30, 0x07	; 7
     36c:	ee 0f       	add	r30, r30
     36e:	e8 2b       	or	r30, r24
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	e1 58       	subi	r30, 0x81	; 129
     374:	fd 4f       	sbci	r31, 0xFD	; 253
     376:	d8 01       	movw	r26, r16
     378:	13 97       	sbiw	r26, 0x03	; 3
     37a:	9c 91       	ld	r25, X
     37c:	80 81       	ld	r24, Z
     37e:	89 2b       	or	r24, r25
     380:	80 83       	st	Z, r24
     382:	f8 01       	movw	r30, r16
     384:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
     386:	80 81       	ld	r24, Z
     388:	8f 3f       	cpi	r24, 0xFF	; 255
     38a:	a9 f0       	breq	.+42     	; 0x3b6 <trigger_step+0x154>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     38c:	f3 01       	movw	r30, r6
     38e:	23 81       	ldd	r18, Z+3	; 0x03
     390:	fe 01       	movw	r30, r28
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ee 0f       	add	r30, r30
     398:	ff 1f       	adc	r31, r31
     39a:	ee 0f       	add	r30, r30
     39c:	ff 1f       	adc	r31, r31
     39e:	ec 1b       	sub	r30, r28
     3a0:	fd 0b       	sbc	r31, r29
     3a2:	ec 5f       	subi	r30, 0xFC	; 252
     3a4:	fe 4f       	sbci	r31, 0xFE	; 254
     3a6:	90 81       	ld	r25, Z
     3a8:	91 70       	andi	r25, 0x01	; 1
     3aa:	91 95       	neg	r25
     3ac:	92 27       	eor	r25, r18
     3ae:	89 23       	and	r24, r25
     3b0:	82 27       	eor	r24, r18
     3b2:	f3 01       	movw	r30, r6
     3b4:	83 83       	std	Z+3, r24	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3b6:	21 96       	adiw	r28, 0x01	; 1
     3b8:	09 5f       	subi	r16, 0xF9	; 249
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	c0 31       	cpi	r28, 0x10	; 16
     3be:	d1 05       	cpc	r29, r1
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <trigger_step+0x162>
     3c2:	80 cf       	rjmp	.-256    	; 0x2c4 <trigger_step+0x62>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	7f 90       	pop	r7
     3de:	6f 90       	pop	r6
     3e0:	5f 90       	pop	r5
     3e2:	08 95       	ret

000003e4 <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3e4:	80 91 4b 02 	lds	r24, 0x024B
     3e8:	86 ff       	sbrs	r24, 6
     3ea:	08 c0       	rjmp	.+16     	; 0x3fc <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3ec:	eb e4       	ldi	r30, 0x4B	; 75
     3ee:	f2 e0       	ldi	r31, 0x02	; 2
     3f0:	8f 7b       	andi	r24, 0xBF	; 191
     3f2:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3fc:	80 91 4d 02 	lds	r24, 0x024D
     400:	86 ff       	sbrs	r24, 6
     402:	08 c0       	rjmp	.+16     	; 0x414 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     404:	ed e4       	ldi	r30, 0x4D	; 77
     406:	f2 e0       	ldi	r31, 0x02	; 2
     408:	8f 7b       	andi	r24, 0xBF	; 191
     40a:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     414:	80 91 4f 02 	lds	r24, 0x024F
     418:	86 ff       	sbrs	r24, 6
     41a:	08 c0       	rjmp	.+16     	; 0x42c <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     41c:	ef e4       	ldi	r30, 0x4F	; 79
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	8f 7b       	andi	r24, 0xBF	; 191
     422:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     42c:	80 91 51 02 	lds	r24, 0x0251
     430:	86 ff       	sbrs	r24, 6
     432:	08 c0       	rjmp	.+16     	; 0x444 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     434:	e1 e5       	ldi	r30, 0x51	; 81
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	8f 7b       	andi	r24, 0xBF	; 191
     43a:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     444:	80 91 53 02 	lds	r24, 0x0253
     448:	86 ff       	sbrs	r24, 6
     44a:	08 c0       	rjmp	.+16     	; 0x45c <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     44c:	e3 e5       	ldi	r30, 0x53	; 83
     44e:	f2 e0       	ldi	r31, 0x02	; 2
     450:	8f 7b       	andi	r24, 0xBF	; 191
     452:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	84 e0       	ldi	r24, 0x04	; 4
     458:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     45c:	80 91 55 02 	lds	r24, 0x0255
     460:	86 ff       	sbrs	r24, 6
     462:	08 c0       	rjmp	.+16     	; 0x474 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     464:	e5 e5       	ldi	r30, 0x55	; 85
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	8f 7b       	andi	r24, 0xBF	; 191
     46a:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     474:	80 91 57 02 	lds	r24, 0x0257
     478:	86 ff       	sbrs	r24, 6
     47a:	08 c0       	rjmp	.+16     	; 0x48c <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     47c:	e7 e5       	ldi	r30, 0x57	; 87
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	8f 7b       	andi	r24, 0xBF	; 191
     482:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     48c:	80 91 59 02 	lds	r24, 0x0259
     490:	86 ff       	sbrs	r24, 6
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     494:	e9 e5       	ldi	r30, 0x59	; 89
     496:	f2 e0       	ldi	r31, 0x02	; 2
     498:	8f 7b       	andi	r24, 0xBF	; 191
     49a:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	87 e0       	ldi	r24, 0x07	; 7
     4a0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     4a4:	80 91 5b 02 	lds	r24, 0x025B
     4a8:	86 ff       	sbrs	r24, 6
     4aa:	08 c0       	rjmp	.+16     	; 0x4bc <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     4ac:	eb e5       	ldi	r30, 0x5B	; 91
     4ae:	f2 e0       	ldi	r31, 0x02	; 2
     4b0:	8f 7b       	andi	r24, 0xBF	; 191
     4b2:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4bc:	80 91 5d 02 	lds	r24, 0x025D
     4c0:	86 ff       	sbrs	r24, 6
     4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4c4:	ed e5       	ldi	r30, 0x5D	; 93
     4c6:	f2 e0       	ldi	r31, 0x02	; 2
     4c8:	8f 7b       	andi	r24, 0xBF	; 191
     4ca:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	89 e0       	ldi	r24, 0x09	; 9
     4d0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4d4:	80 91 5f 02 	lds	r24, 0x025F
     4d8:	86 ff       	sbrs	r24, 6
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4dc:	ef e5       	ldi	r30, 0x5F	; 95
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	8f 7b       	andi	r24, 0xBF	; 191
     4e2:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	8a e0       	ldi	r24, 0x0A	; 10
     4e8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4ec:	08 95       	ret

000004ee <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	8f 93       	push	r24
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4fe:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     500:	ee e6       	ldi	r30, 0x6E	; 110
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	8d 7f       	andi	r24, 0xFD	; 253
     508:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     50a:	80 91 8c 03 	lds	r24, 0x038C
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	80 93 8c 03 	sts	0x038C, r24
	
}
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	update_inst_leds();
     552:	0e 94 a5 04 	call	0x94a	; 0x94a <update_inst_leds>
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     556:	ea e8       	ldi	r30, 0x8A	; 138
     558:	f2 e0       	ldi	r31, 0x02	; 2
     55a:	81 81       	ldd	r24, Z+1	; 0x01
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	81 83       	std	Z+1, r24	; 0x01
     560:	90 81       	ld	r25, Z
     562:	89 13       	cpse	r24, r25
     564:	96 c0       	rjmp	.+300    	; 0x692 <__vector_11+0x16e>
	{
		flag.next_step = 1;
     566:	80 91 8c 03 	lds	r24, 0x038C
     56a:	81 60       	ori	r24, 0x01	; 1
     56c:	80 93 8c 03 	sts	0x038C, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     570:	ec e8       	ldi	r30, 0x8C	; 140
     572:	f2 e0       	ldi	r31, 0x02	; 2
     574:	80 81       	ld	r24, Z
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	98 0f       	add	r25, r24
     57a:	93 70       	andi	r25, 0x03	; 3
     57c:	8c 7f       	andi	r24, 0xFC	; 252
     57e:	89 2b       	or	r24, r25
     580:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     582:	10 92 8b 02 	sts	0x028B, r1
		if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) { 
     586:	ef e5       	ldi	r30, 0x5F	; 95
     588:	f4 e0       	ldi	r31, 0x04	; 4
     58a:	90 81       	ld	r25, Z
     58c:	89 2f       	mov	r24, r25
     58e:	82 95       	swap	r24
     590:	86 95       	lsr	r24
     592:	87 70       	andi	r24, 0x07	; 7
     594:	20 91 60 04 	lds	r18, 0x0460
     598:	21 70       	andi	r18, 0x01	; 1
     59a:	22 0f       	add	r18, r18
     59c:	22 0f       	add	r18, r18
     59e:	22 0f       	add	r18, r18
     5a0:	28 2b       	or	r18, r24
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	82 0f       	add	r24, r18
     5a6:	38 2f       	mov	r19, r24
     5a8:	32 95       	swap	r19
     5aa:	33 0f       	add	r19, r19
     5ac:	30 7e       	andi	r19, 0xE0	; 224
     5ae:	9f 71       	andi	r25, 0x1F	; 31
     5b0:	93 2b       	or	r25, r19
     5b2:	90 83       	st	Z, r25
     5b4:	83 fb       	bst	r24, 3
     5b6:	99 27       	eor	r25, r25
     5b8:	90 f9       	bld	r25, 0
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
     5bc:	8e 7f       	andi	r24, 0xFE	; 254
     5be:	89 2b       	or	r24, r25
     5c0:	81 83       	std	Z+1, r24	; 0x01
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	81 fb       	bst	r24, 1
     5c6:	00 27       	eor	r16, r16
     5c8:	00 f9       	bld	r16, 0
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	03 57       	subi	r16, 0x73	; 115
     5ce:	1c 4f       	sbci	r17, 0xFC	; 252
     5d0:	f8 01       	movw	r30, r16
     5d2:	e0 53       	subi	r30, 0x30	; 48
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 81       	ld	r24, Z
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	09 f0       	breq	.+2      	; 0x5e2 <__vector_11+0xbe>
     5e0:	58 c0       	rjmp	.+176    	; 0x692 <__vector_11+0x16e>
     5e2:	80 91 8e 03 	lds	r24, 0x038E
     5e6:	81 ff       	sbrs	r24, 1
     5e8:	54 c0       	rjmp	.+168    	; 0x692 <__vector_11+0x16e>
			flag.new_measure = 1;
     5ea:	80 91 8c 03 	lds	r24, 0x038C
     5ee:	80 62       	ori	r24, 0x20	; 32
     5f0:	80 93 8c 03 	sts	0x038C, r24
			sequencer.current_step = 0;
     5f4:	ef e5       	ldi	r30, 0x5F	; 95
     5f6:	f4 e0       	ldi	r31, 0x04	; 4
     5f8:	80 81       	ld	r24, Z
     5fa:	8f 71       	andi	r24, 0x1F	; 31
     5fc:	80 83       	st	Z, r24
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
     600:	8e 7f       	andi	r24, 0xFE	; 254
     602:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying exception handler
     604:	80 91 5e 04 	lds	r24, 0x045E
     608:	80 31       	cpi	r24, 0x10	; 16
     60a:	09 f1       	breq	.+66     	; 0x64e <__vector_11+0x12a>
				
				if (sequencer.part_playing == SECOND) {
     60c:	80 91 60 04 	lds	r24, 0x0460
     610:	81 ff       	sbrs	r24, 1
     612:	09 c0       	rjmp	.+18     	; 0x626 <__vector_11+0x102>
					turn_off(SECOND_PART_LED);
     614:	8b e2       	ldi	r24, 0x2B	; 43
     616:	0e 94 64 04 	call	0x8c8	; 0x8c8 <turn_off>
					turn_on(FIRST_PART_LED);
     61a:	8a e2       	ldi	r24, 0x2A	; 42
     61c:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
					toggle_variation(); //only toggle variation at the end of the 2nd part
     620:	0e 94 da 09 	call	0x13b4	; 0x13b4 <toggle_variation>
     624:	06 c0       	rjmp	.+12     	; 0x632 <__vector_11+0x10e>
				} else {
					turn_off(FIRST_PART_LED); 
     626:	8a e2       	ldi	r24, 0x2A	; 42
     628:	0e 94 64 04 	call	0x8c8	; 0x8c8 <turn_off>
					turn_on(SECOND_PART_LED);
     62c:	8b e2       	ldi	r24, 0x2B	; 43
     62e:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
				}
				sequencer.part_playing ^= 1 << 0;
     632:	80 91 60 04 	lds	r24, 0x0460
     636:	81 fb       	bst	r24, 1
     638:	99 27       	eor	r25, r25
     63a:	90 f9       	bld	r25, 0
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	89 27       	eor	r24, r25
     640:	ef e5       	ldi	r30, 0x5F	; 95
     642:	f4 e0       	ldi	r31, 0x04	; 4
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	80 fb       	bst	r24, 0
     648:	91 f9       	bld	r25, 1
     64a:	91 83       	std	Z+1, r25	; 0x01
     64c:	02 c0       	rjmp	.+4      	; 0x652 <__vector_11+0x12e>
			} else { 
	
				toggle_variation(); //no second part, so toggle variation 
     64e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <toggle_variation>
				
			}
			//update step number
			sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
     652:	80 91 60 04 	lds	r24, 0x0460
     656:	82 fb       	bst	r24, 2
     658:	ee 24       	eor	r14, r14
     65a:	e0 f8       	bld	r14, 0
     65c:	f1 2c       	mov	r15, r1
     65e:	f7 01       	movw	r30, r14
     660:	e3 57       	subi	r30, 0x73	; 115
     662:	fc 4f       	sbci	r31, 0xFC	; 252
     664:	e0 53       	subi	r30, 0x30	; 48
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	80 91 5f 04 	lds	r24, 0x045F
     66c:	8f 71       	andi	r24, 0x1F	; 31
     66e:	80 83       	st	Z, r24
			update_step_led_mask();
     670:	0e 94 ca 04 	call	0x994	; 0x994 <update_step_led_mask>
			
			//handle pre-scale change
			if (flag.pre_scale_change) {
     674:	80 91 8c 03 	lds	r24, 0x038C
     678:	86 ff       	sbrs	r24, 6
     67a:	0b c0       	rjmp	.+22     	; 0x692 <__vector_11+0x16e>
				
				flag.pre_scale_change = 0;
     67c:	8f 7b       	andi	r24, 0xBF	; 191
     67e:	80 93 8c 03 	sts	0x038C, r24
				internal_clock.divider = pre_scale[pre_scale_index];
     682:	e0 91 28 02 	lds	r30, 0x0228
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	ec 5d       	subi	r30, 0xDC	; 220
     68a:	fd 4f       	sbci	r31, 0xFD	; 253
     68c:	80 81       	ld	r24, Z
     68e:	80 93 8a 02 	sts	0x028A, r24
	
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     692:	ea e8       	ldi	r30, 0x8A	; 138
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	80 81       	ld	r24, Z
     698:	86 95       	lsr	r24
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	98 13       	cpse	r25, r24
     69e:	df c0       	rjmp	.+446    	; 0x85e <__vector_11+0x33a>
		flag.half_step = 1;
     6a0:	80 91 8c 03 	lds	r24, 0x038C
     6a4:	82 60       	ori	r24, 0x02	; 2
     6a6:	80 93 8c 03 	sts	0x038C, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     6aa:	40 91 e4 01 	lds	r20, 0x01E4
     6ae:	30 91 e7 01 	lds	r19, 0x01E7
     6b2:	ef e7       	ldi	r30, 0x7F	; 127
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	83 2f       	mov	r24, r19
     6b8:	84 2b       	or	r24, r20
     6ba:	80 95       	com	r24
     6bc:	95 81       	ldd	r25, Z+5	; 0x05
     6be:	89 23       	and	r24, r25
     6c0:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     6c2:	80 91 8e 03 	lds	r24, 0x038E
     6c6:	81 ff       	sbrs	r24, 1
     6c8:	9c c0       	rjmp	.+312    	; 0x802 <__vector_11+0x2de>
	
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     6ca:	80 91 5b 04 	lds	r24, 0x045B
     6ce:	81 70       	andi	r24, 0x01	; 1
     6d0:	c8 2f       	mov	r28, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	d8 2f       	mov	r29, r24
     6d6:	03 e6       	ldi	r16, 0x63	; 99
     6d8:	14 e0       	ldi	r17, 0x04	; 4
     6da:	d8 01       	movw	r26, r16
     6dc:	8c 91       	ld	r24, X
     6de:	93 e3       	ldi	r25, 0x33	; 51
     6e0:	9c 9f       	mul	r25, r28
     6e2:	f0 01       	movw	r30, r0
     6e4:	9d 9f       	mul	r25, r29
     6e6:	f0 0d       	add	r31, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	e8 0f       	add	r30, r24
     6ec:	f1 1d       	adc	r31, r1
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ed 52       	subi	r30, 0x2D	; 45
     6f4:	fc 4f       	sbci	r31, 0xFC	; 252
     6f6:	90 81       	ld	r25, Z
     6f8:	81 81       	ldd	r24, Z+1	; 0x01
     6fa:	ef e7       	ldi	r30, 0x7F	; 127
     6fc:	f2 e0       	ldi	r31, 0x02	; 2
     6fe:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     700:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     702:	0e 94 96 04 	call	0x92c	; 0x92c <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     706:	d8 01       	movw	r26, r16
     708:	ec 91       	ld	r30, X
     70a:	b7 e0       	ldi	r27, 0x07	; 7
     70c:	eb 9f       	mul	r30, r27
     70e:	f0 01       	movw	r30, r0
     710:	11 24       	eor	r1, r1
     712:	e0 50       	subi	r30, 0x00	; 0
     714:	ff 4f       	sbci	r31, 0xFF	; 255
     716:	85 81       	ldd	r24, Z+5	; 0x05
     718:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
								
			switch (sequencer.variation_mode) {
     71c:	20 91 5c 04 	lds	r18, 0x045C
     720:	21 30       	cpi	r18, 0x01	; 1
     722:	49 f0       	breq	.+18     	; 0x736 <__vector_11+0x212>
     724:	18 f0       	brcs	.+6      	; 0x72c <__vector_11+0x208>
     726:	22 30       	cpi	r18, 0x02	; 2
     728:	a1 f0       	breq	.+40     	; 0x752 <__vector_11+0x22e>
     72a:	20 c0       	rjmp	.+64     	; 0x76c <__vector_11+0x248>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     72c:	80 91 e4 01 	lds	r24, 0x01E4
     730:	80 93 64 04 	sts	0x0464, r24
					break;					
     734:	1b c0       	rjmp	.+54     	; 0x76c <__vector_11+0x248>
				case VAR_B:
					if (flag.variation_change == 1) {
     736:	80 91 8c 03 	lds	r24, 0x038C
     73a:	82 ff       	sbrs	r24, 2
     73c:	05 c0       	rjmp	.+10     	; 0x748 <__vector_11+0x224>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     73e:	80 91 e4 01 	lds	r24, 0x01E4
     742:	80 93 64 04 	sts	0x0464, r24
     746:	12 c0       	rjmp	.+36     	; 0x76c <__vector_11+0x248>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     748:	80 91 e7 01 	lds	r24, 0x01E7
     74c:	80 93 64 04 	sts	0x0464, r24
     750:	0d c0       	rjmp	.+26     	; 0x76c <__vector_11+0x248>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     752:	80 91 5b 04 	lds	r24, 0x045B
     756:	80 fd       	sbrc	r24, 0
     758:	05 c0       	rjmp	.+10     	; 0x764 <__vector_11+0x240>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     75a:	80 91 e4 01 	lds	r24, 0x01E4
     75e:	80 93 64 04 	sts	0x0464, r24
     762:	04 c0       	rjmp	.+8      	; 0x76c <__vector_11+0x248>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     764:	80 91 e7 01 	lds	r24, 0x01E7
     768:	80 93 64 04 	sts	0x0464, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     76c:	80 91 8c 02 	lds	r24, 0x028C
     770:	83 70       	andi	r24, 0x03	; 3
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 97       	sbiw	r24, 0x02	; 2
     776:	0c f0       	brlt	.+2      	; 0x77a <__vector_11+0x256>
     778:	6b c0       	rjmp	.+214    	; 0x850 <__vector_11+0x32c>
				
				if (flag.variation_change == 1) {
     77a:	80 91 8c 03 	lds	r24, 0x038C
     77e:	82 ff       	sbrs	r24, 2
     780:	2a c0       	rjmp	.+84     	; 0x7d6 <__vector_11+0x2b2>
					
					switch (sequencer.variation_mode) {
     782:	21 30       	cpi	r18, 0x01	; 1
     784:	61 f0       	breq	.+24     	; 0x79e <__vector_11+0x27a>
     786:	18 f0       	brcs	.+6      	; 0x78e <__vector_11+0x26a>
     788:	22 30       	cpi	r18, 0x02	; 2
     78a:	89 f0       	breq	.+34     	; 0x7ae <__vector_11+0x28a>
     78c:	24 c0       	rjmp	.+72     	; 0x7d6 <__vector_11+0x2b2>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     78e:	e4 e6       	ldi	r30, 0x64	; 100
     790:	f4 e0       	ldi	r31, 0x04	; 4
     792:	90 91 e7 01 	lds	r25, 0x01E7
     796:	80 81       	ld	r24, Z
     798:	89 2b       	or	r24, r25
     79a:	80 83       	st	Z, r24
							break;
     79c:	59 c0       	rjmp	.+178    	; 0x850 <__vector_11+0x32c>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     79e:	e4 e6       	ldi	r30, 0x64	; 100
     7a0:	f4 e0       	ldi	r31, 0x04	; 4
     7a2:	90 91 e7 01 	lds	r25, 0x01E7
     7a6:	80 81       	ld	r24, Z
     7a8:	89 2b       	or	r24, r25
     7aa:	80 83       	st	Z, r24
     7ac:	51 c0       	rjmp	.+162    	; 0x850 <__vector_11+0x32c>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     7ae:	80 91 5b 04 	lds	r24, 0x045B
     7b2:	80 fd       	sbrc	r24, 0
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__vector_11+0x2a2>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7b6:	e4 e6       	ldi	r30, 0x64	; 100
     7b8:	f4 e0       	ldi	r31, 0x04	; 4
     7ba:	90 91 e7 01 	lds	r25, 0x01E7
     7be:	80 81       	ld	r24, Z
     7c0:	89 2b       	or	r24, r25
     7c2:	80 83       	st	Z, r24
     7c4:	0a c0       	rjmp	.+20     	; 0x7da <__vector_11+0x2b6>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7c6:	e4 e6       	ldi	r30, 0x64	; 100
     7c8:	f4 e0       	ldi	r31, 0x04	; 4
     7ca:	90 91 e4 01 	lds	r25, 0x01E4
     7ce:	80 81       	ld	r24, Z
     7d0:	89 2b       	or	r24, r25
     7d2:	80 83       	st	Z, r24
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <__vector_11+0x2b6>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     7d6:	22 30       	cpi	r18, 0x02	; 2
     7d8:	d9 f5       	brne	.+118    	; 0x850 <__vector_11+0x32c>
						if (sequencer.variation == VAR_A) {
     7da:	80 91 5b 04 	lds	r24, 0x045B
     7de:	80 fd       	sbrc	r24, 0
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <__vector_11+0x2ce>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7e2:	e4 e6       	ldi	r30, 0x64	; 100
     7e4:	f4 e0       	ldi	r31, 0x04	; 4
     7e6:	90 91 e7 01 	lds	r25, 0x01E7
     7ea:	80 81       	ld	r24, Z
     7ec:	89 2b       	or	r24, r25
     7ee:	80 83       	st	Z, r24
     7f0:	2f c0       	rjmp	.+94     	; 0x850 <__vector_11+0x32c>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7f2:	e4 e6       	ldi	r30, 0x64	; 100
     7f4:	f4 e0       	ldi	r31, 0x04	; 4
     7f6:	90 91 e4 01 	lds	r25, 0x01E4
     7fa:	80 81       	ld	r24, Z
     7fc:	89 2b       	or	r24, r25
     7fe:	80 83       	st	Z, r24
     800:	27 c0       	rjmp	.+78     	; 0x850 <__vector_11+0x32c>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     802:	ef e7       	ldi	r30, 0x7F	; 127
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     808:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     80a:	20 91 5c 04 	lds	r18, 0x045C
     80e:	21 30       	cpi	r18, 0x01	; 1
     810:	31 f0       	breq	.+12     	; 0x81e <__vector_11+0x2fa>
     812:	10 f0       	brcs	.+4      	; 0x818 <__vector_11+0x2f4>
     814:	22 30       	cpi	r18, 0x02	; 2
     816:	61 f4       	brne	.+24     	; 0x830 <__vector_11+0x30c>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     818:	40 93 64 04 	sts	0x0464, r20
				break;
     81c:	09 c0       	rjmp	.+18     	; 0x830 <__vector_11+0x30c>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     81e:	30 93 64 04 	sts	0x0464, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     822:	80 91 8c 02 	lds	r24, 0x028C
     826:	83 70       	andi	r24, 0x03	; 3
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	02 97       	sbiw	r24, 0x02	; 2
     82c:	8c f4       	brge	.+34     	; 0x850 <__vector_11+0x32c>
     82e:	0d c0       	rjmp	.+26     	; 0x84a <__vector_11+0x326>
     830:	80 91 8c 02 	lds	r24, 0x028C
     834:	83 70       	andi	r24, 0x03	; 3
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	02 97       	sbiw	r24, 0x02	; 2
     83a:	54 f4       	brge	.+20     	; 0x850 <__vector_11+0x32c>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     83c:	22 30       	cpi	r18, 0x02	; 2
     83e:	29 f4       	brne	.+10     	; 0x84a <__vector_11+0x326>
     840:	e4 e6       	ldi	r30, 0x64	; 100
     842:	f4 e0       	ldi	r31, 0x04	; 4
     844:	80 81       	ld	r24, Z
     846:	38 2b       	or	r19, r24
     848:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     850:	ef e7       	ldi	r30, 0x7F	; 127
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	90 91 64 04 	lds	r25, 0x0464
     858:	85 81       	ldd	r24, Z+5	; 0x05
     85a:	89 2b       	or	r24, r25
     85c:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	bf 91       	pop	r27
     868:	af 91       	pop	r26
     86a:	9f 91       	pop	r25
     86c:	8f 91       	pop	r24
     86e:	7f 91       	pop	r23
     870:	6f 91       	pop	r22
     872:	5f 91       	pop	r21
     874:	4f 91       	pop	r20
     876:	3f 91       	pop	r19
     878:	2f 91       	pop	r18
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9c 01       	movw	r18, r24
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	82 0f       	add	r24, r18
     89a:	93 1f       	adc	r25, r19
     89c:	dc 01       	movw	r26, r24
     89e:	a7 58       	subi	r26, 0x87	; 135
     8a0:	be 4f       	sbci	r27, 0xFE	; 254
     8a2:	2c 91       	ld	r18, X
     8a4:	e2 2f       	mov	r30, r18
     8a6:	ef 70       	andi	r30, 0x0F	; 15
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	e1 58       	subi	r30, 0x81	; 129
     8ac:	fd 4f       	sbci	r31, 0xFD	; 253
     8ae:	ec 01       	movw	r28, r24
     8b0:	c8 58       	subi	r28, 0x88	; 136
     8b2:	de 4f       	sbci	r29, 0xFE	; 254
     8b4:	30 81       	ld	r19, Z
     8b6:	88 81       	ld	r24, Y
     8b8:	83 2b       	or	r24, r19
     8ba:	80 83       	st	Z, r24
	led[led_index].state = 1;
     8bc:	82 2f       	mov	r24, r18
     8be:	80 61       	ori	r24, 0x10	; 16
     8c0:	8c 93       	st	X, r24

}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <turn_off>:

void turn_off(uint8_t led_index) {
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	9c 01       	movw	r18, r24
     8d0:	22 0f       	add	r18, r18
     8d2:	33 1f       	adc	r19, r19
     8d4:	82 0f       	add	r24, r18
     8d6:	93 1f       	adc	r25, r19
     8d8:	dc 01       	movw	r26, r24
     8da:	a7 58       	subi	r26, 0x87	; 135
     8dc:	be 4f       	sbci	r27, 0xFE	; 254
     8de:	2c 91       	ld	r18, X
     8e0:	e2 2f       	mov	r30, r18
     8e2:	ef 70       	andi	r30, 0x0F	; 15
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	e1 58       	subi	r30, 0x81	; 129
     8e8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ea:	ec 01       	movw	r28, r24
     8ec:	c8 58       	subi	r28, 0x88	; 136
     8ee:	de 4f       	sbci	r29, 0xFE	; 254
     8f0:	88 81       	ld	r24, Y
     8f2:	80 95       	com	r24
     8f4:	90 81       	ld	r25, Z
     8f6:	89 23       	and	r24, r25
     8f8:	80 83       	st	Z, r24
	led[led_index].state = 0;
     8fa:	82 2f       	mov	r24, r18
     8fc:	8f 7e       	andi	r24, 0xEF	; 239
     8fe:	8c 93       	st	X, r24
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     906:	28 2f       	mov	r18, r24
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	2e 0f       	add	r18, r30
     912:	3f 1f       	adc	r19, r31
     914:	f9 01       	movw	r30, r18
     916:	e7 58       	subi	r30, 0x87	; 135
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	90 81       	ld	r25, Z
     91c:	94 ff       	sbrs	r25, 4
     91e:	03 c0       	rjmp	.+6      	; 0x926 <toggle+0x20>
		
		turn_off(led_index);
     920:	0e 94 64 04 	call	0x8c8	; 0x8c8 <turn_off>
     924:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     926:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
     92a:	08 95       	ret

0000092c <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     92c:	ef e7       	ldi	r30, 0x7F	; 127
     92e:	f2 e0       	ldi	r31, 0x02	; 2
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	8f 70       	andi	r24, 0x0F	; 15
     934:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     936:	87 81       	ldd	r24, Z+7	; 0x07
     938:	80 72       	andi	r24, 0x20	; 32
     93a:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     93c:	83 81       	ldd	r24, Z+3	; 0x03
     93e:	8f 70       	andi	r24, 0x0F	; 15
     940:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     942:	86 81       	ldd	r24, Z+6	; 0x06
     944:	8f 7c       	andi	r24, 0xCF	; 207
     946:	86 83       	std	Z+6, r24	; 0x06
     948:	08 95       	ret

0000094a <update_inst_leds>:
	
}

void update_inst_leds(void) {
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	05 e0       	ldi	r16, 0x05	; 5
     954:	11 e0       	ldi	r17, 0x01	; 1
	

	for (int i = BD; i <= MA; i++) {
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		if (drum_hit[i].muted) {
     95a:	fe 01       	movw	r30, r28
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ec 1b       	sub	r30, r28
     96a:	fd 0b       	sbc	r31, r29
     96c:	ea 5f       	subi	r30, 0xFA	; 250
     96e:	fe 4f       	sbci	r31, 0xFE	; 254
     970:	80 81       	ld	r24, Z
     972:	80 ff       	sbrs	r24, 0
     974:	04 c0       	rjmp	.+8      	; 0x97e <update_inst_leds+0x34>
			
			toggle(drum_hit[i].led_index);
     976:	f8 01       	movw	r30, r16
     978:	80 81       	ld	r24, Z
     97a:	0e 94 83 04 	call	0x906	; 0x906 <toggle>
}

void update_inst_leds(void) {
	

	for (int i = BD; i <= MA; i++) {
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	09 5f       	subi	r16, 0xF9	; 249
     982:	1f 4f       	sbci	r17, 0xFF	; 255
     984:	c0 31       	cpi	r28, 0x10	; 16
     986:	d1 05       	cpc	r29, r1
     988:	41 f7       	brne	.-48     	; 0x95a <update_inst_leds+0x10>
			
		}
		
	}	
	
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <update_step_led_mask>:
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     994:	2f 92       	push	r2
     996:	3f 92       	push	r3
     998:	4f 92       	push	r4
     99a:	5f 92       	push	r5
     99c:	6f 92       	push	r6
     99e:	7f 92       	push	r7
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     9b8:	22 e2       	ldi	r18, 0x22	; 34
     9ba:	e3 ed       	ldi	r30, 0xD3	; 211
     9bc:	f3 e0       	ldi	r31, 0x03	; 3
     9be:	df 01       	movw	r26, r30
     9c0:	42 2f       	mov	r20, r18
     9c2:	1d 92       	st	X+, r1
     9c4:	4a 95       	dec	r20
     9c6:	e9 f7       	brne	.-6      	; 0x9c2 <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     9c8:	e9 e3       	ldi	r30, 0x39	; 57
     9ca:	f4 e0       	ldi	r31, 0x04	; 4
     9cc:	df 01       	movw	r26, r30
     9ce:	1d 92       	st	X+, r1
     9d0:	2a 95       	dec	r18
     9d2:	e9 f7       	brne	.-6      	; 0x9ce <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9d4:	20 91 60 04 	lds	r18, 0x0460
     9d8:	22 fb       	bst	r18, 2
     9da:	88 27       	eor	r24, r24
     9dc:	80 f9       	bld	r24, 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	00 e0       	ldi	r16, 0x00	; 0
     9e2:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9e4:	6c 01       	movw	r12, r24
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	cc 0c       	add	r12, r12
     9ec:	dd 1c       	adc	r13, r13
     9ee:	cc 0c       	add	r12, r12
     9f0:	dd 1c       	adc	r13, r13
     9f2:	cc 0c       	add	r12, r12
     9f4:	dd 1c       	adc	r13, r13
     9f6:	ee 24       	eor	r14, r14
     9f8:	e3 94       	inc	r14
     9fa:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     9fc:	5c 01       	movw	r10, r24
     9fe:	b1 e2       	ldi	r27, 0x21	; 33
     a00:	ab 0e       	add	r10, r27
     a02:	b1 1c       	adc	r11, r1
     a04:	95 01       	movw	r18, r10
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	f9 01       	movw	r30, r18
     a0c:	e3 57       	subi	r30, 0x73	; 115
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
     a10:	5f 01       	movw	r10, r30
     a12:	0f 2e       	mov	r0, r31
     a14:	f3 ef       	ldi	r31, 0xF3	; 243
     a16:	8f 2e       	mov	r8, r31
     a18:	f3 e0       	ldi	r31, 0x03	; 3
     a1a:	9f 2e       	mov	r9, r31
     a1c:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a1e:	3c 01       	movw	r6, r24
     a20:	f4 e5       	ldi	r31, 0x54	; 84
     a22:	6f 0e       	add	r6, r31
     a24:	71 1c       	adc	r7, r1
     a26:	93 01       	movw	r18, r6
     a28:	22 0f       	add	r18, r18
     a2a:	33 1f       	adc	r19, r19
     a2c:	a9 01       	movw	r20, r18
     a2e:	43 57       	subi	r20, 0x73	; 115
     a30:	5c 4f       	sbci	r21, 0xFC	; 252
     a32:	3a 01       	movw	r6, r20
     a34:	0f 2e       	mov	r0, r31
     a36:	f9 e5       	ldi	r31, 0x59	; 89
     a38:	4f 2e       	mov	r4, r31
     a3a:	f4 e0       	ldi	r31, 0x04	; 4
     a3c:	5f 2e       	mov	r5, r31
     a3e:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     a40:	83 57       	subi	r24, 0x73	; 115
     a42:	9c 4f       	sbci	r25, 0xFC	; 252
     a44:	1c 01       	movw	r2, r24
     a46:	50 ed       	ldi	r21, 0xD0	; 208
     a48:	25 0e       	add	r2, r21
     a4a:	31 1c       	adc	r3, r1
     a4c:	52 c0       	rjmp	.+164    	; 0xaf2 <update_step_led_mask+0x15e>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a4e:	9e 01       	movw	r18, r28
     a50:	08 2e       	mov	r0, r24
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <update_step_led_mask+0xc4>
     a54:	36 95       	lsr	r19
     a56:	27 95       	ror	r18
     a58:	0a 94       	dec	r0
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <update_step_led_mask+0xc0>
     a5c:	20 ff       	sbrs	r18, 0
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <update_step_led_mask+0xd8>
     a60:	20 81       	ld	r18, Z
     a62:	31 81       	ldd	r19, Z+1	; 0x01
     a64:	24 2b       	or	r18, r20
     a66:	35 2b       	or	r19, r21
     a68:	31 83       	std	Z+1, r19	; 0x01
     a6a:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a6c:	9b 01       	movw	r18, r22
     a6e:	08 2e       	mov	r0, r24
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <update_step_led_mask+0xe2>
     a72:	36 95       	lsr	r19
     a74:	27 95       	ror	r18
     a76:	0a 94       	dec	r0
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <update_step_led_mask+0xde>
     a7a:	20 ff       	sbrs	r18, 0
     a7c:	08 c0       	rjmp	.+16     	; 0xa8e <update_step_led_mask+0xfa>
     a7e:	2d 91       	ld	r18, X+
     a80:	3c 91       	ld	r19, X
     a82:	11 97       	sbiw	r26, 0x01	; 1
     a84:	24 2b       	or	r18, r20
     a86:	35 2b       	or	r19, r21
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	3c 93       	st	X, r19
     a8c:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	12 96       	adiw	r26, 0x02	; 2
     a92:	32 96       	adiw	r30, 0x02	; 2
     a94:	80 31       	cpi	r24, 0x10	; 16
     a96:	91 05       	cpc	r25, r1
     a98:	d1 f6       	brne	.-76     	; 0xa4e <update_step_led_mask+0xba>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a9a:	d5 01       	movw	r26, r10
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	00 2e       	mov	r0, r16
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <update_step_led_mask+0x114>
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	0a 94       	dec	r0
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <update_step_led_mask+0x110>
     aac:	80 ff       	sbrs	r24, 0
     aae:	07 c0       	rjmp	.+14     	; 0xabe <update_step_led_mask+0x12a>
     ab0:	f4 01       	movw	r30, r8
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	84 2b       	or	r24, r20
     ab8:	95 2b       	or	r25, r21
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     abe:	d3 01       	movw	r26, r6
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	00 2e       	mov	r0, r16
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <update_step_led_mask+0x138>
     ac8:	96 95       	lsr	r25
     aca:	87 95       	ror	r24
     acc:	0a 94       	dec	r0
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <update_step_led_mask+0x134>
     ad0:	80 ff       	sbrs	r24, 0
     ad2:	07 c0       	rjmp	.+14     	; 0xae2 <update_step_led_mask+0x14e>
     ad4:	f2 01       	movw	r30, r4
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	48 2b       	or	r20, r24
     adc:	59 2b       	or	r21, r25
     ade:	51 83       	std	Z+1, r21	; 0x01
     ae0:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     ae2:	0f 5f       	subi	r16, 0xFF	; 255
     ae4:	1f 4f       	sbci	r17, 0xFF	; 255
     ae6:	d1 01       	movw	r26, r2
     ae8:	8c 91       	ld	r24, X
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	80 17       	cp	r24, r16
     aee:	91 07       	cpc	r25, r17
     af0:	fc f0       	brlt	.+62     	; 0xb30 <update_step_led_mask+0x19c>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     af2:	c6 01       	movw	r24, r12
     af4:	80 0f       	add	r24, r16
     af6:	91 1f       	adc	r25, r17
     af8:	fc 01       	movw	r30, r24
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e1 57       	subi	r30, 0x71	; 113
     b00:	fc 4f       	sbci	r31, 0xFC	; 252
     b02:	c0 81       	ld	r28, Z
     b04:	d1 81       	ldd	r29, Z+1	; 0x01
     b06:	a7 01       	movw	r20, r14
     b08:	00 2e       	mov	r0, r16
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <update_step_led_mask+0x17c>
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	0a 94       	dec	r0
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <update_step_led_mask+0x178>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	fc 01       	movw	r30, r24
     b1a:	eb 50       	subi	r30, 0x0B	; 11
     b1c:	fc 4f       	sbci	r31, 0xFC	; 252
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	a9 e3       	ldi	r26, 0x39	; 57
     b24:	b4 e0       	ldi	r27, 0x04	; 4
     b26:	e3 ed       	ldi	r30, 0xD3	; 211
     b28:	f3 e0       	ldi	r31, 0x03	; 3
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	8f cf       	rjmp	.-226    	; 0xa4e <update_step_led_mask+0xba>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	9f 90       	pop	r9
     b46:	8f 90       	pop	r8
     b48:	7f 90       	pop	r7
     b4a:	6f 90       	pop	r6
     b4c:	5f 90       	pop	r5
     b4e:	4f 90       	pop	r4
     b50:	3f 90       	pop	r3
     b52:	2f 90       	pop	r2
     b54:	08 95       	ret

00000b56 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     b56:	08 95       	ret

00000b58 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     b58:	08 95       	ret

00000b5a <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     b5a:	40 31       	cpi	r20, 0x10	; 16
     b5c:	20 f4       	brcc	.+8      	; 0xb66 <note_on_event+0xc>
     b5e:	62 2f       	mov	r22, r18
     b60:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     b62:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     b66:	08 95       	ret

00000b68 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     b68:	0e 94 ee 06 	call	0xddc	; 0xddc <update_tempo>
	read_switches();
     b6c:	0e 94 2f 0a 	call	0x145e	; 0x145e <read_switches>
	check_start_stop_tap();
     b70:	0e 94 a4 0a 	call	0x1548	; 0x1548 <check_start_stop_tap>
	
	parse_switch_data();
     b74:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b78:	80 91 8d 03 	lds	r24, 0x038D
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	11 f4       	brne	.+4      	; 0xb84 <refresh+0x1c>
     b80:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <live_hits>
	update_mode();
     b84:	0e 94 95 06 	call	0xd2a	; 0xd2a <update_mode>
	check_clear_switch();
     b88:	0e 94 ac 0c 	call	0x1958	; 0x1958 <check_clear_switch>
	check_variation_switches();
     b8c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <check_variation_switches>
	update_prescale();
     b90:	0e 94 71 08 	call	0x10e2	; 0x10e2 <update_prescale>
	//update_variation();
	check_inst_switches();	
     b94:	0e 94 0e 0b 	call	0x161c	; 0x161c <check_inst_switches>
	update_step_board();
     b98:	0e 94 1c 07 	call	0xe38	; 0xe38 <update_step_board>
	//update_step_led_mask();
	process_step();
     b9c:	0e 94 39 09 	call	0x1272	; 0x1272 <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     ba0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <update_spi>
	PORTD &= ~(1<<TRIG);
     ba4:	5d 98       	cbi	0x0b, 5	; 11
     ba6:	08 95       	ret

00000ba8 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     ba8:	8f e1       	ldi	r24, 0x1F	; 31
     baa:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     bae:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     bb2:	88 ed       	ldi	r24, 0xD8	; 216
     bb4:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     bb8:	51 9a       	sbi	0x0a, 1	; 10
     bba:	08 95       	ret

00000bbc <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	1f 92       	push	r1
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     be8:	80 91 c6 00 	lds	r24, 0x00C6
     bec:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     bee:	ae 01       	movw	r20, r28
     bf0:	4f 5f       	subi	r20, 0xFF	; 255
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	8f e9       	ldi	r24, 0x9F	; 159
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_20>:

ISR (USART0_TX_vect) {
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1


	
}
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     c3a:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     c3c:	8d b1       	in	r24, 0x0d	; 13
     c3e:	8c 60       	ori	r24, 0x0C	; 12
     c40:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     c42:	87 b1       	in	r24, 0x07	; 7
     c44:	8e 60       	ori	r24, 0x0E	; 14
     c46:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     c48:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     c4a:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     c4c:	88 b1       	in	r24, 0x08	; 8
     c4e:	81 7f       	andi	r24, 0xF1	; 241
     c50:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     c52:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     c54:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     c56:	80 e5       	ldi	r24, 0x50	; 80
     c58:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     c5c:	ed ea       	ldi	r30, 0xAD	; 173
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     c6c:	8d e1       	ldi	r24, 0x1D	; 29
     c6e:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
	turn_on(FILL_MANUAL);
     c72:	82 e2       	ldi	r24, 0x22	; 34
     c74:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
	
	update_spi();
     c78:	0e 94 0b 0a 	call	0x1416	; 0x1416 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     c7c:	84 b5       	in	r24, 0x24	; 36
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     c82:	81 ee       	ldi	r24, 0xE1	; 225
     c84:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     c86:	8f e9       	ldi	r24, 0x9F	; 159
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     c8e:	6d ea       	ldi	r22, 0xAD	; 173
     c90:	75 e0       	ldi	r23, 0x05	; 5
     c92:	8f e9       	ldi	r24, 0x9F	; 159
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     c9a:	6b ea       	ldi	r22, 0xAB	; 171
     c9c:	75 e0       	ldi	r23, 0x05	; 5
     c9e:	8f e9       	ldi	r24, 0x9F	; 159
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     ca6:	6c ea       	ldi	r22, 0xAC	; 172
     ca8:	75 e0       	ldi	r23, 0x05	; 5
     caa:	8f e9       	ldi	r24, 0x9F	; 159
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     cb2:	0e 94 d4 05 	call	0xba8	; 0xba8 <setup_midi_usart>
	
	setup_internal_clock();
     cb6:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	internal_clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     cba:	ea e8       	ldi	r30, 0x8A	; 138
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	86 e0       	ldi	r24, 0x06	; 6
     cc0:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     cc2:	11 e0       	ldi	r17, 0x01	; 1
     cc4:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     cc6:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     cca:	80 91 8c 03 	lds	r24, 0x038C
	flag.pre_scale_change = 0;
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	8f 7b       	andi	r24, 0xBF	; 191
     cd2:	80 93 8c 03 	sts	0x038C, r24
	sequencer.START = 0;
     cd6:	ee e8       	ldi	r30, 0x8E	; 142
     cd8:	f3 e0       	ldi	r31, 0x03	; 3
     cda:	80 81       	ld	r24, Z
     cdc:	8d 7f       	andi	r24, 0xFD	; 253
     cde:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	80 93 5d 04 	sts	0x045D, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     ce6:	80 e1       	ldi	r24, 0x10	; 16
     ce8:	80 93 5e 04 	sts	0x045E, r24
	sequencer.step_num_new = 15;
     cec:	cf e5       	ldi	r28, 0x5F	; 95
     cee:	d4 e0       	ldi	r29, 0x04	; 4
     cf0:	88 81       	ld	r24, Y
     cf2:	80 7e       	andi	r24, 0xE0	; 224
     cf4:	8f 60       	ori	r24, 0x0F	; 15
     cf6:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     cf8:	10 92 5c 04 	sts	0x045C, r1
	turn_on(BASIC_VAR_A_LED);
     cfc:	84 e2       	ldi	r24, 0x24	; 36
     cfe:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
	sequencer.mode = FIRST_PART;
     d02:	10 93 8d 03 	sts	0x038D, r17

	sequencer.part_playing = FIRST;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8b 7f       	andi	r24, 0xFB	; 251
     d0c:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     d0e:	8a e2       	ldi	r24, 0x2A	; 42
     d10:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
	turn_on(SCALE_3_LED);
     d14:	87 e2       	ldi	r24, 0x27	; 39
     d16:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
	sei(); //enable global interrupts	
     d1a:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     d1c:	8f e9       	ldi	r24, 0x9F	; 159
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	0e 94 01 10 	call	0x2002	; 0x2002 <midi_device_process>
	
	refresh();		
     d24:	0e 94 b4 05 	call	0xb68	; 0xb68 <refresh>

	
	}
     d28:	f9 cf       	rjmp	.-14     	; 0xd1c <main+0xe2>

00000d2a <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     d2a:	80 91 69 02 	lds	r24, 0x0269
     d2e:	86 ff       	sbrs	r24, 6
     d30:	54 c0       	rjmp	.+168    	; 0xdda <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     d32:	e9 e6       	ldi	r30, 0x69	; 105
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	8f 7b       	andi	r24, 0xBF	; 191
     d38:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     d3a:	80 91 8e 03 	lds	r24, 0x038E
     d3e:	80 ff       	sbrs	r24, 0
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     d42:	80 91 23 02 	lds	r24, 0x0223
     d46:	88 23       	and	r24, r24
     d48:	21 f0       	breq	.+8      	; 0xd52 <update_mode+0x28>
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	80 93 23 02 	sts	0x0223, r24
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <update_mode+0x44>
     d52:	85 e0       	ldi	r24, 0x05	; 5
     d54:	80 93 23 02 	sts	0x0223, r24
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     d5a:	80 91 23 02 	lds	r24, 0x0223
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	86 30       	cpi	r24, 0x06	; 6
     d62:	19 f0       	breq	.+6      	; 0xd6a <update_mode+0x40>
     d64:	80 93 23 02 	sts	0x0223, r24
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <update_mode+0x44>
     d6a:	10 92 23 02 	sts	0x0223, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d6e:	30 91 23 02 	lds	r19, 0x0223
     d72:	e3 2f       	mov	r30, r19
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e3 5e       	subi	r30, 0xE3	; 227
     d78:	fd 4f       	sbci	r31, 0xFD	; 253
     d7a:	20 81       	ld	r18, Z
     d7c:	20 93 8d 03 	sts	0x038D, r18
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
		spi_data[4] |= (1<< mode_index);
     d80:	ef e7       	ldi	r30, 0x7F	; 127
     d82:	f2 e0       	ldi	r31, 0x02	; 2
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <update_mode+0x64>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	3a 95       	dec	r19
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <update_mode+0x60>
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
     d92:	94 81       	ldd	r25, Z+4	; 0x04
     d94:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] |= (1<< mode_index);
     d96:	89 2b       	or	r24, r25
     d98:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	82 0f       	add	r24, r18
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	e0 f4       	brcc	.+56     	; 0xdda <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	21 30       	cpi	r18, 0x01	; 1
     da6:	09 f4       	brne	.+2      	; 0xdaa <update_mode+0x80>
     da8:	e0 e0       	ldi	r30, 0x00	; 0
     daa:	af e5       	ldi	r26, 0x5F	; 95
     dac:	b4 e0       	ldi	r27, 0x04	; 4
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	8c 91       	ld	r24, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	e0 fb       	bst	r30, 0
     db6:	82 f9       	bld	r24, 2
     db8:	11 96       	adiw	r26, 0x01	; 1
     dba:	8c 93       	st	X, r24
     dbc:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	e3 57       	subi	r30, 0x73	; 115
     dc2:	fc 4f       	sbci	r31, 0xFC	; 252
     dc4:	e0 53       	subi	r30, 0x30	; 48
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	98 2f       	mov	r25, r24
     dcc:	9f 71       	andi	r25, 0x1F	; 31
     dce:	8c 91       	ld	r24, X
     dd0:	80 7e       	andi	r24, 0xE0	; 224
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     dd6:	0e 94 ca 04 	call	0x994	; 0x994 <update_step_led_mask>
     dda:	08 95       	ret

00000ddc <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     ddc:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     de0:	90 93 74 02 	sts	0x0274, r25
     de4:	80 93 73 02 	sts	0x0273, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     de8:	20 91 71 02 	lds	r18, 0x0271
     dec:	30 91 72 02 	lds	r19, 0x0272
     df0:	82 1b       	sub	r24, r18
     df2:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	95 95       	asr	r25
     dfa:	87 95       	ror	r24
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	90 93 72 02 	sts	0x0272, r25
     e04:	80 93 71 02 	sts	0x0271, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     e08:	23 e6       	ldi	r18, 0x63	; 99
     e0a:	34 e0       	ldi	r19, 0x04	; 4
     e0c:	a9 01       	movw	r20, r18
     e0e:	48 1b       	sub	r20, r24
     e10:	59 0b       	sbc	r21, r25
     e12:	ca 01       	movw	r24, r20
     e14:	ea e8       	ldi	r30, 0x8A	; 138
     e16:	f2 e0       	ldi	r31, 0x02	; 2
     e18:	54 83       	std	Z+4, r21	; 0x04
     e1a:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     e1c:	25 81       	ldd	r18, Z+5	; 0x05
     e1e:	36 81       	ldd	r19, Z+6	; 0x06
     e20:	42 17       	cp	r20, r18
     e22:	53 07       	cpc	r21, r19
     e24:	11 f0       	breq	.+4      	; 0xe2a <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     e26:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     e2a:	ea e8       	ldi	r30, 0x8A	; 138
     e2c:	f2 e0       	ldi	r31, 0x02	; 2
     e2e:	83 81       	ldd	r24, Z+3	; 0x03
     e30:	94 81       	ldd	r25, Z+4	; 0x04
     e32:	96 83       	std	Z+6, r25	; 0x06
     e34:	85 83       	std	Z+5, r24	; 0x05
     e36:	08 95       	ret

00000e38 <update_step_board>:
			//turn_on(STEP_1_LED);
			
		}
}

void update_step_board() {
     e38:	2f 92       	push	r2
     e3a:	3f 92       	push	r3
     e3c:	4f 92       	push	r4
     e3e:	5f 92       	push	r5
     e40:	6f 92       	push	r6
     e42:	7f 92       	push	r7
     e44:	8f 92       	push	r8
     e46:	9f 92       	push	r9
     e48:	af 92       	push	r10
     e4a:	bf 92       	push	r11
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
	
	if (sequencer.START) {
     e5c:	90 91 8e 03 	lds	r25, 0x038E
     e60:	91 ff       	sbrs	r25, 1
     e62:	2c c1       	rjmp	.+600    	; 0x10bc <update_step_board+0x284>
		
			switch (sequencer.mode) {		
     e64:	80 91 8d 03 	lds	r24, 0x038D
     e68:	81 50       	subi	r24, 0x01	; 1
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <update_step_board+0x38>
     e6e:	26 c1       	rjmp	.+588    	; 0x10bc <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e70:	92 ff       	sbrs	r25, 2
     e72:	26 c0       	rjmp	.+76     	; 0xec0 <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     e74:	80 91 29 02 	lds	r24, 0x0229
     e78:	86 fd       	sbrc	r24, 6
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <update_step_board+0x5a>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	e7 5d       	subi	r30, 0xD7	; 215
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	20 81       	ld	r18, Z
     e8c:	26 ff       	sbrs	r18, 6
     e8e:	13 c0       	rjmp	.+38     	; 0xeb6 <update_step_board+0x7e>
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <update_step_board+0x5e>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     e96:	fc 01       	movw	r30, r24
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e7 5d       	subi	r30, 0xD7	; 215
     e9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ea0:	90 81       	ld	r25, Z
     ea2:	9f 7b       	andi	r25, 0xBF	; 191
     ea4:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     ea6:	ef e5       	ldi	r30, 0x5F	; 95
     ea8:	f4 e0       	ldi	r31, 0x04	; 4
     eaa:	8f 71       	andi	r24, 0x1F	; 31
     eac:	90 81       	ld	r25, Z
     eae:	90 7e       	andi	r25, 0xE0	; 224
     eb0:	89 2b       	or	r24, r25
     eb2:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     eb4:	03 c1       	rjmp	.+518    	; 0x10bc <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	80 31       	cpi	r24, 0x10	; 16
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f7       	brne	.-62     	; 0xe80 <update_step_board+0x48>
     ebe:	fe c0       	rjmp	.+508    	; 0x10bc <update_step_board+0x284>
					
					break; //break or return? or is it needed?
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     ec0:	80 91 63 04 	lds	r24, 0x0463
     ec4:	80 31       	cpi	r24, 0x10	; 16
     ec6:	09 f0       	breq	.+2      	; 0xeca <update_step_board+0x92>
     ec8:	72 c0       	rjmp	.+228    	; 0xfae <update_step_board+0x176>
     eca:	00 e0       	ldi	r16, 0x00	; 0
     ecc:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     ece:	c0 e6       	ldi	r28, 0x60	; 96
     ed0:	d4 e0       	ldi	r29, 0x04	; 4
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     ed2:	0f 2e       	mov	r0, r31
     ed4:	fb e5       	ldi	r31, 0x5B	; 91
     ed6:	6f 2e       	mov	r6, r31
     ed8:	f4 e0       	ldi	r31, 0x04	; 4
     eda:	7f 2e       	mov	r7, r31
     edc:	f0 2d       	mov	r31, r0
     ede:	cc 24       	eor	r12, r12
     ee0:	c3 94       	inc	r12
     ee2:	d1 2c       	mov	r13, r1
     ee4:	0f 2e       	mov	r0, r31
     ee6:	f3 e3       	ldi	r31, 0x33	; 51
     ee8:	bf 2e       	mov	r11, r31
     eea:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     eec:	0f 2e       	mov	r0, r31
     eee:	f3 e6       	ldi	r31, 0x63	; 99
     ef0:	4f 2e       	mov	r4, r31
     ef2:	f4 e0       	ldi	r31, 0x04	; 4
     ef4:	5f 2e       	mov	r5, r31
     ef6:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     ef8:	f8 01       	movw	r30, r16
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	e7 5d       	subi	r30, 0xD7	; 215
     f00:	fd 4f       	sbci	r31, 0xFD	; 253
     f02:	80 81       	ld	r24, Z
     f04:	86 ff       	sbrs	r24, 6
     f06:	4c c0       	rjmp	.+152    	; 0xfa0 <update_step_board+0x168>
					
							
							button[i].state ^= button[i].state;
     f08:	f8 01       	movw	r30, r16
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e7 5d       	subi	r30, 0xD7	; 215
     f10:	fd 4f       	sbci	r31, 0xFD	; 253
     f12:	8f 7b       	andi	r24, 0xBF	; 191
     f14:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     f16:	88 81       	ld	r24, Y
     f18:	82 fb       	bst	r24, 2
     f1a:	88 24       	eor	r8, r8
     f1c:	80 f8       	bld	r8, 0
     f1e:	91 2c       	mov	r9, r1
     f20:	f4 01       	movw	r30, r8
     f22:	e3 57       	subi	r30, 0x73	; 115
     f24:	fc 4f       	sbci	r31, 0xFC	; 252
     f26:	e0 53       	subi	r30, 0x30	; 48
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 81       	ld	r24, Z
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	80 17       	cp	r24, r16
     f30:	91 07       	cpc	r25, r17
     f32:	b4 f1       	brlt	.+108    	; 0xfa0 <update_step_board+0x168>
								toggle(i);
     f34:	80 2f       	mov	r24, r16
     f36:	0e 94 83 04 	call	0x906	; 0x906 <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     f3a:	d3 01       	movw	r26, r6
     f3c:	8c 91       	ld	r24, X
     f3e:	80 fb       	bst	r24, 0
     f40:	22 24       	eor	r2, r2
     f42:	20 f8       	bld	r2, 0
     f44:	31 2c       	mov	r3, r1
     f46:	88 81       	ld	r24, Y
     f48:	82 fb       	bst	r24, 2
     f4a:	ee 24       	eor	r14, r14
     f4c:	e0 f8       	bld	r14, 0
     f4e:	f1 2c       	mov	r15, r1
     f50:	b2 9c       	mul	r11, r2
     f52:	f0 01       	movw	r30, r0
     f54:	b3 9c       	mul	r11, r3
     f56:	f0 0d       	add	r31, r0
     f58:	11 24       	eor	r1, r1
     f5a:	df 01       	movw	r26, r30
     f5c:	ae 0d       	add	r26, r14
     f5e:	bf 1d       	adc	r27, r15
     f60:	aa 0f       	add	r26, r26
     f62:	bb 1f       	adc	r27, r27
     f64:	a1 53       	subi	r26, 0x31	; 49
     f66:	bc 4f       	sbci	r27, 0xFC	; 252
     f68:	2d 91       	ld	r18, X+
     f6a:	3c 91       	ld	r19, X
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	c6 01       	movw	r24, r12
     f70:	00 2e       	mov	r0, r16
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <update_step_board+0x140>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <update_step_board+0x13c>
     f7c:	28 27       	eor	r18, r24
     f7e:	39 27       	eor	r19, r25
     f80:	2d 93       	st	X+, r18
     f82:	3c 93       	st	X, r19
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f84:	d2 01       	movw	r26, r4
     f86:	2c 91       	ld	r18, X
     f88:	e2 0f       	add	r30, r18
     f8a:	f1 1d       	adc	r31, r1
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	ed 52       	subi	r30, 0x2D	; 45
     f92:	fc 4f       	sbci	r31, 0xFC	; 252
     f94:	20 81       	ld	r18, Z
     f96:	31 81       	ldd	r19, Z+1	; 0x01
     f98:	82 27       	eor	r24, r18
     f9a:	93 27       	eor	r25, r19
     f9c:	91 83       	std	Z+1, r25	; 0x01
     f9e:	80 83       	st	Z, r24
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
     fa0:	0f 5f       	subi	r16, 0xFF	; 255
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	00 31       	cpi	r16, 0x10	; 16
     fa6:	11 05       	cpc	r17, r1
     fa8:	09 f0       	breq	.+2      	; 0xfac <update_step_board+0x174>
     faa:	a6 cf       	rjmp	.-180    	; 0xef8 <update_step_board+0xc0>
     fac:	87 c0       	rjmp	.+270    	; 0x10bc <update_step_board+0x284>
     fae:	c0 e0       	ldi	r28, 0x00	; 0
     fb0:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
     fb2:	0f 2e       	mov	r0, r31
     fb4:	f0 e6       	ldi	r31, 0x60	; 96
     fb6:	ef 2e       	mov	r14, r31
     fb8:	f4 e0       	ldi	r31, 0x04	; 4
     fba:	ff 2e       	mov	r15, r31
     fbc:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fb e5       	ldi	r31, 0x5B	; 91
     fc2:	6f 2e       	mov	r6, r31
     fc4:	f4 e0       	ldi	r31, 0x04	; 4
     fc6:	7f 2e       	mov	r7, r31
     fc8:	f0 2d       	mov	r31, r0
     fca:	0f 2e       	mov	r0, r31
     fcc:	f3 e6       	ldi	r31, 0x63	; 99
     fce:	4f 2e       	mov	r4, r31
     fd0:	f4 e0       	ldi	r31, 0x04	; 4
     fd2:	5f 2e       	mov	r5, r31
     fd4:	f0 2d       	mov	r31, r0
     fd6:	0f 2e       	mov	r0, r31
     fd8:	f3 e3       	ldi	r31, 0x33	; 51
     fda:	3f 2e       	mov	r3, r31
     fdc:	f0 2d       	mov	r31, r0
     fde:	88 24       	eor	r8, r8
     fe0:	83 94       	inc	r8
     fe2:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
     fe4:	fe 01       	movw	r30, r28
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	e7 5d       	subi	r30, 0xD7	; 215
     fec:	fd 4f       	sbci	r31, 0xFD	; 253
     fee:	80 81       	ld	r24, Z
     ff0:	86 ff       	sbrs	r24, 6
     ff2:	5f c0       	rjmp	.+190    	; 0x10b2 <update_step_board+0x27a>
						
						
						button[i].state ^= button[i].state;
     ff4:	fe 01       	movw	r30, r28
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	e7 5d       	subi	r30, 0xD7	; 215
     ffc:	fd 4f       	sbci	r31, 0xFD	; 253
     ffe:	8f 7b       	andi	r24, 0xBF	; 191
    1000:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    1002:	f7 01       	movw	r30, r14
    1004:	80 81       	ld	r24, Z
    1006:	82 fb       	bst	r24, 2
    1008:	00 27       	eor	r16, r16
    100a:	00 f9       	bld	r16, 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	f8 01       	movw	r30, r16
    1010:	e3 57       	subi	r30, 0x73	; 115
    1012:	fc 4f       	sbci	r31, 0xFC	; 252
    1014:	e0 53       	subi	r30, 0x30	; 48
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	8c 17       	cp	r24, r28
    101e:	9d 07       	cpc	r25, r29
    1020:	0c f4       	brge	.+2      	; 0x1024 <update_step_board+0x1ec>
    1022:	47 c0       	rjmp	.+142    	; 0x10b2 <update_step_board+0x27a>
							toggle(i);
    1024:	8c 2f       	mov	r24, r28
    1026:	0e 94 83 04 	call	0x906	; 0x906 <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    102a:	d3 01       	movw	r26, r6
    102c:	8c 91       	ld	r24, X
    102e:	80 fb       	bst	r24, 0
    1030:	cc 24       	eor	r12, r12
    1032:	c0 f8       	bld	r12, 0
    1034:	d1 2c       	mov	r13, r1
    1036:	f7 01       	movw	r30, r14
    1038:	80 81       	ld	r24, Z
    103a:	82 fb       	bst	r24, 2
    103c:	aa 24       	eor	r10, r10
    103e:	a0 f8       	bld	r10, 0
    1040:	b1 2c       	mov	r11, r1
    1042:	d2 01       	movw	r26, r4
    1044:	6c 91       	ld	r22, X
    1046:	c5 01       	movw	r24, r10
    1048:	82 95       	swap	r24
    104a:	92 95       	swap	r25
    104c:	90 7f       	andi	r25, 0xF0	; 240
    104e:	98 27       	eor	r25, r24
    1050:	80 7f       	andi	r24, 0xF0	; 240
    1052:	98 27       	eor	r25, r24
    1054:	3c 9c       	mul	r3, r12
    1056:	90 01       	movw	r18, r0
    1058:	3d 9c       	mul	r3, r13
    105a:	30 0d       	add	r19, r0
    105c:	11 24       	eor	r1, r1
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
    1062:	8c 0f       	add	r24, r28
    1064:	9d 1f       	adc	r25, r29
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	fc 01       	movw	r30, r24
    106c:	e1 57       	subi	r30, 0x71	; 113
    106e:	fc 4f       	sbci	r31, 0xFC	; 252
    1070:	c4 01       	movw	r24, r8
    1072:	06 2e       	mov	r0, r22
    1074:	02 c0       	rjmp	.+4      	; 0x107a <update_step_board+0x242>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <update_step_board+0x23e>
    107e:	40 81       	ld	r20, Z
    1080:	51 81       	ldd	r21, Z+1	; 0x01
    1082:	84 27       	eor	r24, r20
    1084:	95 27       	eor	r25, r21
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    108a:	f9 01       	movw	r30, r18
    108c:	e6 0f       	add	r30, r22
    108e:	f1 1d       	adc	r31, r1
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ed 52       	subi	r30, 0x2D	; 45
    1096:	fc 4f       	sbci	r31, 0xFC	; 252
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	94 01       	movw	r18, r8
    109e:	0c 2e       	mov	r0, r28
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <update_step_board+0x26e>
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <update_step_board+0x26a>
    10aa:	82 27       	eor	r24, r18
    10ac:	93 27       	eor	r25, r19
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    10b2:	21 96       	adiw	r28, 0x01	; 1
    10b4:	c0 31       	cpi	r28, 0x10	; 16
    10b6:	d1 05       	cpc	r29, r1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <update_step_board+0x284>
    10ba:	94 cf       	rjmp	.-216    	; 0xfe4 <update_step_board+0x1ac>
	} else {
		
		//handle changing selected pattern and rhythm. Not currently handling switches presses now when sequencer is stopped, which means they get added once sequencer starts
		
	}
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	9f 90       	pop	r9
    10d2:	8f 90       	pop	r8
    10d4:	7f 90       	pop	r7
    10d6:	6f 90       	pop	r6
    10d8:	5f 90       	pop	r5
    10da:	4f 90       	pop	r4
    10dc:	3f 90       	pop	r3
    10de:	2f 90       	pop	r2
    10e0:	08 95       	ret

000010e2 <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    10e2:	80 91 65 02 	lds	r24, 0x0265
    10e6:	86 ff       	sbrs	r24, 6
    10e8:	29 c0       	rjmp	.+82     	; 0x113c <update_prescale+0x5a>
    10ea:	80 91 8e 03 	lds	r24, 0x038E
    10ee:	80 ff       	sbrs	r24, 0
    10f0:	25 c0       	rjmp	.+74     	; 0x113c <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    10f2:	e5 e6       	ldi	r30, 0x65	; 101
    10f4:	f2 e0       	ldi	r31, 0x02	; 2
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 7b       	andi	r24, 0xBF	; 191
    10fa:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    10fc:	80 91 28 02 	lds	r24, 0x0228
    1100:	88 23       	and	r24, r24
    1102:	21 f0       	breq	.+8      	; 0x110c <update_prescale+0x2a>
    1104:	81 50       	subi	r24, 0x01	; 1
    1106:	80 93 28 02 	sts	0x0228, r24
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    110c:	83 e0       	ldi	r24, 0x03	; 3
    110e:	80 93 28 02 	sts	0x0228, r24
					
		}
		flag.pre_scale_change = 1;
    1112:	80 91 8c 03 	lds	r24, 0x038C
    1116:	80 64       	ori	r24, 0x40	; 64
    1118:	80 93 8c 03 	sts	0x038C, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    111c:	ef e7       	ldi	r30, 0x7F	; 127
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	20 91 28 02 	lds	r18, 0x0228
    1124:	2e 5f       	subi	r18, 0xFE	; 254
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <update_prescale+0x4e>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	2a 95       	dec	r18
    1132:	e2 f7       	brpl	.-8      	; 0x112c <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    1134:	95 81       	ldd	r25, Z+5	; 0x05
    1136:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    1138:	89 2b       	or	r24, r25
    113a:	85 83       	std	Z+5, r24	; 0x05
    113c:	08 95       	ret

0000113e <check_tap>:
	}
}

void check_tap(void) {
	
	if (flag.tap) {
    113e:	80 91 8c 03 	lds	r24, 0x038C
    1142:	88 23       	and	r24, r24
    1144:	0c f0       	brlt	.+2      	; 0x1148 <check_tap+0xa>
    1146:	94 c0       	rjmp	.+296    	; 0x1270 <check_tap+0x132>
		
		flag.tap = 0;
    1148:	8f 77       	andi	r24, 0x7F	; 127
    114a:	80 93 8c 03 	sts	0x038C, r24
		if (sequencer.current_inst == AC) {
    114e:	40 91 63 04 	lds	r20, 0x0463
    1152:	40 31       	cpi	r20, 0x10	; 16
    1154:	69 f5       	brne	.+90     	; 0x11b0 <check_tap+0x72>
			sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] |= 1<<sequencer.current_step;	
    1156:	90 91 5b 04 	lds	r25, 0x045B
    115a:	80 91 60 04 	lds	r24, 0x0460
    115e:	82 fb       	bst	r24, 2
    1160:	66 27       	eor	r22, r22
    1162:	60 f9       	bld	r22, 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	91 70       	andi	r25, 0x01	; 1
    1168:	fb 01       	movw	r30, r22
    116a:	53 e3       	ldi	r21, 0x33	; 51
    116c:	95 9f       	mul	r25, r21
    116e:	e0 0d       	add	r30, r0
    1170:	f1 1d       	adc	r31, r1
    1172:	11 24       	eor	r1, r1
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	e1 53       	subi	r30, 0x31	; 49
    117a:	fc 4f       	sbci	r31, 0xFC	; 252
    117c:	90 91 5f 04 	lds	r25, 0x045F
    1180:	92 95       	swap	r25
    1182:	96 95       	lsr	r25
    1184:	97 70       	andi	r25, 0x07	; 7
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	88 0f       	add	r24, r24
    118a:	88 0f       	add	r24, r24
    118c:	88 0f       	add	r24, r24
    118e:	89 2b       	or	r24, r25
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	db 01       	movw	r26, r22
    1196:	02 c0       	rjmp	.+4      	; 0x119c <check_tap+0x5e>
    1198:	aa 0f       	add	r26, r26
    119a:	bb 1f       	adc	r27, r27
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <check_tap+0x5a>
    11a0:	cd 01       	movw	r24, r26
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	86 2b       	or	r24, r22
    11a8:	97 2b       	or	r25, r23
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
    11ae:	33 c0       	rjmp	.+102    	; 0x1216 <check_tap+0xd8>
		} else {
			sequencer.pattern[sequencer.variation].part[sequencer.part_editing][sequencer.current_step] |= 1<<sequencer.current_inst;
    11b0:	50 91 5b 04 	lds	r21, 0x045B
    11b4:	80 91 60 04 	lds	r24, 0x0460
    11b8:	82 fb       	bst	r24, 2
    11ba:	ee 27       	eor	r30, r30
    11bc:	e0 f9       	bld	r30, 0
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	90 91 5f 04 	lds	r25, 0x045F
    11c4:	92 95       	swap	r25
    11c6:	96 95       	lsr	r25
    11c8:	97 70       	andi	r25, 0x07	; 7
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	88 0f       	add	r24, r24
    11ce:	88 0f       	add	r24, r24
    11d0:	88 0f       	add	r24, r24
    11d2:	89 2b       	or	r24, r25
    11d4:	e2 95       	swap	r30
    11d6:	f2 95       	swap	r31
    11d8:	f0 7f       	andi	r31, 0xF0	; 240
    11da:	fe 27       	eor	r31, r30
    11dc:	e0 7f       	andi	r30, 0xF0	; 240
    11de:	fe 27       	eor	r31, r30
    11e0:	95 2f       	mov	r25, r21
    11e2:	91 70       	andi	r25, 0x01	; 1
    11e4:	b3 e3       	ldi	r27, 0x33	; 51
    11e6:	9b 9f       	mul	r25, r27
    11e8:	e0 0d       	add	r30, r0
    11ea:	f1 1d       	adc	r31, r1
    11ec:	11 24       	eor	r1, r1
    11ee:	e8 0f       	add	r30, r24
    11f0:	f1 1d       	adc	r31, r1
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	e1 57       	subi	r30, 0x71	; 113
    11f8:	fc 4f       	sbci	r31, 0xFC	; 252
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	04 2e       	mov	r0, r20
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <check_tap+0xc8>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <check_tap+0xc4>
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	86 2b       	or	r24, r22
    1210:	97 2b       	or	r25, r23
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
		}
		sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= 1<<sequencer.current_step;
    1216:	80 91 5b 04 	lds	r24, 0x045B
    121a:	28 2f       	mov	r18, r24
    121c:	21 70       	andi	r18, 0x01	; 1
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	83 e3       	ldi	r24, 0x33	; 51
    1222:	82 9f       	mul	r24, r18
    1224:	f0 01       	movw	r30, r0
    1226:	83 9f       	mul	r24, r19
    1228:	f0 0d       	add	r31, r0
    122a:	11 24       	eor	r1, r1
    122c:	e4 0f       	add	r30, r20
    122e:	f1 1d       	adc	r31, r1
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	ed 52       	subi	r30, 0x2D	; 45
    1236:	fc 4f       	sbci	r31, 0xFC	; 252
    1238:	80 91 5f 04 	lds	r24, 0x045F
    123c:	98 2f       	mov	r25, r24
    123e:	92 95       	swap	r25
    1240:	96 95       	lsr	r25
    1242:	97 70       	andi	r25, 0x07	; 7
    1244:	80 91 60 04 	lds	r24, 0x0460
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	88 0f       	add	r24, r24
    124c:	88 0f       	add	r24, r24
    124e:	88 0f       	add	r24, r24
    1250:	89 2b       	or	r24, r25
    1252:	21 e0       	ldi	r18, 0x01	; 1
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	a9 01       	movw	r20, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <check_tap+0x120>
    125a:	44 0f       	add	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <check_tap+0x11c>
    1262:	ca 01       	movw	r24, r20
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	82 2b       	or	r24, r18
    126a:	93 2b       	or	r25, r19
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24
    1270:	08 95       	ret

00001272 <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
    127a:	80 91 8e 03 	lds	r24, 0x038E
    127e:	81 ff       	sbrs	r24, 1
    1280:	8d c0       	rjmp	.+282    	; 0x139c <process_step+0x12a>
			
			//if (sequencer.part_playing == FIRST || sequencer.part_playing == SECOND) {	
				if (flag.next_step) {
    1282:	80 91 8c 03 	lds	r24, 0x038C
    1286:	80 ff       	sbrs	r24, 0
    1288:	90 c0       	rjmp	.+288    	; 0x13aa <process_step+0x138>
					flag.next_step = 0;
    128a:	8e 7f       	andi	r24, 0xFE	; 254
    128c:	80 93 8c 03 	sts	0x038C, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
    1290:	88 70       	andi	r24, 0x08	; 8
    1292:	88 23       	and	r24, r24
    1294:	f1 f3       	breq	.-4      	; 0x1292 <process_step+0x20>
					
					check_tap();
    1296:	0e 94 9f 08 	call	0x113e	; 0x113e <check_tap>
					PORTD |= (1<<TRIG);
    129a:	5d 9a       	sbi	0x0b, 5	; 11
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
    129c:	80 91 60 04 	lds	r24, 0x0460
    12a0:	82 fb       	bst	r24, 2
    12a2:	99 27       	eor	r25, r25
    12a4:	90 f9       	bld	r25, 0
    12a6:	86 95       	lsr	r24
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	98 13       	cpse	r25, r24
    12ac:	37 c0       	rjmp	.+110    	; 0x131c <process_step+0xaa>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    12ae:	80 91 5f 04 	lds	r24, 0x045F
    12b2:	98 2f       	mov	r25, r24
    12b4:	92 95       	swap	r25
    12b6:	96 95       	lsr	r25
    12b8:	97 70       	andi	r25, 0x07	; 7
    12ba:	80 91 60 04 	lds	r24, 0x0460
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	88 0f       	add	r24, r24
    12c2:	88 0f       	add	r24, r24
    12c4:	88 0f       	add	r24, r24
    12c6:	89 2b       	or	r24, r25
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <process_step+0x60>
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <process_step+0x5c>
    12d6:	80 91 5b 04 	lds	r24, 0x045B
    12da:	08 2f       	mov	r16, r24
    12dc:	01 70       	andi	r16, 0x01	; 1
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	80 91 63 04 	lds	r24, 0x0463
    12e4:	93 e3       	ldi	r25, 0x33	; 51
    12e6:	90 9f       	mul	r25, r16
    12e8:	f0 01       	movw	r30, r0
    12ea:	91 9f       	mul	r25, r17
    12ec:	f0 0d       	add	r31, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	e8 0f       	add	r30, r24
    12f2:	f1 1d       	adc	r31, r1
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ed 52       	subi	r30, 0x2D	; 45
    12fa:	fc 4f       	sbci	r31, 0xFC	; 252
    12fc:	90 81       	ld	r25, Z
    12fe:	81 81       	ldd	r24, Z+1	; 0x01
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    1300:	ef e7       	ldi	r30, 0x7F	; 127
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	49 2f       	mov	r20, r25
    1306:	42 23       	and	r20, r18
    1308:	40 95       	com	r20
					check_tap();
					PORTD |= (1<<TRIG);
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    130a:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    130c:	94 23       	and	r25, r20
    130e:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    1310:	98 2f       	mov	r25, r24
    1312:	93 23       	and	r25, r19
    1314:	90 95       	com	r25
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
    1316:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    1318:	89 23       	and	r24, r25
    131a:	80 83       	st	Z, r24
					} else {
						
						
					}

					trigger_step();
    131c:	0e 94 31 01 	call	0x262	; 0x262 <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
    1320:	90 91 5b 04 	lds	r25, 0x045B
    1324:	80 91 60 04 	lds	r24, 0x0460
    1328:	81 fb       	bst	r24, 1
    132a:	22 27       	eor	r18, r18
    132c:	20 f9       	bld	r18, 0
    132e:	c2 2f       	mov	r28, r18
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	d4 2f       	mov	r29, r20
    1334:	91 70       	andi	r25, 0x01	; 1
    1336:	53 e3       	ldi	r21, 0x33	; 51
    1338:	95 9f       	mul	r25, r21
    133a:	c0 0d       	add	r28, r0
    133c:	d1 1d       	adc	r29, r1
    133e:	11 24       	eor	r1, r1
    1340:	cc 0f       	add	r28, r28
    1342:	dd 1f       	adc	r29, r29
    1344:	c1 53       	subi	r28, 0x31	; 49
    1346:	dc 4f       	sbci	r29, 0xFC	; 252
    1348:	90 91 5f 04 	lds	r25, 0x045F
    134c:	92 95       	swap	r25
    134e:	96 95       	lsr	r25
    1350:	97 70       	andi	r25, 0x07	; 7
    1352:	81 70       	andi	r24, 0x01	; 1
    1354:	88 0f       	add	r24, r24
    1356:	88 0f       	add	r24, r24
    1358:	88 0f       	add	r24, r24
    135a:	89 2b       	or	r24, r25
    135c:	28 81       	ld	r18, Y
    135e:	39 81       	ldd	r19, Y+1	; 0x01
    1360:	a9 01       	movw	r20, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <process_step+0xf6>
    1364:	56 95       	lsr	r21
    1366:	47 95       	ror	r20
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <process_step+0xf2>
    136c:	40 ff       	sbrs	r20, 0
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <process_step+0x10e>
						spi_data[8] |= 1<<ACCENT;
    1370:	ef e7       	ldi	r30, 0x7F	; 127
    1372:	f2 e0       	ldi	r31, 0x02	; 2
    1374:	80 85       	ldd	r24, Z+8	; 0x08
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
    137a:	84 e1       	ldi	r24, 0x14	; 20
    137c:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
    1380:	ee e6       	ldi	r30, 0x6E	; 110
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
    138a:	85 b5       	in	r24, 0x25	; 37
    138c:	83 60       	ori	r24, 0x03	; 3
    138e:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
    1390:	80 91 8c 03 	lds	r24, 0x038C
    1394:	87 7f       	andi	r24, 0xF7	; 247
    1396:	80 93 8c 03 	sts	0x038C, r24
    139a:	07 c0       	rjmp	.+14     	; 0x13aa <process_step+0x138>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
    139c:	80 91 8c 03 	lds	r24, 0x038C
    13a0:	80 ff       	sbrs	r24, 0
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <process_step+0x138>
			
			flag.next_step = 0;
    13a4:	8e 7f       	andi	r24, 0xFE	; 254
    13a6:	80 93 8c 03 	sts	0x038C, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <toggle_variation>:
	
}

void toggle_variation(void) {
	
	if (flag.variation_change == 1) {
    13b4:	80 91 8c 03 	lds	r24, 0x038C
    13b8:	82 ff       	sbrs	r24, 2
    13ba:	16 c0       	rjmp	.+44     	; 0x13e8 <toggle_variation+0x34>
		flag.variation_change = 0;
    13bc:	8b 7f       	andi	r24, 0xFB	; 251
    13be:	80 93 8c 03 	sts	0x038C, r24
		switch (sequencer.variation_mode) {
    13c2:	80 91 5c 04 	lds	r24, 0x045C
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	49 f0       	breq	.+18     	; 0x13dc <toggle_variation+0x28>
    13ca:	10 f0       	brcs	.+4      	; 0x13d0 <toggle_variation+0x1c>
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	c1 f4       	brne	.+48     	; 0x1400 <toggle_variation+0x4c>
					
			case VAR_A: case VAR_AB:
			sequencer.variation = VAR_A;
    13d0:	eb e5       	ldi	r30, 0x5B	; 91
    13d2:	f4 e0       	ldi	r31, 0x04	; 4
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	80 83       	st	Z, r24
			break;
    13da:	08 95       	ret
			case VAR_B:
			sequencer.variation = VAR_B;
    13dc:	eb e5       	ldi	r30, 0x5B	; 91
    13de:	f4 e0       	ldi	r31, 0x04	; 4
    13e0:	80 81       	ld	r24, Z
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	80 83       	st	Z, r24
			break;
    13e6:	08 95       	ret
					
					
		}
				
		} else if (sequencer.variation_mode == VAR_AB) {
    13e8:	80 91 5c 04 	lds	r24, 0x045C
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	41 f4       	brne	.+16     	; 0x1400 <toggle_variation+0x4c>
				
		sequencer.variation ^= 1<<0; //toggle state
    13f0:	eb e5       	ldi	r30, 0x5B	; 91
    13f2:	f4 e0       	ldi	r31, 0x04	; 4
    13f4:	80 81       	ld	r24, Z
    13f6:	98 2f       	mov	r25, r24
    13f8:	90 95       	com	r25
    13fa:	90 fb       	bst	r25, 0
    13fc:	80 f9       	bld	r24, 0
    13fe:	80 83       	st	Z, r24
    1400:	08 95       	ret

00001402 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    1402:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    1406:	ed ea       	ldi	r30, 0xAD	; 173
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	88 23       	and	r24, r24
    140e:	ec f7       	brge	.-6      	; 0x140a <spi_shift_byte+0x8>
	return SPDR1;
    1410:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    1414:	08 95       	ret

00001416 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    141a:	cf e7       	ldi	r28, 0x7F	; 127
    141c:	d2 e0       	ldi	r29, 0x02	; 2
    141e:	88 81       	ld	r24, Y
    1420:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    1442:	8e 81       	ldd	r24, Y+6	; 0x06
    1444:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    1448:	8f 81       	ldd	r24, Y+7	; 0x07
    144a:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    144e:	88 85       	ldd	r24, Y+8	; 0x08
    1450:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    1454:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    1456:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <read_switches>:

void read_switches(void) { //reads switch data
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    1462:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
    146a:	ca e7       	ldi	r28, 0x7A	; 122
    146c:	d2 e0       	ldi	r29, 0x02	; 2
    146e:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
    1476:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
    147e:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
    1486:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	0e 94 01 0a 	call	0x1402	; 0x1402 <spi_shift_byte>
    148e:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    1490:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    1492:	28 81       	ld	r18, Y
    1494:	92 2f       	mov	r25, r18
    1496:	96 95       	lsr	r25
    1498:	ee e8       	ldi	r30, 0x8E	; 142
    149a:	f3 e0       	ldi	r31, 0x03	; 3
    149c:	30 81       	ld	r19, Z
    149e:	90 fb       	bst	r25, 0
    14a0:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	49 2f       	mov	r20, r25
    14a6:	42 95       	swap	r20
    14a8:	4f 70       	andi	r20, 0x0F	; 15
    14aa:	40 fb       	bst	r20, 0
    14ac:	32 f9       	bld	r19, 2
    14ae:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    14b0:	e5 e7       	ldi	r30, 0x75	; 117
    14b2:	f2 e0       	ldi	r31, 0x02	; 2
    14b4:	30 81       	ld	r19, Z
    14b6:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    14b8:	32 27       	eor	r19, r18
    14ba:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    14bc:	23 23       	and	r18, r19
    14be:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    14c0:	31 81       	ldd	r19, Z+1	; 0x01
    14c2:	29 81       	ldd	r18, Y+1	; 0x01
    14c4:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    14c6:	32 27       	eor	r19, r18
    14c8:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    14ca:	23 23       	and	r18, r19
    14cc:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    14ce:	22 81       	ldd	r18, Z+2	; 0x02
    14d0:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    14d2:	29 27       	eor	r18, r25
    14d4:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    14d6:	92 23       	and	r25, r18
    14d8:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    14da:	23 81       	ldd	r18, Z+3	; 0x03
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    14e0:	29 27       	eor	r18, r25
    14e2:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    14e4:	92 23       	and	r25, r18
    14e6:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    14e8:	94 81       	ldd	r25, Z+4	; 0x04
    14ea:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    14ec:	98 27       	eor	r25, r24
    14ee:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    14f0:	89 23       	and	r24, r25
    14f2:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    14fe:	da 01       	movw	r26, r20
    1500:	aa 0f       	add	r26, r26
    1502:	bb 1f       	adc	r27, r27
    1504:	a7 5d       	subi	r26, 0xD7	; 215
    1506:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    1508:	8c 91       	ld	r24, X
    150a:	e8 2f       	mov	r30, r24
    150c:	e6 95       	lsr	r30
    150e:	e6 95       	lsr	r30
    1510:	e6 95       	lsr	r30
    1512:	e7 70       	andi	r30, 0x07	; 7
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e6 58       	subi	r30, 0x86	; 134
    1518:	fd 4f       	sbci	r31, 0xFD	; 253
    151a:	20 81       	ld	r18, Z
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	98 2f       	mov	r25, r24
    1520:	97 70       	andi	r25, 0x07	; 7
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <parse_switch_data+0x2e>
    1524:	35 95       	asr	r19
    1526:	27 95       	ror	r18
    1528:	9a 95       	dec	r25
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <parse_switch_data+0x2a>
    152c:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    152e:	86 fb       	bst	r24, 6
    1530:	99 27       	eor	r25, r25
    1532:	90 f9       	bld	r25, 0
    1534:	29 27       	eor	r18, r25
    1536:	20 fb       	bst	r18, 0
    1538:	86 f9       	bld	r24, 6
    153a:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    153c:	4f 5f       	subi	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	43 32       	cpi	r20, 0x23	; 35
    1542:	51 05       	cpc	r21, r1
    1544:	e1 f6       	brne	.-72     	; 0x14fe <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    1546:	08 95       	ret

00001548 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    1548:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    154a:	80 91 88 02 	lds	r24, 0x0288
    154e:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    1550:	89 27       	eor	r24, r25
    1552:	80 93 88 02 	sts	0x0288, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    1556:	89 23       	and	r24, r25
    1558:	80 93 89 02 	sts	0x0289, r24
	uint8_t start_state = sequencer.START;
    155c:	ee e8       	ldi	r30, 0x8E	; 142
    155e:	f3 e0       	ldi	r31, 0x03	; 3
    1560:	90 81       	ld	r25, Z
    1562:	91 fb       	bst	r25, 1
    1564:	22 27       	eor	r18, r18
    1566:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    1568:	86 95       	lsr	r24
    156a:	82 27       	eor	r24, r18
    156c:	80 fb       	bst	r24, 0
    156e:	91 f9       	bld	r25, 1
    1570:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    1572:	91 ff       	sbrs	r25, 1
    1574:	50 c0       	rjmp	.+160    	; 0x1616 <check_start_stop_tap+0xce>
    1576:	21 11       	cpse	r18, r1
    1578:	3c c0       	rjmp	.+120    	; 0x15f2 <check_start_stop_tap+0xaa>
		
		sequencer.current_step = 0;
    157a:	ef e5       	ldi	r30, 0x5F	; 95
    157c:	f4 e0       	ldi	r31, 0x04	; 4
    157e:	80 81       	ld	r24, Z
    1580:	8f 71       	andi	r24, 0x1F	; 31
    1582:	80 83       	st	Z, r24
    1584:	81 81       	ldd	r24, Z+1	; 0x01
    1586:	8e 7f       	andi	r24, 0xFE	; 254
    1588:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
    158a:	80 91 8c 03 	lds	r24, 0x038C
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    158e:	10 92 8b 02 	sts	0x028B, r1
		
		flag.variation_change = 0;
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	8b 7f       	andi	r24, 0xFB	; 251
    1596:	80 93 8c 03 	sts	0x038C, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    159a:	80 91 5c 04 	lds	r24, 0x045C
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	31 f4       	brne	.+12     	; 0x15ae <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    15a2:	eb e5       	ldi	r30, 0x5B	; 91
    15a4:	f4 e0       	ldi	r31, 0x04	; 4
    15a6:	80 81       	ld	r24, Z
    15a8:	8e 7f       	andi	r24, 0xFE	; 254
    15aa:	80 83       	st	Z, r24
    15ac:	22 c0       	rjmp	.+68     	; 0x15f2 <check_start_stop_tap+0xaa>
		} else {
			
			sequencer.variation = VAR_B;
    15ae:	eb e5       	ldi	r30, 0x5B	; 91
    15b0:	f4 e0       	ldi	r31, 0x04	; 4
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	80 83       	st	Z, r24
    15b8:	1c c0       	rjmp	.+56     	; 0x15f2 <check_start_stop_tap+0xaa>
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		if (sequencer.part_playing == SECOND) { //reset part playing
    15ba:	80 91 60 04 	lds	r24, 0x0460
    15be:	81 ff       	sbrs	r24, 1
    15c0:	0b c0       	rjmp	.+22     	; 0x15d8 <check_start_stop_tap+0x90>
			sequencer.part_playing = FIRST;
    15c2:	ef e5       	ldi	r30, 0x5F	; 95
    15c4:	f4 e0       	ldi	r31, 0x04	; 4
    15c6:	81 81       	ldd	r24, Z+1	; 0x01
    15c8:	8d 7f       	andi	r24, 0xFD	; 253
    15ca:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
    15cc:	8b e2       	ldi	r24, 0x2B	; 43
    15ce:	0e 94 64 04 	call	0x8c8	; 0x8c8 <turn_off>
			turn_on (FIRST_PART_LED);	
    15d2:	8a e2       	ldi	r24, 0x2A	; 42
    15d4:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
			
		}
		turn_off_all_inst_leds();
    15d8:	0e 94 96 04 	call	0x92c	; 0x92c <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    15dc:	e0 91 63 04 	lds	r30, 0x0463
    15e0:	87 e0       	ldi	r24, 0x07	; 7
    15e2:	e8 9f       	mul	r30, r24
    15e4:	f0 01       	movw	r30, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	e0 50       	subi	r30, 0x00	; 0
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	85 81       	ldd	r24, Z+5	; 0x05
    15ee:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
		
	} 
	
	if ((sequencer.START && (current_start_stop_tap_state >> TAP) &1)) {
    15f2:	80 91 8e 03 	lds	r24, 0x038E
    15f6:	81 ff       	sbrs	r24, 1
    15f8:	10 c0       	rjmp	.+32     	; 0x161a <check_start_stop_tap+0xd2>
    15fa:	80 91 89 02 	lds	r24, 0x0289
    15fe:	82 ff       	sbrs	r24, 2
    1600:	0c c0       	rjmp	.+24     	; 0x161a <check_start_stop_tap+0xd2>
		
		current_start_stop_tap_state ^= (1<<TAP); //toggle tap switch bit
    1602:	94 e0       	ldi	r25, 0x04	; 4
    1604:	89 27       	eor	r24, r25
    1606:	80 93 89 02 	sts	0x0289, r24
		flag.tap = 1;
    160a:	80 91 8c 03 	lds	r24, 0x038C
    160e:	80 68       	ori	r24, 0x80	; 128
    1610:	80 93 8c 03 	sts	0x038C, r24
    1614:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1616:	21 30       	cpi	r18, 0x01	; 1
    1618:	81 f2       	breq	.-96     	; 0x15ba <check_start_stop_tap+0x72>
    161a:	08 95       	ret

0000161c <check_inst_switches>:
		
	}
	
}
	
void check_inst_switches(void) {
    161c:	2f 92       	push	r2
    161e:	3f 92       	push	r3
    1620:	4f 92       	push	r4
    1622:	5f 92       	push	r5
    1624:	6f 92       	push	r6
    1626:	7f 92       	push	r7
    1628:	8f 92       	push	r8
    162a:	9f 92       	push	r9
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	0f 2e       	mov	r0, r31
    1642:	f3 e0       	ldi	r31, 0x03	; 3
    1644:	af 2e       	mov	r10, r31
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	bf 2e       	mov	r11, r31
    164a:	f0 2d       	mov	r31, r0
    164c:	0f 2e       	mov	r0, r31
    164e:	f5 e0       	ldi	r31, 0x05	; 5
    1650:	8f 2e       	mov	r8, r31
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	9f 2e       	mov	r9, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	0f 2e       	mov	r0, r31
    165a:	f9 e0       	ldi	r31, 0x09	; 9
    165c:	cf 2e       	mov	r12, r31
    165e:	d1 2c       	mov	r13, r1
    1660:	f0 2d       	mov	r31, r0
    1662:	0f 2e       	mov	r0, r31
    1664:	f2 e1       	ldi	r31, 0x12	; 18
    1666:	ef 2e       	mov	r14, r31
    1668:	f1 2c       	mov	r15, r1
    166a:	f0 2d       	mov	r31, r0
    166c:	c1 e1       	ldi	r28, 0x11	; 17
    166e:	d0 e0       	ldi	r29, 0x00	; 0
    1670:	00 e0       	ldi	r16, 0x00	; 0
    1672:	10 e0       	ldi	r17, 0x00	; 0
		
		if (button[i].state) {
			
			button[i].state ^= button[i].state; //toggle state
			
			if (sequencer.SHIFT) {
    1674:	0f 2e       	mov	r0, r31
    1676:	fe e8       	ldi	r31, 0x8E	; 142
    1678:	6f 2e       	mov	r6, r31
    167a:	f3 e0       	ldi	r31, 0x03	; 3
    167c:	7f 2e       	mov	r7, r31
    167e:	f0 2d       	mov	r31, r0
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <check_inst_switches+0x84>
    1682:	0f 5f       	subi	r16, 0xFF	; 255
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	21 96       	adiw	r28, 0x01	; 1
    1688:	2f ef       	ldi	r18, 0xFF	; 255
    168a:	e2 1a       	sub	r14, r18
    168c:	f2 0a       	sbc	r15, r18
    168e:	87 e0       	ldi	r24, 0x07	; 7
    1690:	a8 0e       	add	r10, r24
    1692:	b1 1c       	adc	r11, r1
    1694:	e7 e0       	ldi	r30, 0x07	; 7
    1696:	8e 0e       	add	r8, r30
    1698:	91 1c       	adc	r9, r1
    169a:	ff ef       	ldi	r31, 0xFF	; 255
    169c:	cf 1a       	sub	r12, r31
    169e:	df 0a       	sbc	r13, r31
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    16a0:	fe 01       	movw	r30, r28
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	e7 5d       	subi	r30, 0xD7	; 215
    16a8:	fd 4f       	sbci	r31, 0xFD	; 253
    16aa:	80 81       	ld	r24, Z
    16ac:	86 ff       	sbrs	r24, 6
    16ae:	fe c0       	rjmp	.+508    	; 0x18ac <check_inst_switches+0x290>
			
			button[i].state ^= button[i].state; //toggle state
    16b0:	fe 01       	movw	r30, r28
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	e7 5d       	subi	r30, 0xD7	; 215
    16b8:	fd 4f       	sbci	r31, 0xFD	; 253
    16ba:	8f 7b       	andi	r24, 0xBF	; 191
    16bc:	80 83       	st	Z, r24
			
			if (sequencer.SHIFT) {
    16be:	f3 01       	movw	r30, r6
    16c0:	80 81       	ld	r24, Z
    16c2:	80 ff       	sbrs	r24, 0
    16c4:	bb c0       	rjmp	.+374    	; 0x183c <check_inst_switches+0x220>
				
				if (drum_hit[i-INST_BD_2_SW].switch_bit != NO_SWITCH) { //need to handle toggling between instrument
    16c6:	f5 01       	movw	r30, r10
    16c8:	20 81       	ld	r18, Z
    16ca:	2f 3f       	cpi	r18, 0xFF	; 255
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <check_inst_switches+0xb4>
    16ce:	9e c0       	rjmp	.+316    	; 0x180c <check_inst_switches+0x1f0>
					//maybe evaluate the two drum states as 00, 01, 10, 11 and then use switch case
					uint8_t mute_state = (drum_hit[i - INST_BD_2_SW].muted) | (drum_hit[i - INST_BD_2_SW + 9].muted << 1);
    16d0:	f6 01       	movw	r30, r12
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	ec 19       	sub	r30, r12
    16e0:	fd 09       	sbc	r31, r13
    16e2:	ea 5f       	subi	r30, 0xFA	; 250
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	40 81       	ld	r20, Z
    16e8:	40 fb       	bst	r20, 0
    16ea:	44 24       	eor	r4, r4
    16ec:	40 f8       	bld	r4, 0
    16ee:	51 2c       	mov	r5, r1
    16f0:	a2 01       	movw	r20, r4
    16f2:	44 0f       	add	r20, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	f8 01       	movw	r30, r16
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	e0 1b       	sub	r30, r16
    1706:	f1 0b       	sbc	r31, r17
    1708:	ea 5f       	subi	r30, 0xFA	; 250
    170a:	fe 4f       	sbci	r31, 0xFE	; 254
    170c:	50 81       	ld	r21, Z
    170e:	51 70       	andi	r21, 0x01	; 1
    1710:	45 2b       	or	r20, r21
					switch (mute_state) {
    1712:	41 30       	cpi	r20, 0x01	; 1
    1714:	21 f1       	breq	.+72     	; 0x175e <check_inst_switches+0x142>
    1716:	30 f0       	brcs	.+12     	; 0x1724 <check_inst_switches+0x108>
    1718:	42 30       	cpi	r20, 0x02	; 2
    171a:	f1 f1       	breq	.+124    	; 0x1798 <check_inst_switches+0x17c>
    171c:	43 30       	cpi	r20, 0x03	; 3
    171e:	09 f4       	brne	.+2      	; 0x1722 <check_inst_switches+0x106>
    1720:	58 c0       	rjmp	.+176    	; 0x17d2 <check_inst_switches+0x1b6>
    1722:	c4 c0       	rjmp	.+392    	; 0x18ac <check_inst_switches+0x290>
						
						case 0:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    1724:	f8 01       	movw	r30, r16
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	e0 1b       	sub	r30, r16
    1734:	f1 0b       	sbc	r31, r17
    1736:	ea 5f       	subi	r30, 0xFA	; 250
    1738:	fe 4f       	sbci	r31, 0xFE	; 254
    173a:	80 81       	ld	r24, Z
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;
    1740:	f6 01       	movw	r30, r12
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	ec 19       	sub	r30, r12
    1750:	fd 09       	sbc	r31, r13
    1752:	ea 5f       	subi	r30, 0xFA	; 250
    1754:	fe 4f       	sbci	r31, 0xFE	; 254
    1756:	80 81       	ld	r24, Z
    1758:	8e 7f       	andi	r24, 0xFE	; 254
    175a:	80 83       	st	Z, r24
						break;
    175c:	a7 c0       	rjmp	.+334    	; 0x18ac <check_inst_switches+0x290>
						
						case 1:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    175e:	f8 01       	movw	r30, r16
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e0 1b       	sub	r30, r16
    176e:	f1 0b       	sbc	r31, r17
    1770:	ea 5f       	subi	r30, 0xFA	; 250
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	80 81       	ld	r24, Z
    1776:	8e 7f       	andi	r24, 0xFE	; 254
    1778:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;							
    177a:	f6 01       	movw	r30, r12
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	ee 0f       	add	r30, r30
    1786:	ff 1f       	adc	r31, r31
    1788:	ec 19       	sub	r30, r12
    178a:	fd 09       	sbc	r31, r13
    178c:	ea 5f       	subi	r30, 0xFA	; 250
    178e:	fe 4f       	sbci	r31, 0xFE	; 254
    1790:	80 81       	ld	r24, Z
    1792:	81 60       	ori	r24, 0x01	; 1
    1794:	80 83       	st	Z, r24
						
						break;
    1796:	8a c0       	rjmp	.+276    	; 0x18ac <check_inst_switches+0x290>
						
						case 2:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    1798:	f8 01       	movw	r30, r16
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	e0 1b       	sub	r30, r16
    17a8:	f1 0b       	sbc	r31, r17
    17aa:	ea 5f       	subi	r30, 0xFA	; 250
    17ac:	fe 4f       	sbci	r31, 0xFE	; 254
    17ae:	80 81       	ld	r24, Z
    17b0:	81 60       	ori	r24, 0x01	; 1
    17b2:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;						
    17b4:	f6 01       	movw	r30, r12
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ec 19       	sub	r30, r12
    17c4:	fd 09       	sbc	r31, r13
    17c6:	ea 5f       	subi	r30, 0xFA	; 250
    17c8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ca:	80 81       	ld	r24, Z
    17cc:	81 60       	ori	r24, 0x01	; 1
    17ce:	80 83       	st	Z, r24
						break;
    17d0:	6d c0       	rjmp	.+218    	; 0x18ac <check_inst_switches+0x290>
						
						case 3:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    17d2:	f8 01       	movw	r30, r16
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	e0 1b       	sub	r30, r16
    17e2:	f1 0b       	sbc	r31, r17
    17e4:	ea 5f       	subi	r30, 0xFA	; 250
    17e6:	fe 4f       	sbci	r31, 0xFE	; 254
    17e8:	80 81       	ld	r24, Z
    17ea:	8e 7f       	andi	r24, 0xFE	; 254
    17ec:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;						
    17ee:	f6 01       	movw	r30, r12
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	ee 0f       	add	r30, r30
    17f6:	ff 1f       	adc	r31, r31
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ec 19       	sub	r30, r12
    17fe:	fd 09       	sbc	r31, r13
    1800:	ea 5f       	subi	r30, 0xFA	; 250
    1802:	fe 4f       	sbci	r31, 0xFE	; 254
    1804:	80 81       	ld	r24, Z
    1806:	8e 7f       	andi	r24, 0xFE	; 254
    1808:	80 83       	st	Z, r24
						break;
    180a:	50 c0       	rjmp	.+160    	; 0x18ac <check_inst_switches+0x290>
						
					}
					
				} else {
					
					if (i - INST_BD_2_SW == CP) { //handle clap in the same way, it just doesn't have NO_SWITCH flag
    180c:	c7 31       	cpi	r28, 0x17	; 23
    180e:	d1 05       	cpc	r29, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <check_inst_switches+0x1f8>
    1812:	37 cf       	rjmp	.-402    	; 0x1682 <check_inst_switches+0x66>
						
						
					} else {
					
						drum_hit[i - INST_BD_2_SW].muted ^= 1<<0; //toggle drum mute
    1814:	f8 01       	movw	r30, r16
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	e0 1b       	sub	r30, r16
    1824:	f1 0b       	sbc	r31, r17
    1826:	ea 5f       	subi	r30, 0xFA	; 250
    1828:	fe 4f       	sbci	r31, 0xFE	; 254
    182a:	80 81       	ld	r24, Z
    182c:	98 2f       	mov	r25, r24
    182e:	91 70       	andi	r25, 0x01	; 1
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	92 27       	eor	r25, r18
    1834:	90 fb       	bst	r25, 0
    1836:	80 f9       	bld	r24, 0
    1838:	80 83       	st	Z, r24
    183a:	38 c0       	rjmp	.+112    	; 0x18ac <check_inst_switches+0x290>
					}
				}
				
			} else {	
			
				turn_off_all_inst_leds();
    183c:	0e 94 96 04 	call	0x92c	; 0x92c <turn_off_all_inst_leds>
			
			
				if(drum_hit[i - INST_BD_2_SW].switch_bit != NO_SWITCH) { // need to handle instrument toggle here
    1840:	f5 01       	movw	r30, r10
    1842:	80 81       	ld	r24, Z
    1844:	8f 3f       	cpi	r24, 0xFF	; 255
    1846:	c9 f0       	breq	.+50     	; 0x187a <check_inst_switches+0x25e>
				
				
					if (sequencer.current_inst == i - INST_BD_2_SW) {
    1848:	e3 e6       	ldi	r30, 0x63	; 99
    184a:	f4 e0       	ldi	r31, 0x04	; 4
    184c:	80 81       	ld	r24, Z
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	08 17       	cp	r16, r24
    1852:	19 07       	cpc	r17, r25
    1854:	51 f4       	brne	.+20     	; 0x186a <check_inst_switches+0x24e>
    1856:	f5 01       	movw	r30, r10
    1858:	ef 5b       	subi	r30, 0xBF	; 191
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
						//alternative drum hits are offset by 9 places in drum_hit array
						turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    185c:	80 81       	ld	r24, Z
    185e:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
						sequencer.current_inst = i - INST_BD_2_SW + 9;
    1862:	e3 e6       	ldi	r30, 0x63	; 99
    1864:	f4 e0       	ldi	r31, 0x04	; 4
    1866:	c0 82       	st	Z, r12
    1868:	21 c0       	rjmp	.+66     	; 0x18ac <check_inst_switches+0x290>
					
					} else {
					
						turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    186a:	f4 01       	movw	r30, r8
    186c:	80 81       	ld	r24, Z
    186e:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
						sequencer.current_inst = i - INST_BD_2_SW;
    1872:	e3 e6       	ldi	r30, 0x63	; 99
    1874:	f4 e0       	ldi	r31, 0x04	; 4
    1876:	00 83       	st	Z, r16
    1878:	19 c0       	rjmp	.+50     	; 0x18ac <check_inst_switches+0x290>
					}
				
				
				} else {
				
					if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    187a:	e3 e6       	ldi	r30, 0x63	; 99
    187c:	f4 e0       	ldi	r31, 0x04	; 4
    187e:	80 81       	ld	r24, Z
    1880:	86 30       	cpi	r24, 0x06	; 6
    1882:	69 f4       	brne	.+26     	; 0x189e <check_inst_switches+0x282>
    1884:	c7 31       	cpi	r28, 0x17	; 23
    1886:	d1 05       	cpc	r29, r1
    1888:	51 f4       	brne	.+20     	; 0x189e <check_inst_switches+0x282>
					
						turn_on(drum_hit[MA].led_index);
    188a:	ee e6       	ldi	r30, 0x6E	; 110
    188c:	f1 e0       	ldi	r31, 0x01	; 1
    188e:	80 81       	ld	r24, Z
    1890:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
						sequencer.current_inst = MA;
    1894:	2f e0       	ldi	r18, 0x0F	; 15
    1896:	e3 e6       	ldi	r30, 0x63	; 99
    1898:	f4 e0       	ldi	r31, 0x04	; 4
    189a:	20 83       	st	Z, r18
    189c:	f2 ce       	rjmp	.-540    	; 0x1682 <check_inst_switches+0x66>
					
					} else {
					
						turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    189e:	f4 01       	movw	r30, r8
    18a0:	80 81       	ld	r24, Z
    18a2:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
						sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    18a6:	e3 e6       	ldi	r30, 0x63	; 99
    18a8:	f4 e0       	ldi	r31, 0x04	; 4
    18aa:	00 83       	st	Z, r16
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    18ac:	fc e1       	ldi	r31, 0x1C	; 28
    18ae:	ef 16       	cp	r14, r31
    18b0:	f1 04       	cpc	r15, r1
    18b2:	0c f4       	brge	.+2      	; 0x18b6 <check_inst_switches+0x29a>
    18b4:	e6 ce       	rjmp	.-564    	; 0x1682 <check_inst_switches+0x66>
				//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    18b6:	80 91 49 02 	lds	r24, 0x0249
    18ba:	86 ff       	sbrs	r24, 6
    18bc:	0c c0       	rjmp	.+24     	; 0x18d6 <check_inst_switches+0x2ba>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    18be:	e9 e4       	ldi	r30, 0x49	; 73
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	8f 7b       	andi	r24, 0xBF	; 191
    18c4:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    18c6:	0e 94 96 04 	call	0x92c	; 0x92c <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    18ca:	84 e1       	ldi	r24, 0x14	; 20
    18cc:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
		sequencer.current_inst = AC;
    18d0:	80 e1       	ldi	r24, 0x10	; 16
    18d2:	80 93 63 04 	sts	0x0463, r24
	}
	
}	
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	bf 90       	pop	r11
    18e8:	af 90       	pop	r10
    18ea:	9f 90       	pop	r9
    18ec:	8f 90       	pop	r8
    18ee:	7f 90       	pop	r7
    18f0:	6f 90       	pop	r6
    18f2:	5f 90       	pop	r5
    18f4:	4f 90       	pop	r4
    18f6:	3f 90       	pop	r3
    18f8:	2f 90       	pop	r2
    18fa:	08 95       	ret

000018fc <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    18fc:	80 91 65 02 	lds	r24, 0x0265
    1900:	86 ff       	sbrs	r24, 6
    1902:	29 c0       	rjmp	.+82     	; 0x1956 <check_variation_switches+0x5a>
    1904:	90 91 8e 03 	lds	r25, 0x038E
    1908:	90 fd       	sbrc	r25, 0
    190a:	25 c0       	rjmp	.+74     	; 0x1956 <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    190c:	e5 e6       	ldi	r30, 0x65	; 101
    190e:	f2 e0       	ldi	r31, 0x02	; 2
    1910:	8f 7b       	andi	r24, 0xBF	; 191
    1912:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    1914:	ec e5       	ldi	r30, 0x5C	; 92
    1916:	f4 e0       	ldi	r31, 0x04	; 4
    1918:	80 81       	ld	r24, Z
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	80 83       	st	Z, r24
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	29 f4       	brne	.+10     	; 0x192c <check_variation_switches+0x30>
    1922:	10 92 5c 04 	sts	0x045C, r1
		if (sequencer.START) {
    1926:	91 ff       	sbrs	r25, 1
    1928:	0b c0       	rjmp	.+22     	; 0x1940 <check_variation_switches+0x44>
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <check_variation_switches+0x34>
    192c:	91 ff       	sbrs	r25, 1
    192e:	06 c0       	rjmp	.+12     	; 0x193c <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    1930:	80 91 8c 03 	lds	r24, 0x038C
    1934:	84 60       	ori	r24, 0x04	; 4
    1936:	80 93 8c 03 	sts	0x038C, r24
    193a:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    193c:	8d 7f       	andi	r24, 0xFD	; 253
    193e:	31 f4       	brne	.+12     	; 0x194c <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1940:	eb e5       	ldi	r30, 0x5B	; 91
    1942:	f4 e0       	ldi	r31, 0x04	; 4
    1944:	80 81       	ld	r24, Z
    1946:	8e 7f       	andi	r24, 0xFE	; 254
    1948:	80 83       	st	Z, r24
    194a:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    194c:	eb e5       	ldi	r30, 0x5B	; 91
    194e:	f4 e0       	ldi	r31, 0x04	; 4
    1950:	80 81       	ld	r24, Z
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	80 83       	st	Z, r24
    1956:	08 95       	ret

00001958 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1964:	80 91 8e 03 	lds	r24, 0x038E
    1968:	86 70       	andi	r24, 0x06	; 6
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	09 f0       	breq	.+2      	; 0x1970 <check_clear_switch+0x18>
    196e:	43 c0       	rjmp	.+134    	; 0x19f6 <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    1970:	80 91 8d 03 	lds	r24, 0x038D
    1974:	81 11       	cpse	r24, r1
    1976:	46 c0       	rjmp	.+140    	; 0x1a04 <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    1978:	8c e1       	ldi	r24, 0x1C	; 28
    197a:	0e 94 83 04 	call	0x906	; 0x906 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    197e:	eb e5       	ldi	r30, 0x5B	; 91
    1980:	f4 e0       	ldi	r31, 0x04	; 4
    1982:	80 81       	ld	r24, Z
    1984:	80 fb       	bst	r24, 0
    1986:	ee 24       	eor	r14, r14
    1988:	e0 f8       	bld	r14, 0
    198a:	f1 2c       	mov	r15, r1
    198c:	26 e6       	ldi	r18, 0x66	; 102
    198e:	2e 9d       	mul	r18, r14
    1990:	d0 01       	movw	r26, r0
    1992:	2f 9d       	mul	r18, r15
    1994:	b0 0d       	add	r27, r0
    1996:	11 24       	eor	r1, r1
    1998:	a1 57       	subi	r26, 0x71	; 113
    199a:	bc 4f       	sbci	r27, 0xFC	; 252
    199c:	80 e4       	ldi	r24, 0x40	; 64
    199e:	ed 01       	movw	r28, r26
    19a0:	19 92       	st	Y+, r1
    19a2:	8a 95       	dec	r24
    19a4:	e9 f7       	brne	.-6      	; 0x19a0 <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    19a6:	80 81       	ld	r24, Z
    19a8:	08 2f       	mov	r16, r24
    19aa:	01 70       	andi	r16, 0x01	; 1
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	20 9f       	mul	r18, r16
    19b0:	d0 01       	movw	r26, r0
    19b2:	21 9f       	mul	r18, r17
    19b4:	b0 0d       	add	r27, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	ad 52       	subi	r26, 0x2D	; 45
    19ba:	bc 4f       	sbci	r27, 0xFC	; 252
    19bc:	82 e2       	ldi	r24, 0x22	; 34
    19be:	ed 01       	movw	r28, r26
    19c0:	19 92       	st	Y+, r1
    19c2:	8a 95       	dec	r24
    19c4:	e9 f7       	brne	.-6      	; 0x19c0 <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    19c6:	80 81       	ld	r24, Z
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	c8 2f       	mov	r28, r24
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	d8 2f       	mov	r29, r24
    19d0:	2c 9f       	mul	r18, r28
    19d2:	c0 01       	movw	r24, r0
    19d4:	2d 9f       	mul	r18, r29
    19d6:	90 0d       	add	r25, r0
    19d8:	11 24       	eor	r1, r1
    19da:	83 57       	subi	r24, 0x73	; 115
    19dc:	9c 4f       	sbci	r25, 0xFC	; 252
    19de:	fc 01       	movw	r30, r24
    19e0:	ee 5b       	subi	r30, 0xBE	; 190
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	11 82       	std	Z+1, r1	; 0x01
    19e6:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    19e8:	32 96       	adiw	r30, 0x02	; 2
    19ea:	11 82       	std	Z+1, r1	; 0x01
    19ec:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    19ee:	80 e1       	ldi	r24, 0x10	; 16
    19f0:	80 93 5e 04 	sts	0x045E, r24
				break;
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    19f6:	80 91 8d 03 	lds	r24, 0x038D
    19fa:	81 11       	cpse	r24, r1
    19fc:	03 c0       	rjmp	.+6      	; 0x1a04 <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    19fe:	8c e1       	ldi	r24, 0x1C	; 28
    1a00:	0e 94 46 04 	call	0x88c	; 0x88c <turn_on>
		}
		
	}
	
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	08 95       	ret

00001a12 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1a12:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1a14:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1a16:	74 83       	std	Z+4, r23	; 0x04
    1a18:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1a1a:	11 82       	std	Z+1, r1	; 0x01
    1a1c:	10 82       	st	Z, r1
    1a1e:	08 95       	ret

00001a20 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a2e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <store_and_clear_interrupt>
    1a32:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1a34:	f9 80       	ldd	r15, Y+1	; 0x01
    1a36:	4f 2d       	mov	r20, r15
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a40:	62 2f       	mov	r22, r18
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1a48:	28 81       	ld	r18, Y
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	82 17       	cp	r24, r18
    1a4e:	93 07       	cpc	r25, r19
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1a52:	81 2f       	mov	r24, r17
    1a54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <restore_interrupt_setting>
      return false;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a60:	ef 0d       	add	r30, r15
    1a62:	f1 1d       	adc	r31, r1
    1a64:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1a66:	29 81       	ldd	r18, Y+1	; 0x01
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	c9 01       	movw	r24, r18
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1a76:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1a78:	81 2f       	mov	r24, r17
    1a7a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <restore_interrupt_setting>
      return true;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	08 95       	ret

00001a8c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a92:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1a96:	39 81       	ldd	r19, Y+1	; 0x01
    1a98:	28 81       	ld	r18, Y
    1a9a:	32 17       	cp	r19, r18
    1a9c:	18 f0       	brcs	.+6      	; 0x1aa4 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1a9e:	c3 2f       	mov	r28, r19
    1aa0:	c2 1b       	sub	r28, r18
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <bytequeue_length+0x20>
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	c3 2f       	mov	r28, r19
    1aa8:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1aaa:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1aac:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <restore_interrupt_setting>
   return len;
}
    1ab0:	8c 2f       	mov	r24, r28
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1ab8:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1aba:	80 81       	ld	r24, Z
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	9b 01       	movw	r18, r22
    1ac0:	28 0f       	add	r18, r24
    1ac2:	31 1d       	adc	r19, r1
    1ac4:	c9 01       	movw	r24, r18
    1ac6:	62 81       	ldd	r22, Z+2	; 0x02
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1ace:	03 80       	ldd	r0, Z+3	; 0x03
    1ad0:	f4 81       	ldd	r31, Z+4	; 0x04
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	e8 0f       	add	r30, r24
    1ad6:	f9 1f       	adc	r31, r25
}
    1ad8:	80 81       	ld	r24, Z
    1ada:	08 95       	ret

00001adc <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ec 01       	movw	r28, r24
    1ae4:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1ae6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <store_and_clear_interrupt>
    1aea:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1aec:	88 81       	ld	r24, Y
    1aee:	21 2f       	mov	r18, r17
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	b9 01       	movw	r22, r18
    1af4:	68 0f       	add	r22, r24
    1af6:	71 1d       	adc	r23, r1
    1af8:	cb 01       	movw	r24, r22
    1afa:	6a 81       	ldd	r22, Y+2	; 0x02
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	0e 94 38 10 	call	0x2070	; 0x2070 <__divmodhi4>
    1b02:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1b04:	84 2f       	mov	r24, r20
    1b06:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <restore_interrupt_setting>
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	08 95       	ret

00001b12 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1b12:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1b14:	f8 94       	cli
   return sreg;
}
    1b16:	08 95       	ret

00001b18 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1b18:	8f bf       	out	0x3f, r24	; 63
    1b1a:	08 95       	ret

00001b1c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	88 27       	eor	r24, r24
    1b20:	88 1f       	adc	r24, r24
    1b22:	08 95       	ret

00001b24 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	88 3f       	cpi	r24, 0xF8	; 248
    1b28:	08 f4       	brcc	.+2      	; 0x1b2c <midi_is_realtime+0x8>
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
}
    1b2c:	89 2f       	mov	r24, r25
    1b2e:	08 95       	ret

00001b30 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1b30:	98 2f       	mov	r25, r24
    1b32:	90 7f       	andi	r25, 0xF0	; 240
    1b34:	90 3c       	cpi	r25, 0xC0	; 192
    1b36:	b1 f0       	breq	.+44     	; 0x1b64 <midi_packet_length+0x34>
    1b38:	58 f4       	brcc	.+22     	; 0x1b50 <midi_packet_length+0x20>
    1b3a:	90 39       	cpi	r25, 0x90	; 144
    1b3c:	41 f1       	breq	.+80     	; 0x1b8e <midi_packet_length+0x5e>
    1b3e:	18 f4       	brcc	.+6      	; 0x1b46 <midi_packet_length+0x16>
    1b40:	90 38       	cpi	r25, 0x80	; 128
    1b42:	19 f5       	brne	.+70     	; 0x1b8a <midi_packet_length+0x5a>
    1b44:	24 c0       	rjmp	.+72     	; 0x1b8e <midi_packet_length+0x5e>
    1b46:	90 3a       	cpi	r25, 0xA0	; 160
    1b48:	11 f1       	breq	.+68     	; 0x1b8e <midi_packet_length+0x5e>
    1b4a:	90 3b       	cpi	r25, 0xB0	; 176
    1b4c:	f1 f4       	brne	.+60     	; 0x1b8a <midi_packet_length+0x5a>
    1b4e:	1f c0       	rjmp	.+62     	; 0x1b8e <midi_packet_length+0x5e>
    1b50:	90 3e       	cpi	r25, 0xE0	; 224
    1b52:	e9 f0       	breq	.+58     	; 0x1b8e <midi_packet_length+0x5e>
    1b54:	18 f4       	brcc	.+6      	; 0x1b5c <midi_packet_length+0x2c>
    1b56:	90 3d       	cpi	r25, 0xD0	; 208
    1b58:	29 f0       	breq	.+10     	; 0x1b64 <midi_packet_length+0x34>
    1b5a:	17 c0       	rjmp	.+46     	; 0x1b8a <midi_packet_length+0x5a>
    1b5c:	90 3f       	cpi	r25, 0xF0	; 240
    1b5e:	21 f0       	breq	.+8      	; 0x1b68 <midi_packet_length+0x38>
    1b60:	93 3f       	cpi	r25, 0xF3	; 243
    1b62:	99 f4       	brne	.+38     	; 0x1b8a <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	08 95       	ret
      case 0xF0:
         switch(status) {
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	e1 5f       	subi	r30, 0xF1	; 241
    1b6e:	f1 09       	sbc	r31, r1
    1b70:	ef 30       	cpi	r30, 0x0F	; 15
    1b72:	f1 05       	cpc	r31, r1
    1b74:	40 f4       	brcc	.+16     	; 0x1b86 <midi_packet_length+0x56>
    1b76:	e6 5a       	subi	r30, 0xA6	; 166
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1b94:	08 95       	ret

00001b96 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1b96:	fc 01       	movw	r30, r24
    1b98:	75 83       	std	Z+5, r23	; 0x05
    1b9a:	64 83       	std	Z+4, r22	; 0x04
    1b9c:	08 95       	ret

00001b9e <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	77 83       	std	Z+7, r23	; 0x07
    1ba2:	66 83       	std	Z+6, r22	; 0x06
    1ba4:	08 95       	ret

00001ba6 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	77 8b       	std	Z+23, r23	; 0x17
    1baa:	66 8b       	std	Z+22, r22	; 0x16
    1bac:	08 95       	ret

00001bae <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1bb4:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1bb6:	1f a2       	std	Y+39, r1	; 0x27
    1bb8:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1bba:	bc 01       	movw	r22, r24
    1bbc:	68 5d       	subi	r22, 0xD8	; 216
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	40 ec       	ldi	r20, 0xC0	; 192
    1bc2:	88 51       	subi	r24, 0x18	; 24
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1bca:	1b 82       	std	Y+3, r1	; 0x03
    1bcc:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1bce:	1d 82       	std	Y+5, r1	; 0x05
    1bd0:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1bd2:	1f 82       	std	Y+7, r1	; 0x07
    1bd4:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1bd6:	19 86       	std	Y+9, r1	; 0x09
    1bd8:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1bda:	1b 86       	std	Y+11, r1	; 0x0b
    1bdc:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1bde:	1d 86       	std	Y+13, r1	; 0x0d
    1be0:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1be2:	1f 86       	std	Y+15, r1	; 0x0f
    1be4:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1be6:	19 8a       	std	Y+17, r1	; 0x11
    1be8:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1bea:	1b 8a       	std	Y+19, r1	; 0x13
    1bec:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1bee:	1d 8a       	std	Y+21, r1	; 0x15
    1bf0:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1bf2:	1f 8a       	std	Y+23, r1	; 0x17
    1bf4:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1bf6:	19 8e       	std	Y+25, r1	; 0x19
    1bf8:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1bfa:	1b 8e       	std	Y+27, r1	; 0x1b
    1bfc:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1bfe:	1d 8e       	std	Y+29, r1	; 0x1d
    1c00:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1c02:	1f 8e       	std	Y+31, r1	; 0x1f
    1c04:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1c06:	19 a2       	std	Y+33, r1	; 0x21
    1c08:	18 a2       	std	Y+32, r1	; 0x20
}
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1c1c:	66 23       	and	r22, r22
    1c1e:	99 f0       	breq	.+38     	; 0x1c46 <midi_device_input+0x36>
    1c20:	ea 01       	movw	r28, r20
    1c22:	61 50       	subi	r22, 0x01	; 1
    1c24:	06 2f       	mov	r16, r22
    1c26:	10 e0       	ldi	r17, 0x00	; 0
    1c28:	0f 5f       	subi	r16, 0xFF	; 255
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	04 0f       	add	r16, r20
    1c2e:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1c30:	7c 01       	movw	r14, r24
    1c32:	28 ee       	ldi	r18, 0xE8	; 232
    1c34:	e2 0e       	add	r14, r18
    1c36:	f1 1c       	adc	r15, r1
    1c38:	69 91       	ld	r22, Y+
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1c40:	c0 17       	cp	r28, r16
    1c42:	d1 07       	cpc	r29, r17
    1c44:	c9 f7       	brne	.-14     	; 0x1c38 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	08 95       	ret

00001c54 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <midi_input_callbacks+0x16>
    1c6a:	1f 92       	push	r1
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	7c 01       	movw	r14, r24
    1c72:	6b 01       	movw	r12, r22
    1c74:	14 2f       	mov	r17, r20
    1c76:	b2 2e       	mov	r11, r18
    1c78:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	95 96       	adiw	r26, 0x25	; 37
    1c7e:	8c 91       	ld	r24, X
    1c80:	95 97       	sbiw	r26, 0x25	; 37
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	11 f5       	brne	.+68     	; 0x1cca <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1c86:	5a 96       	adiw	r26, 0x1a	; 26
    1c88:	ed 91       	ld	r30, X+
    1c8a:	fc 91       	ld	r31, X
    1c8c:	5b 97       	sbiw	r26, 0x1b	; 27
    1c8e:	30 97       	sbiw	r30, 0x00	; 0
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <midi_input_callbacks+0x40>
    1c92:	cc c0       	rjmp	.+408    	; 0x1e2c <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1c94:	9b 01       	movw	r18, r22
    1c96:	21 50       	subi	r18, 0x01	; 1
    1c98:	31 09       	sbc	r19, r1
    1c9a:	ab ea       	ldi	r26, 0xAB	; 171
    1c9c:	ba ea       	ldi	r27, 0xAA	; 170
    1c9e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__umulhisi3>
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	82 0f       	add	r24, r18
    1cae:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1cb0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1cb2:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1cb4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1cb6:	4c 2d       	mov	r20, r12
    1cb8:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1cba:	9e 01       	movw	r18, r28
    1cbc:	2f 5f       	subi	r18, 0xFF	; 255
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	68 2f       	mov	r22, r24
    1cc2:	79 2f       	mov	r23, r25
    1cc4:	c7 01       	movw	r24, r14
    1cc6:	09 95       	icall
    1cc8:	be c0       	rjmp	.+380    	; 0x1e46 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1cca:	62 30       	cpi	r22, 0x02	; 2
    1ccc:	71 05       	cpc	r23, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <midi_input_callbacks+0x7e>
    1cd0:	55 c0       	rjmp	.+170    	; 0x1d7c <midi_input_callbacks+0x128>
    1cd2:	63 30       	cpi	r22, 0x03	; 3
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <midi_input_callbacks+0x8e>
    1cd8:	61 30       	cpi	r22, 0x01	; 1
    1cda:	71 05       	cpc	r23, r1
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <midi_input_callbacks+0x8c>
    1cde:	a1 c0       	rjmp	.+322    	; 0x1e22 <midi_input_callbacks+0x1ce>
    1ce0:	88 c0       	rjmp	.+272    	; 0x1df2 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1ce2:	84 2f       	mov	r24, r20
    1ce4:	80 7f       	andi	r24, 0xF0	; 240
    1ce6:	80 3a       	cpi	r24, 0xA0	; 160
    1ce8:	f1 f0       	breq	.+60     	; 0x1d26 <midi_input_callbacks+0xd2>
    1cea:	28 f4       	brcc	.+10     	; 0x1cf6 <midi_input_callbacks+0xa2>
    1cec:	80 38       	cpi	r24, 0x80	; 128
    1cee:	a9 f0       	breq	.+42     	; 0x1d1a <midi_input_callbacks+0xc6>
    1cf0:	80 39       	cpi	r24, 0x90	; 144
    1cf2:	69 f0       	breq	.+26     	; 0x1d0e <midi_input_callbacks+0xba>
    1cf4:	2f c0       	rjmp	.+94     	; 0x1d54 <midi_input_callbacks+0x100>
    1cf6:	80 3e       	cpi	r24, 0xE0	; 224
    1cf8:	e1 f0       	breq	.+56     	; 0x1d32 <midi_input_callbacks+0xde>
    1cfa:	80 3f       	cpi	r24, 0xF0	; 240
    1cfc:	01 f1       	breq	.+64     	; 0x1d3e <midi_input_callbacks+0xea>
    1cfe:	80 3b       	cpi	r24, 0xB0	; 176
    1d00:	49 f5       	brne	.+82     	; 0x1d54 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    1d02:	d7 01       	movw	r26, r14
    1d04:	12 96       	adiw	r26, 0x02	; 2
    1d06:	ed 91       	ld	r30, X+
    1d08:	fc 91       	ld	r31, X
    1d0a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1d0c:	25 c0       	rjmp	.+74     	; 0x1d58 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1d0e:	d7 01       	movw	r26, r14
    1d10:	14 96       	adiw	r26, 0x04	; 4
    1d12:	ed 91       	ld	r30, X+
    1d14:	fc 91       	ld	r31, X
    1d16:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1d18:	1f c0       	rjmp	.+62     	; 0x1d58 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1d1a:	d7 01       	movw	r26, r14
    1d1c:	16 96       	adiw	r26, 0x06	; 6
    1d1e:	ed 91       	ld	r30, X+
    1d20:	fc 91       	ld	r31, X
    1d22:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1d24:	19 c0       	rjmp	.+50     	; 0x1d58 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1d26:	d7 01       	movw	r26, r14
    1d28:	18 96       	adiw	r26, 0x08	; 8
    1d2a:	ed 91       	ld	r30, X+
    1d2c:	fc 91       	ld	r31, X
    1d2e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1d30:	13 c0       	rjmp	.+38     	; 0x1d58 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1d32:	d7 01       	movw	r26, r14
    1d34:	1a 96       	adiw	r26, 0x0a	; 10
    1d36:	ed 91       	ld	r30, X+
    1d38:	fc 91       	ld	r31, X
    1d3a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1d3c:	0d c0       	rjmp	.+26     	; 0x1d58 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1d3e:	42 3f       	cpi	r20, 0xF2	; 242
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <midi_input_callbacks+0xf0>
    1d42:	74 c0       	rjmp	.+232    	; 0x1e2c <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1d44:	d7 01       	movw	r26, r14
    1d46:	1c 96       	adiw	r26, 0x0c	; 12
    1d48:	ed 91       	ld	r30, X+
    1d4a:	fc 91       	ld	r31, X
    1d4c:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1d4e:	30 97       	sbiw	r30, 0x00	; 0
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <midi_input_callbacks+0x10e>
    1d52:	6c c0       	rjmp	.+216    	; 0x1e2c <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1d54:	e0 e0       	ldi	r30, 0x00	; 0
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1d58:	30 97       	sbiw	r30, 0x00	; 0
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <midi_input_callbacks+0x10a>
    1d5c:	67 c0       	rjmp	.+206    	; 0x1e2c <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1d5e:	12 3f       	cpi	r17, 0xF2	; 242
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1d62:	2a 2d       	mov	r18, r10
    1d64:	4b 2d       	mov	r20, r11
    1d66:	62 ef       	ldi	r22, 0xF2	; 242
    1d68:	c7 01       	movw	r24, r14
    1d6a:	09 95       	icall
    1d6c:	6c c0       	rjmp	.+216    	; 0x1e46 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1d6e:	2a 2d       	mov	r18, r10
    1d70:	4b 2d       	mov	r20, r11
    1d72:	61 2f       	mov	r22, r17
    1d74:	6f 70       	andi	r22, 0x0F	; 15
    1d76:	c7 01       	movw	r24, r14
    1d78:	09 95       	icall
    1d7a:	65 c0       	rjmp	.+202    	; 0x1e46 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1d7c:	84 2f       	mov	r24, r20
    1d7e:	80 7f       	andi	r24, 0xF0	; 240
    1d80:	80 3d       	cpi	r24, 0xD0	; 208
    1d82:	51 f0       	breq	.+20     	; 0x1d98 <midi_input_callbacks+0x144>
    1d84:	80 3f       	cpi	r24, 0xF0	; 240
    1d86:	71 f0       	breq	.+28     	; 0x1da4 <midi_input_callbacks+0x150>
    1d88:	80 3c       	cpi	r24, 0xC0	; 192
    1d8a:	01 f5       	brne	.+64     	; 0x1dcc <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1d8c:	d7 01       	movw	r26, r14
    1d8e:	1e 96       	adiw	r26, 0x0e	; 14
    1d90:	ed 91       	ld	r30, X+
    1d92:	fc 91       	ld	r31, X
    1d94:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1d96:	1c c0       	rjmp	.+56     	; 0x1dd0 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1d98:	d7 01       	movw	r26, r14
    1d9a:	50 96       	adiw	r26, 0x10	; 16
    1d9c:	ed 91       	ld	r30, X+
    1d9e:	fc 91       	ld	r31, X
    1da0:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1da2:	16 c0       	rjmp	.+44     	; 0x1dd0 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1da4:	43 3f       	cpi	r20, 0xF3	; 243
    1da6:	41 f4       	brne	.+16     	; 0x1db8 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1da8:	d7 01       	movw	r26, r14
    1daa:	52 96       	adiw	r26, 0x12	; 18
    1dac:	ed 91       	ld	r30, X+
    1dae:	fc 91       	ld	r31, X
    1db0:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1db2:	30 97       	sbiw	r30, 0x00	; 0
    1db4:	99 f4       	brne	.+38     	; 0x1ddc <midi_input_callbacks+0x188>
    1db6:	3a c0       	rjmp	.+116    	; 0x1e2c <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1db8:	41 3f       	cpi	r20, 0xF1	; 241
    1dba:	c1 f5       	brne	.+112    	; 0x1e2c <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1dbc:	d7 01       	movw	r26, r14
    1dbe:	54 96       	adiw	r26, 0x14	; 20
    1dc0:	ed 91       	ld	r30, X+
    1dc2:	fc 91       	ld	r31, X
    1dc4:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1dc6:	30 97       	sbiw	r30, 0x00	; 0
    1dc8:	49 f4       	brne	.+18     	; 0x1ddc <midi_input_callbacks+0x188>
    1dca:	30 c0       	rjmp	.+96     	; 0x1e2c <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1dcc:	e0 e0       	ldi	r30, 0x00	; 0
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1dd0:	30 97       	sbiw	r30, 0x00	; 0
    1dd2:	61 f1       	breq	.+88     	; 0x1e2c <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1dd4:	81 2f       	mov	r24, r17
    1dd6:	8d 7f       	andi	r24, 0xFD	; 253
    1dd8:	81 3f       	cpi	r24, 0xF1	; 241
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1ddc:	4b 2d       	mov	r20, r11
    1dde:	61 2f       	mov	r22, r17
    1de0:	c7 01       	movw	r24, r14
    1de2:	09 95       	icall
    1de4:	30 c0       	rjmp	.+96     	; 0x1e46 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1de6:	4b 2d       	mov	r20, r11
    1de8:	61 2f       	mov	r22, r17
    1dea:	6f 70       	andi	r22, 0x0F	; 15
    1dec:	c7 01       	movw	r24, r14
    1dee:	09 95       	icall
    1df0:	2a c0       	rjmp	.+84     	; 0x1e46 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1df2:	84 2f       	mov	r24, r20
    1df4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <midi_is_realtime>
    1df8:	88 23       	and	r24, r24
    1dfa:	31 f0       	breq	.+12     	; 0x1e08 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1dfc:	d7 01       	movw	r26, r14
    1dfe:	56 96       	adiw	r26, 0x16	; 22
    1e00:	ed 91       	ld	r30, X+
    1e02:	fc 91       	ld	r31, X
    1e04:	57 97       	sbiw	r26, 0x17	; 23
    1e06:	07 c0       	rjmp	.+14     	; 0x1e16 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1e08:	16 3f       	cpi	r17, 0xF6	; 246
    1e0a:	81 f4       	brne	.+32     	; 0x1e2c <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1e0c:	d7 01       	movw	r26, r14
    1e0e:	58 96       	adiw	r26, 0x18	; 24
    1e10:	ed 91       	ld	r30, X+
    1e12:	fc 91       	ld	r31, X
    1e14:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1e16:	30 97       	sbiw	r30, 0x00	; 0
    1e18:	49 f0       	breq	.+18     	; 0x1e2c <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1e1a:	61 2f       	mov	r22, r17
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	09 95       	icall
    1e20:	12 c0       	rjmp	.+36     	; 0x1e46 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1e22:	64 30       	cpi	r22, 0x04	; 4
    1e24:	71 05       	cpc	r23, r1
    1e26:	10 f0       	brcs	.+4      	; 0x1e2c <midi_input_callbacks+0x1d8>
          cnt = 0;
    1e28:	c1 2c       	mov	r12, r1
    1e2a:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1e2c:	d7 01       	movw	r26, r14
    1e2e:	5c 96       	adiw	r26, 0x1c	; 28
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
    1e34:	5d 97       	sbiw	r26, 0x1d	; 29
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	31 f0       	breq	.+12     	; 0x1e46 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1e3a:	0a 2d       	mov	r16, r10
    1e3c:	2b 2d       	mov	r18, r11
    1e3e:	41 2f       	mov	r20, r17
    1e40:	b6 01       	movw	r22, r12
    1e42:	c7 01       	movw	r24, r14
    1e44:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1e46:	d7 01       	movw	r26, r14
    1e48:	5e 96       	adiw	r26, 0x1e	; 30
    1e4a:	ed 91       	ld	r30, X+
    1e4c:	fc 91       	ld	r31, X
    1e4e:	5f 97       	sbiw	r26, 0x1f	; 31
    1e50:	30 97       	sbiw	r30, 0x00	; 0
    1e52:	31 f0       	breq	.+12     	; 0x1e60 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1e54:	0a 2d       	mov	r16, r10
    1e56:	2b 2d       	mov	r18, r11
    1e58:	41 2f       	mov	r20, r17
    1e5a:	b6 01       	movw	r22, r12
    1e5c:	c7 01       	movw	r24, r14
    1e5e:	09 95       	icall
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	df 90       	pop	r13
    1e74:	cf 90       	pop	r12
    1e76:	bf 90       	pop	r11
    1e78:	af 90       	pop	r10
    1e7a:	08 95       	ret

00001e7c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1e7c:	ff 92       	push	r15
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ec 01       	movw	r28, r24
    1e88:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1e8a:	86 2f       	mov	r24, r22
    1e8c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <midi_is_realtime>
    1e90:	88 23       	and	r24, r24
    1e92:	69 f0       	breq	.+26     	; 0x1eae <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1e94:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1e9a:	00 e0       	ldi	r16, 0x00	; 0
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	41 2f       	mov	r20, r17
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <midi_input_callbacks>
    device->input_state = state;
    1eaa:	fd a2       	std	Y+37, r15	; 0x25
    1eac:	a4 c0       	rjmp	.+328    	; 0x1ff6 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1eae:	81 2f       	mov	r24, r17
    1eb0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <midi_is_statusbyte>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <midi_process_byte+0x3e>
    1eb8:	5d c0       	rjmp	.+186    	; 0x1f74 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1eba:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebc:	84 30       	cpi	r24, 0x04	; 4
    1ebe:	29 f0       	breq	.+10     	; 0x1eca <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1ec0:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9f a3       	std	Y+39, r25	; 0x27
    1ec8:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1eca:	81 2f       	mov	r24, r17
    1ecc:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <midi_packet_length>
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	31 f0       	breq	.+12     	; 0x1ee0 <midi_process_byte+0x64>
    1ed4:	b8 f0       	brcs	.+46     	; 0x1f04 <midi_process_byte+0x88>
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	79 f0       	breq	.+30     	; 0x1ef8 <midi_process_byte+0x7c>
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	81 f0       	breq	.+32     	; 0x1efe <midi_process_byte+0x82>
    1ede:	46 c0       	rjmp	.+140    	; 0x1f6c <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1ee4:	00 e0       	ldi	r16, 0x00	; 0
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	41 2f       	mov	r20, r17
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	ce 01       	movw	r24, r28
    1ef0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <midi_input_callbacks>
        device->input_state = IDLE;
    1ef4:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1ef6:	7f c0       	rjmp	.+254    	; 0x1ff6 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1efc:	7c c0       	rjmp	.+248    	; 0x1ff6 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1f02:	79 c0       	rjmp	.+242    	; 0x1ff6 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1f04:	10 3f       	cpi	r17, 0xF0	; 240
    1f06:	19 f0       	breq	.+6      	; 0x1f0e <midi_process_byte+0x92>
    1f08:	17 3f       	cpi	r17, 0xF7	; 247
    1f0a:	51 f0       	breq	.+20     	; 0x1f20 <midi_process_byte+0xa4>
    1f0c:	2b c0       	rjmp	.+86     	; 0x1f64 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1f12:	80 ef       	ldi	r24, 0xF0	; 240
    1f14:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9f a3       	std	Y+39, r25	; 0x27
    1f1c:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1f1e:	6b c0       	rjmp	.+214    	; 0x1ff6 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1f20:	4e a1       	ldd	r20, Y+38	; 0x26
    1f22:	5f a1       	ldd	r21, Y+39	; 0x27
    1f24:	9a 01       	movw	r18, r20
    1f26:	ab ea       	ldi	r26, 0xAB	; 171
    1f28:	ba ea       	ldi	r27, 0xAA	; 170
    1f2a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__umulhisi3>
    1f2e:	96 95       	lsr	r25
    1f30:	87 95       	ror	r24
    1f32:	9c 01       	movw	r18, r24
    1f34:	22 0f       	add	r18, r18
    1f36:	33 1f       	adc	r19, r19
    1f38:	82 0f       	add	r24, r18
    1f3a:	93 1f       	adc	r25, r19
    1f3c:	fa 01       	movw	r30, r20
    1f3e:	e8 1b       	sub	r30, r24
    1f40:	f9 0b       	sbc	r31, r25
    1f42:	ec 0f       	add	r30, r28
    1f44:	fd 1f       	adc	r31, r29
    1f46:	87 ef       	ldi	r24, 0xF7	; 247
    1f48:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1f4a:	ba 01       	movw	r22, r20
    1f4c:	6f 5f       	subi	r22, 0xFF	; 255
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	7f a3       	std	Y+39, r23	; 0x27
    1f52:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1f54:	0c a1       	ldd	r16, Y+36	; 0x24
    1f56:	2b a1       	ldd	r18, Y+35	; 0x23
    1f58:	4a a1       	ldd	r20, Y+34	; 0x22
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1f60:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1f62:	49 c0       	rjmp	.+146    	; 0x1ff6 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1f64:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1f66:	1f a2       	std	Y+39, r1	; 0x27
    1f68:	1e a2       	std	Y+38, r1	; 0x26
    1f6a:	45 c0       	rjmp	.+138    	; 0x1ff6 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1f6c:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1f6e:	1f a2       	std	Y+39, r1	; 0x27
    1f70:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1f72:	41 c0       	rjmp	.+130    	; 0x1ff6 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1f74:	ed a1       	ldd	r30, Y+37	; 0x25
    1f76:	ee 23       	and	r30, r30
    1f78:	f1 f1       	breq	.+124    	; 0x1ff6 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1f7a:	4e a1       	ldd	r20, Y+38	; 0x26
    1f7c:	5f a1       	ldd	r21, Y+39	; 0x27
    1f7e:	9a 01       	movw	r18, r20
    1f80:	ab ea       	ldi	r26, 0xAB	; 171
    1f82:	ba ea       	ldi	r27, 0xAA	; 170
    1f84:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__umulhisi3>
    1f88:	96 95       	lsr	r25
    1f8a:	87 95       	ror	r24
    1f8c:	9c 01       	movw	r18, r24
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	9a 01       	movw	r18, r20
    1f98:	28 1b       	sub	r18, r24
    1f9a:	39 0b       	sbc	r19, r25
    1f9c:	de 01       	movw	r26, r28
    1f9e:	a2 0f       	add	r26, r18
    1fa0:	b3 1f       	adc	r27, r19
    1fa2:	92 96       	adiw	r26, 0x22	; 34
    1fa4:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1fa6:	ba 01       	movw	r22, r20
    1fa8:	6f 5f       	subi	r22, 0xFF	; 255
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	7f a3       	std	Y+39, r23	; 0x27
    1fae:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1fb0:	21 30       	cpi	r18, 0x01	; 1
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	89 f0       	breq	.+34     	; 0x1fd8 <midi_process_byte+0x15c>
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	e9 f4       	brne	.+58     	; 0x1ff6 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1fbc:	0c a1       	ldd	r16, Y+36	; 0x24
    1fbe:	2b a1       	ldd	r18, Y+35	; 0x23
    1fc0:	4a a1       	ldd	r20, Y+34	; 0x22
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	84 30       	cpi	r24, 0x04	; 4
    1fcc:	a1 f0       	breq	.+40     	; 0x1ff6 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9f a3       	std	Y+39, r25	; 0x27
    1fd4:	8e a3       	std	Y+38, r24	; 0x26
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1fd8:	e2 30       	cpi	r30, 0x02	; 2
    1fda:	69 f4       	brne	.+26     	; 0x1ff6 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1fdc:	00 e0       	ldi	r16, 0x00	; 0
    1fde:	2b a1       	ldd	r18, Y+35	; 0x23
    1fe0:	4a a1       	ldd	r20, Y+34	; 0x22
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	21 f0       	breq	.+8      	; 0x1ff6 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9f a3       	std	Y+39, r25	; 0x27
    1ff4:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	08 95       	ret

00002002 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2002:	cf 92       	push	r12
    2004:	df 92       	push	r13
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    2014:	dc 01       	movw	r26, r24
    2016:	90 96       	adiw	r26, 0x20	; 32
    2018:	ed 91       	ld	r30, X+
    201a:	fc 91       	ld	r31, X
    201c:	91 97       	sbiw	r26, 0x21	; 33
    201e:	30 97       	sbiw	r30, 0x00	; 0
    2020:	09 f0       	breq	.+2      	; 0x2024 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    2022:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    2024:	86 01       	movw	r16, r12
    2026:	08 51       	subi	r16, 0x18	; 24
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	c8 01       	movw	r24, r16
    202c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2030:	e8 2e       	mov	r14, r24
    2032:	f1 2c       	mov	r15, r1
    2034:	e1 14       	cp	r14, r1
    2036:	f1 04       	cpc	r15, r1
    2038:	91 f0       	breq	.+36     	; 0x205e <midi_device_process+0x5c>
    203a:	c0 e0       	ldi	r28, 0x00	; 0
    203c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	c8 01       	movw	r24, r16
    2042:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <bytequeue_get>
    2046:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2048:	c6 01       	movw	r24, r12
    204a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	c8 01       	movw	r24, r16
    2052:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2056:	21 96       	adiw	r28, 0x01	; 1
    2058:	ce 15       	cp	r28, r14
    205a:	df 05       	cpc	r29, r15
    205c:	81 f7       	brne	.-32     	; 0x203e <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <__divmodhi4>:
    2070:	97 fb       	bst	r25, 7
    2072:	07 2e       	mov	r0, r23
    2074:	16 f4       	brtc	.+4      	; 0x207a <__divmodhi4+0xa>
    2076:	00 94       	com	r0
    2078:	07 d0       	rcall	.+14     	; 0x2088 <__divmodhi4_neg1>
    207a:	77 fd       	sbrc	r23, 7
    207c:	09 d0       	rcall	.+18     	; 0x2090 <__divmodhi4_neg2>
    207e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__udivmodhi4>
    2082:	07 fc       	sbrc	r0, 7
    2084:	05 d0       	rcall	.+10     	; 0x2090 <__divmodhi4_neg2>
    2086:	3e f4       	brtc	.+14     	; 0x2096 <__divmodhi4_exit>

00002088 <__divmodhi4_neg1>:
    2088:	90 95       	com	r25
    208a:	81 95       	neg	r24
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	08 95       	ret

00002090 <__divmodhi4_neg2>:
    2090:	70 95       	com	r23
    2092:	61 95       	neg	r22
    2094:	7f 4f       	sbci	r23, 0xFF	; 255

00002096 <__divmodhi4_exit>:
    2096:	08 95       	ret

00002098 <__tablejump2__>:
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	05 90       	lpm	r0, Z+
    209e:	f4 91       	lpm	r31, Z
    20a0:	e0 2d       	mov	r30, r0
    20a2:	09 94       	ijmp

000020a4 <__umulhisi3>:
    20a4:	a2 9f       	mul	r26, r18
    20a6:	b0 01       	movw	r22, r0
    20a8:	b3 9f       	mul	r27, r19
    20aa:	c0 01       	movw	r24, r0
    20ac:	a3 9f       	mul	r26, r19
    20ae:	70 0d       	add	r23, r0
    20b0:	81 1d       	adc	r24, r1
    20b2:	11 24       	eor	r1, r1
    20b4:	91 1d       	adc	r25, r1
    20b6:	b2 9f       	mul	r27, r18
    20b8:	70 0d       	add	r23, r0
    20ba:	81 1d       	adc	r24, r1
    20bc:	11 24       	eor	r1, r1
    20be:	91 1d       	adc	r25, r1
    20c0:	08 95       	ret

000020c2 <__udivmodhi4>:
    20c2:	aa 1b       	sub	r26, r26
    20c4:	bb 1b       	sub	r27, r27
    20c6:	51 e1       	ldi	r21, 0x11	; 17
    20c8:	07 c0       	rjmp	.+14     	; 0x20d8 <__udivmodhi4_ep>

000020ca <__udivmodhi4_loop>:
    20ca:	aa 1f       	adc	r26, r26
    20cc:	bb 1f       	adc	r27, r27
    20ce:	a6 17       	cp	r26, r22
    20d0:	b7 07       	cpc	r27, r23
    20d2:	10 f0       	brcs	.+4      	; 0x20d8 <__udivmodhi4_ep>
    20d4:	a6 1b       	sub	r26, r22
    20d6:	b7 0b       	sbc	r27, r23

000020d8 <__udivmodhi4_ep>:
    20d8:	88 1f       	adc	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	5a 95       	dec	r21
    20de:	a9 f7       	brne	.-22     	; 0x20ca <__udivmodhi4_loop>
    20e0:	80 95       	com	r24
    20e2:	90 95       	com	r25
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	08 95       	ret

000020ea <_exit>:
    20ea:	f8 94       	cli

000020ec <__stop_program>:
    20ec:	ff cf       	rjmp	.-2      	; 0x20ec <__stop_program>
