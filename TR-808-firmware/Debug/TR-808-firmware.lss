
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  0000216a  000021fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000216a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  00800270  00800270  0000236e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000236e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056ab  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001506  00000000  00000000  00007ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000163f  00000000  00000000  000093e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be4  00000000  00000000  0000aa28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001107  00000000  00000000  0000b60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022de  00000000  00000000  0000c713  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0000e9f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_33>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	ff 0d       	add	r31, r15
      b6:	fd 0d       	add	r31, r13
      b8:	ff 0d       	add	r31, r15
      ba:	01 0e       	add	r0, r17
      bc:	01 0e       	add	r0, r17
      be:	07 0e       	add	r0, r23
      c0:	01 0e       	add	r0, r17
      c2:	07 0e       	add	r0, r23
      c4:	07 0e       	add	r0, r23
      c6:	07 0e       	add	r0, r23
      c8:	07 0e       	add	r0, r23
      ca:	07 0e       	add	r0, r23
      cc:	01 0e       	add	r0, r17
      ce:	07 0e       	add	r0, r23
      d0:	07 0e       	add	r0, r23

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ea e6       	ldi	r30, 0x6A	; 106
      e6:	f1 e2       	ldi	r31, 0x21	; 33
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a0 37       	cpi	r26, 0x70	; 112
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a0 e7       	ldi	r26, 0x70	; 112
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a5 36       	cpi	r26, 0x65	; 101
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 32 06 	call	0xc64	; 0xc64 <main>
     108:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:



void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,NO_SWITCH, 0, MA_LED},
	{16,8, 1<<ACCENT,NO_SWITCH, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 70 02 	sts	0x0270, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	97 e0       	ldi	r25, 0x07	; 7
     1b0:	89 9f       	mul	r24, r25
     1b2:	f0 01       	movw	r30, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	e0 50       	subi	r30, 0x00	; 0
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	a0 81       	ld	r26, Z
     1bc:	8a 2f       	mov	r24, r26
     1be:	88 1f       	adc	r24, r24
     1c0:	88 27       	eor	r24, r24
     1c2:	88 1f       	adc	r24, r24
     1c4:	a1 81       	ldd	r26, Z+1	; 0x01
     1c6:	a7 70       	andi	r26, 0x07	; 7
     1c8:	aa 0f       	add	r26, r26
     1ca:	a8 2b       	or	r26, r24
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	a1 58       	subi	r26, 0x81	; 129
     1d0:	bd 4f       	sbci	r27, 0xFD	; 253
     1d2:	9c 91       	ld	r25, X
     1d4:	82 81       	ldd	r24, Z+2	; 0x02
     1d6:	89 2b       	or	r24, r25
     1d8:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != NO_SWITCH) {//need to set instrument switch
     1da:	83 81       	ldd	r24, Z+3	; 0x03
     1dc:	8f 3f       	cpi	r24, 0xFF	; 255
     1de:	f1 f0       	breq	.+60     	; 0x21c <trigger_drum+0x7e>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e0:	84 e1       	ldi	r24, 0x14	; 20
     1e2:	0e 94 81 04 	call	0x902	; 0x902 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1e6:	ef e7       	ldi	r30, 0x7F	; 127
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	93 81       	ldd	r25, Z+3	; 0x03
     1ec:	9e 01       	movw	r18, r28
     1ee:	22 0f       	add	r18, r18
     1f0:	33 1f       	adc	r19, r19
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	22 0f       	add	r18, r18
     1f8:	33 1f       	adc	r19, r19
     1fa:	2c 1b       	sub	r18, r28
     1fc:	3d 0b       	sbc	r19, r29
     1fe:	d9 01       	movw	r26, r18
     200:	ac 5f       	subi	r26, 0xFC	; 252
     202:	be 4f       	sbci	r27, 0xFE	; 254
     204:	8c 91       	ld	r24, X
     206:	81 70       	andi	r24, 0x01	; 1
     208:	81 95       	neg	r24
     20a:	89 27       	eor	r24, r25
     20c:	d9 01       	movw	r26, r18
     20e:	a0 50       	subi	r26, 0x00	; 0
     210:	bf 4f       	sbci	r27, 0xFF	; 255
     212:	13 96       	adiw	r26, 0x03	; 3
     214:	2c 91       	ld	r18, X
     216:	82 23       	and	r24, r18
     218:	98 27       	eor	r25, r24
     21a:	93 83       	std	Z+3, r25	; 0x03
					
		}
			
		if (velocity > 64) {
     21c:	11 34       	cpi	r17, 0x41	; 65
     21e:	28 f0       	brcs	.+10     	; 0x22a <trigger_drum+0x8c>
			spi_data[8] |= (1<<ACCENT);
     220:	ef e7       	ldi	r30, 0x7F	; 127
     222:	f2 e0       	ldi	r31, 0x02	; 2
     224:	80 85       	ldd	r24, Z+8	; 0x08
     226:	81 60       	ori	r24, 0x01	; 1
     228:	80 87       	std	Z+8, r24	; 0x08
			
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     22a:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     22c:	0e 94 24 0a 	call	0x1448	; 0x1448 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     230:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     232:	ee e6       	ldi	r30, 0x6E	; 110
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     23c:	85 b5       	in	r24, 0x25	; 37
     23e:	83 60       	ori	r24, 0x03	; 3
     240:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     242:	10 92 77 01 	sts	0x0177, r1
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	08 95       	ret

0000024e <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     24e:	ef e7       	ldi	r30, 0x7F	; 127
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     254:	86 81       	ldd	r24, Z+6	; 0x06
     256:	80 7f       	andi	r24, 0xF0	; 240
     258:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     25a:	87 81       	ldd	r24, Z+7	; 0x07
     25c:	8f 7d       	andi	r24, 0xDF	; 223
     25e:	87 83       	std	Z+7, r24	; 0x07
     260:	08 95       	ret

00000262 <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     262:	3f 92       	push	r3
     264:	4f 92       	push	r4
     266:	5f 92       	push	r5
     268:	6f 92       	push	r6
     26a:	7f 92       	push	r7
     26c:	8f 92       	push	r8
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29

	clear_all_trigs();
     284:	0e 94 27 01 	call	0x24e	; 0x24e <clear_all_trigs>
     288:	05 e0       	ldi	r16, 0x05	; 5
     28a:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     290:	0f 2e       	mov	r0, r31
     292:	f0 e6       	ldi	r31, 0x60	; 96
     294:	8f 2e       	mov	r8, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	9f 2e       	mov	r9, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	0f 2e       	mov	r0, r31
     29e:	fb e5       	ldi	r31, 0x5B	; 91
     2a0:	af 2e       	mov	r10, r31
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	bf 2e       	mov	r11, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	0f 2e       	mov	r0, r31
     2aa:	ff e5       	ldi	r31, 0x5F	; 95
     2ac:	cf 2e       	mov	r12, r31
     2ae:	f4 e0       	ldi	r31, 0x04	; 4
     2b0:	df 2e       	mov	r13, r31
     2b2:	f0 2d       	mov	r31, r0
     2b4:	0f 2e       	mov	r0, r31
     2b6:	f3 e3       	ldi	r31, 0x33	; 51
     2b8:	3f 2e       	mov	r3, r31
     2ba:	f0 2d       	mov	r31, r0
			if (!sequencer.SHIFT) turn_on(drum_hit[i].led_index);
     2bc:	0f 2e       	mov	r0, r31
     2be:	fe e8       	ldi	r31, 0x8E	; 142
     2c0:	4f 2e       	mov	r4, r31
     2c2:	f3 e0       	ldi	r31, 0x03	; 3
     2c4:	5f 2e       	mov	r5, r31
     2c6:	f0 2d       	mov	r31, r0
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2c8:	0f 2e       	mov	r0, r31
     2ca:	ff e7       	ldi	r31, 0x7F	; 127
     2cc:	6f 2e       	mov	r6, r31
     2ce:	f2 e0       	ldi	r31, 0x02	; 2
     2d0:	7f 2e       	mov	r7, r31
     2d2:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2d4:	fe 01       	movw	r30, r28
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	ee 0f       	add	r30, r30
     2dc:	ff 1f       	adc	r31, r31
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ec 1b       	sub	r30, r28
     2e4:	fd 0b       	sbc	r31, r29
     2e6:	ea 5f       	subi	r30, 0xFA	; 250
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	80 81       	ld	r24, Z
     2ec:	80 fd       	sbrc	r24, 0
     2ee:	6f c0       	rjmp	.+222    	; 0x3ce <trigger_step+0x16c>
     2f0:	f4 01       	movw	r30, r8
     2f2:	80 81       	ld	r24, Z
     2f4:	81 fb       	bst	r24, 1
     2f6:	ee 24       	eor	r14, r14
     2f8:	e0 f8       	bld	r14, 0
     2fa:	f1 2c       	mov	r15, r1
     2fc:	f5 01       	movw	r30, r10
     2fe:	20 81       	ld	r18, Z
     300:	f6 01       	movw	r30, r12
     302:	90 81       	ld	r25, Z
     304:	92 95       	swap	r25
     306:	96 95       	lsr	r25
     308:	97 70       	andi	r25, 0x07	; 7
     30a:	81 70       	andi	r24, 0x01	; 1
     30c:	88 0f       	add	r24, r24
     30e:	88 0f       	add	r24, r24
     310:	88 0f       	add	r24, r24
     312:	89 2b       	or	r24, r25
     314:	f7 01       	movw	r30, r14
     316:	e2 95       	swap	r30
     318:	f2 95       	swap	r31
     31a:	f0 7f       	andi	r31, 0xF0	; 240
     31c:	fe 27       	eor	r31, r30
     31e:	e0 7f       	andi	r30, 0xF0	; 240
     320:	fe 27       	eor	r31, r30
     322:	92 2f       	mov	r25, r18
     324:	91 70       	andi	r25, 0x01	; 1
     326:	39 9e       	mul	r3, r25
     328:	e0 0d       	add	r30, r0
     32a:	f1 1d       	adc	r31, r1
     32c:	11 24       	eor	r1, r1
     32e:	e8 0f       	add	r30, r24
     330:	f1 1d       	adc	r31, r1
     332:	ee 0f       	add	r30, r30
     334:	ff 1f       	adc	r31, r31
     336:	e1 57       	subi	r30, 0x71	; 113
     338:	fc 4f       	sbci	r31, 0xFC	; 252
     33a:	80 81       	ld	r24, Z
     33c:	91 81       	ldd	r25, Z+1	; 0x01
     33e:	0c 2e       	mov	r0, r28
     340:	02 c0       	rjmp	.+4      	; 0x346 <trigger_step+0xe4>
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <trigger_step+0xe0>
     34a:	80 ff       	sbrs	r24, 0
     34c:	40 c0       	rjmp	.+128    	; 0x3ce <trigger_step+0x16c>
			if (!sequencer.SHIFT) turn_on(drum_hit[i].led_index);
     34e:	f2 01       	movw	r30, r4
     350:	80 81       	ld	r24, Z
     352:	80 fd       	sbrc	r24, 0
     354:	04 c0       	rjmp	.+8      	; 0x35e <trigger_step+0xfc>
     356:	f8 01       	movw	r30, r16
     358:	80 81       	ld	r24, Z
     35a:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     35e:	de 01       	movw	r26, r28
     360:	aa 0f       	add	r26, r26
     362:	bb 1f       	adc	r27, r27
     364:	aa 0f       	add	r26, r26
     366:	bb 1f       	adc	r27, r27
     368:	aa 0f       	add	r26, r26
     36a:	bb 1f       	adc	r27, r27
     36c:	ac 1b       	sub	r26, r28
     36e:	bd 0b       	sbc	r27, r29
     370:	a0 50       	subi	r26, 0x00	; 0
     372:	bf 4f       	sbci	r27, 0xFF	; 255
     374:	ec 91       	ld	r30, X
     376:	8e 2f       	mov	r24, r30
     378:	88 1f       	adc	r24, r24
     37a:	88 27       	eor	r24, r24
     37c:	88 1f       	adc	r24, r24
     37e:	11 96       	adiw	r26, 0x01	; 1
     380:	ec 91       	ld	r30, X
     382:	e7 70       	andi	r30, 0x07	; 7
     384:	ee 0f       	add	r30, r30
     386:	e8 2b       	or	r30, r24
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	e1 58       	subi	r30, 0x81	; 129
     38c:	fd 4f       	sbci	r31, 0xFD	; 253
     38e:	d8 01       	movw	r26, r16
     390:	13 97       	sbiw	r26, 0x03	; 3
     392:	9c 91       	ld	r25, X
     394:	80 81       	ld	r24, Z
     396:	89 2b       	or	r24, r25
     398:	80 83       	st	Z, r24
     39a:	f8 01       	movw	r30, r16
     39c:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
     39e:	80 81       	ld	r24, Z
     3a0:	8f 3f       	cpi	r24, 0xFF	; 255
     3a2:	a9 f0       	breq	.+42     	; 0x3ce <trigger_step+0x16c>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     3a4:	f3 01       	movw	r30, r6
     3a6:	23 81       	ldd	r18, Z+3	; 0x03
     3a8:	fe 01       	movw	r30, r28
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	ec 1b       	sub	r30, r28
     3b8:	fd 0b       	sbc	r31, r29
     3ba:	ec 5f       	subi	r30, 0xFC	; 252
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254
     3be:	90 81       	ld	r25, Z
     3c0:	91 70       	andi	r25, 0x01	; 1
     3c2:	91 95       	neg	r25
     3c4:	92 27       	eor	r25, r18
     3c6:	89 23       	and	r24, r25
     3c8:	82 27       	eor	r24, r18
     3ca:	f3 01       	movw	r30, r6
     3cc:	83 83       	std	Z+3, r24	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3ce:	21 96       	adiw	r28, 0x01	; 1
     3d0:	09 5f       	subi	r16, 0xF9	; 249
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
     3d4:	c0 31       	cpi	r28, 0x10	; 16
     3d6:	d1 05       	cpc	r29, r1
     3d8:	09 f0       	breq	.+2      	; 0x3dc <trigger_step+0x17a>
     3da:	7c cf       	rjmp	.-264    	; 0x2d4 <trigger_step+0x72>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	7f 90       	pop	r7
     3f6:	6f 90       	pop	r6
     3f8:	5f 90       	pop	r5
     3fa:	4f 90       	pop	r4
     3fc:	3f 90       	pop	r3
     3fe:	08 95       	ret

00000400 <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     400:	80 91 4b 02 	lds	r24, 0x024B
     404:	86 ff       	sbrs	r24, 6
     406:	08 c0       	rjmp	.+16     	; 0x418 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     408:	eb e4       	ldi	r30, 0x4B	; 75
     40a:	f2 e0       	ldi	r31, 0x02	; 2
     40c:	8f 7b       	andi	r24, 0xBF	; 191
     40e:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     418:	80 91 4d 02 	lds	r24, 0x024D
     41c:	86 ff       	sbrs	r24, 6
     41e:	08 c0       	rjmp	.+16     	; 0x430 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     420:	ed e4       	ldi	r30, 0x4D	; 77
     422:	f2 e0       	ldi	r31, 0x02	; 2
     424:	8f 7b       	andi	r24, 0xBF	; 191
     426:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     430:	80 91 4f 02 	lds	r24, 0x024F
     434:	86 ff       	sbrs	r24, 6
     436:	08 c0       	rjmp	.+16     	; 0x448 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     438:	ef e4       	ldi	r30, 0x4F	; 79
     43a:	f2 e0       	ldi	r31, 0x02	; 2
     43c:	8f 7b       	andi	r24, 0xBF	; 191
     43e:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     448:	80 91 51 02 	lds	r24, 0x0251
     44c:	86 ff       	sbrs	r24, 6
     44e:	08 c0       	rjmp	.+16     	; 0x460 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     450:	e1 e5       	ldi	r30, 0x51	; 81
     452:	f2 e0       	ldi	r31, 0x02	; 2
     454:	8f 7b       	andi	r24, 0xBF	; 191
     456:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     460:	80 91 53 02 	lds	r24, 0x0253
     464:	86 ff       	sbrs	r24, 6
     466:	08 c0       	rjmp	.+16     	; 0x478 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     468:	e3 e5       	ldi	r30, 0x53	; 83
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	8f 7b       	andi	r24, 0xBF	; 191
     46e:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     478:	80 91 55 02 	lds	r24, 0x0255
     47c:	86 ff       	sbrs	r24, 6
     47e:	08 c0       	rjmp	.+16     	; 0x490 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     480:	e5 e5       	ldi	r30, 0x55	; 85
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	8f 7b       	andi	r24, 0xBF	; 191
     486:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	85 e0       	ldi	r24, 0x05	; 5
     48c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     490:	80 91 57 02 	lds	r24, 0x0257
     494:	86 ff       	sbrs	r24, 6
     496:	08 c0       	rjmp	.+16     	; 0x4a8 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     498:	e7 e5       	ldi	r30, 0x57	; 87
     49a:	f2 e0       	ldi	r31, 0x02	; 2
     49c:	8f 7b       	andi	r24, 0xBF	; 191
     49e:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	86 e0       	ldi	r24, 0x06	; 6
     4a4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     4a8:	80 91 59 02 	lds	r24, 0x0259
     4ac:	86 ff       	sbrs	r24, 6
     4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     4b0:	e9 e5       	ldi	r30, 0x59	; 89
     4b2:	f2 e0       	ldi	r31, 0x02	; 2
     4b4:	8f 7b       	andi	r24, 0xBF	; 191
     4b6:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	87 e0       	ldi	r24, 0x07	; 7
     4bc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     4c0:	80 91 5b 02 	lds	r24, 0x025B
     4c4:	86 ff       	sbrs	r24, 6
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     4c8:	eb e5       	ldi	r30, 0x5B	; 91
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	8f 7b       	andi	r24, 0xBF	; 191
     4ce:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	88 e0       	ldi	r24, 0x08	; 8
     4d4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4d8:	80 91 5d 02 	lds	r24, 0x025D
     4dc:	86 ff       	sbrs	r24, 6
     4de:	08 c0       	rjmp	.+16     	; 0x4f0 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4e0:	ed e5       	ldi	r30, 0x5D	; 93
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	8f 7b       	andi	r24, 0xBF	; 191
     4e6:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4f0:	80 91 5f 02 	lds	r24, 0x025F
     4f4:	86 ff       	sbrs	r24, 6
     4f6:	08 c0       	rjmp	.+16     	; 0x508 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4f8:	ef e5       	ldi	r30, 0x5F	; 95
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
     4fc:	8f 7b       	andi	r24, 0xBF	; 191
     4fe:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     508:	08 95       	ret

0000050a <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	8f 93       	push	r24
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     51a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     51c:	ee e6       	ldi	r30, 0x6E	; 110
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	8d 7f       	andi	r24, 0xFD	; 253
     524:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     526:	80 91 8c 03 	lds	r24, 0x038C
     52a:	88 60       	ori	r24, 0x08	; 8
     52c:	80 93 8c 03 	sts	0x038C, r24
	
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <__vector_33>:

ISR (TIMER3_COMPA_vect) { //led flashing interrupt. Will this be too much overhead to do something simple like flash LEDs?
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
	
	//turn_off_all_inst_leds();
	//update_inst_leds();
	
}
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	4f 93       	push	r20
     568:	5f 93       	push	r21
     56a:	6f 93       	push	r22
     56c:	7f 93       	push	r23
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
     572:	af 93       	push	r26
     574:	bf 93       	push	r27
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ef 93       	push	r30
     57c:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	//update_inst_leds();
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     57e:	ea e8       	ldi	r30, 0x8A	; 138
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	81 81       	ldd	r24, Z+1	; 0x01
     584:	8f 5f       	subi	r24, 0xFF	; 255
     586:	81 83       	std	Z+1, r24	; 0x01
     588:	90 81       	ld	r25, Z
     58a:	89 13       	cpse	r24, r25
     58c:	96 c0       	rjmp	.+300    	; 0x6ba <__vector_11+0x166>
	{
		flag.next_step = 1;
     58e:	80 91 8c 03 	lds	r24, 0x038C
     592:	81 60       	ori	r24, 0x01	; 1
     594:	80 93 8c 03 	sts	0x038C, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     598:	ec e8       	ldi	r30, 0x8C	; 140
     59a:	f2 e0       	ldi	r31, 0x02	; 2
     59c:	80 81       	ld	r24, Z
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	98 0f       	add	r25, r24
     5a2:	93 70       	andi	r25, 0x03	; 3
     5a4:	8c 7f       	andi	r24, 0xFC	; 252
     5a6:	89 2b       	or	r24, r25
     5a8:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     5aa:	10 92 8b 02 	sts	0x028B, r1
		if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) { 
     5ae:	ef e5       	ldi	r30, 0x5F	; 95
     5b0:	f4 e0       	ldi	r31, 0x04	; 4
     5b2:	90 81       	ld	r25, Z
     5b4:	89 2f       	mov	r24, r25
     5b6:	82 95       	swap	r24
     5b8:	86 95       	lsr	r24
     5ba:	87 70       	andi	r24, 0x07	; 7
     5bc:	20 91 60 04 	lds	r18, 0x0460
     5c0:	21 70       	andi	r18, 0x01	; 1
     5c2:	22 0f       	add	r18, r18
     5c4:	22 0f       	add	r18, r18
     5c6:	22 0f       	add	r18, r18
     5c8:	28 2b       	or	r18, r24
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	82 0f       	add	r24, r18
     5ce:	38 2f       	mov	r19, r24
     5d0:	32 95       	swap	r19
     5d2:	33 0f       	add	r19, r19
     5d4:	30 7e       	andi	r19, 0xE0	; 224
     5d6:	9f 71       	andi	r25, 0x1F	; 31
     5d8:	93 2b       	or	r25, r19
     5da:	90 83       	st	Z, r25
     5dc:	83 fb       	bst	r24, 3
     5de:	99 27       	eor	r25, r25
     5e0:	90 f9       	bld	r25, 0
     5e2:	81 81       	ldd	r24, Z+1	; 0x01
     5e4:	8e 7f       	andi	r24, 0xFE	; 254
     5e6:	89 2b       	or	r24, r25
     5e8:	81 83       	std	Z+1, r24	; 0x01
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	81 fb       	bst	r24, 1
     5ee:	44 27       	eor	r20, r20
     5f0:	40 f9       	bld	r20, 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	43 57       	subi	r20, 0x73	; 115
     5f6:	5c 4f       	sbci	r21, 0xFC	; 252
     5f8:	fa 01       	movw	r30, r20
     5fa:	e0 53       	subi	r30, 0x30	; 48
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	80 81       	ld	r24, Z
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	28 17       	cp	r18, r24
     604:	39 07       	cpc	r19, r25
     606:	09 f0       	breq	.+2      	; 0x60a <__vector_11+0xb6>
     608:	58 c0       	rjmp	.+176    	; 0x6ba <__vector_11+0x166>
     60a:	80 91 8e 03 	lds	r24, 0x038E
     60e:	81 ff       	sbrs	r24, 1
     610:	54 c0       	rjmp	.+168    	; 0x6ba <__vector_11+0x166>
			flag.new_measure = 1;
     612:	80 91 8c 03 	lds	r24, 0x038C
     616:	80 62       	ori	r24, 0x20	; 32
     618:	80 93 8c 03 	sts	0x038C, r24
			sequencer.current_step = 0;
     61c:	ef e5       	ldi	r30, 0x5F	; 95
     61e:	f4 e0       	ldi	r31, 0x04	; 4
     620:	80 81       	ld	r24, Z
     622:	8f 71       	andi	r24, 0x1F	; 31
     624:	80 83       	st	Z, r24
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	8e 7f       	andi	r24, 0xFE	; 254
     62a:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying exception handler
     62c:	80 91 5e 04 	lds	r24, 0x045E
     630:	80 31       	cpi	r24, 0x10	; 16
     632:	09 f1       	breq	.+66     	; 0x676 <__vector_11+0x122>
				
				if (sequencer.part_playing == SECOND) {
     634:	80 91 60 04 	lds	r24, 0x0460
     638:	81 ff       	sbrs	r24, 1
     63a:	09 c0       	rjmp	.+18     	; 0x64e <__vector_11+0xfa>
					turn_off(SECOND_PART_LED);
     63c:	8b e2       	ldi	r24, 0x2B	; 43
     63e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <turn_off>
					turn_on(FIRST_PART_LED);
     642:	8a e2       	ldi	r24, 0x2A	; 42
     644:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
					toggle_variation(); //only toggle variation at the end of the 2nd part
     648:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <toggle_variation>
     64c:	06 c0       	rjmp	.+12     	; 0x65a <__vector_11+0x106>
				} else {
					turn_off(FIRST_PART_LED); 
     64e:	8a e2       	ldi	r24, 0x2A	; 42
     650:	0e 94 62 04 	call	0x8c4	; 0x8c4 <turn_off>
					turn_on(SECOND_PART_LED);
     654:	8b e2       	ldi	r24, 0x2B	; 43
     656:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
				}
				sequencer.part_playing ^= 1 << 0;
     65a:	80 91 60 04 	lds	r24, 0x0460
     65e:	81 fb       	bst	r24, 1
     660:	99 27       	eor	r25, r25
     662:	90 f9       	bld	r25, 0
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	89 27       	eor	r24, r25
     668:	ef e5       	ldi	r30, 0x5F	; 95
     66a:	f4 e0       	ldi	r31, 0x04	; 4
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	80 fb       	bst	r24, 0
     670:	91 f9       	bld	r25, 1
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	02 c0       	rjmp	.+4      	; 0x67a <__vector_11+0x126>
			} else { 
	
				toggle_variation(); //no second part, so toggle variation 
     676:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <toggle_variation>
				
			}
			//update step number
			sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
     67a:	80 91 60 04 	lds	r24, 0x0460
     67e:	82 fb       	bst	r24, 2
     680:	00 27       	eor	r16, r16
     682:	00 f9       	bld	r16, 0
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	03 57       	subi	r16, 0x73	; 115
     688:	1c 4f       	sbci	r17, 0xFC	; 252
     68a:	f8 01       	movw	r30, r16
     68c:	e0 53       	subi	r30, 0x30	; 48
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	80 91 5f 04 	lds	r24, 0x045F
     694:	8f 71       	andi	r24, 0x1F	; 31
     696:	80 83       	st	Z, r24
			update_step_led_mask();
     698:	0e 94 dd 04 	call	0x9ba	; 0x9ba <update_step_led_mask>
			
			//handle pre-scale change
			if (flag.pre_scale_change) {
     69c:	80 91 8c 03 	lds	r24, 0x038C
     6a0:	86 ff       	sbrs	r24, 6
     6a2:	0b c0       	rjmp	.+22     	; 0x6ba <__vector_11+0x166>
				
				flag.pre_scale_change = 0;
     6a4:	8f 7b       	andi	r24, 0xBF	; 191
     6a6:	80 93 8c 03 	sts	0x038C, r24
				internal_clock.divider = pre_scale[pre_scale_index];
     6aa:	e0 91 28 02 	lds	r30, 0x0228
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	ec 5d       	subi	r30, 0xDC	; 220
     6b2:	fd 4f       	sbci	r31, 0xFD	; 253
     6b4:	80 81       	ld	r24, Z
     6b6:	80 93 8a 02 	sts	0x028A, r24
	
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     6ba:	ea e8       	ldi	r30, 0x8A	; 138
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	80 81       	ld	r24, Z
     6c0:	86 95       	lsr	r24
     6c2:	91 81       	ldd	r25, Z+1	; 0x01
     6c4:	98 13       	cpse	r25, r24
     6c6:	cb c0       	rjmp	.+406    	; 0x85e <__vector_11+0x30a>
		flag.half_step = 1;
     6c8:	80 91 8c 03 	lds	r24, 0x038C
     6cc:	82 60       	ori	r24, 0x02	; 2
     6ce:	80 93 8c 03 	sts	0x038C, r24
		turn_off_all_inst_leds();
     6d2:	0e 94 94 04 	call	0x928	; 0x928 <turn_off_all_inst_leds>
		if (!sequencer.SHIFT) turn_on(drum_hit[sequencer.current_inst].led_index);
     6d6:	80 91 8e 03 	lds	r24, 0x038E
     6da:	80 fd       	sbrc	r24, 0
     6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <__vector_11+0x1a0>
     6de:	e0 91 63 04 	lds	r30, 0x0463
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	e8 9f       	mul	r30, r24
     6e6:	f0 01       	movw	r30, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	e0 50       	subi	r30, 0x00	; 0
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	85 81       	ldd	r24, Z+5	; 0x05
     6f0:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     6f4:	30 91 e4 01 	lds	r19, 0x01E4
     6f8:	20 91 e7 01 	lds	r18, 0x01E7
     6fc:	ef e7       	ldi	r30, 0x7F	; 127
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	82 2f       	mov	r24, r18
     702:	83 2b       	or	r24, r19
     704:	80 95       	com	r24
     706:	95 81       	ldd	r25, Z+5	; 0x05
     708:	89 23       	and	r24, r25
     70a:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     70c:	80 91 8e 03 	lds	r24, 0x038E
     710:	81 ff       	sbrs	r24, 1
     712:	77 c0       	rjmp	.+238    	; 0x802 <__vector_11+0x2ae>
	
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     714:	80 91 5b 04 	lds	r24, 0x045B
     718:	81 70       	andi	r24, 0x01	; 1
     71a:	c8 2f       	mov	r28, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	d8 2f       	mov	r29, r24
     720:	80 91 63 04 	lds	r24, 0x0463
     724:	93 e3       	ldi	r25, 0x33	; 51
     726:	9c 9f       	mul	r25, r28
     728:	f0 01       	movw	r30, r0
     72a:	9d 9f       	mul	r25, r29
     72c:	f0 0d       	add	r31, r0
     72e:	11 24       	eor	r1, r1
     730:	e8 0f       	add	r30, r24
     732:	f1 1d       	adc	r31, r1
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	ed 52       	subi	r30, 0x2D	; 45
     73a:	fc 4f       	sbci	r31, 0xFC	; 252
     73c:	90 81       	ld	r25, Z
     73e:	81 81       	ldd	r24, Z+1	; 0x01
     740:	ef e7       	ldi	r30, 0x7F	; 127
     742:	f2 e0       	ldi	r31, 0x02	; 2
     744:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     746:	80 83       	st	Z, r24

			//turn_off_all_inst_leds();
			//if (!sequencer.SHIFT) turn_on(drum_hit[sequencer.current_inst].led_index);
								
			switch (sequencer.variation_mode) {
     748:	40 91 5c 04 	lds	r20, 0x045C
     74c:	41 30       	cpi	r20, 0x01	; 1
     74e:	39 f0       	breq	.+14     	; 0x75e <__vector_11+0x20a>
     750:	18 f0       	brcs	.+6      	; 0x758 <__vector_11+0x204>
     752:	42 30       	cpi	r20, 0x02	; 2
     754:	71 f0       	breq	.+28     	; 0x772 <__vector_11+0x21e>
     756:	16 c0       	rjmp	.+44     	; 0x784 <__vector_11+0x230>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     758:	30 93 64 04 	sts	0x0464, r19
					break;					
     75c:	13 c0       	rjmp	.+38     	; 0x784 <__vector_11+0x230>
				case VAR_B:
					if (flag.variation_change == 1) {
     75e:	80 91 8c 03 	lds	r24, 0x038C
     762:	82 ff       	sbrs	r24, 2
     764:	03 c0       	rjmp	.+6      	; 0x76c <__vector_11+0x218>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     766:	30 93 64 04 	sts	0x0464, r19
     76a:	0c c0       	rjmp	.+24     	; 0x784 <__vector_11+0x230>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     76c:	20 93 64 04 	sts	0x0464, r18
     770:	09 c0       	rjmp	.+18     	; 0x784 <__vector_11+0x230>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     772:	80 91 5b 04 	lds	r24, 0x045B
     776:	80 fd       	sbrc	r24, 0
     778:	03 c0       	rjmp	.+6      	; 0x780 <__vector_11+0x22c>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     77a:	30 93 64 04 	sts	0x0464, r19
     77e:	02 c0       	rjmp	.+4      	; 0x784 <__vector_11+0x230>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     780:	20 93 64 04 	sts	0x0464, r18
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     784:	80 91 8c 02 	lds	r24, 0x028C
     788:	83 70       	andi	r24, 0x03	; 3
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	02 97       	sbiw	r24, 0x02	; 2
     78e:	0c f0       	brlt	.+2      	; 0x792 <__vector_11+0x23e>
     790:	5f c0       	rjmp	.+190    	; 0x850 <__vector_11+0x2fc>
				
				if (flag.variation_change == 1) {
     792:	80 91 8c 03 	lds	r24, 0x038C
     796:	82 ff       	sbrs	r24, 2
     798:	22 c0       	rjmp	.+68     	; 0x7de <__vector_11+0x28a>
					
					switch (sequencer.variation_mode) {
     79a:	41 30       	cpi	r20, 0x01	; 1
     79c:	51 f0       	breq	.+20     	; 0x7b2 <__vector_11+0x25e>
     79e:	18 f0       	brcs	.+6      	; 0x7a6 <__vector_11+0x252>
     7a0:	42 30       	cpi	r20, 0x02	; 2
     7a2:	69 f0       	breq	.+26     	; 0x7be <__vector_11+0x26a>
     7a4:	1c c0       	rjmp	.+56     	; 0x7de <__vector_11+0x28a>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7a6:	e4 e6       	ldi	r30, 0x64	; 100
     7a8:	f4 e0       	ldi	r31, 0x04	; 4
     7aa:	80 81       	ld	r24, Z
     7ac:	28 2b       	or	r18, r24
     7ae:	20 83       	st	Z, r18
							break;
     7b0:	4f c0       	rjmp	.+158    	; 0x850 <__vector_11+0x2fc>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7b2:	e4 e6       	ldi	r30, 0x64	; 100
     7b4:	f4 e0       	ldi	r31, 0x04	; 4
     7b6:	80 81       	ld	r24, Z
     7b8:	28 2b       	or	r18, r24
     7ba:	20 83       	st	Z, r18
     7bc:	49 c0       	rjmp	.+146    	; 0x850 <__vector_11+0x2fc>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     7be:	80 91 5b 04 	lds	r24, 0x045B
     7c2:	80 fd       	sbrc	r24, 0
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <__vector_11+0x27e>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7c6:	e4 e6       	ldi	r30, 0x64	; 100
     7c8:	f4 e0       	ldi	r31, 0x04	; 4
     7ca:	80 81       	ld	r24, Z
     7cc:	82 2b       	or	r24, r18
     7ce:	80 83       	st	Z, r24
     7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <__vector_11+0x28e>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7d2:	e4 e6       	ldi	r30, 0x64	; 100
     7d4:	f4 e0       	ldi	r31, 0x04	; 4
     7d6:	80 81       	ld	r24, Z
     7d8:	83 2b       	or	r24, r19
     7da:	80 83       	st	Z, r24
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <__vector_11+0x28e>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     7de:	42 30       	cpi	r20, 0x02	; 2
     7e0:	b9 f5       	brne	.+110    	; 0x850 <__vector_11+0x2fc>
						if (sequencer.variation == VAR_A) {
     7e2:	80 91 5b 04 	lds	r24, 0x045B
     7e6:	80 fd       	sbrc	r24, 0
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <__vector_11+0x2a2>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7ea:	e4 e6       	ldi	r30, 0x64	; 100
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	80 81       	ld	r24, Z
     7f0:	28 2b       	or	r18, r24
     7f2:	20 83       	st	Z, r18
     7f4:	2d c0       	rjmp	.+90     	; 0x850 <__vector_11+0x2fc>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7f6:	e4 e6       	ldi	r30, 0x64	; 100
     7f8:	f4 e0       	ldi	r31, 0x04	; 4
     7fa:	80 81       	ld	r24, Z
     7fc:	38 2b       	or	r19, r24
     7fe:	30 83       	st	Z, r19
     800:	27 c0       	rjmp	.+78     	; 0x850 <__vector_11+0x2fc>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     802:	ef e7       	ldi	r30, 0x7F	; 127
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     808:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     80a:	40 91 5c 04 	lds	r20, 0x045C
     80e:	41 30       	cpi	r20, 0x01	; 1
     810:	31 f0       	breq	.+12     	; 0x81e <__vector_11+0x2ca>
     812:	10 f0       	brcs	.+4      	; 0x818 <__vector_11+0x2c4>
     814:	42 30       	cpi	r20, 0x02	; 2
     816:	61 f4       	brne	.+24     	; 0x830 <__vector_11+0x2dc>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     818:	30 93 64 04 	sts	0x0464, r19
				break;
     81c:	09 c0       	rjmp	.+18     	; 0x830 <__vector_11+0x2dc>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     81e:	20 93 64 04 	sts	0x0464, r18
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     822:	80 91 8c 02 	lds	r24, 0x028C
     826:	83 70       	andi	r24, 0x03	; 3
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	02 97       	sbiw	r24, 0x02	; 2
     82c:	8c f4       	brge	.+34     	; 0x850 <__vector_11+0x2fc>
     82e:	0d c0       	rjmp	.+26     	; 0x84a <__vector_11+0x2f6>
     830:	80 91 8c 02 	lds	r24, 0x028C
     834:	83 70       	andi	r24, 0x03	; 3
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	02 97       	sbiw	r24, 0x02	; 2
     83a:	54 f4       	brge	.+20     	; 0x850 <__vector_11+0x2fc>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     83c:	42 30       	cpi	r20, 0x02	; 2
     83e:	29 f4       	brne	.+10     	; 0x84a <__vector_11+0x2f6>
     840:	e4 e6       	ldi	r30, 0x64	; 100
     842:	f4 e0       	ldi	r31, 0x04	; 4
     844:	80 81       	ld	r24, Z
     846:	28 2b       	or	r18, r24
     848:	20 83       	st	Z, r18
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     850:	ef e7       	ldi	r30, 0x7F	; 127
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	90 91 64 04 	lds	r25, 0x0464
     858:	85 81       	ldd	r24, Z+5	; 0x05
     85a:	89 2b       	or	r24, r25
     85c:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	bf 91       	pop	r27
     868:	af 91       	pop	r26
     86a:	9f 91       	pop	r25
     86c:	8f 91       	pop	r24
     86e:	7f 91       	pop	r23
     870:	6f 91       	pop	r22
     872:	5f 91       	pop	r21
     874:	4f 91       	pop	r20
     876:	3f 91       	pop	r19
     878:	2f 91       	pop	r18
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	9c 01       	movw	r18, r24
     890:	22 0f       	add	r18, r18
     892:	33 1f       	adc	r19, r19
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	dc 01       	movw	r26, r24
     89a:	a7 58       	subi	r26, 0x87	; 135
     89c:	be 4f       	sbci	r27, 0xFE	; 254
     89e:	2c 91       	ld	r18, X
     8a0:	e2 2f       	mov	r30, r18
     8a2:	ef 70       	andi	r30, 0x0F	; 15
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e1 58       	subi	r30, 0x81	; 129
     8a8:	fd 4f       	sbci	r31, 0xFD	; 253
     8aa:	ec 01       	movw	r28, r24
     8ac:	c8 58       	subi	r28, 0x88	; 136
     8ae:	de 4f       	sbci	r29, 0xFE	; 254
     8b0:	30 81       	ld	r19, Z
     8b2:	88 81       	ld	r24, Y
     8b4:	83 2b       	or	r24, r19
     8b6:	80 83       	st	Z, r24
	led[led_index].state = 1;
     8b8:	82 2f       	mov	r24, r18
     8ba:	80 61       	ori	r24, 0x10	; 16
     8bc:	8c 93       	st	X, r24

}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <turn_off>:

void turn_off(uint8_t led_index) {
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	9c 01       	movw	r18, r24
     8cc:	22 0f       	add	r18, r18
     8ce:	33 1f       	adc	r19, r19
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	dc 01       	movw	r26, r24
     8d6:	a7 58       	subi	r26, 0x87	; 135
     8d8:	be 4f       	sbci	r27, 0xFE	; 254
     8da:	2c 91       	ld	r18, X
     8dc:	e2 2f       	mov	r30, r18
     8de:	ef 70       	andi	r30, 0x0F	; 15
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	e1 58       	subi	r30, 0x81	; 129
     8e4:	fd 4f       	sbci	r31, 0xFD	; 253
     8e6:	ec 01       	movw	r28, r24
     8e8:	c8 58       	subi	r28, 0x88	; 136
     8ea:	de 4f       	sbci	r29, 0xFE	; 254
     8ec:	88 81       	ld	r24, Y
     8ee:	80 95       	com	r24
     8f0:	90 81       	ld	r25, Z
     8f2:	89 23       	and	r24, r25
     8f4:	80 83       	st	Z, r24
	led[led_index].state = 0;
     8f6:	82 2f       	mov	r24, r18
     8f8:	8f 7e       	andi	r24, 0xEF	; 239
     8fa:	8c 93       	st	X, r24
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	f9 01       	movw	r30, r18
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	2e 0f       	add	r18, r30
     90e:	3f 1f       	adc	r19, r31
     910:	f9 01       	movw	r30, r18
     912:	e7 58       	subi	r30, 0x87	; 135
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	90 81       	ld	r25, Z
     918:	94 ff       	sbrs	r25, 4
     91a:	03 c0       	rjmp	.+6      	; 0x922 <toggle+0x20>
		
		turn_off(led_index);
     91c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <turn_off>
     920:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     922:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
     926:	08 95       	ret

00000928 <turn_off_all_inst_leds>:

void turn_off_all_inst_leds(void) {
	
	//This is quick and dirty fast way to turn off all LEDs, but doesn't preserve their states for toggling 
	//TODO: make masks constants
	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     928:	ef e7       	ldi	r30, 0x7F	; 127
     92a:	f2 e0       	ldi	r31, 0x02	; 2
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	8f 70       	andi	r24, 0x0F	; 15
     930:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     932:	87 81       	ldd	r24, Z+7	; 0x07
     934:	80 72       	andi	r24, 0x20	; 32
     936:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     938:	83 81       	ldd	r24, Z+3	; 0x03
     93a:	8f 70       	andi	r24, 0x0F	; 15
     93c:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     93e:	86 81       	ldd	r24, Z+6	; 0x06
     940:	8f 7c       	andi	r24, 0xCF	; 207
     942:	86 83       	std	Z+6, r24	; 0x06
     944:	08 95       	ret

00000946 <update_inst_leds>:
		//
	//}
	
}

void update_inst_leds(void) {
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	
if (sequencer.SHIFT) {
     94e:	80 91 8e 03 	lds	r24, 0x038E
     952:	80 ff       	sbrs	r24, 0
     954:	22 c0       	rjmp	.+68     	; 0x99a <update_inst_leds+0x54>
     956:	05 e0       	ldi	r16, 0x05	; 5
     958:	11 e0       	ldi	r17, 0x01	; 1
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = BD; i <= MA; i++) {
		
		
		if (drum_hit[i].muted) {
     95e:	fe 01       	movw	r30, r28
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	ec 1b       	sub	r30, r28
     96e:	fd 0b       	sbc	r31, r29
     970:	ea 5f       	subi	r30, 0xFA	; 250
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	80 ff       	sbrs	r24, 0
     978:	05 c0       	rjmp	.+10     	; 0x984 <update_inst_leds+0x3e>
			
			turn_on(drum_hit[i].led_index);
     97a:	f8 01       	movw	r30, r16
     97c:	80 81       	ld	r24, Z
     97e:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
     982:	04 c0       	rjmp	.+8      	; 0x98c <update_inst_leds+0x46>
			
		} else {
			
			turn_off(drum_hit[i].led_index);
     984:	f8 01       	movw	r30, r16
     986:	80 81       	ld	r24, Z
     988:	0e 94 62 04 	call	0x8c4	; 0x8c4 <turn_off>

void update_inst_leds(void) {
	
if (sequencer.SHIFT) {
	
	for (int i = BD; i <= MA; i++) {
     98c:	21 96       	adiw	r28, 0x01	; 1
     98e:	09 5f       	subi	r16, 0xF9	; 249
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	c0 31       	cpi	r28, 0x10	; 16
     994:	d1 05       	cpc	r29, r1
     996:	19 f7       	brne	.-58     	; 0x95e <update_inst_leds+0x18>
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <update_inst_leds+0x6a>
		}
		
	}
} else {
	
	turn_on(drum_hit[sequencer.current_inst].led_index);	
     99a:	e0 91 63 04 	lds	r30, 0x0463
     99e:	87 e0       	ldi	r24, 0x07	; 7
     9a0:	e8 9f       	mul	r30, r24
     9a2:	f0 01       	movw	r30, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	e0 50       	subi	r30, 0x00	; 0
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	85 81       	ldd	r24, Z+5	; 0x05
     9ac:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
}
	
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	08 95       	ret

000009ba <update_step_led_mask>:
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     9ba:	2f 92       	push	r2
     9bc:	3f 92       	push	r3
     9be:	4f 92       	push	r4
     9c0:	5f 92       	push	r5
     9c2:	6f 92       	push	r6
     9c4:	7f 92       	push	r7
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     9de:	22 e2       	ldi	r18, 0x22	; 34
     9e0:	e3 ed       	ldi	r30, 0xD3	; 211
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	df 01       	movw	r26, r30
     9e6:	42 2f       	mov	r20, r18
     9e8:	1d 92       	st	X+, r1
     9ea:	4a 95       	dec	r20
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     9ee:	e9 e3       	ldi	r30, 0x39	; 57
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	df 01       	movw	r26, r30
     9f4:	1d 92       	st	X+, r1
     9f6:	2a 95       	dec	r18
     9f8:	e9 f7       	brne	.-6      	; 0x9f4 <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9fa:	20 91 60 04 	lds	r18, 0x0460
     9fe:	22 fb       	bst	r18, 2
     a00:	88 27       	eor	r24, r24
     a02:	80 f9       	bld	r24, 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	00 e0       	ldi	r16, 0x00	; 0
     a08:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a0a:	6c 01       	movw	r12, r24
     a0c:	cc 0c       	add	r12, r12
     a0e:	dd 1c       	adc	r13, r13
     a10:	cc 0c       	add	r12, r12
     a12:	dd 1c       	adc	r13, r13
     a14:	cc 0c       	add	r12, r12
     a16:	dd 1c       	adc	r13, r13
     a18:	cc 0c       	add	r12, r12
     a1a:	dd 1c       	adc	r13, r13
     a1c:	ee 24       	eor	r14, r14
     a1e:	e3 94       	inc	r14
     a20:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a22:	5c 01       	movw	r10, r24
     a24:	b1 e2       	ldi	r27, 0x21	; 33
     a26:	ab 0e       	add	r10, r27
     a28:	b1 1c       	adc	r11, r1
     a2a:	95 01       	movw	r18, r10
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	f9 01       	movw	r30, r18
     a32:	e3 57       	subi	r30, 0x73	; 115
     a34:	fc 4f       	sbci	r31, 0xFC	; 252
     a36:	5f 01       	movw	r10, r30
     a38:	0f 2e       	mov	r0, r31
     a3a:	f3 ef       	ldi	r31, 0xF3	; 243
     a3c:	8f 2e       	mov	r8, r31
     a3e:	f3 e0       	ldi	r31, 0x03	; 3
     a40:	9f 2e       	mov	r9, r31
     a42:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a44:	3c 01       	movw	r6, r24
     a46:	f4 e5       	ldi	r31, 0x54	; 84
     a48:	6f 0e       	add	r6, r31
     a4a:	71 1c       	adc	r7, r1
     a4c:	93 01       	movw	r18, r6
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	a9 01       	movw	r20, r18
     a54:	43 57       	subi	r20, 0x73	; 115
     a56:	5c 4f       	sbci	r21, 0xFC	; 252
     a58:	3a 01       	movw	r6, r20
     a5a:	0f 2e       	mov	r0, r31
     a5c:	f9 e5       	ldi	r31, 0x59	; 89
     a5e:	4f 2e       	mov	r4, r31
     a60:	f4 e0       	ldi	r31, 0x04	; 4
     a62:	5f 2e       	mov	r5, r31
     a64:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     a66:	83 57       	subi	r24, 0x73	; 115
     a68:	9c 4f       	sbci	r25, 0xFC	; 252
     a6a:	1c 01       	movw	r2, r24
     a6c:	50 ed       	ldi	r21, 0xD0	; 208
     a6e:	25 0e       	add	r2, r21
     a70:	31 1c       	adc	r3, r1
     a72:	52 c0       	rjmp	.+164    	; 0xb18 <update_step_led_mask+0x15e>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a74:	9e 01       	movw	r18, r28
     a76:	08 2e       	mov	r0, r24
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <update_step_led_mask+0xc4>
     a7a:	36 95       	lsr	r19
     a7c:	27 95       	ror	r18
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <update_step_led_mask+0xc0>
     a82:	20 ff       	sbrs	r18, 0
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <update_step_led_mask+0xd8>
     a86:	20 81       	ld	r18, Z
     a88:	31 81       	ldd	r19, Z+1	; 0x01
     a8a:	24 2b       	or	r18, r20
     a8c:	35 2b       	or	r19, r21
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a92:	9b 01       	movw	r18, r22
     a94:	08 2e       	mov	r0, r24
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <update_step_led_mask+0xe2>
     a98:	36 95       	lsr	r19
     a9a:	27 95       	ror	r18
     a9c:	0a 94       	dec	r0
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <update_step_led_mask+0xde>
     aa0:	20 ff       	sbrs	r18, 0
     aa2:	08 c0       	rjmp	.+16     	; 0xab4 <update_step_led_mask+0xfa>
     aa4:	2d 91       	ld	r18, X+
     aa6:	3c 91       	ld	r19, X
     aa8:	11 97       	sbiw	r26, 0x01	; 1
     aaa:	24 2b       	or	r18, r20
     aac:	35 2b       	or	r19, r21
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	3c 93       	st	X, r19
     ab2:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	12 96       	adiw	r26, 0x02	; 2
     ab8:	32 96       	adiw	r30, 0x02	; 2
     aba:	80 31       	cpi	r24, 0x10	; 16
     abc:	91 05       	cpc	r25, r1
     abe:	d1 f6       	brne	.-76     	; 0xa74 <update_step_led_mask+0xba>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     ac0:	d5 01       	movw	r26, r10
     ac2:	8d 91       	ld	r24, X+
     ac4:	9c 91       	ld	r25, X
     ac6:	00 2e       	mov	r0, r16
     ac8:	02 c0       	rjmp	.+4      	; 0xace <update_step_led_mask+0x114>
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <update_step_led_mask+0x110>
     ad2:	80 ff       	sbrs	r24, 0
     ad4:	07 c0       	rjmp	.+14     	; 0xae4 <update_step_led_mask+0x12a>
     ad6:	f4 01       	movw	r30, r8
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
     adc:	84 2b       	or	r24, r20
     ade:	95 2b       	or	r25, r21
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     ae4:	d3 01       	movw	r26, r6
     ae6:	8d 91       	ld	r24, X+
     ae8:	9c 91       	ld	r25, X
     aea:	00 2e       	mov	r0, r16
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <update_step_led_mask+0x138>
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	0a 94       	dec	r0
     af4:	e2 f7       	brpl	.-8      	; 0xaee <update_step_led_mask+0x134>
     af6:	80 ff       	sbrs	r24, 0
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <update_step_led_mask+0x14e>
     afa:	f2 01       	movw	r30, r4
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	48 2b       	or	r20, r24
     b02:	59 2b       	or	r21, r25
     b04:	51 83       	std	Z+1, r21	; 0x01
     b06:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     b08:	0f 5f       	subi	r16, 0xFF	; 255
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	d1 01       	movw	r26, r2
     b0e:	8c 91       	ld	r24, X
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	80 17       	cp	r24, r16
     b14:	91 07       	cpc	r25, r17
     b16:	fc f0       	brlt	.+62     	; 0xb56 <update_step_led_mask+0x19c>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     b18:	c6 01       	movw	r24, r12
     b1a:	80 0f       	add	r24, r16
     b1c:	91 1f       	adc	r25, r17
     b1e:	fc 01       	movw	r30, r24
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	e1 57       	subi	r30, 0x71	; 113
     b26:	fc 4f       	sbci	r31, 0xFC	; 252
     b28:	c0 81       	ld	r28, Z
     b2a:	d1 81       	ldd	r29, Z+1	; 0x01
     b2c:	a7 01       	movw	r20, r14
     b2e:	00 2e       	mov	r0, r16
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <update_step_led_mask+0x17c>
     b32:	44 0f       	add	r20, r20
     b34:	55 1f       	adc	r21, r21
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <update_step_led_mask+0x178>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	fc 01       	movw	r30, r24
     b40:	eb 50       	subi	r30, 0x0B	; 11
     b42:	fc 4f       	sbci	r31, 0xFC	; 252
     b44:	60 81       	ld	r22, Z
     b46:	71 81       	ldd	r23, Z+1	; 0x01
     b48:	a9 e3       	ldi	r26, 0x39	; 57
     b4a:	b4 e0       	ldi	r27, 0x04	; 4
     b4c:	e3 ed       	ldi	r30, 0xD3	; 211
     b4e:	f3 e0       	ldi	r31, 0x03	; 3
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	8f cf       	rjmp	.-226    	; 0xa74 <update_step_led_mask+0xba>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	bf 90       	pop	r11
     b68:	af 90       	pop	r10
     b6a:	9f 90       	pop	r9
     b6c:	8f 90       	pop	r8
     b6e:	7f 90       	pop	r7
     b70:	6f 90       	pop	r6
     b72:	5f 90       	pop	r5
     b74:	4f 90       	pop	r4
     b76:	3f 90       	pop	r3
     b78:	2f 90       	pop	r2
     b7a:	08 95       	ret

00000b7c <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     b7c:	08 95       	ret

00000b7e <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     b7e:	08 95       	ret

00000b80 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     b80:	40 31       	cpi	r20, 0x10	; 16
     b82:	20 f4       	brcc	.+8      	; 0xb8c <note_on_event+0xc>
     b84:	62 2f       	mov	r22, r18
     b86:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     b88:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     b8c:	08 95       	ret

00000b8e <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     b8e:	0e 94 03 07 	call	0xe06	; 0xe06 <update_tempo>
	read_switches();
     b92:	0e 94 48 0a 	call	0x1490	; 0x1490 <read_switches>
	check_start_stop_tap();
     b96:	0e 94 bd 0a 	call	0x157a	; 0x157a <check_start_stop_tap>
	
	parse_switch_data();
     b9a:	0e 94 96 0a 	call	0x152c	; 0x152c <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b9e:	80 91 8d 03 	lds	r24, 0x038D
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	11 f4       	brne	.+4      	; 0xbaa <refresh+0x1c>
     ba6:	0e 94 00 02 	call	0x400	; 0x400 <live_hits>
	update_mode();
     baa:	0e 94 aa 06 	call	0xd54	; 0xd54 <update_mode>
	check_clear_switch();
     bae:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <check_clear_switch>
	check_variation_switches();
     bb2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <check_variation_switches>
	update_prescale();
     bb6:	0e 94 86 08 	call	0x110c	; 0x110c <update_prescale>
	//update_variation();
	check_inst_switches();
     bba:	0e 94 27 0b 	call	0x164e	; 0x164e <check_inst_switches>
	update_inst_leds();	
     bbe:	0e 94 a3 04 	call	0x946	; 0x946 <update_inst_leds>
	update_step_board();
     bc2:	0e 94 31 07 	call	0xe62	; 0xe62 <update_step_board>
	//update_step_led_mask();
	process_step();
     bc6:	0e 94 4e 09 	call	0x129c	; 0x129c <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     bca:	0e 94 24 0a 	call	0x1448	; 0x1448 <update_spi>
	PORTD &= ~(1<<TRIG);
     bce:	5d 98       	cbi	0x0b, 5	; 11
     bd0:	08 95       	ret

00000bd2 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     bd2:	8f e1       	ldi	r24, 0x1F	; 31
     bd4:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     bd8:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     bdc:	88 ed       	ldi	r24, 0xD8	; 216
     bde:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     be2:	51 9a       	sbi	0x0a, 1	; 10
     be4:	08 95       	ret

00000be6 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     c12:	80 91 c6 00 	lds	r24, 0x00C6
     c16:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     c18:	ae 01       	movw	r20, r28
     c1a:	4f 5f       	subi	r20, 0xFF	; 255
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	8f e9       	ldi	r24, 0x9F	; 159
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_20>:

ISR (USART0_TX_vect) {
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1


	
}
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     c64:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     c66:	8d b1       	in	r24, 0x0d	; 13
     c68:	8c 60       	ori	r24, 0x0C	; 12
     c6a:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     c6c:	87 b1       	in	r24, 0x07	; 7
     c6e:	8e 60       	ori	r24, 0x0E	; 14
     c70:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     c72:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     c74:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     c76:	88 b1       	in	r24, 0x08	; 8
     c78:	81 7f       	andi	r24, 0xF1	; 241
     c7a:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     c7c:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     c7e:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     c80:	80 e5       	ldi	r24, 0x50	; 80
     c82:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     c86:	ed ea       	ldi	r30, 0xAD	; 173
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     c96:	8d e1       	ldi	r24, 0x1D	; 29
     c98:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
	turn_on(FILL_MANUAL);
     c9c:	82 e2       	ldi	r24, 0x22	; 34
     c9e:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
	
	update_spi();
     ca2:	0e 94 24 0a 	call	0x1448	; 0x1448 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     ca6:	84 b5       	in	r24, 0x24	; 36
     ca8:	82 60       	ori	r24, 0x02	; 2
     caa:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     cac:	81 ee       	ldi	r24, 0xE1	; 225
     cae:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     cb0:	8f e9       	ldi	r24, 0x9F	; 159
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     cb8:	60 ec       	ldi	r22, 0xC0	; 192
     cba:	75 e0       	ldi	r23, 0x05	; 5
     cbc:	8f e9       	ldi	r24, 0x9F	; 159
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     cc4:	6e eb       	ldi	r22, 0xBE	; 190
     cc6:	75 e0       	ldi	r23, 0x05	; 5
     cc8:	8f e9       	ldi	r24, 0x9F	; 159
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     cd0:	6f eb       	ldi	r22, 0xBF	; 191
     cd2:	75 e0       	ldi	r23, 0x05	; 5
     cd4:	8f e9       	ldi	r24, 0x9F	; 159
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     cdc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <setup_midi_usart>
	
	setup_internal_clock();
     ce0:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	internal_clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     ce4:	ea e8       	ldi	r30, 0x8A	; 138
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     cec:	11 e0       	ldi	r17, 0x01	; 1
     cee:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     cf0:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     cf4:	80 91 8c 03 	lds	r24, 0x038C
	flag.pre_scale_change = 0;
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8f 7b       	andi	r24, 0xBF	; 191
     cfc:	80 93 8c 03 	sts	0x038C, r24
	sequencer.START = 0;
     d00:	ee e8       	ldi	r30, 0x8E	; 142
     d02:	f3 e0       	ldi	r31, 0x03	; 3
     d04:	80 81       	ld	r24, Z
     d06:	8d 7f       	andi	r24, 0xFD	; 253
     d08:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	80 93 5d 04 	sts	0x045D, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     d10:	80 e1       	ldi	r24, 0x10	; 16
     d12:	80 93 5e 04 	sts	0x045E, r24
	sequencer.step_num_new = 15;
     d16:	cf e5       	ldi	r28, 0x5F	; 95
     d18:	d4 e0       	ldi	r29, 0x04	; 4
     d1a:	88 81       	ld	r24, Y
     d1c:	80 7e       	andi	r24, 0xE0	; 224
     d1e:	8f 60       	ori	r24, 0x0F	; 15
     d20:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     d22:	10 92 5c 04 	sts	0x045C, r1
	turn_on(BASIC_VAR_A_LED);
     d26:	84 e2       	ldi	r24, 0x24	; 36
     d28:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
	sequencer.mode = FIRST_PART;
     d2c:	10 93 8d 03 	sts	0x038D, r17

	sequencer.part_playing = FIRST;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     d32:	8d 7f       	andi	r24, 0xFD	; 253
     d34:	8b 7f       	andi	r24, 0xFB	; 251
     d36:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     d38:	8a e2       	ldi	r24, 0x2A	; 42
     d3a:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
	turn_on(SCALE_3_LED);
     d3e:	87 e2       	ldi	r24, 0x27	; 39
     d40:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
	//set_up_led_timer();
	sei(); //enable global interrupts	
     d44:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     d46:	8f e9       	ldi	r24, 0x9F	; 159
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 3f 10 	call	0x207e	; 0x207e <midi_device_process>
	
	refresh();		
     d4e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <refresh>

	
	}
     d52:	f9 cf       	rjmp	.-14     	; 0xd46 <main+0xe2>

00000d54 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     d54:	80 91 69 02 	lds	r24, 0x0269
     d58:	86 ff       	sbrs	r24, 6
     d5a:	54 c0       	rjmp	.+168    	; 0xe04 <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     d5c:	e9 e6       	ldi	r30, 0x69	; 105
     d5e:	f2 e0       	ldi	r31, 0x02	; 2
     d60:	8f 7b       	andi	r24, 0xBF	; 191
     d62:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     d64:	80 91 8e 03 	lds	r24, 0x038E
     d68:	80 ff       	sbrs	r24, 0
     d6a:	0c c0       	rjmp	.+24     	; 0xd84 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     d6c:	80 91 23 02 	lds	r24, 0x0223
     d70:	88 23       	and	r24, r24
     d72:	21 f0       	breq	.+8      	; 0xd7c <update_mode+0x28>
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	80 93 23 02 	sts	0x0223, r24
     d7a:	0e c0       	rjmp	.+28     	; 0xd98 <update_mode+0x44>
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	80 93 23 02 	sts	0x0223, r24
     d82:	0a c0       	rjmp	.+20     	; 0xd98 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     d84:	80 91 23 02 	lds	r24, 0x0223
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	86 30       	cpi	r24, 0x06	; 6
     d8c:	19 f0       	breq	.+6      	; 0xd94 <update_mode+0x40>
     d8e:	80 93 23 02 	sts	0x0223, r24
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <update_mode+0x44>
     d94:	10 92 23 02 	sts	0x0223, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d98:	30 91 23 02 	lds	r19, 0x0223
     d9c:	e3 2f       	mov	r30, r19
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	e3 5e       	subi	r30, 0xE3	; 227
     da2:	fd 4f       	sbci	r31, 0xFD	; 253
     da4:	20 81       	ld	r18, Z
     da6:	20 93 8d 03 	sts	0x038D, r18
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
		spi_data[4] |= (1<< mode_index);
     daa:	ef e7       	ldi	r30, 0x7F	; 127
     dac:	f2 e0       	ldi	r31, 0x02	; 2
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <update_mode+0x64>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	3a 95       	dec	r19
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <update_mode+0x60>
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
     dbc:	94 81       	ldd	r25, Z+4	; 0x04
     dbe:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] |= (1<< mode_index);
     dc0:	89 2b       	or	r24, r25
     dc2:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	82 0f       	add	r24, r18
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	e0 f4       	brcc	.+56     	; 0xe04 <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     dcc:	e1 e0       	ldi	r30, 0x01	; 1
     dce:	21 30       	cpi	r18, 0x01	; 1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <update_mode+0x80>
     dd2:	e0 e0       	ldi	r30, 0x00	; 0
     dd4:	af e5       	ldi	r26, 0x5F	; 95
     dd6:	b4 e0       	ldi	r27, 0x04	; 4
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	8c 91       	ld	r24, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	e0 fb       	bst	r30, 0
     de0:	82 f9       	bld	r24, 2
     de2:	11 96       	adiw	r26, 0x01	; 1
     de4:	8c 93       	st	X, r24
     de6:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	e3 57       	subi	r30, 0x73	; 115
     dec:	fc 4f       	sbci	r31, 0xFC	; 252
     dee:	e0 53       	subi	r30, 0x30	; 48
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	98 2f       	mov	r25, r24
     df6:	9f 71       	andi	r25, 0x1F	; 31
     df8:	8c 91       	ld	r24, X
     dfa:	80 7e       	andi	r24, 0xE0	; 224
     dfc:	89 2b       	or	r24, r25
     dfe:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     e00:	0e 94 dd 04 	call	0x9ba	; 0x9ba <update_step_led_mask>
     e04:	08 95       	ret

00000e06 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     e06:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     e0a:	90 93 74 02 	sts	0x0274, r25
     e0e:	80 93 73 02 	sts	0x0273, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     e12:	20 91 71 02 	lds	r18, 0x0271
     e16:	30 91 72 02 	lds	r19, 0x0272
     e1a:	82 1b       	sub	r24, r18
     e1c:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     e1e:	95 95       	asr	r25
     e20:	87 95       	ror	r24
     e22:	95 95       	asr	r25
     e24:	87 95       	ror	r24
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	90 93 72 02 	sts	0x0272, r25
     e2e:	80 93 71 02 	sts	0x0271, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     e32:	23 e6       	ldi	r18, 0x63	; 99
     e34:	34 e0       	ldi	r19, 0x04	; 4
     e36:	a9 01       	movw	r20, r18
     e38:	48 1b       	sub	r20, r24
     e3a:	59 0b       	sbc	r21, r25
     e3c:	ca 01       	movw	r24, r20
     e3e:	ea e8       	ldi	r30, 0x8A	; 138
     e40:	f2 e0       	ldi	r31, 0x02	; 2
     e42:	54 83       	std	Z+4, r21	; 0x04
     e44:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     e46:	25 81       	ldd	r18, Z+5	; 0x05
     e48:	36 81       	ldd	r19, Z+6	; 0x06
     e4a:	42 17       	cp	r20, r18
     e4c:	53 07       	cpc	r21, r19
     e4e:	11 f0       	breq	.+4      	; 0xe54 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     e50:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     e54:	ea e8       	ldi	r30, 0x8A	; 138
     e56:	f2 e0       	ldi	r31, 0x02	; 2
     e58:	83 81       	ldd	r24, Z+3	; 0x03
     e5a:	94 81       	ldd	r25, Z+4	; 0x04
     e5c:	96 83       	std	Z+6, r25	; 0x06
     e5e:	85 83       	std	Z+5, r24	; 0x05
     e60:	08 95       	ret

00000e62 <update_step_board>:
			//turn_on(STEP_1_LED);
			
		}
}

void update_step_board() {
     e62:	2f 92       	push	r2
     e64:	3f 92       	push	r3
     e66:	4f 92       	push	r4
     e68:	5f 92       	push	r5
     e6a:	6f 92       	push	r6
     e6c:	7f 92       	push	r7
     e6e:	8f 92       	push	r8
     e70:	9f 92       	push	r9
     e72:	af 92       	push	r10
     e74:	bf 92       	push	r11
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
	
	if (sequencer.START) {
     e86:	90 91 8e 03 	lds	r25, 0x038E
     e8a:	91 ff       	sbrs	r25, 1
     e8c:	2c c1       	rjmp	.+600    	; 0x10e6 <update_step_board+0x284>
		
			switch (sequencer.mode) {		
     e8e:	80 91 8d 03 	lds	r24, 0x038D
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	08 f0       	brcs	.+2      	; 0xe9a <update_step_board+0x38>
     e98:	26 c1       	rjmp	.+588    	; 0x10e6 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e9a:	92 ff       	sbrs	r25, 2
     e9c:	26 c0       	rjmp	.+76     	; 0xeea <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     e9e:	80 91 29 02 	lds	r24, 0x0229
     ea2:	86 fd       	sbrc	r24, 6
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <update_step_board+0x5a>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	e7 5d       	subi	r30, 0xD7	; 215
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	20 81       	ld	r18, Z
     eb6:	26 ff       	sbrs	r18, 6
     eb8:	13 c0       	rjmp	.+38     	; 0xee0 <update_step_board+0x7e>
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <update_step_board+0x5e>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     ec0:	fc 01       	movw	r30, r24
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	e7 5d       	subi	r30, 0xD7	; 215
     ec8:	fd 4f       	sbci	r31, 0xFD	; 253
     eca:	90 81       	ld	r25, Z
     ecc:	9f 7b       	andi	r25, 0xBF	; 191
     ece:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     ed0:	ef e5       	ldi	r30, 0x5F	; 95
     ed2:	f4 e0       	ldi	r31, 0x04	; 4
     ed4:	8f 71       	andi	r24, 0x1F	; 31
     ed6:	90 81       	ld	r25, Z
     ed8:	90 7e       	andi	r25, 0xE0	; 224
     eda:	89 2b       	or	r24, r25
     edc:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     ede:	03 c1       	rjmp	.+518    	; 0x10e6 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	80 31       	cpi	r24, 0x10	; 16
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f7       	brne	.-62     	; 0xeaa <update_step_board+0x48>
     ee8:	fe c0       	rjmp	.+508    	; 0x10e6 <update_step_board+0x284>
					
					break; //break or return? or is it needed?
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     eea:	80 91 63 04 	lds	r24, 0x0463
     eee:	80 31       	cpi	r24, 0x10	; 16
     ef0:	09 f0       	breq	.+2      	; 0xef4 <update_step_board+0x92>
     ef2:	72 c0       	rjmp	.+228    	; 0xfd8 <update_step_board+0x176>
     ef4:	00 e0       	ldi	r16, 0x00	; 0
     ef6:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     ef8:	c0 e6       	ldi	r28, 0x60	; 96
     efa:	d4 e0       	ldi	r29, 0x04	; 4
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     efc:	0f 2e       	mov	r0, r31
     efe:	fb e5       	ldi	r31, 0x5B	; 91
     f00:	6f 2e       	mov	r6, r31
     f02:	f4 e0       	ldi	r31, 0x04	; 4
     f04:	7f 2e       	mov	r7, r31
     f06:	f0 2d       	mov	r31, r0
     f08:	cc 24       	eor	r12, r12
     f0a:	c3 94       	inc	r12
     f0c:	d1 2c       	mov	r13, r1
     f0e:	0f 2e       	mov	r0, r31
     f10:	f3 e3       	ldi	r31, 0x33	; 51
     f12:	bf 2e       	mov	r11, r31
     f14:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f16:	0f 2e       	mov	r0, r31
     f18:	f3 e6       	ldi	r31, 0x63	; 99
     f1a:	4f 2e       	mov	r4, r31
     f1c:	f4 e0       	ldi	r31, 0x04	; 4
     f1e:	5f 2e       	mov	r5, r31
     f20:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     f22:	f8 01       	movw	r30, r16
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	e7 5d       	subi	r30, 0xD7	; 215
     f2a:	fd 4f       	sbci	r31, 0xFD	; 253
     f2c:	80 81       	ld	r24, Z
     f2e:	86 ff       	sbrs	r24, 6
     f30:	4c c0       	rjmp	.+152    	; 0xfca <update_step_board+0x168>
					
							
							button[i].state ^= button[i].state;
     f32:	f8 01       	movw	r30, r16
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	e7 5d       	subi	r30, 0xD7	; 215
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	8f 7b       	andi	r24, 0xBF	; 191
     f3e:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     f40:	88 81       	ld	r24, Y
     f42:	82 fb       	bst	r24, 2
     f44:	88 24       	eor	r8, r8
     f46:	80 f8       	bld	r8, 0
     f48:	91 2c       	mov	r9, r1
     f4a:	f4 01       	movw	r30, r8
     f4c:	e3 57       	subi	r30, 0x73	; 115
     f4e:	fc 4f       	sbci	r31, 0xFC	; 252
     f50:	e0 53       	subi	r30, 0x30	; 48
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	80 17       	cp	r24, r16
     f5a:	91 07       	cpc	r25, r17
     f5c:	b4 f1       	brlt	.+108    	; 0xfca <update_step_board+0x168>
								toggle(i);
     f5e:	80 2f       	mov	r24, r16
     f60:	0e 94 81 04 	call	0x902	; 0x902 <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     f64:	d3 01       	movw	r26, r6
     f66:	8c 91       	ld	r24, X
     f68:	80 fb       	bst	r24, 0
     f6a:	22 24       	eor	r2, r2
     f6c:	20 f8       	bld	r2, 0
     f6e:	31 2c       	mov	r3, r1
     f70:	88 81       	ld	r24, Y
     f72:	82 fb       	bst	r24, 2
     f74:	ee 24       	eor	r14, r14
     f76:	e0 f8       	bld	r14, 0
     f78:	f1 2c       	mov	r15, r1
     f7a:	b2 9c       	mul	r11, r2
     f7c:	f0 01       	movw	r30, r0
     f7e:	b3 9c       	mul	r11, r3
     f80:	f0 0d       	add	r31, r0
     f82:	11 24       	eor	r1, r1
     f84:	df 01       	movw	r26, r30
     f86:	ae 0d       	add	r26, r14
     f88:	bf 1d       	adc	r27, r15
     f8a:	aa 0f       	add	r26, r26
     f8c:	bb 1f       	adc	r27, r27
     f8e:	a1 53       	subi	r26, 0x31	; 49
     f90:	bc 4f       	sbci	r27, 0xFC	; 252
     f92:	2d 91       	ld	r18, X+
     f94:	3c 91       	ld	r19, X
     f96:	11 97       	sbiw	r26, 0x01	; 1
     f98:	c6 01       	movw	r24, r12
     f9a:	00 2e       	mov	r0, r16
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <update_step_board+0x140>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <update_step_board+0x13c>
     fa6:	28 27       	eor	r18, r24
     fa8:	39 27       	eor	r19, r25
     faa:	2d 93       	st	X+, r18
     fac:	3c 93       	st	X, r19
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     fae:	d2 01       	movw	r26, r4
     fb0:	2c 91       	ld	r18, X
     fb2:	e2 0f       	add	r30, r18
     fb4:	f1 1d       	adc	r31, r1
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	ed 52       	subi	r30, 0x2D	; 45
     fbc:	fc 4f       	sbci	r31, 0xFC	; 252
     fbe:	20 81       	ld	r18, Z
     fc0:	31 81       	ldd	r19, Z+1	; 0x01
     fc2:	82 27       	eor	r24, r18
     fc4:	93 27       	eor	r25, r19
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
     fca:	0f 5f       	subi	r16, 0xFF	; 255
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	00 31       	cpi	r16, 0x10	; 16
     fd0:	11 05       	cpc	r17, r1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <update_step_board+0x174>
     fd4:	a6 cf       	rjmp	.-180    	; 0xf22 <update_step_board+0xc0>
     fd6:	87 c0       	rjmp	.+270    	; 0x10e6 <update_step_board+0x284>
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
     fdc:	0f 2e       	mov	r0, r31
     fde:	f0 e6       	ldi	r31, 0x60	; 96
     fe0:	ef 2e       	mov	r14, r31
     fe2:	f4 e0       	ldi	r31, 0x04	; 4
     fe4:	ff 2e       	mov	r15, r31
     fe6:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
     fe8:	0f 2e       	mov	r0, r31
     fea:	fb e5       	ldi	r31, 0x5B	; 91
     fec:	6f 2e       	mov	r6, r31
     fee:	f4 e0       	ldi	r31, 0x04	; 4
     ff0:	7f 2e       	mov	r7, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	0f 2e       	mov	r0, r31
     ff6:	f3 e6       	ldi	r31, 0x63	; 99
     ff8:	4f 2e       	mov	r4, r31
     ffa:	f4 e0       	ldi	r31, 0x04	; 4
     ffc:	5f 2e       	mov	r5, r31
     ffe:	f0 2d       	mov	r31, r0
    1000:	0f 2e       	mov	r0, r31
    1002:	f3 e3       	ldi	r31, 0x33	; 51
    1004:	3f 2e       	mov	r3, r31
    1006:	f0 2d       	mov	r31, r0
    1008:	88 24       	eor	r8, r8
    100a:	83 94       	inc	r8
    100c:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
    100e:	fe 01       	movw	r30, r28
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e7 5d       	subi	r30, 0xD7	; 215
    1016:	fd 4f       	sbci	r31, 0xFD	; 253
    1018:	80 81       	ld	r24, Z
    101a:	86 ff       	sbrs	r24, 6
    101c:	5f c0       	rjmp	.+190    	; 0x10dc <update_step_board+0x27a>
						
						
						button[i].state ^= button[i].state;
    101e:	fe 01       	movw	r30, r28
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	e7 5d       	subi	r30, 0xD7	; 215
    1026:	fd 4f       	sbci	r31, 0xFD	; 253
    1028:	8f 7b       	andi	r24, 0xBF	; 191
    102a:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    102c:	f7 01       	movw	r30, r14
    102e:	80 81       	ld	r24, Z
    1030:	82 fb       	bst	r24, 2
    1032:	00 27       	eor	r16, r16
    1034:	00 f9       	bld	r16, 0
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	f8 01       	movw	r30, r16
    103a:	e3 57       	subi	r30, 0x73	; 115
    103c:	fc 4f       	sbci	r31, 0xFC	; 252
    103e:	e0 53       	subi	r30, 0x30	; 48
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	8c 17       	cp	r24, r28
    1048:	9d 07       	cpc	r25, r29
    104a:	0c f4       	brge	.+2      	; 0x104e <update_step_board+0x1ec>
    104c:	47 c0       	rjmp	.+142    	; 0x10dc <update_step_board+0x27a>
							toggle(i);
    104e:	8c 2f       	mov	r24, r28
    1050:	0e 94 81 04 	call	0x902	; 0x902 <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    1054:	d3 01       	movw	r26, r6
    1056:	8c 91       	ld	r24, X
    1058:	80 fb       	bst	r24, 0
    105a:	cc 24       	eor	r12, r12
    105c:	c0 f8       	bld	r12, 0
    105e:	d1 2c       	mov	r13, r1
    1060:	f7 01       	movw	r30, r14
    1062:	80 81       	ld	r24, Z
    1064:	82 fb       	bst	r24, 2
    1066:	aa 24       	eor	r10, r10
    1068:	a0 f8       	bld	r10, 0
    106a:	b1 2c       	mov	r11, r1
    106c:	d2 01       	movw	r26, r4
    106e:	6c 91       	ld	r22, X
    1070:	c5 01       	movw	r24, r10
    1072:	82 95       	swap	r24
    1074:	92 95       	swap	r25
    1076:	90 7f       	andi	r25, 0xF0	; 240
    1078:	98 27       	eor	r25, r24
    107a:	80 7f       	andi	r24, 0xF0	; 240
    107c:	98 27       	eor	r25, r24
    107e:	3c 9c       	mul	r3, r12
    1080:	90 01       	movw	r18, r0
    1082:	3d 9c       	mul	r3, r13
    1084:	30 0d       	add	r19, r0
    1086:	11 24       	eor	r1, r1
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	8c 0f       	add	r24, r28
    108e:	9d 1f       	adc	r25, r29
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	fc 01       	movw	r30, r24
    1096:	e1 57       	subi	r30, 0x71	; 113
    1098:	fc 4f       	sbci	r31, 0xFC	; 252
    109a:	c4 01       	movw	r24, r8
    109c:	06 2e       	mov	r0, r22
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <update_step_board+0x242>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <update_step_board+0x23e>
    10a8:	40 81       	ld	r20, Z
    10aa:	51 81       	ldd	r21, Z+1	; 0x01
    10ac:	84 27       	eor	r24, r20
    10ae:	95 27       	eor	r25, r21
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    10b4:	f9 01       	movw	r30, r18
    10b6:	e6 0f       	add	r30, r22
    10b8:	f1 1d       	adc	r31, r1
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	ed 52       	subi	r30, 0x2D	; 45
    10c0:	fc 4f       	sbci	r31, 0xFC	; 252
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	94 01       	movw	r18, r8
    10c8:	0c 2e       	mov	r0, r28
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <update_step_board+0x26e>
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <update_step_board+0x26a>
    10d4:	82 27       	eor	r24, r18
    10d6:	93 27       	eor	r25, r19
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    10dc:	21 96       	adiw	r28, 0x01	; 1
    10de:	c0 31       	cpi	r28, 0x10	; 16
    10e0:	d1 05       	cpc	r29, r1
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <update_step_board+0x284>
    10e4:	94 cf       	rjmp	.-216    	; 0x100e <update_step_board+0x1ac>
	} else {
		
		//handle changing selected pattern and rhythm. Not currently handling switches presses now when sequencer is stopped, which means they get added once sequencer starts
		
	}
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	9f 90       	pop	r9
    10fc:	8f 90       	pop	r8
    10fe:	7f 90       	pop	r7
    1100:	6f 90       	pop	r6
    1102:	5f 90       	pop	r5
    1104:	4f 90       	pop	r4
    1106:	3f 90       	pop	r3
    1108:	2f 90       	pop	r2
    110a:	08 95       	ret

0000110c <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    110c:	80 91 65 02 	lds	r24, 0x0265
    1110:	86 ff       	sbrs	r24, 6
    1112:	29 c0       	rjmp	.+82     	; 0x1166 <update_prescale+0x5a>
    1114:	80 91 8e 03 	lds	r24, 0x038E
    1118:	80 ff       	sbrs	r24, 0
    111a:	25 c0       	rjmp	.+74     	; 0x1166 <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    111c:	e5 e6       	ldi	r30, 0x65	; 101
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	80 81       	ld	r24, Z
    1122:	8f 7b       	andi	r24, 0xBF	; 191
    1124:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    1126:	80 91 28 02 	lds	r24, 0x0228
    112a:	88 23       	and	r24, r24
    112c:	21 f0       	breq	.+8      	; 0x1136 <update_prescale+0x2a>
    112e:	81 50       	subi	r24, 0x01	; 1
    1130:	80 93 28 02 	sts	0x0228, r24
    1134:	03 c0       	rjmp	.+6      	; 0x113c <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	80 93 28 02 	sts	0x0228, r24
					
		}
		flag.pre_scale_change = 1;
    113c:	80 91 8c 03 	lds	r24, 0x038C
    1140:	80 64       	ori	r24, 0x40	; 64
    1142:	80 93 8c 03 	sts	0x038C, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    1146:	ef e7       	ldi	r30, 0x7F	; 127
    1148:	f2 e0       	ldi	r31, 0x02	; 2
    114a:	20 91 28 02 	lds	r18, 0x0228
    114e:	2e 5f       	subi	r18, 0xFE	; 254
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <update_prescale+0x4e>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	2a 95       	dec	r18
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    115e:	95 81       	ldd	r25, Z+5	; 0x05
    1160:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    1162:	89 2b       	or	r24, r25
    1164:	85 83       	std	Z+5, r24	; 0x05
    1166:	08 95       	ret

00001168 <check_tap>:
	}
}

void check_tap(void) {
	
	if (flag.tap) {
    1168:	80 91 8c 03 	lds	r24, 0x038C
    116c:	88 23       	and	r24, r24
    116e:	0c f0       	brlt	.+2      	; 0x1172 <check_tap+0xa>
    1170:	94 c0       	rjmp	.+296    	; 0x129a <check_tap+0x132>
		
		flag.tap = 0;
    1172:	8f 77       	andi	r24, 0x7F	; 127
    1174:	80 93 8c 03 	sts	0x038C, r24
		if (sequencer.current_inst == AC) {
    1178:	40 91 63 04 	lds	r20, 0x0463
    117c:	40 31       	cpi	r20, 0x10	; 16
    117e:	69 f5       	brne	.+90     	; 0x11da <check_tap+0x72>
			sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] |= 1<<sequencer.current_step;	
    1180:	90 91 5b 04 	lds	r25, 0x045B
    1184:	80 91 60 04 	lds	r24, 0x0460
    1188:	82 fb       	bst	r24, 2
    118a:	66 27       	eor	r22, r22
    118c:	60 f9       	bld	r22, 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	91 70       	andi	r25, 0x01	; 1
    1192:	fb 01       	movw	r30, r22
    1194:	53 e3       	ldi	r21, 0x33	; 51
    1196:	95 9f       	mul	r25, r21
    1198:	e0 0d       	add	r30, r0
    119a:	f1 1d       	adc	r31, r1
    119c:	11 24       	eor	r1, r1
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	e1 53       	subi	r30, 0x31	; 49
    11a4:	fc 4f       	sbci	r31, 0xFC	; 252
    11a6:	90 91 5f 04 	lds	r25, 0x045F
    11aa:	92 95       	swap	r25
    11ac:	96 95       	lsr	r25
    11ae:	97 70       	andi	r25, 0x07	; 7
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	88 0f       	add	r24, r24
    11b4:	88 0f       	add	r24, r24
    11b6:	88 0f       	add	r24, r24
    11b8:	89 2b       	or	r24, r25
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	db 01       	movw	r26, r22
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <check_tap+0x5e>
    11c2:	aa 0f       	add	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <check_tap+0x5a>
    11ca:	cd 01       	movw	r24, r26
    11cc:	60 81       	ld	r22, Z
    11ce:	71 81       	ldd	r23, Z+1	; 0x01
    11d0:	86 2b       	or	r24, r22
    11d2:	97 2b       	or	r25, r23
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	80 83       	st	Z, r24
    11d8:	33 c0       	rjmp	.+102    	; 0x1240 <check_tap+0xd8>
		} else {
			sequencer.pattern[sequencer.variation].part[sequencer.part_editing][sequencer.current_step] |= 1<<sequencer.current_inst;
    11da:	50 91 5b 04 	lds	r21, 0x045B
    11de:	80 91 60 04 	lds	r24, 0x0460
    11e2:	82 fb       	bst	r24, 2
    11e4:	ee 27       	eor	r30, r30
    11e6:	e0 f9       	bld	r30, 0
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	90 91 5f 04 	lds	r25, 0x045F
    11ee:	92 95       	swap	r25
    11f0:	96 95       	lsr	r25
    11f2:	97 70       	andi	r25, 0x07	; 7
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	88 0f       	add	r24, r24
    11f8:	88 0f       	add	r24, r24
    11fa:	88 0f       	add	r24, r24
    11fc:	89 2b       	or	r24, r25
    11fe:	e2 95       	swap	r30
    1200:	f2 95       	swap	r31
    1202:	f0 7f       	andi	r31, 0xF0	; 240
    1204:	fe 27       	eor	r31, r30
    1206:	e0 7f       	andi	r30, 0xF0	; 240
    1208:	fe 27       	eor	r31, r30
    120a:	95 2f       	mov	r25, r21
    120c:	91 70       	andi	r25, 0x01	; 1
    120e:	b3 e3       	ldi	r27, 0x33	; 51
    1210:	9b 9f       	mul	r25, r27
    1212:	e0 0d       	add	r30, r0
    1214:	f1 1d       	adc	r31, r1
    1216:	11 24       	eor	r1, r1
    1218:	e8 0f       	add	r30, r24
    121a:	f1 1d       	adc	r31, r1
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	e1 57       	subi	r30, 0x71	; 113
    1222:	fc 4f       	sbci	r31, 0xFC	; 252
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	04 2e       	mov	r0, r20
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <check_tap+0xc8>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <check_tap+0xc4>
    1234:	60 81       	ld	r22, Z
    1236:	71 81       	ldd	r23, Z+1	; 0x01
    1238:	86 2b       	or	r24, r22
    123a:	97 2b       	or	r25, r23
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
		}
		sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= 1<<sequencer.current_step;
    1240:	80 91 5b 04 	lds	r24, 0x045B
    1244:	28 2f       	mov	r18, r24
    1246:	21 70       	andi	r18, 0x01	; 1
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	83 e3       	ldi	r24, 0x33	; 51
    124c:	82 9f       	mul	r24, r18
    124e:	f0 01       	movw	r30, r0
    1250:	83 9f       	mul	r24, r19
    1252:	f0 0d       	add	r31, r0
    1254:	11 24       	eor	r1, r1
    1256:	e4 0f       	add	r30, r20
    1258:	f1 1d       	adc	r31, r1
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	ed 52       	subi	r30, 0x2D	; 45
    1260:	fc 4f       	sbci	r31, 0xFC	; 252
    1262:	80 91 5f 04 	lds	r24, 0x045F
    1266:	98 2f       	mov	r25, r24
    1268:	92 95       	swap	r25
    126a:	96 95       	lsr	r25
    126c:	97 70       	andi	r25, 0x07	; 7
    126e:	80 91 60 04 	lds	r24, 0x0460
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	88 0f       	add	r24, r24
    1276:	88 0f       	add	r24, r24
    1278:	88 0f       	add	r24, r24
    127a:	89 2b       	or	r24, r25
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <check_tap+0x120>
    1284:	44 0f       	add	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <check_tap+0x11c>
    128c:	ca 01       	movw	r24, r20
    128e:	20 81       	ld	r18, Z
    1290:	31 81       	ldd	r19, Z+1	; 0x01
    1292:	82 2b       	or	r24, r18
    1294:	93 2b       	or	r25, r19
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
    129a:	08 95       	ret

0000129c <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
    12a4:	80 91 8e 03 	lds	r24, 0x038E
    12a8:	81 ff       	sbrs	r24, 1
    12aa:	91 c0       	rjmp	.+290    	; 0x13ce <process_step+0x132>
			
			//if (sequencer.part_playing == FIRST || sequencer.part_playing == SECOND) {	
				if (flag.next_step) {
    12ac:	80 91 8c 03 	lds	r24, 0x038C
    12b0:	80 ff       	sbrs	r24, 0
    12b2:	94 c0       	rjmp	.+296    	; 0x13dc <process_step+0x140>
					flag.next_step = 0;
    12b4:	8e 7f       	andi	r24, 0xFE	; 254
    12b6:	80 93 8c 03 	sts	0x038C, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
    12ba:	88 70       	andi	r24, 0x08	; 8
    12bc:	88 23       	and	r24, r24
    12be:	f1 f3       	breq	.-4      	; 0x12bc <process_step+0x20>
					
					check_tap();
    12c0:	0e 94 b4 08 	call	0x1168	; 0x1168 <check_tap>
					PORTD |= (1<<TRIG);
    12c4:	5d 9a       	sbi	0x0b, 5	; 11
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
    12c6:	80 91 60 04 	lds	r24, 0x0460
    12ca:	82 fb       	bst	r24, 2
    12cc:	99 27       	eor	r25, r25
    12ce:	90 f9       	bld	r25, 0
    12d0:	86 95       	lsr	r24
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	98 13       	cpse	r25, r24
    12d6:	37 c0       	rjmp	.+110    	; 0x1346 <process_step+0xaa>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    12d8:	80 91 5f 04 	lds	r24, 0x045F
    12dc:	98 2f       	mov	r25, r24
    12de:	92 95       	swap	r25
    12e0:	96 95       	lsr	r25
    12e2:	97 70       	andi	r25, 0x07	; 7
    12e4:	80 91 60 04 	lds	r24, 0x0460
    12e8:	81 70       	andi	r24, 0x01	; 1
    12ea:	88 0f       	add	r24, r24
    12ec:	88 0f       	add	r24, r24
    12ee:	88 0f       	add	r24, r24
    12f0:	89 2b       	or	r24, r25
    12f2:	21 e0       	ldi	r18, 0x01	; 1
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <process_step+0x60>
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <process_step+0x5c>
    1300:	80 91 5b 04 	lds	r24, 0x045B
    1304:	08 2f       	mov	r16, r24
    1306:	01 70       	andi	r16, 0x01	; 1
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	80 91 63 04 	lds	r24, 0x0463
    130e:	93 e3       	ldi	r25, 0x33	; 51
    1310:	90 9f       	mul	r25, r16
    1312:	f0 01       	movw	r30, r0
    1314:	91 9f       	mul	r25, r17
    1316:	f0 0d       	add	r31, r0
    1318:	11 24       	eor	r1, r1
    131a:	e8 0f       	add	r30, r24
    131c:	f1 1d       	adc	r31, r1
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ed 52       	subi	r30, 0x2D	; 45
    1324:	fc 4f       	sbci	r31, 0xFC	; 252
    1326:	90 81       	ld	r25, Z
    1328:	81 81       	ldd	r24, Z+1	; 0x01
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    132a:	ef e7       	ldi	r30, 0x7F	; 127
    132c:	f2 e0       	ldi	r31, 0x02	; 2
    132e:	49 2f       	mov	r20, r25
    1330:	42 23       	and	r20, r18
    1332:	40 95       	com	r20
					check_tap();
					PORTD |= (1<<TRIG);
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    1334:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    1336:	94 23       	and	r25, r20
    1338:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    133a:	98 2f       	mov	r25, r24
    133c:	93 23       	and	r25, r19
    133e:	90 95       	com	r25
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
    1340:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    1342:	89 23       	and	r24, r25
    1344:	80 83       	st	Z, r24
					} else {
						
						
					}

					trigger_step();
    1346:	0e 94 31 01 	call	0x262	; 0x262 <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
    134a:	90 91 5b 04 	lds	r25, 0x045B
    134e:	80 91 60 04 	lds	r24, 0x0460
    1352:	81 fb       	bst	r24, 1
    1354:	22 27       	eor	r18, r18
    1356:	20 f9       	bld	r18, 0
    1358:	c2 2f       	mov	r28, r18
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	d4 2f       	mov	r29, r20
    135e:	91 70       	andi	r25, 0x01	; 1
    1360:	53 e3       	ldi	r21, 0x33	; 51
    1362:	95 9f       	mul	r25, r21
    1364:	c0 0d       	add	r28, r0
    1366:	d1 1d       	adc	r29, r1
    1368:	11 24       	eor	r1, r1
    136a:	cc 0f       	add	r28, r28
    136c:	dd 1f       	adc	r29, r29
    136e:	c1 53       	subi	r28, 0x31	; 49
    1370:	dc 4f       	sbci	r29, 0xFC	; 252
    1372:	90 91 5f 04 	lds	r25, 0x045F
    1376:	92 95       	swap	r25
    1378:	96 95       	lsr	r25
    137a:	97 70       	andi	r25, 0x07	; 7
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	88 0f       	add	r24, r24
    1380:	88 0f       	add	r24, r24
    1382:	88 0f       	add	r24, r24
    1384:	89 2b       	or	r24, r25
    1386:	28 81       	ld	r18, Y
    1388:	39 81       	ldd	r19, Y+1	; 0x01
    138a:	a9 01       	movw	r20, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <process_step+0xf6>
    138e:	56 95       	lsr	r21
    1390:	47 95       	ror	r20
    1392:	8a 95       	dec	r24
    1394:	e2 f7       	brpl	.-8      	; 0x138e <process_step+0xf2>
    1396:	40 ff       	sbrs	r20, 0
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <process_step+0x116>
						spi_data[8] |= 1<<ACCENT;
    139a:	ef e7       	ldi	r30, 0x7F	; 127
    139c:	f2 e0       	ldi	r31, 0x02	; 2
    139e:	80 85       	ldd	r24, Z+8	; 0x08
    13a0:	81 60       	ori	r24, 0x01	; 1
    13a2:	80 87       	std	Z+8, r24	; 0x08
						if (!sequencer.SHIFT) turn_on(ACCENT_1_LED);
    13a4:	80 91 8e 03 	lds	r24, 0x038E
    13a8:	80 fd       	sbrc	r24, 0
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <process_step+0x116>
    13ac:	84 e1       	ldi	r24, 0x14	; 20
    13ae:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
    13b2:	ee e6       	ldi	r30, 0x6E	; 110
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	82 60       	ori	r24, 0x02	; 2
    13ba:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
    13bc:	85 b5       	in	r24, 0x25	; 37
    13be:	83 60       	ori	r24, 0x03	; 3
    13c0:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
    13c2:	80 91 8c 03 	lds	r24, 0x038C
    13c6:	87 7f       	andi	r24, 0xF7	; 247
    13c8:	80 93 8c 03 	sts	0x038C, r24
    13cc:	07 c0       	rjmp	.+14     	; 0x13dc <process_step+0x140>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
    13ce:	80 91 8c 03 	lds	r24, 0x038C
    13d2:	80 ff       	sbrs	r24, 0
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <process_step+0x140>
			
			flag.next_step = 0;
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	80 93 8c 03 	sts	0x038C, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <toggle_variation>:
	
}

void toggle_variation(void) {
	
	if (flag.variation_change == 1) {
    13e6:	80 91 8c 03 	lds	r24, 0x038C
    13ea:	82 ff       	sbrs	r24, 2
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <toggle_variation+0x34>
		flag.variation_change = 0;
    13ee:	8b 7f       	andi	r24, 0xFB	; 251
    13f0:	80 93 8c 03 	sts	0x038C, r24
		switch (sequencer.variation_mode) {
    13f4:	80 91 5c 04 	lds	r24, 0x045C
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	49 f0       	breq	.+18     	; 0x140e <toggle_variation+0x28>
    13fc:	10 f0       	brcs	.+4      	; 0x1402 <toggle_variation+0x1c>
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	c1 f4       	brne	.+48     	; 0x1432 <toggle_variation+0x4c>
					
			case VAR_A: case VAR_AB:
			sequencer.variation = VAR_A;
    1402:	eb e5       	ldi	r30, 0x5B	; 91
    1404:	f4 e0       	ldi	r31, 0x04	; 4
    1406:	80 81       	ld	r24, Z
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	80 83       	st	Z, r24
			break;
    140c:	08 95       	ret
			case VAR_B:
			sequencer.variation = VAR_B;
    140e:	eb e5       	ldi	r30, 0x5B	; 91
    1410:	f4 e0       	ldi	r31, 0x04	; 4
    1412:	80 81       	ld	r24, Z
    1414:	81 60       	ori	r24, 0x01	; 1
    1416:	80 83       	st	Z, r24
			break;
    1418:	08 95       	ret
					
					
		}
				
		} else if (sequencer.variation_mode == VAR_AB) {
    141a:	80 91 5c 04 	lds	r24, 0x045C
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	41 f4       	brne	.+16     	; 0x1432 <toggle_variation+0x4c>
				
		sequencer.variation ^= 1<<0; //toggle state
    1422:	eb e5       	ldi	r30, 0x5B	; 91
    1424:	f4 e0       	ldi	r31, 0x04	; 4
    1426:	80 81       	ld	r24, Z
    1428:	98 2f       	mov	r25, r24
    142a:	90 95       	com	r25
    142c:	90 fb       	bst	r25, 0
    142e:	80 f9       	bld	r24, 0
    1430:	80 83       	st	Z, r24
    1432:	08 95       	ret

00001434 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    1434:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    1438:	ed ea       	ldi	r30, 0xAD	; 173
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 23       	and	r24, r24
    1440:	ec f7       	brge	.-6      	; 0x143c <spi_shift_byte+0x8>
	return SPDR1;
    1442:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    1446:	08 95       	ret

00001448 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    144c:	cf e7       	ldi	r28, 0x7F	; 127
    144e:	d2 e0       	ldi	r29, 0x02	; 2
    1450:	88 81       	ld	r24, Y
    1452:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    1474:	8e 81       	ldd	r24, Y+6	; 0x06
    1476:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    147a:	8f 81       	ldd	r24, Y+7	; 0x07
    147c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    1480:	88 85       	ldd	r24, Y+8	; 0x08
    1482:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    1486:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    1488:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <read_switches>:

void read_switches(void) { //reads switch data
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    1494:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
    149c:	ca e7       	ldi	r28, 0x7A	; 122
    149e:	d2 e0       	ldi	r29, 0x02	; 2
    14a0:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
    14a8:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
    14b8:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	0e 94 1a 0a 	call	0x1434	; 0x1434 <spi_shift_byte>
    14c0:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    14c2:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    14c4:	28 81       	ld	r18, Y
    14c6:	92 2f       	mov	r25, r18
    14c8:	96 95       	lsr	r25
    14ca:	ee e8       	ldi	r30, 0x8E	; 142
    14cc:	f3 e0       	ldi	r31, 0x03	; 3
    14ce:	30 81       	ld	r19, Z
    14d0:	90 fb       	bst	r25, 0
    14d2:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	49 2f       	mov	r20, r25
    14d8:	42 95       	swap	r20
    14da:	4f 70       	andi	r20, 0x0F	; 15
    14dc:	40 fb       	bst	r20, 0
    14de:	32 f9       	bld	r19, 2
    14e0:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    14e2:	e5 e7       	ldi	r30, 0x75	; 117
    14e4:	f2 e0       	ldi	r31, 0x02	; 2
    14e6:	30 81       	ld	r19, Z
    14e8:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    14ea:	32 27       	eor	r19, r18
    14ec:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    14ee:	23 23       	and	r18, r19
    14f0:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    14f2:	31 81       	ldd	r19, Z+1	; 0x01
    14f4:	29 81       	ldd	r18, Y+1	; 0x01
    14f6:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    14f8:	32 27       	eor	r19, r18
    14fa:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    14fc:	23 23       	and	r18, r19
    14fe:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1500:	22 81       	ldd	r18, Z+2	; 0x02
    1502:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    1504:	29 27       	eor	r18, r25
    1506:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    1508:	92 23       	and	r25, r18
    150a:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    150c:	23 81       	ldd	r18, Z+3	; 0x03
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    1512:	29 27       	eor	r18, r25
    1514:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    1516:	92 23       	and	r25, r18
    1518:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    151a:	94 81       	ldd	r25, Z+4	; 0x04
    151c:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    151e:	98 27       	eor	r25, r24
    1520:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    1522:	89 23       	and	r24, r25
    1524:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    1530:	da 01       	movw	r26, r20
    1532:	aa 0f       	add	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	a7 5d       	subi	r26, 0xD7	; 215
    1538:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    153a:	8c 91       	ld	r24, X
    153c:	e8 2f       	mov	r30, r24
    153e:	e6 95       	lsr	r30
    1540:	e6 95       	lsr	r30
    1542:	e6 95       	lsr	r30
    1544:	e7 70       	andi	r30, 0x07	; 7
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	e6 58       	subi	r30, 0x86	; 134
    154a:	fd 4f       	sbci	r31, 0xFD	; 253
    154c:	20 81       	ld	r18, Z
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	98 2f       	mov	r25, r24
    1552:	97 70       	andi	r25, 0x07	; 7
    1554:	02 c0       	rjmp	.+4      	; 0x155a <parse_switch_data+0x2e>
    1556:	35 95       	asr	r19
    1558:	27 95       	ror	r18
    155a:	9a 95       	dec	r25
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <parse_switch_data+0x2a>
    155e:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    1560:	86 fb       	bst	r24, 6
    1562:	99 27       	eor	r25, r25
    1564:	90 f9       	bld	r25, 0
    1566:	29 27       	eor	r18, r25
    1568:	20 fb       	bst	r18, 0
    156a:	86 f9       	bld	r24, 6
    156c:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    156e:	4f 5f       	subi	r20, 0xFF	; 255
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	43 32       	cpi	r20, 0x23	; 35
    1574:	51 05       	cpc	r21, r1
    1576:	e1 f6       	brne	.-72     	; 0x1530 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    1578:	08 95       	ret

0000157a <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    157a:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    157c:	80 91 88 02 	lds	r24, 0x0288
    1580:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    1582:	89 27       	eor	r24, r25
    1584:	80 93 88 02 	sts	0x0288, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    1588:	89 23       	and	r24, r25
    158a:	80 93 89 02 	sts	0x0289, r24
	uint8_t start_state = sequencer.START;
    158e:	ee e8       	ldi	r30, 0x8E	; 142
    1590:	f3 e0       	ldi	r31, 0x03	; 3
    1592:	90 81       	ld	r25, Z
    1594:	91 fb       	bst	r25, 1
    1596:	22 27       	eor	r18, r18
    1598:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    159a:	86 95       	lsr	r24
    159c:	82 27       	eor	r24, r18
    159e:	80 fb       	bst	r24, 0
    15a0:	91 f9       	bld	r25, 1
    15a2:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    15a4:	91 ff       	sbrs	r25, 1
    15a6:	50 c0       	rjmp	.+160    	; 0x1648 <check_start_stop_tap+0xce>
    15a8:	21 11       	cpse	r18, r1
    15aa:	3c c0       	rjmp	.+120    	; 0x1624 <check_start_stop_tap+0xaa>
		
		sequencer.current_step = 0;
    15ac:	ef e5       	ldi	r30, 0x5F	; 95
    15ae:	f4 e0       	ldi	r31, 0x04	; 4
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 71       	andi	r24, 0x1F	; 31
    15b4:	80 83       	st	Z, r24
    15b6:	81 81       	ldd	r24, Z+1	; 0x01
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
    15bc:	80 91 8c 03 	lds	r24, 0x038C
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    15c0:	10 92 8b 02 	sts	0x028B, r1
		
		flag.variation_change = 0;
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	8b 7f       	andi	r24, 0xFB	; 251
    15c8:	80 93 8c 03 	sts	0x038C, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    15cc:	80 91 5c 04 	lds	r24, 0x045C
    15d0:	8d 7f       	andi	r24, 0xFD	; 253
    15d2:	31 f4       	brne	.+12     	; 0x15e0 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    15d4:	eb e5       	ldi	r30, 0x5B	; 91
    15d6:	f4 e0       	ldi	r31, 0x04	; 4
    15d8:	80 81       	ld	r24, Z
    15da:	8e 7f       	andi	r24, 0xFE	; 254
    15dc:	80 83       	st	Z, r24
    15de:	22 c0       	rjmp	.+68     	; 0x1624 <check_start_stop_tap+0xaa>
		} else {
			
			sequencer.variation = VAR_B;
    15e0:	eb e5       	ldi	r30, 0x5B	; 91
    15e2:	f4 e0       	ldi	r31, 0x04	; 4
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 83       	st	Z, r24
    15ea:	1c c0       	rjmp	.+56     	; 0x1624 <check_start_stop_tap+0xaa>
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		if (sequencer.part_playing == SECOND) { //reset part playing
    15ec:	80 91 60 04 	lds	r24, 0x0460
    15f0:	81 ff       	sbrs	r24, 1
    15f2:	0b c0       	rjmp	.+22     	; 0x160a <check_start_stop_tap+0x90>
			sequencer.part_playing = FIRST;
    15f4:	ef e5       	ldi	r30, 0x5F	; 95
    15f6:	f4 e0       	ldi	r31, 0x04	; 4
    15f8:	81 81       	ldd	r24, Z+1	; 0x01
    15fa:	8d 7f       	andi	r24, 0xFD	; 253
    15fc:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
    15fe:	8b e2       	ldi	r24, 0x2B	; 43
    1600:	0e 94 62 04 	call	0x8c4	; 0x8c4 <turn_off>
			turn_on (FIRST_PART_LED);	
    1604:	8a e2       	ldi	r24, 0x2A	; 42
    1606:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
			
		}
		turn_off_all_inst_leds();
    160a:	0e 94 94 04 	call	0x928	; 0x928 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    160e:	e0 91 63 04 	lds	r30, 0x0463
    1612:	87 e0       	ldi	r24, 0x07	; 7
    1614:	e8 9f       	mul	r30, r24
    1616:	f0 01       	movw	r30, r0
    1618:	11 24       	eor	r1, r1
    161a:	e0 50       	subi	r30, 0x00	; 0
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	85 81       	ldd	r24, Z+5	; 0x05
    1620:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
		
	} 
	
	if ((sequencer.START && (current_start_stop_tap_state >> TAP) &1)) {
    1624:	80 91 8e 03 	lds	r24, 0x038E
    1628:	81 ff       	sbrs	r24, 1
    162a:	10 c0       	rjmp	.+32     	; 0x164c <check_start_stop_tap+0xd2>
    162c:	80 91 89 02 	lds	r24, 0x0289
    1630:	82 ff       	sbrs	r24, 2
    1632:	0c c0       	rjmp	.+24     	; 0x164c <check_start_stop_tap+0xd2>
		
		current_start_stop_tap_state ^= (1<<TAP); //toggle tap switch bit
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	89 27       	eor	r24, r25
    1638:	80 93 89 02 	sts	0x0289, r24
		flag.tap = 1;
    163c:	80 91 8c 03 	lds	r24, 0x038C
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	80 93 8c 03 	sts	0x038C, r24
    1646:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1648:	21 30       	cpi	r18, 0x01	; 1
    164a:	81 f2       	breq	.-96     	; 0x15ec <check_start_stop_tap+0x72>
    164c:	08 95       	ret

0000164e <check_inst_switches>:
		
	}
	
}
	
void check_inst_switches(void) {
    164e:	2f 92       	push	r2
    1650:	3f 92       	push	r3
    1652:	4f 92       	push	r4
    1654:	5f 92       	push	r5
    1656:	6f 92       	push	r6
    1658:	7f 92       	push	r7
    165a:	8f 92       	push	r8
    165c:	9f 92       	push	r9
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	00 d0       	rcall	.+0      	; 0x1674 <check_inst_switches+0x26>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <check_inst_switches+0x28>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	
	if (button[INST_AC_1_SW].state) {
    167a:	80 91 49 02 	lds	r24, 0x0249
    167e:	86 ff       	sbrs	r24, 6
    1680:	11 c0       	rjmp	.+34     	; 0x16a4 <check_inst_switches+0x56>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1682:	e9 e4       	ldi	r30, 0x49	; 73
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	8f 7b       	andi	r24, 0xBF	; 191
    1688:	80 83       	st	Z, r24
		if (!sequencer.SHIFT) {
    168a:	80 91 8e 03 	lds	r24, 0x038E
    168e:	80 fd       	sbrc	r24, 0
    1690:	5c c1       	rjmp	.+696    	; 0x194a <check_inst_switches+0x2fc>
			turn_off_all_inst_leds();
    1692:	0e 94 94 04 	call	0x928	; 0x928 <turn_off_all_inst_leds>
			turn_on(ACCENT_1_LED);
    1696:	84 e1       	ldi	r24, 0x14	; 20
    1698:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
			sequencer.current_inst = AC;
    169c:	80 e1       	ldi	r24, 0x10	; 16
    169e:	80 93 63 04 	sts	0x0463, r24
    16a2:	53 c1       	rjmp	.+678    	; 0x194a <check_inst_switches+0x2fc>
    16a4:	0f 2e       	mov	r0, r31
    16a6:	f3 e0       	ldi	r31, 0x03	; 3
    16a8:	af 2e       	mov	r10, r31
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	bf 2e       	mov	r11, r31
    16ae:	f0 2d       	mov	r31, r0
	
}
	
void check_inst_switches(void) {
	
	if (button[INST_AC_1_SW].state) {
    16b0:	0f 2e       	mov	r0, r31
    16b2:	f9 e0       	ldi	r31, 0x09	; 9
    16b4:	cf 2e       	mov	r12, r31
    16b6:	d1 2c       	mov	r13, r1
    16b8:	f0 2d       	mov	r31, r0
    16ba:	0f 2e       	mov	r0, r31
    16bc:	f2 e1       	ldi	r31, 0x12	; 18
    16be:	ef 2e       	mov	r14, r31
    16c0:	f1 2c       	mov	r15, r1
    16c2:	f0 2d       	mov	r31, r0
    16c4:	41 e1       	ldi	r20, 0x11	; 17
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	5c 83       	std	Y+4, r21	; 0x04
    16ca:	4b 83       	std	Y+3, r20	; 0x03
    16cc:	00 e0       	ldi	r16, 0x00	; 0
    16ce:	10 e0       	ldi	r17, 0x00	; 0
		
		if (button[i].state) {
			
			button[i].state ^= button[i].state; //toggle state
			
			if (sequencer.SHIFT) {
    16d0:	0f 2e       	mov	r0, r31
    16d2:	fe e8       	ldi	r31, 0x8E	; 142
    16d4:	8f 2e       	mov	r8, r31
    16d6:	f3 e0       	ldi	r31, 0x03	; 3
    16d8:	9f 2e       	mov	r9, r31
    16da:	f0 2d       	mov	r31, r0
					}
				
				
				} else {
				
					if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    16dc:	0f 2e       	mov	r0, r31
    16de:	f3 e6       	ldi	r31, 0x63	; 99
    16e0:	4f 2e       	mov	r4, r31
    16e2:	f4 e0       	ldi	r31, 0x04	; 4
    16e4:	5f 2e       	mov	r5, r31
    16e6:	f0 2d       	mov	r31, r0
    16e8:	10 c0       	rjmp	.+32     	; 0x170a <check_inst_switches+0xbc>
    16ea:	0f 5f       	subi	r16, 0xFF	; 255
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	8b 83       	std	Y+3, r24	; 0x03
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	e9 1a       	sub	r14, r25
    16fc:	f9 0a       	sbc	r15, r25
    16fe:	ef ef       	ldi	r30, 0xFF	; 255
    1700:	ce 1a       	sub	r12, r30
    1702:	de 0a       	sbc	r13, r30
    1704:	f7 e0       	ldi	r31, 0x07	; 7
    1706:	af 0e       	add	r10, r31
    1708:	b1 1c       	adc	r11, r1
    170a:	2b 80       	ldd	r2, Y+3	; 0x03
    170c:	3c 80       	ldd	r3, Y+4	; 0x04
		return;
	}
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    170e:	f1 01       	movw	r30, r2
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	e7 5d       	subi	r30, 0xD7	; 215
    1716:	fd 4f       	sbci	r31, 0xFD	; 253
    1718:	80 81       	ld	r24, Z
    171a:	86 ff       	sbrs	r24, 6
    171c:	e8 c0       	rjmp	.+464    	; 0x18ee <check_inst_switches+0x2a0>
			
			button[i].state ^= button[i].state; //toggle state
    171e:	f1 01       	movw	r30, r2
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	e7 5d       	subi	r30, 0xD7	; 215
    1726:	fd 4f       	sbci	r31, 0xFD	; 253
    1728:	8f 7b       	andi	r24, 0xBF	; 191
    172a:	80 83       	st	Z, r24
			
			if (sequencer.SHIFT) {
    172c:	f4 01       	movw	r30, r8
    172e:	80 81       	ld	r24, Z
    1730:	80 ff       	sbrs	r24, 0
    1732:	be c0       	rjmp	.+380    	; 0x18b0 <check_inst_switches+0x262>
				
				if (drum_hit[i-INST_BD_2_SW].switch_bit != NO_SWITCH || (i - INST_BD_2_SW == CP)) { //need to handle toggling between instrument
    1734:	c8 01       	movw	r24, r16
    1736:	f5 01       	movw	r30, r10
    1738:	20 81       	ld	r18, Z
    173a:	2f 3f       	cpi	r18, 0xFF	; 255
    173c:	31 f4       	brne	.+12     	; 0x174a <check_inst_switches+0xfc>
    173e:	f7 e1       	ldi	r31, 0x17	; 23
    1740:	2f 16       	cp	r2, r31
    1742:	31 04       	cpc	r3, r1
    1744:	09 f0       	breq	.+2      	; 0x1748 <check_inst_switches+0xfa>
    1746:	a0 c0       	rjmp	.+320    	; 0x1888 <check_inst_switches+0x23a>
    1748:	d8 c0       	rjmp	.+432    	; 0x18fa <check_inst_switches+0x2ac>
					//maybe evaluate the two drum states as 00, 01, 10, 11 and then use switch case
					uint8_t mute_state = (drum_hit[i - INST_BD_2_SW].muted) | (drum_hit[i - INST_BD_2_SW + 9].muted << 1);
    174a:	96 01       	movw	r18, r12
    174c:	f6 01       	movw	r30, r12
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	ec 19       	sub	r30, r12
    175c:	fd 09       	sbc	r31, r13
    175e:	ea 5f       	subi	r30, 0xFA	; 250
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	40 81       	ld	r20, Z
    1764:	40 fb       	bst	r20, 0
    1766:	66 24       	eor	r6, r6
    1768:	60 f8       	bld	r6, 0
    176a:	71 2c       	mov	r7, r1
    176c:	a3 01       	movw	r20, r6
    176e:	44 0f       	add	r20, r20
    1770:	55 1f       	adc	r21, r21
    1772:	f8 01       	movw	r30, r16
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	e0 1b       	sub	r30, r16
    1782:	f1 0b       	sbc	r31, r17
    1784:	ea 5f       	subi	r30, 0xFA	; 250
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	50 81       	ld	r21, Z
    178a:	51 70       	andi	r21, 0x01	; 1
    178c:	45 2b       	or	r20, r21
					switch (mute_state) {
    178e:	41 30       	cpi	r20, 0x01	; 1
    1790:	21 f1       	breq	.+72     	; 0x17da <check_inst_switches+0x18c>
    1792:	30 f0       	brcs	.+12     	; 0x17a0 <check_inst_switches+0x152>
    1794:	42 30       	cpi	r20, 0x02	; 2
    1796:	f1 f1       	breq	.+124    	; 0x1814 <check_inst_switches+0x1c6>
    1798:	43 30       	cpi	r20, 0x03	; 3
    179a:	09 f4       	brne	.+2      	; 0x179e <check_inst_switches+0x150>
    179c:	58 c0       	rjmp	.+176    	; 0x184e <check_inst_switches+0x200>
    179e:	a7 c0       	rjmp	.+334    	; 0x18ee <check_inst_switches+0x2a0>
						
						case 0:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    17a0:	fc 01       	movw	r30, r24
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	e8 1b       	sub	r30, r24
    17b0:	f9 0b       	sbc	r31, r25
    17b2:	ea 5f       	subi	r30, 0xFA	; 250
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	80 81       	ld	r24, Z
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;
    17bc:	f9 01       	movw	r30, r18
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	e2 1b       	sub	r30, r18
    17cc:	f3 0b       	sbc	r31, r19
    17ce:	ea 5f       	subi	r30, 0xFA	; 250
    17d0:	fe 4f       	sbci	r31, 0xFE	; 254
    17d2:	80 81       	ld	r24, Z
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	80 83       	st	Z, r24
						break;
    17d8:	8a c0       	rjmp	.+276    	; 0x18ee <check_inst_switches+0x2a0>
						
						case 1:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    17da:	fc 01       	movw	r30, r24
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	ee 0f       	add	r30, r30
    17e2:	ff 1f       	adc	r31, r31
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	e8 1b       	sub	r30, r24
    17ea:	f9 0b       	sbc	r31, r25
    17ec:	ea 5f       	subi	r30, 0xFA	; 250
    17ee:	fe 4f       	sbci	r31, 0xFE	; 254
    17f0:	80 81       	ld	r24, Z
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
    17f4:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;									
    17f6:	f9 01       	movw	r30, r18
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	e2 1b       	sub	r30, r18
    1806:	f3 0b       	sbc	r31, r19
    1808:	ea 5f       	subi	r30, 0xFA	; 250
    180a:	fe 4f       	sbci	r31, 0xFE	; 254
    180c:	80 81       	ld	r24, Z
    180e:	81 60       	ori	r24, 0x01	; 1
    1810:	80 83       	st	Z, r24
						break;
    1812:	6d c0       	rjmp	.+218    	; 0x18ee <check_inst_switches+0x2a0>
						
						case 2:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    1814:	fc 01       	movw	r30, r24
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	e8 1b       	sub	r30, r24
    1824:	f9 0b       	sbc	r31, r25
    1826:	ea 5f       	subi	r30, 0xFA	; 250
    1828:	fe 4f       	sbci	r31, 0xFE	; 254
    182a:	80 81       	ld	r24, Z
    182c:	81 60       	ori	r24, 0x01	; 1
    182e:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;						
    1830:	f9 01       	movw	r30, r18
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	ee 0f       	add	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	e2 1b       	sub	r30, r18
    1840:	f3 0b       	sbc	r31, r19
    1842:	ea 5f       	subi	r30, 0xFA	; 250
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	80 81       	ld	r24, Z
    1848:	81 60       	ori	r24, 0x01	; 1
    184a:	80 83       	st	Z, r24
						break;
    184c:	50 c0       	rjmp	.+160    	; 0x18ee <check_inst_switches+0x2a0>
						
						case 3:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    184e:	fc 01       	movw	r30, r24
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	e8 1b       	sub	r30, r24
    185e:	f9 0b       	sbc	r31, r25
    1860:	ea 5f       	subi	r30, 0xFA	; 250
    1862:	fe 4f       	sbci	r31, 0xFE	; 254
    1864:	80 81       	ld	r24, Z
    1866:	8e 7f       	andi	r24, 0xFE	; 254
    1868:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;						
    186a:	f9 01       	movw	r30, r18
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	e2 1b       	sub	r30, r18
    187a:	f3 0b       	sbc	r31, r19
    187c:	ea 5f       	subi	r30, 0xFA	; 250
    187e:	fe 4f       	sbci	r31, 0xFE	; 254
    1880:	80 81       	ld	r24, Z
    1882:	8e 7f       	andi	r24, 0xFE	; 254
    1884:	80 83       	st	Z, r24
						break;
    1886:	33 c0       	rjmp	.+102    	; 0x18ee <check_inst_switches+0x2a0>
						
					}
					
				} else {
					
						drum_hit[i - INST_BD_2_SW].muted ^= 1<<0; //toggle drum mute
    1888:	f8 01       	movw	r30, r16
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	ee 0f       	add	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	e0 1b       	sub	r30, r16
    1898:	f1 0b       	sbc	r31, r17
    189a:	ea 5f       	subi	r30, 0xFA	; 250
    189c:	fe 4f       	sbci	r31, 0xFE	; 254
    189e:	80 81       	ld	r24, Z
    18a0:	98 2f       	mov	r25, r24
    18a2:	91 70       	andi	r25, 0x01	; 1
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	92 27       	eor	r25, r18
    18a8:	90 fb       	bst	r25, 0
    18aa:	80 f9       	bld	r24, 0
    18ac:	80 83       	st	Z, r24
    18ae:	1f c0       	rjmp	.+62     	; 0x18ee <check_inst_switches+0x2a0>
					
				}
				
			} else {	
			
				turn_off_all_inst_leds(); 
    18b0:	0e 94 94 04 	call	0x928	; 0x928 <turn_off_all_inst_leds>
			
			
				if(drum_hit[i - INST_BD_2_SW].switch_bit != NO_SWITCH) { // need to handle instrument toggle here
    18b4:	f5 01       	movw	r30, r10
    18b6:	80 81       	ld	r24, Z
    18b8:	8f 3f       	cpi	r24, 0xFF	; 255
    18ba:	59 f0       	breq	.+22     	; 0x18d2 <check_inst_switches+0x284>
				
				
					if (sequencer.current_inst == i - INST_BD_2_SW) {
    18bc:	f2 01       	movw	r30, r4
    18be:	80 81       	ld	r24, Z
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	08 17       	cp	r16, r24
    18c4:	19 07       	cpc	r17, r25
    18c6:	11 f4       	brne	.+4      	; 0x18cc <check_inst_switches+0x27e>
						//alternative drum hits are offset by 9 places in drum_hit array
						sequencer.current_inst = i - INST_BD_2_SW + 9;
    18c8:	c0 82       	st	Z, r12
    18ca:	11 c0       	rjmp	.+34     	; 0x18ee <check_inst_switches+0x2a0>
					
					} else {			
						sequencer.current_inst = i - INST_BD_2_SW;
    18cc:	f2 01       	movw	r30, r4
    18ce:	00 83       	st	Z, r16
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <check_inst_switches+0x2a0>
					}
				
				
				} else {
				
					if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    18d2:	f2 01       	movw	r30, r4
    18d4:	80 81       	ld	r24, Z
    18d6:	86 30       	cpi	r24, 0x06	; 6
    18d8:	41 f4       	brne	.+16     	; 0x18ea <check_inst_switches+0x29c>
    18da:	f7 e1       	ldi	r31, 0x17	; 23
    18dc:	2f 16       	cp	r2, r31
    18de:	31 04       	cpc	r3, r1
    18e0:	21 f4       	brne	.+8      	; 0x18ea <check_inst_switches+0x29c>

						sequencer.current_inst = MA;
    18e2:	2f e0       	ldi	r18, 0x0F	; 15
    18e4:	f2 01       	movw	r30, r4
    18e6:	20 83       	st	Z, r18
    18e8:	00 cf       	rjmp	.-512    	; 0x16ea <check_inst_switches+0x9c>
					
					} else {
					
						sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    18ea:	f2 01       	movw	r30, r4
    18ec:	00 83       	st	Z, r16
			sequencer.current_inst = AC;
		}
		return;
	}
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    18ee:	fc e1       	ldi	r31, 0x1C	; 28
    18f0:	ef 16       	cp	r14, r31
    18f2:	f1 04       	cpc	r15, r1
    18f4:	0c f4       	brge	.+2      	; 0x18f8 <check_inst_switches+0x2aa>
    18f6:	f9 ce       	rjmp	.-526    	; 0x16ea <check_inst_switches+0x9c>
    18f8:	28 c0       	rjmp	.+80     	; 0x194a <check_inst_switches+0x2fc>
			
			if (sequencer.SHIFT) {
				
				if (drum_hit[i-INST_BD_2_SW].switch_bit != NO_SWITCH || (i - INST_BD_2_SW == CP)) { //need to handle toggling between instrument
					//maybe evaluate the two drum states as 00, 01, 10, 11 and then use switch case
					uint8_t mute_state = (drum_hit[i - INST_BD_2_SW].muted) | (drum_hit[i - INST_BD_2_SW + 9].muted << 1);
    18fa:	96 01       	movw	r18, r12
    18fc:	47 e0       	ldi	r20, 0x07	; 7
    18fe:	4c 9d       	mul	r20, r12
    1900:	f0 01       	movw	r30, r0
    1902:	4d 9d       	mul	r20, r13
    1904:	f0 0d       	add	r31, r0
    1906:	11 24       	eor	r1, r1
    1908:	ea 5f       	subi	r30, 0xFA	; 250
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	40 81       	ld	r20, Z
    190e:	41 70       	andi	r20, 0x01	; 1
    1910:	49 83       	std	Y+1, r20	; 0x01
    1912:	1a 82       	std	Y+2, r1	; 0x02
    1914:	49 81       	ldd	r20, Y+1	; 0x01
    1916:	5a 81       	ldd	r21, Y+2	; 0x02
    1918:	44 0f       	add	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	67 e0       	ldi	r22, 0x07	; 7
    191e:	60 9f       	mul	r22, r16
    1920:	f0 01       	movw	r30, r0
    1922:	61 9f       	mul	r22, r17
    1924:	f0 0d       	add	r31, r0
    1926:	11 24       	eor	r1, r1
    1928:	ea 5f       	subi	r30, 0xFA	; 250
    192a:	fe 4f       	sbci	r31, 0xFE	; 254
    192c:	50 81       	ld	r21, Z
    192e:	51 70       	andi	r21, 0x01	; 1
    1930:	45 2b       	or	r20, r21
					switch (mute_state) {
    1932:	41 30       	cpi	r20, 0x01	; 1
    1934:	09 f4       	brne	.+2      	; 0x1938 <check_inst_switches+0x2ea>
    1936:	51 cf       	rjmp	.-350    	; 0x17da <check_inst_switches+0x18c>
    1938:	08 f4       	brcc	.+2      	; 0x193c <check_inst_switches+0x2ee>
    193a:	32 cf       	rjmp	.-412    	; 0x17a0 <check_inst_switches+0x152>
    193c:	42 30       	cpi	r20, 0x02	; 2
    193e:	09 f4       	brne	.+2      	; 0x1942 <check_inst_switches+0x2f4>
    1940:	69 cf       	rjmp	.-302    	; 0x1814 <check_inst_switches+0x1c6>
    1942:	43 30       	cpi	r20, 0x03	; 3
    1944:	09 f4       	brne	.+2      	; 0x1948 <check_inst_switches+0x2fa>
    1946:	83 cf       	rjmp	.-250    	; 0x184e <check_inst_switches+0x200>
    1948:	d0 ce       	rjmp	.-608    	; 0x16ea <check_inst_switches+0x9c>
		
	}
	

	
}	
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	7f 90       	pop	r7
    196c:	6f 90       	pop	r6
    196e:	5f 90       	pop	r5
    1970:	4f 90       	pop	r4
    1972:	3f 90       	pop	r3
    1974:	2f 90       	pop	r2
    1976:	08 95       	ret

00001978 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    1978:	80 91 65 02 	lds	r24, 0x0265
    197c:	86 ff       	sbrs	r24, 6
    197e:	29 c0       	rjmp	.+82     	; 0x19d2 <check_variation_switches+0x5a>
    1980:	90 91 8e 03 	lds	r25, 0x038E
    1984:	90 fd       	sbrc	r25, 0
    1986:	25 c0       	rjmp	.+74     	; 0x19d2 <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    1988:	e5 e6       	ldi	r30, 0x65	; 101
    198a:	f2 e0       	ldi	r31, 0x02	; 2
    198c:	8f 7b       	andi	r24, 0xBF	; 191
    198e:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    1990:	ec e5       	ldi	r30, 0x5C	; 92
    1992:	f4 e0       	ldi	r31, 0x04	; 4
    1994:	80 81       	ld	r24, Z
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	80 83       	st	Z, r24
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	29 f4       	brne	.+10     	; 0x19a8 <check_variation_switches+0x30>
    199e:	10 92 5c 04 	sts	0x045C, r1
		if (sequencer.START) {
    19a2:	91 ff       	sbrs	r25, 1
    19a4:	0b c0       	rjmp	.+22     	; 0x19bc <check_variation_switches+0x44>
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <check_variation_switches+0x34>
    19a8:	91 ff       	sbrs	r25, 1
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    19ac:	80 91 8c 03 	lds	r24, 0x038C
    19b0:	84 60       	ori	r24, 0x04	; 4
    19b2:	80 93 8c 03 	sts	0x038C, r24
    19b6:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    19b8:	8d 7f       	andi	r24, 0xFD	; 253
    19ba:	31 f4       	brne	.+12     	; 0x19c8 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    19bc:	eb e5       	ldi	r30, 0x5B	; 91
    19be:	f4 e0       	ldi	r31, 0x04	; 4
    19c0:	80 81       	ld	r24, Z
    19c2:	8e 7f       	andi	r24, 0xFE	; 254
    19c4:	80 83       	st	Z, r24
    19c6:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    19c8:	eb e5       	ldi	r30, 0x5B	; 91
    19ca:	f4 e0       	ldi	r31, 0x04	; 4
    19cc:	80 81       	ld	r24, Z
    19ce:	81 60       	ori	r24, 0x01	; 1
    19d0:	80 83       	st	Z, r24
    19d2:	08 95       	ret

000019d4 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    19e0:	80 91 8e 03 	lds	r24, 0x038E
    19e4:	86 70       	andi	r24, 0x06	; 6
    19e6:	84 30       	cpi	r24, 0x04	; 4
    19e8:	09 f0       	breq	.+2      	; 0x19ec <check_clear_switch+0x18>
    19ea:	43 c0       	rjmp	.+134    	; 0x1a72 <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    19ec:	80 91 8d 03 	lds	r24, 0x038D
    19f0:	81 11       	cpse	r24, r1
    19f2:	46 c0       	rjmp	.+140    	; 0x1a80 <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    19f4:	8c e1       	ldi	r24, 0x1C	; 28
    19f6:	0e 94 81 04 	call	0x902	; 0x902 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    19fa:	eb e5       	ldi	r30, 0x5B	; 91
    19fc:	f4 e0       	ldi	r31, 0x04	; 4
    19fe:	80 81       	ld	r24, Z
    1a00:	80 fb       	bst	r24, 0
    1a02:	ee 24       	eor	r14, r14
    1a04:	e0 f8       	bld	r14, 0
    1a06:	f1 2c       	mov	r15, r1
    1a08:	26 e6       	ldi	r18, 0x66	; 102
    1a0a:	2e 9d       	mul	r18, r14
    1a0c:	d0 01       	movw	r26, r0
    1a0e:	2f 9d       	mul	r18, r15
    1a10:	b0 0d       	add	r27, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	a1 57       	subi	r26, 0x71	; 113
    1a16:	bc 4f       	sbci	r27, 0xFC	; 252
    1a18:	80 e4       	ldi	r24, 0x40	; 64
    1a1a:	ed 01       	movw	r28, r26
    1a1c:	19 92       	st	Y+, r1
    1a1e:	8a 95       	dec	r24
    1a20:	e9 f7       	brne	.-6      	; 0x1a1c <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    1a22:	80 81       	ld	r24, Z
    1a24:	08 2f       	mov	r16, r24
    1a26:	01 70       	andi	r16, 0x01	; 1
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	20 9f       	mul	r18, r16
    1a2c:	d0 01       	movw	r26, r0
    1a2e:	21 9f       	mul	r18, r17
    1a30:	b0 0d       	add	r27, r0
    1a32:	11 24       	eor	r1, r1
    1a34:	ad 52       	subi	r26, 0x2D	; 45
    1a36:	bc 4f       	sbci	r27, 0xFC	; 252
    1a38:	82 e2       	ldi	r24, 0x22	; 34
    1a3a:	ed 01       	movw	r28, r26
    1a3c:	19 92       	st	Y+, r1
    1a3e:	8a 95       	dec	r24
    1a40:	e9 f7       	brne	.-6      	; 0x1a3c <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    1a42:	80 81       	ld	r24, Z
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	c8 2f       	mov	r28, r24
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	d8 2f       	mov	r29, r24
    1a4c:	2c 9f       	mul	r18, r28
    1a4e:	c0 01       	movw	r24, r0
    1a50:	2d 9f       	mul	r18, r29
    1a52:	90 0d       	add	r25, r0
    1a54:	11 24       	eor	r1, r1
    1a56:	83 57       	subi	r24, 0x73	; 115
    1a58:	9c 4f       	sbci	r25, 0xFC	; 252
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	ee 5b       	subi	r30, 0xBE	; 190
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	11 82       	std	Z+1, r1	; 0x01
    1a62:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    1a64:	32 96       	adiw	r30, 0x02	; 2
    1a66:	11 82       	std	Z+1, r1	; 0x01
    1a68:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    1a6a:	80 e1       	ldi	r24, 0x10	; 16
    1a6c:	80 93 5e 04 	sts	0x045E, r24
				break;
    1a70:	07 c0       	rjmp	.+14     	; 0x1a80 <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    1a72:	80 91 8d 03 	lds	r24, 0x038D
    1a76:	81 11       	cpse	r24, r1
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    1a7a:	8c e1       	ldi	r24, 0x1C	; 28
    1a7c:	0e 94 44 04 	call	0x888	; 0x888 <turn_on>
		}
		
	}
	
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	08 95       	ret

00001a8e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1a8e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1a90:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1a92:	74 83       	std	Z+4, r23	; 0x04
    1a94:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1a96:	11 82       	std	Z+1, r1	; 0x01
    1a98:	10 82       	st	Z, r1
    1a9a:	08 95       	ret

00001a9c <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1aaa:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <store_and_clear_interrupt>
    1aae:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1ab0:	f9 80       	ldd	r15, Y+1	; 0x01
    1ab2:	4f 2d       	mov	r20, r15
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	2a 81       	ldd	r18, Y+2	; 0x02
    1abc:	62 2f       	mov	r22, r18
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	0e 94 76 10 	call	0x20ec	; 0x20ec <__divmodhi4>
    1ac4:	28 81       	ld	r18, Y
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	82 17       	cp	r24, r18
    1aca:	93 07       	cpc	r25, r19
    1acc:	29 f4       	brne	.+10     	; 0x1ad8 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1ace:	81 2f       	mov	r24, r17
    1ad0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <restore_interrupt_setting>
      return false;
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	12 c0       	rjmp	.+36     	; 0x1afc <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    1ada:	fc 81       	ldd	r31, Y+4	; 0x04
    1adc:	ef 0d       	add	r30, r15
    1ade:	f1 1d       	adc	r31, r1
    1ae0:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1ae2:	29 81       	ldd	r18, Y+1	; 0x01
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	c9 01       	movw	r24, r18
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	6a 81       	ldd	r22, Y+2	; 0x02
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	0e 94 76 10 	call	0x20ec	; 0x20ec <__divmodhi4>
    1af2:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1af4:	81 2f       	mov	r24, r17
    1af6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <restore_interrupt_setting>
      return true;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	ff 90       	pop	r15
    1b06:	08 95       	ret

00001b08 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1b0e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1b12:	39 81       	ldd	r19, Y+1	; 0x01
    1b14:	28 81       	ld	r18, Y
    1b16:	32 17       	cp	r19, r18
    1b18:	18 f0       	brcs	.+6      	; 0x1b20 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1b1a:	c3 2f       	mov	r28, r19
    1b1c:	c2 1b       	sub	r28, r18
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <bytequeue_length+0x20>
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	c3 2f       	mov	r28, r19
    1b24:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1b26:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1b28:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <restore_interrupt_setting>
   return len;
}
    1b2c:	8c 2f       	mov	r24, r28
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1b34:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1b36:	80 81       	ld	r24, Z
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	28 0f       	add	r18, r24
    1b3e:	31 1d       	adc	r19, r1
    1b40:	c9 01       	movw	r24, r18
    1b42:	62 81       	ldd	r22, Z+2	; 0x02
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	0e 94 76 10 	call	0x20ec	; 0x20ec <__divmodhi4>
    1b4a:	03 80       	ldd	r0, Z+3	; 0x03
    1b4c:	f4 81       	ldd	r31, Z+4	; 0x04
    1b4e:	e0 2d       	mov	r30, r0
    1b50:	e8 0f       	add	r30, r24
    1b52:	f9 1f       	adc	r31, r25
}
    1b54:	80 81       	ld	r24, Z
    1b56:	08 95       	ret

00001b58 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	ec 01       	movw	r28, r24
    1b60:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1b62:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <store_and_clear_interrupt>
    1b66:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1b68:	88 81       	ld	r24, Y
    1b6a:	21 2f       	mov	r18, r17
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	b9 01       	movw	r22, r18
    1b70:	68 0f       	add	r22, r24
    1b72:	71 1d       	adc	r23, r1
    1b74:	cb 01       	movw	r24, r22
    1b76:	6a 81       	ldd	r22, Y+2	; 0x02
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	0e 94 76 10 	call	0x20ec	; 0x20ec <__divmodhi4>
    1b7e:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1b80:	84 2f       	mov	r24, r20
    1b82:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <restore_interrupt_setting>
}
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	08 95       	ret

00001b8e <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1b8e:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1b90:	f8 94       	cli
   return sreg;
}
    1b92:	08 95       	ret

00001b94 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1b94:	8f bf       	out	0x3f, r24	; 63
    1b96:	08 95       	ret

00001b98 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1b98:	88 1f       	adc	r24, r24
    1b9a:	88 27       	eor	r24, r24
    1b9c:	88 1f       	adc	r24, r24
    1b9e:	08 95       	ret

00001ba0 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	88 3f       	cpi	r24, 0xF8	; 248
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <midi_is_realtime+0x8>
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
}
    1ba8:	89 2f       	mov	r24, r25
    1baa:	08 95       	ret

00001bac <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1bac:	98 2f       	mov	r25, r24
    1bae:	90 7f       	andi	r25, 0xF0	; 240
    1bb0:	90 3c       	cpi	r25, 0xC0	; 192
    1bb2:	b1 f0       	breq	.+44     	; 0x1be0 <midi_packet_length+0x34>
    1bb4:	58 f4       	brcc	.+22     	; 0x1bcc <midi_packet_length+0x20>
    1bb6:	90 39       	cpi	r25, 0x90	; 144
    1bb8:	41 f1       	breq	.+80     	; 0x1c0a <midi_packet_length+0x5e>
    1bba:	18 f4       	brcc	.+6      	; 0x1bc2 <midi_packet_length+0x16>
    1bbc:	90 38       	cpi	r25, 0x80	; 128
    1bbe:	19 f5       	brne	.+70     	; 0x1c06 <midi_packet_length+0x5a>
    1bc0:	24 c0       	rjmp	.+72     	; 0x1c0a <midi_packet_length+0x5e>
    1bc2:	90 3a       	cpi	r25, 0xA0	; 160
    1bc4:	11 f1       	breq	.+68     	; 0x1c0a <midi_packet_length+0x5e>
    1bc6:	90 3b       	cpi	r25, 0xB0	; 176
    1bc8:	f1 f4       	brne	.+60     	; 0x1c06 <midi_packet_length+0x5a>
    1bca:	1f c0       	rjmp	.+62     	; 0x1c0a <midi_packet_length+0x5e>
    1bcc:	90 3e       	cpi	r25, 0xE0	; 224
    1bce:	e9 f0       	breq	.+58     	; 0x1c0a <midi_packet_length+0x5e>
    1bd0:	18 f4       	brcc	.+6      	; 0x1bd8 <midi_packet_length+0x2c>
    1bd2:	90 3d       	cpi	r25, 0xD0	; 208
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <midi_packet_length+0x34>
    1bd6:	17 c0       	rjmp	.+46     	; 0x1c06 <midi_packet_length+0x5a>
    1bd8:	90 3f       	cpi	r25, 0xF0	; 240
    1bda:	21 f0       	breq	.+8      	; 0x1be4 <midi_packet_length+0x38>
    1bdc:	93 3f       	cpi	r25, 0xF3	; 243
    1bde:	99 f4       	brne	.+38     	; 0x1c06 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	08 95       	ret
      case 0xF0:
         switch(status) {
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	fc 01       	movw	r30, r24
    1be8:	e1 5f       	subi	r30, 0xF1	; 241
    1bea:	f1 09       	sbc	r31, r1
    1bec:	ef 30       	cpi	r30, 0x0F	; 15
    1bee:	f1 05       	cpc	r31, r1
    1bf0:	40 f4       	brcc	.+16     	; 0x1c02 <midi_packet_length+0x56>
    1bf2:	e6 5a       	subi	r30, 0xA6	; 166
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1bfa:	83 e0       	ldi	r24, 0x03	; 3
    1bfc:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1c10:	08 95       	ret

00001c12 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1c12:	fc 01       	movw	r30, r24
    1c14:	75 83       	std	Z+5, r23	; 0x05
    1c16:	64 83       	std	Z+4, r22	; 0x04
    1c18:	08 95       	ret

00001c1a <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	77 83       	std	Z+7, r23	; 0x07
    1c1e:	66 83       	std	Z+6, r22	; 0x06
    1c20:	08 95       	ret

00001c22 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1c22:	fc 01       	movw	r30, r24
    1c24:	77 8b       	std	Z+23, r23	; 0x17
    1c26:	66 8b       	std	Z+22, r22	; 0x16
    1c28:	08 95       	ret

00001c2a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1c30:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1c32:	1f a2       	std	Y+39, r1	; 0x27
    1c34:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1c36:	bc 01       	movw	r22, r24
    1c38:	68 5d       	subi	r22, 0xD8	; 216
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	40 ec       	ldi	r20, 0xC0	; 192
    1c3e:	88 51       	subi	r24, 0x18	; 24
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1c46:	1b 82       	std	Y+3, r1	; 0x03
    1c48:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1c4a:	1d 82       	std	Y+5, r1	; 0x05
    1c4c:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1c4e:	1f 82       	std	Y+7, r1	; 0x07
    1c50:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1c52:	19 86       	std	Y+9, r1	; 0x09
    1c54:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1c56:	1b 86       	std	Y+11, r1	; 0x0b
    1c58:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1c5a:	1d 86       	std	Y+13, r1	; 0x0d
    1c5c:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1c5e:	1f 86       	std	Y+15, r1	; 0x0f
    1c60:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1c62:	19 8a       	std	Y+17, r1	; 0x11
    1c64:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1c66:	1b 8a       	std	Y+19, r1	; 0x13
    1c68:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1c6a:	1d 8a       	std	Y+21, r1	; 0x15
    1c6c:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1c6e:	1f 8a       	std	Y+23, r1	; 0x17
    1c70:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1c72:	19 8e       	std	Y+25, r1	; 0x19
    1c74:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1c76:	1b 8e       	std	Y+27, r1	; 0x1b
    1c78:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1c7a:	1d 8e       	std	Y+29, r1	; 0x1d
    1c7c:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1c7e:	1f 8e       	std	Y+31, r1	; 0x1f
    1c80:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1c82:	19 a2       	std	Y+33, r1	; 0x21
    1c84:	18 a2       	std	Y+32, r1	; 0x20
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1c98:	66 23       	and	r22, r22
    1c9a:	99 f0       	breq	.+38     	; 0x1cc2 <midi_device_input+0x36>
    1c9c:	ea 01       	movw	r28, r20
    1c9e:	61 50       	subi	r22, 0x01	; 1
    1ca0:	06 2f       	mov	r16, r22
    1ca2:	10 e0       	ldi	r17, 0x00	; 0
    1ca4:	0f 5f       	subi	r16, 0xFF	; 255
    1ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca8:	04 0f       	add	r16, r20
    1caa:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1cac:	7c 01       	movw	r14, r24
    1cae:	28 ee       	ldi	r18, 0xE8	; 232
    1cb0:	e2 0e       	add	r14, r18
    1cb2:	f1 1c       	adc	r15, r1
    1cb4:	69 91       	ld	r22, Y+
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1cbc:	c0 17       	cp	r28, r16
    1cbe:	d1 07       	cpc	r29, r17
    1cc0:	c9 f7       	brne	.-14     	; 0x1cb4 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	08 95       	ret

00001cd0 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <midi_input_callbacks+0x16>
    1ce6:	1f 92       	push	r1
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	7c 01       	movw	r14, r24
    1cee:	6b 01       	movw	r12, r22
    1cf0:	14 2f       	mov	r17, r20
    1cf2:	b2 2e       	mov	r11, r18
    1cf4:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	95 96       	adiw	r26, 0x25	; 37
    1cfa:	8c 91       	ld	r24, X
    1cfc:	95 97       	sbiw	r26, 0x25	; 37
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	11 f5       	brne	.+68     	; 0x1d46 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1d02:	5a 96       	adiw	r26, 0x1a	; 26
    1d04:	ed 91       	ld	r30, X+
    1d06:	fc 91       	ld	r31, X
    1d08:	5b 97       	sbiw	r26, 0x1b	; 27
    1d0a:	30 97       	sbiw	r30, 0x00	; 0
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <midi_input_callbacks+0x40>
    1d0e:	cc c0       	rjmp	.+408    	; 0x1ea8 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1d10:	9b 01       	movw	r18, r22
    1d12:	21 50       	subi	r18, 0x01	; 1
    1d14:	31 09       	sbc	r19, r1
    1d16:	ab ea       	ldi	r26, 0xAB	; 171
    1d18:	ba ea       	ldi	r27, 0xAA	; 170
    1d1a:	0e 94 90 10 	call	0x2120	; 0x2120 <__umulhisi3>
    1d1e:	96 95       	lsr	r25
    1d20:	87 95       	ror	r24
    1d22:	9c 01       	movw	r18, r24
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	82 0f       	add	r24, r18
    1d2a:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1d2c:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1d2e:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1d30:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1d32:	4c 2d       	mov	r20, r12
    1d34:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1d36:	9e 01       	movw	r18, r28
    1d38:	2f 5f       	subi	r18, 0xFF	; 255
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	68 2f       	mov	r22, r24
    1d3e:	79 2f       	mov	r23, r25
    1d40:	c7 01       	movw	r24, r14
    1d42:	09 95       	icall
    1d44:	be c0       	rjmp	.+380    	; 0x1ec2 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1d46:	62 30       	cpi	r22, 0x02	; 2
    1d48:	71 05       	cpc	r23, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <midi_input_callbacks+0x7e>
    1d4c:	55 c0       	rjmp	.+170    	; 0x1df8 <midi_input_callbacks+0x128>
    1d4e:	63 30       	cpi	r22, 0x03	; 3
    1d50:	71 05       	cpc	r23, r1
    1d52:	29 f0       	breq	.+10     	; 0x1d5e <midi_input_callbacks+0x8e>
    1d54:	61 30       	cpi	r22, 0x01	; 1
    1d56:	71 05       	cpc	r23, r1
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <midi_input_callbacks+0x8c>
    1d5a:	a1 c0       	rjmp	.+322    	; 0x1e9e <midi_input_callbacks+0x1ce>
    1d5c:	88 c0       	rjmp	.+272    	; 0x1e6e <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1d5e:	84 2f       	mov	r24, r20
    1d60:	80 7f       	andi	r24, 0xF0	; 240
    1d62:	80 3a       	cpi	r24, 0xA0	; 160
    1d64:	f1 f0       	breq	.+60     	; 0x1da2 <midi_input_callbacks+0xd2>
    1d66:	28 f4       	brcc	.+10     	; 0x1d72 <midi_input_callbacks+0xa2>
    1d68:	80 38       	cpi	r24, 0x80	; 128
    1d6a:	a9 f0       	breq	.+42     	; 0x1d96 <midi_input_callbacks+0xc6>
    1d6c:	80 39       	cpi	r24, 0x90	; 144
    1d6e:	69 f0       	breq	.+26     	; 0x1d8a <midi_input_callbacks+0xba>
    1d70:	2f c0       	rjmp	.+94     	; 0x1dd0 <midi_input_callbacks+0x100>
    1d72:	80 3e       	cpi	r24, 0xE0	; 224
    1d74:	e1 f0       	breq	.+56     	; 0x1dae <midi_input_callbacks+0xde>
    1d76:	80 3f       	cpi	r24, 0xF0	; 240
    1d78:	01 f1       	breq	.+64     	; 0x1dba <midi_input_callbacks+0xea>
    1d7a:	80 3b       	cpi	r24, 0xB0	; 176
    1d7c:	49 f5       	brne	.+82     	; 0x1dd0 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    1d7e:	d7 01       	movw	r26, r14
    1d80:	12 96       	adiw	r26, 0x02	; 2
    1d82:	ed 91       	ld	r30, X+
    1d84:	fc 91       	ld	r31, X
    1d86:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1d88:	25 c0       	rjmp	.+74     	; 0x1dd4 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1d8a:	d7 01       	movw	r26, r14
    1d8c:	14 96       	adiw	r26, 0x04	; 4
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1d94:	1f c0       	rjmp	.+62     	; 0x1dd4 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1d96:	d7 01       	movw	r26, r14
    1d98:	16 96       	adiw	r26, 0x06	; 6
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1da0:	19 c0       	rjmp	.+50     	; 0x1dd4 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1da2:	d7 01       	movw	r26, r14
    1da4:	18 96       	adiw	r26, 0x08	; 8
    1da6:	ed 91       	ld	r30, X+
    1da8:	fc 91       	ld	r31, X
    1daa:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1dac:	13 c0       	rjmp	.+38     	; 0x1dd4 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1dae:	d7 01       	movw	r26, r14
    1db0:	1a 96       	adiw	r26, 0x0a	; 10
    1db2:	ed 91       	ld	r30, X+
    1db4:	fc 91       	ld	r31, X
    1db6:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1db8:	0d c0       	rjmp	.+26     	; 0x1dd4 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1dba:	42 3f       	cpi	r20, 0xF2	; 242
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <midi_input_callbacks+0xf0>
    1dbe:	74 c0       	rjmp	.+232    	; 0x1ea8 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1dc0:	d7 01       	movw	r26, r14
    1dc2:	1c 96       	adiw	r26, 0x0c	; 12
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1dca:	30 97       	sbiw	r30, 0x00	; 0
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <midi_input_callbacks+0x10e>
    1dce:	6c c0       	rjmp	.+216    	; 0x1ea8 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1dd0:	e0 e0       	ldi	r30, 0x00	; 0
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1dd4:	30 97       	sbiw	r30, 0x00	; 0
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <midi_input_callbacks+0x10a>
    1dd8:	67 c0       	rjmp	.+206    	; 0x1ea8 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1dda:	12 3f       	cpi	r17, 0xF2	; 242
    1ddc:	31 f4       	brne	.+12     	; 0x1dea <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1dde:	2a 2d       	mov	r18, r10
    1de0:	4b 2d       	mov	r20, r11
    1de2:	62 ef       	ldi	r22, 0xF2	; 242
    1de4:	c7 01       	movw	r24, r14
    1de6:	09 95       	icall
    1de8:	6c c0       	rjmp	.+216    	; 0x1ec2 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1dea:	2a 2d       	mov	r18, r10
    1dec:	4b 2d       	mov	r20, r11
    1dee:	61 2f       	mov	r22, r17
    1df0:	6f 70       	andi	r22, 0x0F	; 15
    1df2:	c7 01       	movw	r24, r14
    1df4:	09 95       	icall
    1df6:	65 c0       	rjmp	.+202    	; 0x1ec2 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1df8:	84 2f       	mov	r24, r20
    1dfa:	80 7f       	andi	r24, 0xF0	; 240
    1dfc:	80 3d       	cpi	r24, 0xD0	; 208
    1dfe:	51 f0       	breq	.+20     	; 0x1e14 <midi_input_callbacks+0x144>
    1e00:	80 3f       	cpi	r24, 0xF0	; 240
    1e02:	71 f0       	breq	.+28     	; 0x1e20 <midi_input_callbacks+0x150>
    1e04:	80 3c       	cpi	r24, 0xC0	; 192
    1e06:	01 f5       	brne	.+64     	; 0x1e48 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1e08:	d7 01       	movw	r26, r14
    1e0a:	1e 96       	adiw	r26, 0x0e	; 14
    1e0c:	ed 91       	ld	r30, X+
    1e0e:	fc 91       	ld	r31, X
    1e10:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1e12:	1c c0       	rjmp	.+56     	; 0x1e4c <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1e14:	d7 01       	movw	r26, r14
    1e16:	50 96       	adiw	r26, 0x10	; 16
    1e18:	ed 91       	ld	r30, X+
    1e1a:	fc 91       	ld	r31, X
    1e1c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1e1e:	16 c0       	rjmp	.+44     	; 0x1e4c <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1e20:	43 3f       	cpi	r20, 0xF3	; 243
    1e22:	41 f4       	brne	.+16     	; 0x1e34 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1e24:	d7 01       	movw	r26, r14
    1e26:	52 96       	adiw	r26, 0x12	; 18
    1e28:	ed 91       	ld	r30, X+
    1e2a:	fc 91       	ld	r31, X
    1e2c:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1e2e:	30 97       	sbiw	r30, 0x00	; 0
    1e30:	99 f4       	brne	.+38     	; 0x1e58 <midi_input_callbacks+0x188>
    1e32:	3a c0       	rjmp	.+116    	; 0x1ea8 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1e34:	41 3f       	cpi	r20, 0xF1	; 241
    1e36:	c1 f5       	brne	.+112    	; 0x1ea8 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1e38:	d7 01       	movw	r26, r14
    1e3a:	54 96       	adiw	r26, 0x14	; 20
    1e3c:	ed 91       	ld	r30, X+
    1e3e:	fc 91       	ld	r31, X
    1e40:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1e42:	30 97       	sbiw	r30, 0x00	; 0
    1e44:	49 f4       	brne	.+18     	; 0x1e58 <midi_input_callbacks+0x188>
    1e46:	30 c0       	rjmp	.+96     	; 0x1ea8 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1e48:	e0 e0       	ldi	r30, 0x00	; 0
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1e4c:	30 97       	sbiw	r30, 0x00	; 0
    1e4e:	61 f1       	breq	.+88     	; 0x1ea8 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1e50:	81 2f       	mov	r24, r17
    1e52:	8d 7f       	andi	r24, 0xFD	; 253
    1e54:	81 3f       	cpi	r24, 0xF1	; 241
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1e58:	4b 2d       	mov	r20, r11
    1e5a:	61 2f       	mov	r22, r17
    1e5c:	c7 01       	movw	r24, r14
    1e5e:	09 95       	icall
    1e60:	30 c0       	rjmp	.+96     	; 0x1ec2 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1e62:	4b 2d       	mov	r20, r11
    1e64:	61 2f       	mov	r22, r17
    1e66:	6f 70       	andi	r22, 0x0F	; 15
    1e68:	c7 01       	movw	r24, r14
    1e6a:	09 95       	icall
    1e6c:	2a c0       	rjmp	.+84     	; 0x1ec2 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1e6e:	84 2f       	mov	r24, r20
    1e70:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <midi_is_realtime>
    1e74:	88 23       	and	r24, r24
    1e76:	31 f0       	breq	.+12     	; 0x1e84 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1e78:	d7 01       	movw	r26, r14
    1e7a:	56 96       	adiw	r26, 0x16	; 22
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
    1e80:	57 97       	sbiw	r26, 0x17	; 23
    1e82:	07 c0       	rjmp	.+14     	; 0x1e92 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1e84:	16 3f       	cpi	r17, 0xF6	; 246
    1e86:	81 f4       	brne	.+32     	; 0x1ea8 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1e88:	d7 01       	movw	r26, r14
    1e8a:	58 96       	adiw	r26, 0x18	; 24
    1e8c:	ed 91       	ld	r30, X+
    1e8e:	fc 91       	ld	r31, X
    1e90:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1e92:	30 97       	sbiw	r30, 0x00	; 0
    1e94:	49 f0       	breq	.+18     	; 0x1ea8 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1e96:	61 2f       	mov	r22, r17
    1e98:	c7 01       	movw	r24, r14
    1e9a:	09 95       	icall
    1e9c:	12 c0       	rjmp	.+36     	; 0x1ec2 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1e9e:	64 30       	cpi	r22, 0x04	; 4
    1ea0:	71 05       	cpc	r23, r1
    1ea2:	10 f0       	brcs	.+4      	; 0x1ea8 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1ea4:	c1 2c       	mov	r12, r1
    1ea6:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1ea8:	d7 01       	movw	r26, r14
    1eaa:	5c 96       	adiw	r26, 0x1c	; 28
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	5d 97       	sbiw	r26, 0x1d	; 29
    1eb2:	30 97       	sbiw	r30, 0x00	; 0
    1eb4:	31 f0       	breq	.+12     	; 0x1ec2 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1eb6:	0a 2d       	mov	r16, r10
    1eb8:	2b 2d       	mov	r18, r11
    1eba:	41 2f       	mov	r20, r17
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1ec2:	d7 01       	movw	r26, r14
    1ec4:	5e 96       	adiw	r26, 0x1e	; 30
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	5f 97       	sbiw	r26, 0x1f	; 31
    1ecc:	30 97       	sbiw	r30, 0x00	; 0
    1ece:	31 f0       	breq	.+12     	; 0x1edc <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1ed0:	0a 2d       	mov	r16, r10
    1ed2:	2b 2d       	mov	r18, r11
    1ed4:	41 2f       	mov	r20, r17
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	c7 01       	movw	r24, r14
    1eda:	09 95       	icall
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	08 95       	ret

00001ef8 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	ec 01       	movw	r28, r24
    1f04:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1f06:	86 2f       	mov	r24, r22
    1f08:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <midi_is_realtime>
    1f0c:	88 23       	and	r24, r24
    1f0e:	69 f0       	breq	.+26     	; 0x1f2a <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1f10:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1f16:	00 e0       	ldi	r16, 0x00	; 0
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	41 2f       	mov	r20, r17
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	70 e0       	ldi	r23, 0x00	; 0
    1f20:	ce 01       	movw	r24, r28
    1f22:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <midi_input_callbacks>
    device->input_state = state;
    1f26:	fd a2       	std	Y+37, r15	; 0x25
    1f28:	a4 c0       	rjmp	.+328    	; 0x2072 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1f2a:	81 2f       	mov	r24, r17
    1f2c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <midi_is_statusbyte>
    1f30:	88 23       	and	r24, r24
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <midi_process_byte+0x3e>
    1f34:	5d c0       	rjmp	.+186    	; 0x1ff0 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1f36:	8d a1       	ldd	r24, Y+37	; 0x25
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1f3c:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9f a3       	std	Y+39, r25	; 0x27
    1f44:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1f46:	81 2f       	mov	r24, r17
    1f48:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <midi_packet_length>
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <midi_process_byte+0x64>
    1f50:	b8 f0       	brcs	.+46     	; 0x1f80 <midi_process_byte+0x88>
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	79 f0       	breq	.+30     	; 0x1f74 <midi_process_byte+0x7c>
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	81 f0       	breq	.+32     	; 0x1f7a <midi_process_byte+0x82>
    1f5a:	46 c0       	rjmp	.+140    	; 0x1fe8 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	41 2f       	mov	r20, r17
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <midi_input_callbacks>
        device->input_state = IDLE;
    1f70:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1f72:	7f c0       	rjmp	.+254    	; 0x2072 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1f78:	7c c0       	rjmp	.+248    	; 0x2072 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1f7e:	79 c0       	rjmp	.+242    	; 0x2072 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1f80:	10 3f       	cpi	r17, 0xF0	; 240
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <midi_process_byte+0x92>
    1f84:	17 3f       	cpi	r17, 0xF7	; 247
    1f86:	51 f0       	breq	.+20     	; 0x1f9c <midi_process_byte+0xa4>
    1f88:	2b c0       	rjmp	.+86     	; 0x1fe0 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1f8a:	84 e0       	ldi	r24, 0x04	; 4
    1f8c:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1f8e:	80 ef       	ldi	r24, 0xF0	; 240
    1f90:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9f a3       	std	Y+39, r25	; 0x27
    1f98:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1f9a:	6b c0       	rjmp	.+214    	; 0x2072 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1f9c:	4e a1       	ldd	r20, Y+38	; 0x26
    1f9e:	5f a1       	ldd	r21, Y+39	; 0x27
    1fa0:	9a 01       	movw	r18, r20
    1fa2:	ab ea       	ldi	r26, 0xAB	; 171
    1fa4:	ba ea       	ldi	r27, 0xAA	; 170
    1fa6:	0e 94 90 10 	call	0x2120	; 0x2120 <__umulhisi3>
    1faa:	96 95       	lsr	r25
    1fac:	87 95       	ror	r24
    1fae:	9c 01       	movw	r18, r24
    1fb0:	22 0f       	add	r18, r18
    1fb2:	33 1f       	adc	r19, r19
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	fa 01       	movw	r30, r20
    1fba:	e8 1b       	sub	r30, r24
    1fbc:	f9 0b       	sbc	r31, r25
    1fbe:	ec 0f       	add	r30, r28
    1fc0:	fd 1f       	adc	r31, r29
    1fc2:	87 ef       	ldi	r24, 0xF7	; 247
    1fc4:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1fc6:	ba 01       	movw	r22, r20
    1fc8:	6f 5f       	subi	r22, 0xFF	; 255
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	7f a3       	std	Y+39, r23	; 0x27
    1fce:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1fd0:	0c a1       	ldd	r16, Y+36	; 0x24
    1fd2:	2b a1       	ldd	r18, Y+35	; 0x23
    1fd4:	4a a1       	ldd	r20, Y+34	; 0x22
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1fdc:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1fde:	49 c0       	rjmp	.+146    	; 0x2072 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1fe0:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1fe2:	1f a2       	std	Y+39, r1	; 0x27
    1fe4:	1e a2       	std	Y+38, r1	; 0x26
    1fe6:	45 c0       	rjmp	.+138    	; 0x2072 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1fe8:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1fea:	1f a2       	std	Y+39, r1	; 0x27
    1fec:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1fee:	41 c0       	rjmp	.+130    	; 0x2072 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1ff0:	ed a1       	ldd	r30, Y+37	; 0x25
    1ff2:	ee 23       	and	r30, r30
    1ff4:	f1 f1       	breq	.+124    	; 0x2072 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1ff6:	4e a1       	ldd	r20, Y+38	; 0x26
    1ff8:	5f a1       	ldd	r21, Y+39	; 0x27
    1ffa:	9a 01       	movw	r18, r20
    1ffc:	ab ea       	ldi	r26, 0xAB	; 171
    1ffe:	ba ea       	ldi	r27, 0xAA	; 170
    2000:	0e 94 90 10 	call	0x2120	; 0x2120 <__umulhisi3>
    2004:	96 95       	lsr	r25
    2006:	87 95       	ror	r24
    2008:	9c 01       	movw	r18, r24
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	82 0f       	add	r24, r18
    2010:	93 1f       	adc	r25, r19
    2012:	9a 01       	movw	r18, r20
    2014:	28 1b       	sub	r18, r24
    2016:	39 0b       	sbc	r19, r25
    2018:	de 01       	movw	r26, r28
    201a:	a2 0f       	add	r26, r18
    201c:	b3 1f       	adc	r27, r19
    201e:	92 96       	adiw	r26, 0x22	; 34
    2020:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2022:	ba 01       	movw	r22, r20
    2024:	6f 5f       	subi	r22, 0xFF	; 255
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	7f a3       	std	Y+39, r23	; 0x27
    202a:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    202c:	21 30       	cpi	r18, 0x01	; 1
    202e:	31 05       	cpc	r19, r1
    2030:	89 f0       	breq	.+34     	; 0x2054 <midi_process_byte+0x15c>
    2032:	22 30       	cpi	r18, 0x02	; 2
    2034:	31 05       	cpc	r19, r1
    2036:	e9 f4       	brne	.+58     	; 0x2072 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2038:	0c a1       	ldd	r16, Y+36	; 0x24
    203a:	2b a1       	ldd	r18, Y+35	; 0x23
    203c:	4a a1       	ldd	r20, Y+34	; 0x22
    203e:	ce 01       	movw	r24, r28
    2040:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2044:	8d a1       	ldd	r24, Y+37	; 0x25
    2046:	84 30       	cpi	r24, 0x04	; 4
    2048:	a1 f0       	breq	.+40     	; 0x2072 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9f a3       	std	Y+39, r25	; 0x27
    2050:	8e a3       	std	Y+38, r24	; 0x26
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2054:	e2 30       	cpi	r30, 0x02	; 2
    2056:	69 f4       	brne	.+26     	; 0x2072 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	2b a1       	ldd	r18, Y+35	; 0x23
    205c:	4a a1       	ldd	r20, Y+34	; 0x22
    205e:	ce 01       	movw	r24, r28
    2060:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2064:	8d a1       	ldd	r24, Y+37	; 0x25
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	21 f0       	breq	.+8      	; 0x2072 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9f a3       	std	Y+39, r25	; 0x27
    2070:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	08 95       	ret

0000207e <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    2090:	dc 01       	movw	r26, r24
    2092:	90 96       	adiw	r26, 0x20	; 32
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	91 97       	sbiw	r26, 0x21	; 33
    209a:	30 97       	sbiw	r30, 0x00	; 0
    209c:	09 f0       	breq	.+2      	; 0x20a0 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    209e:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    20a0:	86 01       	movw	r16, r12
    20a2:	08 51       	subi	r16, 0x18	; 24
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	c8 01       	movw	r24, r16
    20a8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    20ac:	e8 2e       	mov	r14, r24
    20ae:	f1 2c       	mov	r15, r1
    20b0:	e1 14       	cp	r14, r1
    20b2:	f1 04       	cpc	r15, r1
    20b4:	91 f0       	breq	.+36     	; 0x20da <midi_device_process+0x5c>
    20b6:	c0 e0       	ldi	r28, 0x00	; 0
    20b8:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	c8 01       	movw	r24, r16
    20be:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <bytequeue_get>
    20c2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    20c4:	c6 01       	movw	r24, r12
    20c6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	c8 01       	movw	r24, r16
    20ce:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    20d2:	21 96       	adiw	r28, 0x01	; 1
    20d4:	ce 15       	cp	r28, r14
    20d6:	df 05       	cpc	r29, r15
    20d8:	81 f7       	brne	.-32     	; 0x20ba <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	df 90       	pop	r13
    20e8:	cf 90       	pop	r12
    20ea:	08 95       	ret

000020ec <__divmodhi4>:
    20ec:	97 fb       	bst	r25, 7
    20ee:	07 2e       	mov	r0, r23
    20f0:	16 f4       	brtc	.+4      	; 0x20f6 <__divmodhi4+0xa>
    20f2:	00 94       	com	r0
    20f4:	07 d0       	rcall	.+14     	; 0x2104 <__divmodhi4_neg1>
    20f6:	77 fd       	sbrc	r23, 7
    20f8:	09 d0       	rcall	.+18     	; 0x210c <__divmodhi4_neg2>
    20fa:	0e 94 9f 10 	call	0x213e	; 0x213e <__udivmodhi4>
    20fe:	07 fc       	sbrc	r0, 7
    2100:	05 d0       	rcall	.+10     	; 0x210c <__divmodhi4_neg2>
    2102:	3e f4       	brtc	.+14     	; 0x2112 <__divmodhi4_exit>

00002104 <__divmodhi4_neg1>:
    2104:	90 95       	com	r25
    2106:	81 95       	neg	r24
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	08 95       	ret

0000210c <__divmodhi4_neg2>:
    210c:	70 95       	com	r23
    210e:	61 95       	neg	r22
    2110:	7f 4f       	sbci	r23, 0xFF	; 255

00002112 <__divmodhi4_exit>:
    2112:	08 95       	ret

00002114 <__tablejump2__>:
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	05 90       	lpm	r0, Z+
    211a:	f4 91       	lpm	r31, Z
    211c:	e0 2d       	mov	r30, r0
    211e:	09 94       	ijmp

00002120 <__umulhisi3>:
    2120:	a2 9f       	mul	r26, r18
    2122:	b0 01       	movw	r22, r0
    2124:	b3 9f       	mul	r27, r19
    2126:	c0 01       	movw	r24, r0
    2128:	a3 9f       	mul	r26, r19
    212a:	70 0d       	add	r23, r0
    212c:	81 1d       	adc	r24, r1
    212e:	11 24       	eor	r1, r1
    2130:	91 1d       	adc	r25, r1
    2132:	b2 9f       	mul	r27, r18
    2134:	70 0d       	add	r23, r0
    2136:	81 1d       	adc	r24, r1
    2138:	11 24       	eor	r1, r1
    213a:	91 1d       	adc	r25, r1
    213c:	08 95       	ret

0000213e <__udivmodhi4>:
    213e:	aa 1b       	sub	r26, r26
    2140:	bb 1b       	sub	r27, r27
    2142:	51 e1       	ldi	r21, 0x11	; 17
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <__udivmodhi4_ep>

00002146 <__udivmodhi4_loop>:
    2146:	aa 1f       	adc	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	a6 17       	cp	r26, r22
    214c:	b7 07       	cpc	r27, r23
    214e:	10 f0       	brcs	.+4      	; 0x2154 <__udivmodhi4_ep>
    2150:	a6 1b       	sub	r26, r22
    2152:	b7 0b       	sbc	r27, r23

00002154 <__udivmodhi4_ep>:
    2154:	88 1f       	adc	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	5a 95       	dec	r21
    215a:	a9 f7       	brne	.-22     	; 0x2146 <__udivmodhi4_loop>
    215c:	80 95       	com	r24
    215e:	90 95       	com	r25
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	08 95       	ret

00002166 <_exit>:
    2166:	f8 94       	cli

00002168 <__stop_program>:
    2168:	ff cf       	rjmp	.-2      	; 0x2168 <__stop_program>
