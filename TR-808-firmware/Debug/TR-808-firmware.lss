
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000aa6  00000b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800180  00800180  00000bba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002898  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000829  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a78  00000000  00000000  00003f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  000049c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb4  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f3  00000000  00000000  00005be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000074d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	9d 02       	muls	r25, r29
  b6:	9b 02       	muls	r25, r27
  b8:	9d 02       	muls	r25, r29
  ba:	9f 02       	muls	r25, r31
  bc:	9f 02       	muls	r25, r31
  be:	a5 02       	muls	r26, r21
  c0:	9f 02       	muls	r25, r31
  c2:	a5 02       	muls	r26, r21
  c4:	a5 02       	muls	r26, r21
  c6:	a5 02       	muls	r26, r21
  c8:	a5 02       	muls	r26, r21
  ca:	a5 02       	muls	r26, r21
  cc:	9f 02       	muls	r25, r31
  ce:	a5 02       	muls	r26, r21
  d0:	a5 02       	muls	r26, r21

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	e6 ea       	ldi	r30, 0xA6	; 166
  e6:	fa e0       	ldi	r31, 0x0A	; 10
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	a0 38       	cpi	r26, 0x80	; 128
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e8       	ldi	r26, 0x80	; 128
  f8:	b1 e0       	ldi	r27, 0x01	; 1
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a7 37       	cpi	r26, 0x77	; 119
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 99 01 	call	0x332	; 0x332 <main>
 108:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 110:	08 95       	ret

00000112 <real_time_event>:
	

}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 112:	08 95       	ret

00000114 <spi_shift_byte>:



uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 114:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 118:	ed ea       	ldi	r30, 0xAD	; 173
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <spi_shift_byte+0x8>
	return SPDR1;
 122:	80 91 ae 00 	lds	r24, 0x00AE
	
}
 126:	08 95       	ret

00000128 <note_on_event>:
void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	
	spi_data[1] = 1<<step_number;
 130:	80 91 80 01 	lds	r24, 0x0180
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	08 2e       	mov	r0, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <note_on_event+0x18>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <note_on_event+0x14>
 144:	a1 e8       	ldi	r26, 0x81	; 129
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	11 96       	adiw	r26, 0x01	; 1
 14a:	6c 93       	st	X, r22
 14c:	11 97       	sbiw	r26, 0x01	; 1
	spi_data[0] = (1<<step_number)>>8;
 14e:	7c 93       	st	X, r23
	if (step_number++ == 15) step_number = 0;
 150:	8f 30       	cpi	r24, 0x0F	; 15
 152:	21 f0       	breq	.+8      	; 0x15c <note_on_event+0x34>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 80 01 	sts	0x0180, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <note_on_event+0x38>
 15c:	10 92 80 01 	sts	0x0180, r1
	if (note < 16) {
 160:	40 31       	cpi	r20, 0x10	; 16
 162:	08 f0       	brcs	.+2      	; 0x166 <note_on_event+0x3e>
 164:	a3 c0       	rjmp	.+326    	; 0x2ac <note_on_event+0x184>
		
		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 166:	04 2f       	mov	r16, r20
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	f8 01       	movw	r30, r16
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e0 50       	subi	r30, 0x00	; 0
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	a2 81       	ldd	r26, Z+2	; 0x02
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	af 57       	subi	r26, 0x7F	; 127
 182:	be 4f       	sbci	r27, 0xFE	; 254
 184:	9c 91       	ld	r25, X
 186:	83 81       	ldd	r24, Z+3	; 0x03
 188:	89 2b       	or	r24, r25
 18a:	8c 93       	st	X, r24
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 18c:	a6 81       	ldd	r26, Z+6	; 0x06
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	af 57       	subi	r26, 0x7F	; 127
 192:	be 4f       	sbci	r27, 0xFE	; 254
 194:	9c 91       	ld	r25, X
 196:	87 81       	ldd	r24, Z+7	; 0x07
 198:	89 2b       	or	r24, r25
 19a:	8c 93       	st	X, r24
		
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
 19c:	94 81       	ldd	r25, Z+4	; 0x04
 19e:	9f 3f       	cpi	r25, 0xFF	; 255
 1a0:	b1 f0       	breq	.+44     	; 0x1ce <note_on_event+0xa6>
			
			
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 1a2:	a1 e8       	ldi	r26, 0x81	; 129
 1a4:	b1 e0       	ldi	r27, 0x01	; 1
 1a6:	13 96       	adiw	r26, 0x03	; 3
 1a8:	3c 91       	ld	r19, X
 1aa:	13 97       	sbiw	r26, 0x03	; 3
 1ac:	f8 01       	movw	r30, r16
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	eb 5f       	subi	r30, 0xFB	; 251
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	80 81       	ld	r24, Z
 1c0:	81 70       	andi	r24, 0x01	; 1
 1c2:	81 95       	neg	r24
 1c4:	83 27       	eor	r24, r19
 1c6:	89 23       	and	r24, r25
 1c8:	83 27       	eor	r24, r19
 1ca:	13 96       	adiw	r26, 0x03	; 3
 1cc:	8c 93       	st	X, r24
			
		}
	
	if (velocity > 64) {
 1ce:	21 34       	cpi	r18, 0x41	; 65
 1d0:	40 f0       	brcs	.+16     	; 0x1e2 <note_on_event+0xba>
		spi_data[8] |= (1<<ACCENT);
 1d2:	e1 e8       	ldi	r30, 0x81	; 129
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	80 85       	ldd	r24, Z+8	; 0x08
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 87       	std	Z+8, r24	; 0x08
		spi_data[2] |= (1<<ACCENT_LED);
 1dc:	82 81       	ldd	r24, Z+2	; 0x02
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	82 83       	std	Z+2, r24	; 0x02
	}
		PORTD |= 1<<TRIG;
 1e2:	5d 9a       	sbi	0x0b, 5	; 11
		
		spi_shift_byte(spi_data[0]);
 1e4:	c1 e8       	ldi	r28, 0x81	; 129
 1e6:	d1 e0       	ldi	r29, 0x01	; 1
 1e8:	88 81       	ld	r24, Y
 1ea:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 200:	8c 81       	ldd	r24, Y+4	; 0x04
 202:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 20c:	8e 81       	ldd	r24, Y+6	; 0x06
 20e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 212:	8f 81       	ldd	r24, Y+7	; 0x07
 214:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 218:	88 85       	ldd	r24, Y+8	; 0x08
 21a:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 21e:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 220:	43 9a       	sbi	0x08, 3	; 8
		
		PORTD &= ~(1<<TRIG);
 222:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f e0       	ldi	r24, 0x0F	; 15
 226:	9e e0       	ldi	r25, 0x0E	; 14
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <note_on_event+0x100>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <note_on_event+0x106>
 22e:	00 00       	nop
		
		_delay_us(900);
		
		spi_data[drum_hit[note].spi_byte_num] &= ~(drum_hit[note].trig_bit);
 230:	f8 01       	movw	r30, r16
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	a2 81       	ldd	r26, Z+2	; 0x02
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	af 57       	subi	r26, 0x7F	; 127
 248:	be 4f       	sbci	r27, 0xFE	; 254
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	80 95       	com	r24
 24e:	9c 91       	ld	r25, X
 250:	89 23       	and	r24, r25
 252:	8c 93       	st	X, r24
		spi_data[drum_hit[note].spi_led_byte_num] &= ~(drum_hit[note].led_bit);
 254:	a6 81       	ldd	r26, Z+6	; 0x06
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	af 57       	subi	r26, 0x7F	; 127
 25a:	be 4f       	sbci	r27, 0xFE	; 254
 25c:	87 81       	ldd	r24, Z+7	; 0x07
 25e:	80 95       	com	r24
 260:	9c 91       	ld	r25, X
 262:	89 23       	and	r24, r25
 264:	8c 93       	st	X, r24
		spi_data[8] &= ~(1<<ACCENT);
 266:	88 85       	ldd	r24, Y+8	; 0x08
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	88 87       	std	Y+8, r24	; 0x08
		spi_data[2] &= ~(1<<ACCENT_LED);
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	8f 7e       	andi	r24, 0xEF	; 239
 270:	8a 83       	std	Y+2, r24	; 0x02
		
		spi_shift_byte(spi_data[0]);
 272:	88 81       	ld	r24, Y
 274:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 28a:	8c 81       	ldd	r24, Y+4	; 0x04
 28c:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 296:	8e 81       	ldd	r24, Y+6	; 0x06
 298:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 29c:	8f 81       	ldd	r24, Y+7	; 0x07
 29e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);		
 2a2:	88 85       	ldd	r24, Y+8	; 0x08
 2a4:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 2a8:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 2aa:	43 9a       	sbi	0x08, 3	; 8
		
		
	}

		
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 2b6:	8f e1       	ldi	r24, 0x1F	; 31
 2b8:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 2bc:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 2c0:	88 e9       	ldi	r24, 0x98	; 152
 2c2:	80 93 c1 00 	sts	0x00C1, r24
 2c6:	08 95       	ret

000002c8 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	1f 92       	push	r1
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 2f4:	80 91 c6 00 	lds	r24, 0x00C6
 2f8:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 2fa:	ae 01       	movw	r20, r28
 2fc:	4f 5f       	subi	r20, 0xFF	; 255
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	8a e8       	ldi	r24, 0x8A	; 138
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 332:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 334:	8d b1       	in	r24, 0x0d	; 13
 336:	8c 60       	ori	r24, 0x0C	; 12
 338:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 33a:	87 b1       	in	r24, 0x07	; 7
 33c:	8e 60       	ori	r24, 0x0E	; 14
 33e:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 340:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 342:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 344:	88 b1       	in	r24, 0x08	; 8
 346:	81 7f       	andi	r24, 0xF1	; 241
 348:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 34a:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 34c:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER	
 34e:	80 e5       	ldi	r24, 0x50	; 80
 350:	80 93 ac 00 	sts	0x00AC, r24
	

	
	spi_shift_byte(0x00);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	
	
	
	PORTC &= ~(1<<SPI_LED_LATCH);
 38a:	43 98       	cbi	0x08, 3	; 8
	PORTC |= (1<<SPI_LED_LATCH);
 38c:	43 9a       	sbi	0x08, 3	; 8
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 38e:	8a e8       	ldi	r24, 0x8A	; 138
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 b3 02 	call	0x566	; 0x566 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 396:	64 e9       	ldi	r22, 0x94	; 148
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8a e8       	ldi	r24, 0x8A	; 138
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 a7 02 	call	0x54e	; 0x54e <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 3a2:	68 e8       	ldi	r22, 0x88	; 136
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	8a e8       	ldi	r24, 0x8A	; 138
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 ab 02 	call	0x556	; 0x556 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 3ae:	69 e8       	ldi	r22, 0x89	; 137
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	8a e8       	ldi	r24, 0x8A	; 138
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 af 02 	call	0x55e	; 0x55e <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 3ba:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setup_midi_usart>
	
	sei(); //enable global interrupts	
 3be:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work		
 3c0:	8a e8       	ldi	r24, 0x8A	; 138
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <midi_device_process>

	}
 3c8:	fb cf       	rjmp	.-10     	; 0x3c0 <main+0x8e>

000003ca <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 3ca:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 3cc:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 3ce:	74 83       	std	Z+4, r23	; 0x04
 3d0:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 3d2:	11 82       	std	Z+1, r1	; 0x01
 3d4:	10 82       	st	Z, r1
 3d6:	08 95       	ret

000003d8 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
 3e4:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 3e6:	0e 94 65 02 	call	0x4ca	; 0x4ca <store_and_clear_interrupt>
 3ea:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 3ec:	f9 80       	ldd	r15, Y+1	; 0x01
 3ee:	4f 2d       	mov	r20, r15
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	ca 01       	movw	r24, r20
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	2a 81       	ldd	r18, Y+2	; 0x02
 3f8:	62 2f       	mov	r22, r18
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodhi4>
 400:	28 81       	ld	r18, Y
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	82 17       	cp	r24, r18
 406:	93 07       	cpc	r25, r19
 408:	29 f4       	brne	.+10     	; 0x414 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 40a:	81 2f       	mov	r24, r17
 40c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <restore_interrupt_setting>
      return false;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	12 c0       	rjmp	.+36     	; 0x438 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 414:	eb 81       	ldd	r30, Y+3	; 0x03
 416:	fc 81       	ldd	r31, Y+4	; 0x04
 418:	ef 0d       	add	r30, r15
 41a:	f1 1d       	adc	r31, r1
 41c:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 41e:	29 81       	ldd	r18, Y+1	; 0x01
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	c9 01       	movw	r24, r18
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	6a 81       	ldd	r22, Y+2	; 0x02
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodhi4>
 42e:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 430:	81 2f       	mov	r24, r17
 432:	0e 94 68 02 	call	0x4d0	; 0x4d0 <restore_interrupt_setting>
      return true;
 436:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	08 95       	ret

00000444 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 44a:	0e 94 65 02 	call	0x4ca	; 0x4ca <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 44e:	39 81       	ldd	r19, Y+1	; 0x01
 450:	28 81       	ld	r18, Y
 452:	32 17       	cp	r19, r18
 454:	18 f0       	brcs	.+6      	; 0x45c <bytequeue_length+0x18>
      len = queue->end - queue->start;
 456:	c3 2f       	mov	r28, r19
 458:	c2 1b       	sub	r28, r18
 45a:	04 c0       	rjmp	.+8      	; 0x464 <bytequeue_length+0x20>
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	c3 2f       	mov	r28, r19
 460:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 462:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 464:	0e 94 68 02 	call	0x4d0	; 0x4d0 <restore_interrupt_setting>
   return len;
}
 468:	8c 2f       	mov	r24, r28
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 470:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 472:	80 81       	ld	r24, Z
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	9b 01       	movw	r18, r22
 478:	28 0f       	add	r18, r24
 47a:	31 1d       	adc	r19, r1
 47c:	c9 01       	movw	r24, r18
 47e:	62 81       	ldd	r22, Z+2	; 0x02
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodhi4>
 486:	03 80       	ldd	r0, Z+3	; 0x03
 488:	f4 81       	ldd	r31, Z+4	; 0x04
 48a:	e0 2d       	mov	r30, r0
 48c:	e8 0f       	add	r30, r24
 48e:	f9 1f       	adc	r31, r25
}
 490:	80 81       	ld	r24, Z
 492:	08 95       	ret

00000494 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	ec 01       	movw	r28, r24
 49c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 49e:	0e 94 65 02 	call	0x4ca	; 0x4ca <store_and_clear_interrupt>
 4a2:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 4a4:	88 81       	ld	r24, Y
 4a6:	21 2f       	mov	r18, r17
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	b9 01       	movw	r22, r18
 4ac:	68 0f       	add	r22, r24
 4ae:	71 1d       	adc	r23, r1
 4b0:	cb 01       	movw	r24, r22
 4b2:	6a 81       	ldd	r22, Y+2	; 0x02
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodhi4>
 4ba:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 4bc:	84 2f       	mov	r24, r20
 4be:	0e 94 68 02 	call	0x4d0	; 0x4d0 <restore_interrupt_setting>
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	08 95       	ret

000004ca <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 4ca:	8f b7       	in	r24, 0x3f	; 63
   cli();
 4cc:	f8 94       	cli
   return sreg;
}
 4ce:	08 95       	ret

000004d0 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 4d0:	8f bf       	out	0x3f, r24	; 63
 4d2:	08 95       	ret

000004d4 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 4d4:	88 1f       	adc	r24, r24
 4d6:	88 27       	eor	r24, r24
 4d8:	88 1f       	adc	r24, r24
 4da:	08 95       	ret

000004dc <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	88 3f       	cpi	r24, 0xF8	; 248
 4e0:	08 f4       	brcc	.+2      	; 0x4e4 <midi_is_realtime+0x8>
 4e2:	90 e0       	ldi	r25, 0x00	; 0
}
 4e4:	89 2f       	mov	r24, r25
 4e6:	08 95       	ret

000004e8 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 4e8:	98 2f       	mov	r25, r24
 4ea:	90 7f       	andi	r25, 0xF0	; 240
 4ec:	90 3c       	cpi	r25, 0xC0	; 192
 4ee:	b1 f0       	breq	.+44     	; 0x51c <midi_packet_length+0x34>
 4f0:	58 f4       	brcc	.+22     	; 0x508 <midi_packet_length+0x20>
 4f2:	90 39       	cpi	r25, 0x90	; 144
 4f4:	41 f1       	breq	.+80     	; 0x546 <midi_packet_length+0x5e>
 4f6:	18 f4       	brcc	.+6      	; 0x4fe <midi_packet_length+0x16>
 4f8:	90 38       	cpi	r25, 0x80	; 128
 4fa:	19 f5       	brne	.+70     	; 0x542 <midi_packet_length+0x5a>
 4fc:	24 c0       	rjmp	.+72     	; 0x546 <midi_packet_length+0x5e>
 4fe:	90 3a       	cpi	r25, 0xA0	; 160
 500:	11 f1       	breq	.+68     	; 0x546 <midi_packet_length+0x5e>
 502:	90 3b       	cpi	r25, 0xB0	; 176
 504:	f1 f4       	brne	.+60     	; 0x542 <midi_packet_length+0x5a>
 506:	1f c0       	rjmp	.+62     	; 0x546 <midi_packet_length+0x5e>
 508:	90 3e       	cpi	r25, 0xE0	; 224
 50a:	e9 f0       	breq	.+58     	; 0x546 <midi_packet_length+0x5e>
 50c:	18 f4       	brcc	.+6      	; 0x514 <midi_packet_length+0x2c>
 50e:	90 3d       	cpi	r25, 0xD0	; 208
 510:	29 f0       	breq	.+10     	; 0x51c <midi_packet_length+0x34>
 512:	17 c0       	rjmp	.+46     	; 0x542 <midi_packet_length+0x5a>
 514:	90 3f       	cpi	r25, 0xF0	; 240
 516:	21 f0       	breq	.+8      	; 0x520 <midi_packet_length+0x38>
 518:	93 3f       	cpi	r25, 0xF3	; 243
 51a:	99 f4       	brne	.+38     	; 0x542 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	08 95       	ret
      case 0xF0:
         switch(status) {
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	e1 5f       	subi	r30, 0xF1	; 241
 526:	f1 09       	sbc	r31, r1
 528:	ef 30       	cpi	r30, 0x0F	; 15
 52a:	f1 05       	cpc	r31, r1
 52c:	40 f4       	brcc	.+16     	; 0x53e <midi_packet_length+0x56>
 52e:	e6 5a       	subi	r30, 0xA6	; 166
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
         }
      default:
         return UNDEFINED;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 54c:	08 95       	ret

0000054e <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 54e:	fc 01       	movw	r30, r24
 550:	75 83       	std	Z+5, r23	; 0x05
 552:	64 83       	std	Z+4, r22	; 0x04
 554:	08 95       	ret

00000556 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 556:	fc 01       	movw	r30, r24
 558:	77 83       	std	Z+7, r23	; 0x07
 55a:	66 83       	std	Z+6, r22	; 0x06
 55c:	08 95       	ret

0000055e <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 55e:	fc 01       	movw	r30, r24
 560:	77 8b       	std	Z+23, r23	; 0x17
 562:	66 8b       	std	Z+22, r22	; 0x16
 564:	08 95       	ret

00000566 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 56c:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 56e:	1f a2       	std	Y+39, r1	; 0x27
 570:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 572:	bc 01       	movw	r22, r24
 574:	68 5d       	subi	r22, 0xD8	; 216
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	40 ec       	ldi	r20, 0xC0	; 192
 57a:	88 51       	subi	r24, 0x18	; 24
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 582:	1b 82       	std	Y+3, r1	; 0x03
 584:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 586:	1d 82       	std	Y+5, r1	; 0x05
 588:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 58a:	1f 82       	std	Y+7, r1	; 0x07
 58c:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 58e:	19 86       	std	Y+9, r1	; 0x09
 590:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 592:	1b 86       	std	Y+11, r1	; 0x0b
 594:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 596:	1d 86       	std	Y+13, r1	; 0x0d
 598:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 59a:	1f 86       	std	Y+15, r1	; 0x0f
 59c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 59e:	19 8a       	std	Y+17, r1	; 0x11
 5a0:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 5a2:	1b 8a       	std	Y+19, r1	; 0x13
 5a4:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 5a6:	1d 8a       	std	Y+21, r1	; 0x15
 5a8:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 5aa:	1f 8a       	std	Y+23, r1	; 0x17
 5ac:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 5ae:	19 8e       	std	Y+25, r1	; 0x19
 5b0:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 5b2:	1b 8e       	std	Y+27, r1	; 0x1b
 5b4:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 5b6:	1d 8e       	std	Y+29, r1	; 0x1d
 5b8:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 5ba:	1f 8e       	std	Y+31, r1	; 0x1f
 5bc:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 5be:	19 a2       	std	Y+33, r1	; 0x21
 5c0:	18 a2       	std	Y+32, r1	; 0x20
}
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 5d4:	66 23       	and	r22, r22
 5d6:	99 f0       	breq	.+38     	; 0x5fe <midi_device_input+0x36>
 5d8:	ea 01       	movw	r28, r20
 5da:	61 50       	subi	r22, 0x01	; 1
 5dc:	06 2f       	mov	r16, r22
 5de:	10 e0       	ldi	r17, 0x00	; 0
 5e0:	0f 5f       	subi	r16, 0xFF	; 255
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
 5e4:	04 0f       	add	r16, r20
 5e6:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 5e8:	7c 01       	movw	r14, r24
 5ea:	28 ee       	ldi	r18, 0xE8	; 232
 5ec:	e2 0e       	add	r14, r18
 5ee:	f1 1c       	adc	r15, r1
 5f0:	69 91       	ld	r22, Y+
 5f2:	c7 01       	movw	r24, r14
 5f4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 5f8:	c0 17       	cp	r28, r16
 5fa:	d1 07       	cpc	r29, r17
 5fc:	c9 f7       	brne	.-14     	; 0x5f0 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	08 95       	ret

0000060c <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 60c:	af 92       	push	r10
 60e:	bf 92       	push	r11
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	00 d0       	rcall	.+0      	; 0x622 <midi_input_callbacks+0x16>
 622:	1f 92       	push	r1
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	7c 01       	movw	r14, r24
 62a:	6b 01       	movw	r12, r22
 62c:	14 2f       	mov	r17, r20
 62e:	b2 2e       	mov	r11, r18
 630:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 632:	dc 01       	movw	r26, r24
 634:	95 96       	adiw	r26, 0x25	; 37
 636:	8c 91       	ld	r24, X
 638:	95 97       	sbiw	r26, 0x25	; 37
 63a:	84 30       	cpi	r24, 0x04	; 4
 63c:	11 f5       	brne	.+68     	; 0x682 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 63e:	5a 96       	adiw	r26, 0x1a	; 26
 640:	ed 91       	ld	r30, X+
 642:	fc 91       	ld	r31, X
 644:	5b 97       	sbiw	r26, 0x1b	; 27
 646:	30 97       	sbiw	r30, 0x00	; 0
 648:	09 f4       	brne	.+2      	; 0x64c <midi_input_callbacks+0x40>
 64a:	cc c0       	rjmp	.+408    	; 0x7e4 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 64c:	9b 01       	movw	r18, r22
 64e:	21 50       	subi	r18, 0x01	; 1
 650:	31 09       	sbc	r19, r1
 652:	ab ea       	ldi	r26, 0xAB	; 171
 654:	ba ea       	ldi	r27, 0xAA	; 170
 656:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__umulhisi3>
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	9c 01       	movw	r18, r24
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	82 0f       	add	r24, r18
 666:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 668:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 66a:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 66c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 66e:	4c 2d       	mov	r20, r12
 670:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 672:	9e 01       	movw	r18, r28
 674:	2f 5f       	subi	r18, 0xFF	; 255
 676:	3f 4f       	sbci	r19, 0xFF	; 255
 678:	68 2f       	mov	r22, r24
 67a:	79 2f       	mov	r23, r25
 67c:	c7 01       	movw	r24, r14
 67e:	09 95       	icall
 680:	be c0       	rjmp	.+380    	; 0x7fe <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
 682:	62 30       	cpi	r22, 0x02	; 2
 684:	71 05       	cpc	r23, r1
 686:	09 f4       	brne	.+2      	; 0x68a <midi_input_callbacks+0x7e>
 688:	55 c0       	rjmp	.+170    	; 0x734 <midi_input_callbacks+0x128>
 68a:	63 30       	cpi	r22, 0x03	; 3
 68c:	71 05       	cpc	r23, r1
 68e:	29 f0       	breq	.+10     	; 0x69a <midi_input_callbacks+0x8e>
 690:	61 30       	cpi	r22, 0x01	; 1
 692:	71 05       	cpc	r23, r1
 694:	09 f0       	breq	.+2      	; 0x698 <midi_input_callbacks+0x8c>
 696:	a1 c0       	rjmp	.+322    	; 0x7da <midi_input_callbacks+0x1ce>
 698:	88 c0       	rjmp	.+272    	; 0x7aa <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 69a:	84 2f       	mov	r24, r20
 69c:	80 7f       	andi	r24, 0xF0	; 240
 69e:	80 3a       	cpi	r24, 0xA0	; 160
 6a0:	f1 f0       	breq	.+60     	; 0x6de <midi_input_callbacks+0xd2>
 6a2:	28 f4       	brcc	.+10     	; 0x6ae <midi_input_callbacks+0xa2>
 6a4:	80 38       	cpi	r24, 0x80	; 128
 6a6:	a9 f0       	breq	.+42     	; 0x6d2 <midi_input_callbacks+0xc6>
 6a8:	80 39       	cpi	r24, 0x90	; 144
 6aa:	69 f0       	breq	.+26     	; 0x6c6 <midi_input_callbacks+0xba>
 6ac:	2f c0       	rjmp	.+94     	; 0x70c <midi_input_callbacks+0x100>
 6ae:	80 3e       	cpi	r24, 0xE0	; 224
 6b0:	e1 f0       	breq	.+56     	; 0x6ea <midi_input_callbacks+0xde>
 6b2:	80 3f       	cpi	r24, 0xF0	; 240
 6b4:	01 f1       	breq	.+64     	; 0x6f6 <midi_input_callbacks+0xea>
 6b6:	80 3b       	cpi	r24, 0xB0	; 176
 6b8:	49 f5       	brne	.+82     	; 0x70c <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 6ba:	d7 01       	movw	r26, r14
 6bc:	12 96       	adiw	r26, 0x02	; 2
 6be:	ed 91       	ld	r30, X+
 6c0:	fc 91       	ld	r31, X
 6c2:	13 97       	sbiw	r26, 0x03	; 3
              break;
 6c4:	25 c0       	rjmp	.+74     	; 0x710 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 6c6:	d7 01       	movw	r26, r14
 6c8:	14 96       	adiw	r26, 0x04	; 4
 6ca:	ed 91       	ld	r30, X+
 6cc:	fc 91       	ld	r31, X
 6ce:	15 97       	sbiw	r26, 0x05	; 5
              break;
 6d0:	1f c0       	rjmp	.+62     	; 0x710 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 6d2:	d7 01       	movw	r26, r14
 6d4:	16 96       	adiw	r26, 0x06	; 6
 6d6:	ed 91       	ld	r30, X+
 6d8:	fc 91       	ld	r31, X
 6da:	17 97       	sbiw	r26, 0x07	; 7
              break;
 6dc:	19 c0       	rjmp	.+50     	; 0x710 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 6de:	d7 01       	movw	r26, r14
 6e0:	18 96       	adiw	r26, 0x08	; 8
 6e2:	ed 91       	ld	r30, X+
 6e4:	fc 91       	ld	r31, X
 6e6:	19 97       	sbiw	r26, 0x09	; 9
              break;
 6e8:	13 c0       	rjmp	.+38     	; 0x710 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 6ea:	d7 01       	movw	r26, r14
 6ec:	1a 96       	adiw	r26, 0x0a	; 10
 6ee:	ed 91       	ld	r30, X+
 6f0:	fc 91       	ld	r31, X
 6f2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 6f6:	42 3f       	cpi	r20, 0xF2	; 242
 6f8:	09 f0       	breq	.+2      	; 0x6fc <midi_input_callbacks+0xf0>
 6fa:	74 c0       	rjmp	.+232    	; 0x7e4 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
 6fc:	d7 01       	movw	r26, r14
 6fe:	1c 96       	adiw	r26, 0x0c	; 12
 700:	ed 91       	ld	r30, X+
 702:	fc 91       	ld	r31, X
 704:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 706:	30 97       	sbiw	r30, 0x00	; 0
 708:	41 f4       	brne	.+16     	; 0x71a <midi_input_callbacks+0x10e>
 70a:	6c c0       	rjmp	.+216    	; 0x7e4 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 70c:	e0 e0       	ldi	r30, 0x00	; 0
 70e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 710:	30 97       	sbiw	r30, 0x00	; 0
 712:	09 f4       	brne	.+2      	; 0x716 <midi_input_callbacks+0x10a>
 714:	67 c0       	rjmp	.+206    	; 0x7e4 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 716:	12 3f       	cpi	r17, 0xF2	; 242
 718:	31 f4       	brne	.+12     	; 0x726 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 71a:	2a 2d       	mov	r18, r10
 71c:	4b 2d       	mov	r20, r11
 71e:	62 ef       	ldi	r22, 0xF2	; 242
 720:	c7 01       	movw	r24, r14
 722:	09 95       	icall
 724:	6c c0       	rjmp	.+216    	; 0x7fe <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 726:	2a 2d       	mov	r18, r10
 728:	4b 2d       	mov	r20, r11
 72a:	61 2f       	mov	r22, r17
 72c:	6f 70       	andi	r22, 0x0F	; 15
 72e:	c7 01       	movw	r24, r14
 730:	09 95       	icall
 732:	65 c0       	rjmp	.+202    	; 0x7fe <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 734:	84 2f       	mov	r24, r20
 736:	80 7f       	andi	r24, 0xF0	; 240
 738:	80 3d       	cpi	r24, 0xD0	; 208
 73a:	51 f0       	breq	.+20     	; 0x750 <midi_input_callbacks+0x144>
 73c:	80 3f       	cpi	r24, 0xF0	; 240
 73e:	71 f0       	breq	.+28     	; 0x75c <midi_input_callbacks+0x150>
 740:	80 3c       	cpi	r24, 0xC0	; 192
 742:	01 f5       	brne	.+64     	; 0x784 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 744:	d7 01       	movw	r26, r14
 746:	1e 96       	adiw	r26, 0x0e	; 14
 748:	ed 91       	ld	r30, X+
 74a:	fc 91       	ld	r31, X
 74c:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 74e:	1c c0       	rjmp	.+56     	; 0x788 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 750:	d7 01       	movw	r26, r14
 752:	50 96       	adiw	r26, 0x10	; 16
 754:	ed 91       	ld	r30, X+
 756:	fc 91       	ld	r31, X
 758:	51 97       	sbiw	r26, 0x11	; 17
              break;
 75a:	16 c0       	rjmp	.+44     	; 0x788 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 75c:	43 3f       	cpi	r20, 0xF3	; 243
 75e:	41 f4       	brne	.+16     	; 0x770 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
 760:	d7 01       	movw	r26, r14
 762:	52 96       	adiw	r26, 0x12	; 18
 764:	ed 91       	ld	r30, X+
 766:	fc 91       	ld	r31, X
 768:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 76a:	30 97       	sbiw	r30, 0x00	; 0
 76c:	99 f4       	brne	.+38     	; 0x794 <midi_input_callbacks+0x188>
 76e:	3a c0       	rjmp	.+116    	; 0x7e4 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 770:	41 3f       	cpi	r20, 0xF1	; 241
 772:	c1 f5       	brne	.+112    	; 0x7e4 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
 774:	d7 01       	movw	r26, r14
 776:	54 96       	adiw	r26, 0x14	; 20
 778:	ed 91       	ld	r30, X+
 77a:	fc 91       	ld	r31, X
 77c:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 77e:	30 97       	sbiw	r30, 0x00	; 0
 780:	49 f4       	brne	.+18     	; 0x794 <midi_input_callbacks+0x188>
 782:	30 c0       	rjmp	.+96     	; 0x7e4 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 784:	e0 e0       	ldi	r30, 0x00	; 0
 786:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 788:	30 97       	sbiw	r30, 0x00	; 0
 78a:	61 f1       	breq	.+88     	; 0x7e4 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 78c:	81 2f       	mov	r24, r17
 78e:	8d 7f       	andi	r24, 0xFD	; 253
 790:	81 3f       	cpi	r24, 0xF1	; 241
 792:	29 f4       	brne	.+10     	; 0x79e <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
 794:	4b 2d       	mov	r20, r11
 796:	61 2f       	mov	r22, r17
 798:	c7 01       	movw	r24, r14
 79a:	09 95       	icall
 79c:	30 c0       	rjmp	.+96     	; 0x7fe <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
 79e:	4b 2d       	mov	r20, r11
 7a0:	61 2f       	mov	r22, r17
 7a2:	6f 70       	andi	r22, 0x0F	; 15
 7a4:	c7 01       	movw	r24, r14
 7a6:	09 95       	icall
 7a8:	2a c0       	rjmp	.+84     	; 0x7fe <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 7aa:	84 2f       	mov	r24, r20
 7ac:	0e 94 6e 02 	call	0x4dc	; 0x4dc <midi_is_realtime>
 7b0:	88 23       	and	r24, r24
 7b2:	31 f0       	breq	.+12     	; 0x7c0 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
 7b4:	d7 01       	movw	r26, r14
 7b6:	56 96       	adiw	r26, 0x16	; 22
 7b8:	ed 91       	ld	r30, X+
 7ba:	fc 91       	ld	r31, X
 7bc:	57 97       	sbiw	r26, 0x17	; 23
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
 7c0:	16 3f       	cpi	r17, 0xF6	; 246
 7c2:	81 f4       	brne	.+32     	; 0x7e4 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
 7c4:	d7 01       	movw	r26, r14
 7c6:	58 96       	adiw	r26, 0x18	; 24
 7c8:	ed 91       	ld	r30, X+
 7ca:	fc 91       	ld	r31, X
 7cc:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 7ce:	30 97       	sbiw	r30, 0x00	; 0
 7d0:	49 f0       	breq	.+18     	; 0x7e4 <midi_input_callbacks+0x1d8>
            func(device, byte0);
 7d2:	61 2f       	mov	r22, r17
 7d4:	c7 01       	movw	r24, r14
 7d6:	09 95       	icall
 7d8:	12 c0       	rjmp	.+36     	; 0x7fe <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 7da:	64 30       	cpi	r22, 0x04	; 4
 7dc:	71 05       	cpc	r23, r1
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <midi_input_callbacks+0x1d8>
          cnt = 0;
 7e0:	c1 2c       	mov	r12, r1
 7e2:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 7e4:	d7 01       	movw	r26, r14
 7e6:	5c 96       	adiw	r26, 0x1c	; 28
 7e8:	ed 91       	ld	r30, X+
 7ea:	fc 91       	ld	r31, X
 7ec:	5d 97       	sbiw	r26, 0x1d	; 29
 7ee:	30 97       	sbiw	r30, 0x00	; 0
 7f0:	31 f0       	breq	.+12     	; 0x7fe <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 7f2:	0a 2d       	mov	r16, r10
 7f4:	2b 2d       	mov	r18, r11
 7f6:	41 2f       	mov	r20, r17
 7f8:	b6 01       	movw	r22, r12
 7fa:	c7 01       	movw	r24, r14
 7fc:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 7fe:	d7 01       	movw	r26, r14
 800:	5e 96       	adiw	r26, 0x1e	; 30
 802:	ed 91       	ld	r30, X+
 804:	fc 91       	ld	r31, X
 806:	5f 97       	sbiw	r26, 0x1f	; 31
 808:	30 97       	sbiw	r30, 0x00	; 0
 80a:	31 f0       	breq	.+12     	; 0x818 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 80c:	0a 2d       	mov	r16, r10
 80e:	2b 2d       	mov	r18, r11
 810:	41 2f       	mov	r20, r17
 812:	b6 01       	movw	r22, r12
 814:	c7 01       	movw	r24, r14
 816:	09 95       	icall
}
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	ff 90       	pop	r15
 828:	ef 90       	pop	r14
 82a:	df 90       	pop	r13
 82c:	cf 90       	pop	r12
 82e:	bf 90       	pop	r11
 830:	af 90       	pop	r10
 832:	08 95       	ret

00000834 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 834:	ff 92       	push	r15
 836:	0f 93       	push	r16
 838:	1f 93       	push	r17
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	ec 01       	movw	r28, r24
 840:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 842:	86 2f       	mov	r24, r22
 844:	0e 94 6e 02 	call	0x4dc	; 0x4dc <midi_is_realtime>
 848:	88 23       	and	r24, r24
 84a:	69 f0       	breq	.+26     	; 0x866 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 84c:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 852:	00 e0       	ldi	r16, 0x00	; 0
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	41 2f       	mov	r20, r17
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	ce 01       	movw	r24, r28
 85e:	0e 94 06 03 	call	0x60c	; 0x60c <midi_input_callbacks>
    device->input_state = state;
 862:	fd a2       	std	Y+37, r15	; 0x25
 864:	a4 c0       	rjmp	.+328    	; 0x9ae <__stack+0xaf>
  } else if (midi_is_statusbyte(input)) {
 866:	81 2f       	mov	r24, r17
 868:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <midi_is_statusbyte>
 86c:	88 23       	and	r24, r24
 86e:	09 f4       	brne	.+2      	; 0x872 <midi_process_byte+0x3e>
 870:	5d c0       	rjmp	.+186    	; 0x92c <__stack+0x2d>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 872:	8d a1       	ldd	r24, Y+37	; 0x25
 874:	84 30       	cpi	r24, 0x04	; 4
 876:	29 f0       	breq	.+10     	; 0x882 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
 878:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	9f a3       	std	Y+39, r25	; 0x27
 880:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 882:	81 2f       	mov	r24, r17
 884:	0e 94 74 02 	call	0x4e8	; 0x4e8 <midi_packet_length>
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	31 f0       	breq	.+12     	; 0x898 <midi_process_byte+0x64>
 88c:	b8 f0       	brcs	.+46     	; 0x8bc <midi_process_byte+0x88>
 88e:	82 30       	cpi	r24, 0x02	; 2
 890:	79 f0       	breq	.+30     	; 0x8b0 <midi_process_byte+0x7c>
 892:	83 30       	cpi	r24, 0x03	; 3
 894:	81 f0       	breq	.+32     	; 0x8b6 <midi_process_byte+0x82>
 896:	46 c0       	rjmp	.+140    	; 0x924 <__stack+0x25>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 89c:	00 e0       	ldi	r16, 0x00	; 0
 89e:	20 e0       	ldi	r18, 0x00	; 0
 8a0:	41 2f       	mov	r20, r17
 8a2:	61 e0       	ldi	r22, 0x01	; 1
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	ce 01       	movw	r24, r28
 8a8:	0e 94 06 03 	call	0x60c	; 0x60c <midi_input_callbacks>
        device->input_state = IDLE;
 8ac:	1d a2       	std	Y+37, r1	; 0x25
        break;
 8ae:	7f c0       	rjmp	.+254    	; 0x9ae <__stack+0xaf>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 8b0:	82 e0       	ldi	r24, 0x02	; 2
 8b2:	8d a3       	std	Y+37, r24	; 0x25
        break;
 8b4:	7c c0       	rjmp	.+248    	; 0x9ae <__stack+0xaf>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	8d a3       	std	Y+37, r24	; 0x25
        break;
 8ba:	79 c0       	rjmp	.+242    	; 0x9ae <__stack+0xaf>
      case UNDEFINED:
        switch(input) {
 8bc:	10 3f       	cpi	r17, 0xF0	; 240
 8be:	19 f0       	breq	.+6      	; 0x8c6 <midi_process_byte+0x92>
 8c0:	17 3f       	cpi	r17, 0xF7	; 247
 8c2:	51 f0       	breq	.+20     	; 0x8d8 <midi_process_byte+0xa4>
 8c4:	2b c0       	rjmp	.+86     	; 0x91c <__stack+0x1d>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 8c6:	84 e0       	ldi	r24, 0x04	; 4
 8c8:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 8ca:	80 ef       	ldi	r24, 0xF0	; 240
 8cc:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	9f a3       	std	Y+39, r25	; 0x27
 8d4:	8e a3       	std	Y+38, r24	; 0x26
            break;
 8d6:	6b c0       	rjmp	.+214    	; 0x9ae <__stack+0xaf>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 8d8:	4e a1       	ldd	r20, Y+38	; 0x26
 8da:	5f a1       	ldd	r21, Y+39	; 0x27
 8dc:	9a 01       	movw	r18, r20
 8de:	ab ea       	ldi	r26, 0xAB	; 171
 8e0:	ba ea       	ldi	r27, 0xAA	; 170
 8e2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__umulhisi3>
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	9c 01       	movw	r18, r24
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	82 0f       	add	r24, r18
 8f2:	93 1f       	adc	r25, r19
 8f4:	fa 01       	movw	r30, r20
 8f6:	e8 1b       	sub	r30, r24
 8f8:	f9 0b       	sbc	r31, r25
 8fa:	ec 0f       	add	r30, r28
 8fc:	fd 1f       	adc	r31, r29
 8fe:	87 ef       	ldi	r24, 0xF7	; 247
 900:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 902:	ba 01       	movw	r22, r20
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	7f a3       	std	Y+39, r23	; 0x27
 90a:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 90c:	0c a1       	ldd	r16, Y+36	; 0x24
 90e:	2b a1       	ldd	r18, Y+35	; 0x23
 910:	4a a1       	ldd	r20, Y+34	; 0x22
 912:	ce 01       	movw	r24, r28
 914:	0e 94 06 03 	call	0x60c	; 0x60c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 918:	1d a2       	std	Y+37, r1	; 0x25
            break;
 91a:	49 c0       	rjmp	.+146    	; 0x9ae <__stack+0xaf>
          default:
            device->input_state = IDLE;
 91c:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 91e:	1f a2       	std	Y+39, r1	; 0x27
 920:	1e a2       	std	Y+38, r1	; 0x26
 922:	45 c0       	rjmp	.+138    	; 0x9ae <__stack+0xaf>
        }

        break;
      default:
        device->input_state = IDLE;
 924:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 926:	1f a2       	std	Y+39, r1	; 0x27
 928:	1e a2       	std	Y+38, r1	; 0x26
        break;
 92a:	41 c0       	rjmp	.+130    	; 0x9ae <__stack+0xaf>
    }
  } else {
    if (device->input_state != IDLE) {
 92c:	ed a1       	ldd	r30, Y+37	; 0x25
 92e:	ee 23       	and	r30, r30
 930:	f1 f1       	breq	.+124    	; 0x9ae <__stack+0xaf>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 932:	4e a1       	ldd	r20, Y+38	; 0x26
 934:	5f a1       	ldd	r21, Y+39	; 0x27
 936:	9a 01       	movw	r18, r20
 938:	ab ea       	ldi	r26, 0xAB	; 171
 93a:	ba ea       	ldi	r27, 0xAA	; 170
 93c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__umulhisi3>
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	9c 01       	movw	r18, r24
 946:	22 0f       	add	r18, r18
 948:	33 1f       	adc	r19, r19
 94a:	82 0f       	add	r24, r18
 94c:	93 1f       	adc	r25, r19
 94e:	9a 01       	movw	r18, r20
 950:	28 1b       	sub	r18, r24
 952:	39 0b       	sbc	r19, r25
 954:	de 01       	movw	r26, r28
 956:	a2 0f       	add	r26, r18
 958:	b3 1f       	adc	r27, r19
 95a:	92 96       	adiw	r26, 0x22	; 34
 95c:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 95e:	ba 01       	movw	r22, r20
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	7f a3       	std	Y+39, r23	; 0x27
 966:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 968:	21 30       	cpi	r18, 0x01	; 1
 96a:	31 05       	cpc	r19, r1
 96c:	89 f0       	breq	.+34     	; 0x990 <__stack+0x91>
 96e:	22 30       	cpi	r18, 0x02	; 2
 970:	31 05       	cpc	r19, r1
 972:	e9 f4       	brne	.+58     	; 0x9ae <__stack+0xaf>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 974:	0c a1       	ldd	r16, Y+36	; 0x24
 976:	2b a1       	ldd	r18, Y+35	; 0x23
 978:	4a a1       	ldd	r20, Y+34	; 0x22
 97a:	ce 01       	movw	r24, r28
 97c:	0e 94 06 03 	call	0x60c	; 0x60c <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 980:	8d a1       	ldd	r24, Y+37	; 0x25
 982:	84 30       	cpi	r24, 0x04	; 4
 984:	a1 f0       	breq	.+40     	; 0x9ae <__stack+0xaf>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	9f a3       	std	Y+39, r25	; 0x27
 98c:	8e a3       	std	Y+38, r24	; 0x26
 98e:	0f c0       	rjmp	.+30     	; 0x9ae <__stack+0xaf>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 990:	e2 30       	cpi	r30, 0x02	; 2
 992:	69 f4       	brne	.+26     	; 0x9ae <__stack+0xaf>
            //call callback
            midi_input_callbacks(device, device->input_count,
 994:	00 e0       	ldi	r16, 0x00	; 0
 996:	2b a1       	ldd	r18, Y+35	; 0x23
 998:	4a a1       	ldd	r20, Y+34	; 0x22
 99a:	ce 01       	movw	r24, r28
 99c:	0e 94 06 03 	call	0x60c	; 0x60c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 9a0:	8d a1       	ldd	r24, Y+37	; 0x25
 9a2:	84 30       	cpi	r24, 0x04	; 4
 9a4:	21 f0       	breq	.+8      	; 0x9ae <__stack+0xaf>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	9f a3       	std	Y+39, r25	; 0x27
 9ac:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	ff 90       	pop	r15
 9b8:	08 95       	ret

000009ba <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 9ba:	cf 92       	push	r12
 9bc:	df 92       	push	r13
 9be:	ef 92       	push	r14
 9c0:	ff 92       	push	r15
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 9cc:	dc 01       	movw	r26, r24
 9ce:	90 96       	adiw	r26, 0x20	; 32
 9d0:	ed 91       	ld	r30, X+
 9d2:	fc 91       	ld	r31, X
 9d4:	91 97       	sbiw	r26, 0x21	; 33
 9d6:	30 97       	sbiw	r30, 0x00	; 0
 9d8:	09 f0       	breq	.+2      	; 0x9dc <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 9da:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 9dc:	86 01       	movw	r16, r12
 9de:	08 51       	subi	r16, 0x18	; 24
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	c8 01       	movw	r24, r16
 9e4:	0e 94 22 02 	call	0x444	; 0x444 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 9e8:	e8 2e       	mov	r14, r24
 9ea:	f1 2c       	mov	r15, r1
 9ec:	e1 14       	cp	r14, r1
 9ee:	f1 04       	cpc	r15, r1
 9f0:	91 f0       	breq	.+36     	; 0xa16 <midi_device_process+0x5c>
 9f2:	c0 e0       	ldi	r28, 0x00	; 0
 9f4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	c8 01       	movw	r24, r16
 9fa:	0e 94 38 02 	call	0x470	; 0x470 <bytequeue_get>
 9fe:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 a00:	c6 01       	movw	r24, r12
 a02:	0e 94 1a 04 	call	0x834	; 0x834 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 a06:	61 e0       	ldi	r22, 0x01	; 1
 a08:	c8 01       	movw	r24, r16
 a0a:	0e 94 4a 02 	call	0x494	; 0x494 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 a0e:	21 96       	adiw	r28, 0x01	; 1
 a10:	ce 15       	cp	r28, r14
 a12:	df 05       	cpc	r29, r15
 a14:	81 f7       	brne	.-32     	; 0x9f6 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	ff 90       	pop	r15
 a20:	ef 90       	pop	r14
 a22:	df 90       	pop	r13
 a24:	cf 90       	pop	r12
 a26:	08 95       	ret

00000a28 <__divmodhi4>:
 a28:	97 fb       	bst	r25, 7
 a2a:	07 2e       	mov	r0, r23
 a2c:	16 f4       	brtc	.+4      	; 0xa32 <__divmodhi4+0xa>
 a2e:	00 94       	com	r0
 a30:	07 d0       	rcall	.+14     	; 0xa40 <__divmodhi4_neg1>
 a32:	77 fd       	sbrc	r23, 7
 a34:	09 d0       	rcall	.+18     	; 0xa48 <__divmodhi4_neg2>
 a36:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__udivmodhi4>
 a3a:	07 fc       	sbrc	r0, 7
 a3c:	05 d0       	rcall	.+10     	; 0xa48 <__divmodhi4_neg2>
 a3e:	3e f4       	brtc	.+14     	; 0xa4e <__divmodhi4_exit>

00000a40 <__divmodhi4_neg1>:
 a40:	90 95       	com	r25
 a42:	81 95       	neg	r24
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	08 95       	ret

00000a48 <__divmodhi4_neg2>:
 a48:	70 95       	com	r23
 a4a:	61 95       	neg	r22
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a4e <__divmodhi4_exit>:
 a4e:	08 95       	ret

00000a50 <__tablejump2__>:
 a50:	ee 0f       	add	r30, r30
 a52:	ff 1f       	adc	r31, r31
 a54:	05 90       	lpm	r0, Z+
 a56:	f4 91       	lpm	r31, Z
 a58:	e0 2d       	mov	r30, r0
 a5a:	09 94       	ijmp

00000a5c <__umulhisi3>:
 a5c:	a2 9f       	mul	r26, r18
 a5e:	b0 01       	movw	r22, r0
 a60:	b3 9f       	mul	r27, r19
 a62:	c0 01       	movw	r24, r0
 a64:	a3 9f       	mul	r26, r19
 a66:	70 0d       	add	r23, r0
 a68:	81 1d       	adc	r24, r1
 a6a:	11 24       	eor	r1, r1
 a6c:	91 1d       	adc	r25, r1
 a6e:	b2 9f       	mul	r27, r18
 a70:	70 0d       	add	r23, r0
 a72:	81 1d       	adc	r24, r1
 a74:	11 24       	eor	r1, r1
 a76:	91 1d       	adc	r25, r1
 a78:	08 95       	ret

00000a7a <__udivmodhi4>:
 a7a:	aa 1b       	sub	r26, r26
 a7c:	bb 1b       	sub	r27, r27
 a7e:	51 e1       	ldi	r21, 0x11	; 17
 a80:	07 c0       	rjmp	.+14     	; 0xa90 <__udivmodhi4_ep>

00000a82 <__udivmodhi4_loop>:
 a82:	aa 1f       	adc	r26, r26
 a84:	bb 1f       	adc	r27, r27
 a86:	a6 17       	cp	r26, r22
 a88:	b7 07       	cpc	r27, r23
 a8a:	10 f0       	brcs	.+4      	; 0xa90 <__udivmodhi4_ep>
 a8c:	a6 1b       	sub	r26, r22
 a8e:	b7 0b       	sbc	r27, r23

00000a90 <__udivmodhi4_ep>:
 a90:	88 1f       	adc	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	5a 95       	dec	r21
 a96:	a9 f7       	brne	.-22     	; 0xa82 <__udivmodhi4_loop>
 a98:	80 95       	com	r24
 a9a:	90 95       	com	r25
 a9c:	bc 01       	movw	r22, r24
 a9e:	cd 01       	movw	r24, r26
 aa0:	08 95       	ret

00000aa2 <_exit>:
 aa2:	f8 94       	cli

00000aa4 <__stop_program>:
 aa4:	ff cf       	rjmp	.-2      	; 0xaa4 <__stop_program>
