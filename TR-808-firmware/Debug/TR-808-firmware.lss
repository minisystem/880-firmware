
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00000f04  00000f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000117  0080024c  0080024c  000010e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003546  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec6  00000000  00000000  00004a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103b  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e8  00000000  00000000  0000692c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da9  00000000  00000000  00007214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc7  00000000  00000000  00007fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_11>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_14>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	cc 04       	cpc	r12, r12
  b6:	ca 04       	cpc	r12, r10
  b8:	cc 04       	cpc	r12, r12
  ba:	ce 04       	cpc	r12, r14
  bc:	ce 04       	cpc	r12, r14
  be:	d4 04       	cpc	r13, r4
  c0:	ce 04       	cpc	r12, r14
  c2:	d4 04       	cpc	r13, r4
  c4:	d4 04       	cpc	r13, r4
  c6:	d4 04       	cpc	r13, r4
  c8:	d4 04       	cpc	r13, r4
  ca:	d4 04       	cpc	r13, r4
  cc:	ce 04       	cpc	r12, r14
  ce:	d4 04       	cpc	r13, r4
  d0:	d4 04       	cpc	r13, r4

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	e4 e0       	ldi	r30, 0x04	; 4
  e6:	ff e0       	ldi	r31, 0x0F	; 15
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	ac 34       	cpi	r26, 0x4C	; 76
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	ac e4       	ldi	r26, 0x4C	; 76
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 36       	cpi	r26, 0x63	; 99
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 2e 03 	call	0x65c	; 0x65c <main>
 108:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
 110:	ea e7       	ldi	r30, 0x7A	; 122
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
 11a:	ec e7       	ldi	r30, 0x7C	; 124
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
 124:	80 81       	ld	r24, Z
 126:	86 60       	ori	r24, 0x06	; 6
 128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
 12a:	ee e7       	ldi	r30, 0x7E	; 126
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
 136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
 13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
 14c:	80 81       	ld	r24, Z
 14e:	86 fd       	sbrc	r24, 6
 150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
 152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8f 77       	andi	r24, 0x7F	; 127
 15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
 15e:	81 e5       	ldi	r24, 0x51	; 81
 160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
 164:	80 91 78 00 	lds	r24, 0x0078
 168:	90 91 79 00 	lds	r25, 0x0079
 16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 6f 00 	sts	0x006F, r24
 17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
 17c:	90 93 89 00 	sts	0x0089, r25
 180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
 184:	20 91 84 00 	lds	r18, 0x0084
 188:	30 91 85 00 	lds	r19, 0x0085
 18c:	82 17       	cp	r24, r18
 18e:	93 07       	cpc	r25, r19
 190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	90 93 85 00 	sts	0x0085, r25
 198:	80 93 84 00 	sts	0x0084, r24
 19c:	08 95       	ret

0000019e <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, HC_LED},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, CL_LED},
	{15,7, 1<<MA_TRIG,255, 0, MA_LED}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	16 2f       	mov	r17, r22
	
		while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
 1a6:	90 91 60 01 	lds	r25, 0x0160
 1aa:	99 23       	and	r25, r25
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <trigger_drum+0x8>
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
 1ae:	80 93 4c 02 	sts	0x024C, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 1b2:	c8 2f       	mov	r28, r24
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	fe 01       	movw	r30, r28
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ec 0f       	add	r30, r28
 1be:	fd 1f       	adc	r31, r29
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e0 50       	subi	r30, 0x00	; 0
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	a0 81       	ld	r26, Z
 1ca:	9a 2f       	mov	r25, r26
 1cc:	99 1f       	adc	r25, r25
 1ce:	99 27       	eor	r25, r25
 1d0:	99 1f       	adc	r25, r25
 1d2:	a1 81       	ldd	r26, Z+1	; 0x01
 1d4:	a7 70       	andi	r26, 0x07	; 7
 1d6:	aa 0f       	add	r26, r26
 1d8:	a9 2b       	or	r26, r25
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	a5 5a       	subi	r26, 0xA5	; 165
 1de:	bd 4f       	sbci	r27, 0xFD	; 253
 1e0:	9c 91       	ld	r25, X
 1e2:	82 81       	ldd	r24, Z+2	; 0x02
 1e4:	89 2b       	or	r24, r25
 1e6:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
 1e8:	83 81       	ldd	r24, Z+3	; 0x03
 1ea:	8f 3f       	cpi	r24, 0xFF	; 255
 1ec:	09 f1       	breq	.+66     	; 0x230 <trigger_drum+0x92>
				
			toggle(ACCENT_1_LED);	
 1ee:	84 e1       	ldi	r24, 0x14	; 20
 1f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 1f4:	ab e5       	ldi	r26, 0x5B	; 91
 1f6:	b2 e0       	ldi	r27, 0x02	; 2
 1f8:	13 96       	adiw	r26, 0x03	; 3
 1fa:	2c 91       	ld	r18, X
 1fc:	13 97       	sbiw	r26, 0x03	; 3
 1fe:	ae 01       	movw	r20, r28
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	fa 01       	movw	r30, r20
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ec 5f       	subi	r30, 0xFC	; 252
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	90 81       	ld	r25, Z
 214:	91 70       	andi	r25, 0x01	; 1
 216:	91 95       	neg	r25
 218:	92 27       	eor	r25, r18
 21a:	c4 0f       	add	r28, r20
 21c:	d5 1f       	adc	r29, r21
 21e:	cc 0f       	add	r28, r28
 220:	dd 1f       	adc	r29, r29
 222:	c0 50       	subi	r28, 0x00	; 0
 224:	df 4f       	sbci	r29, 0xFF	; 255
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	98 23       	and	r25, r24
 22a:	29 27       	eor	r18, r25
 22c:	13 96       	adiw	r26, 0x03	; 3
 22e:	2c 93       	st	X, r18
				
		}
			
		if (velocity > 64) {
 230:	11 34       	cpi	r17, 0x41	; 65
 232:	28 f0       	brcs	.+10     	; 0x23e <trigger_drum+0xa0>
			spi_data[8] |= (1<<ACCENT);
 234:	eb e5       	ldi	r30, 0x5B	; 91
 236:	f2 e0       	ldi	r31, 0x02	; 2
 238:	80 85       	ldd	r24, Z+8	; 0x08
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
 23e:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
 240:	0e 94 88 03 	call	0x710	; 0x710 <update_spi>
			
		PORTD &= ~(1<<TRIG);
 244:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
 246:	ee e6       	ldi	r30, 0x6E	; 110
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
 250:	85 b5       	in	r24, 0x25	; 37
 252:	83 60       	ori	r24, 0x03	; 3
 254:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
 256:	10 92 60 01 	sts	0x0160, r1
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	08 95       	ret

00000262 <__vector_14>:
#include <avr/interrupt.h>
#include "drums.h"
#include "spi.h"
#include "clock.h"

ISR (TIMER0_COMPA_vect) {
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
 288:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
 28a:	ee e6       	ldi	r30, 0x6E	; 110
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8d 7f       	andi	r24, 0xFD	; 253
 292:	80 83       	st	Z, r24
	
	spi_data[drum_hit[current_drum_hit].spi_byte_num] &= ~(drum_hit[current_drum_hit].trig_bit);
 294:	80 91 4c 02 	lds	r24, 0x024C
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	dc 01       	movw	r26, r24
 29c:	aa 0f       	add	r26, r26
 29e:	bb 1f       	adc	r27, r27
 2a0:	ed 01       	movw	r28, r26
 2a2:	c8 0f       	add	r28, r24
 2a4:	d9 1f       	adc	r29, r25
 2a6:	cc 0f       	add	r28, r28
 2a8:	dd 1f       	adc	r29, r29
 2aa:	c0 50       	subi	r28, 0x00	; 0
 2ac:	df 4f       	sbci	r29, 0xFF	; 255
 2ae:	e8 81       	ld	r30, Y
 2b0:	2e 2f       	mov	r18, r30
 2b2:	22 1f       	adc	r18, r18
 2b4:	22 27       	eor	r18, r18
 2b6:	22 1f       	adc	r18, r18
 2b8:	e9 81       	ldd	r30, Y+1	; 0x01
 2ba:	e7 70       	andi	r30, 0x07	; 7
 2bc:	ee 0f       	add	r30, r30
 2be:	e2 2b       	or	r30, r18
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	e5 5a       	subi	r30, 0xA5	; 165
 2c4:	fd 4f       	sbci	r31, 0xFD	; 253
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	80 95       	com	r24
 2ca:	90 81       	ld	r25, Z
 2cc:	89 23       	and	r24, r25
 2ce:	80 83       	st	Z, r24
	//toggle(drum_hit[current_drum_hit].led_index);
	//toggle(ACCENT_1_LED);
	update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
 2d0:	0e 94 88 03 	call	0x710	; 0x710 <update_spi>
	trigger_finished = 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 60 01 	sts	0x0160, r24
	
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% gate width
 322:	e4 e6       	ldi	r30, 0x64	; 100
 324:	f2 e0       	ldi	r31, 0x02	; 2
 326:	80 81       	ld	r24, Z
 328:	86 95       	lsr	r24
 32a:	91 81       	ldd	r25, Z+1	; 0x01
 32c:	98 13       	cpse	r25, r24
 32e:	03 c0       	rjmp	.+6      	; 0x336 <__vector_11+0x36>
		
		turn_off(STEP_1_LED);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 d7 01 	call	0x3ae	; 0x3ae <turn_off>

	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider) {
 336:	e4 e6       	ldi	r30, 0x64	; 100
 338:	f2 e0       	ldi	r31, 0x02	; 2
 33a:	81 81       	ldd	r24, Z+1	; 0x01
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	81 83       	std	Z+1, r24	; 0x01
 340:	90 81       	ld	r25, Z
 342:	89 13       	cpse	r24, r25
 344:	05 c0       	rjmp	.+10     	; 0x350 <__vector_11+0x50>
		
		internal_clock.ppqn_counter = 0;
 346:	10 92 65 02 	sts	0x0265, r1
		
		turn_on(STEP_1_LED);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 b9 01 	call	0x372	; 0x372 <turn_on>
		

	}
	
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	bf 91       	pop	r27
 356:	af 91       	pop	r26
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	5f 91       	pop	r21
 362:	4f 91       	pop	r20
 364:	3f 91       	pop	r19
 366:	2f 91       	pop	r18
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	9c 01       	movw	r18, r24
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	dc 01       	movw	r26, r24
 384:	ae 59       	subi	r26, 0x9E	; 158
 386:	be 4f       	sbci	r27, 0xFE	; 254
 388:	2c 91       	ld	r18, X
 38a:	e2 2f       	mov	r30, r18
 38c:	ef 70       	andi	r30, 0x0F	; 15
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e5 5a       	subi	r30, 0xA5	; 165
 392:	fd 4f       	sbci	r31, 0xFD	; 253
 394:	ec 01       	movw	r28, r24
 396:	cf 59       	subi	r28, 0x9F	; 159
 398:	de 4f       	sbci	r29, 0xFE	; 254
 39a:	30 81       	ld	r19, Z
 39c:	88 81       	ld	r24, Y
 39e:	83 2b       	or	r24, r19
 3a0:	80 83       	st	Z, r24
	led[led_index].state = 1;
 3a2:	82 2f       	mov	r24, r18
 3a4:	80 61       	ori	r24, 0x10	; 16
 3a6:	8c 93       	st	X, r24

}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <turn_off>:

void turn_off(uint8_t led_index) {
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9c 01       	movw	r18, r24
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	82 0f       	add	r24, r18
 3bc:	93 1f       	adc	r25, r19
 3be:	dc 01       	movw	r26, r24
 3c0:	ae 59       	subi	r26, 0x9E	; 158
 3c2:	be 4f       	sbci	r27, 0xFE	; 254
 3c4:	2c 91       	ld	r18, X
 3c6:	e2 2f       	mov	r30, r18
 3c8:	ef 70       	andi	r30, 0x0F	; 15
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e5 5a       	subi	r30, 0xA5	; 165
 3ce:	fd 4f       	sbci	r31, 0xFD	; 253
 3d0:	ec 01       	movw	r28, r24
 3d2:	cf 59       	subi	r28, 0x9F	; 159
 3d4:	de 4f       	sbci	r29, 0xFE	; 254
 3d6:	88 81       	ld	r24, Y
 3d8:	80 95       	com	r24
 3da:	90 81       	ld	r25, Z
 3dc:	89 23       	and	r24, r25
 3de:	80 83       	st	Z, r24
	led[led_index].state = 0;
 3e0:	82 2f       	mov	r24, r18
 3e2:	8f 7e       	andi	r24, 0xEF	; 239
 3e4:	8c 93       	st	X, r24
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	2e 0f       	add	r18, r30
 3f8:	3f 1f       	adc	r19, r31
 3fa:	f9 01       	movw	r30, r18
 3fc:	ee 59       	subi	r30, 0x9E	; 158
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	90 81       	ld	r25, Z
 402:	94 ff       	sbrs	r25, 4
 404:	03 c0       	rjmp	.+6      	; 0x40c <toggle+0x20>
		
		turn_off(led_index);
 406:	0e 94 d7 01 	call	0x3ae	; 0x3ae <turn_off>
 40a:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
 40c:	0e 94 b9 01 	call	0x372	; 0x372 <turn_on>
 410:	08 95       	ret

00000412 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
 412:	08 95       	ret

00000414 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 414:	08 95       	ret

00000416 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn functiont to dynamically map notes to drum hits
 416:	40 31       	cpi	r20, 0x10	; 16
 418:	20 f4       	brcc	.+8      	; 0x422 <note_on_event+0xc>
 41a:	62 2f       	mov	r22, r18
 41c:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
 41e:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
 422:	08 95       	ret

00000424 <update_tempo>:
uint8_t step_number = 0;	

void update_tempo() {
	
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
 424:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
 428:	90 93 50 02 	sts	0x0250, r25
 42c:	80 93 4f 02 	sts	0x024F, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
 430:	20 91 4d 02 	lds	r18, 0x024D
 434:	30 91 4e 02 	lds	r19, 0x024E
 438:	82 1b       	sub	r24, r18
 43a:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
 440:	95 95       	asr	r25
 442:	87 95       	ror	r24
 444:	82 0f       	add	r24, r18
 446:	93 1f       	adc	r25, r19
 448:	90 93 4e 02 	sts	0x024E, r25
 44c:	80 93 4d 02 	sts	0x024D, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + 244; //244 is offset to get desirable tempo range
 450:	23 ef       	ldi	r18, 0xF3	; 243
 452:	34 e0       	ldi	r19, 0x04	; 4
 454:	a9 01       	movw	r20, r18
 456:	48 1b       	sub	r20, r24
 458:	59 0b       	sbc	r21, r25
 45a:	ca 01       	movw	r24, r20
 45c:	e4 e6       	ldi	r30, 0x64	; 100
 45e:	f2 e0       	ldi	r31, 0x02	; 2
 460:	53 83       	std	Z+3, r21	; 0x03
 462:	42 83       	std	Z+2, r20	; 0x02

	if (internal_clock.rate != internal_clock.previous_rate) {
 464:	24 81       	ldd	r18, Z+4	; 0x04
 466:	35 81       	ldd	r19, Z+5	; 0x05
 468:	42 17       	cp	r20, r18
 46a:	53 07       	cpc	r21, r19
 46c:	11 f0       	breq	.+4      	; 0x472 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
 46e:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;	
 472:	e4 e6       	ldi	r30, 0x64	; 100
 474:	f2 e0       	ldi	r31, 0x02	; 2
 476:	82 81       	ldd	r24, Z+2	; 0x02
 478:	93 81       	ldd	r25, Z+3	; 0x03
 47a:	95 83       	std	Z+5, r25	; 0x05
 47c:	84 83       	std	Z+4, r24	; 0x04
 47e:	08 95       	ret

00000480 <update_step_board>:
	
}

void update_step_board() {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 484:	c0 e0       	ldi	r28, 0x00	; 0
 486:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (button[i].state) {
 488:	fe 01       	movw	r30, r28
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	ea 5f       	subi	r30, 0xFA	; 250
 490:	fd 4f       	sbci	r31, 0xFD	; 253
 492:	80 81       	ld	r24, Z
 494:	86 ff       	sbrs	r24, 6
 496:	0b c0       	rjmp	.+22     	; 0x4ae <update_step_board+0x2e>
			
			toggle(i);
 498:	8c 2f       	mov	r24, r28
 49a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <toggle>
			button[i].state ^= button[i].state;
 49e:	fe 01       	movw	r30, r28
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ea 5f       	subi	r30, 0xFA	; 250
 4a6:	fd 4f       	sbci	r31, 0xFD	; 253
 4a8:	80 81       	ld	r24, Z
 4aa:	8f 7b       	andi	r24, 0xBF	; 191
 4ac:	80 83       	st	Z, r24
	
}

void update_step_board() {
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 4ae:	21 96       	adiw	r28, 0x01	; 1
 4b0:	c0 31       	cpi	r28, 0x10	; 16
 4b2:	d1 05       	cpc	r29, r1
 4b4:	49 f7       	brne	.-46     	; 0x488 <update_step_board+0x8>
		}
		
	}

	
	update_spi();
 4b6:	0e 94 88 03 	call	0x710	; 0x710 <update_spi>
	
	
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
 4c0:	80 91 28 02 	lds	r24, 0x0228
 4c4:	86 ff       	sbrs	r24, 6
 4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
 4c8:	e8 e2       	ldi	r30, 0x28	; 40
 4ca:	f2 e0       	ldi	r31, 0x02	; 2
 4cc:	8f 7b       	andi	r24, 0xBF	; 191
 4ce:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
 4d8:	80 91 2a 02 	lds	r24, 0x022A
 4dc:	86 ff       	sbrs	r24, 6
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
 4e0:	ea e2       	ldi	r30, 0x2A	; 42
 4e2:	f2 e0       	ldi	r31, 0x02	; 2
 4e4:	8f 7b       	andi	r24, 0xBF	; 191
 4e6:	80 83       	st	Z, r24
		trigger_drum(SD,0);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
 4f0:	80 91 2c 02 	lds	r24, 0x022C
 4f4:	86 ff       	sbrs	r24, 6
 4f6:	08 c0       	rjmp	.+16     	; 0x508 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
 4f8:	ec e2       	ldi	r30, 0x2C	; 44
 4fa:	f2 e0       	ldi	r31, 0x02	; 2
 4fc:	8f 7b       	andi	r24, 0xBF	; 191
 4fe:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
 508:	80 91 2e 02 	lds	r24, 0x022E
 50c:	86 ff       	sbrs	r24, 6
 50e:	08 c0       	rjmp	.+16     	; 0x520 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
 510:	ee e2       	ldi	r30, 0x2E	; 46
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	8f 7b       	andi	r24, 0xBF	; 191
 516:	80 83       	st	Z, r24
		trigger_drum(MT,0);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
 520:	80 91 30 02 	lds	r24, 0x0230
 524:	86 ff       	sbrs	r24, 6
 526:	08 c0       	rjmp	.+16     	; 0x538 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
 528:	e0 e3       	ldi	r30, 0x30	; 48
 52a:	f2 e0       	ldi	r31, 0x02	; 2
 52c:	8f 7b       	andi	r24, 0xBF	; 191
 52e:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
 538:	80 91 32 02 	lds	r24, 0x0232
 53c:	86 ff       	sbrs	r24, 6
 53e:	08 c0       	rjmp	.+16     	; 0x550 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
 540:	e2 e3       	ldi	r30, 0x32	; 50
 542:	f2 e0       	ldi	r31, 0x02	; 2
 544:	8f 7b       	andi	r24, 0xBF	; 191
 546:	80 83       	st	Z, r24
		trigger_drum(RS,0);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
 550:	80 91 34 02 	lds	r24, 0x0234
 554:	86 ff       	sbrs	r24, 6
 556:	08 c0       	rjmp	.+16     	; 0x568 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
 558:	e4 e3       	ldi	r30, 0x34	; 52
 55a:	f2 e0       	ldi	r31, 0x02	; 2
 55c:	8f 7b       	andi	r24, 0xBF	; 191
 55e:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
 568:	80 91 36 02 	lds	r24, 0x0236
 56c:	86 ff       	sbrs	r24, 6
 56e:	08 c0       	rjmp	.+16     	; 0x580 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
 570:	e6 e3       	ldi	r30, 0x36	; 54
 572:	f2 e0       	ldi	r31, 0x02	; 2
 574:	8f 7b       	andi	r24, 0xBF	; 191
 576:	80 83       	st	Z, r24
		trigger_drum(CB,0);
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	87 e0       	ldi	r24, 0x07	; 7
 57c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
 580:	80 91 38 02 	lds	r24, 0x0238
 584:	86 ff       	sbrs	r24, 6
 586:	08 c0       	rjmp	.+16     	; 0x598 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
 588:	e8 e3       	ldi	r30, 0x38	; 56
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	8f 7b       	andi	r24, 0xBF	; 191
 58e:	80 83       	st	Z, r24
		trigger_drum(CY,0);
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	88 e0       	ldi	r24, 0x08	; 8
 594:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
 598:	80 91 3a 02 	lds	r24, 0x023A
 59c:	86 ff       	sbrs	r24, 6
 59e:	08 c0       	rjmp	.+16     	; 0x5b0 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
 5a0:	ea e3       	ldi	r30, 0x3A	; 58
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	8f 7b       	andi	r24, 0xBF	; 191
 5a6:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	89 e0       	ldi	r24, 0x09	; 9
 5ac:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
 5b0:	80 91 3c 02 	lds	r24, 0x023C
 5b4:	86 ff       	sbrs	r24, 6
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
 5b8:	ec e3       	ldi	r30, 0x3C	; 60
 5ba:	f2 e0       	ldi	r31, 0x02	; 2
 5bc:	8f 7b       	andi	r24, 0xBF	; 191
 5be:	80 83       	st	Z, r24
		trigger_drum(CH,0);
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	8a e0       	ldi	r24, 0x0A	; 10
 5c4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
 5c8:	08 95       	ret

000005ca <refresh>:



void refresh(void) {
	
	read_switches();
 5ca:	0e 94 ac 03 	call	0x758	; 0x758 <read_switches>
	parse_switch_data();
 5ce:	0e 94 ed 03 	call	0x7da	; 0x7da <parse_switch_data>
	live_hits();
 5d2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <live_hits>
	update_step_board();
 5d6:	0e 94 40 02 	call	0x480	; 0x480 <update_step_board>
	update_tempo();
 5da:	0e 94 12 02 	call	0x424	; 0x424 <update_tempo>
 5de:	08 95       	ret

000005e0 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 5e0:	8f e1       	ldi	r24, 0x1F	; 31
 5e2:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 5e6:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 5ea:	88 e9       	ldi	r24, 0x98	; 152
 5ec:	80 93 c1 00 	sts	0x00C1, r24
 5f0:	08 95       	ret

000005f2 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	2f 93       	push	r18
 5fe:	3f 93       	push	r19
 600:	4f 93       	push	r20
 602:	5f 93       	push	r21
 604:	6f 93       	push	r22
 606:	7f 93       	push	r23
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	af 93       	push	r26
 60e:	bf 93       	push	r27
 610:	ef 93       	push	r30
 612:	ff 93       	push	r31
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	1f 92       	push	r1
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 61e:	80 91 c6 00 	lds	r24, 0x00C6
 622:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 624:	ae 01       	movw	r20, r28
 626:	4f 5f       	subi	r20, 0xFF	; 255
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	86 e7       	ldi	r24, 0x76	; 118
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	0e 94 13 05 	call	0xa26	; 0xa26 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 634:	0f 90       	pop	r0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	bf 91       	pop	r27
 640:	af 91       	pop	r26
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	7f 91       	pop	r23
 648:	6f 91       	pop	r22
 64a:	5f 91       	pop	r21
 64c:	4f 91       	pop	r20
 64e:	3f 91       	pop	r19
 650:	2f 91       	pop	r18
 652:	0f 90       	pop	r0
 654:	0f be       	out	0x3f, r0	; 63
 656:	0f 90       	pop	r0
 658:	1f 90       	pop	r1
 65a:	18 95       	reti

0000065c <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 65c:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 65e:	8d b1       	in	r24, 0x0d	; 13
 660:	8c 60       	ori	r24, 0x0C	; 12
 662:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 664:	87 b1       	in	r24, 0x07	; 7
 666:	8e 60       	ori	r24, 0x0E	; 14
 668:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 66a:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 66c:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 66e:	88 b1       	in	r24, 0x08	; 8
 670:	81 7f       	andi	r24, 0xF1	; 241
 672:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 674:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 676:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
 678:	80 e5       	ldi	r24, 0x50	; 80
 67a:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
 67e:	ed ea       	ldi	r30, 0xAD	; 173
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	81 60       	ori	r24, 0x01	; 1
 686:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	0e 94 b9 01 	call	0x372	; 0x372 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
 68e:	8d e1       	ldi	r24, 0x1D	; 29
 690:	0e 94 b9 01 	call	0x372	; 0x372 <turn_on>
	turn_on(FILL_MANUAL);
 694:	82 e2       	ldi	r24, 0x22	; 34
 696:	0e 94 b9 01 	call	0x372	; 0x372 <turn_on>
	
	update_spi();
 69a:	0e 94 88 03 	call	0x710	; 0x710 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
 69e:	84 b5       	in	r24, 0x24	; 36
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
 6a4:	81 ee       	ldi	r24, 0xE1	; 225
 6a6:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 6a8:	86 e7       	ldi	r24, 0x76	; 118
 6aa:	92 e0       	ldi	r25, 0x02	; 2
 6ac:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 6b0:	6b e0       	ldi	r22, 0x0B	; 11
 6b2:	72 e0       	ldi	r23, 0x02	; 2
 6b4:	86 e7       	ldi	r24, 0x76	; 118
 6b6:	92 e0       	ldi	r25, 0x02	; 2
 6b8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 6bc:	69 e0       	ldi	r22, 0x09	; 9
 6be:	72 e0       	ldi	r23, 0x02	; 2
 6c0:	86 e7       	ldi	r24, 0x76	; 118
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 6c8:	6a e0       	ldi	r22, 0x0A	; 10
 6ca:	72 e0       	ldi	r23, 0x02	; 2
 6cc:	86 e7       	ldi	r24, 0x76	; 118
 6ce:	92 e0       	ldi	r25, 0x02	; 2
 6d0:	0e 94 de 04 	call	0x9bc	; 0x9bc <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 6d4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <setup_midi_usart>
	
	setup_internal_clock();
 6d8:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 24; //24 ppqn
 6dc:	e4 e6       	ldi	r30, 0x64	; 100
 6de:	f2 e0       	ldi	r31, 0x02	; 2
 6e0:	88 e1       	ldi	r24, 0x18	; 24
 6e2:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	81 83       	std	Z+1, r24	; 0x01
	//internal_clock.rate = 1267; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
 6e8:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sei(); //enable global interrupts	
 6ec:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
 6ee:	86 e7       	ldi	r24, 0x76	; 118
 6f0:	92 e0       	ldi	r25, 0x02	; 2
 6f2:	0e 94 0c 07 	call	0xe18	; 0xe18 <midi_device_process>
	refresh();		
 6f6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <refresh>

	
	}
 6fa:	f9 cf       	rjmp	.-14     	; 0x6ee <main+0x92>

000006fc <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 6fc:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 700:	ed ea       	ldi	r30, 0xAD	; 173
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	88 23       	and	r24, r24
 708:	ec f7       	brge	.-6      	; 0x704 <spi_shift_byte+0x8>
	return SPDR1;
 70a:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
 70e:	08 95       	ret

00000710 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
 714:	cb e5       	ldi	r28, 0x5B	; 91
 716:	d2 e0       	ldi	r29, 0x02	; 2
 718:	88 81       	ld	r24, Y
 71a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 730:	8c 81       	ldd	r24, Y+4	; 0x04
 732:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 736:	8d 81       	ldd	r24, Y+5	; 0x05
 738:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 73c:	8e 81       	ldd	r24, Y+6	; 0x06
 73e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 742:	8f 81       	ldd	r24, Y+7	; 0x07
 744:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 748:	88 85       	ldd	r24, Y+8	; 0x08
 74a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 74e:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 750:	43 9a       	sbi	0x08, 3	; 8
	
	
};
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <read_switches>:

void read_switches(void) { //reads switch data
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
 75c:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
 764:	c6 e5       	ldi	r28, 0x56	; 86
 766:	d2 e0       	ldi	r29, 0x02	; 2
 768:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
 770:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
 778:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
 780:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spi_shift_byte>
 788:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
 78a:	42 98       	cbi	0x08, 2	; 8
	
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
 78c:	e1 e5       	ldi	r30, 0x51	; 81
 78e:	f2 e0       	ldi	r31, 0x02	; 2
 790:	20 81       	ld	r18, Z
 792:	98 81       	ld	r25, Y
 794:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
 796:	29 27       	eor	r18, r25
 798:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
 79a:	92 23       	and	r25, r18
 79c:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
 79e:	21 81       	ldd	r18, Z+1	; 0x01
 7a0:	99 81       	ldd	r25, Y+1	; 0x01
 7a2:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
 7a4:	29 27       	eor	r18, r25
 7a6:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
 7a8:	92 23       	and	r25, r18
 7aa:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
 7ac:	22 81       	ldd	r18, Z+2	; 0x02
 7ae:	9a 81       	ldd	r25, Y+2	; 0x02
 7b0:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
 7b2:	29 27       	eor	r18, r25
 7b4:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
 7b6:	92 23       	and	r25, r18
 7b8:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
 7ba:	23 81       	ldd	r18, Z+3	; 0x03
 7bc:	9b 81       	ldd	r25, Y+3	; 0x03
 7be:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
 7c0:	29 27       	eor	r18, r25
 7c2:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
 7c4:	92 23       	and	r25, r18
 7c6:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
 7c8:	94 81       	ldd	r25, Z+4	; 0x04
 7ca:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
 7cc:	98 27       	eor	r25, r24
 7ce:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
 7d0:	89 23       	and	r24, r25
 7d2:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	
	
	
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <parse_switch_data>:
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 7da:	40 e0       	ldi	r20, 0x00	; 0
 7dc:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
 7de:	da 01       	movw	r26, r20
 7e0:	aa 0f       	add	r26, r26
 7e2:	bb 1f       	adc	r27, r27
 7e4:	aa 5f       	subi	r26, 0xFA	; 250
 7e6:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
 7e8:	8c 91       	ld	r24, X
 7ea:	e8 2f       	mov	r30, r24
 7ec:	e6 95       	lsr	r30
 7ee:	e6 95       	lsr	r30
 7f0:	e6 95       	lsr	r30
 7f2:	e7 70       	andi	r30, 0x07	; 7
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	ea 5a       	subi	r30, 0xAA	; 170
 7f8:	fd 4f       	sbci	r31, 0xFD	; 253
 7fa:	20 81       	ld	r18, Z
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	98 2f       	mov	r25, r24
 800:	97 70       	andi	r25, 0x07	; 7
 802:	02 c0       	rjmp	.+4      	; 0x808 <parse_switch_data+0x2e>
 804:	35 95       	asr	r19
 806:	27 95       	ror	r18
 808:	9a 95       	dec	r25
 80a:	e2 f7       	brpl	.-8      	; 0x804 <parse_switch_data+0x2a>
 80c:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
 80e:	86 fb       	bst	r24, 6
 810:	99 27       	eor	r25, r25
 812:	90 f9       	bld	r25, 0
 814:	29 27       	eor	r18, r25
 816:	20 fb       	bst	r18, 0
 818:	86 f9       	bld	r24, 6
 81a:	8c 93       	st	X, r24
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 81c:	4f 5f       	subi	r20, 0xFF	; 255
 81e:	5f 4f       	sbci	r21, 0xFF	; 255
 820:	43 32       	cpi	r20, 0x23	; 35
 822:	51 05       	cpc	r21, r1
 824:	e1 f6       	brne	.-72     	; 0x7de <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
 826:	08 95       	ret

00000828 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 828:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 82a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 82c:	74 83       	std	Z+4, r23	; 0x04
 82e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 830:	11 82       	std	Z+1, r1	; 0x01
 832:	10 82       	st	Z, r1
 834:	08 95       	ret

00000836 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 836:	ff 92       	push	r15
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	ec 01       	movw	r28, r24
 842:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 844:	0e 94 94 04 	call	0x928	; 0x928 <store_and_clear_interrupt>
 848:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 84a:	f9 80       	ldd	r15, Y+1	; 0x01
 84c:	4f 2d       	mov	r20, r15
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	ca 01       	movw	r24, r20
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	2a 81       	ldd	r18, Y+2	; 0x02
 856:	62 2f       	mov	r22, r18
 858:	70 e0       	ldi	r23, 0x00	; 0
 85a:	0e 94 43 07 	call	0xe86	; 0xe86 <__divmodhi4>
 85e:	28 81       	ld	r18, Y
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	82 17       	cp	r24, r18
 864:	93 07       	cpc	r25, r19
 866:	29 f4       	brne	.+10     	; 0x872 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 868:	81 2f       	mov	r24, r17
 86a:	0e 94 97 04 	call	0x92e	; 0x92e <restore_interrupt_setting>
      return false;
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	12 c0       	rjmp	.+36     	; 0x896 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 872:	eb 81       	ldd	r30, Y+3	; 0x03
 874:	fc 81       	ldd	r31, Y+4	; 0x04
 876:	ef 0d       	add	r30, r15
 878:	f1 1d       	adc	r31, r1
 87a:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 87c:	29 81       	ldd	r18, Y+1	; 0x01
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	c9 01       	movw	r24, r18
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	6a 81       	ldd	r22, Y+2	; 0x02
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	0e 94 43 07 	call	0xe86	; 0xe86 <__divmodhi4>
 88c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 88e:	81 2f       	mov	r24, r17
 890:	0e 94 97 04 	call	0x92e	; 0x92e <restore_interrupt_setting>
      return true;
 894:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	08 95       	ret

000008a2 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 8a8:	0e 94 94 04 	call	0x928	; 0x928 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 8ac:	39 81       	ldd	r19, Y+1	; 0x01
 8ae:	28 81       	ld	r18, Y
 8b0:	32 17       	cp	r19, r18
 8b2:	18 f0       	brcs	.+6      	; 0x8ba <bytequeue_length+0x18>
      len = queue->end - queue->start;
 8b4:	c3 2f       	mov	r28, r19
 8b6:	c2 1b       	sub	r28, r18
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <bytequeue_length+0x20>
 8ba:	9a 81       	ldd	r25, Y+2	; 0x02
 8bc:	c3 2f       	mov	r28, r19
 8be:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 8c0:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 8c2:	0e 94 97 04 	call	0x92e	; 0x92e <restore_interrupt_setting>
   return len;
}
 8c6:	8c 2f       	mov	r24, r28
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	08 95       	ret

000008ce <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 8ce:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 8d0:	80 81       	ld	r24, Z
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	9b 01       	movw	r18, r22
 8d6:	28 0f       	add	r18, r24
 8d8:	31 1d       	adc	r19, r1
 8da:	c9 01       	movw	r24, r18
 8dc:	62 81       	ldd	r22, Z+2	; 0x02
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	0e 94 43 07 	call	0xe86	; 0xe86 <__divmodhi4>
 8e4:	03 80       	ldd	r0, Z+3	; 0x03
 8e6:	f4 81       	ldd	r31, Z+4	; 0x04
 8e8:	e0 2d       	mov	r30, r0
 8ea:	e8 0f       	add	r30, r24
 8ec:	f9 1f       	adc	r31, r25
}
 8ee:	80 81       	ld	r24, Z
 8f0:	08 95       	ret

000008f2 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 8f2:	1f 93       	push	r17
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	ec 01       	movw	r28, r24
 8fa:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 8fc:	0e 94 94 04 	call	0x928	; 0x928 <store_and_clear_interrupt>
 900:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 902:	88 81       	ld	r24, Y
 904:	21 2f       	mov	r18, r17
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	b9 01       	movw	r22, r18
 90a:	68 0f       	add	r22, r24
 90c:	71 1d       	adc	r23, r1
 90e:	cb 01       	movw	r24, r22
 910:	6a 81       	ldd	r22, Y+2	; 0x02
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	0e 94 43 07 	call	0xe86	; 0xe86 <__divmodhi4>
 918:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 91a:	84 2f       	mov	r24, r20
 91c:	0e 94 97 04 	call	0x92e	; 0x92e <restore_interrupt_setting>
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	08 95       	ret

00000928 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 928:	8f b7       	in	r24, 0x3f	; 63
   cli();
 92a:	f8 94       	cli
   return sreg;
}
 92c:	08 95       	ret

0000092e <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 92e:	8f bf       	out	0x3f, r24	; 63
 930:	08 95       	ret

00000932 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 932:	88 1f       	adc	r24, r24
 934:	88 27       	eor	r24, r24
 936:	88 1f       	adc	r24, r24
 938:	08 95       	ret

0000093a <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	88 3f       	cpi	r24, 0xF8	; 248
 93e:	08 f4       	brcc	.+2      	; 0x942 <midi_is_realtime+0x8>
 940:	90 e0       	ldi	r25, 0x00	; 0
}
 942:	89 2f       	mov	r24, r25
 944:	08 95       	ret

00000946 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 946:	98 2f       	mov	r25, r24
 948:	90 7f       	andi	r25, 0xF0	; 240
 94a:	90 3c       	cpi	r25, 0xC0	; 192
 94c:	b1 f0       	breq	.+44     	; 0x97a <midi_packet_length+0x34>
 94e:	58 f4       	brcc	.+22     	; 0x966 <midi_packet_length+0x20>
 950:	90 39       	cpi	r25, 0x90	; 144
 952:	41 f1       	breq	.+80     	; 0x9a4 <midi_packet_length+0x5e>
 954:	18 f4       	brcc	.+6      	; 0x95c <midi_packet_length+0x16>
 956:	90 38       	cpi	r25, 0x80	; 128
 958:	19 f5       	brne	.+70     	; 0x9a0 <midi_packet_length+0x5a>
 95a:	24 c0       	rjmp	.+72     	; 0x9a4 <midi_packet_length+0x5e>
 95c:	90 3a       	cpi	r25, 0xA0	; 160
 95e:	11 f1       	breq	.+68     	; 0x9a4 <midi_packet_length+0x5e>
 960:	90 3b       	cpi	r25, 0xB0	; 176
 962:	f1 f4       	brne	.+60     	; 0x9a0 <midi_packet_length+0x5a>
 964:	1f c0       	rjmp	.+62     	; 0x9a4 <midi_packet_length+0x5e>
 966:	90 3e       	cpi	r25, 0xE0	; 224
 968:	e9 f0       	breq	.+58     	; 0x9a4 <midi_packet_length+0x5e>
 96a:	18 f4       	brcc	.+6      	; 0x972 <midi_packet_length+0x2c>
 96c:	90 3d       	cpi	r25, 0xD0	; 208
 96e:	29 f0       	breq	.+10     	; 0x97a <midi_packet_length+0x34>
 970:	17 c0       	rjmp	.+46     	; 0x9a0 <midi_packet_length+0x5a>
 972:	90 3f       	cpi	r25, 0xF0	; 240
 974:	21 f0       	breq	.+8      	; 0x97e <midi_packet_length+0x38>
 976:	93 3f       	cpi	r25, 0xF3	; 243
 978:	99 f4       	brne	.+38     	; 0x9a0 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 97a:	82 e0       	ldi	r24, 0x02	; 2
 97c:	08 95       	ret
      case 0xF0:
         switch(status) {
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	fc 01       	movw	r30, r24
 982:	e1 5f       	subi	r30, 0xF1	; 241
 984:	f1 09       	sbc	r31, r1
 986:	ef 30       	cpi	r30, 0x0F	; 15
 988:	f1 05       	cpc	r31, r1
 98a:	40 f4       	brcc	.+16     	; 0x99c <midi_packet_length+0x56>
 98c:	e6 5a       	subi	r30, 0xA6	; 166
 98e:	ff 4f       	sbci	r31, 0xFF	; 255
 990:	0c 94 57 07 	jmp	0xeae	; 0xeae <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 994:	83 e0       	ldi	r24, 0x03	; 3
 996:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 998:	82 e0       	ldi	r24, 0x02	; 2
 99a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	08 95       	ret
         }
      default:
         return UNDEFINED;
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 9a4:	83 e0       	ldi	r24, 0x03	; 3
 9a6:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 9a8:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 9aa:	08 95       	ret

000009ac <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 9ac:	fc 01       	movw	r30, r24
 9ae:	75 83       	std	Z+5, r23	; 0x05
 9b0:	64 83       	std	Z+4, r22	; 0x04
 9b2:	08 95       	ret

000009b4 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 9b4:	fc 01       	movw	r30, r24
 9b6:	77 83       	std	Z+7, r23	; 0x07
 9b8:	66 83       	std	Z+6, r22	; 0x06
 9ba:	08 95       	ret

000009bc <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 9bc:	fc 01       	movw	r30, r24
 9be:	77 8b       	std	Z+23, r23	; 0x17
 9c0:	66 8b       	std	Z+22, r22	; 0x16
 9c2:	08 95       	ret

000009c4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 9ca:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 9cc:	1f a2       	std	Y+39, r1	; 0x27
 9ce:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 9d0:	bc 01       	movw	r22, r24
 9d2:	68 5d       	subi	r22, 0xD8	; 216
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	40 ec       	ldi	r20, 0xC0	; 192
 9d8:	88 51       	subi	r24, 0x18	; 24
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	0e 94 14 04 	call	0x828	; 0x828 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 9e0:	1b 82       	std	Y+3, r1	; 0x03
 9e2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 9e4:	1d 82       	std	Y+5, r1	; 0x05
 9e6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 9e8:	1f 82       	std	Y+7, r1	; 0x07
 9ea:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 9ec:	19 86       	std	Y+9, r1	; 0x09
 9ee:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 9f0:	1b 86       	std	Y+11, r1	; 0x0b
 9f2:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 9f4:	1d 86       	std	Y+13, r1	; 0x0d
 9f6:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 9f8:	1f 86       	std	Y+15, r1	; 0x0f
 9fa:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 9fc:	19 8a       	std	Y+17, r1	; 0x11
 9fe:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 a00:	1b 8a       	std	Y+19, r1	; 0x13
 a02:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 a04:	1d 8a       	std	Y+21, r1	; 0x15
 a06:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 a08:	1f 8a       	std	Y+23, r1	; 0x17
 a0a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 a0c:	19 8e       	std	Y+25, r1	; 0x19
 a0e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 a10:	1b 8e       	std	Y+27, r1	; 0x1b
 a12:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 a14:	1d 8e       	std	Y+29, r1	; 0x1d
 a16:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 a18:	1f 8e       	std	Y+31, r1	; 0x1f
 a1a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 a1c:	19 a2       	std	Y+33, r1	; 0x21
 a1e:	18 a2       	std	Y+32, r1	; 0x20
}
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	08 95       	ret

00000a26 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 a26:	ef 92       	push	r14
 a28:	ff 92       	push	r15
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 a32:	66 23       	and	r22, r22
 a34:	99 f0       	breq	.+38     	; 0xa5c <midi_device_input+0x36>
 a36:	ea 01       	movw	r28, r20
 a38:	61 50       	subi	r22, 0x01	; 1
 a3a:	06 2f       	mov	r16, r22
 a3c:	10 e0       	ldi	r17, 0x00	; 0
 a3e:	0f 5f       	subi	r16, 0xFF	; 255
 a40:	1f 4f       	sbci	r17, 0xFF	; 255
 a42:	04 0f       	add	r16, r20
 a44:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 a46:	7c 01       	movw	r14, r24
 a48:	28 ee       	ldi	r18, 0xE8	; 232
 a4a:	e2 0e       	add	r14, r18
 a4c:	f1 1c       	adc	r15, r1
 a4e:	69 91       	ld	r22, Y+
 a50:	c7 01       	movw	r24, r14
 a52:	0e 94 1b 04 	call	0x836	; 0x836 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 a56:	c0 17       	cp	r28, r16
 a58:	d1 07       	cpc	r29, r17
 a5a:	c9 f7       	brne	.-14     	; 0xa4e <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	1f 91       	pop	r17
 a62:	0f 91       	pop	r16
 a64:	ff 90       	pop	r15
 a66:	ef 90       	pop	r14
 a68:	08 95       	ret

00000a6a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 a6a:	af 92       	push	r10
 a6c:	bf 92       	push	r11
 a6e:	cf 92       	push	r12
 a70:	df 92       	push	r13
 a72:	ef 92       	push	r14
 a74:	ff 92       	push	r15
 a76:	0f 93       	push	r16
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	00 d0       	rcall	.+0      	; 0xa80 <midi_input_callbacks+0x16>
 a80:	1f 92       	push	r1
 a82:	cd b7       	in	r28, 0x3d	; 61
 a84:	de b7       	in	r29, 0x3e	; 62
 a86:	7c 01       	movw	r14, r24
 a88:	6b 01       	movw	r12, r22
 a8a:	14 2f       	mov	r17, r20
 a8c:	b2 2e       	mov	r11, r18
 a8e:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 a90:	dc 01       	movw	r26, r24
 a92:	95 96       	adiw	r26, 0x25	; 37
 a94:	8c 91       	ld	r24, X
 a96:	95 97       	sbiw	r26, 0x25	; 37
 a98:	84 30       	cpi	r24, 0x04	; 4
 a9a:	11 f5       	brne	.+68     	; 0xae0 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 a9c:	5a 96       	adiw	r26, 0x1a	; 26
 a9e:	ed 91       	ld	r30, X+
 aa0:	fc 91       	ld	r31, X
 aa2:	5b 97       	sbiw	r26, 0x1b	; 27
 aa4:	30 97       	sbiw	r30, 0x00	; 0
 aa6:	09 f4       	brne	.+2      	; 0xaaa <midi_input_callbacks+0x40>
 aa8:	cc c0       	rjmp	.+408    	; 0xc42 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 aaa:	9b 01       	movw	r18, r22
 aac:	21 50       	subi	r18, 0x01	; 1
 aae:	31 09       	sbc	r19, r1
 ab0:	ab ea       	ldi	r26, 0xAB	; 171
 ab2:	ba ea       	ldi	r27, 0xAA	; 170
 ab4:	0e 94 5d 07 	call	0xeba	; 0xeba <__umulhisi3>
 ab8:	96 95       	lsr	r25
 aba:	87 95       	ror	r24
 abc:	9c 01       	movw	r18, r24
 abe:	22 0f       	add	r18, r18
 ac0:	33 1f       	adc	r19, r19
 ac2:	82 0f       	add	r24, r18
 ac4:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 ac6:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 ac8:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 aca:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 acc:	4c 2d       	mov	r20, r12
 ace:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 ad0:	9e 01       	movw	r18, r28
 ad2:	2f 5f       	subi	r18, 0xFF	; 255
 ad4:	3f 4f       	sbci	r19, 0xFF	; 255
 ad6:	68 2f       	mov	r22, r24
 ad8:	79 2f       	mov	r23, r25
 ada:	c7 01       	movw	r24, r14
 adc:	09 95       	icall
 ade:	be c0       	rjmp	.+380    	; 0xc5c <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
 ae0:	62 30       	cpi	r22, 0x02	; 2
 ae2:	71 05       	cpc	r23, r1
 ae4:	09 f4       	brne	.+2      	; 0xae8 <midi_input_callbacks+0x7e>
 ae6:	55 c0       	rjmp	.+170    	; 0xb92 <midi_input_callbacks+0x128>
 ae8:	63 30       	cpi	r22, 0x03	; 3
 aea:	71 05       	cpc	r23, r1
 aec:	29 f0       	breq	.+10     	; 0xaf8 <midi_input_callbacks+0x8e>
 aee:	61 30       	cpi	r22, 0x01	; 1
 af0:	71 05       	cpc	r23, r1
 af2:	09 f0       	breq	.+2      	; 0xaf6 <midi_input_callbacks+0x8c>
 af4:	a1 c0       	rjmp	.+322    	; 0xc38 <midi_input_callbacks+0x1ce>
 af6:	88 c0       	rjmp	.+272    	; 0xc08 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 af8:	84 2f       	mov	r24, r20
 afa:	80 7f       	andi	r24, 0xF0	; 240
 afc:	80 3a       	cpi	r24, 0xA0	; 160
 afe:	f1 f0       	breq	.+60     	; 0xb3c <midi_input_callbacks+0xd2>
 b00:	28 f4       	brcc	.+10     	; 0xb0c <midi_input_callbacks+0xa2>
 b02:	80 38       	cpi	r24, 0x80	; 128
 b04:	a9 f0       	breq	.+42     	; 0xb30 <midi_input_callbacks+0xc6>
 b06:	80 39       	cpi	r24, 0x90	; 144
 b08:	69 f0       	breq	.+26     	; 0xb24 <midi_input_callbacks+0xba>
 b0a:	2f c0       	rjmp	.+94     	; 0xb6a <midi_input_callbacks+0x100>
 b0c:	80 3e       	cpi	r24, 0xE0	; 224
 b0e:	e1 f0       	breq	.+56     	; 0xb48 <midi_input_callbacks+0xde>
 b10:	80 3f       	cpi	r24, 0xF0	; 240
 b12:	01 f1       	breq	.+64     	; 0xb54 <midi_input_callbacks+0xea>
 b14:	80 3b       	cpi	r24, 0xB0	; 176
 b16:	49 f5       	brne	.+82     	; 0xb6a <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 b18:	d7 01       	movw	r26, r14
 b1a:	12 96       	adiw	r26, 0x02	; 2
 b1c:	ed 91       	ld	r30, X+
 b1e:	fc 91       	ld	r31, X
 b20:	13 97       	sbiw	r26, 0x03	; 3
              break;
 b22:	25 c0       	rjmp	.+74     	; 0xb6e <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 b24:	d7 01       	movw	r26, r14
 b26:	14 96       	adiw	r26, 0x04	; 4
 b28:	ed 91       	ld	r30, X+
 b2a:	fc 91       	ld	r31, X
 b2c:	15 97       	sbiw	r26, 0x05	; 5
              break;
 b2e:	1f c0       	rjmp	.+62     	; 0xb6e <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 b30:	d7 01       	movw	r26, r14
 b32:	16 96       	adiw	r26, 0x06	; 6
 b34:	ed 91       	ld	r30, X+
 b36:	fc 91       	ld	r31, X
 b38:	17 97       	sbiw	r26, 0x07	; 7
              break;
 b3a:	19 c0       	rjmp	.+50     	; 0xb6e <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 b3c:	d7 01       	movw	r26, r14
 b3e:	18 96       	adiw	r26, 0x08	; 8
 b40:	ed 91       	ld	r30, X+
 b42:	fc 91       	ld	r31, X
 b44:	19 97       	sbiw	r26, 0x09	; 9
              break;
 b46:	13 c0       	rjmp	.+38     	; 0xb6e <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 b48:	d7 01       	movw	r26, r14
 b4a:	1a 96       	adiw	r26, 0x0a	; 10
 b4c:	ed 91       	ld	r30, X+
 b4e:	fc 91       	ld	r31, X
 b50:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 b52:	0d c0       	rjmp	.+26     	; 0xb6e <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 b54:	42 3f       	cpi	r20, 0xF2	; 242
 b56:	09 f0       	breq	.+2      	; 0xb5a <midi_input_callbacks+0xf0>
 b58:	74 c0       	rjmp	.+232    	; 0xc42 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
 b5a:	d7 01       	movw	r26, r14
 b5c:	1c 96       	adiw	r26, 0x0c	; 12
 b5e:	ed 91       	ld	r30, X+
 b60:	fc 91       	ld	r31, X
 b62:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 b64:	30 97       	sbiw	r30, 0x00	; 0
 b66:	41 f4       	brne	.+16     	; 0xb78 <midi_input_callbacks+0x10e>
 b68:	6c c0       	rjmp	.+216    	; 0xc42 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 b6a:	e0 e0       	ldi	r30, 0x00	; 0
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 b6e:	30 97       	sbiw	r30, 0x00	; 0
 b70:	09 f4       	brne	.+2      	; 0xb74 <midi_input_callbacks+0x10a>
 b72:	67 c0       	rjmp	.+206    	; 0xc42 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 b74:	12 3f       	cpi	r17, 0xF2	; 242
 b76:	31 f4       	brne	.+12     	; 0xb84 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 b78:	2a 2d       	mov	r18, r10
 b7a:	4b 2d       	mov	r20, r11
 b7c:	62 ef       	ldi	r22, 0xF2	; 242
 b7e:	c7 01       	movw	r24, r14
 b80:	09 95       	icall
 b82:	6c c0       	rjmp	.+216    	; 0xc5c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 b84:	2a 2d       	mov	r18, r10
 b86:	4b 2d       	mov	r20, r11
 b88:	61 2f       	mov	r22, r17
 b8a:	6f 70       	andi	r22, 0x0F	; 15
 b8c:	c7 01       	movw	r24, r14
 b8e:	09 95       	icall
 b90:	65 c0       	rjmp	.+202    	; 0xc5c <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 b92:	84 2f       	mov	r24, r20
 b94:	80 7f       	andi	r24, 0xF0	; 240
 b96:	80 3d       	cpi	r24, 0xD0	; 208
 b98:	51 f0       	breq	.+20     	; 0xbae <midi_input_callbacks+0x144>
 b9a:	80 3f       	cpi	r24, 0xF0	; 240
 b9c:	71 f0       	breq	.+28     	; 0xbba <midi_input_callbacks+0x150>
 b9e:	80 3c       	cpi	r24, 0xC0	; 192
 ba0:	01 f5       	brne	.+64     	; 0xbe2 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 ba2:	d7 01       	movw	r26, r14
 ba4:	1e 96       	adiw	r26, 0x0e	; 14
 ba6:	ed 91       	ld	r30, X+
 ba8:	fc 91       	ld	r31, X
 baa:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 bac:	1c c0       	rjmp	.+56     	; 0xbe6 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 bae:	d7 01       	movw	r26, r14
 bb0:	50 96       	adiw	r26, 0x10	; 16
 bb2:	ed 91       	ld	r30, X+
 bb4:	fc 91       	ld	r31, X
 bb6:	51 97       	sbiw	r26, 0x11	; 17
              break;
 bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 bba:	43 3f       	cpi	r20, 0xF3	; 243
 bbc:	41 f4       	brne	.+16     	; 0xbce <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
 bbe:	d7 01       	movw	r26, r14
 bc0:	52 96       	adiw	r26, 0x12	; 18
 bc2:	ed 91       	ld	r30, X+
 bc4:	fc 91       	ld	r31, X
 bc6:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 bc8:	30 97       	sbiw	r30, 0x00	; 0
 bca:	99 f4       	brne	.+38     	; 0xbf2 <midi_input_callbacks+0x188>
 bcc:	3a c0       	rjmp	.+116    	; 0xc42 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 bce:	41 3f       	cpi	r20, 0xF1	; 241
 bd0:	c1 f5       	brne	.+112    	; 0xc42 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
 bd2:	d7 01       	movw	r26, r14
 bd4:	54 96       	adiw	r26, 0x14	; 20
 bd6:	ed 91       	ld	r30, X+
 bd8:	fc 91       	ld	r31, X
 bda:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 bdc:	30 97       	sbiw	r30, 0x00	; 0
 bde:	49 f4       	brne	.+18     	; 0xbf2 <midi_input_callbacks+0x188>
 be0:	30 c0       	rjmp	.+96     	; 0xc42 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 be2:	e0 e0       	ldi	r30, 0x00	; 0
 be4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 be6:	30 97       	sbiw	r30, 0x00	; 0
 be8:	61 f1       	breq	.+88     	; 0xc42 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 bea:	81 2f       	mov	r24, r17
 bec:	8d 7f       	andi	r24, 0xFD	; 253
 bee:	81 3f       	cpi	r24, 0xF1	; 241
 bf0:	29 f4       	brne	.+10     	; 0xbfc <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
 bf2:	4b 2d       	mov	r20, r11
 bf4:	61 2f       	mov	r22, r17
 bf6:	c7 01       	movw	r24, r14
 bf8:	09 95       	icall
 bfa:	30 c0       	rjmp	.+96     	; 0xc5c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
 bfc:	4b 2d       	mov	r20, r11
 bfe:	61 2f       	mov	r22, r17
 c00:	6f 70       	andi	r22, 0x0F	; 15
 c02:	c7 01       	movw	r24, r14
 c04:	09 95       	icall
 c06:	2a c0       	rjmp	.+84     	; 0xc5c <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 c08:	84 2f       	mov	r24, r20
 c0a:	0e 94 9d 04 	call	0x93a	; 0x93a <midi_is_realtime>
 c0e:	88 23       	and	r24, r24
 c10:	31 f0       	breq	.+12     	; 0xc1e <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
 c12:	d7 01       	movw	r26, r14
 c14:	56 96       	adiw	r26, 0x16	; 22
 c16:	ed 91       	ld	r30, X+
 c18:	fc 91       	ld	r31, X
 c1a:	57 97       	sbiw	r26, 0x17	; 23
 c1c:	07 c0       	rjmp	.+14     	; 0xc2c <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
 c1e:	16 3f       	cpi	r17, 0xF6	; 246
 c20:	81 f4       	brne	.+32     	; 0xc42 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
 c22:	d7 01       	movw	r26, r14
 c24:	58 96       	adiw	r26, 0x18	; 24
 c26:	ed 91       	ld	r30, X+
 c28:	fc 91       	ld	r31, X
 c2a:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 c2c:	30 97       	sbiw	r30, 0x00	; 0
 c2e:	49 f0       	breq	.+18     	; 0xc42 <midi_input_callbacks+0x1d8>
            func(device, byte0);
 c30:	61 2f       	mov	r22, r17
 c32:	c7 01       	movw	r24, r14
 c34:	09 95       	icall
 c36:	12 c0       	rjmp	.+36     	; 0xc5c <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 c38:	64 30       	cpi	r22, 0x04	; 4
 c3a:	71 05       	cpc	r23, r1
 c3c:	10 f0       	brcs	.+4      	; 0xc42 <midi_input_callbacks+0x1d8>
          cnt = 0;
 c3e:	c1 2c       	mov	r12, r1
 c40:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 c42:	d7 01       	movw	r26, r14
 c44:	5c 96       	adiw	r26, 0x1c	; 28
 c46:	ed 91       	ld	r30, X+
 c48:	fc 91       	ld	r31, X
 c4a:	5d 97       	sbiw	r26, 0x1d	; 29
 c4c:	30 97       	sbiw	r30, 0x00	; 0
 c4e:	31 f0       	breq	.+12     	; 0xc5c <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 c50:	0a 2d       	mov	r16, r10
 c52:	2b 2d       	mov	r18, r11
 c54:	41 2f       	mov	r20, r17
 c56:	b6 01       	movw	r22, r12
 c58:	c7 01       	movw	r24, r14
 c5a:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 c5c:	d7 01       	movw	r26, r14
 c5e:	5e 96       	adiw	r26, 0x1e	; 30
 c60:	ed 91       	ld	r30, X+
 c62:	fc 91       	ld	r31, X
 c64:	5f 97       	sbiw	r26, 0x1f	; 31
 c66:	30 97       	sbiw	r30, 0x00	; 0
 c68:	31 f0       	breq	.+12     	; 0xc76 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 c6a:	0a 2d       	mov	r16, r10
 c6c:	2b 2d       	mov	r18, r11
 c6e:	41 2f       	mov	r20, r17
 c70:	b6 01       	movw	r22, r12
 c72:	c7 01       	movw	r24, r14
 c74:	09 95       	icall
}
 c76:	0f 90       	pop	r0
 c78:	0f 90       	pop	r0
 c7a:	0f 90       	pop	r0
 c7c:	df 91       	pop	r29
 c7e:	cf 91       	pop	r28
 c80:	1f 91       	pop	r17
 c82:	0f 91       	pop	r16
 c84:	ff 90       	pop	r15
 c86:	ef 90       	pop	r14
 c88:	df 90       	pop	r13
 c8a:	cf 90       	pop	r12
 c8c:	bf 90       	pop	r11
 c8e:	af 90       	pop	r10
 c90:	08 95       	ret

00000c92 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 c92:	ff 92       	push	r15
 c94:	0f 93       	push	r16
 c96:	1f 93       	push	r17
 c98:	cf 93       	push	r28
 c9a:	df 93       	push	r29
 c9c:	ec 01       	movw	r28, r24
 c9e:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 ca0:	86 2f       	mov	r24, r22
 ca2:	0e 94 9d 04 	call	0x93a	; 0x93a <midi_is_realtime>
 ca6:	88 23       	and	r24, r24
 ca8:	69 f0       	breq	.+26     	; 0xcc4 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 caa:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 cac:	81 e0       	ldi	r24, 0x01	; 1
 cae:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 cb0:	00 e0       	ldi	r16, 0x00	; 0
 cb2:	20 e0       	ldi	r18, 0x00	; 0
 cb4:	41 2f       	mov	r20, r17
 cb6:	61 e0       	ldi	r22, 0x01	; 1
 cb8:	70 e0       	ldi	r23, 0x00	; 0
 cba:	ce 01       	movw	r24, r28
 cbc:	0e 94 35 05 	call	0xa6a	; 0xa6a <midi_input_callbacks>
    device->input_state = state;
 cc0:	fd a2       	std	Y+37, r15	; 0x25
 cc2:	a4 c0       	rjmp	.+328    	; 0xe0c <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
 cc4:	81 2f       	mov	r24, r17
 cc6:	0e 94 99 04 	call	0x932	; 0x932 <midi_is_statusbyte>
 cca:	88 23       	and	r24, r24
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <midi_process_byte+0x3e>
 cce:	5d c0       	rjmp	.+186    	; 0xd8a <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 cd0:	8d a1       	ldd	r24, Y+37	; 0x25
 cd2:	84 30       	cpi	r24, 0x04	; 4
 cd4:	29 f0       	breq	.+10     	; 0xce0 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
 cd6:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	9f a3       	std	Y+39, r25	; 0x27
 cde:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 ce0:	81 2f       	mov	r24, r17
 ce2:	0e 94 a3 04 	call	0x946	; 0x946 <midi_packet_length>
 ce6:	81 30       	cpi	r24, 0x01	; 1
 ce8:	31 f0       	breq	.+12     	; 0xcf6 <midi_process_byte+0x64>
 cea:	b8 f0       	brcs	.+46     	; 0xd1a <midi_process_byte+0x88>
 cec:	82 30       	cpi	r24, 0x02	; 2
 cee:	79 f0       	breq	.+30     	; 0xd0e <midi_process_byte+0x7c>
 cf0:	83 30       	cpi	r24, 0x03	; 3
 cf2:	81 f0       	breq	.+32     	; 0xd14 <midi_process_byte+0x82>
 cf4:	46 c0       	rjmp	.+140    	; 0xd82 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 cfa:	00 e0       	ldi	r16, 0x00	; 0
 cfc:	20 e0       	ldi	r18, 0x00	; 0
 cfe:	41 2f       	mov	r20, r17
 d00:	61 e0       	ldi	r22, 0x01	; 1
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	ce 01       	movw	r24, r28
 d06:	0e 94 35 05 	call	0xa6a	; 0xa6a <midi_input_callbacks>
        device->input_state = IDLE;
 d0a:	1d a2       	std	Y+37, r1	; 0x25
        break;
 d0c:	7f c0       	rjmp	.+254    	; 0xe0c <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 d0e:	82 e0       	ldi	r24, 0x02	; 2
 d10:	8d a3       	std	Y+37, r24	; 0x25
        break;
 d12:	7c c0       	rjmp	.+248    	; 0xe0c <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 d14:	83 e0       	ldi	r24, 0x03	; 3
 d16:	8d a3       	std	Y+37, r24	; 0x25
        break;
 d18:	79 c0       	rjmp	.+242    	; 0xe0c <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
 d1a:	10 3f       	cpi	r17, 0xF0	; 240
 d1c:	19 f0       	breq	.+6      	; 0xd24 <midi_process_byte+0x92>
 d1e:	17 3f       	cpi	r17, 0xF7	; 247
 d20:	51 f0       	breq	.+20     	; 0xd36 <midi_process_byte+0xa4>
 d22:	2b c0       	rjmp	.+86     	; 0xd7a <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 d24:	84 e0       	ldi	r24, 0x04	; 4
 d26:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 d28:	80 ef       	ldi	r24, 0xF0	; 240
 d2a:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 d2c:	81 e0       	ldi	r24, 0x01	; 1
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	9f a3       	std	Y+39, r25	; 0x27
 d32:	8e a3       	std	Y+38, r24	; 0x26
            break;
 d34:	6b c0       	rjmp	.+214    	; 0xe0c <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 d36:	4e a1       	ldd	r20, Y+38	; 0x26
 d38:	5f a1       	ldd	r21, Y+39	; 0x27
 d3a:	9a 01       	movw	r18, r20
 d3c:	ab ea       	ldi	r26, 0xAB	; 171
 d3e:	ba ea       	ldi	r27, 0xAA	; 170
 d40:	0e 94 5d 07 	call	0xeba	; 0xeba <__umulhisi3>
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	9c 01       	movw	r18, r24
 d4a:	22 0f       	add	r18, r18
 d4c:	33 1f       	adc	r19, r19
 d4e:	82 0f       	add	r24, r18
 d50:	93 1f       	adc	r25, r19
 d52:	fa 01       	movw	r30, r20
 d54:	e8 1b       	sub	r30, r24
 d56:	f9 0b       	sbc	r31, r25
 d58:	ec 0f       	add	r30, r28
 d5a:	fd 1f       	adc	r31, r29
 d5c:	87 ef       	ldi	r24, 0xF7	; 247
 d5e:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 d60:	ba 01       	movw	r22, r20
 d62:	6f 5f       	subi	r22, 0xFF	; 255
 d64:	7f 4f       	sbci	r23, 0xFF	; 255
 d66:	7f a3       	std	Y+39, r23	; 0x27
 d68:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 d6a:	0c a1       	ldd	r16, Y+36	; 0x24
 d6c:	2b a1       	ldd	r18, Y+35	; 0x23
 d6e:	4a a1       	ldd	r20, Y+34	; 0x22
 d70:	ce 01       	movw	r24, r28
 d72:	0e 94 35 05 	call	0xa6a	; 0xa6a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 d76:	1d a2       	std	Y+37, r1	; 0x25
            break;
 d78:	49 c0       	rjmp	.+146    	; 0xe0c <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
 d7a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 d7c:	1f a2       	std	Y+39, r1	; 0x27
 d7e:	1e a2       	std	Y+38, r1	; 0x26
 d80:	45 c0       	rjmp	.+138    	; 0xe0c <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
 d82:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 d84:	1f a2       	std	Y+39, r1	; 0x27
 d86:	1e a2       	std	Y+38, r1	; 0x26
        break;
 d88:	41 c0       	rjmp	.+130    	; 0xe0c <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
 d8a:	ed a1       	ldd	r30, Y+37	; 0x25
 d8c:	ee 23       	and	r30, r30
 d8e:	f1 f1       	breq	.+124    	; 0xe0c <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 d90:	4e a1       	ldd	r20, Y+38	; 0x26
 d92:	5f a1       	ldd	r21, Y+39	; 0x27
 d94:	9a 01       	movw	r18, r20
 d96:	ab ea       	ldi	r26, 0xAB	; 171
 d98:	ba ea       	ldi	r27, 0xAA	; 170
 d9a:	0e 94 5d 07 	call	0xeba	; 0xeba <__umulhisi3>
 d9e:	96 95       	lsr	r25
 da0:	87 95       	ror	r24
 da2:	9c 01       	movw	r18, r24
 da4:	22 0f       	add	r18, r18
 da6:	33 1f       	adc	r19, r19
 da8:	82 0f       	add	r24, r18
 daa:	93 1f       	adc	r25, r19
 dac:	9a 01       	movw	r18, r20
 dae:	28 1b       	sub	r18, r24
 db0:	39 0b       	sbc	r19, r25
 db2:	de 01       	movw	r26, r28
 db4:	a2 0f       	add	r26, r18
 db6:	b3 1f       	adc	r27, r19
 db8:	92 96       	adiw	r26, 0x22	; 34
 dba:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 dbc:	ba 01       	movw	r22, r20
 dbe:	6f 5f       	subi	r22, 0xFF	; 255
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255
 dc2:	7f a3       	std	Y+39, r23	; 0x27
 dc4:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 dc6:	21 30       	cpi	r18, 0x01	; 1
 dc8:	31 05       	cpc	r19, r1
 dca:	89 f0       	breq	.+34     	; 0xdee <midi_process_byte+0x15c>
 dcc:	22 30       	cpi	r18, 0x02	; 2
 dce:	31 05       	cpc	r19, r1
 dd0:	e9 f4       	brne	.+58     	; 0xe0c <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 dd2:	0c a1       	ldd	r16, Y+36	; 0x24
 dd4:	2b a1       	ldd	r18, Y+35	; 0x23
 dd6:	4a a1       	ldd	r20, Y+34	; 0x22
 dd8:	ce 01       	movw	r24, r28
 dda:	0e 94 35 05 	call	0xa6a	; 0xa6a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 dde:	8d a1       	ldd	r24, Y+37	; 0x25
 de0:	84 30       	cpi	r24, 0x04	; 4
 de2:	a1 f0       	breq	.+40     	; 0xe0c <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 de4:	81 e0       	ldi	r24, 0x01	; 1
 de6:	90 e0       	ldi	r25, 0x00	; 0
 de8:	9f a3       	std	Y+39, r25	; 0x27
 dea:	8e a3       	std	Y+38, r24	; 0x26
 dec:	0f c0       	rjmp	.+30     	; 0xe0c <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 dee:	e2 30       	cpi	r30, 0x02	; 2
 df0:	69 f4       	brne	.+26     	; 0xe0c <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
 df2:	00 e0       	ldi	r16, 0x00	; 0
 df4:	2b a1       	ldd	r18, Y+35	; 0x23
 df6:	4a a1       	ldd	r20, Y+34	; 0x22
 df8:	ce 01       	movw	r24, r28
 dfa:	0e 94 35 05 	call	0xa6a	; 0xa6a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 dfe:	8d a1       	ldd	r24, Y+37	; 0x25
 e00:	84 30       	cpi	r24, 0x04	; 4
 e02:	21 f0       	breq	.+8      	; 0xe0c <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 e04:	81 e0       	ldi	r24, 0x01	; 1
 e06:	90 e0       	ldi	r25, 0x00	; 0
 e08:	9f a3       	std	Y+39, r25	; 0x27
 e0a:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 e0c:	df 91       	pop	r29
 e0e:	cf 91       	pop	r28
 e10:	1f 91       	pop	r17
 e12:	0f 91       	pop	r16
 e14:	ff 90       	pop	r15
 e16:	08 95       	ret

00000e18 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 e18:	cf 92       	push	r12
 e1a:	df 92       	push	r13
 e1c:	ef 92       	push	r14
 e1e:	ff 92       	push	r15
 e20:	0f 93       	push	r16
 e22:	1f 93       	push	r17
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 e2a:	dc 01       	movw	r26, r24
 e2c:	90 96       	adiw	r26, 0x20	; 32
 e2e:	ed 91       	ld	r30, X+
 e30:	fc 91       	ld	r31, X
 e32:	91 97       	sbiw	r26, 0x21	; 33
 e34:	30 97       	sbiw	r30, 0x00	; 0
 e36:	09 f0       	breq	.+2      	; 0xe3a <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 e38:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 e3a:	86 01       	movw	r16, r12
 e3c:	08 51       	subi	r16, 0x18	; 24
 e3e:	1f 4f       	sbci	r17, 0xFF	; 255
 e40:	c8 01       	movw	r24, r16
 e42:	0e 94 51 04 	call	0x8a2	; 0x8a2 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 e46:	e8 2e       	mov	r14, r24
 e48:	f1 2c       	mov	r15, r1
 e4a:	e1 14       	cp	r14, r1
 e4c:	f1 04       	cpc	r15, r1
 e4e:	91 f0       	breq	.+36     	; 0xe74 <midi_device_process+0x5c>
 e50:	c0 e0       	ldi	r28, 0x00	; 0
 e52:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 e54:	60 e0       	ldi	r22, 0x00	; 0
 e56:	c8 01       	movw	r24, r16
 e58:	0e 94 67 04 	call	0x8ce	; 0x8ce <bytequeue_get>
 e5c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 e5e:	c6 01       	movw	r24, r12
 e60:	0e 94 49 06 	call	0xc92	; 0xc92 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 e64:	61 e0       	ldi	r22, 0x01	; 1
 e66:	c8 01       	movw	r24, r16
 e68:	0e 94 79 04 	call	0x8f2	; 0x8f2 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 e6c:	21 96       	adiw	r28, 0x01	; 1
 e6e:	ce 15       	cp	r28, r14
 e70:	df 05       	cpc	r29, r15
 e72:	81 f7       	brne	.-32     	; 0xe54 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 e74:	df 91       	pop	r29
 e76:	cf 91       	pop	r28
 e78:	1f 91       	pop	r17
 e7a:	0f 91       	pop	r16
 e7c:	ff 90       	pop	r15
 e7e:	ef 90       	pop	r14
 e80:	df 90       	pop	r13
 e82:	cf 90       	pop	r12
 e84:	08 95       	ret

00000e86 <__divmodhi4>:
 e86:	97 fb       	bst	r25, 7
 e88:	07 2e       	mov	r0, r23
 e8a:	16 f4       	brtc	.+4      	; 0xe90 <__divmodhi4+0xa>
 e8c:	00 94       	com	r0
 e8e:	07 d0       	rcall	.+14     	; 0xe9e <__divmodhi4_neg1>
 e90:	77 fd       	sbrc	r23, 7
 e92:	09 d0       	rcall	.+18     	; 0xea6 <__divmodhi4_neg2>
 e94:	0e 94 6c 07 	call	0xed8	; 0xed8 <__udivmodhi4>
 e98:	07 fc       	sbrc	r0, 7
 e9a:	05 d0       	rcall	.+10     	; 0xea6 <__divmodhi4_neg2>
 e9c:	3e f4       	brtc	.+14     	; 0xeac <__divmodhi4_exit>

00000e9e <__divmodhi4_neg1>:
 e9e:	90 95       	com	r25
 ea0:	81 95       	neg	r24
 ea2:	9f 4f       	sbci	r25, 0xFF	; 255
 ea4:	08 95       	ret

00000ea6 <__divmodhi4_neg2>:
 ea6:	70 95       	com	r23
 ea8:	61 95       	neg	r22
 eaa:	7f 4f       	sbci	r23, 0xFF	; 255

00000eac <__divmodhi4_exit>:
 eac:	08 95       	ret

00000eae <__tablejump2__>:
 eae:	ee 0f       	add	r30, r30
 eb0:	ff 1f       	adc	r31, r31
 eb2:	05 90       	lpm	r0, Z+
 eb4:	f4 91       	lpm	r31, Z
 eb6:	e0 2d       	mov	r30, r0
 eb8:	09 94       	ijmp

00000eba <__umulhisi3>:
 eba:	a2 9f       	mul	r26, r18
 ebc:	b0 01       	movw	r22, r0
 ebe:	b3 9f       	mul	r27, r19
 ec0:	c0 01       	movw	r24, r0
 ec2:	a3 9f       	mul	r26, r19
 ec4:	70 0d       	add	r23, r0
 ec6:	81 1d       	adc	r24, r1
 ec8:	11 24       	eor	r1, r1
 eca:	91 1d       	adc	r25, r1
 ecc:	b2 9f       	mul	r27, r18
 ece:	70 0d       	add	r23, r0
 ed0:	81 1d       	adc	r24, r1
 ed2:	11 24       	eor	r1, r1
 ed4:	91 1d       	adc	r25, r1
 ed6:	08 95       	ret

00000ed8 <__udivmodhi4>:
 ed8:	aa 1b       	sub	r26, r26
 eda:	bb 1b       	sub	r27, r27
 edc:	51 e1       	ldi	r21, 0x11	; 17
 ede:	07 c0       	rjmp	.+14     	; 0xeee <__udivmodhi4_ep>

00000ee0 <__udivmodhi4_loop>:
 ee0:	aa 1f       	adc	r26, r26
 ee2:	bb 1f       	adc	r27, r27
 ee4:	a6 17       	cp	r26, r22
 ee6:	b7 07       	cpc	r27, r23
 ee8:	10 f0       	brcs	.+4      	; 0xeee <__udivmodhi4_ep>
 eea:	a6 1b       	sub	r26, r22
 eec:	b7 0b       	sbc	r27, r23

00000eee <__udivmodhi4_ep>:
 eee:	88 1f       	adc	r24, r24
 ef0:	99 1f       	adc	r25, r25
 ef2:	5a 95       	dec	r21
 ef4:	a9 f7       	brne	.-22     	; 0xee0 <__udivmodhi4_loop>
 ef6:	80 95       	com	r24
 ef8:	90 95       	com	r25
 efa:	bc 01       	movw	r22, r24
 efc:	cd 01       	movw	r24, r26
 efe:	08 95       	ret

00000f00 <_exit>:
 f00:	f8 94       	cli

00000f02 <__stop_program>:
 f02:	ff cf       	rjmp	.-2      	; 0xf02 <__stop_program>
