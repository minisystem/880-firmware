
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  000011e4  00001278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  00800252  00800252  000013ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044c0  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001244  00000000  00000000  00005cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000134c  00000000  00000000  00006f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  0000827c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f94  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dc2  00000000  00000000  00009ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000b962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	3c 06       	cpc	r3, r28
      b6:	3a 06       	cpc	r3, r26
      b8:	3c 06       	cpc	r3, r28
      ba:	3e 06       	cpc	r3, r30
      bc:	3e 06       	cpc	r3, r30
      be:	44 06       	cpc	r4, r20
      c0:	3e 06       	cpc	r3, r30
      c2:	44 06       	cpc	r4, r20
      c4:	44 06       	cpc	r4, r20
      c6:	44 06       	cpc	r4, r20
      c8:	44 06       	cpc	r4, r20
      ca:	44 06       	cpc	r4, r20
      cc:	3e 06       	cpc	r3, r30
      ce:	44 06       	cpc	r4, r20
      d0:	44 06       	cpc	r4, r20

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e4 ee       	ldi	r30, 0xE4	; 228
      e6:	f1 e1       	ldi	r31, 0x11	; 17
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a2 35       	cpi	r26, 0x52	; 82
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	a2 e5       	ldi	r26, 0x52	; 82
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a2 3d       	cpi	r26, 0xD2	; 210
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 8b 03 	call	0x716	; 0x716 <main>
     108:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     136:	8d e0       	ldi	r24, 0x0D	; 13
     138:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	80 93 6f 00 	sts	0x006F, r24
     142:	08 95       	ret

00000144 <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     144:	90 93 89 00 	sts	0x0089, r25
     148:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     14c:	20 91 84 00 	lds	r18, 0x0084
     150:	30 91 85 00 	lds	r19, 0x0085
     154:	82 17       	cp	r24, r18
     156:	93 07       	cpc	r25, r19
     158:	28 f4       	brcc	.+10     	; 0x164 <update_clock_rate+0x20>
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	90 93 85 00 	sts	0x0085, r25
     160:	80 93 84 00 	sts	0x0084, r24
     164:	08 95       	ret

00000166 <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, HC_LED},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, CL_LED},
	{15,7, 1<<MA_TRIG,255, 0, MA_LED}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	16 2f       	mov	r17, r22
	
		while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
     16e:	90 91 60 01 	lds	r25, 0x0160
     172:	99 23       	and	r25, r25
     174:	e1 f3       	breq	.-8      	; 0x16e <trigger_drum+0x8>
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     176:	80 93 52 02 	sts	0x0252, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     17a:	c8 2f       	mov	r28, r24
     17c:	d0 e0       	ldi	r29, 0x00	; 0
     17e:	fe 01       	movw	r30, r28
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	ec 0f       	add	r30, r28
     186:	fd 1f       	adc	r31, r29
     188:	ee 0f       	add	r30, r30
     18a:	ff 1f       	adc	r31, r31
     18c:	e0 50       	subi	r30, 0x00	; 0
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	a0 81       	ld	r26, Z
     192:	9a 2f       	mov	r25, r26
     194:	99 1f       	adc	r25, r25
     196:	99 27       	eor	r25, r25
     198:	99 1f       	adc	r25, r25
     19a:	a1 81       	ldd	r26, Z+1	; 0x01
     19c:	a7 70       	andi	r26, 0x07	; 7
     19e:	aa 0f       	add	r26, r26
     1a0:	a9 2b       	or	r26, r25
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	a2 5a       	subi	r26, 0xA2	; 162
     1a6:	bd 4f       	sbci	r27, 0xFD	; 253
     1a8:	9c 91       	ld	r25, X
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	89 2b       	or	r24, r25
     1ae:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1b0:	83 81       	ldd	r24, Z+3	; 0x03
     1b2:	8f 3f       	cpi	r24, 0xFF	; 255
     1b4:	09 f1       	breq	.+66     	; 0x1f8 <trigger_drum+0x92>
				
			toggle(ACCENT_1_LED);	
     1b6:	84 e1       	ldi	r24, 0x14	; 20
     1b8:	0e 94 c8 01 	call	0x390	; 0x390 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1bc:	ae e5       	ldi	r26, 0x5E	; 94
     1be:	b2 e0       	ldi	r27, 0x02	; 2
     1c0:	13 96       	adiw	r26, 0x03	; 3
     1c2:	2c 91       	ld	r18, X
     1c4:	13 97       	sbiw	r26, 0x03	; 3
     1c6:	ae 01       	movw	r20, r28
     1c8:	44 0f       	add	r20, r20
     1ca:	55 1f       	adc	r21, r21
     1cc:	fa 01       	movw	r30, r20
     1ce:	ec 0f       	add	r30, r28
     1d0:	fd 1f       	adc	r31, r29
     1d2:	ee 0f       	add	r30, r30
     1d4:	ff 1f       	adc	r31, r31
     1d6:	ec 5f       	subi	r30, 0xFC	; 252
     1d8:	fe 4f       	sbci	r31, 0xFE	; 254
     1da:	90 81       	ld	r25, Z
     1dc:	91 70       	andi	r25, 0x01	; 1
     1de:	91 95       	neg	r25
     1e0:	92 27       	eor	r25, r18
     1e2:	c4 0f       	add	r28, r20
     1e4:	d5 1f       	adc	r29, r21
     1e6:	cc 0f       	add	r28, r28
     1e8:	dd 1f       	adc	r29, r29
     1ea:	c0 50       	subi	r28, 0x00	; 0
     1ec:	df 4f       	sbci	r29, 0xFF	; 255
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	98 23       	and	r25, r24
     1f2:	29 27       	eor	r18, r25
     1f4:	13 96       	adiw	r26, 0x03	; 3
     1f6:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     1f8:	11 34       	cpi	r17, 0x41	; 65
     1fa:	28 f0       	brcs	.+10     	; 0x206 <trigger_drum+0xa0>
			spi_data[8] |= (1<<ACCENT);
     1fc:	ee e5       	ldi	r30, 0x5E	; 94
     1fe:	f2 e0       	ldi	r31, 0x02	; 2
     200:	80 85       	ldd	r24, Z+8	; 0x08
     202:	81 60       	ori	r24, 0x01	; 1
     204:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     206:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     208:	0e 94 2e 04 	call	0x85c	; 0x85c <update_spi>
			
		PORTD &= ~(1<<TRIG);
     20c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     20e:	ee e6       	ldi	r30, 0x6E	; 110
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     218:	85 b5       	in	r24, 0x25	; 37
     21a:	83 60       	ori	r24, 0x03	; 3
     21c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     21e:	10 92 60 01 	sts	0x0160, r1
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	08 95       	ret

0000022a <__vector_14>:
#include "clock.h"
#include "sequencer.h"



ISR (TIMER0_COMPA_vect) {
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
     236:	ef 93       	push	r30
     238:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     23a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     23c:	ee e6       	ldi	r30, 0x6E	; 110
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	8d 7f       	andi	r24, 0xFD	; 253
     244:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     246:	ee ea       	ldi	r30, 0xAE	; 174
     248:	f3 e0       	ldi	r31, 0x03	; 3
     24a:	80 81       	ld	r24, Z
     24c:	80 62       	ori	r24, 0x20	; 32
     24e:	80 83       	st	Z, r24
	
}
     250:	ff 91       	pop	r31
     252:	ef 91       	pop	r30
     254:	8f 91       	pop	r24
     256:	0f 90       	pop	r0
     258:	0f be       	out	0x3f, r0	; 63
     25a:	0f 90       	pop	r0
     25c:	1f 90       	pop	r1
     25e:	18 95       	reti

00000260 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	2f 93       	push	r18
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	
	
	if (sequencer.START) { 
     278:	80 91 6c 03 	lds	r24, 0x036C
     27c:	81 ff       	sbrs	r24, 1
     27e:	15 c0       	rjmp	.+42     	; 0x2aa <__vector_11+0x4a>
		
		if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of
     280:	e9 e6       	ldi	r30, 0x69	; 105
     282:	f2 e0       	ldi	r31, 0x02	; 2
     284:	80 81       	ld	r24, Z
     286:	86 95       	lsr	r24
     288:	91 81       	ldd	r25, Z+1	; 0x01
     28a:	98 13       	cpse	r25, r24
     28c:	1b c0       	rjmp	.+54     	; 0x2c4 <__vector_11+0x64>
			
			spi_data[1] = sequencer.step_led_mask[sequencer.current_inst];
     28e:	e0 91 b1 03 	lds	r30, 0x03B1
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	ee 0f       	add	r30, r30
     296:	ff 1f       	adc	r31, r31
     298:	ee 54       	subi	r30, 0x4E	; 78
     29a:	fc 4f       	sbci	r31, 0xFC	; 252
     29c:	90 81       	ld	r25, Z
     29e:	81 81       	ldd	r24, Z+1	; 0x01
     2a0:	ee e5       	ldi	r30, 0x5E	; 94
     2a2:	f2 e0       	ldi	r31, 0x02	; 2
     2a4:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.step_led_mask[sequencer.current_inst] >> 8;
     2a6:	80 83       	st	Z, r24
     2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <__vector_11+0x64>
		}

	} else if ((internal_clock.beat_counter == 2) && (internal_clock.divider >> 1)) { //1/4 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     2aa:	80 91 6b 02 	lds	r24, 0x026B
     2ae:	83 70       	andi	r24, 0x03	; 3
     2b0:	82 30       	cpi	r24, 0x02	; 2
     2b2:	41 f4       	brne	.+16     	; 0x2c4 <__vector_11+0x64>
     2b4:	80 91 69 02 	lds	r24, 0x0269
     2b8:	86 95       	lsr	r24
     2ba:	21 f0       	breq	.+8      	; 0x2c4 <__vector_11+0x64>
			spi_data[1] = 0;
     2bc:	ee e5       	ldi	r30, 0x5E	; 94
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     2c2:	10 82       	st	Z, r1
		
	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     2c4:	e9 e6       	ldi	r30, 0x69	; 105
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	81 81       	ldd	r24, Z+1	; 0x01
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	81 83       	std	Z+1, r24	; 0x01
     2ce:	90 81       	ld	r25, Z
     2d0:	89 13       	cpse	r24, r25
     2d2:	15 c0       	rjmp	.+42     	; 0x2fe <__vector_11+0x9e>
	{
		sequencer.next_step_flag = 1;
     2d4:	ee ea       	ldi	r30, 0xAE	; 174
     2d6:	f3 e0       	ldi	r31, 0x03	; 3
     2d8:	80 81       	ld	r24, Z
     2da:	80 61       	ori	r24, 0x10	; 16
		internal_clock.beat_counter++;
     2dc:	ab e6       	ldi	r26, 0x6B	; 107
     2de:	b2 e0       	ldi	r27, 0x02	; 2
     2e0:	9c 91       	ld	r25, X
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	29 0f       	add	r18, r25
     2e6:	23 70       	andi	r18, 0x03	; 3
     2e8:	9c 7f       	andi	r25, 0xFC	; 252
     2ea:	92 2b       	or	r25, r18
     2ec:	9c 93       	st	X, r25
		internal_clock.ppqn_counter = 0;
     2ee:	10 92 6a 02 	sts	0x026A, r1
		sequencer.current_step++; //hopefully this will overflow from 15 to 0 - it does!
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	98 0f       	add	r25, r24
     2f6:	9f 70       	andi	r25, 0x0F	; 15
     2f8:	80 7f       	andi	r24, 0xF0	; 240
     2fa:	89 2b       	or	r24, r25
     2fc:	80 83       	st	Z, r24
	}
	
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	2f 91       	pop	r18
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	9c 01       	movw	r18, r24
     31e:	22 0f       	add	r18, r18
     320:	33 1f       	adc	r19, r19
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	dc 01       	movw	r26, r24
     328:	ae 59       	subi	r26, 0x9E	; 158
     32a:	be 4f       	sbci	r27, 0xFE	; 254
     32c:	2c 91       	ld	r18, X
     32e:	e2 2f       	mov	r30, r18
     330:	ef 70       	andi	r30, 0x0F	; 15
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e2 5a       	subi	r30, 0xA2	; 162
     336:	fd 4f       	sbci	r31, 0xFD	; 253
     338:	ec 01       	movw	r28, r24
     33a:	cf 59       	subi	r28, 0x9F	; 159
     33c:	de 4f       	sbci	r29, 0xFE	; 254
     33e:	30 81       	ld	r19, Z
     340:	88 81       	ld	r24, Y
     342:	83 2b       	or	r24, r19
     344:	80 83       	st	Z, r24
	led[led_index].state = 1;
     346:	82 2f       	mov	r24, r18
     348:	80 61       	ori	r24, 0x10	; 16
     34a:	8c 93       	st	X, r24

}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <turn_off>:

void turn_off(uint8_t led_index) {
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9c 01       	movw	r18, r24
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	dc 01       	movw	r26, r24
     364:	ae 59       	subi	r26, 0x9E	; 158
     366:	be 4f       	sbci	r27, 0xFE	; 254
     368:	2c 91       	ld	r18, X
     36a:	e2 2f       	mov	r30, r18
     36c:	ef 70       	andi	r30, 0x0F	; 15
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	e2 5a       	subi	r30, 0xA2	; 162
     372:	fd 4f       	sbci	r31, 0xFD	; 253
     374:	ec 01       	movw	r28, r24
     376:	cf 59       	subi	r28, 0x9F	; 159
     378:	de 4f       	sbci	r29, 0xFE	; 254
     37a:	88 81       	ld	r24, Y
     37c:	80 95       	com	r24
     37e:	90 81       	ld	r25, Z
     380:	89 23       	and	r24, r25
     382:	80 83       	st	Z, r24
	led[led_index].state = 0;
     384:	82 2f       	mov	r24, r18
     386:	8f 7e       	andi	r24, 0xEF	; 239
     388:	8c 93       	st	X, r24
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     390:	28 2f       	mov	r18, r24
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	f9 01       	movw	r30, r18
     396:	ee 0f       	add	r30, r30
     398:	ff 1f       	adc	r31, r31
     39a:	2e 0f       	add	r18, r30
     39c:	3f 1f       	adc	r19, r31
     39e:	f9 01       	movw	r30, r18
     3a0:	ee 59       	subi	r30, 0x9E	; 158
     3a2:	fe 4f       	sbci	r31, 0xFE	; 254
     3a4:	90 81       	ld	r25, Z
     3a6:	94 ff       	sbrs	r25, 4
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <toggle+0x20>
		
		turn_off(led_index);
     3aa:	0e 94 a9 01 	call	0x352	; 0x352 <turn_off>
     3ae:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     3b0:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
     3b4:	08 95       	ret

000003b6 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) {

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     3b6:	ee e5       	ldi	r30, 0x5E	; 94
     3b8:	f2 e0       	ldi	r31, 0x02	; 2
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     3c0:	87 81       	ldd	r24, Z+7	; 0x07
     3c2:	80 72       	andi	r24, 0x20	; 32
     3c4:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     3c6:	83 81       	ldd	r24, Z+3	; 0x03
     3c8:	8f 70       	andi	r24, 0x0F	; 15
     3ca:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     3cc:	86 81       	ldd	r24, Z+6	; 0x06
     3ce:	8f 7c       	andi	r24, 0xCF	; 207
     3d0:	86 83       	std	Z+6, r24	; 0x06
     3d2:	08 95       	ret

000003d4 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     3d4:	08 95       	ret

000003d6 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     3d6:	08 95       	ret

000003d8 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     3d8:	40 31       	cpi	r20, 0x10	; 16
     3da:	20 f4       	brcc	.+8      	; 0x3e4 <note_on_event+0xc>
     3dc:	62 2f       	mov	r22, r18
     3de:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     3e0:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
     3e4:	08 95       	ret

000003e6 <update_step_board>:
	
	internal_clock.previous_rate = internal_clock.rate;	
	
}

void update_step_board() {
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     3f6:	80 91 6c 03 	lds	r24, 0x036C
     3fa:	81 ff       	sbrs	r24, 1
     3fc:	50 c0       	rjmp	.+160    	; 0x49e <update_step_board+0xb8>
     3fe:	80 91 6b 03 	lds	r24, 0x036B
     402:	81 50       	subi	r24, 0x01	; 1
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	08 f0       	brcs	.+2      	; 0x40a <update_step_board+0x24>
     408:	4a c0       	rjmp	.+148    	; 0x49e <update_step_board+0xb8>
     40a:	0d e6       	ldi	r16, 0x6D	; 109
     40c:	13 e0       	ldi	r17, 0x03	; 3
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d0 e0       	ldi	r29, 0x00	; 0
				
				if (button[i].state) {
					
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now
     412:	0f 2e       	mov	r0, r31
     414:	f1 eb       	ldi	r31, 0xB1	; 177
     416:	ef 2e       	mov	r14, r31
     418:	f3 e0       	ldi	r31, 0x03	; 3
     41a:	ff 2e       	mov	r15, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	cc 24       	eor	r12, r12
     420:	c3 94       	inc	r12
     422:	d1 2c       	mov	r13, r1
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
				if (button[i].state) {
     424:	fe 01       	movw	r30, r28
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	e4 5f       	subi	r30, 0xF4	; 244
     42c:	fd 4f       	sbci	r31, 0xFD	; 253
     42e:	80 81       	ld	r24, Z
     430:	86 ff       	sbrs	r24, 6
     432:	2f c0       	rjmp	.+94     	; 0x492 <update_step_board+0xac>
					
					toggle(i);
     434:	8c 2f       	mov	r24, r28
     436:	0e 94 c8 01 	call	0x390	; 0x390 <toggle>
					button[i].state ^= button[i].state;
     43a:	fe 01       	movw	r30, r28
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	e4 5f       	subi	r30, 0xF4	; 244
     442:	fd 4f       	sbci	r31, 0xFD	; 253
     444:	80 81       	ld	r24, Z
     446:	8f 7b       	andi	r24, 0xBF	; 191
     448:	80 83       	st	Z, r24
					sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now
     44a:	d7 01       	movw	r26, r14
     44c:	8c 91       	ld	r24, X
     44e:	e8 2f       	mov	r30, r24
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	96 01       	movw	r18, r12
     454:	02 c0       	rjmp	.+4      	; 0x45a <update_step_board+0x74>
     456:	22 0f       	add	r18, r18
     458:	33 1f       	adc	r19, r19
     45a:	8a 95       	dec	r24
     45c:	e2 f7       	brpl	.-8      	; 0x456 <update_step_board+0x70>
     45e:	c9 01       	movw	r24, r18
     460:	d8 01       	movw	r26, r16
     462:	2d 91       	ld	r18, X+
     464:	3c 91       	ld	r19, X
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	82 27       	eor	r24, r18
     46a:	93 27       	eor	r25, r19
     46c:	8d 93       	st	X+, r24
     46e:	9c 93       	st	X, r25
					
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	ee 54       	subi	r30, 0x4E	; 78
     476:	fc 4f       	sbci	r31, 0xFC	; 252
     478:	80 81       	ld	r24, Z
     47a:	91 81       	ldd	r25, Z+1	; 0x01
     47c:	96 01       	movw	r18, r12
     47e:	0c 2e       	mov	r0, r28
     480:	02 c0       	rjmp	.+4      	; 0x486 <update_step_board+0xa0>
     482:	22 0f       	add	r18, r18
     484:	33 1f       	adc	r19, r19
     486:	0a 94       	dec	r0
     488:	e2 f7       	brpl	.-8      	; 0x482 <update_step_board+0x9c>
     48a:	82 27       	eor	r24, r18
     48c:	93 27       	eor	r25, r19
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24

void update_step_board() {
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     492:	21 96       	adiw	r28, 0x01	; 1
     494:	0e 5f       	subi	r16, 0xFE	; 254
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	c0 31       	cpi	r28, 0x10	; 16
     49a:	d1 05       	cpc	r29, r1
     49c:	19 f6       	brne	.-122    	; 0x424 <update_step_board+0x3e>

	
	//update_spi();
	
	
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret

000004b0 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     4b0:	80 91 2e 02 	lds	r24, 0x022E
     4b4:	86 ff       	sbrs	r24, 6
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     4b8:	ee e2       	ldi	r30, 0x2E	; 46
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	8f 7b       	andi	r24, 0xBF	; 191
     4be:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     4c8:	80 91 30 02 	lds	r24, 0x0230
     4cc:	86 ff       	sbrs	r24, 6
     4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     4d0:	e0 e3       	ldi	r30, 0x30	; 48
     4d2:	f2 e0       	ldi	r31, 0x02	; 2
     4d4:	8f 7b       	andi	r24, 0xBF	; 191
     4d6:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     4e0:	80 91 32 02 	lds	r24, 0x0232
     4e4:	86 ff       	sbrs	r24, 6
     4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     4e8:	e2 e3       	ldi	r30, 0x32	; 50
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	8f 7b       	andi	r24, 0xBF	; 191
     4ee:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     4f8:	80 91 34 02 	lds	r24, 0x0234
     4fc:	86 ff       	sbrs	r24, 6
     4fe:	08 c0       	rjmp	.+16     	; 0x510 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     500:	e4 e3       	ldi	r30, 0x34	; 52
     502:	f2 e0       	ldi	r31, 0x02	; 2
     504:	8f 7b       	andi	r24, 0xBF	; 191
     506:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     510:	80 91 36 02 	lds	r24, 0x0236
     514:	86 ff       	sbrs	r24, 6
     516:	08 c0       	rjmp	.+16     	; 0x528 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     518:	e6 e3       	ldi	r30, 0x36	; 54
     51a:	f2 e0       	ldi	r31, 0x02	; 2
     51c:	8f 7b       	andi	r24, 0xBF	; 191
     51e:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     528:	80 91 38 02 	lds	r24, 0x0238
     52c:	86 ff       	sbrs	r24, 6
     52e:	08 c0       	rjmp	.+16     	; 0x540 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     530:	e8 e3       	ldi	r30, 0x38	; 56
     532:	f2 e0       	ldi	r31, 0x02	; 2
     534:	8f 7b       	andi	r24, 0xBF	; 191
     536:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	85 e0       	ldi	r24, 0x05	; 5
     53c:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     540:	80 91 3a 02 	lds	r24, 0x023A
     544:	86 ff       	sbrs	r24, 6
     546:	08 c0       	rjmp	.+16     	; 0x558 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     548:	ea e3       	ldi	r30, 0x3A	; 58
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	8f 7b       	andi	r24, 0xBF	; 191
     54e:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     558:	80 91 3c 02 	lds	r24, 0x023C
     55c:	86 ff       	sbrs	r24, 6
     55e:	08 c0       	rjmp	.+16     	; 0x570 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     560:	ec e3       	ldi	r30, 0x3C	; 60
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	8f 7b       	andi	r24, 0xBF	; 191
     566:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	87 e0       	ldi	r24, 0x07	; 7
     56c:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     570:	80 91 3e 02 	lds	r24, 0x023E
     574:	86 ff       	sbrs	r24, 6
     576:	08 c0       	rjmp	.+16     	; 0x588 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     578:	ee e3       	ldi	r30, 0x3E	; 62
     57a:	f2 e0       	ldi	r31, 0x02	; 2
     57c:	8f 7b       	andi	r24, 0xBF	; 191
     57e:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	88 e0       	ldi	r24, 0x08	; 8
     584:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     588:	80 91 40 02 	lds	r24, 0x0240
     58c:	86 ff       	sbrs	r24, 6
     58e:	08 c0       	rjmp	.+16     	; 0x5a0 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     590:	e0 e4       	ldi	r30, 0x40	; 64
     592:	f2 e0       	ldi	r31, 0x02	; 2
     594:	8f 7b       	andi	r24, 0xBF	; 191
     596:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	89 e0       	ldi	r24, 0x09	; 9
     59c:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     5a0:	80 91 42 02 	lds	r24, 0x0242
     5a4:	86 ff       	sbrs	r24, 6
     5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     5a8:	e2 e4       	ldi	r30, 0x42	; 66
     5aa:	f2 e0       	ldi	r31, 0x02	; 2
     5ac:	8f 7b       	andi	r24, 0xBF	; 191
     5ae:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	8a e0       	ldi	r24, 0x0A	; 10
     5b4:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
     5b8:	08 95       	ret

000005ba <refresh>:
}




void refresh(void) {
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
	
	read_switches();
     5be:	0e 94 52 04 	call	0x8a4	; 0x8a4 <read_switches>
	check_start_stop_tap();
     5c2:	0e 94 c2 04 	call	0x984	; 0x984 <check_start_stop_tap>
	
	parse_switch_data();
     5c6:	0e 94 9b 04 	call	0x936	; 0x936 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     5ca:	80 91 6b 03 	lds	r24, 0x036B
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <refresh+0x1c>
     5d2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <live_hits>
	update_mode();
     5d6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <update_mode>
	check_inst_switches();
     5da:	0e 94 df 04 	call	0x9be	; 0x9be <check_inst_switches>
	update_step_board();
     5de:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <update_step_board>
	if (sequencer.next_step_flag) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     5e2:	80 91 ae 03 	lds	r24, 0x03AE
     5e6:	84 ff       	sbrs	r24, 4
     5e8:	48 c0       	rjmp	.+144    	; 0x67a <refresh+0xc0>

		sequencer.next_step_flag = 0;
     5ea:	ee ea       	ldi	r30, 0xAE	; 174
     5ec:	f3 e0       	ldi	r31, 0x03	; 3
     5ee:	8f 7e       	andi	r24, 0xEF	; 239
     5f0:	80 83       	st	Z, r24
		
		if (sequencer.START) {
     5f2:	80 91 6c 03 	lds	r24, 0x036C
     5f6:	81 ff       	sbrs	r24, 1
     5f8:	39 c0       	rjmp	.+114    	; 0x66c <refresh+0xb2>
			//while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initating next one
			PORTD |= (1<<TRIG);
     5fa:	5d 9a       	sbi	0x0b, 5	; 11
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
     5fc:	df 01       	movw	r26, r30
     5fe:	60 81       	ld	r22, Z
     600:	86 2f       	mov	r24, r22
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	48 2f       	mov	r20, r24
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <refresh+0x58>
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	8a 95       	dec	r24
     614:	e2 f7       	brpl	.-8      	; 0x60e <refresh+0x54>
     616:	e0 91 b1 03 	lds	r30, 0x03B1
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	ee 54       	subi	r30, 0x4E	; 78
     622:	fc 4f       	sbci	r31, 0xFC	; 252
     624:	90 81       	ld	r25, Z
     626:	81 81       	ldd	r24, Z+1	; 0x01
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     628:	ce e5       	ldi	r28, 0x5E	; 94
     62a:	d2 e0       	ldi	r29, 0x02	; 2
     62c:	79 2f       	mov	r23, r25
     62e:	72 23       	and	r23, r18
     630:	70 95       	com	r23
		sequencer.next_step_flag = 0;
		
		if (sequencer.START) {
			//while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
     632:	92 2b       	or	r25, r18
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     634:	97 23       	and	r25, r23
     636:	99 83       	std	Y+1, r25	; 0x01
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     638:	98 2f       	mov	r25, r24
     63a:	93 23       	and	r25, r19
     63c:	90 95       	com	r25
		if (sequencer.START) {
			//while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
     63e:	83 2b       	or	r24, r19
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     640:	89 23       	and	r24, r25
     642:	88 83       	st	Y, r24
			//trigger_step(); 
			spi_data[8] = sequencer.current_pattern.first_part[sequencer.current_step] << 1;
     644:	44 0f       	add	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	fa 01       	movw	r30, r20
     64a:	e3 59       	subi	r30, 0x93	; 147
     64c:	fc 4f       	sbci	r31, 0xFC	; 252
     64e:	80 81       	ld	r24, Z
     650:	88 0f       	add	r24, r24
     652:	88 87       	std	Y+8, r24	; 0x08
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     654:	ee e6       	ldi	r30, 0x6E	; 110
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	82 60       	ori	r24, 0x02	; 2
     65c:	80 83       	st	Z, r24
			TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     65e:	85 b5       	in	r24, 0x25	; 37
     660:	83 60       	ori	r24, 0x03	; 3
     662:	85 bd       	out	0x25, r24	; 37
			sequencer.trigger_finished = 0;
     664:	86 2f       	mov	r24, r22
     666:	8f 7d       	andi	r24, 0xDF	; 223
     668:	8c 93       	st	X, r24
     66a:	07 c0       	rjmp	.+14     	; 0x67a <refresh+0xc0>
			
		} else {
			
			spi_data[1] = 0;
     66c:	ee e5       	ldi	r30, 0x5E	; 94
     66e:	f2 e0       	ldi	r31, 0x02	; 2
     670:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     672:	10 82       	st	Z, r1
			turn_on(STEP_1_LED);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
			
		}		
	}
	if (sequencer.trigger_finished) {
     67a:	80 91 ae 03 	lds	r24, 0x03AE
     67e:	85 ff       	sbrs	r24, 5
     680:	06 c0       	rjmp	.+12     	; 0x68e <refresh+0xd4>
		
		sequencer.trigger_finished = 0;
     682:	ee ea       	ldi	r30, 0xAE	; 174
     684:	f3 e0       	ldi	r31, 0x03	; 3
     686:	8f 7d       	andi	r24, 0xDF	; 223
     688:	80 83       	st	Z, r24
		spi_data[8] = 0;
     68a:	10 92 66 02 	sts	0x0266, r1
	}
	update_spi();
     68e:	0e 94 2e 04 	call	0x85c	; 0x85c <update_spi>
	PORTD &= ~(1<<TRIG);
     692:	5d 98       	cbi	0x0b, 5	; 11
	//if (trigger_finished && sequencer.SHIFT) update_tempo(); //turning off SPI during pot read creates problem for trigger interrupt
	
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     69a:	8f e1       	ldi	r24, 0x1F	; 31
     69c:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     6a0:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     6a4:	88 e9       	ldi	r24, 0x98	; 152
     6a6:	80 93 c1 00 	sts	0x00C1, r24
     6aa:	08 95       	ret

000006ac <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     6ac:	1f 92       	push	r1
     6ae:	0f 92       	push	r0
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	0f 92       	push	r0
     6b4:	11 24       	eor	r1, r1
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	6f 93       	push	r22
     6c0:	7f 93       	push	r23
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	1f 92       	push	r1
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     6d8:	80 91 c6 00 	lds	r24, 0x00C6
     6dc:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     6de:	ae 01       	movw	r20, r28
     6e0:	4f 5f       	subi	r20, 0xFF	; 255
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	8e e7       	ldi	r24, 0x7E	; 126
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	0e 94 83 06 	call	0xd06	; 0xd06 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	ff 91       	pop	r31
     6f6:	ef 91       	pop	r30
     6f8:	bf 91       	pop	r27
     6fa:	af 91       	pop	r26
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	7f 91       	pop	r23
     702:	6f 91       	pop	r22
     704:	5f 91       	pop	r21
     706:	4f 91       	pop	r20
     708:	3f 91       	pop	r19
     70a:	2f 91       	pop	r18
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

00000716 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     716:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     718:	8d b1       	in	r24, 0x0d	; 13
     71a:	8c 60       	ori	r24, 0x0C	; 12
     71c:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     71e:	87 b1       	in	r24, 0x07	; 7
     720:	8e 60       	ori	r24, 0x0E	; 14
     722:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     724:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     726:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     728:	88 b1       	in	r24, 0x08	; 8
     72a:	81 7f       	andi	r24, 0xF1	; 241
     72c:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     72e:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     730:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     732:	80 e5       	ldi	r24, 0x50	; 80
     734:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     738:	ed ea       	ldi	r30, 0xAD	; 173
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     748:	8d e1       	ldi	r24, 0x1D	; 29
     74a:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
	turn_on(FILL_MANUAL);
     74e:	82 e2       	ldi	r24, 0x22	; 34
     750:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
	
	update_spi();
     754:	0e 94 2e 04 	call	0x85c	; 0x85c <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     758:	84 b5       	in	r24, 0x24	; 36
     75a:	82 60       	ori	r24, 0x02	; 2
     75c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     75e:	81 ee       	ldi	r24, 0xE1	; 225
     760:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     762:	8e e7       	ldi	r24, 0x7E	; 126
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	0e 94 52 06 	call	0xca4	; 0xca4 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     76a:	6c ee       	ldi	r22, 0xEC	; 236
     76c:	71 e0       	ldi	r23, 0x01	; 1
     76e:	8e e7       	ldi	r24, 0x7E	; 126
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0e 94 46 06 	call	0xc8c	; 0xc8c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     776:	6a ee       	ldi	r22, 0xEA	; 234
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	8e e7       	ldi	r24, 0x7E	; 126
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 4a 06 	call	0xc94	; 0xc94 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     782:	6b ee       	ldi	r22, 0xEB	; 235
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	8e e7       	ldi	r24, 0x7E	; 126
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     78e:	0e 94 4d 03 	call	0x69a	; 0x69a <setup_midi_usart>
	
	setup_internal_clock();
     792:	0e 94 9b 00 	call	0x136	; 0x136 <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     796:	e9 e6       	ldi	r30, 0x69	; 105
     798:	f2 e0       	ldi	r31, 0x02	; 2
     79a:	86 e0       	ldi	r24, 0x06	; 6
     79c:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	81 83       	std	Z+1, r24	; 0x01
	internal_clock.rate = 400; //use fixed rate to get clock working
     7a2:	80 e9       	ldi	r24, 0x90	; 144
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	94 83       	std	Z+4, r25	; 0x04
     7a8:	83 83       	std	Z+3, r24	; 0x03
	update_clock_rate(internal_clock.rate);
     7aa:	0e 94 a2 00 	call	0x144	; 0x144 <update_clock_rate>
	setup_adc();
     7ae:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     7b2:	ee ea       	ldi	r30, 0xAE	; 174
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	80 81       	ld	r24, Z
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	80 83       	st	Z, r24
	sequencer.START = 0;
     7bc:	ec e6       	ldi	r30, 0x6C	; 108
     7be:	f3 e0       	ldi	r31, 0x03	; 3
     7c0:	80 81       	ld	r24, Z
     7c2:	8d 7f       	andi	r24, 0xFD	; 253
     7c4:	80 83       	st	Z, r24
	//update_tempo();
	sei(); //enable global interrupts	
     7c6:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     7c8:	8e e7       	ldi	r24, 0x7E	; 126
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <midi_device_process>
	
	refresh();		
     7d0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <refresh>

	
	}
     7d4:	f9 cf       	rjmp	.-14     	; 0x7c8 <main+0xb2>

000007d6 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     7d6:	80 91 4c 02 	lds	r24, 0x024C
     7da:	86 ff       	sbrs	r24, 6
     7dc:	34 c0       	rjmp	.+104    	; 0x846 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     7de:	ec e4       	ldi	r30, 0x4C	; 76
     7e0:	f2 e0       	ldi	r31, 0x02	; 2
     7e2:	8f 7b       	andi	r24, 0xBF	; 191
     7e4:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     7e6:	80 91 6c 03 	lds	r24, 0x036C
     7ea:	80 ff       	sbrs	r24, 0
     7ec:	0c c0       	rjmp	.+24     	; 0x806 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     7ee:	80 91 53 02 	lds	r24, 0x0253
     7f2:	88 23       	and	r24, r24
     7f4:	21 f0       	breq	.+8      	; 0x7fe <update_mode+0x28>
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	80 93 53 02 	sts	0x0253, r24
     7fc:	0e c0       	rjmp	.+28     	; 0x81a <update_mode+0x44>
     7fe:	85 e0       	ldi	r24, 0x05	; 5
     800:	80 93 53 02 	sts	0x0253, r24
     804:	0a c0       	rjmp	.+20     	; 0x81a <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     806:	80 91 53 02 	lds	r24, 0x0253
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	86 30       	cpi	r24, 0x06	; 6
     80e:	19 f0       	breq	.+6      	; 0x816 <update_mode+0x40>
     810:	80 93 53 02 	sts	0x0253, r24
     814:	02 c0       	rjmp	.+4      	; 0x81a <update_mode+0x44>
     816:	10 92 53 02 	sts	0x0253, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     81a:	20 91 53 02 	lds	r18, 0x0253
     81e:	e2 2f       	mov	r30, r18
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ea 5f       	subi	r30, 0xFA	; 250
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	80 81       	ld	r24, Z
     828:	80 93 6b 03 	sts	0x036B, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     82c:	ee e5       	ldi	r30, 0x5E	; 94
     82e:	f2 e0       	ldi	r31, 0x02	; 2
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <update_mode+0x64>
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	2a 95       	dec	r18
     83c:	e2 f7       	brpl	.-8      	; 0x836 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     83e:	94 81       	ldd	r25, Z+4	; 0x04
     840:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     842:	89 2b       	or	r24, r25
     844:	84 83       	std	Z+4, r24	; 0x04
     846:	08 95       	ret

00000848 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     848:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     84c:	ed ea       	ldi	r30, 0xAD	; 173
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	88 23       	and	r24, r24
     854:	ec f7       	brge	.-6      	; 0x850 <spi_shift_byte+0x8>
	return SPDR1;
     856:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     85a:	08 95       	ret

0000085c <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     860:	ce e5       	ldi	r28, 0x5E	; 94
     862:	d2 e0       	ldi	r29, 0x02	; 2
     864:	88 81       	ld	r24, Y
     866:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     87c:	8c 81       	ldd	r24, Y+4	; 0x04
     87e:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     882:	8d 81       	ldd	r24, Y+5	; 0x05
     884:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     888:	8e 81       	ldd	r24, Y+6	; 0x06
     88a:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     88e:	8f 81       	ldd	r24, Y+7	; 0x07
     890:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     894:	88 85       	ldd	r24, Y+8	; 0x08
     896:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     89a:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     89c:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <read_switches>:

void read_switches(void) { //reads switch data
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     8a8:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
     8b0:	c9 e5       	ldi	r28, 0x59	; 89
     8b2:	d2 e0       	ldi	r29, 0x02	; 2
     8b4:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
     8bc:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
     8c4:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
     8cc:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 24 04 	call	0x848	; 0x848 <spi_shift_byte>
     8d4:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     8d6:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     8d8:	98 81       	ld	r25, Y
     8da:	39 2f       	mov	r19, r25
     8dc:	36 95       	lsr	r19
     8de:	ec e6       	ldi	r30, 0x6C	; 108
     8e0:	f3 e0       	ldi	r31, 0x03	; 3
     8e2:	20 81       	ld	r18, Z
     8e4:	30 fb       	bst	r19, 0
     8e6:	20 f9       	bld	r18, 0
     8e8:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     8ea:	e4 e5       	ldi	r30, 0x54	; 84
     8ec:	f2 e0       	ldi	r31, 0x02	; 2
     8ee:	20 81       	ld	r18, Z
     8f0:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     8f2:	29 27       	eor	r18, r25
     8f4:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     8f6:	92 23       	and	r25, r18
     8f8:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     8fa:	21 81       	ldd	r18, Z+1	; 0x01
     8fc:	99 81       	ldd	r25, Y+1	; 0x01
     8fe:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     900:	29 27       	eor	r18, r25
     902:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     904:	92 23       	and	r25, r18
     906:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     908:	22 81       	ldd	r18, Z+2	; 0x02
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     90e:	29 27       	eor	r18, r25
     910:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     912:	92 23       	and	r25, r18
     914:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     916:	23 81       	ldd	r18, Z+3	; 0x03
     918:	9b 81       	ldd	r25, Y+3	; 0x03
     91a:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     91c:	29 27       	eor	r18, r25
     91e:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     920:	92 23       	and	r25, r18
     922:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     924:	94 81       	ldd	r25, Z+4	; 0x04
     926:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     928:	98 27       	eor	r25, r24
     92a:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     92c:	89 23       	and	r24, r25
     92e:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     93a:	da 01       	movw	r26, r20
     93c:	aa 0f       	add	r26, r26
     93e:	bb 1f       	adc	r27, r27
     940:	a4 5f       	subi	r26, 0xF4	; 244
     942:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     944:	8c 91       	ld	r24, X
     946:	e8 2f       	mov	r30, r24
     948:	e6 95       	lsr	r30
     94a:	e6 95       	lsr	r30
     94c:	e6 95       	lsr	r30
     94e:	e7 70       	andi	r30, 0x07	; 7
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	e7 5a       	subi	r30, 0xA7	; 167
     954:	fd 4f       	sbci	r31, 0xFD	; 253
     956:	20 81       	ld	r18, Z
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	98 2f       	mov	r25, r24
     95c:	97 70       	andi	r25, 0x07	; 7
     95e:	02 c0       	rjmp	.+4      	; 0x964 <parse_switch_data+0x2e>
     960:	35 95       	asr	r19
     962:	27 95       	ror	r18
     964:	9a 95       	dec	r25
     966:	e2 f7       	brpl	.-8      	; 0x960 <parse_switch_data+0x2a>
     968:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     96a:	86 fb       	bst	r24, 6
     96c:	99 27       	eor	r25, r25
     96e:	90 f9       	bld	r25, 0
     970:	29 27       	eor	r18, r25
     972:	20 fb       	bst	r18, 0
     974:	86 f9       	bld	r24, 6
     976:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     978:	4f 5f       	subi	r20, 0xFF	; 255
     97a:	5f 4f       	sbci	r21, 0xFF	; 255
     97c:	43 32       	cpi	r20, 0x23	; 35
     97e:	51 05       	cpc	r21, r1
     980:	e1 f6       	brne	.-72     	; 0x93a <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     982:	08 95       	ret

00000984 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     984:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     986:	80 91 67 02 	lds	r24, 0x0267
     98a:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     98c:	89 27       	eor	r24, r25
     98e:	80 93 67 02 	sts	0x0267, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     992:	89 23       	and	r24, r25
     994:	80 93 68 02 	sts	0x0268, r24
	
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     998:	86 95       	lsr	r24
     99a:	ec e6       	ldi	r30, 0x6C	; 108
     99c:	f3 e0       	ldi	r31, 0x03	; 3
     99e:	90 81       	ld	r25, Z
     9a0:	91 fb       	bst	r25, 1
     9a2:	22 27       	eor	r18, r18
     9a4:	20 f9       	bld	r18, 0
     9a6:	82 27       	eor	r24, r18
     9a8:	80 fb       	bst	r24, 0
     9aa:	91 f9       	bld	r25, 1
     9ac:	90 83       	st	Z, r25
	if (!sequencer.START) {
     9ae:	91 fd       	sbrc	r25, 1
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <check_start_stop_tap+0x38>
		sequencer.current_step = 0;
     9b2:	ee ea       	ldi	r30, 0xAE	; 174
     9b4:	f3 e0       	ldi	r31, 0x03	; 3
     9b6:	80 81       	ld	r24, Z
     9b8:	80 7f       	andi	r24, 0xF0	; 240
     9ba:	80 83       	st	Z, r24
     9bc:	08 95       	ret

000009be <check_inst_switches>:
	}
	
}
	
void check_inst_switches(void) {
     9be:	3f 92       	push	r3
     9c0:	4f 92       	push	r4
     9c2:	5f 92       	push	r5
     9c4:	6f 92       	push	r6
     9c6:	7f 92       	push	r7
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f5 e0       	ldi	r31, 0x05	; 5
     9e4:	ef 2e       	mov	r14, r31
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	ff 2e       	mov	r15, r31
     9ea:	f0 2d       	mov	r31, r0
     9ec:	0f 2e       	mov	r0, r31
     9ee:	fb e3       	ldi	r31, 0x3B	; 59
     9f0:	8f 2e       	mov	r8, r31
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	9f 2e       	mov	r9, r31
     9f6:	f0 2d       	mov	r31, r0
     9f8:	02 e1       	ldi	r16, 0x12	; 18
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	c1 e1       	ldi	r28, 0x11	; 17
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
     a00:	c1 2c       	mov	r12, r1
     a02:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     a04:	0f 2e       	mov	r0, r31
     a06:	f1 eb       	ldi	r31, 0xB1	; 177
     a08:	af 2e       	mov	r10, r31
     a0a:	f3 e0       	ldi	r31, 0x03	; 3
     a0c:	bf 2e       	mov	r11, r31
     a0e:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     a10:	0f 2e       	mov	r0, r31
     a12:	ff e5       	ldi	r31, 0x5F	; 95
     a14:	4f 2e       	mov	r4, r31
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	5f 2e       	mov	r5, r31
     a1a:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     a1c:	0f 2e       	mov	r0, r31
     a1e:	ff e0       	ldi	r31, 0x0F	; 15
     a20:	3f 2e       	mov	r3, r31
     a22:	f0 2d       	mov	r31, r0
     a24:	0c c0       	rjmp	.+24     	; 0xa3e <check_inst_switches+0x80>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	c8 1a       	sub	r12, r24
     a2a:	d8 0a       	sbc	r13, r24
     a2c:	21 96       	adiw	r28, 0x01	; 1
     a2e:	0f 5f       	subi	r16, 0xFF	; 255
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	a6 e0       	ldi	r26, 0x06	; 6
     a34:	ea 0e       	add	r14, r26
     a36:	f1 1c       	adc	r15, r1
     a38:	b6 e0       	ldi	r27, 0x06	; 6
     a3a:	8b 0e       	add	r8, r27
     a3c:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     a3e:	fe 01       	movw	r30, r28
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	e4 5f       	subi	r30, 0xF4	; 244
     a46:	fd 4f       	sbci	r31, 0xFD	; 253
     a48:	80 81       	ld	r24, Z
     a4a:	86 ff       	sbrs	r24, 6
     a4c:	37 c0       	rjmp	.+110    	; 0xabc <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
     a4e:	fe 01       	movw	r30, r28
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	e4 5f       	subi	r30, 0xF4	; 244
     a56:	fd 4f       	sbci	r31, 0xFD	; 253
     a58:	8f 7b       	andi	r24, 0xBF	; 191
     a5a:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
     a5c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <turn_off_all_inst_leds>
     a60:	f7 01       	movw	r30, r14
     a62:	d7 01       	movw	r26, r14
     a64:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
     a66:	8c 91       	ld	r24, X
     a68:	8f 3f       	cpi	r24, 0xFF	; 255
     a6a:	a9 f0       	breq	.+42     	; 0xa96 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
     a6c:	d5 01       	movw	r26, r10
     a6e:	8c 91       	ld	r24, X
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	c8 16       	cp	r12, r24
     a74:	d9 06       	cpc	r13, r25
     a76:	49 f4       	brne	.+18     	; 0xa8a <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
     a78:	f4 01       	movw	r30, r8
     a7a:	80 81       	ld	r24, Z
     a7c:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
     a80:	89 e0       	ldi	r24, 0x09	; 9
     a82:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
     a84:	d5 01       	movw	r26, r10
     a86:	8c 93       	st	X, r24
     a88:	19 c0       	rjmp	.+50     	; 0xabc <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
     a8a:	80 81       	ld	r24, Z
     a8c:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
     a90:	f5 01       	movw	r30, r10
     a92:	c0 82       	st	Z, r12
     a94:	13 c0       	rjmp	.+38     	; 0xabc <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     a96:	d5 01       	movw	r26, r10
     a98:	8c 91       	ld	r24, X
     a9a:	86 30       	cpi	r24, 0x06	; 6
     a9c:	51 f4       	brne	.+20     	; 0xab2 <check_inst_switches+0xf4>
     a9e:	c7 31       	cpi	r28, 0x17	; 23
     aa0:	d1 05       	cpc	r29, r1
     aa2:	39 f4       	brne	.+14     	; 0xab2 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
     aa4:	f2 01       	movw	r30, r4
     aa6:	80 81       	ld	r24, Z
     aa8:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
					sequencer.current_inst = MA;
     aac:	d5 01       	movw	r26, r10
     aae:	3c 92       	st	X, r3
     ab0:	ba cf       	rjmp	.-140    	; 0xa26 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
     ab2:	80 81       	ld	r24, Z
     ab4:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
     ab8:	f5 01       	movw	r30, r10
     aba:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
     abc:	0c 31       	cpi	r16, 0x1C	; 28
     abe:	11 05       	cpc	r17, r1
     ac0:	0c f4       	brge	.+2      	; 0xac4 <check_inst_switches+0x106>
     ac2:	b1 cf       	rjmp	.-158    	; 0xa26 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
     ac4:	80 91 2c 02 	lds	r24, 0x022C
     ac8:	86 ff       	sbrs	r24, 6
     aca:	0c c0       	rjmp	.+24     	; 0xae4 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
     acc:	ec e2       	ldi	r30, 0x2C	; 44
     ace:	f2 e0       	ldi	r31, 0x02	; 2
     ad0:	8f 7b       	andi	r24, 0xBF	; 191
     ad2:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
     ad4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
     ad8:	84 e1       	ldi	r24, 0x14	; 20
     ada:	0e 94 8b 01 	call	0x316	; 0x316 <turn_on>
		sequencer.current_inst = AC;
     ade:	80 e1       	ldi	r24, 0x10	; 16
     ae0:	80 93 b1 03 	sts	0x03B1, r24
	}
	
}	
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	7f 90       	pop	r7
     afe:	6f 90       	pop	r6
     b00:	5f 90       	pop	r5
     b02:	4f 90       	pop	r4
     b04:	3f 90       	pop	r3
     b06:	08 95       	ret

00000b08 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     b08:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     b0a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     b0c:	74 83       	std	Z+4, r23	; 0x04
     b0e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     b10:	11 82       	std	Z+1, r1	; 0x01
     b12:	10 82       	st	Z, r1
     b14:	08 95       	ret

00000b16 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     b24:	0e 94 04 06 	call	0xc08	; 0xc08 <store_and_clear_interrupt>
     b28:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     b2a:	f9 80       	ldd	r15, Y+1	; 0x01
     b2c:	4f 2d       	mov	r20, r15
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	ca 01       	movw	r24, r20
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	2a 81       	ldd	r18, Y+2	; 0x02
     b36:	62 2f       	mov	r22, r18
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divmodhi4>
     b3e:	28 81       	ld	r18, Y
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	82 17       	cp	r24, r18
     b44:	93 07       	cpc	r25, r19
     b46:	29 f4       	brne	.+10     	; 0xb52 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
     b48:	81 2f       	mov	r24, r17
     b4a:	0e 94 07 06 	call	0xc0e	; 0xc0e <restore_interrupt_setting>
      return false;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
     b52:	eb 81       	ldd	r30, Y+3	; 0x03
     b54:	fc 81       	ldd	r31, Y+4	; 0x04
     b56:	ef 0d       	add	r30, r15
     b58:	f1 1d       	adc	r31, r1
     b5a:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
     b5c:	29 81       	ldd	r18, Y+1	; 0x01
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	c9 01       	movw	r24, r18
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	6a 81       	ldd	r22, Y+2	; 0x02
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divmodhi4>
     b6c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     b6e:	81 2f       	mov	r24, r17
     b70:	0e 94 07 06 	call	0xc0e	; 0xc0e <restore_interrupt_setting>
      return true;
     b74:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	08 95       	ret

00000b82 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     b88:	0e 94 04 06 	call	0xc08	; 0xc08 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     b8c:	39 81       	ldd	r19, Y+1	; 0x01
     b8e:	28 81       	ld	r18, Y
     b90:	32 17       	cp	r19, r18
     b92:	18 f0       	brcs	.+6      	; 0xb9a <bytequeue_length+0x18>
      len = queue->end - queue->start;
     b94:	c3 2f       	mov	r28, r19
     b96:	c2 1b       	sub	r28, r18
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <bytequeue_length+0x20>
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	c3 2f       	mov	r28, r19
     b9e:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
     ba0:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
     ba2:	0e 94 07 06 	call	0xc0e	; 0xc0e <restore_interrupt_setting>
   return len;
}
     ba6:	8c 2f       	mov	r24, r28
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     bae:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     bb0:	80 81       	ld	r24, Z
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	9b 01       	movw	r18, r22
     bb6:	28 0f       	add	r18, r24
     bb8:	31 1d       	adc	r19, r1
     bba:	c9 01       	movw	r24, r18
     bbc:	62 81       	ldd	r22, Z+2	; 0x02
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divmodhi4>
     bc4:	03 80       	ldd	r0, Z+3	; 0x03
     bc6:	f4 81       	ldd	r31, Z+4	; 0x04
     bc8:	e0 2d       	mov	r30, r0
     bca:	e8 0f       	add	r30, r24
     bcc:	f9 1f       	adc	r31, r25
}
     bce:	80 81       	ld	r24, Z
     bd0:	08 95       	ret

00000bd2 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ec 01       	movw	r28, r24
     bda:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     bdc:	0e 94 04 06 	call	0xc08	; 0xc08 <store_and_clear_interrupt>
     be0:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     be2:	88 81       	ld	r24, Y
     be4:	21 2f       	mov	r18, r17
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	b9 01       	movw	r22, r18
     bea:	68 0f       	add	r22, r24
     bec:	71 1d       	adc	r23, r1
     bee:	cb 01       	movw	r24, r22
     bf0:	6a 81       	ldd	r22, Y+2	; 0x02
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divmodhi4>
     bf8:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     bfa:	84 2f       	mov	r24, r20
     bfc:	0e 94 07 06 	call	0xc0e	; 0xc0e <restore_interrupt_setting>
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	08 95       	ret

00000c08 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     c08:	8f b7       	in	r24, 0x3f	; 63
   cli();
     c0a:	f8 94       	cli
   return sreg;
}
     c0c:	08 95       	ret

00000c0e <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     c0e:	8f bf       	out	0x3f, r24	; 63
     c10:	08 95       	ret

00000c12 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     c12:	88 1f       	adc	r24, r24
     c14:	88 27       	eor	r24, r24
     c16:	88 1f       	adc	r24, r24
     c18:	08 95       	ret

00000c1a <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	88 3f       	cpi	r24, 0xF8	; 248
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <midi_is_realtime+0x8>
     c20:	90 e0       	ldi	r25, 0x00	; 0
}
     c22:	89 2f       	mov	r24, r25
     c24:	08 95       	ret

00000c26 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     c26:	98 2f       	mov	r25, r24
     c28:	90 7f       	andi	r25, 0xF0	; 240
     c2a:	90 3c       	cpi	r25, 0xC0	; 192
     c2c:	b1 f0       	breq	.+44     	; 0xc5a <midi_packet_length+0x34>
     c2e:	58 f4       	brcc	.+22     	; 0xc46 <midi_packet_length+0x20>
     c30:	90 39       	cpi	r25, 0x90	; 144
     c32:	41 f1       	breq	.+80     	; 0xc84 <midi_packet_length+0x5e>
     c34:	18 f4       	brcc	.+6      	; 0xc3c <midi_packet_length+0x16>
     c36:	90 38       	cpi	r25, 0x80	; 128
     c38:	19 f5       	brne	.+70     	; 0xc80 <midi_packet_length+0x5a>
     c3a:	24 c0       	rjmp	.+72     	; 0xc84 <midi_packet_length+0x5e>
     c3c:	90 3a       	cpi	r25, 0xA0	; 160
     c3e:	11 f1       	breq	.+68     	; 0xc84 <midi_packet_length+0x5e>
     c40:	90 3b       	cpi	r25, 0xB0	; 176
     c42:	f1 f4       	brne	.+60     	; 0xc80 <midi_packet_length+0x5a>
     c44:	1f c0       	rjmp	.+62     	; 0xc84 <midi_packet_length+0x5e>
     c46:	90 3e       	cpi	r25, 0xE0	; 224
     c48:	e9 f0       	breq	.+58     	; 0xc84 <midi_packet_length+0x5e>
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <midi_packet_length+0x2c>
     c4c:	90 3d       	cpi	r25, 0xD0	; 208
     c4e:	29 f0       	breq	.+10     	; 0xc5a <midi_packet_length+0x34>
     c50:	17 c0       	rjmp	.+46     	; 0xc80 <midi_packet_length+0x5a>
     c52:	90 3f       	cpi	r25, 0xF0	; 240
     c54:	21 f0       	breq	.+8      	; 0xc5e <midi_packet_length+0x38>
     c56:	93 3f       	cpi	r25, 0xF3	; 243
     c58:	99 f4       	brne	.+38     	; 0xc80 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	08 95       	ret
      case 0xF0:
         switch(status) {
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	e1 5f       	subi	r30, 0xF1	; 241
     c64:	f1 09       	sbc	r31, r1
     c66:	ef 30       	cpi	r30, 0x0F	; 15
     c68:	f1 05       	cpc	r31, r1
     c6a:	40 f4       	brcc	.+16     	; 0xc7c <midi_packet_length+0x56>
     c6c:	e6 5a       	subi	r30, 0xA6	; 166
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	08 95       	ret
         }
      default:
         return UNDEFINED;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     c8a:	08 95       	ret

00000c8c <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     c8c:	fc 01       	movw	r30, r24
     c8e:	75 83       	std	Z+5, r23	; 0x05
     c90:	64 83       	std	Z+4, r22	; 0x04
     c92:	08 95       	ret

00000c94 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     c94:	fc 01       	movw	r30, r24
     c96:	77 83       	std	Z+7, r23	; 0x07
     c98:	66 83       	std	Z+6, r22	; 0x06
     c9a:	08 95       	ret

00000c9c <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     c9c:	fc 01       	movw	r30, r24
     c9e:	77 8b       	std	Z+23, r23	; 0x17
     ca0:	66 8b       	std	Z+22, r22	; 0x16
     ca2:	08 95       	ret

00000ca4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     caa:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
     cac:	1f a2       	std	Y+39, r1	; 0x27
     cae:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     cb0:	bc 01       	movw	r22, r24
     cb2:	68 5d       	subi	r22, 0xD8	; 216
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	40 ec       	ldi	r20, 0xC0	; 192
     cb8:	88 51       	subi	r24, 0x18	; 24
     cba:	9f 4f       	sbci	r25, 0xFF	; 255
     cbc:	0e 94 84 05 	call	0xb08	; 0xb08 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     cc0:	1b 82       	std	Y+3, r1	; 0x03
     cc2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     cc4:	1d 82       	std	Y+5, r1	; 0x05
     cc6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     cc8:	1f 82       	std	Y+7, r1	; 0x07
     cca:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     ccc:	19 86       	std	Y+9, r1	; 0x09
     cce:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     cd0:	1b 86       	std	Y+11, r1	; 0x0b
     cd2:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     cd4:	1d 86       	std	Y+13, r1	; 0x0d
     cd6:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     cd8:	1f 86       	std	Y+15, r1	; 0x0f
     cda:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     cdc:	19 8a       	std	Y+17, r1	; 0x11
     cde:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     ce0:	1b 8a       	std	Y+19, r1	; 0x13
     ce2:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     ce4:	1d 8a       	std	Y+21, r1	; 0x15
     ce6:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     ce8:	1f 8a       	std	Y+23, r1	; 0x17
     cea:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     cec:	19 8e       	std	Y+25, r1	; 0x19
     cee:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     cf0:	1b 8e       	std	Y+27, r1	; 0x1b
     cf2:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     cf4:	1d 8e       	std	Y+29, r1	; 0x1d
     cf6:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     cf8:	1f 8e       	std	Y+31, r1	; 0x1f
     cfa:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     cfc:	19 a2       	std	Y+33, r1	; 0x21
     cfe:	18 a2       	std	Y+32, r1	; 0x20
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
     d12:	66 23       	and	r22, r22
     d14:	99 f0       	breq	.+38     	; 0xd3c <midi_device_input+0x36>
     d16:	ea 01       	movw	r28, r20
     d18:	61 50       	subi	r22, 0x01	; 1
     d1a:	06 2f       	mov	r16, r22
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	0f 5f       	subi	r16, 0xFF	; 255
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	04 0f       	add	r16, r20
     d24:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
     d26:	7c 01       	movw	r14, r24
     d28:	28 ee       	ldi	r18, 0xE8	; 232
     d2a:	e2 0e       	add	r14, r18
     d2c:	f1 1c       	adc	r15, r1
     d2e:	69 91       	ld	r22, Y+
     d30:	c7 01       	movw	r24, r14
     d32:	0e 94 8b 05 	call	0xb16	; 0xb16 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     d36:	c0 17       	cp	r28, r16
     d38:	d1 07       	cpc	r29, r17
     d3a:	c9 f7       	brne	.-14     	; 0xd2e <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	08 95       	ret

00000d4a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     d4a:	af 92       	push	r10
     d4c:	bf 92       	push	r11
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <midi_input_callbacks+0x16>
     d60:	1f 92       	push	r1
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	7c 01       	movw	r14, r24
     d68:	6b 01       	movw	r12, r22
     d6a:	14 2f       	mov	r17, r20
     d6c:	b2 2e       	mov	r11, r18
     d6e:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     d70:	dc 01       	movw	r26, r24
     d72:	95 96       	adiw	r26, 0x25	; 37
     d74:	8c 91       	ld	r24, X
     d76:	95 97       	sbiw	r26, 0x25	; 37
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	11 f5       	brne	.+68     	; 0xdc0 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
     d7c:	5a 96       	adiw	r26, 0x1a	; 26
     d7e:	ed 91       	ld	r30, X+
     d80:	fc 91       	ld	r31, X
     d82:	5b 97       	sbiw	r26, 0x1b	; 27
     d84:	30 97       	sbiw	r30, 0x00	; 0
     d86:	09 f4       	brne	.+2      	; 0xd8a <midi_input_callbacks+0x40>
     d88:	cc c0       	rjmp	.+408    	; 0xf22 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     d8a:	9b 01       	movw	r18, r22
     d8c:	21 50       	subi	r18, 0x01	; 1
     d8e:	31 09       	sbc	r19, r1
     d90:	ab ea       	ldi	r26, 0xAB	; 171
     d92:	ba ea       	ldi	r27, 0xAA	; 170
     d94:	0e 94 cd 08 	call	0x119a	; 0x119a <__umulhisi3>
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	9c 01       	movw	r18, r24
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     da6:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     da8:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
     daa:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     dac:	4c 2d       	mov	r20, r12
     dae:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     db0:	9e 01       	movw	r18, r28
     db2:	2f 5f       	subi	r18, 0xFF	; 255
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	68 2f       	mov	r22, r24
     db8:	79 2f       	mov	r23, r25
     dba:	c7 01       	movw	r24, r14
     dbc:	09 95       	icall
     dbe:	be c0       	rjmp	.+380    	; 0xf3c <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
     dc0:	62 30       	cpi	r22, 0x02	; 2
     dc2:	71 05       	cpc	r23, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <midi_input_callbacks+0x7e>
     dc6:	55 c0       	rjmp	.+170    	; 0xe72 <midi_input_callbacks+0x128>
     dc8:	63 30       	cpi	r22, 0x03	; 3
     dca:	71 05       	cpc	r23, r1
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <midi_input_callbacks+0x8e>
     dce:	61 30       	cpi	r22, 0x01	; 1
     dd0:	71 05       	cpc	r23, r1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <midi_input_callbacks+0x8c>
     dd4:	a1 c0       	rjmp	.+322    	; 0xf18 <midi_input_callbacks+0x1ce>
     dd6:	88 c0       	rjmp	.+272    	; 0xee8 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     dd8:	84 2f       	mov	r24, r20
     dda:	80 7f       	andi	r24, 0xF0	; 240
     ddc:	80 3a       	cpi	r24, 0xA0	; 160
     dde:	f1 f0       	breq	.+60     	; 0xe1c <midi_input_callbacks+0xd2>
     de0:	28 f4       	brcc	.+10     	; 0xdec <midi_input_callbacks+0xa2>
     de2:	80 38       	cpi	r24, 0x80	; 128
     de4:	a9 f0       	breq	.+42     	; 0xe10 <midi_input_callbacks+0xc6>
     de6:	80 39       	cpi	r24, 0x90	; 144
     de8:	69 f0       	breq	.+26     	; 0xe04 <midi_input_callbacks+0xba>
     dea:	2f c0       	rjmp	.+94     	; 0xe4a <midi_input_callbacks+0x100>
     dec:	80 3e       	cpi	r24, 0xE0	; 224
     dee:	e1 f0       	breq	.+56     	; 0xe28 <midi_input_callbacks+0xde>
     df0:	80 3f       	cpi	r24, 0xF0	; 240
     df2:	01 f1       	breq	.+64     	; 0xe34 <midi_input_callbacks+0xea>
     df4:	80 3b       	cpi	r24, 0xB0	; 176
     df6:	49 f5       	brne	.+82     	; 0xe4a <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
     df8:	d7 01       	movw	r26, r14
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	ed 91       	ld	r30, X+
     dfe:	fc 91       	ld	r31, X
     e00:	13 97       	sbiw	r26, 0x03	; 3
              break;
     e02:	25 c0       	rjmp	.+74     	; 0xe4e <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     e04:	d7 01       	movw	r26, r14
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	15 97       	sbiw	r26, 0x05	; 5
              break;
     e0e:	1f c0       	rjmp	.+62     	; 0xe4e <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     e10:	d7 01       	movw	r26, r14
     e12:	16 96       	adiw	r26, 0x06	; 6
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	17 97       	sbiw	r26, 0x07	; 7
              break;
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     e1c:	d7 01       	movw	r26, r14
     e1e:	18 96       	adiw	r26, 0x08	; 8
     e20:	ed 91       	ld	r30, X+
     e22:	fc 91       	ld	r31, X
     e24:	19 97       	sbiw	r26, 0x09	; 9
              break;
     e26:	13 c0       	rjmp	.+38     	; 0xe4e <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     e28:	d7 01       	movw	r26, r14
     e2a:	1a 96       	adiw	r26, 0x0a	; 10
     e2c:	ed 91       	ld	r30, X+
     e2e:	fc 91       	ld	r31, X
     e30:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     e34:	42 3f       	cpi	r20, 0xF2	; 242
     e36:	09 f0       	breq	.+2      	; 0xe3a <midi_input_callbacks+0xf0>
     e38:	74 c0       	rjmp	.+232    	; 0xf22 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
     e3a:	d7 01       	movw	r26, r14
     e3c:	1c 96       	adiw	r26, 0x0c	; 12
     e3e:	ed 91       	ld	r30, X+
     e40:	fc 91       	ld	r31, X
     e42:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
     e44:	30 97       	sbiw	r30, 0x00	; 0
     e46:	41 f4       	brne	.+16     	; 0xe58 <midi_input_callbacks+0x10e>
     e48:	6c c0       	rjmp	.+216    	; 0xf22 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     e4a:	e0 e0       	ldi	r30, 0x00	; 0
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
     e4e:	30 97       	sbiw	r30, 0x00	; 0
     e50:	09 f4       	brne	.+2      	; 0xe54 <midi_input_callbacks+0x10a>
     e52:	67 c0       	rjmp	.+206    	; 0xf22 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
     e54:	12 3f       	cpi	r17, 0xF2	; 242
     e56:	31 f4       	brne	.+12     	; 0xe64 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
     e58:	2a 2d       	mov	r18, r10
     e5a:	4b 2d       	mov	r20, r11
     e5c:	62 ef       	ldi	r22, 0xF2	; 242
     e5e:	c7 01       	movw	r24, r14
     e60:	09 95       	icall
     e62:	6c c0       	rjmp	.+216    	; 0xf3c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
     e64:	2a 2d       	mov	r18, r10
     e66:	4b 2d       	mov	r20, r11
     e68:	61 2f       	mov	r22, r17
     e6a:	6f 70       	andi	r22, 0x0F	; 15
     e6c:	c7 01       	movw	r24, r14
     e6e:	09 95       	icall
     e70:	65 c0       	rjmp	.+202    	; 0xf3c <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     e72:	84 2f       	mov	r24, r20
     e74:	80 7f       	andi	r24, 0xF0	; 240
     e76:	80 3d       	cpi	r24, 0xD0	; 208
     e78:	51 f0       	breq	.+20     	; 0xe8e <midi_input_callbacks+0x144>
     e7a:	80 3f       	cpi	r24, 0xF0	; 240
     e7c:	71 f0       	breq	.+28     	; 0xe9a <midi_input_callbacks+0x150>
     e7e:	80 3c       	cpi	r24, 0xC0	; 192
     e80:	01 f5       	brne	.+64     	; 0xec2 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
     e82:	d7 01       	movw	r26, r14
     e84:	1e 96       	adiw	r26, 0x0e	; 14
     e86:	ed 91       	ld	r30, X+
     e88:	fc 91       	ld	r31, X
     e8a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
     e8c:	1c c0       	rjmp	.+56     	; 0xec6 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
     e8e:	d7 01       	movw	r26, r14
     e90:	50 96       	adiw	r26, 0x10	; 16
     e92:	ed 91       	ld	r30, X+
     e94:	fc 91       	ld	r31, X
     e96:	51 97       	sbiw	r26, 0x11	; 17
              break;
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
     e9a:	43 3f       	cpi	r20, 0xF3	; 243
     e9c:	41 f4       	brne	.+16     	; 0xeae <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
     e9e:	d7 01       	movw	r26, r14
     ea0:	52 96       	adiw	r26, 0x12	; 18
     ea2:	ed 91       	ld	r30, X+
     ea4:	fc 91       	ld	r31, X
     ea6:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	99 f4       	brne	.+38     	; 0xed2 <midi_input_callbacks+0x188>
     eac:	3a c0       	rjmp	.+116    	; 0xf22 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
     eae:	41 3f       	cpi	r20, 0xF1	; 241
     eb0:	c1 f5       	brne	.+112    	; 0xf22 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
     eb2:	d7 01       	movw	r26, r14
     eb4:	54 96       	adiw	r26, 0x14	; 20
     eb6:	ed 91       	ld	r30, X+
     eb8:	fc 91       	ld	r31, X
     eba:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	49 f4       	brne	.+18     	; 0xed2 <midi_input_callbacks+0x188>
     ec0:	30 c0       	rjmp	.+96     	; 0xf22 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
     ec2:	e0 e0       	ldi	r30, 0x00	; 0
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	61 f1       	breq	.+88     	; 0xf22 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
     eca:	81 2f       	mov	r24, r17
     ecc:	8d 7f       	andi	r24, 0xFD	; 253
     ece:	81 3f       	cpi	r24, 0xF1	; 241
     ed0:	29 f4       	brne	.+10     	; 0xedc <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
     ed2:	4b 2d       	mov	r20, r11
     ed4:	61 2f       	mov	r22, r17
     ed6:	c7 01       	movw	r24, r14
     ed8:	09 95       	icall
     eda:	30 c0       	rjmp	.+96     	; 0xf3c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
     edc:	4b 2d       	mov	r20, r11
     ede:	61 2f       	mov	r22, r17
     ee0:	6f 70       	andi	r22, 0x0F	; 15
     ee2:	c7 01       	movw	r24, r14
     ee4:	09 95       	icall
     ee6:	2a c0       	rjmp	.+84     	; 0xf3c <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
     ee8:	84 2f       	mov	r24, r20
     eea:	0e 94 0d 06 	call	0xc1a	; 0xc1a <midi_is_realtime>
     eee:	88 23       	and	r24, r24
     ef0:	31 f0       	breq	.+12     	; 0xefe <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
     ef2:	d7 01       	movw	r26, r14
     ef4:	56 96       	adiw	r26, 0x16	; 22
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
     efa:	57 97       	sbiw	r26, 0x17	; 23
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
     efe:	16 3f       	cpi	r17, 0xF6	; 246
     f00:	81 f4       	brne	.+32     	; 0xf22 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
     f02:	d7 01       	movw	r26, r14
     f04:	58 96       	adiw	r26, 0x18	; 24
     f06:	ed 91       	ld	r30, X+
     f08:	fc 91       	ld	r31, X
     f0a:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
     f0c:	30 97       	sbiw	r30, 0x00	; 0
     f0e:	49 f0       	breq	.+18     	; 0xf22 <midi_input_callbacks+0x1d8>
            func(device, byte0);
     f10:	61 2f       	mov	r22, r17
     f12:	c7 01       	movw	r24, r14
     f14:	09 95       	icall
     f16:	12 c0       	rjmp	.+36     	; 0xf3c <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
     f18:	64 30       	cpi	r22, 0x04	; 4
     f1a:	71 05       	cpc	r23, r1
     f1c:	10 f0       	brcs	.+4      	; 0xf22 <midi_input_callbacks+0x1d8>
          cnt = 0;
     f1e:	c1 2c       	mov	r12, r1
     f20:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
     f22:	d7 01       	movw	r26, r14
     f24:	5c 96       	adiw	r26, 0x1c	; 28
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	5d 97       	sbiw	r26, 0x1d	; 29
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	31 f0       	breq	.+12     	; 0xf3c <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
     f30:	0a 2d       	mov	r16, r10
     f32:	2b 2d       	mov	r18, r11
     f34:	41 2f       	mov	r20, r17
     f36:	b6 01       	movw	r22, r12
     f38:	c7 01       	movw	r24, r14
     f3a:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
     f3c:	d7 01       	movw	r26, r14
     f3e:	5e 96       	adiw	r26, 0x1e	; 30
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	5f 97       	sbiw	r26, 0x1f	; 31
     f46:	30 97       	sbiw	r30, 0x00	; 0
     f48:	31 f0       	breq	.+12     	; 0xf56 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
     f4a:	0a 2d       	mov	r16, r10
     f4c:	2b 2d       	mov	r18, r11
     f4e:	41 2f       	mov	r20, r17
     f50:	b6 01       	movw	r22, r12
     f52:	c7 01       	movw	r24, r14
     f54:	09 95       	icall
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	08 95       	ret

00000f72 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ec 01       	movw	r28, r24
     f7e:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
     f80:	86 2f       	mov	r24, r22
     f82:	0e 94 0d 06 	call	0xc1a	; 0xc1a <midi_is_realtime>
     f86:	88 23       	and	r24, r24
     f88:	69 f0       	breq	.+26     	; 0xfa4 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
     f8a:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
     f90:	00 e0       	ldi	r16, 0x00	; 0
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	41 2f       	mov	r20, r17
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <midi_input_callbacks>
    device->input_state = state;
     fa0:	fd a2       	std	Y+37, r15	; 0x25
     fa2:	a4 c0       	rjmp	.+328    	; 0x10ec <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
     fa4:	81 2f       	mov	r24, r17
     fa6:	0e 94 09 06 	call	0xc12	; 0xc12 <midi_is_statusbyte>
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <midi_process_byte+0x3e>
     fae:	5d c0       	rjmp	.+186    	; 0x106a <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
     fb0:	8d a1       	ldd	r24, Y+37	; 0x25
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	29 f0       	breq	.+10     	; 0xfc0 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
     fb6:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9f a3       	std	Y+39, r25	; 0x27
     fbe:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
     fc0:	81 2f       	mov	r24, r17
     fc2:	0e 94 13 06 	call	0xc26	; 0xc26 <midi_packet_length>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	31 f0       	breq	.+12     	; 0xfd6 <midi_process_byte+0x64>
     fca:	b8 f0       	brcs	.+46     	; 0xffa <midi_process_byte+0x88>
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	79 f0       	breq	.+30     	; 0xfee <midi_process_byte+0x7c>
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	81 f0       	breq	.+32     	; 0xff4 <midi_process_byte+0x82>
     fd4:	46 c0       	rjmp	.+140    	; 0x1062 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
     fda:	00 e0       	ldi	r16, 0x00	; 0
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	41 2f       	mov	r20, r17
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <midi_input_callbacks>
        device->input_state = IDLE;
     fea:	1d a2       	std	Y+37, r1	; 0x25
        break;
     fec:	7f c0       	rjmp	.+254    	; 0x10ec <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	8d a3       	std	Y+37, r24	; 0x25
        break;
     ff2:	7c c0       	rjmp	.+248    	; 0x10ec <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	8d a3       	std	Y+37, r24	; 0x25
        break;
     ff8:	79 c0       	rjmp	.+242    	; 0x10ec <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
     ffa:	10 3f       	cpi	r17, 0xF0	; 240
     ffc:	19 f0       	breq	.+6      	; 0x1004 <midi_process_byte+0x92>
     ffe:	17 3f       	cpi	r17, 0xF7	; 247
    1000:	51 f0       	breq	.+20     	; 0x1016 <midi_process_byte+0xa4>
    1002:	2b c0       	rjmp	.+86     	; 0x105a <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1008:	80 ef       	ldi	r24, 0xF0	; 240
    100a:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9f a3       	std	Y+39, r25	; 0x27
    1012:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1014:	6b c0       	rjmp	.+214    	; 0x10ec <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1016:	4e a1       	ldd	r20, Y+38	; 0x26
    1018:	5f a1       	ldd	r21, Y+39	; 0x27
    101a:	9a 01       	movw	r18, r20
    101c:	ab ea       	ldi	r26, 0xAB	; 171
    101e:	ba ea       	ldi	r27, 0xAA	; 170
    1020:	0e 94 cd 08 	call	0x119a	; 0x119a <__umulhisi3>
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	9c 01       	movw	r18, r24
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	82 0f       	add	r24, r18
    1030:	93 1f       	adc	r25, r19
    1032:	fa 01       	movw	r30, r20
    1034:	e8 1b       	sub	r30, r24
    1036:	f9 0b       	sbc	r31, r25
    1038:	ec 0f       	add	r30, r28
    103a:	fd 1f       	adc	r31, r29
    103c:	87 ef       	ldi	r24, 0xF7	; 247
    103e:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1040:	ba 01       	movw	r22, r20
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	7f a3       	std	Y+39, r23	; 0x27
    1048:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    104a:	0c a1       	ldd	r16, Y+36	; 0x24
    104c:	2b a1       	ldd	r18, Y+35	; 0x23
    104e:	4a a1       	ldd	r20, Y+34	; 0x22
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 a5 06 	call	0xd4a	; 0xd4a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1056:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1058:	49 c0       	rjmp	.+146    	; 0x10ec <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    105a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    105c:	1f a2       	std	Y+39, r1	; 0x27
    105e:	1e a2       	std	Y+38, r1	; 0x26
    1060:	45 c0       	rjmp	.+138    	; 0x10ec <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1062:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1064:	1f a2       	std	Y+39, r1	; 0x27
    1066:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1068:	41 c0       	rjmp	.+130    	; 0x10ec <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    106a:	ed a1       	ldd	r30, Y+37	; 0x25
    106c:	ee 23       	and	r30, r30
    106e:	f1 f1       	breq	.+124    	; 0x10ec <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1070:	4e a1       	ldd	r20, Y+38	; 0x26
    1072:	5f a1       	ldd	r21, Y+39	; 0x27
    1074:	9a 01       	movw	r18, r20
    1076:	ab ea       	ldi	r26, 0xAB	; 171
    1078:	ba ea       	ldi	r27, 0xAA	; 170
    107a:	0e 94 cd 08 	call	0x119a	; 0x119a <__umulhisi3>
    107e:	96 95       	lsr	r25
    1080:	87 95       	ror	r24
    1082:	9c 01       	movw	r18, r24
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	9a 01       	movw	r18, r20
    108e:	28 1b       	sub	r18, r24
    1090:	39 0b       	sbc	r19, r25
    1092:	de 01       	movw	r26, r28
    1094:	a2 0f       	add	r26, r18
    1096:	b3 1f       	adc	r27, r19
    1098:	92 96       	adiw	r26, 0x22	; 34
    109a:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    109c:	ba 01       	movw	r22, r20
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	7f a3       	std	Y+39, r23	; 0x27
    10a4:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    10a6:	21 30       	cpi	r18, 0x01	; 1
    10a8:	31 05       	cpc	r19, r1
    10aa:	89 f0       	breq	.+34     	; 0x10ce <midi_process_byte+0x15c>
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	e9 f4       	brne	.+58     	; 0x10ec <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    10b2:	0c a1       	ldd	r16, Y+36	; 0x24
    10b4:	2b a1       	ldd	r18, Y+35	; 0x23
    10b6:	4a a1       	ldd	r20, Y+34	; 0x22
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 a5 06 	call	0xd4a	; 0xd4a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    10be:	8d a1       	ldd	r24, Y+37	; 0x25
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9f a3       	std	Y+39, r25	; 0x27
    10ca:	8e a3       	std	Y+38, r24	; 0x26
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    10ce:	e2 30       	cpi	r30, 0x02	; 2
    10d0:	69 f4       	brne	.+26     	; 0x10ec <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    10d2:	00 e0       	ldi	r16, 0x00	; 0
    10d4:	2b a1       	ldd	r18, Y+35	; 0x23
    10d6:	4a a1       	ldd	r20, Y+34	; 0x22
    10d8:	ce 01       	movw	r24, r28
    10da:	0e 94 a5 06 	call	0xd4a	; 0xd4a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	21 f0       	breq	.+8      	; 0x10ec <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9f a3       	std	Y+39, r25	; 0x27
    10ea:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	08 95       	ret

000010f8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    110a:	dc 01       	movw	r26, r24
    110c:	90 96       	adiw	r26, 0x20	; 32
    110e:	ed 91       	ld	r30, X+
    1110:	fc 91       	ld	r31, X
    1112:	91 97       	sbiw	r26, 0x21	; 33
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	09 f0       	breq	.+2      	; 0x111a <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1118:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    111a:	86 01       	movw	r16, r12
    111c:	08 51       	subi	r16, 0x18	; 24
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 c1 05 	call	0xb82	; 0xb82 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1126:	e8 2e       	mov	r14, r24
    1128:	f1 2c       	mov	r15, r1
    112a:	e1 14       	cp	r14, r1
    112c:	f1 04       	cpc	r15, r1
    112e:	91 f0       	breq	.+36     	; 0x1154 <midi_device_process+0x5c>
    1130:	c0 e0       	ldi	r28, 0x00	; 0
    1132:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	c8 01       	movw	r24, r16
    1138:	0e 94 d7 05 	call	0xbae	; 0xbae <bytequeue_get>
    113c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    113e:	c6 01       	movw	r24, r12
    1140:	0e 94 b9 07 	call	0xf72	; 0xf72 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    114c:	21 96       	adiw	r28, 0x01	; 1
    114e:	ce 15       	cp	r28, r14
    1150:	df 05       	cpc	r29, r15
    1152:	81 f7       	brne	.-32     	; 0x1134 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	08 95       	ret

00001166 <__divmodhi4>:
    1166:	97 fb       	bst	r25, 7
    1168:	07 2e       	mov	r0, r23
    116a:	16 f4       	brtc	.+4      	; 0x1170 <__divmodhi4+0xa>
    116c:	00 94       	com	r0
    116e:	07 d0       	rcall	.+14     	; 0x117e <__divmodhi4_neg1>
    1170:	77 fd       	sbrc	r23, 7
    1172:	09 d0       	rcall	.+18     	; 0x1186 <__divmodhi4_neg2>
    1174:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__udivmodhi4>
    1178:	07 fc       	sbrc	r0, 7
    117a:	05 d0       	rcall	.+10     	; 0x1186 <__divmodhi4_neg2>
    117c:	3e f4       	brtc	.+14     	; 0x118c <__divmodhi4_exit>

0000117e <__divmodhi4_neg1>:
    117e:	90 95       	com	r25
    1180:	81 95       	neg	r24
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__divmodhi4_neg2>:
    1186:	70 95       	com	r23
    1188:	61 95       	neg	r22
    118a:	7f 4f       	sbci	r23, 0xFF	; 255

0000118c <__divmodhi4_exit>:
    118c:	08 95       	ret

0000118e <__tablejump2__>:
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	05 90       	lpm	r0, Z+
    1194:	f4 91       	lpm	r31, Z
    1196:	e0 2d       	mov	r30, r0
    1198:	09 94       	ijmp

0000119a <__umulhisi3>:
    119a:	a2 9f       	mul	r26, r18
    119c:	b0 01       	movw	r22, r0
    119e:	b3 9f       	mul	r27, r19
    11a0:	c0 01       	movw	r24, r0
    11a2:	a3 9f       	mul	r26, r19
    11a4:	70 0d       	add	r23, r0
    11a6:	81 1d       	adc	r24, r1
    11a8:	11 24       	eor	r1, r1
    11aa:	91 1d       	adc	r25, r1
    11ac:	b2 9f       	mul	r27, r18
    11ae:	70 0d       	add	r23, r0
    11b0:	81 1d       	adc	r24, r1
    11b2:	11 24       	eor	r1, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	08 95       	ret

000011b8 <__udivmodhi4>:
    11b8:	aa 1b       	sub	r26, r26
    11ba:	bb 1b       	sub	r27, r27
    11bc:	51 e1       	ldi	r21, 0x11	; 17
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <__udivmodhi4_ep>

000011c0 <__udivmodhi4_loop>:
    11c0:	aa 1f       	adc	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	a6 17       	cp	r26, r22
    11c6:	b7 07       	cpc	r27, r23
    11c8:	10 f0       	brcs	.+4      	; 0x11ce <__udivmodhi4_ep>
    11ca:	a6 1b       	sub	r26, r22
    11cc:	b7 0b       	sbc	r27, r23

000011ce <__udivmodhi4_ep>:
    11ce:	88 1f       	adc	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	5a 95       	dec	r21
    11d4:	a9 f7       	brne	.-22     	; 0x11c0 <__udivmodhi4_loop>
    11d6:	80 95       	com	r24
    11d8:	90 95       	com	r25
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	08 95       	ret

000011e0 <_exit>:
    11e0:	f8 94       	cli

000011e2 <__stop_program>:
    11e2:	ff cf       	rjmp	.-2      	; 0x11e2 <__stop_program>
