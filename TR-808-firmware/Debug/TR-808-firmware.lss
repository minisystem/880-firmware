
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  0000192c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f3  00800258  00800258  00001b18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fe1  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001464  00000000  00000000  00006f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ba  00000000  00000000  000083e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000acc  00000000  00000000  000098a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001023  00000000  00000000  0000a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020da  00000000  00000000  0000b38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000d469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	e0 09       	sbc	r30, r0
      b6:	de 09       	sbc	r29, r14
      b8:	e0 09       	sbc	r30, r0
      ba:	e2 09       	sbc	r30, r2
      bc:	e2 09       	sbc	r30, r2
      be:	e8 09       	sbc	r30, r8
      c0:	e2 09       	sbc	r30, r2
      c2:	e8 09       	sbc	r30, r8
      c4:	e8 09       	sbc	r30, r8
      c6:	e8 09       	sbc	r30, r8
      c8:	e8 09       	sbc	r30, r8
      ca:	e8 09       	sbc	r30, r8
      cc:	e2 09       	sbc	r30, r2
      ce:	e8 09       	sbc	r30, r8
      d0:	e8 09       	sbc	r30, r8

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ec e2       	ldi	r30, 0x2C	; 44
      e6:	f9 e1       	ldi	r31, 0x19	; 25
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ab 34       	cpi	r26, 0x4B	; 75
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 93 05 	call	0xb26	; 0xb26 <main>
     108:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 10 04 	call	0x820	; 0x820 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 03 07 	call	0xe06	; 0xe06 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29

	clear_all_trigs();
     284:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     288:	05 e0       	ldi	r16, 0x05	; 5
     28a:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     290:	0f 2e       	mov	r0, r31
     292:	f6 e4       	ldi	r31, 0x46	; 70
     294:	af 2e       	mov	r10, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	bf 2e       	mov	r11, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	0f 2e       	mov	r0, r31
     29e:	f5 e4       	ldi	r31, 0x45	; 69
     2a0:	ef 2e       	mov	r14, r31
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	ff 2e       	mov	r15, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f7 e6       	ldi	r31, 0x67	; 103
     2ac:	9f 2e       	mov	r9, r31
     2ae:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f8 e6       	ldi	r31, 0x68	; 104
     2b4:	cf 2e       	mov	r12, r31
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	df 2e       	mov	r13, r31
     2ba:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2bc:	d5 01       	movw	r26, r10
     2be:	ec 91       	ld	r30, X
     2c0:	e6 95       	lsr	r30
     2c2:	ef 71       	andi	r30, 0x1F	; 31
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	d7 01       	movw	r26, r14
     2c8:	8c 91       	ld	r24, X
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	98 9e       	mul	r9, r24
     2d2:	e0 0d       	add	r30, r0
     2d4:	f1 1d       	adc	r31, r1
     2d6:	11 24       	eor	r1, r1
     2d8:	eb 58       	subi	r30, 0x8B	; 139
     2da:	fc 4f       	sbci	r31, 0xFC	; 252
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	93 81       	ldd	r25, Z+3	; 0x03
     2e0:	0c 2e       	mov	r0, r28
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <trigger_step+0x7a>
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <trigger_step+0x76>
     2ec:	80 ff       	sbrs	r24, 0
     2ee:	3a c0       	rjmp	.+116    	; 0x364 <trigger_step+0xf6>
			turn_on(drum_hit[i].led_index);
     2f0:	f8 01       	movw	r30, r16
     2f2:	80 81       	ld	r24, Z
     2f4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     2f8:	de 01       	movw	r26, r28
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	ac 0f       	add	r26, r28
     300:	bd 1f       	adc	r27, r29
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	a0 50       	subi	r26, 0x00	; 0
     308:	bf 4f       	sbci	r27, 0xFF	; 255
     30a:	ec 91       	ld	r30, X
     30c:	8e 2f       	mov	r24, r30
     30e:	88 1f       	adc	r24, r24
     310:	88 27       	eor	r24, r24
     312:	88 1f       	adc	r24, r24
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	ec 91       	ld	r30, X
     318:	e7 70       	andi	r30, 0x07	; 7
     31a:	ee 0f       	add	r30, r30
     31c:	e8 2b       	or	r30, r24
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e8 59       	subi	r30, 0x98	; 152
     322:	fd 4f       	sbci	r31, 0xFD	; 253
     324:	d8 01       	movw	r26, r16
     326:	13 97       	sbiw	r26, 0x03	; 3
     328:	9c 91       	ld	r25, X
     32a:	80 81       	ld	r24, Z
     32c:	89 2b       	or	r24, r25
     32e:	80 83       	st	Z, r24
     330:	f8 01       	movw	r30, r16
     332:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     334:	80 81       	ld	r24, Z
     336:	8f 3f       	cpi	r24, 0xFF	; 255
     338:	a9 f0       	breq	.+42     	; 0x364 <trigger_step+0xf6>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     33a:	d6 01       	movw	r26, r12
     33c:	13 96       	adiw	r26, 0x03	; 3
     33e:	2c 91       	ld	r18, X
     340:	13 97       	sbiw	r26, 0x03	; 3
     342:	fe 01       	movw	r30, r28
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	ec 0f       	add	r30, r28
     34a:	fd 1f       	adc	r31, r29
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 5f       	subi	r30, 0xFC	; 252
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	90 81       	ld	r25, Z
     356:	91 70       	andi	r25, 0x01	; 1
     358:	91 95       	neg	r25
     35a:	92 27       	eor	r25, r18
     35c:	89 23       	and	r24, r25
     35e:	82 27       	eor	r24, r18
     360:	13 96       	adiw	r26, 0x03	; 3
     362:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     364:	21 96       	adiw	r28, 0x01	; 1
     366:	0a 5f       	subi	r16, 0xFA	; 250
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	c0 31       	cpi	r28, 0x10	; 16
     36c:	d1 05       	cpc	r29, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <trigger_step+0x104>
     370:	a5 cf       	rjmp	.-182    	; 0x2bc <trigger_step+0x4e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	08 95       	ret

0000038a <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     38a:	80 91 34 02 	lds	r24, 0x0234
     38e:	86 ff       	sbrs	r24, 6
     390:	08 c0       	rjmp	.+16     	; 0x3a2 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     392:	e4 e3       	ldi	r30, 0x34	; 52
     394:	f2 e0       	ldi	r31, 0x02	; 2
     396:	8f 7b       	andi	r24, 0xBF	; 191
     398:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3a2:	80 91 36 02 	lds	r24, 0x0236
     3a6:	86 ff       	sbrs	r24, 6
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3aa:	e6 e3       	ldi	r30, 0x36	; 54
     3ac:	f2 e0       	ldi	r31, 0x02	; 2
     3ae:	8f 7b       	andi	r24, 0xBF	; 191
     3b0:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     3ba:	80 91 38 02 	lds	r24, 0x0238
     3be:	86 ff       	sbrs	r24, 6
     3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     3c2:	e8 e3       	ldi	r30, 0x38	; 56
     3c4:	f2 e0       	ldi	r31, 0x02	; 2
     3c6:	8f 7b       	andi	r24, 0xBF	; 191
     3c8:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     3d2:	80 91 3a 02 	lds	r24, 0x023A
     3d6:	86 ff       	sbrs	r24, 6
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     3da:	ea e3       	ldi	r30, 0x3A	; 58
     3dc:	f2 e0       	ldi	r31, 0x02	; 2
     3de:	8f 7b       	andi	r24, 0xBF	; 191
     3e0:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     3ea:	80 91 3c 02 	lds	r24, 0x023C
     3ee:	86 ff       	sbrs	r24, 6
     3f0:	08 c0       	rjmp	.+16     	; 0x402 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     3f2:	ec e3       	ldi	r30, 0x3C	; 60
     3f4:	f2 e0       	ldi	r31, 0x02	; 2
     3f6:	8f 7b       	andi	r24, 0xBF	; 191
     3f8:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     402:	80 91 3e 02 	lds	r24, 0x023E
     406:	86 ff       	sbrs	r24, 6
     408:	08 c0       	rjmp	.+16     	; 0x41a <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     40a:	ee e3       	ldi	r30, 0x3E	; 62
     40c:	f2 e0       	ldi	r31, 0x02	; 2
     40e:	8f 7b       	andi	r24, 0xBF	; 191
     410:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     41a:	80 91 40 02 	lds	r24, 0x0240
     41e:	86 ff       	sbrs	r24, 6
     420:	08 c0       	rjmp	.+16     	; 0x432 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     422:	e0 e4       	ldi	r30, 0x40	; 64
     424:	f2 e0       	ldi	r31, 0x02	; 2
     426:	8f 7b       	andi	r24, 0xBF	; 191
     428:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	86 e0       	ldi	r24, 0x06	; 6
     42e:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     432:	80 91 42 02 	lds	r24, 0x0242
     436:	86 ff       	sbrs	r24, 6
     438:	08 c0       	rjmp	.+16     	; 0x44a <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     43a:	e2 e4       	ldi	r30, 0x42	; 66
     43c:	f2 e0       	ldi	r31, 0x02	; 2
     43e:	8f 7b       	andi	r24, 0xBF	; 191
     440:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	87 e0       	ldi	r24, 0x07	; 7
     446:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     44a:	80 91 44 02 	lds	r24, 0x0244
     44e:	86 ff       	sbrs	r24, 6
     450:	08 c0       	rjmp	.+16     	; 0x462 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     452:	e4 e4       	ldi	r30, 0x44	; 68
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	8f 7b       	andi	r24, 0xBF	; 191
     458:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     462:	80 91 46 02 	lds	r24, 0x0246
     466:	86 ff       	sbrs	r24, 6
     468:	08 c0       	rjmp	.+16     	; 0x47a <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     46a:	e6 e4       	ldi	r30, 0x46	; 70
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	8f 7b       	andi	r24, 0xBF	; 191
     470:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	89 e0       	ldi	r24, 0x09	; 9
     476:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     47a:	80 91 48 02 	lds	r24, 0x0248
     47e:	86 ff       	sbrs	r24, 6
     480:	08 c0       	rjmp	.+16     	; 0x492 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     482:	e8 e4       	ldi	r30, 0x48	; 72
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	8f 7b       	andi	r24, 0xBF	; 191
     488:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     492:	08 95       	ret

00000494 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	8f 93       	push	r24
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4a4:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4a6:	ee e6       	ldi	r30, 0x6E	; 110
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	8d 7f       	andi	r24, 0xFD	; 253
     4ae:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     4b0:	e5 e4       	ldi	r30, 0x45	; 69
     4b2:	f4 e0       	ldi	r31, 0x04	; 4
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	82 83       	std	Z+2, r24	; 0x02
	
}
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	8f 91       	pop	r24
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     4f4:	e3 e7       	ldi	r30, 0x73	; 115
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	9f 5f       	subi	r25, 0xFF	; 255
     4fc:	91 83       	std	Z+1, r25	; 0x01
     4fe:	80 81       	ld	r24, Z
     500:	98 13       	cpse	r25, r24
     502:	4d c0       	rjmp	.+154    	; 0x59e <__vector_11+0xd4>
	{
		sequencer.next_step_flag = 1;
     504:	e5 e4       	ldi	r30, 0x45	; 69
     506:	f4 e0       	ldi	r31, 0x04	; 4
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	90 64       	ori	r25, 0x40	; 64
		internal_clock.beat_counter++; //overflows every 4 beats
     50c:	a5 e7       	ldi	r26, 0x75	; 117
     50e:	b2 e0       	ldi	r27, 0x02	; 2
     510:	2c 91       	ld	r18, X
     512:	31 e0       	ldi	r19, 0x01	; 1
     514:	32 0f       	add	r19, r18
     516:	33 70       	andi	r19, 0x03	; 3
     518:	2c 7f       	andi	r18, 0xFC	; 252
     51a:	23 2b       	or	r18, r19
     51c:	2c 93       	st	X, r18
		internal_clock.ppqn_counter = 0;
     51e:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == sequencer.step_num) { //end of measure
     522:	39 2f       	mov	r19, r25
     524:	36 95       	lsr	r19
     526:	3f 71       	andi	r19, 0x1F	; 31
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	23 0f       	add	r18, r19
     52c:	2f 71       	andi	r18, 0x1F	; 31
     52e:	22 0f       	add	r18, r18
     530:	91 7c       	andi	r25, 0xC1	; 193
     532:	92 2b       	or	r25, r18
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	20 81       	ld	r18, Z
     538:	22 95       	swap	r18
     53a:	2f 70       	andi	r18, 0x0F	; 15
     53c:	91 70       	andi	r25, 0x01	; 1
     53e:	92 95       	swap	r25
     540:	90 7f       	andi	r25, 0xF0	; 240
     542:	92 2b       	or	r25, r18
     544:	39 13       	cpse	r19, r25
     546:	2b c0       	rjmp	.+86     	; 0x59e <__vector_11+0xd4>
				
			sequencer.current_step = 0;
     548:	91 81       	ldd	r25, Z+1	; 0x01
     54a:	91 7c       	andi	r25, 0xC1	; 193
     54c:	91 83       	std	Z+1, r25	; 0x01
				
			if (sequencer.var_change == 1) {
     54e:	90 81       	ld	r25, Z
     550:	93 ff       	sbrs	r25, 3
     552:	1a c0       	rjmp	.+52     	; 0x588 <__vector_11+0xbe>
				sequencer.var_change = 0;
     554:	29 2f       	mov	r18, r25
     556:	27 7f       	andi	r18, 0xF7	; 247
     558:	20 83       	st	Z, r18
				switch (sequencer.variation_mode) {
     55a:	26 95       	lsr	r18
     55c:	23 70       	andi	r18, 0x03	; 3
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	21 30       	cpi	r18, 0x01	; 1
     562:	31 05       	cpc	r19, r1
     564:	59 f0       	breq	.+22     	; 0x57c <__vector_11+0xb2>
     566:	22 30       	cpi	r18, 0x02	; 2
     568:	31 05       	cpc	r19, r1
     56a:	11 f0       	breq	.+4      	; 0x570 <__vector_11+0xa6>
     56c:	23 2b       	or	r18, r19
     56e:	b9 f4       	brne	.+46     	; 0x59e <__vector_11+0xd4>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     570:	e5 e4       	ldi	r30, 0x45	; 69
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	90 81       	ld	r25, Z
     576:	9e 7f       	andi	r25, 0xFE	; 254
     578:	90 83       	st	Z, r25
					break;
     57a:	11 c0       	rjmp	.+34     	; 0x59e <__vector_11+0xd4>
				case VAR_B:
					sequencer.variation = VAR_B;
     57c:	e5 e4       	ldi	r30, 0x45	; 69
     57e:	f4 e0       	ldi	r31, 0x04	; 4
     580:	90 81       	ld	r25, Z
     582:	91 60       	ori	r25, 0x01	; 1
     584:	90 83       	st	Z, r25
					break;	
     586:	0b c0       	rjmp	.+22     	; 0x59e <__vector_11+0xd4>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     588:	96 70       	andi	r25, 0x06	; 6
     58a:	94 30       	cpi	r25, 0x04	; 4
     58c:	41 f4       	brne	.+16     	; 0x59e <__vector_11+0xd4>
					
				sequencer.variation ^= 1<<0; //toggle state
     58e:	e5 e4       	ldi	r30, 0x45	; 69
     590:	f4 e0       	ldi	r31, 0x04	; 4
     592:	90 81       	ld	r25, Z
     594:	29 2f       	mov	r18, r25
     596:	20 95       	com	r18
     598:	20 fb       	bst	r18, 0
     59a:	90 f9       	bld	r25, 0
     59c:	90 83       	st	Z, r25
			}
			//sequencer.current_measure++;
		}
	} //should make the else if so second condition doesn't need to be tested
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     59e:	86 95       	lsr	r24
     5a0:	90 91 74 02 	lds	r25, 0x0274
     5a4:	98 13       	cpse	r25, r24
     5a6:	ea c0       	rjmp	.+468    	; 0x77c <__vector_11+0x2b2>
		
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     5a8:	30 91 d3 01 	lds	r19, 0x01D3
     5ac:	20 91 d6 01 	lds	r18, 0x01D6
     5b0:	e8 e6       	ldi	r30, 0x68	; 104
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	82 2f       	mov	r24, r18
     5b6:	83 2b       	or	r24, r19
     5b8:	80 95       	com	r24
     5ba:	95 81       	ldd	r25, Z+5	; 0x05
     5bc:	89 23       	and	r24, r25
     5be:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     5c0:	80 91 76 03 	lds	r24, 0x0376
     5c4:	81 ff       	sbrs	r24, 1
     5c6:	aa c0       	rjmp	.+340    	; 0x71c <__vector_11+0x252>
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     5c8:	c9 e4       	ldi	r28, 0x49	; 73
     5ca:	d4 e0       	ldi	r29, 0x04	; 4
     5cc:	e8 81       	ld	r30, Y
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	b2 96       	adiw	r30, 0x22	; 34
     5d2:	05 e4       	ldi	r16, 0x45	; 69
     5d4:	14 e0       	ldi	r17, 0x04	; 4
     5d6:	d8 01       	movw	r26, r16
     5d8:	8c 91       	ld	r24, X
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	81 70       	andi	r24, 0x01	; 1
     5e0:	b7 e6       	ldi	r27, 0x67	; 103
     5e2:	8b 9f       	mul	r24, r27
     5e4:	e0 0d       	add	r30, r0
     5e6:	f1 1d       	adc	r31, r1
     5e8:	11 24       	eor	r1, r1
     5ea:	eb 58       	subi	r30, 0x8B	; 139
     5ec:	fc 4f       	sbci	r31, 0xFC	; 252
     5ee:	92 81       	ldd	r25, Z+2	; 0x02
     5f0:	83 81       	ldd	r24, Z+3	; 0x03
     5f2:	e8 e6       	ldi	r30, 0x68	; 104
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     5f8:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     5fa:	0e 94 23 04 	call	0x846	; 0x846 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     5fe:	88 81       	ld	r24, Y
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	e8 0f       	add	r30, r24
     60a:	f9 1f       	adc	r31, r25
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	e0 50       	subi	r30, 0x00	; 0
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	85 81       	ldd	r24, Z+5	; 0x05
     616:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
								
			switch (sequencer.variation_mode) {
     61a:	f8 01       	movw	r30, r16
     61c:	80 81       	ld	r24, Z
     61e:	86 95       	lsr	r24
     620:	83 70       	andi	r24, 0x03	; 3
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	91 05       	cpc	r25, r1
     628:	51 f0       	breq	.+20     	; 0x63e <__vector_11+0x174>
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	91 05       	cpc	r25, r1
     62e:	a9 f0       	breq	.+42     	; 0x65a <__vector_11+0x190>
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	01 f5       	brne	.+64     	; 0x674 <__vector_11+0x1aa>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     634:	20 91 d3 01 	lds	r18, 0x01D3
     638:	20 93 4a 04 	sts	0x044A, r18
					break;					
     63c:	1b c0       	rjmp	.+54     	; 0x674 <__vector_11+0x1aa>
				case VAR_B:
					if (sequencer.var_change == 1) {
     63e:	20 91 45 04 	lds	r18, 0x0445
     642:	23 ff       	sbrs	r18, 3
     644:	05 c0       	rjmp	.+10     	; 0x650 <__vector_11+0x186>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     646:	20 91 d3 01 	lds	r18, 0x01D3
     64a:	20 93 4a 04 	sts	0x044A, r18
     64e:	12 c0       	rjmp	.+36     	; 0x674 <__vector_11+0x1aa>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     650:	20 91 d6 01 	lds	r18, 0x01D6
     654:	20 93 4a 04 	sts	0x044A, r18
     658:	0d c0       	rjmp	.+26     	; 0x674 <__vector_11+0x1aa>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     65a:	20 91 45 04 	lds	r18, 0x0445
     65e:	20 fd       	sbrc	r18, 0
     660:	05 c0       	rjmp	.+10     	; 0x66c <__vector_11+0x1a2>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     662:	20 91 d3 01 	lds	r18, 0x01D3
     666:	20 93 4a 04 	sts	0x044A, r18
     66a:	04 c0       	rjmp	.+8      	; 0x674 <__vector_11+0x1aa>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     66c:	20 91 d6 01 	lds	r18, 0x01D6
     670:	20 93 4a 04 	sts	0x044A, r18
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     674:	20 91 75 02 	lds	r18, 0x0275
     678:	23 70       	andi	r18, 0x03	; 3
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	22 30       	cpi	r18, 0x02	; 2
     67e:	31 05       	cpc	r19, r1
     680:	0c f0       	brlt	.+2      	; 0x684 <__vector_11+0x1ba>
     682:	75 c0       	rjmp	.+234    	; 0x76e <__vector_11+0x2a4>
				
				if (sequencer.var_change == 1) {
     684:	20 91 45 04 	lds	r18, 0x0445
     688:	23 ff       	sbrs	r18, 3
     68a:	32 c0       	rjmp	.+100    	; 0x6f0 <__vector_11+0x226>
					
					switch (sequencer.variation_mode) {
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	91 05       	cpc	r25, r1
     690:	69 f0       	breq	.+26     	; 0x6ac <__vector_11+0x1e2>
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	91 05       	cpc	r25, r1
     696:	91 f0       	breq	.+36     	; 0x6bc <__vector_11+0x1f2>
     698:	89 2b       	or	r24, r25
     69a:	51 f5       	brne	.+84     	; 0x6f0 <__vector_11+0x226>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     69c:	ea e4       	ldi	r30, 0x4A	; 74
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	90 91 d6 01 	lds	r25, 0x01D6
     6a4:	80 81       	ld	r24, Z
     6a6:	89 2b       	or	r24, r25
     6a8:	80 83       	st	Z, r24
							break;
     6aa:	22 c0       	rjmp	.+68     	; 0x6f0 <__vector_11+0x226>
						case VAR_B:
							if (sequencer.var_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6ac:	ea e4       	ldi	r30, 0x4A	; 74
     6ae:	f4 e0       	ldi	r31, 0x04	; 4
     6b0:	90 91 d6 01 	lds	r25, 0x01D6
     6b4:	80 81       	ld	r24, Z
     6b6:	89 2b       	or	r24, r25
     6b8:	80 83       	st	Z, r24
     6ba:	1a c0       	rjmp	.+52     	; 0x6f0 <__vector_11+0x226>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     6bc:	20 fd       	sbrc	r18, 0
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <__vector_11+0x20e>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6c0:	ea e4       	ldi	r30, 0x4A	; 74
     6c2:	f4 e0       	ldi	r31, 0x04	; 4
     6c4:	90 91 d6 01 	lds	r25, 0x01D6
     6c8:	80 81       	ld	r24, Z
     6ca:	89 2b       	or	r24, r25
     6cc:	80 83       	st	Z, r24
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     6ce:	26 70       	andi	r18, 0x06	; 6
     6d0:	24 30       	cpi	r18, 0x04	; 4
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__vector_11+0x20c>
     6d4:	4c c0       	rjmp	.+152    	; 0x76e <__vector_11+0x2a4>
     6d6:	12 c0       	rjmp	.+36     	; 0x6fc <__vector_11+0x232>
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     6d8:	ea e4       	ldi	r30, 0x4A	; 74
     6da:	f4 e0       	ldi	r31, 0x04	; 4
     6dc:	90 91 d3 01 	lds	r25, 0x01D3
     6e0:	80 81       	ld	r24, Z
     6e2:	89 2b       	or	r24, r25
     6e4:	80 83       	st	Z, r24
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     6e6:	26 70       	andi	r18, 0x06	; 6
     6e8:	24 30       	cpi	r18, 0x04	; 4
     6ea:	09 f0       	breq	.+2      	; 0x6ee <__vector_11+0x224>
     6ec:	40 c0       	rjmp	.+128    	; 0x76e <__vector_11+0x2a4>
     6ee:	0e c0       	rjmp	.+28     	; 0x70c <__vector_11+0x242>
     6f0:	82 2f       	mov	r24, r18
     6f2:	86 70       	andi	r24, 0x06	; 6
     6f4:	84 30       	cpi	r24, 0x04	; 4
     6f6:	d9 f5       	brne	.+118    	; 0x76e <__vector_11+0x2a4>
						if (sequencer.variation == VAR_A) {
     6f8:	20 fd       	sbrc	r18, 0
     6fa:	08 c0       	rjmp	.+16     	; 0x70c <__vector_11+0x242>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6fc:	ea e4       	ldi	r30, 0x4A	; 74
     6fe:	f4 e0       	ldi	r31, 0x04	; 4
     700:	90 91 d6 01 	lds	r25, 0x01D6
     704:	80 81       	ld	r24, Z
     706:	89 2b       	or	r24, r25
     708:	80 83       	st	Z, r24
     70a:	31 c0       	rjmp	.+98     	; 0x76e <__vector_11+0x2a4>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     70c:	ea e4       	ldi	r30, 0x4A	; 74
     70e:	f4 e0       	ldi	r31, 0x04	; 4
     710:	90 91 d3 01 	lds	r25, 0x01D3
     714:	80 81       	ld	r24, Z
     716:	89 2b       	or	r24, r25
     718:	80 83       	st	Z, r24
     71a:	29 c0       	rjmp	.+82     	; 0x76e <__vector_11+0x2a4>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     71c:	e8 e6       	ldi	r30, 0x68	; 104
     71e:	f2 e0       	ldi	r31, 0x02	; 2
     720:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     722:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     724:	80 91 45 04 	lds	r24, 0x0445
     728:	86 95       	lsr	r24
     72a:	83 70       	andi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	91 05       	cpc	r25, r1
     732:	41 f0       	breq	.+16     	; 0x744 <__vector_11+0x27a>
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	91 05       	cpc	r25, r1
     738:	11 f0       	breq	.+4      	; 0x73e <__vector_11+0x274>
     73a:	89 2b       	or	r24, r25
     73c:	29 f4       	brne	.+10     	; 0x748 <__vector_11+0x27e>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     73e:	30 93 4a 04 	sts	0x044A, r19
				break;
     742:	02 c0       	rjmp	.+4      	; 0x748 <__vector_11+0x27e>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     744:	20 93 4a 04 	sts	0x044A, r18
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     748:	80 91 75 02 	lds	r24, 0x0275
     74c:	83 70       	andi	r24, 0x03	; 3
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	02 97       	sbiw	r24, 0x02	; 2
     752:	6c f4       	brge	.+26     	; 0x76e <__vector_11+0x2a4>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     754:	80 91 45 04 	lds	r24, 0x0445
     758:	86 70       	andi	r24, 0x06	; 6
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	29 f4       	brne	.+10     	; 0x768 <__vector_11+0x29e>
     75e:	ea e4       	ldi	r30, 0x4A	; 74
     760:	f4 e0       	ldi	r31, 0x04	; 4
     762:	80 81       	ld	r24, Z
     764:	28 2b       	or	r18, r24
     766:	20 83       	st	Z, r18
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     76e:	e8 e6       	ldi	r30, 0x68	; 104
     770:	f2 e0       	ldi	r31, 0x02	; 2
     772:	90 91 4a 04 	lds	r25, 0x044A
     776:	85 81       	ldd	r24, Z+5	; 0x05
     778:	89 2b       	or	r24, r25
     77a:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	7f 91       	pop	r23
     78e:	6f 91       	pop	r22
     790:	5f 91       	pop	r21
     792:	4f 91       	pop	r20
     794:	3f 91       	pop	r19
     796:	2f 91       	pop	r18
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	9c 01       	movw	r18, r24
     7ae:	22 0f       	add	r18, r18
     7b0:	33 1f       	adc	r19, r19
     7b2:	82 0f       	add	r24, r18
     7b4:	93 1f       	adc	r25, r19
     7b6:	dc 01       	movw	r26, r24
     7b8:	a8 59       	subi	r26, 0x98	; 152
     7ba:	be 4f       	sbci	r27, 0xFE	; 254
     7bc:	2c 91       	ld	r18, X
     7be:	e2 2f       	mov	r30, r18
     7c0:	ef 70       	andi	r30, 0x0F	; 15
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	e8 59       	subi	r30, 0x98	; 152
     7c6:	fd 4f       	sbci	r31, 0xFD	; 253
     7c8:	ec 01       	movw	r28, r24
     7ca:	c9 59       	subi	r28, 0x99	; 153
     7cc:	de 4f       	sbci	r29, 0xFE	; 254
     7ce:	30 81       	ld	r19, Z
     7d0:	88 81       	ld	r24, Y
     7d2:	83 2b       	or	r24, r19
     7d4:	80 83       	st	Z, r24
	led[led_index].state = 1;
     7d6:	82 2f       	mov	r24, r18
     7d8:	80 61       	ori	r24, 0x10	; 16
     7da:	8c 93       	st	X, r24

}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <turn_off>:

void turn_off(uint8_t led_index) {
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	9c 01       	movw	r18, r24
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	82 0f       	add	r24, r18
     7f0:	93 1f       	adc	r25, r19
     7f2:	dc 01       	movw	r26, r24
     7f4:	a8 59       	subi	r26, 0x98	; 152
     7f6:	be 4f       	sbci	r27, 0xFE	; 254
     7f8:	2c 91       	ld	r18, X
     7fa:	e2 2f       	mov	r30, r18
     7fc:	ef 70       	andi	r30, 0x0F	; 15
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	e8 59       	subi	r30, 0x98	; 152
     802:	fd 4f       	sbci	r31, 0xFD	; 253
     804:	ec 01       	movw	r28, r24
     806:	c9 59       	subi	r28, 0x99	; 153
     808:	de 4f       	sbci	r29, 0xFE	; 254
     80a:	88 81       	ld	r24, Y
     80c:	80 95       	com	r24
     80e:	90 81       	ld	r25, Z
     810:	89 23       	and	r24, r25
     812:	80 83       	st	Z, r24
	led[led_index].state = 0;
     814:	82 2f       	mov	r24, r18
     816:	8f 7e       	andi	r24, 0xEF	; 239
     818:	8c 93       	st	X, r24
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	2e 0f       	add	r18, r30
     82c:	3f 1f       	adc	r19, r31
     82e:	f9 01       	movw	r30, r18
     830:	e8 59       	subi	r30, 0x98	; 152
     832:	fe 4f       	sbci	r31, 0xFE	; 254
     834:	90 81       	ld	r25, Z
     836:	94 ff       	sbrs	r25, 4
     838:	03 c0       	rjmp	.+6      	; 0x840 <toggle+0x20>
		
		turn_off(led_index);
     83a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <turn_off>
     83e:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     840:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
     844:	08 95       	ret

00000846 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     846:	e8 e6       	ldi	r30, 0x68	; 104
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     850:	87 81       	ldd	r24, Z+7	; 0x07
     852:	80 72       	andi	r24, 0x20	; 32
     854:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     856:	83 81       	ldd	r24, Z+3	; 0x03
     858:	8f 70       	andi	r24, 0x0F	; 15
     85a:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     85c:	86 81       	ldd	r24, Z+6	; 0x06
     85e:	8f 7c       	andi	r24, 0xCF	; 207
     860:	86 83       	std	Z+6, r24	; 0x06
     862:	08 95       	ret

00000864 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     864:	08 95       	ret

00000866 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     866:	08 95       	ret

00000868 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     868:	40 31       	cpi	r20, 0x10	; 16
     86a:	20 f4       	brcc	.+8      	; 0x874 <note_on_event+0xc>
     86c:	62 2f       	mov	r22, r18
     86e:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     870:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     874:	08 95       	ret

00000876 <update_step_board>:





void update_step_board() {
     876:	4f 92       	push	r4
     878:	5f 92       	push	r5
     87a:	6f 92       	push	r6
     87c:	7f 92       	push	r7
     87e:	9f 92       	push	r9
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     894:	80 91 76 03 	lds	r24, 0x0376
     898:	81 ff       	sbrs	r24, 1
     89a:	ce c0       	rjmp	.+412    	; 0xa38 <__stack+0x139>
     89c:	80 91 75 03 	lds	r24, 0x0375
     8a0:	81 50       	subi	r24, 0x01	; 1
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <update_step_board+0x32>
     8a6:	c8 c0       	rjmp	.+400    	; 0xa38 <__stack+0x139>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     8a8:	80 91 49 04 	lds	r24, 0x0449
     8ac:	80 31       	cpi	r24, 0x10	; 16
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <update_step_board+0x3c>
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__stack+0x73>
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
     8b4:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f5 e4       	ldi	r31, 0x45	; 69
     8ba:	af 2e       	mov	r10, r31
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	bf 2e       	mov	r11, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	cc 24       	eor	r12, r12
     8c4:	c3 94       	inc	r12
     8c6:	d1 2c       	mov	r13, r1
     8c8:	0f 2e       	mov	r0, r31
     8ca:	f7 e6       	ldi	r31, 0x67	; 103
     8cc:	9f 2e       	mov	r9, r31
     8ce:	f0 2d       	mov	r31, r0
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     8d0:	09 e4       	ldi	r16, 0x49	; 73
     8d2:	14 e0       	ldi	r17, 0x04	; 4
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
							
				if (button[i].state) {
     8d4:	fe 01       	movw	r30, r28
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	ee 5e       	subi	r30, 0xEE	; 238
     8dc:	fd 4f       	sbci	r31, 0xFD	; 253
     8de:	80 81       	ld	r24, Z
     8e0:	86 ff       	sbrs	r24, 6
     8e2:	41 c0       	rjmp	.+130    	; 0x966 <__stack+0x67>
								
					toggle(i);
     8e4:	8c 2f       	mov	r24, r28
     8e6:	0e 94 10 04 	call	0x820	; 0x820 <toggle>
					button[i].state ^= button[i].state;
     8ea:	fe 01       	movw	r30, r28
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ee 5e       	subi	r30, 0xEE	; 238
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	80 81       	ld	r24, Z
     8f6:	8f 7b       	andi	r24, 0xBF	; 191
     8f8:	80 83       	st	Z, r24
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     8fa:	d5 01       	movw	r26, r10
     8fc:	8c 91       	ld	r24, X
     8fe:	80 fb       	bst	r24, 0
     900:	ee 24       	eor	r14, r14
     902:	e0 f8       	bld	r14, 0
     904:	f1 2c       	mov	r15, r1
     906:	9e 9c       	mul	r9, r14
     908:	c0 01       	movw	r24, r0
     90a:	9f 9c       	mul	r9, r15
     90c:	90 0d       	add	r25, r0
     90e:	11 24       	eor	r1, r1
     910:	fc 01       	movw	r30, r24
     912:	e9 54       	subi	r30, 0x49	; 73
     914:	fc 4f       	sbci	r31, 0xFC	; 252
     916:	96 01       	movw	r18, r12
     918:	0c 2e       	mov	r0, r28
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0x1d>
     924:	29 01       	movw	r4, r18
     926:	03 2e       	mov	r0, r19
     928:	00 0c       	add	r0, r0
     92a:	66 08       	sbc	r6, r6
     92c:	77 08       	sbc	r7, r7
     92e:	40 81       	ld	r20, Z
     930:	51 81       	ldd	r21, Z+1	; 0x01
     932:	62 81       	ldd	r22, Z+2	; 0x02
     934:	73 81       	ldd	r23, Z+3	; 0x03
     936:	44 25       	eor	r20, r4
     938:	55 25       	eor	r21, r5
     93a:	66 25       	eor	r22, r6
     93c:	77 25       	eor	r23, r7
     93e:	40 83       	st	Z, r20
     940:	51 83       	std	Z+1, r21	; 0x01
     942:	62 83       	std	Z+2, r22	; 0x02
     944:	73 83       	std	Z+3, r23	; 0x03
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     946:	d8 01       	movw	r26, r16
     948:	ec 91       	ld	r30, X
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	b2 96       	adiw	r30, 0x22	; 34
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	e8 0f       	add	r30, r24
     954:	f9 1f       	adc	r31, r25
     956:	eb 58       	subi	r30, 0x8B	; 139
     958:	fc 4f       	sbci	r31, 0xFC	; 252
     95a:	82 81       	ldd	r24, Z+2	; 0x02
     95c:	93 81       	ldd	r25, Z+3	; 0x03
     95e:	28 27       	eor	r18, r24
     960:	39 27       	eor	r19, r25
     962:	33 83       	std	Z+3, r19	; 0x03
     964:	22 83       	std	Z+2, r18	; 0x02
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     966:	21 96       	adiw	r28, 0x01	; 1
     968:	c0 31       	cpi	r28, 0x10	; 16
     96a:	d1 05       	cpc	r29, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
     96e:	b2 cf       	rjmp	.-156    	; 0x8d4 <update_step_board+0x5e>
     970:	63 c0       	rjmp	.+198    	; 0xa38 <__stack+0x139>
     972:	c0 e0       	ldi	r28, 0x00	; 0
     974:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     976:	0f 2e       	mov	r0, r31
     978:	f5 e4       	ldi	r31, 0x45	; 69
     97a:	cf 2e       	mov	r12, r31
     97c:	f4 e0       	ldi	r31, 0x04	; 4
     97e:	df 2e       	mov	r13, r31
     980:	f0 2d       	mov	r31, r0
     982:	0f 2e       	mov	r0, r31
     984:	f9 e4       	ldi	r31, 0x49	; 73
     986:	ef 2e       	mov	r14, r31
     988:	f4 e0       	ldi	r31, 0x04	; 4
     98a:	ff 2e       	mov	r15, r31
     98c:	f0 2d       	mov	r31, r0
     98e:	0f 2e       	mov	r0, r31
     990:	f7 e6       	ldi	r31, 0x67	; 103
     992:	9f 2e       	mov	r9, r31
     994:	f0 2d       	mov	r31, r0
     996:	aa 24       	eor	r10, r10
     998:	a3 94       	inc	r10
     99a:	b1 2c       	mov	r11, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     99c:	fe 01       	movw	r30, r28
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	ee 5e       	subi	r30, 0xEE	; 238
     9a4:	fd 4f       	sbci	r31, 0xFD	; 253
     9a6:	80 81       	ld	r24, Z
     9a8:	86 ff       	sbrs	r24, 6
     9aa:	41 c0       	rjmp	.+130    	; 0xa2e <__stack+0x12f>
					
				toggle(i);
     9ac:	8c 2f       	mov	r24, r28
     9ae:	0e 94 10 04 	call	0x820	; 0x820 <toggle>
				button[i].state ^= button[i].state;
     9b2:	fe 01       	movw	r30, r28
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	df 01       	movw	r26, r30
     9ba:	ae 5e       	subi	r26, 0xEE	; 238
     9bc:	bd 4f       	sbci	r27, 0xFD	; 253
     9be:	8c 91       	ld	r24, X
     9c0:	8f 7b       	andi	r24, 0xBF	; 191
     9c2:	8c 93       	st	X, r24
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     9c4:	d6 01       	movw	r26, r12
     9c6:	8c 91       	ld	r24, X
     9c8:	08 2f       	mov	r16, r24
     9ca:	01 70       	andi	r16, 0x01	; 1
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	d7 01       	movw	r26, r14
     9d0:	4c 91       	ld	r20, X
     9d2:	24 2f       	mov	r18, r20
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	90 9e       	mul	r9, r16
     9d8:	c0 01       	movw	r24, r0
     9da:	91 9e       	mul	r9, r17
     9dc:	90 0d       	add	r25, r0
     9de:	11 24       	eor	r1, r1
     9e0:	e8 0f       	add	r30, r24
     9e2:	f9 1f       	adc	r31, r25
     9e4:	eb 58       	subi	r30, 0x8B	; 139
     9e6:	fc 4f       	sbci	r31, 0xFC	; 252
     9e8:	b5 01       	movw	r22, r10
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
     9ec:	66 0f       	add	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	4a 95       	dec	r20
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <__stack+0xed>
     9f4:	ab 01       	movw	r20, r22
     9f6:	62 81       	ldd	r22, Z+2	; 0x02
     9f8:	73 81       	ldd	r23, Z+3	; 0x03
     9fa:	46 27       	eor	r20, r22
     9fc:	57 27       	eor	r21, r23
     9fe:	53 83       	std	Z+3, r21	; 0x03
     a00:	42 83       	std	Z+2, r20	; 0x02
				sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;				
     a02:	f9 01       	movw	r30, r18
     a04:	b2 96       	adiw	r30, 0x22	; 34
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	8e 0f       	add	r24, r30
     a0c:	9f 1f       	adc	r25, r31
     a0e:	fc 01       	movw	r30, r24
     a10:	eb 58       	subi	r30, 0x8B	; 139
     a12:	fc 4f       	sbci	r31, 0xFC	; 252
     a14:	82 81       	ldd	r24, Z+2	; 0x02
     a16:	93 81       	ldd	r25, Z+3	; 0x03
     a18:	95 01       	movw	r18, r10
     a1a:	0c 2e       	mov	r0, r28
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x123>
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	0a 94       	dec	r0
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <__stack+0x11f>
     a26:	82 27       	eor	r24, r18
     a28:	93 27       	eor	r25, r19
     a2a:	93 83       	std	Z+3, r25	; 0x03
     a2c:	82 83       	std	Z+2, r24	; 0x02
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     a2e:	21 96       	adiw	r28, 0x01	; 1
     a30:	c0 31       	cpi	r28, 0x10	; 16
     a32:	d1 05       	cpc	r29, r1
     a34:	09 f0       	breq	.+2      	; 0xa38 <__stack+0x139>
     a36:	b2 cf       	rjmp	.-156    	; 0x99c <__stack+0x9d>
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	9f 90       	pop	r9
     a4e:	7f 90       	pop	r7
     a50:	6f 90       	pop	r6
     a52:	5f 90       	pop	r5
     a54:	4f 90       	pop	r4
     a56:	08 95       	ret

00000a58 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     a58:	0e 94 32 06 	call	0xc64	; 0xc64 <update_tempo>
	read_switches();
     a5c:	0e 94 27 07 	call	0xe4e	; 0xe4e <read_switches>
	check_start_stop_tap();
     a60:	0e 94 9c 07 	call	0xf38	; 0xf38 <check_start_stop_tap>
	
	parse_switch_data();
     a64:	0e 94 75 07 	call	0xeea	; 0xeea <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     a68:	80 91 75 03 	lds	r24, 0x0375
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	11 f4       	brne	.+4      	; 0xa74 <refresh+0x1c>
     a70:	0e 94 c5 01 	call	0x38a	; 0x38a <live_hits>
	update_mode();
     a74:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <update_mode>
	check_clear_switch();
     a78:	0e 94 ba 08 	call	0x1174	; 0x1174 <check_clear_switch>
	check_variation_switches();
     a7c:	0e 94 85 08 	call	0x110a	; 0x110a <check_variation_switches>
	check_inst_switches();
     a80:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <check_inst_switches>
	update_step_board();
     a84:	0e 94 3b 04 	call	0x876	; 0x876 <update_step_board>
	process_step();
     a88:	0e 94 60 06 	call	0xcc0	; 0xcc0 <process_step>
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     a8c:	0e 94 03 07 	call	0xe06	; 0xe06 <update_spi>
	PORTD &= ~(1<<TRIG);
     a90:	5d 98       	cbi	0x0b, 5	; 11
     a92:	08 95       	ret

00000a94 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     a94:	8f e1       	ldi	r24, 0x1F	; 31
     a96:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     a9a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     a9e:	88 ed       	ldi	r24, 0xD8	; 216
     aa0:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     aa4:	51 9a       	sbi	0x0a, 1	; 10
     aa6:	08 95       	ret

00000aa8 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     ad4:	80 91 c6 00 	lds	r24, 0x00C6
     ad8:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     ada:	ae 01       	movw	r20, r28
     adc:	4f 5f       	subi	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	88 e8       	ldi	r24, 0x88	; 136
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 27 0a 	call	0x144e	; 0x144e <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     aea:	0f 90       	pop	r0
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_20>:

ISR (USART0_TX_vect) {
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1


	
}
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     b26:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     b28:	8d b1       	in	r24, 0x0d	; 13
     b2a:	8c 60       	ori	r24, 0x0C	; 12
     b2c:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     b2e:	87 b1       	in	r24, 0x07	; 7
     b30:	8e 60       	ori	r24, 0x0E	; 14
     b32:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     b34:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     b36:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     b38:	88 b1       	in	r24, 0x08	; 8
     b3a:	81 7f       	andi	r24, 0xF1	; 241
     b3c:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     b3e:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     b40:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     b42:	80 e5       	ldi	r24, 0x50	; 80
     b44:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     b48:	ed ea       	ldi	r30, 0xAD	; 173
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     b58:	8d e1       	ldi	r24, 0x1D	; 29
     b5a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
	turn_on(FILL_MANUAL);
     b5e:	82 e2       	ldi	r24, 0x22	; 34
     b60:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
	
	update_spi();
     b64:	0e 94 03 07 	call	0xe06	; 0xe06 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     b68:	84 b5       	in	r24, 0x24	; 36
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     b6e:	81 ee       	ldi	r24, 0xE1	; 225
     b70:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     b72:	88 e8       	ldi	r24, 0x88	; 136
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 f6 09 	call	0x13ec	; 0x13ec <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     b7a:	64 e3       	ldi	r22, 0x34	; 52
     b7c:	74 e0       	ldi	r23, 0x04	; 4
     b7e:	88 e8       	ldi	r24, 0x88	; 136
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     b86:	62 e3       	ldi	r22, 0x32	; 50
     b88:	74 e0       	ldi	r23, 0x04	; 4
     b8a:	88 e8       	ldi	r24, 0x88	; 136
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     b92:	63 e3       	ldi	r22, 0x33	; 51
     b94:	74 e0       	ldi	r23, 0x04	; 4
     b96:	88 e8       	ldi	r24, 0x88	; 136
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     b9e:	0e 94 4a 05 	call	0xa94	; 0xa94 <setup_midi_usart>
	
	setup_internal_clock();
     ba2:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     ba6:	e3 e7       	ldi	r30, 0x73	; 115
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     bae:	c1 e0       	ldi	r28, 0x01	; 1
     bb0:	c1 83       	std	Z+1, r28	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     bb2:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     bb6:	e5 e4       	ldi	r30, 0x45	; 69
     bb8:	f4 e0       	ldi	r31, 0x04	; 4
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	82 83       	std	Z+2, r24	; 0x02
	sequencer.START = 0;
     bc0:	a6 e7       	ldi	r26, 0x76	; 118
     bc2:	b3 e0       	ldi	r27, 0x03	; 3
     bc4:	8c 91       	ld	r24, X
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	8c 93       	st	X, r24
	//update_tempo();
	sequencer.variation_mode = 0;
     bca:	80 81       	ld	r24, Z
     bcc:	89 7f       	andi	r24, 0xF9	; 249
	sequencer.step_num = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     bce:	80 6f       	ori	r24, 0xF0	; 240
     bd0:	80 83       	st	Z, r24
     bd2:	81 81       	ldd	r24, Z+1	; 0x01
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	81 83       	std	Z+1, r24	; 0x01
	turn_on(BASIC_VAR_A_LED);
     bd8:	84 e2       	ldi	r24, 0x24	; 36
     bda:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
	sequencer.mode = PATTERN_FIRST;
     bde:	c0 93 75 03 	sts	0x0375, r28
	sei(); //enable global interrupts	
     be2:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     be4:	88 e8       	ldi	r24, 0x88	; 136
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	0e 94 20 0c 	call	0x1840	; 0x1840 <midi_device_process>
	
	refresh();		
     bec:	0e 94 2c 05 	call	0xa58	; 0xa58 <refresh>

	
	}
     bf0:	f9 cf       	rjmp	.-14     	; 0xbe4 <main+0xbe>

00000bf2 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     bf2:	80 91 52 02 	lds	r24, 0x0252
     bf6:	86 ff       	sbrs	r24, 6
     bf8:	34 c0       	rjmp	.+104    	; 0xc62 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     bfa:	e2 e5       	ldi	r30, 0x52	; 82
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	8f 7b       	andi	r24, 0xBF	; 191
     c00:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     c02:	80 91 76 03 	lds	r24, 0x0376
     c06:	80 ff       	sbrs	r24, 0
     c08:	0c c0       	rjmp	.+24     	; 0xc22 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     c0a:	80 91 59 02 	lds	r24, 0x0259
     c0e:	88 23       	and	r24, r24
     c10:	21 f0       	breq	.+8      	; 0xc1a <update_mode+0x28>
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	80 93 59 02 	sts	0x0259, r24
     c18:	0e c0       	rjmp	.+28     	; 0xc36 <update_mode+0x44>
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	80 93 59 02 	sts	0x0259, r24
     c20:	0a c0       	rjmp	.+20     	; 0xc36 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c22:	80 91 59 02 	lds	r24, 0x0259
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	86 30       	cpi	r24, 0x06	; 6
     c2a:	19 f0       	breq	.+6      	; 0xc32 <update_mode+0x40>
     c2c:	80 93 59 02 	sts	0x0259, r24
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <update_mode+0x44>
     c32:	10 92 59 02 	sts	0x0259, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c36:	20 91 59 02 	lds	r18, 0x0259
     c3a:	e2 2f       	mov	r30, r18
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	e4 5f       	subi	r30, 0xF4	; 244
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	80 81       	ld	r24, Z
     c44:	80 93 75 03 	sts	0x0375, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     c48:	e8 e6       	ldi	r30, 0x68	; 104
     c4a:	f2 e0       	ldi	r31, 0x02	; 2
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <update_mode+0x64>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     c5a:	94 81       	ldd	r25, Z+4	; 0x04
     c5c:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     c5e:	89 2b       	or	r24, r25
     c60:	84 83       	std	Z+4, r24	; 0x04
     c62:	08 95       	ret

00000c64 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     c64:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     c68:	90 93 5d 02 	sts	0x025D, r25
     c6c:	80 93 5c 02 	sts	0x025C, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     c70:	20 91 5a 02 	lds	r18, 0x025A
     c74:	30 91 5b 02 	lds	r19, 0x025B
     c78:	82 1b       	sub	r24, r18
     c7a:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     c7c:	95 95       	asr	r25
     c7e:	87 95       	ror	r24
     c80:	95 95       	asr	r25
     c82:	87 95       	ror	r24
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	90 93 5b 02 	sts	0x025B, r25
     c8c:	80 93 5a 02 	sts	0x025A, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     c90:	23 e6       	ldi	r18, 0x63	; 99
     c92:	34 e0       	ldi	r19, 0x04	; 4
     c94:	a9 01       	movw	r20, r18
     c96:	48 1b       	sub	r20, r24
     c98:	59 0b       	sbc	r21, r25
     c9a:	ca 01       	movw	r24, r20
     c9c:	e3 e7       	ldi	r30, 0x73	; 115
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	54 83       	std	Z+4, r21	; 0x04
     ca2:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     ca4:	25 81       	ldd	r18, Z+5	; 0x05
     ca6:	36 81       	ldd	r19, Z+6	; 0x06
     ca8:	42 17       	cp	r20, r18
     caa:	53 07       	cpc	r21, r19
     cac:	11 f0       	breq	.+4      	; 0xcb2 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     cae:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     cb2:	e3 e7       	ldi	r30, 0x73	; 115
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	83 81       	ldd	r24, Z+3	; 0x03
     cb8:	94 81       	ldd	r25, Z+4	; 0x04
     cba:	96 83       	std	Z+6, r25	; 0x06
     cbc:	85 83       	std	Z+5, r24	; 0x05
     cbe:	08 95       	ret

00000cc0 <process_step>:
	
}

void process_step(void) {
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     cce:	80 91 76 03 	lds	r24, 0x0376
     cd2:	81 ff       	sbrs	r24, 1
     cd4:	7d c0       	rjmp	.+250    	; 0xdd0 <process_step+0x110>
			
			if (sequencer.next_step_flag) {
     cd6:	80 91 46 04 	lds	r24, 0x0446
     cda:	86 ff       	sbrs	r24, 6
     cdc:	82 c0       	rjmp	.+260    	; 0xde2 <process_step+0x122>
				sequencer.next_step_flag = 0;
     cde:	e5 e4       	ldi	r30, 0x45	; 69
     ce0:	f4 e0       	ldi	r31, 0x04	; 4
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	8f 7b       	andi	r24, 0xBF	; 191
     ce6:	81 83       	std	Z+1, r24	; 0x01
				while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     ce8:	80 91 47 04 	lds	r24, 0x0447
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	88 23       	and	r24, r24
     cf0:	f1 f3       	breq	.-4      	; 0xcee <process_step+0x2e>
				PORTD |= (1<<TRIG);
     cf2:	5d 9a       	sbi	0x0b, 5	; 11
				spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     cf4:	06 e4       	ldi	r16, 0x46	; 70
     cf6:	14 e0       	ldi	r17, 0x04	; 4
     cf8:	d8 01       	movw	r26, r16
     cfa:	8c 91       	ld	r24, X
     cfc:	86 95       	lsr	r24
     cfe:	8f 71       	andi	r24, 0x1F	; 31
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <process_step+0x4a>
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	8a 95       	dec	r24
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <process_step+0x46>
     d0e:	e0 91 49 04 	lds	r30, 0x0449
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	b2 96       	adiw	r30, 0x22	; 34
     d16:	0f 2e       	mov	r0, r31
     d18:	f5 e4       	ldi	r31, 0x45	; 69
     d1a:	ef 2e       	mov	r14, r31
     d1c:	f4 e0       	ldi	r31, 0x04	; 4
     d1e:	ff 2e       	mov	r15, r31
     d20:	f0 2d       	mov	r31, r0
     d22:	d7 01       	movw	r26, r14
     d24:	8c 91       	ld	r24, X
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	0f 2e       	mov	r0, r31
     d2c:	f7 e6       	ldi	r31, 0x67	; 103
     d2e:	df 2e       	mov	r13, r31
     d30:	f0 2d       	mov	r31, r0
     d32:	81 70       	andi	r24, 0x01	; 1
     d34:	d8 9e       	mul	r13, r24
     d36:	e0 0d       	add	r30, r0
     d38:	f1 1d       	adc	r31, r1
     d3a:	11 24       	eor	r1, r1
     d3c:	eb 58       	subi	r30, 0x8B	; 139
     d3e:	fc 4f       	sbci	r31, 0xFC	; 252
     d40:	92 81       	ldd	r25, Z+2	; 0x02
     d42:	83 81       	ldd	r24, Z+3	; 0x03
				spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     d44:	e8 e6       	ldi	r30, 0x68	; 104
     d46:	f2 e0       	ldi	r31, 0x02	; 2
     d48:	49 2f       	mov	r20, r25
     d4a:	42 23       	and	r20, r18
     d4c:	40 95       	com	r20
			
			if (sequencer.next_step_flag) {
				sequencer.next_step_flag = 0;
				while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
				PORTD |= (1<<TRIG);
				spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d4e:	92 2b       	or	r25, r18
				spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     d50:	94 23       	and	r25, r20
     d52:	91 83       	std	Z+1, r25	; 0x01
				spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
				spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d54:	98 2f       	mov	r25, r24
     d56:	93 23       	and	r25, r19
     d58:	90 95       	com	r25
				sequencer.next_step_flag = 0;
				while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
				PORTD |= (1<<TRIG);
				spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
				spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
				spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     d5a:	83 2b       	or	r24, r19
				spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d5c:	89 23       	and	r24, r25
     d5e:	80 83       	st	Z, r24
				trigger_step();
     d60:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
				if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     d64:	f7 01       	movw	r30, r14
     d66:	80 81       	ld	r24, Z
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	c8 2f       	mov	r28, r24
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	df 2f       	mov	r29, r31
     d70:	dc 9e       	mul	r13, r28
     d72:	f0 01       	movw	r30, r0
     d74:	dd 9e       	mul	r13, r29
     d76:	f0 0d       	add	r31, r0
     d78:	11 24       	eor	r1, r1
     d7a:	e9 54       	subi	r30, 0x49	; 73
     d7c:	fc 4f       	sbci	r31, 0xFC	; 252
     d7e:	d8 01       	movw	r26, r16
     d80:	8c 91       	ld	r24, X
     d82:	86 95       	lsr	r24
     d84:	8f 71       	andi	r24, 0x1F	; 31
     d86:	40 81       	ld	r20, Z
     d88:	51 81       	ldd	r21, Z+1	; 0x01
     d8a:	62 81       	ldd	r22, Z+2	; 0x02
     d8c:	73 81       	ldd	r23, Z+3	; 0x03
     d8e:	8a 01       	movw	r16, r20
     d90:	9b 01       	movw	r18, r22
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <process_step+0xdc>
     d94:	36 95       	lsr	r19
     d96:	27 95       	ror	r18
     d98:	17 95       	ror	r17
     d9a:	07 95       	ror	r16
     d9c:	8a 95       	dec	r24
     d9e:	d2 f7       	brpl	.-12     	; 0xd94 <process_step+0xd4>
     da0:	00 ff       	sbrs	r16, 0
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <process_step+0xf4>
					spi_data[8] |= 1<<ACCENT;
     da4:	e8 e6       	ldi	r30, 0x68	; 104
     da6:	f2 e0       	ldi	r31, 0x02	; 2
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	80 87       	std	Z+8, r24	; 0x08
					turn_on(ACCENT_1_LED);
     dae:	84 e1       	ldi	r24, 0x14	; 20
     db0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
				}
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     db4:	ee e6       	ldi	r30, 0x6E	; 110
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	80 83       	st	Z, r24
				TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     dbe:	85 b5       	in	r24, 0x25	; 37
     dc0:	83 60       	ori	r24, 0x03	; 3
     dc2:	85 bd       	out	0x25, r24	; 37
				sequencer.trigger_finished = 0;
     dc4:	e5 e4       	ldi	r30, 0x45	; 69
     dc6:	f4 e0       	ldi	r31, 0x04	; 4
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	82 83       	std	Z+2, r24	; 0x02
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <process_step+0x122>
				} else {
				

				
			}
		} else if (sequencer.next_step_flag){
     dd0:	80 91 46 04 	lds	r24, 0x0446
     dd4:	86 ff       	sbrs	r24, 6
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <process_step+0x122>
			
			sequencer.next_step_flag = 0;
     dd8:	e5 e4       	ldi	r30, 0x45	; 69
     dda:	f4 e0       	ldi	r31, 0x04	; 4
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	8f 7b       	andi	r24, 0xBF	; 191
     de0:	81 83       	std	Z+1, r24	; 0x01
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	08 95       	ret

00000df2 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     df2:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     df6:	ed ea       	ldi	r30, 0xAD	; 173
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 23       	and	r24, r24
     dfe:	ec f7       	brge	.-6      	; 0xdfa <spi_shift_byte+0x8>
	return SPDR1;
     e00:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     e04:	08 95       	ret

00000e06 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     e0a:	c8 e6       	ldi	r28, 0x68	; 104
     e0c:	d2 e0       	ldi	r29, 0x02	; 2
     e0e:	88 81       	ld	r24, Y
     e10:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     e38:	8f 81       	ldd	r24, Y+7	; 0x07
     e3a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     e3e:	88 85       	ldd	r24, Y+8	; 0x08
     e40:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     e44:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     e46:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <read_switches>:

void read_switches(void) { //reads switch data
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     e52:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
     e5a:	c3 e6       	ldi	r28, 0x63	; 99
     e5c:	d2 e0       	ldi	r29, 0x02	; 2
     e5e:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
     e66:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
     e76:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <spi_shift_byte>
     e7e:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     e80:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
     e82:	28 81       	ld	r18, Y
     e84:	92 2f       	mov	r25, r18
     e86:	96 95       	lsr	r25
     e88:	e6 e7       	ldi	r30, 0x76	; 118
     e8a:	f3 e0       	ldi	r31, 0x03	; 3
     e8c:	30 81       	ld	r19, Z
     e8e:	90 fb       	bst	r25, 0
     e90:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	49 2f       	mov	r20, r25
     e96:	42 95       	swap	r20
     e98:	4f 70       	andi	r20, 0x0F	; 15
     e9a:	40 fb       	bst	r20, 0
     e9c:	32 f9       	bld	r19, 2
     e9e:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     ea0:	ee e5       	ldi	r30, 0x5E	; 94
     ea2:	f2 e0       	ldi	r31, 0x02	; 2
     ea4:	30 81       	ld	r19, Z
     ea6:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     ea8:	32 27       	eor	r19, r18
     eaa:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     eac:	23 23       	and	r18, r19
     eae:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     eb0:	31 81       	ldd	r19, Z+1	; 0x01
     eb2:	29 81       	ldd	r18, Y+1	; 0x01
     eb4:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     eb6:	32 27       	eor	r19, r18
     eb8:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     eba:	23 23       	and	r18, r19
     ebc:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     ebe:	22 81       	ldd	r18, Z+2	; 0x02
     ec0:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     ec2:	29 27       	eor	r18, r25
     ec4:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     ec6:	92 23       	and	r25, r18
     ec8:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     eca:	23 81       	ldd	r18, Z+3	; 0x03
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     ed0:	29 27       	eor	r18, r25
     ed2:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     ed4:	92 23       	and	r25, r18
     ed6:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     ed8:	94 81       	ldd	r25, Z+4	; 0x04
     eda:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     edc:	98 27       	eor	r25, r24
     ede:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     ee0:	89 23       	and	r24, r25
     ee2:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     eee:	da 01       	movw	r26, r20
     ef0:	aa 0f       	add	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	ae 5e       	subi	r26, 0xEE	; 238
     ef6:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     ef8:	8c 91       	ld	r24, X
     efa:	e8 2f       	mov	r30, r24
     efc:	e6 95       	lsr	r30
     efe:	e6 95       	lsr	r30
     f00:	e6 95       	lsr	r30
     f02:	e7 70       	andi	r30, 0x07	; 7
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	ed 59       	subi	r30, 0x9D	; 157
     f08:	fd 4f       	sbci	r31, 0xFD	; 253
     f0a:	20 81       	ld	r18, Z
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	98 2f       	mov	r25, r24
     f10:	97 70       	andi	r25, 0x07	; 7
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <parse_switch_data+0x2e>
     f14:	35 95       	asr	r19
     f16:	27 95       	ror	r18
     f18:	9a 95       	dec	r25
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <parse_switch_data+0x2a>
     f1c:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     f1e:	86 fb       	bst	r24, 6
     f20:	99 27       	eor	r25, r25
     f22:	90 f9       	bld	r25, 0
     f24:	29 27       	eor	r18, r25
     f26:	20 fb       	bst	r18, 0
     f28:	86 f9       	bld	r24, 6
     f2a:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     f2c:	4f 5f       	subi	r20, 0xFF	; 255
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	43 32       	cpi	r20, 0x23	; 35
     f32:	51 05       	cpc	r21, r1
     f34:	e1 f6       	brne	.-72     	; 0xeee <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     f36:	08 95       	ret

00000f38 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     f38:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     f3a:	80 91 71 02 	lds	r24, 0x0271
     f3e:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     f40:	89 27       	eor	r24, r25
     f42:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     f46:	89 23       	and	r24, r25
     f48:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
     f4c:	e6 e7       	ldi	r30, 0x76	; 118
     f4e:	f3 e0       	ldi	r31, 0x03	; 3
     f50:	90 81       	ld	r25, Z
     f52:	91 fb       	bst	r25, 1
     f54:	22 27       	eor	r18, r18
     f56:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     f58:	86 95       	lsr	r24
     f5a:	82 27       	eor	r24, r18
     f5c:	80 fb       	bst	r24, 0
     f5e:	91 f9       	bld	r25, 1
     f60:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
     f62:	91 ff       	sbrs	r25, 1
     f64:	2a c0       	rjmp	.+84     	; 0xfba <check_start_stop_tap+0x82>
     f66:	21 11       	cpse	r18, r1
     f68:	2a c0       	rjmp	.+84     	; 0xfbe <check_start_stop_tap+0x86>
		
		sequencer.current_step = 0;
     f6a:	e5 e4       	ldi	r30, 0x45	; 69
     f6c:	f4 e0       	ldi	r31, 0x04	; 4
     f6e:	81 81       	ldd	r24, Z+1	; 0x01
		sequencer.next_step_flag = 1;
     f70:	81 7c       	andi	r24, 0xC1	; 193
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	81 83       	std	Z+1, r24	; 0x01
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
     f76:	10 92 74 02 	sts	0x0274, r1
		sequencer.var_change = 0;
     f7a:	80 81       	ld	r24, Z
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	80 83       	st	Z, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
     f80:	81 fd       	sbrc	r24, 1
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <check_start_stop_tap+0x52>
			
			sequencer.variation = VAR_A; //start on variation A
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	80 83       	st	Z, r24
     f88:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
     f8a:	e5 e4       	ldi	r30, 0x45	; 69
     f8c:	f4 e0       	ldi	r31, 0x04	; 4
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
     f94:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
     f96:	0e 94 23 04 	call	0x846	; 0x846 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
     f9a:	80 91 49 04 	lds	r24, 0x0449
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	fc 01       	movw	r30, r24
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	e8 0f       	add	r30, r24
     fa8:	f9 1f       	adc	r31, r25
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e0 50       	subi	r30, 0x00	; 0
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	85 81       	ldd	r24, Z+5	; 0x05
     fb4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
     fb8:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	61 f3       	breq	.-40     	; 0xf96 <check_start_stop_tap+0x5e>
     fbe:	08 95       	ret

00000fc0 <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
     fc0:	3f 92       	push	r3
     fc2:	4f 92       	push	r4
     fc4:	5f 92       	push	r5
     fc6:	6f 92       	push	r6
     fc8:	7f 92       	push	r7
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	0f 2e       	mov	r0, r31
     fe4:	f5 e0       	ldi	r31, 0x05	; 5
     fe6:	ef 2e       	mov	r14, r31
     fe8:	f1 e0       	ldi	r31, 0x01	; 1
     fea:	ff 2e       	mov	r15, r31
     fec:	f0 2d       	mov	r31, r0
     fee:	0f 2e       	mov	r0, r31
     ff0:	fb e3       	ldi	r31, 0x3B	; 59
     ff2:	8f 2e       	mov	r8, r31
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	9f 2e       	mov	r9, r31
     ff8:	f0 2d       	mov	r31, r0
     ffa:	02 e1       	ldi	r16, 0x12	; 18
     ffc:	10 e0       	ldi	r17, 0x00	; 0
     ffe:	c1 e1       	ldi	r28, 0x11	; 17
    1000:	d0 e0       	ldi	r29, 0x00	; 0
    1002:	c1 2c       	mov	r12, r1
    1004:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1006:	0f 2e       	mov	r0, r31
    1008:	f9 e4       	ldi	r31, 0x49	; 73
    100a:	af 2e       	mov	r10, r31
    100c:	f4 e0       	ldi	r31, 0x04	; 4
    100e:	bf 2e       	mov	r11, r31
    1010:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    1012:	0f 2e       	mov	r0, r31
    1014:	ff e5       	ldi	r31, 0x5F	; 95
    1016:	4f 2e       	mov	r4, r31
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	5f 2e       	mov	r5, r31
    101c:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    101e:	0f 2e       	mov	r0, r31
    1020:	ff e0       	ldi	r31, 0x0F	; 15
    1022:	3f 2e       	mov	r3, r31
    1024:	f0 2d       	mov	r31, r0
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <check_inst_switches+0x80>
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	c8 1a       	sub	r12, r24
    102c:	d8 0a       	sbc	r13, r24
    102e:	21 96       	adiw	r28, 0x01	; 1
    1030:	0f 5f       	subi	r16, 0xFF	; 255
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	a6 e0       	ldi	r26, 0x06	; 6
    1036:	ea 0e       	add	r14, r26
    1038:	f1 1c       	adc	r15, r1
    103a:	b6 e0       	ldi	r27, 0x06	; 6
    103c:	8b 0e       	add	r8, r27
    103e:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    1040:	fe 01       	movw	r30, r28
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 5e       	subi	r30, 0xEE	; 238
    1048:	fd 4f       	sbci	r31, 0xFD	; 253
    104a:	80 81       	ld	r24, Z
    104c:	86 ff       	sbrs	r24, 6
    104e:	37 c0       	rjmp	.+110    	; 0x10be <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1050:	fe 01       	movw	r30, r28
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	ee 5e       	subi	r30, 0xEE	; 238
    1058:	fd 4f       	sbci	r31, 0xFD	; 253
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    105e:	0e 94 23 04 	call	0x846	; 0x846 <turn_off_all_inst_leds>
    1062:	f7 01       	movw	r30, r14
    1064:	d7 01       	movw	r26, r14
    1066:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1068:	8c 91       	ld	r24, X
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	a9 f0       	breq	.+42     	; 0x1098 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    106e:	d5 01       	movw	r26, r10
    1070:	8c 91       	ld	r24, X
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	c8 16       	cp	r12, r24
    1076:	d9 06       	cpc	r13, r25
    1078:	49 f4       	brne	.+18     	; 0x108c <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    107a:	f4 01       	movw	r30, r8
    107c:	80 81       	ld	r24, Z
    107e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
    1082:	89 e0       	ldi	r24, 0x09	; 9
    1084:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    1086:	d5 01       	movw	r26, r10
    1088:	8c 93       	st	X, r24
    108a:	19 c0       	rjmp	.+50     	; 0x10be <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    108c:	80 81       	ld	r24, Z
    108e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    1092:	f5 01       	movw	r30, r10
    1094:	c0 82       	st	Z, r12
    1096:	13 c0       	rjmp	.+38     	; 0x10be <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1098:	d5 01       	movw	r26, r10
    109a:	8c 91       	ld	r24, X
    109c:	86 30       	cpi	r24, 0x06	; 6
    109e:	51 f4       	brne	.+20     	; 0x10b4 <check_inst_switches+0xf4>
    10a0:	c7 31       	cpi	r28, 0x17	; 23
    10a2:	d1 05       	cpc	r29, r1
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    10a6:	f2 01       	movw	r30, r4
    10a8:	80 81       	ld	r24, Z
    10aa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
					sequencer.current_inst = MA;
    10ae:	d5 01       	movw	r26, r10
    10b0:	3c 92       	st	X, r3
    10b2:	ba cf       	rjmp	.-140    	; 0x1028 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    10b4:	80 81       	ld	r24, Z
    10b6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    10ba:	f5 01       	movw	r30, r10
    10bc:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    10be:	0c 31       	cpi	r16, 0x1C	; 28
    10c0:	11 05       	cpc	r17, r1
    10c2:	0c f4       	brge	.+2      	; 0x10c6 <check_inst_switches+0x106>
    10c4:	b1 cf       	rjmp	.-158    	; 0x1028 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    10c6:	80 91 32 02 	lds	r24, 0x0232
    10ca:	86 ff       	sbrs	r24, 6
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    10ce:	e2 e3       	ldi	r30, 0x32	; 50
    10d0:	f2 e0       	ldi	r31, 0x02	; 2
    10d2:	8f 7b       	andi	r24, 0xBF	; 191
    10d4:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    10d6:	0e 94 23 04 	call	0x846	; 0x846 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    10da:	84 e1       	ldi	r24, 0x14	; 20
    10dc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
		sequencer.current_inst = AC;
    10e0:	80 e1       	ldi	r24, 0x10	; 16
    10e2:	80 93 49 04 	sts	0x0449, r24
	}
	
}	
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	9f 90       	pop	r9
    10fc:	8f 90       	pop	r8
    10fe:	7f 90       	pop	r7
    1100:	6f 90       	pop	r6
    1102:	5f 90       	pop	r5
    1104:	4f 90       	pop	r4
    1106:	3f 90       	pop	r3
    1108:	08 95       	ret

0000110a <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    110a:	80 91 4e 02 	lds	r24, 0x024E
    110e:	86 ff       	sbrs	r24, 6
    1110:	30 c0       	rjmp	.+96     	; 0x1172 <check_variation_switches+0x68>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f2 e0       	ldi	r31, 0x02	; 2
    1116:	8f 7b       	andi	r24, 0xBF	; 191
    1118:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    111a:	80 91 45 04 	lds	r24, 0x0445
    111e:	86 95       	lsr	r24
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	83 70       	andi	r24, 0x03	; 3
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	41 f0       	breq	.+16     	; 0x1138 <check_variation_switches+0x2e>
    1128:	e5 e4       	ldi	r30, 0x45	; 69
    112a:	f4 e0       	ldi	r31, 0x04	; 4
    112c:	88 0f       	add	r24, r24
    112e:	90 81       	ld	r25, Z
    1130:	99 7f       	andi	r25, 0xF9	; 249
    1132:	89 2b       	or	r24, r25
    1134:	80 83       	st	Z, r24
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <check_variation_switches+0x38>
    1138:	e5 e4       	ldi	r30, 0x45	; 69
    113a:	f4 e0       	ldi	r31, 0x04	; 4
    113c:	80 81       	ld	r24, Z
    113e:	89 7f       	andi	r24, 0xF9	; 249
    1140:	80 83       	st	Z, r24
		if (sequencer.START) {
    1142:	80 91 76 03 	lds	r24, 0x0376
    1146:	81 ff       	sbrs	r24, 1
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <check_variation_switches+0x4c>
			
			 sequencer.var_change = 1; //set change flag to be handled when new measure starts
    114a:	e5 e4       	ldi	r30, 0x45	; 69
    114c:	f4 e0       	ldi	r31, 0x04	; 4
    114e:	80 81       	ld	r24, Z
    1150:	88 60       	ori	r24, 0x08	; 8
    1152:	80 83       	st	Z, r24
    1154:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1156:	80 91 45 04 	lds	r24, 0x0445
    115a:	81 fd       	sbrc	r24, 1
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <check_variation_switches+0x5e>
				
				sequencer.variation = VAR_A;
    115e:	e5 e4       	ldi	r30, 0x45	; 69
    1160:	f4 e0       	ldi	r31, 0x04	; 4
    1162:	8e 7f       	andi	r24, 0xFE	; 254
    1164:	80 83       	st	Z, r24
    1166:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1168:	e5 e4       	ldi	r30, 0x45	; 69
    116a:	f4 e0       	ldi	r31, 0x04	; 4
    116c:	80 81       	ld	r24, Z
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	80 83       	st	Z, r24
    1172:	08 95       	ret

00001174 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1180:	80 91 76 03 	lds	r24, 0x0376
    1184:	86 70       	andi	r24, 0x06	; 6
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	09 f0       	breq	.+2      	; 0x118c <check_clear_switch+0x18>
    118a:	42 c0       	rjmp	.+132    	; 0x1210 <check_clear_switch+0x9c>
		
		switch (sequencer.mode) {
    118c:	80 91 75 03 	lds	r24, 0x0375
    1190:	81 11       	cpse	r24, r1
    1192:	57 c0       	rjmp	.+174    	; 0x1242 <check_clear_switch+0xce>
			
			case PATTERN_CLEAR:
				toggle(MODE_1_PATTERN_CLEAR);
    1194:	8c e1       	ldi	r24, 0x1C	; 28
    1196:	0e 94 10 04 	call	0x820	; 0x820 <toggle>
				//spi_data[0] = 0; //turn off all step LEDs
				//spi_data[1] = 0;
				for (int i = 0; i <= sequencer.step_num; i++) {
    119a:	20 91 45 04 	lds	r18, 0x0445
    119e:	82 2f       	mov	r24, r18
    11a0:	82 95       	swap	r24
    11a2:	8f 70       	andi	r24, 0x0F	; 15
    11a4:	20 91 46 04 	lds	r18, 0x0446
    11a8:	21 70       	andi	r18, 0x01	; 1
    11aa:	22 95       	swap	r18
    11ac:	20 7f       	andi	r18, 0xF0	; 240
    11ae:	28 2b       	or	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
					
					sequencer.pattern[sequencer.variation].part[i] = 0;
    11b2:	80 91 45 04 	lds	r24, 0x0445
    11b6:	80 fb       	bst	r24, 0
    11b8:	ee 24       	eor	r14, r14
    11ba:	e0 f8       	bld	r14, 0
    11bc:	f1 2c       	mov	r15, r1
    11be:	87 e6       	ldi	r24, 0x67	; 103
    11c0:	8e 9d       	mul	r24, r14
    11c2:	f0 01       	movw	r30, r0
    11c4:	8f 9d       	mul	r24, r15
    11c6:	f0 0d       	add	r31, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	e9 58       	subi	r30, 0x89	; 137
    11cc:	fc 4f       	sbci	r31, 0xFC	; 252
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	11 92       	st	Z+, r1
    11d4:	11 92       	st	Z+, r1
			
			case PATTERN_CLEAR:
				toggle(MODE_1_PATTERN_CLEAR);
				//spi_data[0] = 0; //turn off all step LEDs
				//spi_data[1] = 0;
				for (int i = 0; i <= sequencer.step_num; i++) {
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	28 17       	cp	r18, r24
    11da:	39 07       	cpc	r19, r25
    11dc:	d4 f7       	brge	.-12     	; 0x11d2 <check_clear_switch+0x5e>
    11de:	20 c0       	rjmp	.+64     	; 0x1220 <check_clear_switch+0xac>
					
				}
				
				for (int i = 0; i <17; i++) {
					
					sequencer.pattern[sequencer.variation].step_led_mask[i] = 0;
    11e0:	11 92       	st	Z+, r1
    11e2:	11 92       	st	Z+, r1
					
					sequencer.pattern[sequencer.variation].part[i] = 0;
					
				}
				
				for (int i = 0; i <17; i++) {
    11e4:	e8 17       	cp	r30, r24
    11e6:	f9 07       	cpc	r31, r25
    11e8:	d9 f7       	brne	.-10     	; 0x11e0 <check_clear_switch+0x6c>
					
					sequencer.pattern[sequencer.variation].step_led_mask[i] = 0;
					
				}
				
				sequencer.pattern[sequencer.variation].accent = 0;	
    11ea:	80 91 45 04 	lds	r24, 0x0445
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	c8 2f       	mov	r28, r24
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	d8 2f       	mov	r29, r24
    11f6:	87 e6       	ldi	r24, 0x67	; 103
    11f8:	8c 9f       	mul	r24, r28
    11fa:	f0 01       	movw	r30, r0
    11fc:	8d 9f       	mul	r24, r29
    11fe:	f0 0d       	add	r31, r0
    1200:	11 24       	eor	r1, r1
    1202:	e9 54       	subi	r30, 0x49	; 73
    1204:	fc 4f       	sbci	r31, 0xFC	; 252
    1206:	10 82       	st	Z, r1
    1208:	11 82       	std	Z+1, r1	; 0x01
    120a:	12 82       	std	Z+2, r1	; 0x02
    120c:	13 82       	std	Z+3, r1	; 0x03
				
				break;
    120e:	19 c0       	rjmp	.+50     	; 0x1242 <check_clear_switch+0xce>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    1210:	80 91 75 03 	lds	r24, 0x0375
    1214:	81 11       	cpse	r24, r1
    1216:	15 c0       	rjmp	.+42     	; 0x1242 <check_clear_switch+0xce>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    1218:	8c e1       	ldi	r24, 0x1C	; 28
    121a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <turn_on>
    121e:	11 c0       	rjmp	.+34     	; 0x1242 <check_clear_switch+0xce>
					
				}
				
				for (int i = 0; i <17; i++) {
					
					sequencer.pattern[sequencer.variation].step_led_mask[i] = 0;
    1220:	80 91 45 04 	lds	r24, 0x0445
    1224:	08 2f       	mov	r16, r24
    1226:	01 70       	andi	r16, 0x01	; 1
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	27 e6       	ldi	r18, 0x67	; 103
    122c:	20 9f       	mul	r18, r16
    122e:	c0 01       	movw	r24, r0
    1230:	21 9f       	mul	r18, r17
    1232:	90 0d       	add	r25, r0
    1234:	11 24       	eor	r1, r1
    1236:	fc 01       	movw	r30, r24
    1238:	e5 54       	subi	r30, 0x45	; 69
    123a:	fc 4f       	sbci	r31, 0xFC	; 252
    123c:	83 52       	subi	r24, 0x23	; 35
    123e:	9c 4f       	sbci	r25, 0xFC	; 252
    1240:	cf cf       	rjmp	.-98     	; 0x11e0 <check_clear_switch+0x6c>
			turn_on(MODE_1_PATTERN_CLEAR);
		}
		
	}
	
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1250:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1252:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1254:	74 83       	std	Z+4, r23	; 0x04
    1256:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1258:	11 82       	std	Z+1, r1	; 0x01
    125a:	10 82       	st	Z, r1
    125c:	08 95       	ret

0000125e <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	ec 01       	movw	r28, r24
    126a:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    126c:	0e 94 a8 09 	call	0x1350	; 0x1350 <store_and_clear_interrupt>
    1270:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1272:	f9 80       	ldd	r15, Y+1	; 0x01
    1274:	4f 2d       	mov	r20, r15
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	ca 01       	movw	r24, r20
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	2a 81       	ldd	r18, Y+2	; 0x02
    127e:	62 2f       	mov	r22, r18
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divmodhi4>
    1286:	28 81       	ld	r18, Y
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	82 17       	cp	r24, r18
    128c:	93 07       	cpc	r25, r19
    128e:	29 f4       	brne	.+10     	; 0x129a <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1290:	81 2f       	mov	r24, r17
    1292:	0e 94 ab 09 	call	0x1356	; 0x1356 <restore_interrupt_setting>
      return false;
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	12 c0       	rjmp	.+36     	; 0x12be <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    129a:	eb 81       	ldd	r30, Y+3	; 0x03
    129c:	fc 81       	ldd	r31, Y+4	; 0x04
    129e:	ef 0d       	add	r30, r15
    12a0:	f1 1d       	adc	r31, r1
    12a2:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    12a4:	29 81       	ldd	r18, Y+1	; 0x01
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	c9 01       	movw	r24, r18
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	6a 81       	ldd	r22, Y+2	; 0x02
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divmodhi4>
    12b4:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    12b6:	81 2f       	mov	r24, r17
    12b8:	0e 94 ab 09 	call	0x1356	; 0x1356 <restore_interrupt_setting>
      return true;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	08 95       	ret

000012ca <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    12d0:	0e 94 a8 09 	call	0x1350	; 0x1350 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    12d4:	39 81       	ldd	r19, Y+1	; 0x01
    12d6:	28 81       	ld	r18, Y
    12d8:	32 17       	cp	r19, r18
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    12dc:	c3 2f       	mov	r28, r19
    12de:	c2 1b       	sub	r28, r18
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <bytequeue_length+0x20>
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	c3 2f       	mov	r28, r19
    12e6:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    12e8:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    12ea:	0e 94 ab 09 	call	0x1356	; 0x1356 <restore_interrupt_setting>
   return len;
}
    12ee:	8c 2f       	mov	r24, r28
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    12f6:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    12f8:	80 81       	ld	r24, Z
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	9b 01       	movw	r18, r22
    12fe:	28 0f       	add	r18, r24
    1300:	31 1d       	adc	r19, r1
    1302:	c9 01       	movw	r24, r18
    1304:	62 81       	ldd	r22, Z+2	; 0x02
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divmodhi4>
    130c:	03 80       	ldd	r0, Z+3	; 0x03
    130e:	f4 81       	ldd	r31, Z+4	; 0x04
    1310:	e0 2d       	mov	r30, r0
    1312:	e8 0f       	add	r30, r24
    1314:	f9 1f       	adc	r31, r25
}
    1316:	80 81       	ld	r24, Z
    1318:	08 95       	ret

0000131a <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1324:	0e 94 a8 09 	call	0x1350	; 0x1350 <store_and_clear_interrupt>
    1328:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    132a:	88 81       	ld	r24, Y
    132c:	21 2f       	mov	r18, r17
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	b9 01       	movw	r22, r18
    1332:	68 0f       	add	r22, r24
    1334:	71 1d       	adc	r23, r1
    1336:	cb 01       	movw	r24, r22
    1338:	6a 81       	ldd	r22, Y+2	; 0x02
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divmodhi4>
    1340:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1342:	84 2f       	mov	r24, r20
    1344:	0e 94 ab 09 	call	0x1356	; 0x1356 <restore_interrupt_setting>
}
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	08 95       	ret

00001350 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1350:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1352:	f8 94       	cli
   return sreg;
}
    1354:	08 95       	ret

00001356 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1356:	8f bf       	out	0x3f, r24	; 63
    1358:	08 95       	ret

0000135a <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    135a:	88 1f       	adc	r24, r24
    135c:	88 27       	eor	r24, r24
    135e:	88 1f       	adc	r24, r24
    1360:	08 95       	ret

00001362 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	88 3f       	cpi	r24, 0xF8	; 248
    1366:	08 f4       	brcc	.+2      	; 0x136a <midi_is_realtime+0x8>
    1368:	90 e0       	ldi	r25, 0x00	; 0
}
    136a:	89 2f       	mov	r24, r25
    136c:	08 95       	ret

0000136e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    136e:	98 2f       	mov	r25, r24
    1370:	90 7f       	andi	r25, 0xF0	; 240
    1372:	90 3c       	cpi	r25, 0xC0	; 192
    1374:	b1 f0       	breq	.+44     	; 0x13a2 <midi_packet_length+0x34>
    1376:	58 f4       	brcc	.+22     	; 0x138e <midi_packet_length+0x20>
    1378:	90 39       	cpi	r25, 0x90	; 144
    137a:	41 f1       	breq	.+80     	; 0x13cc <midi_packet_length+0x5e>
    137c:	18 f4       	brcc	.+6      	; 0x1384 <midi_packet_length+0x16>
    137e:	90 38       	cpi	r25, 0x80	; 128
    1380:	19 f5       	brne	.+70     	; 0x13c8 <midi_packet_length+0x5a>
    1382:	24 c0       	rjmp	.+72     	; 0x13cc <midi_packet_length+0x5e>
    1384:	90 3a       	cpi	r25, 0xA0	; 160
    1386:	11 f1       	breq	.+68     	; 0x13cc <midi_packet_length+0x5e>
    1388:	90 3b       	cpi	r25, 0xB0	; 176
    138a:	f1 f4       	brne	.+60     	; 0x13c8 <midi_packet_length+0x5a>
    138c:	1f c0       	rjmp	.+62     	; 0x13cc <midi_packet_length+0x5e>
    138e:	90 3e       	cpi	r25, 0xE0	; 224
    1390:	e9 f0       	breq	.+58     	; 0x13cc <midi_packet_length+0x5e>
    1392:	18 f4       	brcc	.+6      	; 0x139a <midi_packet_length+0x2c>
    1394:	90 3d       	cpi	r25, 0xD0	; 208
    1396:	29 f0       	breq	.+10     	; 0x13a2 <midi_packet_length+0x34>
    1398:	17 c0       	rjmp	.+46     	; 0x13c8 <midi_packet_length+0x5a>
    139a:	90 3f       	cpi	r25, 0xF0	; 240
    139c:	21 f0       	breq	.+8      	; 0x13a6 <midi_packet_length+0x38>
    139e:	93 3f       	cpi	r25, 0xF3	; 243
    13a0:	99 f4       	brne	.+38     	; 0x13c8 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	08 95       	ret
      case 0xF0:
         switch(status) {
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	fc 01       	movw	r30, r24
    13aa:	e1 5f       	subi	r30, 0xF1	; 241
    13ac:	f1 09       	sbc	r31, r1
    13ae:	ef 30       	cpi	r30, 0x0F	; 15
    13b0:	f1 05       	cpc	r31, r1
    13b2:	40 f4       	brcc	.+16     	; 0x13c4 <midi_packet_length+0x56>
    13b4:	e6 5a       	subi	r30, 0xA6	; 166
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	08 95       	ret
         }
      default:
         return UNDEFINED;
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    13d2:	08 95       	ret

000013d4 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    13d4:	fc 01       	movw	r30, r24
    13d6:	75 83       	std	Z+5, r23	; 0x05
    13d8:	64 83       	std	Z+4, r22	; 0x04
    13da:	08 95       	ret

000013dc <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    13dc:	fc 01       	movw	r30, r24
    13de:	77 83       	std	Z+7, r23	; 0x07
    13e0:	66 83       	std	Z+6, r22	; 0x06
    13e2:	08 95       	ret

000013e4 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    13e4:	fc 01       	movw	r30, r24
    13e6:	77 8b       	std	Z+23, r23	; 0x17
    13e8:	66 8b       	std	Z+22, r22	; 0x16
    13ea:	08 95       	ret

000013ec <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    13f2:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    13f4:	1f a2       	std	Y+39, r1	; 0x27
    13f6:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    13f8:	bc 01       	movw	r22, r24
    13fa:	68 5d       	subi	r22, 0xD8	; 216
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	40 ec       	ldi	r20, 0xC0	; 192
    1400:	88 51       	subi	r24, 0x18	; 24
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	0e 94 28 09 	call	0x1250	; 0x1250 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1408:	1b 82       	std	Y+3, r1	; 0x03
    140a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    140c:	1d 82       	std	Y+5, r1	; 0x05
    140e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1410:	1f 82       	std	Y+7, r1	; 0x07
    1412:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1414:	19 86       	std	Y+9, r1	; 0x09
    1416:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1418:	1b 86       	std	Y+11, r1	; 0x0b
    141a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    141c:	1d 86       	std	Y+13, r1	; 0x0d
    141e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1420:	1f 86       	std	Y+15, r1	; 0x0f
    1422:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1424:	19 8a       	std	Y+17, r1	; 0x11
    1426:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1428:	1b 8a       	std	Y+19, r1	; 0x13
    142a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    142c:	1d 8a       	std	Y+21, r1	; 0x15
    142e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1430:	1f 8a       	std	Y+23, r1	; 0x17
    1432:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1434:	19 8e       	std	Y+25, r1	; 0x19
    1436:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1438:	1b 8e       	std	Y+27, r1	; 0x1b
    143a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    143c:	1d 8e       	std	Y+29, r1	; 0x1d
    143e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1440:	1f 8e       	std	Y+31, r1	; 0x1f
    1442:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1444:	19 a2       	std	Y+33, r1	; 0x21
    1446:	18 a2       	std	Y+32, r1	; 0x20
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    145a:	66 23       	and	r22, r22
    145c:	99 f0       	breq	.+38     	; 0x1484 <midi_device_input+0x36>
    145e:	ea 01       	movw	r28, r20
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	06 2f       	mov	r16, r22
    1464:	10 e0       	ldi	r17, 0x00	; 0
    1466:	0f 5f       	subi	r16, 0xFF	; 255
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	04 0f       	add	r16, r20
    146c:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    146e:	7c 01       	movw	r14, r24
    1470:	28 ee       	ldi	r18, 0xE8	; 232
    1472:	e2 0e       	add	r14, r18
    1474:	f1 1c       	adc	r15, r1
    1476:	69 91       	ld	r22, Y+
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 2f 09 	call	0x125e	; 0x125e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    147e:	c0 17       	cp	r28, r16
    1480:	d1 07       	cpc	r29, r17
    1482:	c9 f7       	brne	.-14     	; 0x1476 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	08 95       	ret

00001492 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <midi_input_callbacks+0x16>
    14a8:	1f 92       	push	r1
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	7c 01       	movw	r14, r24
    14b0:	6b 01       	movw	r12, r22
    14b2:	14 2f       	mov	r17, r20
    14b4:	b2 2e       	mov	r11, r18
    14b6:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    14b8:	dc 01       	movw	r26, r24
    14ba:	95 96       	adiw	r26, 0x25	; 37
    14bc:	8c 91       	ld	r24, X
    14be:	95 97       	sbiw	r26, 0x25	; 37
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	11 f5       	brne	.+68     	; 0x1508 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    14c4:	5a 96       	adiw	r26, 0x1a	; 26
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	5b 97       	sbiw	r26, 0x1b	; 27
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <midi_input_callbacks+0x40>
    14d0:	cc c0       	rjmp	.+408    	; 0x166a <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    14d2:	9b 01       	movw	r18, r22
    14d4:	21 50       	subi	r18, 0x01	; 1
    14d6:	31 09       	sbc	r19, r1
    14d8:	ab ea       	ldi	r26, 0xAB	; 171
    14da:	ba ea       	ldi	r27, 0xAA	; 170
    14dc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__umulhisi3>
    14e0:	96 95       	lsr	r25
    14e2:	87 95       	ror	r24
    14e4:	9c 01       	movw	r18, r24
    14e6:	22 0f       	add	r18, r18
    14e8:	33 1f       	adc	r19, r19
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    14ee:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    14f0:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    14f2:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    14f4:	4c 2d       	mov	r20, r12
    14f6:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    14f8:	9e 01       	movw	r18, r28
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	68 2f       	mov	r22, r24
    1500:	79 2f       	mov	r23, r25
    1502:	c7 01       	movw	r24, r14
    1504:	09 95       	icall
    1506:	be c0       	rjmp	.+380    	; 0x1684 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1508:	62 30       	cpi	r22, 0x02	; 2
    150a:	71 05       	cpc	r23, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <midi_input_callbacks+0x7e>
    150e:	55 c0       	rjmp	.+170    	; 0x15ba <midi_input_callbacks+0x128>
    1510:	63 30       	cpi	r22, 0x03	; 3
    1512:	71 05       	cpc	r23, r1
    1514:	29 f0       	breq	.+10     	; 0x1520 <midi_input_callbacks+0x8e>
    1516:	61 30       	cpi	r22, 0x01	; 1
    1518:	71 05       	cpc	r23, r1
    151a:	09 f0       	breq	.+2      	; 0x151e <midi_input_callbacks+0x8c>
    151c:	a1 c0       	rjmp	.+322    	; 0x1660 <midi_input_callbacks+0x1ce>
    151e:	88 c0       	rjmp	.+272    	; 0x1630 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1520:	84 2f       	mov	r24, r20
    1522:	80 7f       	andi	r24, 0xF0	; 240
    1524:	80 3a       	cpi	r24, 0xA0	; 160
    1526:	f1 f0       	breq	.+60     	; 0x1564 <midi_input_callbacks+0xd2>
    1528:	28 f4       	brcc	.+10     	; 0x1534 <midi_input_callbacks+0xa2>
    152a:	80 38       	cpi	r24, 0x80	; 128
    152c:	a9 f0       	breq	.+42     	; 0x1558 <midi_input_callbacks+0xc6>
    152e:	80 39       	cpi	r24, 0x90	; 144
    1530:	69 f0       	breq	.+26     	; 0x154c <midi_input_callbacks+0xba>
    1532:	2f c0       	rjmp	.+94     	; 0x1592 <midi_input_callbacks+0x100>
    1534:	80 3e       	cpi	r24, 0xE0	; 224
    1536:	e1 f0       	breq	.+56     	; 0x1570 <midi_input_callbacks+0xde>
    1538:	80 3f       	cpi	r24, 0xF0	; 240
    153a:	01 f1       	breq	.+64     	; 0x157c <midi_input_callbacks+0xea>
    153c:	80 3b       	cpi	r24, 0xB0	; 176
    153e:	49 f5       	brne	.+82     	; 0x1592 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    1540:	d7 01       	movw	r26, r14
    1542:	12 96       	adiw	r26, 0x02	; 2
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	13 97       	sbiw	r26, 0x03	; 3
              break;
    154a:	25 c0       	rjmp	.+74     	; 0x1596 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    154c:	d7 01       	movw	r26, r14
    154e:	14 96       	adiw	r26, 0x04	; 4
    1550:	ed 91       	ld	r30, X+
    1552:	fc 91       	ld	r31, X
    1554:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1556:	1f c0       	rjmp	.+62     	; 0x1596 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1558:	d7 01       	movw	r26, r14
    155a:	16 96       	adiw	r26, 0x06	; 6
    155c:	ed 91       	ld	r30, X+
    155e:	fc 91       	ld	r31, X
    1560:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1562:	19 c0       	rjmp	.+50     	; 0x1596 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1564:	d7 01       	movw	r26, r14
    1566:	18 96       	adiw	r26, 0x08	; 8
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	19 97       	sbiw	r26, 0x09	; 9
              break;
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1570:	d7 01       	movw	r26, r14
    1572:	1a 96       	adiw	r26, 0x0a	; 10
    1574:	ed 91       	ld	r30, X+
    1576:	fc 91       	ld	r31, X
    1578:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    157c:	42 3f       	cpi	r20, 0xF2	; 242
    157e:	09 f0       	breq	.+2      	; 0x1582 <midi_input_callbacks+0xf0>
    1580:	74 c0       	rjmp	.+232    	; 0x166a <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1582:	d7 01       	movw	r26, r14
    1584:	1c 96       	adiw	r26, 0x0c	; 12
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    158c:	30 97       	sbiw	r30, 0x00	; 0
    158e:	41 f4       	brne	.+16     	; 0x15a0 <midi_input_callbacks+0x10e>
    1590:	6c c0       	rjmp	.+216    	; 0x166a <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1592:	e0 e0       	ldi	r30, 0x00	; 0
    1594:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1596:	30 97       	sbiw	r30, 0x00	; 0
    1598:	09 f4       	brne	.+2      	; 0x159c <midi_input_callbacks+0x10a>
    159a:	67 c0       	rjmp	.+206    	; 0x166a <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    159c:	12 3f       	cpi	r17, 0xF2	; 242
    159e:	31 f4       	brne	.+12     	; 0x15ac <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    15a0:	2a 2d       	mov	r18, r10
    15a2:	4b 2d       	mov	r20, r11
    15a4:	62 ef       	ldi	r22, 0xF2	; 242
    15a6:	c7 01       	movw	r24, r14
    15a8:	09 95       	icall
    15aa:	6c c0       	rjmp	.+216    	; 0x1684 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    15ac:	2a 2d       	mov	r18, r10
    15ae:	4b 2d       	mov	r20, r11
    15b0:	61 2f       	mov	r22, r17
    15b2:	6f 70       	andi	r22, 0x0F	; 15
    15b4:	c7 01       	movw	r24, r14
    15b6:	09 95       	icall
    15b8:	65 c0       	rjmp	.+202    	; 0x1684 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    15ba:	84 2f       	mov	r24, r20
    15bc:	80 7f       	andi	r24, 0xF0	; 240
    15be:	80 3d       	cpi	r24, 0xD0	; 208
    15c0:	51 f0       	breq	.+20     	; 0x15d6 <midi_input_callbacks+0x144>
    15c2:	80 3f       	cpi	r24, 0xF0	; 240
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <midi_input_callbacks+0x150>
    15c6:	80 3c       	cpi	r24, 0xC0	; 192
    15c8:	01 f5       	brne	.+64     	; 0x160a <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    15ca:	d7 01       	movw	r26, r14
    15cc:	1e 96       	adiw	r26, 0x0e	; 14
    15ce:	ed 91       	ld	r30, X+
    15d0:	fc 91       	ld	r31, X
    15d2:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    15d4:	1c c0       	rjmp	.+56     	; 0x160e <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    15d6:	d7 01       	movw	r26, r14
    15d8:	50 96       	adiw	r26, 0x10	; 16
    15da:	ed 91       	ld	r30, X+
    15dc:	fc 91       	ld	r31, X
    15de:	51 97       	sbiw	r26, 0x11	; 17
              break;
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    15e2:	43 3f       	cpi	r20, 0xF3	; 243
    15e4:	41 f4       	brne	.+16     	; 0x15f6 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    15e6:	d7 01       	movw	r26, r14
    15e8:	52 96       	adiw	r26, 0x12	; 18
    15ea:	ed 91       	ld	r30, X+
    15ec:	fc 91       	ld	r31, X
    15ee:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    15f0:	30 97       	sbiw	r30, 0x00	; 0
    15f2:	99 f4       	brne	.+38     	; 0x161a <midi_input_callbacks+0x188>
    15f4:	3a c0       	rjmp	.+116    	; 0x166a <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    15f6:	41 3f       	cpi	r20, 0xF1	; 241
    15f8:	c1 f5       	brne	.+112    	; 0x166a <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    15fa:	d7 01       	movw	r26, r14
    15fc:	54 96       	adiw	r26, 0x14	; 20
    15fe:	ed 91       	ld	r30, X+
    1600:	fc 91       	ld	r31, X
    1602:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1604:	30 97       	sbiw	r30, 0x00	; 0
    1606:	49 f4       	brne	.+18     	; 0x161a <midi_input_callbacks+0x188>
    1608:	30 c0       	rjmp	.+96     	; 0x166a <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    160a:	e0 e0       	ldi	r30, 0x00	; 0
    160c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    160e:	30 97       	sbiw	r30, 0x00	; 0
    1610:	61 f1       	breq	.+88     	; 0x166a <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1612:	81 2f       	mov	r24, r17
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	81 3f       	cpi	r24, 0xF1	; 241
    1618:	29 f4       	brne	.+10     	; 0x1624 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    161a:	4b 2d       	mov	r20, r11
    161c:	61 2f       	mov	r22, r17
    161e:	c7 01       	movw	r24, r14
    1620:	09 95       	icall
    1622:	30 c0       	rjmp	.+96     	; 0x1684 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1624:	4b 2d       	mov	r20, r11
    1626:	61 2f       	mov	r22, r17
    1628:	6f 70       	andi	r22, 0x0F	; 15
    162a:	c7 01       	movw	r24, r14
    162c:	09 95       	icall
    162e:	2a c0       	rjmp	.+84     	; 0x1684 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1630:	84 2f       	mov	r24, r20
    1632:	0e 94 b1 09 	call	0x1362	; 0x1362 <midi_is_realtime>
    1636:	88 23       	and	r24, r24
    1638:	31 f0       	breq	.+12     	; 0x1646 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    163a:	d7 01       	movw	r26, r14
    163c:	56 96       	adiw	r26, 0x16	; 22
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	57 97       	sbiw	r26, 0x17	; 23
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1646:	16 3f       	cpi	r17, 0xF6	; 246
    1648:	81 f4       	brne	.+32     	; 0x166a <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    164a:	d7 01       	movw	r26, r14
    164c:	58 96       	adiw	r26, 0x18	; 24
    164e:	ed 91       	ld	r30, X+
    1650:	fc 91       	ld	r31, X
    1652:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1654:	30 97       	sbiw	r30, 0x00	; 0
    1656:	49 f0       	breq	.+18     	; 0x166a <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1658:	61 2f       	mov	r22, r17
    165a:	c7 01       	movw	r24, r14
    165c:	09 95       	icall
    165e:	12 c0       	rjmp	.+36     	; 0x1684 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1660:	64 30       	cpi	r22, 0x04	; 4
    1662:	71 05       	cpc	r23, r1
    1664:	10 f0       	brcs	.+4      	; 0x166a <midi_input_callbacks+0x1d8>
          cnt = 0;
    1666:	c1 2c       	mov	r12, r1
    1668:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    166a:	d7 01       	movw	r26, r14
    166c:	5c 96       	adiw	r26, 0x1c	; 28
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	5d 97       	sbiw	r26, 0x1d	; 29
    1674:	30 97       	sbiw	r30, 0x00	; 0
    1676:	31 f0       	breq	.+12     	; 0x1684 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1678:	0a 2d       	mov	r16, r10
    167a:	2b 2d       	mov	r18, r11
    167c:	41 2f       	mov	r20, r17
    167e:	b6 01       	movw	r22, r12
    1680:	c7 01       	movw	r24, r14
    1682:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1684:	d7 01       	movw	r26, r14
    1686:	5e 96       	adiw	r26, 0x1e	; 30
    1688:	ed 91       	ld	r30, X+
    168a:	fc 91       	ld	r31, X
    168c:	5f 97       	sbiw	r26, 0x1f	; 31
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	31 f0       	breq	.+12     	; 0x169e <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1692:	0a 2d       	mov	r16, r10
    1694:	2b 2d       	mov	r18, r11
    1696:	41 2f       	mov	r20, r17
    1698:	b6 01       	movw	r22, r12
    169a:	c7 01       	movw	r24, r14
    169c:	09 95       	icall
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	bf 90       	pop	r11
    16b6:	af 90       	pop	r10
    16b8:	08 95       	ret

000016ba <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
    16c6:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    16c8:	86 2f       	mov	r24, r22
    16ca:	0e 94 b1 09 	call	0x1362	; 0x1362 <midi_is_realtime>
    16ce:	88 23       	and	r24, r24
    16d0:	69 f0       	breq	.+26     	; 0x16ec <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    16d2:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    16d8:	00 e0       	ldi	r16, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	41 2f       	mov	r20, r17
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_input_callbacks>
    device->input_state = state;
    16e8:	fd a2       	std	Y+37, r15	; 0x25
    16ea:	a4 c0       	rjmp	.+328    	; 0x1834 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    16ec:	81 2f       	mov	r24, r17
    16ee:	0e 94 ad 09 	call	0x135a	; 0x135a <midi_is_statusbyte>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <midi_process_byte+0x3e>
    16f6:	5d c0       	rjmp	.+186    	; 0x17b2 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    16f8:	8d a1       	ldd	r24, Y+37	; 0x25
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	29 f0       	breq	.+10     	; 0x1708 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    16fe:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9f a3       	std	Y+39, r25	; 0x27
    1706:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1708:	81 2f       	mov	r24, r17
    170a:	0e 94 b7 09 	call	0x136e	; 0x136e <midi_packet_length>
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	31 f0       	breq	.+12     	; 0x171e <midi_process_byte+0x64>
    1712:	b8 f0       	brcs	.+46     	; 0x1742 <midi_process_byte+0x88>
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	79 f0       	breq	.+30     	; 0x1736 <midi_process_byte+0x7c>
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	81 f0       	breq	.+32     	; 0x173c <midi_process_byte+0x82>
    171c:	46 c0       	rjmp	.+140    	; 0x17aa <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1722:	00 e0       	ldi	r16, 0x00	; 0
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	41 2f       	mov	r20, r17
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	ce 01       	movw	r24, r28
    172e:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_input_callbacks>
        device->input_state = IDLE;
    1732:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1734:	7f c0       	rjmp	.+254    	; 0x1834 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	8d a3       	std	Y+37, r24	; 0x25
        break;
    173a:	7c c0       	rjmp	.+248    	; 0x1834 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1740:	79 c0       	rjmp	.+242    	; 0x1834 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1742:	10 3f       	cpi	r17, 0xF0	; 240
    1744:	19 f0       	breq	.+6      	; 0x174c <midi_process_byte+0x92>
    1746:	17 3f       	cpi	r17, 0xF7	; 247
    1748:	51 f0       	breq	.+20     	; 0x175e <midi_process_byte+0xa4>
    174a:	2b c0       	rjmp	.+86     	; 0x17a2 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    174c:	84 e0       	ldi	r24, 0x04	; 4
    174e:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1750:	80 ef       	ldi	r24, 0xF0	; 240
    1752:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9f a3       	std	Y+39, r25	; 0x27
    175a:	8e a3       	std	Y+38, r24	; 0x26
            break;
    175c:	6b c0       	rjmp	.+214    	; 0x1834 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    175e:	4e a1       	ldd	r20, Y+38	; 0x26
    1760:	5f a1       	ldd	r21, Y+39	; 0x27
    1762:	9a 01       	movw	r18, r20
    1764:	ab ea       	ldi	r26, 0xAB	; 171
    1766:	ba ea       	ldi	r27, 0xAA	; 170
    1768:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__umulhisi3>
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	9c 01       	movw	r18, r24
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	82 0f       	add	r24, r18
    1778:	93 1f       	adc	r25, r19
    177a:	fa 01       	movw	r30, r20
    177c:	e8 1b       	sub	r30, r24
    177e:	f9 0b       	sbc	r31, r25
    1780:	ec 0f       	add	r30, r28
    1782:	fd 1f       	adc	r31, r29
    1784:	87 ef       	ldi	r24, 0xF7	; 247
    1786:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1788:	ba 01       	movw	r22, r20
    178a:	6f 5f       	subi	r22, 0xFF	; 255
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	7f a3       	std	Y+39, r23	; 0x27
    1790:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1792:	0c a1       	ldd	r16, Y+36	; 0x24
    1794:	2b a1       	ldd	r18, Y+35	; 0x23
    1796:	4a a1       	ldd	r20, Y+34	; 0x22
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    179e:	1d a2       	std	Y+37, r1	; 0x25
            break;
    17a0:	49 c0       	rjmp	.+146    	; 0x1834 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    17a2:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    17a4:	1f a2       	std	Y+39, r1	; 0x27
    17a6:	1e a2       	std	Y+38, r1	; 0x26
    17a8:	45 c0       	rjmp	.+138    	; 0x1834 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    17aa:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    17ac:	1f a2       	std	Y+39, r1	; 0x27
    17ae:	1e a2       	std	Y+38, r1	; 0x26
        break;
    17b0:	41 c0       	rjmp	.+130    	; 0x1834 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    17b2:	ed a1       	ldd	r30, Y+37	; 0x25
    17b4:	ee 23       	and	r30, r30
    17b6:	f1 f1       	breq	.+124    	; 0x1834 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    17b8:	4e a1       	ldd	r20, Y+38	; 0x26
    17ba:	5f a1       	ldd	r21, Y+39	; 0x27
    17bc:	9a 01       	movw	r18, r20
    17be:	ab ea       	ldi	r26, 0xAB	; 171
    17c0:	ba ea       	ldi	r27, 0xAA	; 170
    17c2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__umulhisi3>
    17c6:	96 95       	lsr	r25
    17c8:	87 95       	ror	r24
    17ca:	9c 01       	movw	r18, r24
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	9a 01       	movw	r18, r20
    17d6:	28 1b       	sub	r18, r24
    17d8:	39 0b       	sbc	r19, r25
    17da:	de 01       	movw	r26, r28
    17dc:	a2 0f       	add	r26, r18
    17de:	b3 1f       	adc	r27, r19
    17e0:	92 96       	adiw	r26, 0x22	; 34
    17e2:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    17e4:	ba 01       	movw	r22, r20
    17e6:	6f 5f       	subi	r22, 0xFF	; 255
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	7f a3       	std	Y+39, r23	; 0x27
    17ec:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    17ee:	21 30       	cpi	r18, 0x01	; 1
    17f0:	31 05       	cpc	r19, r1
    17f2:	89 f0       	breq	.+34     	; 0x1816 <midi_process_byte+0x15c>
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	e9 f4       	brne	.+58     	; 0x1834 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    17fa:	0c a1       	ldd	r16, Y+36	; 0x24
    17fc:	2b a1       	ldd	r18, Y+35	; 0x23
    17fe:	4a a1       	ldd	r20, Y+34	; 0x22
    1800:	ce 01       	movw	r24, r28
    1802:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1806:	8d a1       	ldd	r24, Y+37	; 0x25
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	a1 f0       	breq	.+40     	; 0x1834 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9f a3       	std	Y+39, r25	; 0x27
    1812:	8e a3       	std	Y+38, r24	; 0x26
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1816:	e2 30       	cpi	r30, 0x02	; 2
    1818:	69 f4       	brne	.+26     	; 0x1834 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    181a:	00 e0       	ldi	r16, 0x00	; 0
    181c:	2b a1       	ldd	r18, Y+35	; 0x23
    181e:	4a a1       	ldd	r20, Y+34	; 0x22
    1820:	ce 01       	movw	r24, r28
    1822:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1826:	8d a1       	ldd	r24, Y+37	; 0x25
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	21 f0       	breq	.+8      	; 0x1834 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9f a3       	std	Y+39, r25	; 0x27
    1832:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	08 95       	ret

00001840 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1852:	dc 01       	movw	r26, r24
    1854:	90 96       	adiw	r26, 0x20	; 32
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	91 97       	sbiw	r26, 0x21	; 33
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	09 f0       	breq	.+2      	; 0x1862 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1860:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1862:	86 01       	movw	r16, r12
    1864:	08 51       	subi	r16, 0x18	; 24
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	c8 01       	movw	r24, r16
    186a:	0e 94 65 09 	call	0x12ca	; 0x12ca <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    186e:	e8 2e       	mov	r14, r24
    1870:	f1 2c       	mov	r15, r1
    1872:	e1 14       	cp	r14, r1
    1874:	f1 04       	cpc	r15, r1
    1876:	91 f0       	breq	.+36     	; 0x189c <midi_device_process+0x5c>
    1878:	c0 e0       	ldi	r28, 0x00	; 0
    187a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	c8 01       	movw	r24, r16
    1880:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <bytequeue_get>
    1884:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1886:	c6 01       	movw	r24, r12
    1888:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	c8 01       	movw	r24, r16
    1890:	0e 94 8d 09 	call	0x131a	; 0x131a <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1894:	21 96       	adiw	r28, 0x01	; 1
    1896:	ce 15       	cp	r28, r14
    1898:	df 05       	cpc	r29, r15
    189a:	81 f7       	brne	.-32     	; 0x187c <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	08 95       	ret

000018ae <__divmodhi4>:
    18ae:	97 fb       	bst	r25, 7
    18b0:	07 2e       	mov	r0, r23
    18b2:	16 f4       	brtc	.+4      	; 0x18b8 <__divmodhi4+0xa>
    18b4:	00 94       	com	r0
    18b6:	07 d0       	rcall	.+14     	; 0x18c6 <__divmodhi4_neg1>
    18b8:	77 fd       	sbrc	r23, 7
    18ba:	09 d0       	rcall	.+18     	; 0x18ce <__divmodhi4_neg2>
    18bc:	0e 94 80 0c 	call	0x1900	; 0x1900 <__udivmodhi4>
    18c0:	07 fc       	sbrc	r0, 7
    18c2:	05 d0       	rcall	.+10     	; 0x18ce <__divmodhi4_neg2>
    18c4:	3e f4       	brtc	.+14     	; 0x18d4 <__divmodhi4_exit>

000018c6 <__divmodhi4_neg1>:
    18c6:	90 95       	com	r25
    18c8:	81 95       	neg	r24
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	08 95       	ret

000018ce <__divmodhi4_neg2>:
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255

000018d4 <__divmodhi4_exit>:
    18d4:	08 95       	ret

000018d6 <__tablejump2__>:
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	05 90       	lpm	r0, Z+
    18dc:	f4 91       	lpm	r31, Z
    18de:	e0 2d       	mov	r30, r0
    18e0:	09 94       	ijmp

000018e2 <__umulhisi3>:
    18e2:	a2 9f       	mul	r26, r18
    18e4:	b0 01       	movw	r22, r0
    18e6:	b3 9f       	mul	r27, r19
    18e8:	c0 01       	movw	r24, r0
    18ea:	a3 9f       	mul	r26, r19
    18ec:	70 0d       	add	r23, r0
    18ee:	81 1d       	adc	r24, r1
    18f0:	11 24       	eor	r1, r1
    18f2:	91 1d       	adc	r25, r1
    18f4:	b2 9f       	mul	r27, r18
    18f6:	70 0d       	add	r23, r0
    18f8:	81 1d       	adc	r24, r1
    18fa:	11 24       	eor	r1, r1
    18fc:	91 1d       	adc	r25, r1
    18fe:	08 95       	ret

00001900 <__udivmodhi4>:
    1900:	aa 1b       	sub	r26, r26
    1902:	bb 1b       	sub	r27, r27
    1904:	51 e1       	ldi	r21, 0x11	; 17
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <__udivmodhi4_ep>

00001908 <__udivmodhi4_loop>:
    1908:	aa 1f       	adc	r26, r26
    190a:	bb 1f       	adc	r27, r27
    190c:	a6 17       	cp	r26, r22
    190e:	b7 07       	cpc	r27, r23
    1910:	10 f0       	brcs	.+4      	; 0x1916 <__udivmodhi4_ep>
    1912:	a6 1b       	sub	r26, r22
    1914:	b7 0b       	sbc	r27, r23

00001916 <__udivmodhi4_ep>:
    1916:	88 1f       	adc	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	5a 95       	dec	r21
    191c:	a9 f7       	brne	.-22     	; 0x1908 <__udivmodhi4_loop>
    191e:	80 95       	com	r24
    1920:	90 95       	com	r25
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
