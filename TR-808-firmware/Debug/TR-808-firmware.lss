
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  0000198c  00001a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000198c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f3  00800258  00800258  00001b78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005067  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000145b  00000000  00000000  00007067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a7  00000000  00000000  000084c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae4  00000000  00000000  0000996c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001039  00000000  00000000  0000a450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020c6  00000000  00000000  0000b489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000d54f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	10 0a       	sbc	r1, r16
      b6:	0e 0a       	sbc	r0, r30
      b8:	10 0a       	sbc	r1, r16
      ba:	12 0a       	sbc	r1, r18
      bc:	12 0a       	sbc	r1, r18
      be:	18 0a       	sbc	r1, r24
      c0:	12 0a       	sbc	r1, r18
      c2:	18 0a       	sbc	r1, r24
      c4:	18 0a       	sbc	r1, r24
      c6:	18 0a       	sbc	r1, r24
      c8:	18 0a       	sbc	r1, r24
      ca:	18 0a       	sbc	r1, r24
      cc:	12 0a       	sbc	r1, r18
      ce:	18 0a       	sbc	r1, r24
      d0:	18 0a       	sbc	r1, r24

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ec e8       	ldi	r30, 0x8C	; 140
      e6:	f9 e1       	ldi	r31, 0x19	; 25
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ab 34       	cpi	r26, 0x4B	; 75
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 b9 05 	call	0xb72	; 0xb72 <main>
     108:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 49 07 	call	0xe92	; 0xe92 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	7f 92       	push	r7
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29

	clear_all_trigs();
     288:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     28c:	05 e0       	ldi	r16, 0x05	; 5
     28e:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     290:	c0 e0       	ldi	r28, 0x00	; 0
     292:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     294:	0f 2e       	mov	r0, r31
     296:	f6 e4       	ldi	r31, 0x46	; 70
     298:	8f 2e       	mov	r8, r31
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	9f 2e       	mov	r9, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	0f 2e       	mov	r0, r31
     2a2:	f7 e4       	ldi	r31, 0x47	; 71
     2a4:	cf 2e       	mov	r12, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	df 2e       	mov	r13, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f5 e4       	ldi	r31, 0x45	; 69
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f7 e6       	ldi	r31, 0x67	; 103
     2bc:	7f 2e       	mov	r7, r31
     2be:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f8 e6       	ldi	r31, 0x68	; 104
     2c4:	af 2e       	mov	r10, r31
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2cc:	d4 01       	movw	r26, r8
     2ce:	ec 91       	ld	r30, X
     2d0:	8e 2f       	mov	r24, r30
     2d2:	82 95       	swap	r24
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	d6 01       	movw	r26, r12
     2d8:	ec 91       	ld	r30, X
     2da:	e1 70       	andi	r30, 0x01	; 1
     2dc:	e2 95       	swap	r30
     2de:	e0 7f       	andi	r30, 0xF0	; 240
     2e0:	e8 2b       	or	r30, r24
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	d7 01       	movw	r26, r14
     2e6:	8c 91       	ld	r24, X
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	81 70       	andi	r24, 0x01	; 1
     2ee:	78 9e       	mul	r7, r24
     2f0:	e0 0d       	add	r30, r0
     2f2:	f1 1d       	adc	r31, r1
     2f4:	11 24       	eor	r1, r1
     2f6:	eb 58       	subi	r30, 0x8B	; 139
     2f8:	fc 4f       	sbci	r31, 0xFC	; 252
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	0c 2e       	mov	r0, r28
     300:	02 c0       	rjmp	.+4      	; 0x306 <trigger_step+0x98>
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	0a 94       	dec	r0
     308:	e2 f7       	brpl	.-8      	; 0x302 <trigger_step+0x94>
     30a:	80 ff       	sbrs	r24, 0
     30c:	3a c0       	rjmp	.+116    	; 0x382 <trigger_step+0x114>
			turn_on(drum_hit[i].led_index);
     30e:	f8 01       	movw	r30, r16
     310:	80 81       	ld	r24, Z
     312:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     316:	de 01       	movw	r26, r28
     318:	aa 0f       	add	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	ac 0f       	add	r26, r28
     31e:	bd 1f       	adc	r27, r29
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	a0 50       	subi	r26, 0x00	; 0
     326:	bf 4f       	sbci	r27, 0xFF	; 255
     328:	ec 91       	ld	r30, X
     32a:	8e 2f       	mov	r24, r30
     32c:	88 1f       	adc	r24, r24
     32e:	88 27       	eor	r24, r24
     330:	88 1f       	adc	r24, r24
     332:	11 96       	adiw	r26, 0x01	; 1
     334:	ec 91       	ld	r30, X
     336:	e7 70       	andi	r30, 0x07	; 7
     338:	ee 0f       	add	r30, r30
     33a:	e8 2b       	or	r30, r24
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	e8 59       	subi	r30, 0x98	; 152
     340:	fd 4f       	sbci	r31, 0xFD	; 253
     342:	d8 01       	movw	r26, r16
     344:	13 97       	sbiw	r26, 0x03	; 3
     346:	9c 91       	ld	r25, X
     348:	80 81       	ld	r24, Z
     34a:	89 2b       	or	r24, r25
     34c:	80 83       	st	Z, r24
     34e:	f8 01       	movw	r30, r16
     350:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     352:	80 81       	ld	r24, Z
     354:	8f 3f       	cpi	r24, 0xFF	; 255
     356:	a9 f0       	breq	.+42     	; 0x382 <trigger_step+0x114>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     358:	d5 01       	movw	r26, r10
     35a:	13 96       	adiw	r26, 0x03	; 3
     35c:	2c 91       	ld	r18, X
     35e:	13 97       	sbiw	r26, 0x03	; 3
     360:	fe 01       	movw	r30, r28
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ec 0f       	add	r30, r28
     368:	fd 1f       	adc	r31, r29
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ec 5f       	subi	r30, 0xFC	; 252
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	90 81       	ld	r25, Z
     374:	91 70       	andi	r25, 0x01	; 1
     376:	91 95       	neg	r25
     378:	92 27       	eor	r25, r18
     37a:	89 23       	and	r24, r25
     37c:	82 27       	eor	r24, r18
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	0a 5f       	subi	r16, 0xFA	; 250
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	c0 31       	cpi	r28, 0x10	; 16
     38a:	d1 05       	cpc	r29, r1
     38c:	09 f0       	breq	.+2      	; 0x390 <trigger_step+0x122>
     38e:	9e cf       	rjmp	.-196    	; 0x2cc <trigger_step+0x5e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	08 95       	ret

000003ac <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     3ac:	80 91 34 02 	lds	r24, 0x0234
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3b4:	e4 e3       	ldi	r30, 0x34	; 52
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	8f 7b       	andi	r24, 0xBF	; 191
     3ba:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3c4:	80 91 36 02 	lds	r24, 0x0236
     3c8:	86 ff       	sbrs	r24, 6
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3cc:	e6 e3       	ldi	r30, 0x36	; 54
     3ce:	f2 e0       	ldi	r31, 0x02	; 2
     3d0:	8f 7b       	andi	r24, 0xBF	; 191
     3d2:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     3dc:	80 91 38 02 	lds	r24, 0x0238
     3e0:	86 ff       	sbrs	r24, 6
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     3e4:	e8 e3       	ldi	r30, 0x38	; 56
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     3f4:	80 91 3a 02 	lds	r24, 0x023A
     3f8:	86 ff       	sbrs	r24, 6
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     3fc:	ea e3       	ldi	r30, 0x3A	; 58
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	8f 7b       	andi	r24, 0xBF	; 191
     402:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     40c:	80 91 3c 02 	lds	r24, 0x023C
     410:	86 ff       	sbrs	r24, 6
     412:	08 c0       	rjmp	.+16     	; 0x424 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     414:	ec e3       	ldi	r30, 0x3C	; 60
     416:	f2 e0       	ldi	r31, 0x02	; 2
     418:	8f 7b       	andi	r24, 0xBF	; 191
     41a:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     424:	80 91 3e 02 	lds	r24, 0x023E
     428:	86 ff       	sbrs	r24, 6
     42a:	08 c0       	rjmp	.+16     	; 0x43c <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     42c:	ee e3       	ldi	r30, 0x3E	; 62
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	8f 7b       	andi	r24, 0xBF	; 191
     432:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     43c:	80 91 40 02 	lds	r24, 0x0240
     440:	86 ff       	sbrs	r24, 6
     442:	08 c0       	rjmp	.+16     	; 0x454 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     444:	e0 e4       	ldi	r30, 0x40	; 64
     446:	f2 e0       	ldi	r31, 0x02	; 2
     448:	8f 7b       	andi	r24, 0xBF	; 191
     44a:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     454:	80 91 42 02 	lds	r24, 0x0242
     458:	86 ff       	sbrs	r24, 6
     45a:	08 c0       	rjmp	.+16     	; 0x46c <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     45c:	e2 e4       	ldi	r30, 0x42	; 66
     45e:	f2 e0       	ldi	r31, 0x02	; 2
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     46c:	80 91 44 02 	lds	r24, 0x0244
     470:	86 ff       	sbrs	r24, 6
     472:	08 c0       	rjmp	.+16     	; 0x484 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     474:	e4 e4       	ldi	r30, 0x44	; 68
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	8f 7b       	andi	r24, 0xBF	; 191
     47a:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     484:	80 91 46 02 	lds	r24, 0x0246
     488:	86 ff       	sbrs	r24, 6
     48a:	08 c0       	rjmp	.+16     	; 0x49c <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     48c:	e6 e4       	ldi	r30, 0x46	; 70
     48e:	f2 e0       	ldi	r31, 0x02	; 2
     490:	8f 7b       	andi	r24, 0xBF	; 191
     492:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	89 e0       	ldi	r24, 0x09	; 9
     498:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     49c:	80 91 48 02 	lds	r24, 0x0248
     4a0:	86 ff       	sbrs	r24, 6
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4a4:	e8 e4       	ldi	r30, 0x48	; 72
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	8f 7b       	andi	r24, 0xBF	; 191
     4aa:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	8a e0       	ldi	r24, 0x0A	; 10
     4b0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4b4:	08 95       	ret

000004b6 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4c6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4c8:	ee e6       	ldi	r30, 0x6E	; 110
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8d 7f       	andi	r24, 0xFD	; 253
     4d0:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     4d2:	e5 e4       	ldi	r30, 0x45	; 69
     4d4:	f4 e0       	ldi	r31, 0x04	; 4
     4d6:	82 81       	ldd	r24, Z+2	; 0x02
     4d8:	88 60       	ori	r24, 0x08	; 8
     4da:	82 83       	std	Z+2, r24	; 0x02
	
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	8f 91       	pop	r24
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	4f 93       	push	r20
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     516:	e3 e7       	ldi	r30, 0x73	; 115
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	9f 5f       	subi	r25, 0xFF	; 255
     51e:	91 83       	std	Z+1, r25	; 0x01
     520:	80 81       	ld	r24, Z
     522:	98 13       	cpse	r25, r24
     524:	62 c0       	rjmp	.+196    	; 0x5ea <__vector_11+0xfe>
	{
		sequencer.next_step_flag = 1;
     526:	e5 e4       	ldi	r30, 0x45	; 69
     528:	f4 e0       	ldi	r31, 0x04	; 4
     52a:	52 81       	ldd	r21, Z+2	; 0x02
     52c:	52 60       	ori	r21, 0x02	; 2
		internal_clock.beat_counter++; //overflows every 4 beats
     52e:	a5 e7       	ldi	r26, 0x75	; 117
     530:	b2 e0       	ldi	r27, 0x02	; 2
     532:	9c 91       	ld	r25, X
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	29 0f       	add	r18, r25
     538:	23 70       	andi	r18, 0x03	; 3
     53a:	9c 7f       	andi	r25, 0xFC	; 252
     53c:	92 2b       	or	r25, r18
     53e:	9c 93       	st	X, r25
		internal_clock.ppqn_counter = 0;
     540:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == (sequencer.step_num_first + sequencer.step_num_second)) { //end of measure - bah. determining end of measure is dependent on mode - editing first part vs second part plus what happens in rhythm mode?
     544:	40 91 46 04 	lds	r20, 0x0446
     548:	94 2f       	mov	r25, r20
     54a:	92 95       	swap	r25
     54c:	9f 70       	andi	r25, 0x0F	; 15
     54e:	45 2f       	mov	r20, r21
     550:	41 70       	andi	r20, 0x01	; 1
     552:	42 95       	swap	r20
     554:	40 7f       	andi	r20, 0xF0	; 240
     556:	49 2b       	or	r20, r25
     558:	31 e0       	ldi	r19, 0x01	; 1
     55a:	34 0f       	add	r19, r20
     55c:	93 2f       	mov	r25, r19
     55e:	92 95       	swap	r25
     560:	90 7f       	andi	r25, 0xF0	; 240
     562:	21 81       	ldd	r18, Z+1	; 0x01
     564:	2f 70       	andi	r18, 0x0F	; 15
     566:	29 2b       	or	r18, r25
     568:	21 83       	std	Z+1, r18	; 0x01
     56a:	34 fb       	bst	r19, 4
     56c:	99 27       	eor	r25, r25
     56e:	90 f9       	bld	r25, 0
     570:	35 2f       	mov	r19, r21
     572:	3e 7f       	andi	r19, 0xFE	; 254
     574:	39 2b       	or	r19, r25
     576:	32 83       	std	Z+2, r19	; 0x02
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	90 81       	ld	r25, Z
     57c:	92 95       	swap	r25
     57e:	9f 70       	andi	r25, 0x0F	; 15
     580:	2f 70       	andi	r18, 0x0F	; 15
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	29 0f       	add	r18, r25
     586:	31 1d       	adc	r19, r1
     588:	42 17       	cp	r20, r18
     58a:	53 07       	cpc	r21, r19
     58c:	71 f5       	brne	.+92     	; 0x5ea <__vector_11+0xfe>
			//no, actuallys seems OK - 808 plays both parts and just shows LEDs for the ones you are editing	
			sequencer.current_step = 0;
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	9f 70       	andi	r25, 0x0F	; 15
     592:	91 83       	std	Z+1, r25	; 0x01
     594:	92 81       	ldd	r25, Z+2	; 0x02
     596:	9e 7f       	andi	r25, 0xFE	; 254
     598:	92 83       	std	Z+2, r25	; 0x02
				
			if (sequencer.var_change == 1) {
     59a:	90 81       	ld	r25, Z
     59c:	93 ff       	sbrs	r25, 3
     59e:	1a c0       	rjmp	.+52     	; 0x5d4 <__vector_11+0xe8>
				sequencer.var_change = 0;
     5a0:	29 2f       	mov	r18, r25
     5a2:	27 7f       	andi	r18, 0xF7	; 247
     5a4:	20 83       	st	Z, r18
				switch (sequencer.variation_mode) {
     5a6:	26 95       	lsr	r18
     5a8:	23 70       	andi	r18, 0x03	; 3
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	21 30       	cpi	r18, 0x01	; 1
     5ae:	31 05       	cpc	r19, r1
     5b0:	59 f0       	breq	.+22     	; 0x5c8 <__vector_11+0xdc>
     5b2:	22 30       	cpi	r18, 0x02	; 2
     5b4:	31 05       	cpc	r19, r1
     5b6:	11 f0       	breq	.+4      	; 0x5bc <__vector_11+0xd0>
     5b8:	23 2b       	or	r18, r19
     5ba:	b9 f4       	brne	.+46     	; 0x5ea <__vector_11+0xfe>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     5bc:	e5 e4       	ldi	r30, 0x45	; 69
     5be:	f4 e0       	ldi	r31, 0x04	; 4
     5c0:	90 81       	ld	r25, Z
     5c2:	9e 7f       	andi	r25, 0xFE	; 254
     5c4:	90 83       	st	Z, r25
					break;
     5c6:	11 c0       	rjmp	.+34     	; 0x5ea <__vector_11+0xfe>
				case VAR_B:
					sequencer.variation = VAR_B;
     5c8:	e5 e4       	ldi	r30, 0x45	; 69
     5ca:	f4 e0       	ldi	r31, 0x04	; 4
     5cc:	90 81       	ld	r25, Z
     5ce:	91 60       	ori	r25, 0x01	; 1
     5d0:	90 83       	st	Z, r25
					break;	
     5d2:	0b c0       	rjmp	.+22     	; 0x5ea <__vector_11+0xfe>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     5d4:	96 70       	andi	r25, 0x06	; 6
     5d6:	94 30       	cpi	r25, 0x04	; 4
     5d8:	41 f4       	brne	.+16     	; 0x5ea <__vector_11+0xfe>
					
				sequencer.variation ^= 1<<0; //toggle state
     5da:	e5 e4       	ldi	r30, 0x45	; 69
     5dc:	f4 e0       	ldi	r31, 0x04	; 4
     5de:	90 81       	ld	r25, Z
     5e0:	29 2f       	mov	r18, r25
     5e2:	20 95       	com	r18
     5e4:	20 fb       	bst	r18, 0
     5e6:	90 f9       	bld	r25, 0
     5e8:	90 83       	st	Z, r25
			}
			//sequencer.current_measure++;
		}
	} //should make the else if so second condition doesn't need to be tested
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     5ea:	86 95       	lsr	r24
     5ec:	90 91 74 02 	lds	r25, 0x0274
     5f0:	98 13       	cpse	r25, r24
     5f2:	ea c0       	rjmp	.+468    	; 0x7c8 <__vector_11+0x2dc>
		
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     5f4:	30 91 d3 01 	lds	r19, 0x01D3
     5f8:	20 91 d6 01 	lds	r18, 0x01D6
     5fc:	e8 e6       	ldi	r30, 0x68	; 104
     5fe:	f2 e0       	ldi	r31, 0x02	; 2
     600:	82 2f       	mov	r24, r18
     602:	83 2b       	or	r24, r19
     604:	80 95       	com	r24
     606:	95 81       	ldd	r25, Z+5	; 0x05
     608:	89 23       	and	r24, r25
     60a:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     60c:	80 91 76 03 	lds	r24, 0x0376
     610:	81 ff       	sbrs	r24, 1
     612:	aa c0       	rjmp	.+340    	; 0x768 <__vector_11+0x27c>
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     614:	c9 e4       	ldi	r28, 0x49	; 73
     616:	d4 e0       	ldi	r29, 0x04	; 4
     618:	e8 81       	ld	r30, Y
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	b2 96       	adiw	r30, 0x22	; 34
     61e:	05 e4       	ldi	r16, 0x45	; 69
     620:	14 e0       	ldi	r17, 0x04	; 4
     622:	d8 01       	movw	r26, r16
     624:	8c 91       	ld	r24, X
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	81 70       	andi	r24, 0x01	; 1
     62c:	b7 e6       	ldi	r27, 0x67	; 103
     62e:	8b 9f       	mul	r24, r27
     630:	e0 0d       	add	r30, r0
     632:	f1 1d       	adc	r31, r1
     634:	11 24       	eor	r1, r1
     636:	eb 58       	subi	r30, 0x8B	; 139
     638:	fc 4f       	sbci	r31, 0xFC	; 252
     63a:	92 81       	ldd	r25, Z+2	; 0x02
     63c:	83 81       	ldd	r24, Z+3	; 0x03
     63e:	e8 e6       	ldi	r30, 0x68	; 104
     640:	f2 e0       	ldi	r31, 0x02	; 2
     642:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     644:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     646:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     64a:	88 81       	ld	r24, Y
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	e8 0f       	add	r30, r24
     656:	f9 1f       	adc	r31, r25
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	e0 50       	subi	r30, 0x00	; 0
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	85 81       	ldd	r24, Z+5	; 0x05
     662:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
								
			switch (sequencer.variation_mode) {
     666:	f8 01       	movw	r30, r16
     668:	80 81       	ld	r24, Z
     66a:	86 95       	lsr	r24
     66c:	83 70       	andi	r24, 0x03	; 3
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	91 05       	cpc	r25, r1
     674:	51 f0       	breq	.+20     	; 0x68a <__vector_11+0x19e>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	91 05       	cpc	r25, r1
     67a:	a9 f0       	breq	.+42     	; 0x6a6 <__vector_11+0x1ba>
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	01 f5       	brne	.+64     	; 0x6c0 <__vector_11+0x1d4>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     680:	20 91 d3 01 	lds	r18, 0x01D3
     684:	20 93 4a 04 	sts	0x044A, r18
					break;					
     688:	1b c0       	rjmp	.+54     	; 0x6c0 <__vector_11+0x1d4>
				case VAR_B:
					if (sequencer.var_change == 1) {
     68a:	20 91 45 04 	lds	r18, 0x0445
     68e:	23 ff       	sbrs	r18, 3
     690:	05 c0       	rjmp	.+10     	; 0x69c <__vector_11+0x1b0>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     692:	20 91 d3 01 	lds	r18, 0x01D3
     696:	20 93 4a 04 	sts	0x044A, r18
     69a:	12 c0       	rjmp	.+36     	; 0x6c0 <__vector_11+0x1d4>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     69c:	20 91 d6 01 	lds	r18, 0x01D6
     6a0:	20 93 4a 04 	sts	0x044A, r18
     6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <__vector_11+0x1d4>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     6a6:	20 91 45 04 	lds	r18, 0x0445
     6aa:	20 fd       	sbrc	r18, 0
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <__vector_11+0x1cc>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     6ae:	20 91 d3 01 	lds	r18, 0x01D3
     6b2:	20 93 4a 04 	sts	0x044A, r18
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__vector_11+0x1d4>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     6b8:	20 91 d6 01 	lds	r18, 0x01D6
     6bc:	20 93 4a 04 	sts	0x044A, r18
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     6c0:	20 91 75 02 	lds	r18, 0x0275
     6c4:	23 70       	andi	r18, 0x03	; 3
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	22 30       	cpi	r18, 0x02	; 2
     6ca:	31 05       	cpc	r19, r1
     6cc:	0c f0       	brlt	.+2      	; 0x6d0 <__vector_11+0x1e4>
     6ce:	75 c0       	rjmp	.+234    	; 0x7ba <__vector_11+0x2ce>
				
				if (sequencer.var_change == 1) {
     6d0:	20 91 45 04 	lds	r18, 0x0445
     6d4:	23 ff       	sbrs	r18, 3
     6d6:	32 c0       	rjmp	.+100    	; 0x73c <__vector_11+0x250>
					
					switch (sequencer.variation_mode) {
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	91 05       	cpc	r25, r1
     6dc:	69 f0       	breq	.+26     	; 0x6f8 <__vector_11+0x20c>
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	91 05       	cpc	r25, r1
     6e2:	91 f0       	breq	.+36     	; 0x708 <__vector_11+0x21c>
     6e4:	89 2b       	or	r24, r25
     6e6:	51 f5       	brne	.+84     	; 0x73c <__vector_11+0x250>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6e8:	ea e4       	ldi	r30, 0x4A	; 74
     6ea:	f4 e0       	ldi	r31, 0x04	; 4
     6ec:	90 91 d6 01 	lds	r25, 0x01D6
     6f0:	80 81       	ld	r24, Z
     6f2:	89 2b       	or	r24, r25
     6f4:	80 83       	st	Z, r24
							break;
     6f6:	22 c0       	rjmp	.+68     	; 0x73c <__vector_11+0x250>
						case VAR_B:
							if (sequencer.var_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6f8:	ea e4       	ldi	r30, 0x4A	; 74
     6fa:	f4 e0       	ldi	r31, 0x04	; 4
     6fc:	90 91 d6 01 	lds	r25, 0x01D6
     700:	80 81       	ld	r24, Z
     702:	89 2b       	or	r24, r25
     704:	80 83       	st	Z, r24
     706:	1a c0       	rjmp	.+52     	; 0x73c <__vector_11+0x250>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     708:	20 fd       	sbrc	r18, 0
     70a:	0c c0       	rjmp	.+24     	; 0x724 <__vector_11+0x238>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     70c:	ea e4       	ldi	r30, 0x4A	; 74
     70e:	f4 e0       	ldi	r31, 0x04	; 4
     710:	90 91 d6 01 	lds	r25, 0x01D6
     714:	80 81       	ld	r24, Z
     716:	89 2b       	or	r24, r25
     718:	80 83       	st	Z, r24
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     71a:	26 70       	andi	r18, 0x06	; 6
     71c:	24 30       	cpi	r18, 0x04	; 4
     71e:	09 f0       	breq	.+2      	; 0x722 <__vector_11+0x236>
     720:	4c c0       	rjmp	.+152    	; 0x7ba <__vector_11+0x2ce>
     722:	12 c0       	rjmp	.+36     	; 0x748 <__vector_11+0x25c>
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     724:	ea e4       	ldi	r30, 0x4A	; 74
     726:	f4 e0       	ldi	r31, 0x04	; 4
     728:	90 91 d3 01 	lds	r25, 0x01D3
     72c:	80 81       	ld	r24, Z
     72e:	89 2b       	or	r24, r25
     730:	80 83       	st	Z, r24
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     732:	26 70       	andi	r18, 0x06	; 6
     734:	24 30       	cpi	r18, 0x04	; 4
     736:	09 f0       	breq	.+2      	; 0x73a <__vector_11+0x24e>
     738:	40 c0       	rjmp	.+128    	; 0x7ba <__vector_11+0x2ce>
     73a:	0e c0       	rjmp	.+28     	; 0x758 <__vector_11+0x26c>
     73c:	82 2f       	mov	r24, r18
     73e:	86 70       	andi	r24, 0x06	; 6
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	d9 f5       	brne	.+118    	; 0x7ba <__vector_11+0x2ce>
						if (sequencer.variation == VAR_A) {
     744:	20 fd       	sbrc	r18, 0
     746:	08 c0       	rjmp	.+16     	; 0x758 <__vector_11+0x26c>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     748:	ea e4       	ldi	r30, 0x4A	; 74
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	90 91 d6 01 	lds	r25, 0x01D6
     750:	80 81       	ld	r24, Z
     752:	89 2b       	or	r24, r25
     754:	80 83       	st	Z, r24
     756:	31 c0       	rjmp	.+98     	; 0x7ba <__vector_11+0x2ce>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     758:	ea e4       	ldi	r30, 0x4A	; 74
     75a:	f4 e0       	ldi	r31, 0x04	; 4
     75c:	90 91 d3 01 	lds	r25, 0x01D3
     760:	80 81       	ld	r24, Z
     762:	89 2b       	or	r24, r25
     764:	80 83       	st	Z, r24
     766:	29 c0       	rjmp	.+82     	; 0x7ba <__vector_11+0x2ce>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     768:	e8 e6       	ldi	r30, 0x68	; 104
     76a:	f2 e0       	ldi	r31, 0x02	; 2
     76c:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     76e:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     770:	80 91 45 04 	lds	r24, 0x0445
     774:	86 95       	lsr	r24
     776:	83 70       	andi	r24, 0x03	; 3
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	91 05       	cpc	r25, r1
     77e:	41 f0       	breq	.+16     	; 0x790 <__vector_11+0x2a4>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	91 05       	cpc	r25, r1
     784:	11 f0       	breq	.+4      	; 0x78a <__vector_11+0x29e>
     786:	89 2b       	or	r24, r25
     788:	29 f4       	brne	.+10     	; 0x794 <__vector_11+0x2a8>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     78a:	30 93 4a 04 	sts	0x044A, r19
				break;
     78e:	02 c0       	rjmp	.+4      	; 0x794 <__vector_11+0x2a8>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     790:	20 93 4a 04 	sts	0x044A, r18
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     794:	80 91 75 02 	lds	r24, 0x0275
     798:	83 70       	andi	r24, 0x03	; 3
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 97       	sbiw	r24, 0x02	; 2
     79e:	6c f4       	brge	.+26     	; 0x7ba <__vector_11+0x2ce>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     7a0:	80 91 45 04 	lds	r24, 0x0445
     7a4:	86 70       	andi	r24, 0x06	; 6
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	29 f4       	brne	.+10     	; 0x7b4 <__vector_11+0x2c8>
     7aa:	ea e4       	ldi	r30, 0x4A	; 74
     7ac:	f4 e0       	ldi	r31, 0x04	; 4
     7ae:	80 81       	ld	r24, Z
     7b0:	28 2b       	or	r18, r24
     7b2:	20 83       	st	Z, r18
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     7ba:	e8 e6       	ldi	r30, 0x68	; 104
     7bc:	f2 e0       	ldi	r31, 0x02	; 2
     7be:	90 91 4a 04 	lds	r25, 0x044A
     7c2:	85 81       	ldd	r24, Z+5	; 0x05
     7c4:	89 2b       	or	r24, r25
     7c6:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     7c8:	ff 91       	pop	r31
     7ca:	ef 91       	pop	r30
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	bf 91       	pop	r27
     7d2:	af 91       	pop	r26
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	7f 91       	pop	r23
     7da:	6f 91       	pop	r22
     7dc:	5f 91       	pop	r21
     7de:	4f 91       	pop	r20
     7e0:	3f 91       	pop	r19
     7e2:	2f 91       	pop	r18
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9c 01       	movw	r18, r24
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	dc 01       	movw	r26, r24
     804:	a8 59       	subi	r26, 0x98	; 152
     806:	be 4f       	sbci	r27, 0xFE	; 254
     808:	2c 91       	ld	r18, X
     80a:	e2 2f       	mov	r30, r18
     80c:	ef 70       	andi	r30, 0x0F	; 15
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	e8 59       	subi	r30, 0x98	; 152
     812:	fd 4f       	sbci	r31, 0xFD	; 253
     814:	ec 01       	movw	r28, r24
     816:	c9 59       	subi	r28, 0x99	; 153
     818:	de 4f       	sbci	r29, 0xFE	; 254
     81a:	30 81       	ld	r19, Z
     81c:	88 81       	ld	r24, Y
     81e:	83 2b       	or	r24, r19
     820:	80 83       	st	Z, r24
	led[led_index].state = 1;
     822:	82 2f       	mov	r24, r18
     824:	80 61       	ori	r24, 0x10	; 16
     826:	8c 93       	st	X, r24

}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <turn_off>:

void turn_off(uint8_t led_index) {
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	9c 01       	movw	r18, r24
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	dc 01       	movw	r26, r24
     840:	a8 59       	subi	r26, 0x98	; 152
     842:	be 4f       	sbci	r27, 0xFE	; 254
     844:	2c 91       	ld	r18, X
     846:	e2 2f       	mov	r30, r18
     848:	ef 70       	andi	r30, 0x0F	; 15
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	e8 59       	subi	r30, 0x98	; 152
     84e:	fd 4f       	sbci	r31, 0xFD	; 253
     850:	ec 01       	movw	r28, r24
     852:	c9 59       	subi	r28, 0x99	; 153
     854:	de 4f       	sbci	r29, 0xFE	; 254
     856:	88 81       	ld	r24, Y
     858:	80 95       	com	r24
     85a:	90 81       	ld	r25, Z
     85c:	89 23       	and	r24, r25
     85e:	80 83       	st	Z, r24
	led[led_index].state = 0;
     860:	82 2f       	mov	r24, r18
     862:	8f 7e       	andi	r24, 0xEF	; 239
     864:	8c 93       	st	X, r24
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     86c:	28 2f       	mov	r18, r24
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	2e 0f       	add	r18, r30
     878:	3f 1f       	adc	r19, r31
     87a:	f9 01       	movw	r30, r18
     87c:	e8 59       	subi	r30, 0x98	; 152
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	90 81       	ld	r25, Z
     882:	94 ff       	sbrs	r25, 4
     884:	03 c0       	rjmp	.+6      	; 0x88c <toggle+0x20>
		
		turn_off(led_index);
     886:	0e 94 17 04 	call	0x82e	; 0x82e <turn_off>
     88a:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     88c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
     890:	08 95       	ret

00000892 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     892:	e8 e6       	ldi	r30, 0x68	; 104
     894:	f2 e0       	ldi	r31, 0x02	; 2
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	8f 70       	andi	r24, 0x0F	; 15
     89a:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     89c:	87 81       	ldd	r24, Z+7	; 0x07
     89e:	80 72       	andi	r24, 0x20	; 32
     8a0:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     8a2:	83 81       	ldd	r24, Z+3	; 0x03
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     8a8:	86 81       	ldd	r24, Z+6	; 0x06
     8aa:	8f 7c       	andi	r24, 0xCF	; 207
     8ac:	86 83       	std	Z+6, r24	; 0x06
     8ae:	08 95       	ret

000008b0 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     8b0:	08 95       	ret

000008b2 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     8b2:	08 95       	ret

000008b4 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     8b4:	40 31       	cpi	r20, 0x10	; 16
     8b6:	20 f4       	brcc	.+8      	; 0x8c0 <note_on_event+0xc>
     8b8:	62 2f       	mov	r22, r18
     8ba:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     8bc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     8c0:	08 95       	ret

000008c2 <update_step_board>:





void update_step_board() {
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	9f 92       	push	r9
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     8e0:	80 91 76 03 	lds	r24, 0x0376
     8e4:	81 ff       	sbrs	r24, 1
     8e6:	ce c0       	rjmp	.+412    	; 0xa84 <__stack+0x185>
     8e8:	80 91 75 03 	lds	r24, 0x0375
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <update_step_board+0x32>
     8f2:	c8 c0       	rjmp	.+400    	; 0xa84 <__stack+0x185>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     8f4:	80 91 49 04 	lds	r24, 0x0449
     8f8:	80 31       	cpi	r24, 0x10	; 16
     8fa:	09 f0       	breq	.+2      	; 0x8fe <update_step_board+0x3c>
     8fc:	60 c0       	rjmp	.+192    	; 0x9be <__stack+0xbf>
     8fe:	c0 e0       	ldi	r28, 0x00	; 0
     900:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     902:	0f 2e       	mov	r0, r31
     904:	f5 e4       	ldi	r31, 0x45	; 69
     906:	af 2e       	mov	r10, r31
     908:	f4 e0       	ldi	r31, 0x04	; 4
     90a:	bf 2e       	mov	r11, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	cc 24       	eor	r12, r12
     910:	c3 94       	inc	r12
     912:	d1 2c       	mov	r13, r1
     914:	0f 2e       	mov	r0, r31
     916:	f7 e6       	ldi	r31, 0x67	; 103
     918:	9f 2e       	mov	r9, r31
     91a:	f0 2d       	mov	r31, r0
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     91c:	09 e4       	ldi	r16, 0x49	; 73
     91e:	14 e0       	ldi	r17, 0x04	; 4
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
							
				if (button[i].state) {
     920:	fe 01       	movw	r30, r28
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ee 5e       	subi	r30, 0xEE	; 238
     928:	fd 4f       	sbci	r31, 0xFD	; 253
     92a:	80 81       	ld	r24, Z
     92c:	86 ff       	sbrs	r24, 6
     92e:	41 c0       	rjmp	.+130    	; 0x9b2 <__stack+0xb3>
								
					toggle(i);
     930:	8c 2f       	mov	r24, r28
     932:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
					button[i].state ^= button[i].state;
     936:	fe 01       	movw	r30, r28
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	ee 5e       	subi	r30, 0xEE	; 238
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	80 81       	ld	r24, Z
     942:	8f 7b       	andi	r24, 0xBF	; 191
     944:	80 83       	st	Z, r24
					sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     946:	d5 01       	movw	r26, r10
     948:	8c 91       	ld	r24, X
     94a:	80 fb       	bst	r24, 0
     94c:	ee 24       	eor	r14, r14
     94e:	e0 f8       	bld	r14, 0
     950:	f1 2c       	mov	r15, r1
     952:	9e 9c       	mul	r9, r14
     954:	c0 01       	movw	r24, r0
     956:	9f 9c       	mul	r9, r15
     958:	90 0d       	add	r25, r0
     95a:	11 24       	eor	r1, r1
     95c:	fc 01       	movw	r30, r24
     95e:	e9 54       	subi	r30, 0x49	; 73
     960:	fc 4f       	sbci	r31, 0xFC	; 252
     962:	96 01       	movw	r18, r12
     964:	0c 2e       	mov	r0, r28
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x69>
     970:	29 01       	movw	r4, r18
     972:	03 2e       	mov	r0, r19
     974:	00 0c       	add	r0, r0
     976:	66 08       	sbc	r6, r6
     978:	77 08       	sbc	r7, r7
     97a:	40 81       	ld	r20, Z
     97c:	51 81       	ldd	r21, Z+1	; 0x01
     97e:	62 81       	ldd	r22, Z+2	; 0x02
     980:	73 81       	ldd	r23, Z+3	; 0x03
     982:	44 25       	eor	r20, r4
     984:	55 25       	eor	r21, r5
     986:	66 25       	eor	r22, r6
     988:	77 25       	eor	r23, r7
     98a:	40 83       	st	Z, r20
     98c:	51 83       	std	Z+1, r21	; 0x01
     98e:	62 83       	std	Z+2, r22	; 0x02
     990:	73 83       	std	Z+3, r23	; 0x03
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     992:	d8 01       	movw	r26, r16
     994:	ec 91       	ld	r30, X
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	b2 96       	adiw	r30, 0x22	; 34
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	e8 0f       	add	r30, r24
     9a0:	f9 1f       	adc	r31, r25
     9a2:	eb 58       	subi	r30, 0x8B	; 139
     9a4:	fc 4f       	sbci	r31, 0xFC	; 252
     9a6:	82 81       	ldd	r24, Z+2	; 0x02
     9a8:	93 81       	ldd	r25, Z+3	; 0x03
     9aa:	28 27       	eor	r18, r24
     9ac:	39 27       	eor	r19, r25
     9ae:	33 83       	std	Z+3, r19	; 0x03
     9b0:	22 83       	std	Z+2, r18	; 0x02
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     9b2:	21 96       	adiw	r28, 0x01	; 1
     9b4:	c0 31       	cpi	r28, 0x10	; 16
     9b6:	d1 05       	cpc	r29, r1
     9b8:	09 f0       	breq	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	b2 cf       	rjmp	.-156    	; 0x920 <__stack+0x21>
     9bc:	63 c0       	rjmp	.+198    	; 0xa84 <__stack+0x185>
     9be:	c0 e0       	ldi	r28, 0x00	; 0
     9c0:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f5 e4       	ldi	r31, 0x45	; 69
     9c6:	cf 2e       	mov	r12, r31
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	df 2e       	mov	r13, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	0f 2e       	mov	r0, r31
     9d0:	f9 e4       	ldi	r31, 0x49	; 73
     9d2:	ef 2e       	mov	r14, r31
     9d4:	f4 e0       	ldi	r31, 0x04	; 4
     9d6:	ff 2e       	mov	r15, r31
     9d8:	f0 2d       	mov	r31, r0
     9da:	0f 2e       	mov	r0, r31
     9dc:	f7 e6       	ldi	r31, 0x67	; 103
     9de:	9f 2e       	mov	r9, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	aa 24       	eor	r10, r10
     9e4:	a3 94       	inc	r10
     9e6:	b1 2c       	mov	r11, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     9e8:	fe 01       	movw	r30, r28
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	ee 5e       	subi	r30, 0xEE	; 238
     9f0:	fd 4f       	sbci	r31, 0xFD	; 253
     9f2:	80 81       	ld	r24, Z
     9f4:	86 ff       	sbrs	r24, 6
     9f6:	41 c0       	rjmp	.+130    	; 0xa7a <__stack+0x17b>
					
				toggle(i);
     9f8:	8c 2f       	mov	r24, r28
     9fa:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
				button[i].state ^= button[i].state;
     9fe:	fe 01       	movw	r30, r28
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	df 01       	movw	r26, r30
     a06:	ae 5e       	subi	r26, 0xEE	; 238
     a08:	bd 4f       	sbci	r27, 0xFD	; 253
     a0a:	8c 91       	ld	r24, X
     a0c:	8f 7b       	andi	r24, 0xBF	; 191
     a0e:	8c 93       	st	X, r24
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     a10:	d6 01       	movw	r26, r12
     a12:	8c 91       	ld	r24, X
     a14:	08 2f       	mov	r16, r24
     a16:	01 70       	andi	r16, 0x01	; 1
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	d7 01       	movw	r26, r14
     a1c:	4c 91       	ld	r20, X
     a1e:	24 2f       	mov	r18, r20
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	90 9e       	mul	r9, r16
     a24:	c0 01       	movw	r24, r0
     a26:	91 9e       	mul	r9, r17
     a28:	90 0d       	add	r25, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	e8 0f       	add	r30, r24
     a2e:	f9 1f       	adc	r31, r25
     a30:	eb 58       	subi	r30, 0x8B	; 139
     a32:	fc 4f       	sbci	r31, 0xFC	; 252
     a34:	b5 01       	movw	r22, r10
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <__stack+0x13d>
     a38:	66 0f       	add	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	4a 95       	dec	r20
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <__stack+0x139>
     a40:	ab 01       	movw	r20, r22
     a42:	62 81       	ldd	r22, Z+2	; 0x02
     a44:	73 81       	ldd	r23, Z+3	; 0x03
     a46:	46 27       	eor	r20, r22
     a48:	57 27       	eor	r21, r23
     a4a:	53 83       	std	Z+3, r21	; 0x03
     a4c:	42 83       	std	Z+2, r20	; 0x02
				sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;				
     a4e:	f9 01       	movw	r30, r18
     a50:	b2 96       	adiw	r30, 0x22	; 34
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	8e 0f       	add	r24, r30
     a58:	9f 1f       	adc	r25, r31
     a5a:	fc 01       	movw	r30, r24
     a5c:	eb 58       	subi	r30, 0x8B	; 139
     a5e:	fc 4f       	sbci	r31, 0xFC	; 252
     a60:	82 81       	ldd	r24, Z+2	; 0x02
     a62:	93 81       	ldd	r25, Z+3	; 0x03
     a64:	95 01       	movw	r18, r10
     a66:	0c 2e       	mov	r0, r28
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	0a 94       	dec	r0
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <__stack+0x16b>
     a72:	82 27       	eor	r24, r18
     a74:	93 27       	eor	r25, r19
     a76:	93 83       	std	Z+3, r25	; 0x03
     a78:	82 83       	std	Z+2, r24	; 0x02
					sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     a7a:	21 96       	adiw	r28, 0x01	; 1
     a7c:	c0 31       	cpi	r28, 0x10	; 16
     a7e:	d1 05       	cpc	r29, r1
     a80:	09 f0       	breq	.+2      	; 0xa84 <__stack+0x185>
     a82:	b2 cf       	rjmp	.-156    	; 0x9e8 <__stack+0xe9>
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	7f 90       	pop	r7
     a9c:	6f 90       	pop	r6
     a9e:	5f 90       	pop	r5
     aa0:	4f 90       	pop	r4
     aa2:	08 95       	ret

00000aa4 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     aa4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <update_tempo>
	read_switches();
     aa8:	0e 94 6d 07 	call	0xeda	; 0xeda <read_switches>
	check_start_stop_tap();
     aac:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <check_start_stop_tap>
	
	parse_switch_data();
     ab0:	0e 94 bb 07 	call	0xf76	; 0xf76 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     ab4:	80 91 75 03 	lds	r24, 0x0375
     ab8:	83 30       	cpi	r24, 0x03	; 3
     aba:	11 f4       	brne	.+4      	; 0xac0 <refresh+0x1c>
     abc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <live_hits>
	update_mode();
     ac0:	0e 94 22 06 	call	0xc44	; 0xc44 <update_mode>
	check_clear_switch();
     ac4:	0e 94 03 09 	call	0x1206	; 0x1206 <check_clear_switch>
	check_variation_switches();
     ac8:	0e 94 ce 08 	call	0x119c	; 0x119c <check_variation_switches>
	check_inst_switches();
     acc:	0e 94 29 08 	call	0x1052	; 0x1052 <check_inst_switches>
	update_step_board();
     ad0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <update_step_board>
	process_step();
     ad4:	0e 94 89 06 	call	0xd12	; 0xd12 <process_step>
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     ad8:	0e 94 49 07 	call	0xe92	; 0xe92 <update_spi>
	PORTD &= ~(1<<TRIG);
     adc:	5d 98       	cbi	0x0b, 5	; 11
     ade:	08 95       	ret

00000ae0 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     ae0:	8f e1       	ldi	r24, 0x1F	; 31
     ae2:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     ae6:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     aea:	88 ed       	ldi	r24, 0xD8	; 216
     aec:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     af0:	51 9a       	sbi	0x0a, 1	; 10
     af2:	08 95       	ret

00000af4 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	1f 92       	push	r1
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     b20:	80 91 c6 00 	lds	r24, 0x00C6
     b24:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     b26:	ae 01       	movw	r20, r28
     b28:	4f 5f       	subi	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	88 e8       	ldi	r24, 0x88	; 136
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 57 0a 	call	0x14ae	; 0x14ae <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     b36:	0f 90       	pop	r0
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_20>:

ISR (USART0_TX_vect) {
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1


	
}
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     b72:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     b74:	8d b1       	in	r24, 0x0d	; 13
     b76:	8c 60       	ori	r24, 0x0C	; 12
     b78:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     b7a:	87 b1       	in	r24, 0x07	; 7
     b7c:	8e 60       	ori	r24, 0x0E	; 14
     b7e:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     b80:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     b82:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     b84:	88 b1       	in	r24, 0x08	; 8
     b86:	81 7f       	andi	r24, 0xF1	; 241
     b88:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     b8a:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     b8c:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     b8e:	80 e5       	ldi	r24, 0x50	; 80
     b90:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     b94:	ed ea       	ldi	r30, 0xAD	; 173
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	81 60       	ori	r24, 0x01	; 1
     b9c:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     ba4:	8d e1       	ldi	r24, 0x1D	; 29
     ba6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	turn_on(FILL_MANUAL);
     baa:	82 e2       	ldi	r24, 0x22	; 34
     bac:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	
	update_spi();
     bb0:	0e 94 49 07 	call	0xe92	; 0xe92 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     bb4:	84 b5       	in	r24, 0x24	; 36
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     bba:	81 ee       	ldi	r24, 0xE1	; 225
     bbc:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     bbe:	88 e8       	ldi	r24, 0x88	; 136
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	0e 94 26 0a 	call	0x144c	; 0x144c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     bc6:	6a e5       	ldi	r22, 0x5A	; 90
     bc8:	74 e0       	ldi	r23, 0x04	; 4
     bca:	88 e8       	ldi	r24, 0x88	; 136
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	0e 94 1a 0a 	call	0x1434	; 0x1434 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     bd2:	68 e5       	ldi	r22, 0x58	; 88
     bd4:	74 e0       	ldi	r23, 0x04	; 4
     bd6:	88 e8       	ldi	r24, 0x88	; 136
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 1e 0a 	call	0x143c	; 0x143c <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     bde:	69 e5       	ldi	r22, 0x59	; 89
     be0:	74 e0       	ldi	r23, 0x04	; 4
     be2:	88 e8       	ldi	r24, 0x88	; 136
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 22 0a 	call	0x1444	; 0x1444 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     bea:	0e 94 70 05 	call	0xae0	; 0xae0 <setup_midi_usart>
	
	setup_internal_clock();
     bee:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     bf2:	e3 e7       	ldi	r30, 0x73	; 115
     bf4:	f2 e0       	ldi	r31, 0x02	; 2
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     bfa:	c1 e0       	ldi	r28, 0x01	; 1
     bfc:	c1 83       	std	Z+1, r28	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     bfe:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     c02:	e5 e4       	ldi	r30, 0x45	; 69
     c04:	f4 e0       	ldi	r31, 0x04	; 4
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	82 83       	std	Z+2, r24	; 0x02
	sequencer.START = 0;
     c0c:	a6 e7       	ldi	r26, 0x76	; 118
     c0e:	b3 e0       	ldi	r27, 0x03	; 3
     c10:	8c 91       	ld	r24, X
     c12:	8d 7f       	andi	r24, 0xFD	; 253
     c14:	8c 93       	st	X, r24
	//update_tempo();
	
	sequencer.step_num_first = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     c16:	80 81       	ld	r24, Z
     c18:	80 6f       	ori	r24, 0xF0	; 240
	sequencer.variation_mode = VAR_A;
     c1a:	89 7f       	andi	r24, 0xF9	; 249
     c1c:	80 83       	st	Z, r24
	turn_on(BASIC_VAR_A_LED);
     c1e:	84 e2       	ldi	r24, 0x24	; 36
     c20:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	sequencer.mode = PATTERN_FIRST;
     c24:	c0 93 75 03 	sts	0x0375, r28
	turn_on(FIRST_PART_LED);
     c28:	8a e2       	ldi	r24, 0x2A	; 42
     c2a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	turn_on(SCALE_3_LED);
     c2e:	87 e2       	ldi	r24, 0x27	; 39
     c30:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	sei(); //enable global interrupts	
     c34:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     c36:	88 e8       	ldi	r24, 0x88	; 136
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <midi_device_process>
	
	refresh();		
     c3e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <refresh>

	
	}
     c42:	f9 cf       	rjmp	.-14     	; 0xc36 <main+0xc4>

00000c44 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     c44:	80 91 52 02 	lds	r24, 0x0252
     c48:	86 ff       	sbrs	r24, 6
     c4a:	34 c0       	rjmp	.+104    	; 0xcb4 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     c4c:	e2 e5       	ldi	r30, 0x52	; 82
     c4e:	f2 e0       	ldi	r31, 0x02	; 2
     c50:	8f 7b       	andi	r24, 0xBF	; 191
     c52:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     c54:	80 91 76 03 	lds	r24, 0x0376
     c58:	80 ff       	sbrs	r24, 0
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     c5c:	80 91 59 02 	lds	r24, 0x0259
     c60:	88 23       	and	r24, r24
     c62:	21 f0       	breq	.+8      	; 0xc6c <update_mode+0x28>
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	80 93 59 02 	sts	0x0259, r24
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <update_mode+0x44>
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	80 93 59 02 	sts	0x0259, r24
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c74:	80 91 59 02 	lds	r24, 0x0259
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	86 30       	cpi	r24, 0x06	; 6
     c7c:	19 f0       	breq	.+6      	; 0xc84 <update_mode+0x40>
     c7e:	80 93 59 02 	sts	0x0259, r24
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <update_mode+0x44>
     c84:	10 92 59 02 	sts	0x0259, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c88:	20 91 59 02 	lds	r18, 0x0259
     c8c:	e2 2f       	mov	r30, r18
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	e4 5f       	subi	r30, 0xF4	; 244
     c92:	fd 4f       	sbci	r31, 0xFD	; 253
     c94:	80 81       	ld	r24, Z
     c96:	80 93 75 03 	sts	0x0375, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     c9a:	e8 e6       	ldi	r30, 0x68	; 104
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <update_mode+0x64>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	2a 95       	dec	r18
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     cac:	94 81       	ldd	r25, Z+4	; 0x04
     cae:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     cb0:	89 2b       	or	r24, r25
     cb2:	84 83       	std	Z+4, r24	; 0x04
     cb4:	08 95       	ret

00000cb6 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     cb6:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     cba:	90 93 5d 02 	sts	0x025D, r25
     cbe:	80 93 5c 02 	sts	0x025C, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     cc2:	20 91 5a 02 	lds	r18, 0x025A
     cc6:	30 91 5b 02 	lds	r19, 0x025B
     cca:	82 1b       	sub	r24, r18
     ccc:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	95 95       	asr	r25
     cd4:	87 95       	ror	r24
     cd6:	82 0f       	add	r24, r18
     cd8:	93 1f       	adc	r25, r19
     cda:	90 93 5b 02 	sts	0x025B, r25
     cde:	80 93 5a 02 	sts	0x025A, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     ce2:	23 e6       	ldi	r18, 0x63	; 99
     ce4:	34 e0       	ldi	r19, 0x04	; 4
     ce6:	a9 01       	movw	r20, r18
     ce8:	48 1b       	sub	r20, r24
     cea:	59 0b       	sbc	r21, r25
     cec:	ca 01       	movw	r24, r20
     cee:	e3 e7       	ldi	r30, 0x73	; 115
     cf0:	f2 e0       	ldi	r31, 0x02	; 2
     cf2:	54 83       	std	Z+4, r21	; 0x04
     cf4:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     cf6:	25 81       	ldd	r18, Z+5	; 0x05
     cf8:	36 81       	ldd	r19, Z+6	; 0x06
     cfa:	42 17       	cp	r20, r18
     cfc:	53 07       	cpc	r21, r19
     cfe:	11 f0       	breq	.+4      	; 0xd04 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     d00:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     d04:	e3 e7       	ldi	r30, 0x73	; 115
     d06:	f2 e0       	ldi	r31, 0x02	; 2
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	94 81       	ldd	r25, Z+4	; 0x04
     d0c:	96 83       	std	Z+6, r25	; 0x06
     d0e:	85 83       	std	Z+5, r24	; 0x05
     d10:	08 95       	ret

00000d12 <process_step>:
	
}

void process_step(void) {
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     d24:	80 91 76 03 	lds	r24, 0x0376
     d28:	81 ff       	sbrs	r24, 1
     d2a:	96 c0       	rjmp	.+300    	; 0xe58 <process_step+0x146>
			
			if (sequencer.mode == PATTERN_FIRST) {	
     d2c:	80 91 75 03 	lds	r24, 0x0375
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	09 f0       	breq	.+2      	; 0xd36 <process_step+0x24>
     d34:	9a c0       	rjmp	.+308    	; 0xe6a <process_step+0x158>
				if (sequencer.next_step_flag) {
     d36:	80 91 47 04 	lds	r24, 0x0447
     d3a:	81 ff       	sbrs	r24, 1
     d3c:	96 c0       	rjmp	.+300    	; 0xe6a <process_step+0x158>
					sequencer.next_step_flag = 0;
     d3e:	e5 e4       	ldi	r30, 0x45	; 69
     d40:	f4 e0       	ldi	r31, 0x04	; 4
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	82 83       	std	Z+2, r24	; 0x02
					while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     d48:	88 70       	andi	r24, 0x08	; 8
     d4a:	88 23       	and	r24, r24
     d4c:	f1 f3       	breq	.-4      	; 0xd4a <process_step+0x38>
					PORTD |= (1<<TRIG);
     d4e:	5d 9a       	sbi	0x0b, 5	; 11
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d50:	0f 2e       	mov	r0, r31
     d52:	f6 e4       	ldi	r31, 0x46	; 70
     d54:	ef 2e       	mov	r14, r31
     d56:	f4 e0       	ldi	r31, 0x04	; 4
     d58:	ff 2e       	mov	r15, r31
     d5a:	f0 2d       	mov	r31, r0
     d5c:	d7 01       	movw	r26, r14
     d5e:	9c 91       	ld	r25, X
     d60:	89 2f       	mov	r24, r25
     d62:	82 95       	swap	r24
     d64:	8f 70       	andi	r24, 0x0F	; 15
     d66:	07 e4       	ldi	r16, 0x47	; 71
     d68:	14 e0       	ldi	r17, 0x04	; 4
     d6a:	f8 01       	movw	r30, r16
     d6c:	90 81       	ld	r25, Z
     d6e:	91 70       	andi	r25, 0x01	; 1
     d70:	92 95       	swap	r25
     d72:	90 7f       	andi	r25, 0xF0	; 240
     d74:	98 2b       	or	r25, r24
     d76:	21 e0       	ldi	r18, 0x01	; 1
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	a9 01       	movw	r20, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <process_step+0x70>
     d7e:	44 0f       	add	r20, r20
     d80:	55 1f       	adc	r21, r21
     d82:	9a 95       	dec	r25
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <process_step+0x6c>
     d86:	ca 01       	movw	r24, r20
     d88:	e0 91 49 04 	lds	r30, 0x0449
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	b2 96       	adiw	r30, 0x22	; 34
     d90:	0f 2e       	mov	r0, r31
     d92:	f5 e4       	ldi	r31, 0x45	; 69
     d94:	cf 2e       	mov	r12, r31
     d96:	f4 e0       	ldi	r31, 0x04	; 4
     d98:	df 2e       	mov	r13, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	d6 01       	movw	r26, r12
     d9e:	2c 91       	ld	r18, X
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	0f 2e       	mov	r0, r31
     da6:	f7 e6       	ldi	r31, 0x67	; 103
     da8:	bf 2e       	mov	r11, r31
     daa:	f0 2d       	mov	r31, r0
     dac:	21 70       	andi	r18, 0x01	; 1
     dae:	b2 9e       	mul	r11, r18
     db0:	e0 0d       	add	r30, r0
     db2:	f1 1d       	adc	r31, r1
     db4:	11 24       	eor	r1, r1
     db6:	eb 58       	subi	r30, 0x8B	; 139
     db8:	fc 4f       	sbci	r31, 0xFC	; 252
     dba:	32 81       	ldd	r19, Z+2	; 0x02
     dbc:	23 81       	ldd	r18, Z+3	; 0x03
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     dbe:	e8 e6       	ldi	r30, 0x68	; 104
     dc0:	f2 e0       	ldi	r31, 0x02	; 2
     dc2:	43 2f       	mov	r20, r19
     dc4:	48 23       	and	r20, r24
     dc6:	40 95       	com	r20
			if (sequencer.mode == PATTERN_FIRST) {	
				if (sequencer.next_step_flag) {
					sequencer.next_step_flag = 0;
					while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     dc8:	38 2b       	or	r19, r24
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     dca:	34 23       	and	r19, r20
     dcc:	31 83       	std	Z+1, r19	; 0x01
					spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
					spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     dce:	82 2f       	mov	r24, r18
     dd0:	89 23       	and	r24, r25
     dd2:	80 95       	com	r24
					sequencer.next_step_flag = 0;
					while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
					spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     dd4:	29 2b       	or	r18, r25
					spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     dd6:	28 23       	and	r18, r24
     dd8:	20 83       	st	Z, r18
					trigger_step();
     dda:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     dde:	f6 01       	movw	r30, r12
     de0:	80 81       	ld	r24, Z
     de2:	81 70       	andi	r24, 0x01	; 1
     de4:	c8 2f       	mov	r28, r24
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	df 2f       	mov	r29, r31
     dea:	bc 9e       	mul	r11, r28
     dec:	f0 01       	movw	r30, r0
     dee:	bd 9e       	mul	r11, r29
     df0:	f0 0d       	add	r31, r0
     df2:	11 24       	eor	r1, r1
     df4:	e9 54       	subi	r30, 0x49	; 73
     df6:	fc 4f       	sbci	r31, 0xFC	; 252
     df8:	d7 01       	movw	r26, r14
     dfa:	8c 91       	ld	r24, X
     dfc:	98 2f       	mov	r25, r24
     dfe:	92 95       	swap	r25
     e00:	9f 70       	andi	r25, 0x0F	; 15
     e02:	d8 01       	movw	r26, r16
     e04:	8c 91       	ld	r24, X
     e06:	81 70       	andi	r24, 0x01	; 1
     e08:	82 95       	swap	r24
     e0a:	80 7f       	andi	r24, 0xF0	; 240
     e0c:	89 2b       	or	r24, r25
     e0e:	40 81       	ld	r20, Z
     e10:	51 81       	ldd	r21, Z+1	; 0x01
     e12:	62 81       	ldd	r22, Z+2	; 0x02
     e14:	73 81       	ldd	r23, Z+3	; 0x03
     e16:	8a 01       	movw	r16, r20
     e18:	9b 01       	movw	r18, r22
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <process_step+0x112>
     e1c:	36 95       	lsr	r19
     e1e:	27 95       	ror	r18
     e20:	17 95       	ror	r17
     e22:	07 95       	ror	r16
     e24:	8a 95       	dec	r24
     e26:	d2 f7       	brpl	.-12     	; 0xe1c <process_step+0x10a>
     e28:	00 ff       	sbrs	r16, 0
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <process_step+0x12a>
						spi_data[8] |= 1<<ACCENT;
     e2c:	e8 e6       	ldi	r30, 0x68	; 104
     e2e:	f2 e0       	ldi	r31, 0x02	; 2
     e30:	80 85       	ldd	r24, Z+8	; 0x08
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     e36:	84 e1       	ldi	r24, 0x14	; 20
     e38:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     e3c:	ee e6       	ldi	r30, 0x6E	; 110
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	83 60       	ori	r24, 0x03	; 3
     e4a:	85 bd       	out	0x25, r24	; 37
					sequencer.trigger_finished = 0;
     e4c:	e5 e4       	ldi	r30, 0x45	; 69
     e4e:	f4 e0       	ldi	r31, 0x04	; 4
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	82 83       	std	Z+2, r24	; 0x02
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <process_step+0x158>
				
				//handle patterns >16 steps here
				
			}
				
		} else if (sequencer.next_step_flag){
     e58:	80 91 47 04 	lds	r24, 0x0447
     e5c:	81 ff       	sbrs	r24, 1
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <process_step+0x158>
			
			sequencer.next_step_flag = 0;
     e60:	e5 e4       	ldi	r30, 0x45	; 69
     e62:	f4 e0       	ldi	r31, 0x04	; 4
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	8d 7f       	andi	r24, 0xFD	; 253
     e68:	82 83       	std	Z+2, r24	; 0x02
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	08 95       	ret

00000e7e <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     e7e:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     e82:	ed ea       	ldi	r30, 0xAD	; 173
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	ec f7       	brge	.-6      	; 0xe86 <spi_shift_byte+0x8>
	return SPDR1;
     e8c:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     e90:	08 95       	ret

00000e92 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     e96:	c8 e6       	ldi	r28, 0x68	; 104
     e98:	d2 e0       	ldi	r29, 0x02	; 2
     e9a:	88 81       	ld	r24, Y
     e9c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     ebe:	8e 81       	ldd	r24, Y+6	; 0x06
     ec0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     eca:	88 85       	ldd	r24, Y+8	; 0x08
     ecc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     ed0:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     ed2:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <read_switches>:

void read_switches(void) { //reads switch data
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     ede:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
     ee6:	c3 e6       	ldi	r28, 0x63	; 99
     ee8:	d2 e0       	ldi	r29, 0x02	; 2
     eea:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
     ef2:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
     efa:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
     f02:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 3f 07 	call	0xe7e	; 0xe7e <spi_shift_byte>
     f0a:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     f0c:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
     f0e:	28 81       	ld	r18, Y
     f10:	92 2f       	mov	r25, r18
     f12:	96 95       	lsr	r25
     f14:	e6 e7       	ldi	r30, 0x76	; 118
     f16:	f3 e0       	ldi	r31, 0x03	; 3
     f18:	30 81       	ld	r19, Z
     f1a:	90 fb       	bst	r25, 0
     f1c:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	49 2f       	mov	r20, r25
     f22:	42 95       	swap	r20
     f24:	4f 70       	andi	r20, 0x0F	; 15
     f26:	40 fb       	bst	r20, 0
     f28:	32 f9       	bld	r19, 2
     f2a:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     f2c:	ee e5       	ldi	r30, 0x5E	; 94
     f2e:	f2 e0       	ldi	r31, 0x02	; 2
     f30:	30 81       	ld	r19, Z
     f32:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     f34:	32 27       	eor	r19, r18
     f36:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     f38:	23 23       	and	r18, r19
     f3a:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     f3c:	31 81       	ldd	r19, Z+1	; 0x01
     f3e:	29 81       	ldd	r18, Y+1	; 0x01
     f40:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     f42:	32 27       	eor	r19, r18
     f44:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     f46:	23 23       	and	r18, r19
     f48:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     f4a:	22 81       	ldd	r18, Z+2	; 0x02
     f4c:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     f4e:	29 27       	eor	r18, r25
     f50:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     f52:	92 23       	and	r25, r18
     f54:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     f56:	23 81       	ldd	r18, Z+3	; 0x03
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     f5c:	29 27       	eor	r18, r25
     f5e:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     f60:	92 23       	and	r25, r18
     f62:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     f64:	94 81       	ldd	r25, Z+4	; 0x04
     f66:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     f68:	98 27       	eor	r25, r24
     f6a:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     f6c:	89 23       	and	r24, r25
     f6e:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     f7a:	da 01       	movw	r26, r20
     f7c:	aa 0f       	add	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	ae 5e       	subi	r26, 0xEE	; 238
     f82:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     f84:	8c 91       	ld	r24, X
     f86:	e8 2f       	mov	r30, r24
     f88:	e6 95       	lsr	r30
     f8a:	e6 95       	lsr	r30
     f8c:	e6 95       	lsr	r30
     f8e:	e7 70       	andi	r30, 0x07	; 7
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	ed 59       	subi	r30, 0x9D	; 157
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	20 81       	ld	r18, Z
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	98 2f       	mov	r25, r24
     f9c:	97 70       	andi	r25, 0x07	; 7
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <parse_switch_data+0x2e>
     fa0:	35 95       	asr	r19
     fa2:	27 95       	ror	r18
     fa4:	9a 95       	dec	r25
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <parse_switch_data+0x2a>
     fa8:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     faa:	86 fb       	bst	r24, 6
     fac:	99 27       	eor	r25, r25
     fae:	90 f9       	bld	r25, 0
     fb0:	29 27       	eor	r18, r25
     fb2:	20 fb       	bst	r18, 0
     fb4:	86 f9       	bld	r24, 6
     fb6:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     fb8:	4f 5f       	subi	r20, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	43 32       	cpi	r20, 0x23	; 35
     fbe:	51 05       	cpc	r21, r1
     fc0:	e1 f6       	brne	.-72     	; 0xf7a <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     fc2:	08 95       	ret

00000fc4 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
     fc4:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     fc6:	80 91 71 02 	lds	r24, 0x0271
     fca:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     fcc:	89 27       	eor	r24, r25
     fce:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     fd2:	89 23       	and	r24, r25
     fd4:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
     fd8:	e6 e7       	ldi	r30, 0x76	; 118
     fda:	f3 e0       	ldi	r31, 0x03	; 3
     fdc:	90 81       	ld	r25, Z
     fde:	91 fb       	bst	r25, 1
     fe0:	22 27       	eor	r18, r18
     fe2:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     fe4:	86 95       	lsr	r24
     fe6:	82 27       	eor	r24, r18
     fe8:	80 fb       	bst	r24, 0
     fea:	91 f9       	bld	r25, 1
     fec:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
     fee:	91 ff       	sbrs	r25, 1
     ff0:	2d c0       	rjmp	.+90     	; 0x104c <check_start_stop_tap+0x88>
     ff2:	21 11       	cpse	r18, r1
     ff4:	2d c0       	rjmp	.+90     	; 0x1050 <check_start_stop_tap+0x8c>
		
		sequencer.current_step = 0;
     ff6:	e5 e4       	ldi	r30, 0x45	; 69
     ff8:	f4 e0       	ldi	r31, 0x04	; 4
     ffa:	81 81       	ldd	r24, Z+1	; 0x01
     ffc:	8f 70       	andi	r24, 0x0F	; 15
     ffe:	81 83       	std	Z+1, r24	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
		sequencer.next_step_flag = 1;
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	82 83       	std	Z+2, r24	; 0x02
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1008:	10 92 74 02 	sts	0x0274, r1
		sequencer.var_change = 0;
    100c:	80 81       	ld	r24, Z
    100e:	87 7f       	andi	r24, 0xF7	; 247
    1010:	80 83       	st	Z, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1012:	81 fd       	sbrc	r24, 1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <check_start_stop_tap+0x58>
			
			sequencer.variation = VAR_A; //start on variation A
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	80 83       	st	Z, r24
    101a:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
    101c:	e5 e4       	ldi	r30, 0x45	; 69
    101e:	f4 e0       	ldi	r31, 0x04	; 4
    1020:	80 81       	ld	r24, Z
    1022:	81 60       	ori	r24, 0x01	; 1
    1024:	80 83       	st	Z, r24
    1026:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
    1028:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    102c:	80 91 49 04 	lds	r24, 0x0449
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	fc 01       	movw	r30, r24
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	e8 0f       	add	r30, r24
    103a:	f9 1f       	adc	r31, r25
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	e0 50       	subi	r30, 0x00	; 0
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	85 81       	ldd	r24, Z+5	; 0x05
    1046:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
    104a:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    104c:	21 30       	cpi	r18, 0x01	; 1
    104e:	61 f3       	breq	.-40     	; 0x1028 <check_start_stop_tap+0x64>
    1050:	08 95       	ret

00001052 <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
    1052:	3f 92       	push	r3
    1054:	4f 92       	push	r4
    1056:	5f 92       	push	r5
    1058:	6f 92       	push	r6
    105a:	7f 92       	push	r7
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	0f 2e       	mov	r0, r31
    1076:	f5 e0       	ldi	r31, 0x05	; 5
    1078:	ef 2e       	mov	r14, r31
    107a:	f1 e0       	ldi	r31, 0x01	; 1
    107c:	ff 2e       	mov	r15, r31
    107e:	f0 2d       	mov	r31, r0
    1080:	0f 2e       	mov	r0, r31
    1082:	fb e3       	ldi	r31, 0x3B	; 59
    1084:	8f 2e       	mov	r8, r31
    1086:	f1 e0       	ldi	r31, 0x01	; 1
    1088:	9f 2e       	mov	r9, r31
    108a:	f0 2d       	mov	r31, r0
    108c:	02 e1       	ldi	r16, 0x12	; 18
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	c1 e1       	ldi	r28, 0x11	; 17
    1092:	d0 e0       	ldi	r29, 0x00	; 0
    1094:	c1 2c       	mov	r12, r1
    1096:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1098:	0f 2e       	mov	r0, r31
    109a:	f9 e4       	ldi	r31, 0x49	; 73
    109c:	af 2e       	mov	r10, r31
    109e:	f4 e0       	ldi	r31, 0x04	; 4
    10a0:	bf 2e       	mov	r11, r31
    10a2:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    10a4:	0f 2e       	mov	r0, r31
    10a6:	ff e5       	ldi	r31, 0x5F	; 95
    10a8:	4f 2e       	mov	r4, r31
    10aa:	f1 e0       	ldi	r31, 0x01	; 1
    10ac:	5f 2e       	mov	r5, r31
    10ae:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    10b0:	0f 2e       	mov	r0, r31
    10b2:	ff e0       	ldi	r31, 0x0F	; 15
    10b4:	3f 2e       	mov	r3, r31
    10b6:	f0 2d       	mov	r31, r0
    10b8:	0c c0       	rjmp	.+24     	; 0x10d2 <check_inst_switches+0x80>
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	c8 1a       	sub	r12, r24
    10be:	d8 0a       	sbc	r13, r24
    10c0:	21 96       	adiw	r28, 0x01	; 1
    10c2:	0f 5f       	subi	r16, 0xFF	; 255
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	a6 e0       	ldi	r26, 0x06	; 6
    10c8:	ea 0e       	add	r14, r26
    10ca:	f1 1c       	adc	r15, r1
    10cc:	b6 e0       	ldi	r27, 0x06	; 6
    10ce:	8b 0e       	add	r8, r27
    10d0:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    10d2:	fe 01       	movw	r30, r28
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	ee 5e       	subi	r30, 0xEE	; 238
    10da:	fd 4f       	sbci	r31, 0xFD	; 253
    10dc:	80 81       	ld	r24, Z
    10de:	86 ff       	sbrs	r24, 6
    10e0:	37 c0       	rjmp	.+110    	; 0x1150 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    10e2:	fe 01       	movw	r30, r28
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	ee 5e       	subi	r30, 0xEE	; 238
    10ea:	fd 4f       	sbci	r31, 0xFD	; 253
    10ec:	8f 7b       	andi	r24, 0xBF	; 191
    10ee:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    10f0:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
    10f4:	f7 01       	movw	r30, r14
    10f6:	d7 01       	movw	r26, r14
    10f8:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    10fa:	8c 91       	ld	r24, X
    10fc:	8f 3f       	cpi	r24, 0xFF	; 255
    10fe:	a9 f0       	breq	.+42     	; 0x112a <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1100:	d5 01       	movw	r26, r10
    1102:	8c 91       	ld	r24, X
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	c8 16       	cp	r12, r24
    1108:	d9 06       	cpc	r13, r25
    110a:	49 f4       	brne	.+18     	; 0x111e <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    110c:	f4 01       	movw	r30, r8
    110e:	80 81       	ld	r24, Z
    1110:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
    1114:	89 e0       	ldi	r24, 0x09	; 9
    1116:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    1118:	d5 01       	movw	r26, r10
    111a:	8c 93       	st	X, r24
    111c:	19 c0       	rjmp	.+50     	; 0x1150 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    111e:	80 81       	ld	r24, Z
    1120:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    1124:	f5 01       	movw	r30, r10
    1126:	c0 82       	st	Z, r12
    1128:	13 c0       	rjmp	.+38     	; 0x1150 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    112a:	d5 01       	movw	r26, r10
    112c:	8c 91       	ld	r24, X
    112e:	86 30       	cpi	r24, 0x06	; 6
    1130:	51 f4       	brne	.+20     	; 0x1146 <check_inst_switches+0xf4>
    1132:	c7 31       	cpi	r28, 0x17	; 23
    1134:	d1 05       	cpc	r29, r1
    1136:	39 f4       	brne	.+14     	; 0x1146 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    1138:	f2 01       	movw	r30, r4
    113a:	80 81       	ld	r24, Z
    113c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					sequencer.current_inst = MA;
    1140:	d5 01       	movw	r26, r10
    1142:	3c 92       	st	X, r3
    1144:	ba cf       	rjmp	.-140    	; 0x10ba <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    1146:	80 81       	ld	r24, Z
    1148:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    114c:	f5 01       	movw	r30, r10
    114e:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1150:	0c 31       	cpi	r16, 0x1C	; 28
    1152:	11 05       	cpc	r17, r1
    1154:	0c f4       	brge	.+2      	; 0x1158 <check_inst_switches+0x106>
    1156:	b1 cf       	rjmp	.-158    	; 0x10ba <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    1158:	80 91 32 02 	lds	r24, 0x0232
    115c:	86 ff       	sbrs	r24, 6
    115e:	0c c0       	rjmp	.+24     	; 0x1178 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f2 e0       	ldi	r31, 0x02	; 2
    1164:	8f 7b       	andi	r24, 0xBF	; 191
    1166:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    1168:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    116c:	84 e1       	ldi	r24, 0x14	; 20
    116e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
		sequencer.current_inst = AC;
    1172:	80 e1       	ldi	r24, 0x10	; 16
    1174:	80 93 49 04 	sts	0x0449, r24
	}
	
}	
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	bf 90       	pop	r11
    118a:	af 90       	pop	r10
    118c:	9f 90       	pop	r9
    118e:	8f 90       	pop	r8
    1190:	7f 90       	pop	r7
    1192:	6f 90       	pop	r6
    1194:	5f 90       	pop	r5
    1196:	4f 90       	pop	r4
    1198:	3f 90       	pop	r3
    119a:	08 95       	ret

0000119c <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    119c:	80 91 4e 02 	lds	r24, 0x024E
    11a0:	86 ff       	sbrs	r24, 6
    11a2:	30 c0       	rjmp	.+96     	; 0x1204 <check_variation_switches+0x68>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    11a4:	ee e4       	ldi	r30, 0x4E	; 78
    11a6:	f2 e0       	ldi	r31, 0x02	; 2
    11a8:	8f 7b       	andi	r24, 0xBF	; 191
    11aa:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    11ac:	80 91 45 04 	lds	r24, 0x0445
    11b0:	86 95       	lsr	r24
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	83 70       	andi	r24, 0x03	; 3
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	41 f0       	breq	.+16     	; 0x11ca <check_variation_switches+0x2e>
    11ba:	e5 e4       	ldi	r30, 0x45	; 69
    11bc:	f4 e0       	ldi	r31, 0x04	; 4
    11be:	88 0f       	add	r24, r24
    11c0:	90 81       	ld	r25, Z
    11c2:	99 7f       	andi	r25, 0xF9	; 249
    11c4:	89 2b       	or	r24, r25
    11c6:	80 83       	st	Z, r24
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <check_variation_switches+0x38>
    11ca:	e5 e4       	ldi	r30, 0x45	; 69
    11cc:	f4 e0       	ldi	r31, 0x04	; 4
    11ce:	80 81       	ld	r24, Z
    11d0:	89 7f       	andi	r24, 0xF9	; 249
    11d2:	80 83       	st	Z, r24
		if (sequencer.START) {
    11d4:	80 91 76 03 	lds	r24, 0x0376
    11d8:	81 ff       	sbrs	r24, 1
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <check_variation_switches+0x4c>
			
			 sequencer.var_change = 1; //set change flag to be handled when new measure starts
    11dc:	e5 e4       	ldi	r30, 0x45	; 69
    11de:	f4 e0       	ldi	r31, 0x04	; 4
    11e0:	80 81       	ld	r24, Z
    11e2:	88 60       	ori	r24, 0x08	; 8
    11e4:	80 83       	st	Z, r24
    11e6:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    11e8:	80 91 45 04 	lds	r24, 0x0445
    11ec:	81 fd       	sbrc	r24, 1
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <check_variation_switches+0x5e>
				
				sequencer.variation = VAR_A;
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f4 e0       	ldi	r31, 0x04	; 4
    11f4:	8e 7f       	andi	r24, 0xFE	; 254
    11f6:	80 83       	st	Z, r24
    11f8:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    11fa:	e5 e4       	ldi	r30, 0x45	; 69
    11fc:	f4 e0       	ldi	r31, 0x04	; 4
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24
    1204:	08 95       	ret

00001206 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1212:	80 91 76 03 	lds	r24, 0x0376
    1216:	86 70       	andi	r24, 0x06	; 6
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	e1 f5       	brne	.+120    	; 0x1294 <check_clear_switch+0x8e>
		
		switch (sequencer.mode) {
    121c:	80 91 75 03 	lds	r24, 0x0375
    1220:	81 11       	cpse	r24, r1
    1222:	3f c0       	rjmp	.+126    	; 0x12a2 <check_clear_switch+0x9c>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    1224:	8c e1       	ldi	r24, 0x1C	; 28
    1226:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    122a:	e5 e4       	ldi	r30, 0x45	; 69
    122c:	f4 e0       	ldi	r31, 0x04	; 4
    122e:	80 81       	ld	r24, Z
    1230:	80 fb       	bst	r24, 0
    1232:	ee 24       	eor	r14, r14
    1234:	e0 f8       	bld	r14, 0
    1236:	f1 2c       	mov	r15, r1
    1238:	87 e6       	ldi	r24, 0x67	; 103
    123a:	8e 9d       	mul	r24, r14
    123c:	d0 01       	movw	r26, r0
    123e:	8f 9d       	mul	r24, r15
    1240:	b0 0d       	add	r27, r0
    1242:	11 24       	eor	r1, r1
    1244:	a9 58       	subi	r26, 0x89	; 137
    1246:	bc 4f       	sbci	r27, 0xFC	; 252
    1248:	90 e4       	ldi	r25, 0x40	; 64
    124a:	ed 01       	movw	r28, r26
    124c:	19 92       	st	Y+, r1
    124e:	9a 95       	dec	r25
    1250:	e9 f7       	brne	.-6      	; 0x124c <check_clear_switch+0x46>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    1252:	90 81       	ld	r25, Z
    1254:	09 2f       	mov	r16, r25
    1256:	01 70       	andi	r16, 0x01	; 1
    1258:	10 e0       	ldi	r17, 0x00	; 0
    125a:	80 9f       	mul	r24, r16
    125c:	d0 01       	movw	r26, r0
    125e:	81 9f       	mul	r24, r17
    1260:	b0 0d       	add	r27, r0
    1262:	11 24       	eor	r1, r1
    1264:	a5 54       	subi	r26, 0x45	; 69
    1266:	bc 4f       	sbci	r27, 0xFC	; 252
    1268:	92 e2       	ldi	r25, 0x22	; 34
    126a:	ed 01       	movw	r28, r26
    126c:	19 92       	st	Y+, r1
    126e:	9a 95       	dec	r25
    1270:	e9 f7       	brne	.-6      	; 0x126c <check_clear_switch+0x66>
				sequencer.pattern[sequencer.variation].accent = 0;				
    1272:	90 81       	ld	r25, Z
    1274:	91 70       	andi	r25, 0x01	; 1
    1276:	c9 2f       	mov	r28, r25
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	d9 2f       	mov	r29, r25
    127c:	8c 9f       	mul	r24, r28
    127e:	f0 01       	movw	r30, r0
    1280:	8d 9f       	mul	r24, r29
    1282:	f0 0d       	add	r31, r0
    1284:	11 24       	eor	r1, r1
    1286:	e9 54       	subi	r30, 0x49	; 73
    1288:	fc 4f       	sbci	r31, 0xFC	; 252
    128a:	10 82       	st	Z, r1
    128c:	11 82       	std	Z+1, r1	; 0x01
    128e:	12 82       	std	Z+2, r1	; 0x02
    1290:	13 82       	std	Z+3, r1	; 0x03
				break;
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <check_clear_switch+0x9c>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    1294:	80 91 75 03 	lds	r24, 0x0375
    1298:	81 11       	cpse	r24, r1
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <check_clear_switch+0x9c>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    129c:	8c e1       	ldi	r24, 0x1C	; 28
    129e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
		}
		
	}
	
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	08 95       	ret

000012b0 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    12b0:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    12b2:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    12b4:	74 83       	std	Z+4, r23	; 0x04
    12b6:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    12b8:	11 82       	std	Z+1, r1	; 0x01
    12ba:	10 82       	st	Z, r1
    12bc:	08 95       	ret

000012be <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    12cc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <store_and_clear_interrupt>
    12d0:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    12d2:	f9 80       	ldd	r15, Y+1	; 0x01
    12d4:	4f 2d       	mov	r20, r15
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	ca 01       	movw	r24, r20
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	2a 81       	ldd	r18, Y+2	; 0x02
    12de:	62 2f       	mov	r22, r18
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	0e 94 87 0c 	call	0x190e	; 0x190e <__divmodhi4>
    12e6:	28 81       	ld	r18, Y
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	82 17       	cp	r24, r18
    12ec:	93 07       	cpc	r25, r19
    12ee:	29 f4       	brne	.+10     	; 0x12fa <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    12f0:	81 2f       	mov	r24, r17
    12f2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <restore_interrupt_setting>
      return false;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	12 c0       	rjmp	.+36     	; 0x131e <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	ef 0d       	add	r30, r15
    1300:	f1 1d       	adc	r31, r1
    1302:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1304:	29 81       	ldd	r18, Y+1	; 0x01
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	c9 01       	movw	r24, r18
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	6a 81       	ldd	r22, Y+2	; 0x02
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 87 0c 	call	0x190e	; 0x190e <__divmodhi4>
    1314:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1316:	81 2f       	mov	r24, r17
    1318:	0e 94 db 09 	call	0x13b6	; 0x13b6 <restore_interrupt_setting>
      return true;
    131c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	08 95       	ret

0000132a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1330:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1334:	39 81       	ldd	r19, Y+1	; 0x01
    1336:	28 81       	ld	r18, Y
    1338:	32 17       	cp	r19, r18
    133a:	18 f0       	brcs	.+6      	; 0x1342 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    133c:	c3 2f       	mov	r28, r19
    133e:	c2 1b       	sub	r28, r18
    1340:	04 c0       	rjmp	.+8      	; 0x134a <bytequeue_length+0x20>
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	c3 2f       	mov	r28, r19
    1346:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1348:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    134a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <restore_interrupt_setting>
   return len;
}
    134e:	8c 2f       	mov	r24, r28
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1356:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1358:	80 81       	ld	r24, Z
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	9b 01       	movw	r18, r22
    135e:	28 0f       	add	r18, r24
    1360:	31 1d       	adc	r19, r1
    1362:	c9 01       	movw	r24, r18
    1364:	62 81       	ldd	r22, Z+2	; 0x02
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 87 0c 	call	0x190e	; 0x190e <__divmodhi4>
    136c:	03 80       	ldd	r0, Z+3	; 0x03
    136e:	f4 81       	ldd	r31, Z+4	; 0x04
    1370:	e0 2d       	mov	r30, r0
    1372:	e8 0f       	add	r30, r24
    1374:	f9 1f       	adc	r31, r25
}
    1376:	80 81       	ld	r24, Z
    1378:	08 95       	ret

0000137a <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	ec 01       	movw	r28, r24
    1382:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1384:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <store_and_clear_interrupt>
    1388:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    138a:	88 81       	ld	r24, Y
    138c:	21 2f       	mov	r18, r17
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	b9 01       	movw	r22, r18
    1392:	68 0f       	add	r22, r24
    1394:	71 1d       	adc	r23, r1
    1396:	cb 01       	movw	r24, r22
    1398:	6a 81       	ldd	r22, Y+2	; 0x02
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	0e 94 87 0c 	call	0x190e	; 0x190e <__divmodhi4>
    13a0:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    13a2:	84 2f       	mov	r24, r20
    13a4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <restore_interrupt_setting>
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	08 95       	ret

000013b0 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    13b0:	8f b7       	in	r24, 0x3f	; 63
   cli();
    13b2:	f8 94       	cli
   return sreg;
}
    13b4:	08 95       	ret

000013b6 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    13b6:	8f bf       	out	0x3f, r24	; 63
    13b8:	08 95       	ret

000013ba <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    13ba:	88 1f       	adc	r24, r24
    13bc:	88 27       	eor	r24, r24
    13be:	88 1f       	adc	r24, r24
    13c0:	08 95       	ret

000013c2 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	88 3f       	cpi	r24, 0xF8	; 248
    13c6:	08 f4       	brcc	.+2      	; 0x13ca <midi_is_realtime+0x8>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
}
    13ca:	89 2f       	mov	r24, r25
    13cc:	08 95       	ret

000013ce <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    13ce:	98 2f       	mov	r25, r24
    13d0:	90 7f       	andi	r25, 0xF0	; 240
    13d2:	90 3c       	cpi	r25, 0xC0	; 192
    13d4:	b1 f0       	breq	.+44     	; 0x1402 <midi_packet_length+0x34>
    13d6:	58 f4       	brcc	.+22     	; 0x13ee <midi_packet_length+0x20>
    13d8:	90 39       	cpi	r25, 0x90	; 144
    13da:	41 f1       	breq	.+80     	; 0x142c <midi_packet_length+0x5e>
    13dc:	18 f4       	brcc	.+6      	; 0x13e4 <midi_packet_length+0x16>
    13de:	90 38       	cpi	r25, 0x80	; 128
    13e0:	19 f5       	brne	.+70     	; 0x1428 <midi_packet_length+0x5a>
    13e2:	24 c0       	rjmp	.+72     	; 0x142c <midi_packet_length+0x5e>
    13e4:	90 3a       	cpi	r25, 0xA0	; 160
    13e6:	11 f1       	breq	.+68     	; 0x142c <midi_packet_length+0x5e>
    13e8:	90 3b       	cpi	r25, 0xB0	; 176
    13ea:	f1 f4       	brne	.+60     	; 0x1428 <midi_packet_length+0x5a>
    13ec:	1f c0       	rjmp	.+62     	; 0x142c <midi_packet_length+0x5e>
    13ee:	90 3e       	cpi	r25, 0xE0	; 224
    13f0:	e9 f0       	breq	.+58     	; 0x142c <midi_packet_length+0x5e>
    13f2:	18 f4       	brcc	.+6      	; 0x13fa <midi_packet_length+0x2c>
    13f4:	90 3d       	cpi	r25, 0xD0	; 208
    13f6:	29 f0       	breq	.+10     	; 0x1402 <midi_packet_length+0x34>
    13f8:	17 c0       	rjmp	.+46     	; 0x1428 <midi_packet_length+0x5a>
    13fa:	90 3f       	cpi	r25, 0xF0	; 240
    13fc:	21 f0       	breq	.+8      	; 0x1406 <midi_packet_length+0x38>
    13fe:	93 3f       	cpi	r25, 0xF3	; 243
    1400:	99 f4       	brne	.+38     	; 0x1428 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	08 95       	ret
      case 0xF0:
         switch(status) {
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	fc 01       	movw	r30, r24
    140a:	e1 5f       	subi	r30, 0xF1	; 241
    140c:	f1 09       	sbc	r31, r1
    140e:	ef 30       	cpi	r30, 0x0F	; 15
    1410:	f1 05       	cpc	r31, r1
    1412:	40 f4       	brcc	.+16     	; 0x1424 <midi_packet_length+0x56>
    1414:	e6 5a       	subi	r30, 0xA6	; 166
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1432:	08 95       	ret

00001434 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1434:	fc 01       	movw	r30, r24
    1436:	75 83       	std	Z+5, r23	; 0x05
    1438:	64 83       	std	Z+4, r22	; 0x04
    143a:	08 95       	ret

0000143c <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    143c:	fc 01       	movw	r30, r24
    143e:	77 83       	std	Z+7, r23	; 0x07
    1440:	66 83       	std	Z+6, r22	; 0x06
    1442:	08 95       	ret

00001444 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1444:	fc 01       	movw	r30, r24
    1446:	77 8b       	std	Z+23, r23	; 0x17
    1448:	66 8b       	std	Z+22, r22	; 0x16
    144a:	08 95       	ret

0000144c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1452:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1454:	1f a2       	std	Y+39, r1	; 0x27
    1456:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1458:	bc 01       	movw	r22, r24
    145a:	68 5d       	subi	r22, 0xD8	; 216
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	40 ec       	ldi	r20, 0xC0	; 192
    1460:	88 51       	subi	r24, 0x18	; 24
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	0e 94 58 09 	call	0x12b0	; 0x12b0 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1468:	1b 82       	std	Y+3, r1	; 0x03
    146a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    146c:	1d 82       	std	Y+5, r1	; 0x05
    146e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1470:	1f 82       	std	Y+7, r1	; 0x07
    1472:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1474:	19 86       	std	Y+9, r1	; 0x09
    1476:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1478:	1b 86       	std	Y+11, r1	; 0x0b
    147a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    147c:	1d 86       	std	Y+13, r1	; 0x0d
    147e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1480:	1f 86       	std	Y+15, r1	; 0x0f
    1482:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1484:	19 8a       	std	Y+17, r1	; 0x11
    1486:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1488:	1b 8a       	std	Y+19, r1	; 0x13
    148a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    148c:	1d 8a       	std	Y+21, r1	; 0x15
    148e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1490:	1f 8a       	std	Y+23, r1	; 0x17
    1492:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1494:	19 8e       	std	Y+25, r1	; 0x19
    1496:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1498:	1b 8e       	std	Y+27, r1	; 0x1b
    149a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    149c:	1d 8e       	std	Y+29, r1	; 0x1d
    149e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    14a0:	1f 8e       	std	Y+31, r1	; 0x1f
    14a2:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    14a4:	19 a2       	std	Y+33, r1	; 0x21
    14a6:	18 a2       	std	Y+32, r1	; 0x20
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    14ba:	66 23       	and	r22, r22
    14bc:	99 f0       	breq	.+38     	; 0x14e4 <midi_device_input+0x36>
    14be:	ea 01       	movw	r28, r20
    14c0:	61 50       	subi	r22, 0x01	; 1
    14c2:	06 2f       	mov	r16, r22
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	0f 5f       	subi	r16, 0xFF	; 255
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	04 0f       	add	r16, r20
    14cc:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    14ce:	7c 01       	movw	r14, r24
    14d0:	28 ee       	ldi	r18, 0xE8	; 232
    14d2:	e2 0e       	add	r14, r18
    14d4:	f1 1c       	adc	r15, r1
    14d6:	69 91       	ld	r22, Y+
    14d8:	c7 01       	movw	r24, r14
    14da:	0e 94 5f 09 	call	0x12be	; 0x12be <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    14de:	c0 17       	cp	r28, r16
    14e0:	d1 07       	cpc	r29, r17
    14e2:	c9 f7       	brne	.-14     	; 0x14d6 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	08 95       	ret

000014f2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    14f2:	af 92       	push	r10
    14f4:	bf 92       	push	r11
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	00 d0       	rcall	.+0      	; 0x1508 <midi_input_callbacks+0x16>
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	7c 01       	movw	r14, r24
    1510:	6b 01       	movw	r12, r22
    1512:	14 2f       	mov	r17, r20
    1514:	b2 2e       	mov	r11, r18
    1516:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1518:	dc 01       	movw	r26, r24
    151a:	95 96       	adiw	r26, 0x25	; 37
    151c:	8c 91       	ld	r24, X
    151e:	95 97       	sbiw	r26, 0x25	; 37
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	11 f5       	brne	.+68     	; 0x1568 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1524:	5a 96       	adiw	r26, 0x1a	; 26
    1526:	ed 91       	ld	r30, X+
    1528:	fc 91       	ld	r31, X
    152a:	5b 97       	sbiw	r26, 0x1b	; 27
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	09 f4       	brne	.+2      	; 0x1532 <midi_input_callbacks+0x40>
    1530:	cc c0       	rjmp	.+408    	; 0x16ca <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1532:	9b 01       	movw	r18, r22
    1534:	21 50       	subi	r18, 0x01	; 1
    1536:	31 09       	sbc	r19, r1
    1538:	ab ea       	ldi	r26, 0xAB	; 171
    153a:	ba ea       	ldi	r27, 0xAA	; 170
    153c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__umulhisi3>
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	9c 01       	movw	r18, r24
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	82 0f       	add	r24, r18
    154c:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    154e:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1550:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1552:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1554:	4c 2d       	mov	r20, r12
    1556:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1558:	9e 01       	movw	r18, r28
    155a:	2f 5f       	subi	r18, 0xFF	; 255
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	68 2f       	mov	r22, r24
    1560:	79 2f       	mov	r23, r25
    1562:	c7 01       	movw	r24, r14
    1564:	09 95       	icall
    1566:	be c0       	rjmp	.+380    	; 0x16e4 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1568:	62 30       	cpi	r22, 0x02	; 2
    156a:	71 05       	cpc	r23, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <midi_input_callbacks+0x7e>
    156e:	55 c0       	rjmp	.+170    	; 0x161a <midi_input_callbacks+0x128>
    1570:	63 30       	cpi	r22, 0x03	; 3
    1572:	71 05       	cpc	r23, r1
    1574:	29 f0       	breq	.+10     	; 0x1580 <midi_input_callbacks+0x8e>
    1576:	61 30       	cpi	r22, 0x01	; 1
    1578:	71 05       	cpc	r23, r1
    157a:	09 f0       	breq	.+2      	; 0x157e <midi_input_callbacks+0x8c>
    157c:	a1 c0       	rjmp	.+322    	; 0x16c0 <midi_input_callbacks+0x1ce>
    157e:	88 c0       	rjmp	.+272    	; 0x1690 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1580:	84 2f       	mov	r24, r20
    1582:	80 7f       	andi	r24, 0xF0	; 240
    1584:	80 3a       	cpi	r24, 0xA0	; 160
    1586:	f1 f0       	breq	.+60     	; 0x15c4 <midi_input_callbacks+0xd2>
    1588:	28 f4       	brcc	.+10     	; 0x1594 <midi_input_callbacks+0xa2>
    158a:	80 38       	cpi	r24, 0x80	; 128
    158c:	a9 f0       	breq	.+42     	; 0x15b8 <midi_input_callbacks+0xc6>
    158e:	80 39       	cpi	r24, 0x90	; 144
    1590:	69 f0       	breq	.+26     	; 0x15ac <midi_input_callbacks+0xba>
    1592:	2f c0       	rjmp	.+94     	; 0x15f2 <midi_input_callbacks+0x100>
    1594:	80 3e       	cpi	r24, 0xE0	; 224
    1596:	e1 f0       	breq	.+56     	; 0x15d0 <midi_input_callbacks+0xde>
    1598:	80 3f       	cpi	r24, 0xF0	; 240
    159a:	01 f1       	breq	.+64     	; 0x15dc <midi_input_callbacks+0xea>
    159c:	80 3b       	cpi	r24, 0xB0	; 176
    159e:	49 f5       	brne	.+82     	; 0x15f2 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    15a0:	d7 01       	movw	r26, r14
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	13 97       	sbiw	r26, 0x03	; 3
              break;
    15aa:	25 c0       	rjmp	.+74     	; 0x15f6 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    15ac:	d7 01       	movw	r26, r14
    15ae:	14 96       	adiw	r26, 0x04	; 4
    15b0:	ed 91       	ld	r30, X+
    15b2:	fc 91       	ld	r31, X
    15b4:	15 97       	sbiw	r26, 0x05	; 5
              break;
    15b6:	1f c0       	rjmp	.+62     	; 0x15f6 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    15b8:	d7 01       	movw	r26, r14
    15ba:	16 96       	adiw	r26, 0x06	; 6
    15bc:	ed 91       	ld	r30, X+
    15be:	fc 91       	ld	r31, X
    15c0:	17 97       	sbiw	r26, 0x07	; 7
              break;
    15c2:	19 c0       	rjmp	.+50     	; 0x15f6 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    15c4:	d7 01       	movw	r26, r14
    15c6:	18 96       	adiw	r26, 0x08	; 8
    15c8:	ed 91       	ld	r30, X+
    15ca:	fc 91       	ld	r31, X
    15cc:	19 97       	sbiw	r26, 0x09	; 9
              break;
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    15d0:	d7 01       	movw	r26, r14
    15d2:	1a 96       	adiw	r26, 0x0a	; 10
    15d4:	ed 91       	ld	r30, X+
    15d6:	fc 91       	ld	r31, X
    15d8:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    15da:	0d c0       	rjmp	.+26     	; 0x15f6 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    15dc:	42 3f       	cpi	r20, 0xF2	; 242
    15de:	09 f0       	breq	.+2      	; 0x15e2 <midi_input_callbacks+0xf0>
    15e0:	74 c0       	rjmp	.+232    	; 0x16ca <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    15e2:	d7 01       	movw	r26, r14
    15e4:	1c 96       	adiw	r26, 0x0c	; 12
    15e6:	ed 91       	ld	r30, X+
    15e8:	fc 91       	ld	r31, X
    15ea:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	41 f4       	brne	.+16     	; 0x1600 <midi_input_callbacks+0x10e>
    15f0:	6c c0       	rjmp	.+216    	; 0x16ca <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    15f2:	e0 e0       	ldi	r30, 0x00	; 0
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	09 f4       	brne	.+2      	; 0x15fc <midi_input_callbacks+0x10a>
    15fa:	67 c0       	rjmp	.+206    	; 0x16ca <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    15fc:	12 3f       	cpi	r17, 0xF2	; 242
    15fe:	31 f4       	brne	.+12     	; 0x160c <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1600:	2a 2d       	mov	r18, r10
    1602:	4b 2d       	mov	r20, r11
    1604:	62 ef       	ldi	r22, 0xF2	; 242
    1606:	c7 01       	movw	r24, r14
    1608:	09 95       	icall
    160a:	6c c0       	rjmp	.+216    	; 0x16e4 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    160c:	2a 2d       	mov	r18, r10
    160e:	4b 2d       	mov	r20, r11
    1610:	61 2f       	mov	r22, r17
    1612:	6f 70       	andi	r22, 0x0F	; 15
    1614:	c7 01       	movw	r24, r14
    1616:	09 95       	icall
    1618:	65 c0       	rjmp	.+202    	; 0x16e4 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    161a:	84 2f       	mov	r24, r20
    161c:	80 7f       	andi	r24, 0xF0	; 240
    161e:	80 3d       	cpi	r24, 0xD0	; 208
    1620:	51 f0       	breq	.+20     	; 0x1636 <midi_input_callbacks+0x144>
    1622:	80 3f       	cpi	r24, 0xF0	; 240
    1624:	71 f0       	breq	.+28     	; 0x1642 <midi_input_callbacks+0x150>
    1626:	80 3c       	cpi	r24, 0xC0	; 192
    1628:	01 f5       	brne	.+64     	; 0x166a <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    162a:	d7 01       	movw	r26, r14
    162c:	1e 96       	adiw	r26, 0x0e	; 14
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1634:	1c c0       	rjmp	.+56     	; 0x166e <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1636:	d7 01       	movw	r26, r14
    1638:	50 96       	adiw	r26, 0x10	; 16
    163a:	ed 91       	ld	r30, X+
    163c:	fc 91       	ld	r31, X
    163e:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1640:	16 c0       	rjmp	.+44     	; 0x166e <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1642:	43 3f       	cpi	r20, 0xF3	; 243
    1644:	41 f4       	brne	.+16     	; 0x1656 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1646:	d7 01       	movw	r26, r14
    1648:	52 96       	adiw	r26, 0x12	; 18
    164a:	ed 91       	ld	r30, X+
    164c:	fc 91       	ld	r31, X
    164e:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1650:	30 97       	sbiw	r30, 0x00	; 0
    1652:	99 f4       	brne	.+38     	; 0x167a <midi_input_callbacks+0x188>
    1654:	3a c0       	rjmp	.+116    	; 0x16ca <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1656:	41 3f       	cpi	r20, 0xF1	; 241
    1658:	c1 f5       	brne	.+112    	; 0x16ca <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    165a:	d7 01       	movw	r26, r14
    165c:	54 96       	adiw	r26, 0x14	; 20
    165e:	ed 91       	ld	r30, X+
    1660:	fc 91       	ld	r31, X
    1662:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1664:	30 97       	sbiw	r30, 0x00	; 0
    1666:	49 f4       	brne	.+18     	; 0x167a <midi_input_callbacks+0x188>
    1668:	30 c0       	rjmp	.+96     	; 0x16ca <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    166a:	e0 e0       	ldi	r30, 0x00	; 0
    166c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    166e:	30 97       	sbiw	r30, 0x00	; 0
    1670:	61 f1       	breq	.+88     	; 0x16ca <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1672:	81 2f       	mov	r24, r17
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	81 3f       	cpi	r24, 0xF1	; 241
    1678:	29 f4       	brne	.+10     	; 0x1684 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    167a:	4b 2d       	mov	r20, r11
    167c:	61 2f       	mov	r22, r17
    167e:	c7 01       	movw	r24, r14
    1680:	09 95       	icall
    1682:	30 c0       	rjmp	.+96     	; 0x16e4 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1684:	4b 2d       	mov	r20, r11
    1686:	61 2f       	mov	r22, r17
    1688:	6f 70       	andi	r22, 0x0F	; 15
    168a:	c7 01       	movw	r24, r14
    168c:	09 95       	icall
    168e:	2a c0       	rjmp	.+84     	; 0x16e4 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1690:	84 2f       	mov	r24, r20
    1692:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <midi_is_realtime>
    1696:	88 23       	and	r24, r24
    1698:	31 f0       	breq	.+12     	; 0x16a6 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    169a:	d7 01       	movw	r26, r14
    169c:	56 96       	adiw	r26, 0x16	; 22
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	57 97       	sbiw	r26, 0x17	; 23
    16a4:	07 c0       	rjmp	.+14     	; 0x16b4 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    16a6:	16 3f       	cpi	r17, 0xF6	; 246
    16a8:	81 f4       	brne	.+32     	; 0x16ca <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    16aa:	d7 01       	movw	r26, r14
    16ac:	58 96       	adiw	r26, 0x18	; 24
    16ae:	ed 91       	ld	r30, X+
    16b0:	fc 91       	ld	r31, X
    16b2:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	49 f0       	breq	.+18     	; 0x16ca <midi_input_callbacks+0x1d8>
            func(device, byte0);
    16b8:	61 2f       	mov	r22, r17
    16ba:	c7 01       	movw	r24, r14
    16bc:	09 95       	icall
    16be:	12 c0       	rjmp	.+36     	; 0x16e4 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    16c0:	64 30       	cpi	r22, 0x04	; 4
    16c2:	71 05       	cpc	r23, r1
    16c4:	10 f0       	brcs	.+4      	; 0x16ca <midi_input_callbacks+0x1d8>
          cnt = 0;
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    16ca:	d7 01       	movw	r26, r14
    16cc:	5c 96       	adiw	r26, 0x1c	; 28
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	5d 97       	sbiw	r26, 0x1d	; 29
    16d4:	30 97       	sbiw	r30, 0x00	; 0
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    16d8:	0a 2d       	mov	r16, r10
    16da:	2b 2d       	mov	r18, r11
    16dc:	41 2f       	mov	r20, r17
    16de:	b6 01       	movw	r22, r12
    16e0:	c7 01       	movw	r24, r14
    16e2:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    16e4:	d7 01       	movw	r26, r14
    16e6:	5e 96       	adiw	r26, 0x1e	; 30
    16e8:	ed 91       	ld	r30, X+
    16ea:	fc 91       	ld	r31, X
    16ec:	5f 97       	sbiw	r26, 0x1f	; 31
    16ee:	30 97       	sbiw	r30, 0x00	; 0
    16f0:	31 f0       	breq	.+12     	; 0x16fe <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    16f2:	0a 2d       	mov	r16, r10
    16f4:	2b 2d       	mov	r18, r11
    16f6:	41 2f       	mov	r20, r17
    16f8:	b6 01       	movw	r22, r12
    16fa:	c7 01       	movw	r24, r14
    16fc:	09 95       	icall
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	08 95       	ret

0000171a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	ec 01       	movw	r28, r24
    1726:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1728:	86 2f       	mov	r24, r22
    172a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <midi_is_realtime>
    172e:	88 23       	and	r24, r24
    1730:	69 f0       	breq	.+26     	; 0x174c <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1732:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	41 2f       	mov	r20, r17
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	ce 01       	movw	r24, r28
    1744:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <midi_input_callbacks>
    device->input_state = state;
    1748:	fd a2       	std	Y+37, r15	; 0x25
    174a:	a4 c0       	rjmp	.+328    	; 0x1894 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    174c:	81 2f       	mov	r24, r17
    174e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <midi_is_statusbyte>
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <midi_process_byte+0x3e>
    1756:	5d c0       	rjmp	.+186    	; 0x1812 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1758:	8d a1       	ldd	r24, Y+37	; 0x25
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	29 f0       	breq	.+10     	; 0x1768 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    175e:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9f a3       	std	Y+39, r25	; 0x27
    1766:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1768:	81 2f       	mov	r24, r17
    176a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <midi_packet_length>
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	31 f0       	breq	.+12     	; 0x177e <midi_process_byte+0x64>
    1772:	b8 f0       	brcs	.+46     	; 0x17a2 <midi_process_byte+0x88>
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	79 f0       	breq	.+30     	; 0x1796 <midi_process_byte+0x7c>
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	81 f0       	breq	.+32     	; 0x179c <midi_process_byte+0x82>
    177c:	46 c0       	rjmp	.+140    	; 0x180a <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1782:	00 e0       	ldi	r16, 0x00	; 0
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	41 2f       	mov	r20, r17
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	ce 01       	movw	r24, r28
    178e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <midi_input_callbacks>
        device->input_state = IDLE;
    1792:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1794:	7f c0       	rjmp	.+254    	; 0x1894 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	8d a3       	std	Y+37, r24	; 0x25
        break;
    179a:	7c c0       	rjmp	.+248    	; 0x1894 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	8d a3       	std	Y+37, r24	; 0x25
        break;
    17a0:	79 c0       	rjmp	.+242    	; 0x1894 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    17a2:	10 3f       	cpi	r17, 0xF0	; 240
    17a4:	19 f0       	breq	.+6      	; 0x17ac <midi_process_byte+0x92>
    17a6:	17 3f       	cpi	r17, 0xF7	; 247
    17a8:	51 f0       	breq	.+20     	; 0x17be <midi_process_byte+0xa4>
    17aa:	2b c0       	rjmp	.+86     	; 0x1802 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    17ac:	84 e0       	ldi	r24, 0x04	; 4
    17ae:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    17b0:	80 ef       	ldi	r24, 0xF0	; 240
    17b2:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9f a3       	std	Y+39, r25	; 0x27
    17ba:	8e a3       	std	Y+38, r24	; 0x26
            break;
    17bc:	6b c0       	rjmp	.+214    	; 0x1894 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    17be:	4e a1       	ldd	r20, Y+38	; 0x26
    17c0:	5f a1       	ldd	r21, Y+39	; 0x27
    17c2:	9a 01       	movw	r18, r20
    17c4:	ab ea       	ldi	r26, 0xAB	; 171
    17c6:	ba ea       	ldi	r27, 0xAA	; 170
    17c8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__umulhisi3>
    17cc:	96 95       	lsr	r25
    17ce:	87 95       	ror	r24
    17d0:	9c 01       	movw	r18, r24
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	82 0f       	add	r24, r18
    17d8:	93 1f       	adc	r25, r19
    17da:	fa 01       	movw	r30, r20
    17dc:	e8 1b       	sub	r30, r24
    17de:	f9 0b       	sbc	r31, r25
    17e0:	ec 0f       	add	r30, r28
    17e2:	fd 1f       	adc	r31, r29
    17e4:	87 ef       	ldi	r24, 0xF7	; 247
    17e6:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    17e8:	ba 01       	movw	r22, r20
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	7f a3       	std	Y+39, r23	; 0x27
    17f0:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    17f2:	0c a1       	ldd	r16, Y+36	; 0x24
    17f4:	2b a1       	ldd	r18, Y+35	; 0x23
    17f6:	4a a1       	ldd	r20, Y+34	; 0x22
    17f8:	ce 01       	movw	r24, r28
    17fa:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    17fe:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1800:	49 c0       	rjmp	.+146    	; 0x1894 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1802:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1804:	1f a2       	std	Y+39, r1	; 0x27
    1806:	1e a2       	std	Y+38, r1	; 0x26
    1808:	45 c0       	rjmp	.+138    	; 0x1894 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    180a:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    180c:	1f a2       	std	Y+39, r1	; 0x27
    180e:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1810:	41 c0       	rjmp	.+130    	; 0x1894 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1812:	ed a1       	ldd	r30, Y+37	; 0x25
    1814:	ee 23       	and	r30, r30
    1816:	f1 f1       	breq	.+124    	; 0x1894 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1818:	4e a1       	ldd	r20, Y+38	; 0x26
    181a:	5f a1       	ldd	r21, Y+39	; 0x27
    181c:	9a 01       	movw	r18, r20
    181e:	ab ea       	ldi	r26, 0xAB	; 171
    1820:	ba ea       	ldi	r27, 0xAA	; 170
    1822:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__umulhisi3>
    1826:	96 95       	lsr	r25
    1828:	87 95       	ror	r24
    182a:	9c 01       	movw	r18, r24
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	82 0f       	add	r24, r18
    1832:	93 1f       	adc	r25, r19
    1834:	9a 01       	movw	r18, r20
    1836:	28 1b       	sub	r18, r24
    1838:	39 0b       	sbc	r19, r25
    183a:	de 01       	movw	r26, r28
    183c:	a2 0f       	add	r26, r18
    183e:	b3 1f       	adc	r27, r19
    1840:	92 96       	adiw	r26, 0x22	; 34
    1842:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1844:	ba 01       	movw	r22, r20
    1846:	6f 5f       	subi	r22, 0xFF	; 255
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	7f a3       	std	Y+39, r23	; 0x27
    184c:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    184e:	21 30       	cpi	r18, 0x01	; 1
    1850:	31 05       	cpc	r19, r1
    1852:	89 f0       	breq	.+34     	; 0x1876 <midi_process_byte+0x15c>
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	e9 f4       	brne	.+58     	; 0x1894 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    185a:	0c a1       	ldd	r16, Y+36	; 0x24
    185c:	2b a1       	ldd	r18, Y+35	; 0x23
    185e:	4a a1       	ldd	r20, Y+34	; 0x22
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1866:	8d a1       	ldd	r24, Y+37	; 0x25
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	a1 f0       	breq	.+40     	; 0x1894 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9f a3       	std	Y+39, r25	; 0x27
    1872:	8e a3       	std	Y+38, r24	; 0x26
    1874:	0f c0       	rjmp	.+30     	; 0x1894 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1876:	e2 30       	cpi	r30, 0x02	; 2
    1878:	69 f4       	brne	.+26     	; 0x1894 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	2b a1       	ldd	r18, Y+35	; 0x23
    187e:	4a a1       	ldd	r20, Y+34	; 0x22
    1880:	ce 01       	movw	r24, r28
    1882:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1886:	8d a1       	ldd	r24, Y+37	; 0x25
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	21 f0       	breq	.+8      	; 0x1894 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9f a3       	std	Y+39, r25	; 0x27
    1892:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	08 95       	ret

000018a0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    18b2:	dc 01       	movw	r26, r24
    18b4:	90 96       	adiw	r26, 0x20	; 32
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	91 97       	sbiw	r26, 0x21	; 33
    18bc:	30 97       	sbiw	r30, 0x00	; 0
    18be:	09 f0       	breq	.+2      	; 0x18c2 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    18c0:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    18c2:	86 01       	movw	r16, r12
    18c4:	08 51       	subi	r16, 0x18	; 24
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	c8 01       	movw	r24, r16
    18ca:	0e 94 95 09 	call	0x132a	; 0x132a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    18ce:	e8 2e       	mov	r14, r24
    18d0:	f1 2c       	mov	r15, r1
    18d2:	e1 14       	cp	r14, r1
    18d4:	f1 04       	cpc	r15, r1
    18d6:	91 f0       	breq	.+36     	; 0x18fc <midi_device_process+0x5c>
    18d8:	c0 e0       	ldi	r28, 0x00	; 0
    18da:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	c8 01       	movw	r24, r16
    18e0:	0e 94 ab 09 	call	0x1356	; 0x1356 <bytequeue_get>
    18e4:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    18e6:	c6 01       	movw	r24, r12
    18e8:	0e 94 8d 0b 	call	0x171a	; 0x171a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	c8 01       	movw	r24, r16
    18f0:	0e 94 bd 09 	call	0x137a	; 0x137a <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    18f4:	21 96       	adiw	r28, 0x01	; 1
    18f6:	ce 15       	cp	r28, r14
    18f8:	df 05       	cpc	r29, r15
    18fa:	81 f7       	brne	.-32     	; 0x18dc <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	08 95       	ret

0000190e <__divmodhi4>:
    190e:	97 fb       	bst	r25, 7
    1910:	07 2e       	mov	r0, r23
    1912:	16 f4       	brtc	.+4      	; 0x1918 <__divmodhi4+0xa>
    1914:	00 94       	com	r0
    1916:	07 d0       	rcall	.+14     	; 0x1926 <__divmodhi4_neg1>
    1918:	77 fd       	sbrc	r23, 7
    191a:	09 d0       	rcall	.+18     	; 0x192e <__divmodhi4_neg2>
    191c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__udivmodhi4>
    1920:	07 fc       	sbrc	r0, 7
    1922:	05 d0       	rcall	.+10     	; 0x192e <__divmodhi4_neg2>
    1924:	3e f4       	brtc	.+14     	; 0x1934 <__divmodhi4_exit>

00001926 <__divmodhi4_neg1>:
    1926:	90 95       	com	r25
    1928:	81 95       	neg	r24
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	08 95       	ret

0000192e <__divmodhi4_neg2>:
    192e:	70 95       	com	r23
    1930:	61 95       	neg	r22
    1932:	7f 4f       	sbci	r23, 0xFF	; 255

00001934 <__divmodhi4_exit>:
    1934:	08 95       	ret

00001936 <__tablejump2__>:
    1936:	ee 0f       	add	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	05 90       	lpm	r0, Z+
    193c:	f4 91       	lpm	r31, Z
    193e:	e0 2d       	mov	r30, r0
    1940:	09 94       	ijmp

00001942 <__umulhisi3>:
    1942:	a2 9f       	mul	r26, r18
    1944:	b0 01       	movw	r22, r0
    1946:	b3 9f       	mul	r27, r19
    1948:	c0 01       	movw	r24, r0
    194a:	a3 9f       	mul	r26, r19
    194c:	70 0d       	add	r23, r0
    194e:	81 1d       	adc	r24, r1
    1950:	11 24       	eor	r1, r1
    1952:	91 1d       	adc	r25, r1
    1954:	b2 9f       	mul	r27, r18
    1956:	70 0d       	add	r23, r0
    1958:	81 1d       	adc	r24, r1
    195a:	11 24       	eor	r1, r1
    195c:	91 1d       	adc	r25, r1
    195e:	08 95       	ret

00001960 <__udivmodhi4>:
    1960:	aa 1b       	sub	r26, r26
    1962:	bb 1b       	sub	r27, r27
    1964:	51 e1       	ldi	r21, 0x11	; 17
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <__udivmodhi4_ep>

00001968 <__udivmodhi4_loop>:
    1968:	aa 1f       	adc	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	a6 17       	cp	r26, r22
    196e:	b7 07       	cpc	r27, r23
    1970:	10 f0       	brcs	.+4      	; 0x1976 <__udivmodhi4_ep>
    1972:	a6 1b       	sub	r26, r22
    1974:	b7 0b       	sbc	r27, r23

00001976 <__udivmodhi4_ep>:
    1976:	88 1f       	adc	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	5a 95       	dec	r21
    197c:	a9 f7       	brne	.-22     	; 0x1968 <__udivmodhi4_loop>
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	08 95       	ret

00001988 <_exit>:
    1988:	f8 94       	cli

0000198a <__stop_program>:
    198a:	ff cf       	rjmp	.-2      	; 0x198a <__stop_program>
