
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  0080024c  0080024c  00000e2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e37  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b49  00000000  00000000  00003fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d33  00000000  00000000  00004b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  00005838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd8  00000000  00000000  00005fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a88  00000000  00000000  00006c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00008704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	70 03       	mulsu	r23, r16
  b6:	6e 03       	fmul	r22, r22
  b8:	70 03       	mulsu	r23, r16
  ba:	72 03       	mulsu	r23, r18
  bc:	72 03       	mulsu	r23, r18
  be:	78 03       	fmul	r23, r16
  c0:	72 03       	mulsu	r23, r18
  c2:	78 03       	fmul	r23, r16
  c4:	78 03       	fmul	r23, r16
  c6:	78 03       	fmul	r23, r16
  c8:	78 03       	fmul	r23, r16
  ca:	78 03       	fmul	r23, r16
  cc:	72 03       	mulsu	r23, r18
  ce:	78 03       	fmul	r23, r16
  d0:	78 03       	fmul	r23, r16

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ec e4       	ldi	r30, 0x4C	; 76
  e6:	fc e0       	ldi	r31, 0x0C	; 12
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	ac 34       	cpi	r26, 0x4C	; 76
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	ac e4       	ldi	r26, 0x4C	; 76
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ac 34       	cpi	r26, 0x4C	; 76
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
 108:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9c 01       	movw	r18, r24
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	dc 01       	movw	r26, r24
 122:	af 5f       	subi	r26, 0xFF	; 255
 124:	be 4f       	sbci	r27, 0xFE	; 254
 126:	2c 91       	ld	r18, X
 128:	e2 2f       	mov	r30, r18
 12a:	ef 70       	andi	r30, 0x0F	; 15
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ea 5a       	subi	r30, 0xAA	; 170
 130:	fd 4f       	sbci	r31, 0xFD	; 253
 132:	ec 01       	movw	r28, r24
 134:	c0 50       	subi	r28, 0x00	; 0
 136:	df 4f       	sbci	r29, 0xFF	; 255
 138:	30 81       	ld	r19, Z
 13a:	88 81       	ld	r24, Y
 13c:	83 2b       	or	r24, r19
 13e:	80 83       	st	Z, r24
	led[led_index].state = 1;
 140:	82 2f       	mov	r24, r18
 142:	80 61       	ori	r24, 0x10	; 16
 144:	8c 93       	st	X, r24

}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <turn_off>:

void turn_off(uint8_t led_index) {
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	82 0f       	add	r24, r18
 15a:	93 1f       	adc	r25, r19
 15c:	dc 01       	movw	r26, r24
 15e:	af 5f       	subi	r26, 0xFF	; 255
 160:	be 4f       	sbci	r27, 0xFE	; 254
 162:	2c 91       	ld	r18, X
 164:	e2 2f       	mov	r30, r18
 166:	ef 70       	andi	r30, 0x0F	; 15
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ea 5a       	subi	r30, 0xAA	; 170
 16c:	fd 4f       	sbci	r31, 0xFD	; 253
 16e:	ec 01       	movw	r28, r24
 170:	c0 50       	subi	r28, 0x00	; 0
 172:	df 4f       	sbci	r29, 0xFF	; 255
 174:	88 81       	ld	r24, Y
 176:	80 95       	com	r24
 178:	90 81       	ld	r25, Z
 17a:	89 23       	and	r24, r25
 17c:	80 83       	st	Z, r24
	led[led_index].state = 0;
 17e:	82 2f       	mov	r24, r18
 180:	8f 7e       	andi	r24, 0xEF	; 239
 182:	8c 93       	st	X, r24
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	2e 0f       	add	r18, r30
 196:	3f 1f       	adc	r19, r31
 198:	f9 01       	movw	r30, r18
 19a:	ef 5f       	subi	r30, 0xFF	; 255
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	90 81       	ld	r25, Z
 1a0:	94 ff       	sbrs	r25, 4
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <toggle+0x20>
		
		turn_off(led_index);
 1a4:	0e 94 a6 00 	call	0x14c	; 0x14c <turn_off>
 1a8:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
 1aa:	0e 94 88 00 	call	0x110	; 0x110 <turn_on>
 1ae:	08 95       	ret

000001b0 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
 1b0:	08 95       	ret

000001b2 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 1b2:	08 95       	ret

000001b4 <note_on_event>:

	
}


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	
	//spi_data[1] = 1<<step_number;
	//spi_data[0] = (1<<step_number)>>8;
	//if (step_number++ == 15) step_number = 0;
	if (note < 16) {
 1b8:	40 31       	cpi	r20, 0x10	; 16
 1ba:	08 f0       	brcs	.+2      	; 0x1be <note_on_event+0xa>
 1bc:	93 c0       	rjmp	.+294    	; 0x2e4 <note_on_event+0x130>
		
		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 1be:	c4 2f       	mov	r28, r20
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	fc 01       	movw	r30, r24
 1ca:	ec 0f       	add	r30, r28
 1cc:	fd 1f       	adc	r31, r29
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ea 55       	subi	r30, 0x5A	; 90
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	e0 81       	ld	r30, Z
 1d8:	ef 70       	andi	r30, 0x0F	; 15
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	46 e5       	ldi	r20, 0x56	; 86
 1de:	52 e0       	ldi	r21, 0x02	; 2
 1e0:	ea 5a       	subi	r30, 0xAA	; 170
 1e2:	fd 4f       	sbci	r31, 0xFD	; 253
 1e4:	dc 01       	movw	r26, r24
 1e6:	ac 0f       	add	r26, r28
 1e8:	bd 1f       	adc	r27, r29
 1ea:	aa 0f       	add	r26, r26
 1ec:	bb 1f       	adc	r27, r27
 1ee:	ab 55       	subi	r26, 0x5B	; 91
 1f0:	be 4f       	sbci	r27, 0xFE	; 254
 1f2:	60 81       	ld	r22, Z
 1f4:	12 96       	adiw	r26, 0x02	; 2
 1f6:	3c 91       	ld	r19, X
 1f8:	12 97       	sbiw	r26, 0x02	; 2
 1fa:	36 2b       	or	r19, r22
 1fc:	30 83       	st	Z, r19
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 1fe:	fc 01       	movw	r30, r24
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e7 55       	subi	r30, 0x57	; 87
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	80 81       	ld	r24, Z
 20e:	e8 2f       	mov	r30, r24
 210:	e6 95       	lsr	r30
 212:	ef 70       	andi	r30, 0x0F	; 15
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ea 5a       	subi	r30, 0xAA	; 170
 218:	fd 4f       	sbci	r31, 0xFD	; 253
 21a:	30 81       	ld	r19, Z
 21c:	15 96       	adiw	r26, 0x05	; 5
 21e:	9c 91       	ld	r25, X
 220:	15 97       	sbiw	r26, 0x05	; 5
 222:	93 2b       	or	r25, r19
 224:	90 83       	st	Z, r25
		
		if (drum_hit[note].switch_bit != -1) {//need to set instrument switch
			
			
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 226:	fa 01       	movw	r30, r20
 228:	93 81       	ldd	r25, Z+3	; 0x03
 22a:	81 70       	andi	r24, 0x01	; 1
 22c:	81 95       	neg	r24
 22e:	89 27       	eor	r24, r25
 230:	13 96       	adiw	r26, 0x03	; 3
 232:	3c 91       	ld	r19, X
 234:	83 23       	and	r24, r19
 236:	98 27       	eor	r25, r24
 238:	93 83       	std	Z+3, r25	; 0x03
			
		}
	
	if (velocity > 64) {
 23a:	21 34       	cpi	r18, 0x41	; 65
 23c:	30 f0       	brcs	.+12     	; 0x24a <note_on_event+0x96>
		spi_data[8] |= (1<<ACCENT);
 23e:	80 85       	ldd	r24, Z+8	; 0x08
 240:	81 60       	ori	r24, 0x01	; 1
 242:	80 87       	std	Z+8, r24	; 0x08
		turn_on(ACCENT_1_LED);
 244:	84 e1       	ldi	r24, 0x14	; 20
 246:	0e 94 88 00 	call	0x110	; 0x110 <turn_on>
	}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
 24a:	5d 9a       	sbi	0x0b, 5	; 11
		
		update_spi();
 24c:	0e 94 2c 02 	call	0x458	; 0x458 <update_spi>
		

		
		PORTD &= ~(1<<TRIG);
 250:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	9e e0       	ldi	r25, 0x0E	; 14
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <note_on_event+0xa2>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <note_on_event+0xa8>
 25c:	00 00       	nop
		
		_delay_us(900); //deal with this bullshit
		
		spi_data[drum_hit[note].spi_byte_num] &= ~(drum_hit[note].trig_bit);
 25e:	ae 01       	movw	r20, r28
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	fa 01       	movw	r30, r20
 266:	ec 0f       	add	r30, r28
 268:	fd 1f       	adc	r31, r29
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ea 55       	subi	r30, 0x5A	; 90
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	e0 81       	ld	r30, Z
 274:	ef 70       	andi	r30, 0x0F	; 15
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	a6 e5       	ldi	r26, 0x56	; 86
 27a:	b2 e0       	ldi	r27, 0x02	; 2
 27c:	9f 01       	movw	r18, r30
 27e:	2a 5a       	subi	r18, 0xAA	; 170
 280:	3d 4f       	sbci	r19, 0xFD	; 253
 282:	ca 01       	movw	r24, r20
 284:	8c 0f       	add	r24, r28
 286:	9d 1f       	adc	r25, r29
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	8b 55       	subi	r24, 0x5B	; 91
 28e:	9e 4f       	sbci	r25, 0xFE	; 254
 290:	fc 01       	movw	r30, r24
 292:	82 81       	ldd	r24, Z+2	; 0x02
 294:	80 95       	com	r24
 296:	f9 01       	movw	r30, r18
 298:	90 81       	ld	r25, Z
 29a:	89 23       	and	r24, r25
 29c:	80 83       	st	Z, r24
		spi_data[drum_hit[note].spi_led_byte_num] &= ~(drum_hit[note].led_bit);
 29e:	fa 01       	movw	r30, r20
 2a0:	ec 0f       	add	r30, r28
 2a2:	fd 1f       	adc	r31, r29
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	e7 55       	subi	r30, 0x57	; 87
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	e0 81       	ld	r30, Z
 2ae:	e6 95       	lsr	r30
 2b0:	ef 70       	andi	r30, 0x0F	; 15
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ea 5a       	subi	r30, 0xAA	; 170
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	c4 0f       	add	r28, r20
 2ba:	d5 1f       	adc	r29, r21
 2bc:	cc 0f       	add	r28, r28
 2be:	dd 1f       	adc	r29, r29
 2c0:	cb 55       	subi	r28, 0x5B	; 91
 2c2:	de 4f       	sbci	r29, 0xFE	; 254
 2c4:	8d 81       	ldd	r24, Y+5	; 0x05
 2c6:	80 95       	com	r24
 2c8:	90 81       	ld	r25, Z
 2ca:	89 23       	and	r24, r25
 2cc:	80 83       	st	Z, r24
		spi_data[8] &= ~(1<<ACCENT);
 2ce:	18 96       	adiw	r26, 0x08	; 8
 2d0:	8c 91       	ld	r24, X
 2d2:	18 97       	sbiw	r26, 0x08	; 8
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	18 96       	adiw	r26, 0x08	; 8
 2d8:	8c 93       	st	X, r24
		turn_off(ACCENT_1_LED);
 2da:	84 e1       	ldi	r24, 0x14	; 20
 2dc:	0e 94 a6 00 	call	0x14c	; 0x14c <turn_off>
		
		update_spi();
 2e0:	0e 94 2c 02 	call	0x458	; 0x458 <update_spi>
		
		
	}

		
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <update_step_board>:
//step[0].button = &button[STEP_1_SW];

	
uint8_t step_number = 0;	

void update_step_board() {
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	
	//if ((button[STEP_1_SW].current_state) &1) toggle(STEP_1_LED);
	//if ((button[STEP_2_SW].current_state) &1) turn_on(STEP_2_LED);
	//if ((switch_states[4] >> STEP_8_SW) &1) {toggle(STEP_8_LED); switch_states[4] ^= (1<<STEP_8_SW);} //need to flip switch bit here to properly debounce
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (button[i].state) {
 2f2:	fe 01       	movw	r30, r28
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	eb 5f       	subi	r30, 0xFB	; 251
 2fa:	fd 4f       	sbci	r31, 0xFD	; 253
 2fc:	80 81       	ld	r24, Z
 2fe:	86 ff       	sbrs	r24, 6
 300:	0b c0       	rjmp	.+22     	; 0x318 <update_step_board+0x2e>
			
			toggle(i);
 302:	8c 2f       	mov	r24, r28
 304:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle>
			button[i].state ^= button[i].state;
 308:	fe 01       	movw	r30, r28
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	eb 5f       	subi	r30, 0xFB	; 251
 310:	fd 4f       	sbci	r31, 0xFD	; 253
 312:	80 81       	ld	r24, Z
 314:	8f 7b       	andi	r24, 0xBF	; 191
 316:	80 83       	st	Z, r24
	
	//if ((button[STEP_1_SW].current_state) &1) toggle(STEP_1_LED);
	//if ((button[STEP_2_SW].current_state) &1) turn_on(STEP_2_LED);
	//if ((switch_states[4] >> STEP_8_SW) &1) {toggle(STEP_8_LED); switch_states[4] ^= (1<<STEP_8_SW);} //need to flip switch bit here to properly debounce
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 318:	21 96       	adiw	r28, 0x01	; 1
 31a:	c0 31       	cpi	r28, 0x10	; 16
 31c:	d1 05       	cpc	r29, r1
 31e:	49 f7       	brne	.-46     	; 0x2f2 <update_step_board+0x8>
		//toggle(STEP_8_LED);
		//button[STEP_8_SW].state ^= button[STEP_8_SW].state;
		//
	//}	
	
	if (button[INST_BD_2_SW].state) {
 320:	80 91 27 02 	lds	r24, 0x0227
 324:	86 ff       	sbrs	r24, 6
 326:	08 c0       	rjmp	.+16     	; 0x338 <update_step_board+0x4e>
		
		toggle(BD_2_LED);
 328:	85 e1       	ldi	r24, 0x15	; 21
 32a:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle>
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
 32e:	e7 e2       	ldi	r30, 0x27	; 39
 330:	f2 e0       	ldi	r31, 0x02	; 2
 332:	80 81       	ld	r24, Z
 334:	8f 7b       	andi	r24, 0xBF	; 191
 336:	80 83       	st	Z, r24
		
	}
	
	//if (spi_current_switch_data[2] > 0) toggle(BD_2_LED);
	
	update_spi();
 338:	0e 94 2c 02 	call	0x458	; 0x458 <update_spi>
	
	
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <refresh>:

void refresh(void) {
	
	read_switches();
 342:	0e 94 50 02 	call	0x4a0	; 0x4a0 <read_switches>
	parse_switch_data();
 346:	0e 94 91 02 	call	0x522	; 0x522 <parse_switch_data>
	update_step_board();
 34a:	0e 94 75 01 	call	0x2ea	; 0x2ea <update_step_board>
 34e:	08 95       	ret

00000350 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 356:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 35a:	88 e9       	ldi	r24, 0x98	; 152
 35c:	80 93 c1 00 	sts	0x00C1, r24
 360:	08 95       	ret

00000362 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	1f 92       	push	r1
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 38e:	80 91 c6 00 	lds	r24, 0x00C6
 392:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 394:	ae 01       	movw	r20, r28
 396:	4f 5f       	subi	r20, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	8f e5       	ldi	r24, 0x5F	; 95
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	0e 94 b7 03 	call	0x76e	; 0x76e <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 3cc:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 3ce:	8d b1       	in	r24, 0x0d	; 13
 3d0:	8c 60       	ori	r24, 0x0C	; 12
 3d2:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 3d4:	87 b1       	in	r24, 0x07	; 7
 3d6:	8e 60       	ori	r24, 0x0E	; 14
 3d8:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 3da:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 3dc:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 3de:	88 b1       	in	r24, 0x08	; 8
 3e0:	81 7f       	andi	r24, 0xF1	; 241
 3e2:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 3e4:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 3e6:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER	
 3e8:	80 e5       	ldi	r24, 0x50	; 80
 3ea:	80 93 ac 00 	sts	0x00AC, r24
	
	//spi_data[led[STEP_1_LED].spi_byte] |= led[STEP_1_LED].bit; //move this to generic function something like: turn_on(STEP_1_LED) and turn_off(STEP_1_LED) and maybe even blink(STEP_1_LED) and blink_fast((STEP_1_LED)
	//spi_data[led[MODE_1_PATTERN_CLEAR].spi_byte] |= led[MODE_1_PATTERN_CLEAR].bit;
	//spi_data[led[FILL_MANUAL].spi_byte] |= led[FILL_MANUAL].bit;
	
	turn_on(STEP_1_LED);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 88 00 	call	0x110	; 0x110 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
 3f4:	8d e1       	ldi	r24, 0x1D	; 29
 3f6:	0e 94 88 00 	call	0x110	; 0x110 <turn_on>
	turn_on(FILL_MANUAL);
 3fa:	82 e2       	ldi	r24, 0x22	; 34
 3fc:	0e 94 88 00 	call	0x110	; 0x110 <turn_on>
	
	update_spi();
 400:	0e 94 2c 02 	call	0x458	; 0x458 <update_spi>
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 404:	8f e5       	ldi	r24, 0x5F	; 95
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	0e 94 86 03 	call	0x70c	; 0x70c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 40c:	6a ed       	ldi	r22, 0xDA	; 218
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	8f e5       	ldi	r24, 0x5F	; 95
 412:	92 e0       	ldi	r25, 0x02	; 2
 414:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 418:	68 ed       	ldi	r22, 0xD8	; 216
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	8f e5       	ldi	r24, 0x5F	; 95
 41e:	92 e0       	ldi	r25, 0x02	; 2
 420:	0e 94 7e 03 	call	0x6fc	; 0x6fc <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 424:	69 ed       	ldi	r22, 0xD9	; 217
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	8f e5       	ldi	r24, 0x5F	; 95
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	0e 94 82 03 	call	0x704	; 0x704 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 430:	0e 94 a8 01 	call	0x350	; 0x350 <setup_midi_usart>
	
	sei(); //enable global interrupts	
 434:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
 436:	8f e5       	ldi	r24, 0x5F	; 95
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	0e 94 b0 05 	call	0xb60	; 0xb60 <midi_device_process>
	refresh();		
 43e:	0e 94 a1 01 	call	0x342	; 0x342 <refresh>

	
	}
 442:	f9 cf       	rjmp	.-14     	; 0x436 <main+0x6a>

00000444 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 444:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 448:	ed ea       	ldi	r30, 0xAD	; 173
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	88 23       	and	r24, r24
 450:	ec f7       	brge	.-6      	; 0x44c <spi_shift_byte+0x8>
	return SPDR1;
 452:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
 456:	08 95       	ret

00000458 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
 45c:	c6 e5       	ldi	r28, 0x56	; 86
 45e:	d2 e0       	ldi	r29, 0x02	; 2
 460:	88 81       	ld	r24, Y
 462:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 47e:	8d 81       	ldd	r24, Y+5	; 0x05
 480:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 484:	8e 81       	ldd	r24, Y+6	; 0x06
 486:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 48a:	8f 81       	ldd	r24, Y+7	; 0x07
 48c:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 490:	88 85       	ldd	r24, Y+8	; 0x08
 492:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 496:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 498:	43 9a       	sbi	0x08, 3	; 8
	
	
};
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <read_switches>:

void read_switches(void) { //reads switch data
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
 4a4:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
 4ac:	c1 e5       	ldi	r28, 0x51	; 81
 4ae:	d2 e0       	ldi	r29, 0x02	; 2
 4b0:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
 4b8:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
 4c0:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
 4c8:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 22 02 	call	0x444	; 0x444 <spi_shift_byte>
 4d0:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
 4d2:	42 98       	cbi	0x08, 2	; 8
	
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
 4d4:	ec e4       	ldi	r30, 0x4C	; 76
 4d6:	f2 e0       	ldi	r31, 0x02	; 2
 4d8:	20 81       	ld	r18, Z
 4da:	98 81       	ld	r25, Y
 4dc:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
 4de:	29 27       	eor	r18, r25
 4e0:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
 4e2:	92 23       	and	r25, r18
 4e4:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
 4e6:	21 81       	ldd	r18, Z+1	; 0x01
 4e8:	99 81       	ldd	r25, Y+1	; 0x01
 4ea:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
 4ec:	29 27       	eor	r18, r25
 4ee:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
 4f0:	92 23       	and	r25, r18
 4f2:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
 4f4:	22 81       	ldd	r18, Z+2	; 0x02
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
 4fa:	29 27       	eor	r18, r25
 4fc:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
 4fe:	92 23       	and	r25, r18
 500:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
 502:	23 81       	ldd	r18, Z+3	; 0x03
 504:	9b 81       	ldd	r25, Y+3	; 0x03
 506:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
 508:	29 27       	eor	r18, r25
 50a:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
 50c:	92 23       	and	r25, r18
 50e:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
 510:	94 81       	ldd	r25, Z+4	; 0x04
 512:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
 514:	98 27       	eor	r25, r24
 516:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
 518:	89 23       	and	r24, r25
 51a:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	
	
	
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <parse_switch_data>:
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
 526:	da 01       	movw	r26, r20
 528:	aa 0f       	add	r26, r26
 52a:	bb 1f       	adc	r27, r27
 52c:	ab 5f       	subi	r26, 0xFB	; 251
 52e:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
 530:	8c 91       	ld	r24, X
 532:	e8 2f       	mov	r30, r24
 534:	e6 95       	lsr	r30
 536:	e6 95       	lsr	r30
 538:	e6 95       	lsr	r30
 53a:	e7 70       	andi	r30, 0x07	; 7
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	ef 5a       	subi	r30, 0xAF	; 175
 540:	fd 4f       	sbci	r31, 0xFD	; 253
 542:	20 81       	ld	r18, Z
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	98 2f       	mov	r25, r24
 548:	97 70       	andi	r25, 0x07	; 7
 54a:	02 c0       	rjmp	.+4      	; 0x550 <parse_switch_data+0x2e>
 54c:	35 95       	asr	r19
 54e:	27 95       	ror	r18
 550:	9a 95       	dec	r25
 552:	e2 f7       	brpl	.-8      	; 0x54c <parse_switch_data+0x2a>
 554:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
 556:	86 fb       	bst	r24, 6
 558:	99 27       	eor	r25, r25
 55a:	90 f9       	bld	r25, 0
 55c:	29 27       	eor	r18, r25
 55e:	20 fb       	bst	r18, 0
 560:	86 f9       	bld	r24, 6
 562:	8c 93       	st	X, r24
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	43 32       	cpi	r20, 0x23	; 35
 56a:	51 05       	cpc	r21, r1
 56c:	e1 f6       	brne	.-72     	; 0x526 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
 56e:	08 95       	ret

00000570 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 570:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 572:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 574:	74 83       	std	Z+4, r23	; 0x04
 576:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 578:	11 82       	std	Z+1, r1	; 0x01
 57a:	10 82       	st	Z, r1
 57c:	08 95       	ret

0000057e <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	ec 01       	movw	r28, r24
 58a:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 58c:	0e 94 38 03 	call	0x670	; 0x670 <store_and_clear_interrupt>
 590:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 592:	f9 80       	ldd	r15, Y+1	; 0x01
 594:	4f 2d       	mov	r20, r15
 596:	50 e0       	ldi	r21, 0x00	; 0
 598:	ca 01       	movw	r24, r20
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	2a 81       	ldd	r18, Y+2	; 0x02
 59e:	62 2f       	mov	r22, r18
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	0e 94 e7 05 	call	0xbce	; 0xbce <__divmodhi4>
 5a6:	28 81       	ld	r18, Y
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	82 17       	cp	r24, r18
 5ac:	93 07       	cpc	r25, r19
 5ae:	29 f4       	brne	.+10     	; 0x5ba <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 5b0:	81 2f       	mov	r24, r17
 5b2:	0e 94 3b 03 	call	0x676	; 0x676 <restore_interrupt_setting>
      return false;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	12 c0       	rjmp	.+36     	; 0x5de <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 5ba:	eb 81       	ldd	r30, Y+3	; 0x03
 5bc:	fc 81       	ldd	r31, Y+4	; 0x04
 5be:	ef 0d       	add	r30, r15
 5c0:	f1 1d       	adc	r31, r1
 5c2:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 5c4:	29 81       	ldd	r18, Y+1	; 0x01
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	c9 01       	movw	r24, r18
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	6a 81       	ldd	r22, Y+2	; 0x02
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	0e 94 e7 05 	call	0xbce	; 0xbce <__divmodhi4>
 5d4:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 5d6:	81 2f       	mov	r24, r17
 5d8:	0e 94 3b 03 	call	0x676	; 0x676 <restore_interrupt_setting>
      return true;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	08 95       	ret

000005ea <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 5f0:	0e 94 38 03 	call	0x670	; 0x670 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 5f4:	39 81       	ldd	r19, Y+1	; 0x01
 5f6:	28 81       	ld	r18, Y
 5f8:	32 17       	cp	r19, r18
 5fa:	18 f0       	brcs	.+6      	; 0x602 <bytequeue_length+0x18>
      len = queue->end - queue->start;
 5fc:	c3 2f       	mov	r28, r19
 5fe:	c2 1b       	sub	r28, r18
 600:	04 c0       	rjmp	.+8      	; 0x60a <bytequeue_length+0x20>
 602:	9a 81       	ldd	r25, Y+2	; 0x02
 604:	c3 2f       	mov	r28, r19
 606:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 608:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 60a:	0e 94 3b 03 	call	0x676	; 0x676 <restore_interrupt_setting>
   return len;
}
 60e:	8c 2f       	mov	r24, r28
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 616:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 618:	80 81       	ld	r24, Z
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	9b 01       	movw	r18, r22
 61e:	28 0f       	add	r18, r24
 620:	31 1d       	adc	r19, r1
 622:	c9 01       	movw	r24, r18
 624:	62 81       	ldd	r22, Z+2	; 0x02
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	0e 94 e7 05 	call	0xbce	; 0xbce <__divmodhi4>
 62c:	03 80       	ldd	r0, Z+3	; 0x03
 62e:	f4 81       	ldd	r31, Z+4	; 0x04
 630:	e0 2d       	mov	r30, r0
 632:	e8 0f       	add	r30, r24
 634:	f9 1f       	adc	r31, r25
}
 636:	80 81       	ld	r24, Z
 638:	08 95       	ret

0000063a <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	ec 01       	movw	r28, r24
 642:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 644:	0e 94 38 03 	call	0x670	; 0x670 <store_and_clear_interrupt>
 648:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 64a:	88 81       	ld	r24, Y
 64c:	21 2f       	mov	r18, r17
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	68 0f       	add	r22, r24
 654:	71 1d       	adc	r23, r1
 656:	cb 01       	movw	r24, r22
 658:	6a 81       	ldd	r22, Y+2	; 0x02
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	0e 94 e7 05 	call	0xbce	; 0xbce <__divmodhi4>
 660:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 662:	84 2f       	mov	r24, r20
 664:	0e 94 3b 03 	call	0x676	; 0x676 <restore_interrupt_setting>
}
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	08 95       	ret

00000670 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 670:	8f b7       	in	r24, 0x3f	; 63
   cli();
 672:	f8 94       	cli
   return sreg;
}
 674:	08 95       	ret

00000676 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 676:	8f bf       	out	0x3f, r24	; 63
 678:	08 95       	ret

0000067a <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 67a:	88 1f       	adc	r24, r24
 67c:	88 27       	eor	r24, r24
 67e:	88 1f       	adc	r24, r24
 680:	08 95       	ret

00000682 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	88 3f       	cpi	r24, 0xF8	; 248
 686:	08 f4       	brcc	.+2      	; 0x68a <midi_is_realtime+0x8>
 688:	90 e0       	ldi	r25, 0x00	; 0
}
 68a:	89 2f       	mov	r24, r25
 68c:	08 95       	ret

0000068e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 68e:	98 2f       	mov	r25, r24
 690:	90 7f       	andi	r25, 0xF0	; 240
 692:	90 3c       	cpi	r25, 0xC0	; 192
 694:	b1 f0       	breq	.+44     	; 0x6c2 <midi_packet_length+0x34>
 696:	58 f4       	brcc	.+22     	; 0x6ae <midi_packet_length+0x20>
 698:	90 39       	cpi	r25, 0x90	; 144
 69a:	41 f1       	breq	.+80     	; 0x6ec <midi_packet_length+0x5e>
 69c:	18 f4       	brcc	.+6      	; 0x6a4 <midi_packet_length+0x16>
 69e:	90 38       	cpi	r25, 0x80	; 128
 6a0:	19 f5       	brne	.+70     	; 0x6e8 <midi_packet_length+0x5a>
 6a2:	24 c0       	rjmp	.+72     	; 0x6ec <midi_packet_length+0x5e>
 6a4:	90 3a       	cpi	r25, 0xA0	; 160
 6a6:	11 f1       	breq	.+68     	; 0x6ec <midi_packet_length+0x5e>
 6a8:	90 3b       	cpi	r25, 0xB0	; 176
 6aa:	f1 f4       	brne	.+60     	; 0x6e8 <midi_packet_length+0x5a>
 6ac:	1f c0       	rjmp	.+62     	; 0x6ec <midi_packet_length+0x5e>
 6ae:	90 3e       	cpi	r25, 0xE0	; 224
 6b0:	e9 f0       	breq	.+58     	; 0x6ec <midi_packet_length+0x5e>
 6b2:	18 f4       	brcc	.+6      	; 0x6ba <midi_packet_length+0x2c>
 6b4:	90 3d       	cpi	r25, 0xD0	; 208
 6b6:	29 f0       	breq	.+10     	; 0x6c2 <midi_packet_length+0x34>
 6b8:	17 c0       	rjmp	.+46     	; 0x6e8 <midi_packet_length+0x5a>
 6ba:	90 3f       	cpi	r25, 0xF0	; 240
 6bc:	21 f0       	breq	.+8      	; 0x6c6 <midi_packet_length+0x38>
 6be:	93 3f       	cpi	r25, 0xF3	; 243
 6c0:	99 f4       	brne	.+38     	; 0x6e8 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 6c2:	82 e0       	ldi	r24, 0x02	; 2
 6c4:	08 95       	ret
      case 0xF0:
         switch(status) {
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	fc 01       	movw	r30, r24
 6ca:	e1 5f       	subi	r30, 0xF1	; 241
 6cc:	f1 09       	sbc	r31, r1
 6ce:	ef 30       	cpi	r30, 0x0F	; 15
 6d0:	f1 05       	cpc	r31, r1
 6d2:	40 f4       	brcc	.+16     	; 0x6e4 <midi_packet_length+0x56>
 6d4:	e6 5a       	subi	r30, 0xA6	; 166
 6d6:	ff 4f       	sbci	r31, 0xFF	; 255
 6d8:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 6dc:	83 e0       	ldi	r24, 0x03	; 3
 6de:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	08 95       	ret
         }
      default:
         return UNDEFINED;
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 6f2:	08 95       	ret

000006f4 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 6f4:	fc 01       	movw	r30, r24
 6f6:	75 83       	std	Z+5, r23	; 0x05
 6f8:	64 83       	std	Z+4, r22	; 0x04
 6fa:	08 95       	ret

000006fc <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 6fc:	fc 01       	movw	r30, r24
 6fe:	77 83       	std	Z+7, r23	; 0x07
 700:	66 83       	std	Z+6, r22	; 0x06
 702:	08 95       	ret

00000704 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 704:	fc 01       	movw	r30, r24
 706:	77 8b       	std	Z+23, r23	; 0x17
 708:	66 8b       	std	Z+22, r22	; 0x16
 70a:	08 95       	ret

0000070c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 712:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 714:	1f a2       	std	Y+39, r1	; 0x27
 716:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 718:	bc 01       	movw	r22, r24
 71a:	68 5d       	subi	r22, 0xD8	; 216
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	40 ec       	ldi	r20, 0xC0	; 192
 720:	88 51       	subi	r24, 0x18	; 24
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	0e 94 b8 02 	call	0x570	; 0x570 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 728:	1b 82       	std	Y+3, r1	; 0x03
 72a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 72c:	1d 82       	std	Y+5, r1	; 0x05
 72e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 730:	1f 82       	std	Y+7, r1	; 0x07
 732:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 734:	19 86       	std	Y+9, r1	; 0x09
 736:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 738:	1b 86       	std	Y+11, r1	; 0x0b
 73a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 73c:	1d 86       	std	Y+13, r1	; 0x0d
 73e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 740:	1f 86       	std	Y+15, r1	; 0x0f
 742:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 744:	19 8a       	std	Y+17, r1	; 0x11
 746:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 748:	1b 8a       	std	Y+19, r1	; 0x13
 74a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 74c:	1d 8a       	std	Y+21, r1	; 0x15
 74e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 750:	1f 8a       	std	Y+23, r1	; 0x17
 752:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 754:	19 8e       	std	Y+25, r1	; 0x19
 756:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 758:	1b 8e       	std	Y+27, r1	; 0x1b
 75a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 75c:	1d 8e       	std	Y+29, r1	; 0x1d
 75e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 760:	1f 8e       	std	Y+31, r1	; 0x1f
 762:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 764:	19 a2       	std	Y+33, r1	; 0x21
 766:	18 a2       	std	Y+32, r1	; 0x20
}
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	08 95       	ret

0000076e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 76e:	ef 92       	push	r14
 770:	ff 92       	push	r15
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 77a:	66 23       	and	r22, r22
 77c:	99 f0       	breq	.+38     	; 0x7a4 <midi_device_input+0x36>
 77e:	ea 01       	movw	r28, r20
 780:	61 50       	subi	r22, 0x01	; 1
 782:	06 2f       	mov	r16, r22
 784:	10 e0       	ldi	r17, 0x00	; 0
 786:	0f 5f       	subi	r16, 0xFF	; 255
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	04 0f       	add	r16, r20
 78c:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 78e:	7c 01       	movw	r14, r24
 790:	28 ee       	ldi	r18, 0xE8	; 232
 792:	e2 0e       	add	r14, r18
 794:	f1 1c       	adc	r15, r1
 796:	69 91       	ld	r22, Y+
 798:	c7 01       	movw	r24, r14
 79a:	0e 94 bf 02 	call	0x57e	; 0x57e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 79e:	c0 17       	cp	r28, r16
 7a0:	d1 07       	cpc	r29, r17
 7a2:	c9 f7       	brne	.-14     	; 0x796 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	ff 90       	pop	r15
 7ae:	ef 90       	pop	r14
 7b0:	08 95       	ret

000007b2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	00 d0       	rcall	.+0      	; 0x7c8 <midi_input_callbacks+0x16>
 7c8:	1f 92       	push	r1
 7ca:	cd b7       	in	r28, 0x3d	; 61
 7cc:	de b7       	in	r29, 0x3e	; 62
 7ce:	7c 01       	movw	r14, r24
 7d0:	6b 01       	movw	r12, r22
 7d2:	14 2f       	mov	r17, r20
 7d4:	b2 2e       	mov	r11, r18
 7d6:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 7d8:	dc 01       	movw	r26, r24
 7da:	95 96       	adiw	r26, 0x25	; 37
 7dc:	8c 91       	ld	r24, X
 7de:	95 97       	sbiw	r26, 0x25	; 37
 7e0:	84 30       	cpi	r24, 0x04	; 4
 7e2:	11 f5       	brne	.+68     	; 0x828 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 7e4:	5a 96       	adiw	r26, 0x1a	; 26
 7e6:	ed 91       	ld	r30, X+
 7e8:	fc 91       	ld	r31, X
 7ea:	5b 97       	sbiw	r26, 0x1b	; 27
 7ec:	30 97       	sbiw	r30, 0x00	; 0
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <midi_input_callbacks+0x40>
 7f0:	cc c0       	rjmp	.+408    	; 0x98a <__stack+0x8b>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 7f2:	9b 01       	movw	r18, r22
 7f4:	21 50       	subi	r18, 0x01	; 1
 7f6:	31 09       	sbc	r19, r1
 7f8:	ab ea       	ldi	r26, 0xAB	; 171
 7fa:	ba ea       	ldi	r27, 0xAA	; 170
 7fc:	0e 94 01 06 	call	0xc02	; 0xc02 <__umulhisi3>
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	9c 01       	movw	r18, r24
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	82 0f       	add	r24, r18
 80c:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 80e:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 810:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 812:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 814:	4c 2d       	mov	r20, r12
 816:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 818:	9e 01       	movw	r18, r28
 81a:	2f 5f       	subi	r18, 0xFF	; 255
 81c:	3f 4f       	sbci	r19, 0xFF	; 255
 81e:	68 2f       	mov	r22, r24
 820:	79 2f       	mov	r23, r25
 822:	c7 01       	movw	r24, r14
 824:	09 95       	icall
 826:	be c0       	rjmp	.+380    	; 0x9a4 <__stack+0xa5>
      called = true;
    }
  } else {
    switch (cnt) {
 828:	62 30       	cpi	r22, 0x02	; 2
 82a:	71 05       	cpc	r23, r1
 82c:	09 f4       	brne	.+2      	; 0x830 <midi_input_callbacks+0x7e>
 82e:	55 c0       	rjmp	.+170    	; 0x8da <midi_input_callbacks+0x128>
 830:	63 30       	cpi	r22, 0x03	; 3
 832:	71 05       	cpc	r23, r1
 834:	29 f0       	breq	.+10     	; 0x840 <midi_input_callbacks+0x8e>
 836:	61 30       	cpi	r22, 0x01	; 1
 838:	71 05       	cpc	r23, r1
 83a:	09 f0       	breq	.+2      	; 0x83e <midi_input_callbacks+0x8c>
 83c:	a1 c0       	rjmp	.+322    	; 0x980 <__stack+0x81>
 83e:	88 c0       	rjmp	.+272    	; 0x950 <__stack+0x51>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 840:	84 2f       	mov	r24, r20
 842:	80 7f       	andi	r24, 0xF0	; 240
 844:	80 3a       	cpi	r24, 0xA0	; 160
 846:	f1 f0       	breq	.+60     	; 0x884 <midi_input_callbacks+0xd2>
 848:	28 f4       	brcc	.+10     	; 0x854 <midi_input_callbacks+0xa2>
 84a:	80 38       	cpi	r24, 0x80	; 128
 84c:	a9 f0       	breq	.+42     	; 0x878 <midi_input_callbacks+0xc6>
 84e:	80 39       	cpi	r24, 0x90	; 144
 850:	69 f0       	breq	.+26     	; 0x86c <midi_input_callbacks+0xba>
 852:	2f c0       	rjmp	.+94     	; 0x8b2 <midi_input_callbacks+0x100>
 854:	80 3e       	cpi	r24, 0xE0	; 224
 856:	e1 f0       	breq	.+56     	; 0x890 <midi_input_callbacks+0xde>
 858:	80 3f       	cpi	r24, 0xF0	; 240
 85a:	01 f1       	breq	.+64     	; 0x89c <midi_input_callbacks+0xea>
 85c:	80 3b       	cpi	r24, 0xB0	; 176
 85e:	49 f5       	brne	.+82     	; 0x8b2 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 860:	d7 01       	movw	r26, r14
 862:	12 96       	adiw	r26, 0x02	; 2
 864:	ed 91       	ld	r30, X+
 866:	fc 91       	ld	r31, X
 868:	13 97       	sbiw	r26, 0x03	; 3
              break;
 86a:	25 c0       	rjmp	.+74     	; 0x8b6 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 86c:	d7 01       	movw	r26, r14
 86e:	14 96       	adiw	r26, 0x04	; 4
 870:	ed 91       	ld	r30, X+
 872:	fc 91       	ld	r31, X
 874:	15 97       	sbiw	r26, 0x05	; 5
              break;
 876:	1f c0       	rjmp	.+62     	; 0x8b6 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 878:	d7 01       	movw	r26, r14
 87a:	16 96       	adiw	r26, 0x06	; 6
 87c:	ed 91       	ld	r30, X+
 87e:	fc 91       	ld	r31, X
 880:	17 97       	sbiw	r26, 0x07	; 7
              break;
 882:	19 c0       	rjmp	.+50     	; 0x8b6 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 884:	d7 01       	movw	r26, r14
 886:	18 96       	adiw	r26, 0x08	; 8
 888:	ed 91       	ld	r30, X+
 88a:	fc 91       	ld	r31, X
 88c:	19 97       	sbiw	r26, 0x09	; 9
              break;
 88e:	13 c0       	rjmp	.+38     	; 0x8b6 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 890:	d7 01       	movw	r26, r14
 892:	1a 96       	adiw	r26, 0x0a	; 10
 894:	ed 91       	ld	r30, X+
 896:	fc 91       	ld	r31, X
 898:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 89c:	42 3f       	cpi	r20, 0xF2	; 242
 89e:	09 f0       	breq	.+2      	; 0x8a2 <midi_input_callbacks+0xf0>
 8a0:	74 c0       	rjmp	.+232    	; 0x98a <__stack+0x8b>
                func = device->input_songposition_callback;
 8a2:	d7 01       	movw	r26, r14
 8a4:	1c 96       	adiw	r26, 0x0c	; 12
 8a6:	ed 91       	ld	r30, X+
 8a8:	fc 91       	ld	r31, X
 8aa:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 8ac:	30 97       	sbiw	r30, 0x00	; 0
 8ae:	41 f4       	brne	.+16     	; 0x8c0 <midi_input_callbacks+0x10e>
 8b0:	6c c0       	rjmp	.+216    	; 0x98a <__stack+0x8b>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 8b2:	e0 e0       	ldi	r30, 0x00	; 0
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 8b6:	30 97       	sbiw	r30, 0x00	; 0
 8b8:	09 f4       	brne	.+2      	; 0x8bc <midi_input_callbacks+0x10a>
 8ba:	67 c0       	rjmp	.+206    	; 0x98a <__stack+0x8b>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 8bc:	12 3f       	cpi	r17, 0xF2	; 242
 8be:	31 f4       	brne	.+12     	; 0x8cc <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 8c0:	2a 2d       	mov	r18, r10
 8c2:	4b 2d       	mov	r20, r11
 8c4:	62 ef       	ldi	r22, 0xF2	; 242
 8c6:	c7 01       	movw	r24, r14
 8c8:	09 95       	icall
 8ca:	6c c0       	rjmp	.+216    	; 0x9a4 <__stack+0xa5>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 8cc:	2a 2d       	mov	r18, r10
 8ce:	4b 2d       	mov	r20, r11
 8d0:	61 2f       	mov	r22, r17
 8d2:	6f 70       	andi	r22, 0x0F	; 15
 8d4:	c7 01       	movw	r24, r14
 8d6:	09 95       	icall
 8d8:	65 c0       	rjmp	.+202    	; 0x9a4 <__stack+0xa5>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 8da:	84 2f       	mov	r24, r20
 8dc:	80 7f       	andi	r24, 0xF0	; 240
 8de:	80 3d       	cpi	r24, 0xD0	; 208
 8e0:	51 f0       	breq	.+20     	; 0x8f6 <midi_input_callbacks+0x144>
 8e2:	80 3f       	cpi	r24, 0xF0	; 240
 8e4:	71 f0       	breq	.+28     	; 0x902 <__stack+0x3>
 8e6:	80 3c       	cpi	r24, 0xC0	; 192
 8e8:	01 f5       	brne	.+64     	; 0x92a <__stack+0x2b>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 8ea:	d7 01       	movw	r26, r14
 8ec:	1e 96       	adiw	r26, 0x0e	; 14
 8ee:	ed 91       	ld	r30, X+
 8f0:	fc 91       	ld	r31, X
 8f2:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 8f4:	1c c0       	rjmp	.+56     	; 0x92e <__stack+0x2f>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 8f6:	d7 01       	movw	r26, r14
 8f8:	50 96       	adiw	r26, 0x10	; 16
 8fa:	ed 91       	ld	r30, X+
 8fc:	fc 91       	ld	r31, X
 8fe:	51 97       	sbiw	r26, 0x11	; 17
              break;
 900:	16 c0       	rjmp	.+44     	; 0x92e <__stack+0x2f>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 902:	43 3f       	cpi	r20, 0xF3	; 243
 904:	41 f4       	brne	.+16     	; 0x916 <__stack+0x17>
                func = device->input_songselect_callback;
 906:	d7 01       	movw	r26, r14
 908:	52 96       	adiw	r26, 0x12	; 18
 90a:	ed 91       	ld	r30, X+
 90c:	fc 91       	ld	r31, X
 90e:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 910:	30 97       	sbiw	r30, 0x00	; 0
 912:	99 f4       	brne	.+38     	; 0x93a <__stack+0x3b>
 914:	3a c0       	rjmp	.+116    	; 0x98a <__stack+0x8b>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 916:	41 3f       	cpi	r20, 0xF1	; 241
 918:	c1 f5       	brne	.+112    	; 0x98a <__stack+0x8b>
                func = device->input_tc_quarterframe_callback;
 91a:	d7 01       	movw	r26, r14
 91c:	54 96       	adiw	r26, 0x14	; 20
 91e:	ed 91       	ld	r30, X+
 920:	fc 91       	ld	r31, X
 922:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 924:	30 97       	sbiw	r30, 0x00	; 0
 926:	49 f4       	brne	.+18     	; 0x93a <__stack+0x3b>
 928:	30 c0       	rjmp	.+96     	; 0x98a <__stack+0x8b>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 92a:	e0 e0       	ldi	r30, 0x00	; 0
 92c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 92e:	30 97       	sbiw	r30, 0x00	; 0
 930:	61 f1       	breq	.+88     	; 0x98a <__stack+0x8b>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 932:	81 2f       	mov	r24, r17
 934:	8d 7f       	andi	r24, 0xFD	; 253
 936:	81 3f       	cpi	r24, 0xF1	; 241
 938:	29 f4       	brne	.+10     	; 0x944 <__stack+0x45>
              func(device, byte0, byte1);
 93a:	4b 2d       	mov	r20, r11
 93c:	61 2f       	mov	r22, r17
 93e:	c7 01       	movw	r24, r14
 940:	09 95       	icall
 942:	30 c0       	rjmp	.+96     	; 0x9a4 <__stack+0xa5>
            else
              func(device, byte0 & 0x0F, byte1);
 944:	4b 2d       	mov	r20, r11
 946:	61 2f       	mov	r22, r17
 948:	6f 70       	andi	r22, 0x0F	; 15
 94a:	c7 01       	movw	r24, r14
 94c:	09 95       	icall
 94e:	2a c0       	rjmp	.+84     	; 0x9a4 <__stack+0xa5>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 950:	84 2f       	mov	r24, r20
 952:	0e 94 41 03 	call	0x682	; 0x682 <midi_is_realtime>
 956:	88 23       	and	r24, r24
 958:	31 f0       	breq	.+12     	; 0x966 <__stack+0x67>
            func = device->input_realtime_callback;
 95a:	d7 01       	movw	r26, r14
 95c:	56 96       	adiw	r26, 0x16	; 22
 95e:	ed 91       	ld	r30, X+
 960:	fc 91       	ld	r31, X
 962:	57 97       	sbiw	r26, 0x17	; 23
 964:	07 c0       	rjmp	.+14     	; 0x974 <__stack+0x75>
          else if (byte0 == MIDI_TUNEREQUEST)
 966:	16 3f       	cpi	r17, 0xF6	; 246
 968:	81 f4       	brne	.+32     	; 0x98a <__stack+0x8b>
            func = device->input_tunerequest_callback;
 96a:	d7 01       	movw	r26, r14
 96c:	58 96       	adiw	r26, 0x18	; 24
 96e:	ed 91       	ld	r30, X+
 970:	fc 91       	ld	r31, X
 972:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 974:	30 97       	sbiw	r30, 0x00	; 0
 976:	49 f0       	breq	.+18     	; 0x98a <__stack+0x8b>
            func(device, byte0);
 978:	61 2f       	mov	r22, r17
 97a:	c7 01       	movw	r24, r14
 97c:	09 95       	icall
 97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__stack+0xa5>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 980:	64 30       	cpi	r22, 0x04	; 4
 982:	71 05       	cpc	r23, r1
 984:	10 f0       	brcs	.+4      	; 0x98a <__stack+0x8b>
          cnt = 0;
 986:	c1 2c       	mov	r12, r1
 988:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 98a:	d7 01       	movw	r26, r14
 98c:	5c 96       	adiw	r26, 0x1c	; 28
 98e:	ed 91       	ld	r30, X+
 990:	fc 91       	ld	r31, X
 992:	5d 97       	sbiw	r26, 0x1d	; 29
 994:	30 97       	sbiw	r30, 0x00	; 0
 996:	31 f0       	breq	.+12     	; 0x9a4 <__stack+0xa5>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 998:	0a 2d       	mov	r16, r10
 99a:	2b 2d       	mov	r18, r11
 99c:	41 2f       	mov	r20, r17
 99e:	b6 01       	movw	r22, r12
 9a0:	c7 01       	movw	r24, r14
 9a2:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 9a4:	d7 01       	movw	r26, r14
 9a6:	5e 96       	adiw	r26, 0x1e	; 30
 9a8:	ed 91       	ld	r30, X+
 9aa:	fc 91       	ld	r31, X
 9ac:	5f 97       	sbiw	r26, 0x1f	; 31
 9ae:	30 97       	sbiw	r30, 0x00	; 0
 9b0:	31 f0       	breq	.+12     	; 0x9be <__stack+0xbf>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 9b2:	0a 2d       	mov	r16, r10
 9b4:	2b 2d       	mov	r18, r11
 9b6:	41 2f       	mov	r20, r17
 9b8:	b6 01       	movw	r22, r12
 9ba:	c7 01       	movw	r24, r14
 9bc:	09 95       	icall
}
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	cf 90       	pop	r12
 9d4:	bf 90       	pop	r11
 9d6:	af 90       	pop	r10
 9d8:	08 95       	ret

000009da <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 9da:	ff 92       	push	r15
 9dc:	0f 93       	push	r16
 9de:	1f 93       	push	r17
 9e0:	cf 93       	push	r28
 9e2:	df 93       	push	r29
 9e4:	ec 01       	movw	r28, r24
 9e6:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 9e8:	86 2f       	mov	r24, r22
 9ea:	0e 94 41 03 	call	0x682	; 0x682 <midi_is_realtime>
 9ee:	88 23       	and	r24, r24
 9f0:	69 f0       	breq	.+26     	; 0xa0c <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 9f2:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 9f8:	00 e0       	ldi	r16, 0x00	; 0
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	41 2f       	mov	r20, r17
 9fe:	61 e0       	ldi	r22, 0x01	; 1
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	ce 01       	movw	r24, r28
 a04:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <midi_input_callbacks>
    device->input_state = state;
 a08:	fd a2       	std	Y+37, r15	; 0x25
 a0a:	a4 c0       	rjmp	.+328    	; 0xb54 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
 a0c:	81 2f       	mov	r24, r17
 a0e:	0e 94 3d 03 	call	0x67a	; 0x67a <midi_is_statusbyte>
 a12:	88 23       	and	r24, r24
 a14:	09 f4       	brne	.+2      	; 0xa18 <midi_process_byte+0x3e>
 a16:	5d c0       	rjmp	.+186    	; 0xad2 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 a18:	8d a1       	ldd	r24, Y+37	; 0x25
 a1a:	84 30       	cpi	r24, 0x04	; 4
 a1c:	29 f0       	breq	.+10     	; 0xa28 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
 a1e:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	9f a3       	std	Y+39, r25	; 0x27
 a26:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 a28:	81 2f       	mov	r24, r17
 a2a:	0e 94 47 03 	call	0x68e	; 0x68e <midi_packet_length>
 a2e:	81 30       	cpi	r24, 0x01	; 1
 a30:	31 f0       	breq	.+12     	; 0xa3e <midi_process_byte+0x64>
 a32:	b8 f0       	brcs	.+46     	; 0xa62 <midi_process_byte+0x88>
 a34:	82 30       	cpi	r24, 0x02	; 2
 a36:	79 f0       	breq	.+30     	; 0xa56 <midi_process_byte+0x7c>
 a38:	83 30       	cpi	r24, 0x03	; 3
 a3a:	81 f0       	breq	.+32     	; 0xa5c <midi_process_byte+0x82>
 a3c:	46 c0       	rjmp	.+140    	; 0xaca <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 a42:	00 e0       	ldi	r16, 0x00	; 0
 a44:	20 e0       	ldi	r18, 0x00	; 0
 a46:	41 2f       	mov	r20, r17
 a48:	61 e0       	ldi	r22, 0x01	; 1
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	ce 01       	movw	r24, r28
 a4e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <midi_input_callbacks>
        device->input_state = IDLE;
 a52:	1d a2       	std	Y+37, r1	; 0x25
        break;
 a54:	7f c0       	rjmp	.+254    	; 0xb54 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	8d a3       	std	Y+37, r24	; 0x25
        break;
 a5a:	7c c0       	rjmp	.+248    	; 0xb54 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 a5c:	83 e0       	ldi	r24, 0x03	; 3
 a5e:	8d a3       	std	Y+37, r24	; 0x25
        break;
 a60:	79 c0       	rjmp	.+242    	; 0xb54 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
 a62:	10 3f       	cpi	r17, 0xF0	; 240
 a64:	19 f0       	breq	.+6      	; 0xa6c <midi_process_byte+0x92>
 a66:	17 3f       	cpi	r17, 0xF7	; 247
 a68:	51 f0       	breq	.+20     	; 0xa7e <midi_process_byte+0xa4>
 a6a:	2b c0       	rjmp	.+86     	; 0xac2 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 a6c:	84 e0       	ldi	r24, 0x04	; 4
 a6e:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 a70:	80 ef       	ldi	r24, 0xF0	; 240
 a72:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	9f a3       	std	Y+39, r25	; 0x27
 a7a:	8e a3       	std	Y+38, r24	; 0x26
            break;
 a7c:	6b c0       	rjmp	.+214    	; 0xb54 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 a7e:	4e a1       	ldd	r20, Y+38	; 0x26
 a80:	5f a1       	ldd	r21, Y+39	; 0x27
 a82:	9a 01       	movw	r18, r20
 a84:	ab ea       	ldi	r26, 0xAB	; 171
 a86:	ba ea       	ldi	r27, 0xAA	; 170
 a88:	0e 94 01 06 	call	0xc02	; 0xc02 <__umulhisi3>
 a8c:	96 95       	lsr	r25
 a8e:	87 95       	ror	r24
 a90:	9c 01       	movw	r18, r24
 a92:	22 0f       	add	r18, r18
 a94:	33 1f       	adc	r19, r19
 a96:	82 0f       	add	r24, r18
 a98:	93 1f       	adc	r25, r19
 a9a:	fa 01       	movw	r30, r20
 a9c:	e8 1b       	sub	r30, r24
 a9e:	f9 0b       	sbc	r31, r25
 aa0:	ec 0f       	add	r30, r28
 aa2:	fd 1f       	adc	r31, r29
 aa4:	87 ef       	ldi	r24, 0xF7	; 247
 aa6:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 aa8:	ba 01       	movw	r22, r20
 aaa:	6f 5f       	subi	r22, 0xFF	; 255
 aac:	7f 4f       	sbci	r23, 0xFF	; 255
 aae:	7f a3       	std	Y+39, r23	; 0x27
 ab0:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 ab2:	0c a1       	ldd	r16, Y+36	; 0x24
 ab4:	2b a1       	ldd	r18, Y+35	; 0x23
 ab6:	4a a1       	ldd	r20, Y+34	; 0x22
 ab8:	ce 01       	movw	r24, r28
 aba:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 abe:	1d a2       	std	Y+37, r1	; 0x25
            break;
 ac0:	49 c0       	rjmp	.+146    	; 0xb54 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
 ac2:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 ac4:	1f a2       	std	Y+39, r1	; 0x27
 ac6:	1e a2       	std	Y+38, r1	; 0x26
 ac8:	45 c0       	rjmp	.+138    	; 0xb54 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
 aca:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 acc:	1f a2       	std	Y+39, r1	; 0x27
 ace:	1e a2       	std	Y+38, r1	; 0x26
        break;
 ad0:	41 c0       	rjmp	.+130    	; 0xb54 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
 ad2:	ed a1       	ldd	r30, Y+37	; 0x25
 ad4:	ee 23       	and	r30, r30
 ad6:	f1 f1       	breq	.+124    	; 0xb54 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 ad8:	4e a1       	ldd	r20, Y+38	; 0x26
 ada:	5f a1       	ldd	r21, Y+39	; 0x27
 adc:	9a 01       	movw	r18, r20
 ade:	ab ea       	ldi	r26, 0xAB	; 171
 ae0:	ba ea       	ldi	r27, 0xAA	; 170
 ae2:	0e 94 01 06 	call	0xc02	; 0xc02 <__umulhisi3>
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	9c 01       	movw	r18, r24
 aec:	22 0f       	add	r18, r18
 aee:	33 1f       	adc	r19, r19
 af0:	82 0f       	add	r24, r18
 af2:	93 1f       	adc	r25, r19
 af4:	9a 01       	movw	r18, r20
 af6:	28 1b       	sub	r18, r24
 af8:	39 0b       	sbc	r19, r25
 afa:	de 01       	movw	r26, r28
 afc:	a2 0f       	add	r26, r18
 afe:	b3 1f       	adc	r27, r19
 b00:	92 96       	adiw	r26, 0x22	; 34
 b02:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 b04:	ba 01       	movw	r22, r20
 b06:	6f 5f       	subi	r22, 0xFF	; 255
 b08:	7f 4f       	sbci	r23, 0xFF	; 255
 b0a:	7f a3       	std	Y+39, r23	; 0x27
 b0c:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 b0e:	21 30       	cpi	r18, 0x01	; 1
 b10:	31 05       	cpc	r19, r1
 b12:	89 f0       	breq	.+34     	; 0xb36 <midi_process_byte+0x15c>
 b14:	22 30       	cpi	r18, 0x02	; 2
 b16:	31 05       	cpc	r19, r1
 b18:	e9 f4       	brne	.+58     	; 0xb54 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 b1a:	0c a1       	ldd	r16, Y+36	; 0x24
 b1c:	2b a1       	ldd	r18, Y+35	; 0x23
 b1e:	4a a1       	ldd	r20, Y+34	; 0x22
 b20:	ce 01       	movw	r24, r28
 b22:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 b26:	8d a1       	ldd	r24, Y+37	; 0x25
 b28:	84 30       	cpi	r24, 0x04	; 4
 b2a:	a1 f0       	breq	.+40     	; 0xb54 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 b2c:	81 e0       	ldi	r24, 0x01	; 1
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	9f a3       	std	Y+39, r25	; 0x27
 b32:	8e a3       	std	Y+38, r24	; 0x26
 b34:	0f c0       	rjmp	.+30     	; 0xb54 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 b36:	e2 30       	cpi	r30, 0x02	; 2
 b38:	69 f4       	brne	.+26     	; 0xb54 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
 b3a:	00 e0       	ldi	r16, 0x00	; 0
 b3c:	2b a1       	ldd	r18, Y+35	; 0x23
 b3e:	4a a1       	ldd	r20, Y+34	; 0x22
 b40:	ce 01       	movw	r24, r28
 b42:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 b46:	8d a1       	ldd	r24, Y+37	; 0x25
 b48:	84 30       	cpi	r24, 0x04	; 4
 b4a:	21 f0       	breq	.+8      	; 0xb54 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	9f a3       	std	Y+39, r25	; 0x27
 b52:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	ff 90       	pop	r15
 b5e:	08 95       	ret

00000b60 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 b60:	cf 92       	push	r12
 b62:	df 92       	push	r13
 b64:	ef 92       	push	r14
 b66:	ff 92       	push	r15
 b68:	0f 93       	push	r16
 b6a:	1f 93       	push	r17
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 b72:	dc 01       	movw	r26, r24
 b74:	90 96       	adiw	r26, 0x20	; 32
 b76:	ed 91       	ld	r30, X+
 b78:	fc 91       	ld	r31, X
 b7a:	91 97       	sbiw	r26, 0x21	; 33
 b7c:	30 97       	sbiw	r30, 0x00	; 0
 b7e:	09 f0       	breq	.+2      	; 0xb82 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 b80:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 b82:	86 01       	movw	r16, r12
 b84:	08 51       	subi	r16, 0x18	; 24
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	c8 01       	movw	r24, r16
 b8a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 b8e:	e8 2e       	mov	r14, r24
 b90:	f1 2c       	mov	r15, r1
 b92:	e1 14       	cp	r14, r1
 b94:	f1 04       	cpc	r15, r1
 b96:	91 f0       	breq	.+36     	; 0xbbc <midi_device_process+0x5c>
 b98:	c0 e0       	ldi	r28, 0x00	; 0
 b9a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 b9c:	60 e0       	ldi	r22, 0x00	; 0
 b9e:	c8 01       	movw	r24, r16
 ba0:	0e 94 0b 03 	call	0x616	; 0x616 <bytequeue_get>
 ba4:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 ba6:	c6 01       	movw	r24, r12
 ba8:	0e 94 ed 04 	call	0x9da	; 0x9da <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 bac:	61 e0       	ldi	r22, 0x01	; 1
 bae:	c8 01       	movw	r24, r16
 bb0:	0e 94 1d 03 	call	0x63a	; 0x63a <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 bb4:	21 96       	adiw	r28, 0x01	; 1
 bb6:	ce 15       	cp	r28, r14
 bb8:	df 05       	cpc	r29, r15
 bba:	81 f7       	brne	.-32     	; 0xb9c <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 bbc:	df 91       	pop	r29
 bbe:	cf 91       	pop	r28
 bc0:	1f 91       	pop	r17
 bc2:	0f 91       	pop	r16
 bc4:	ff 90       	pop	r15
 bc6:	ef 90       	pop	r14
 bc8:	df 90       	pop	r13
 bca:	cf 90       	pop	r12
 bcc:	08 95       	ret

00000bce <__divmodhi4>:
 bce:	97 fb       	bst	r25, 7
 bd0:	07 2e       	mov	r0, r23
 bd2:	16 f4       	brtc	.+4      	; 0xbd8 <__divmodhi4+0xa>
 bd4:	00 94       	com	r0
 bd6:	07 d0       	rcall	.+14     	; 0xbe6 <__divmodhi4_neg1>
 bd8:	77 fd       	sbrc	r23, 7
 bda:	09 d0       	rcall	.+18     	; 0xbee <__divmodhi4_neg2>
 bdc:	0e 94 10 06 	call	0xc20	; 0xc20 <__udivmodhi4>
 be0:	07 fc       	sbrc	r0, 7
 be2:	05 d0       	rcall	.+10     	; 0xbee <__divmodhi4_neg2>
 be4:	3e f4       	brtc	.+14     	; 0xbf4 <__divmodhi4_exit>

00000be6 <__divmodhi4_neg1>:
 be6:	90 95       	com	r25
 be8:	81 95       	neg	r24
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	08 95       	ret

00000bee <__divmodhi4_neg2>:
 bee:	70 95       	com	r23
 bf0:	61 95       	neg	r22
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255

00000bf4 <__divmodhi4_exit>:
 bf4:	08 95       	ret

00000bf6 <__tablejump2__>:
 bf6:	ee 0f       	add	r30, r30
 bf8:	ff 1f       	adc	r31, r31
 bfa:	05 90       	lpm	r0, Z+
 bfc:	f4 91       	lpm	r31, Z
 bfe:	e0 2d       	mov	r30, r0
 c00:	09 94       	ijmp

00000c02 <__umulhisi3>:
 c02:	a2 9f       	mul	r26, r18
 c04:	b0 01       	movw	r22, r0
 c06:	b3 9f       	mul	r27, r19
 c08:	c0 01       	movw	r24, r0
 c0a:	a3 9f       	mul	r26, r19
 c0c:	70 0d       	add	r23, r0
 c0e:	81 1d       	adc	r24, r1
 c10:	11 24       	eor	r1, r1
 c12:	91 1d       	adc	r25, r1
 c14:	b2 9f       	mul	r27, r18
 c16:	70 0d       	add	r23, r0
 c18:	81 1d       	adc	r24, r1
 c1a:	11 24       	eor	r1, r1
 c1c:	91 1d       	adc	r25, r1
 c1e:	08 95       	ret

00000c20 <__udivmodhi4>:
 c20:	aa 1b       	sub	r26, r26
 c22:	bb 1b       	sub	r27, r27
 c24:	51 e1       	ldi	r21, 0x11	; 17
 c26:	07 c0       	rjmp	.+14     	; 0xc36 <__udivmodhi4_ep>

00000c28 <__udivmodhi4_loop>:
 c28:	aa 1f       	adc	r26, r26
 c2a:	bb 1f       	adc	r27, r27
 c2c:	a6 17       	cp	r26, r22
 c2e:	b7 07       	cpc	r27, r23
 c30:	10 f0       	brcs	.+4      	; 0xc36 <__udivmodhi4_ep>
 c32:	a6 1b       	sub	r26, r22
 c34:	b7 0b       	sbc	r27, r23

00000c36 <__udivmodhi4_ep>:
 c36:	88 1f       	adc	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	5a 95       	dec	r21
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__udivmodhi4_loop>
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	bc 01       	movw	r22, r24
 c44:	cd 01       	movw	r24, r26
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
