
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  00002098  0000212c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  00800270  00800270  0000229c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055ab  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f2  00000000  00000000  00007cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d6  00000000  00000000  000091e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  0000a7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010d9  00000000  00000000  0000b344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021f7  00000000  00000000  0000c41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000e614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	96 0d       	add	r25, r6
      b6:	94 0d       	add	r25, r4
      b8:	96 0d       	add	r25, r6
      ba:	98 0d       	add	r25, r8
      bc:	98 0d       	add	r25, r8
      be:	9e 0d       	add	r25, r14
      c0:	98 0d       	add	r25, r8
      c2:	9e 0d       	add	r25, r14
      c4:	9e 0d       	add	r25, r14
      c6:	9e 0d       	add	r25, r14
      c8:	9e 0d       	add	r25, r14
      ca:	9e 0d       	add	r25, r14
      cc:	98 0d       	add	r25, r8
      ce:	9e 0d       	add	r25, r14
      d0:	9e 0d       	add	r25, r14

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e8 e9       	ldi	r30, 0x98	; 152
      e6:	f0 e2       	ldi	r31, 0x20	; 32
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a0 37       	cpi	r26, 0x70	; 112
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a0 e7       	ldi	r26, 0x70	; 112
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a5 36       	cpi	r26, 0x65	; 101
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <main>
     108:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,NO_SWITCH, 0, MA_LED},
	{16,8, 1<<ACCENT,NO_SWITCH, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 70 02 	sts	0x0270, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	97 e0       	ldi	r25, 0x07	; 7
     1b0:	89 9f       	mul	r24, r25
     1b2:	f0 01       	movw	r30, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	e0 50       	subi	r30, 0x00	; 0
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	a0 81       	ld	r26, Z
     1bc:	8a 2f       	mov	r24, r26
     1be:	88 1f       	adc	r24, r24
     1c0:	88 27       	eor	r24, r24
     1c2:	88 1f       	adc	r24, r24
     1c4:	a1 81       	ldd	r26, Z+1	; 0x01
     1c6:	a7 70       	andi	r26, 0x07	; 7
     1c8:	aa 0f       	add	r26, r26
     1ca:	a8 2b       	or	r26, r24
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	a1 58       	subi	r26, 0x81	; 129
     1d0:	bd 4f       	sbci	r27, 0xFD	; 253
     1d2:	9c 91       	ld	r25, X
     1d4:	82 81       	ldd	r24, Z+2	; 0x02
     1d6:	89 2b       	or	r24, r25
     1d8:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != NO_SWITCH) {//need to set instrument switch
     1da:	83 81       	ldd	r24, Z+3	; 0x03
     1dc:	8f 3f       	cpi	r24, 0xFF	; 255
     1de:	f1 f0       	breq	.+60     	; 0x21c <trigger_drum+0x7e>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e0:	84 e1       	ldi	r24, 0x14	; 20
     1e2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1e6:	ef e7       	ldi	r30, 0x7F	; 127
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	93 81       	ldd	r25, Z+3	; 0x03
     1ec:	9e 01       	movw	r18, r28
     1ee:	22 0f       	add	r18, r18
     1f0:	33 1f       	adc	r19, r19
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	22 0f       	add	r18, r18
     1f8:	33 1f       	adc	r19, r19
     1fa:	2c 1b       	sub	r18, r28
     1fc:	3d 0b       	sbc	r19, r29
     1fe:	d9 01       	movw	r26, r18
     200:	ac 5f       	subi	r26, 0xFC	; 252
     202:	be 4f       	sbci	r27, 0xFE	; 254
     204:	8c 91       	ld	r24, X
     206:	81 70       	andi	r24, 0x01	; 1
     208:	81 95       	neg	r24
     20a:	89 27       	eor	r24, r25
     20c:	d9 01       	movw	r26, r18
     20e:	a0 50       	subi	r26, 0x00	; 0
     210:	bf 4f       	sbci	r27, 0xFF	; 255
     212:	13 96       	adiw	r26, 0x03	; 3
     214:	2c 91       	ld	r18, X
     216:	82 23       	and	r24, r18
     218:	98 27       	eor	r25, r24
     21a:	93 83       	std	Z+3, r25	; 0x03
					
		}
			
		if (velocity > 64) {
     21c:	11 34       	cpi	r17, 0x41	; 65
     21e:	28 f0       	brcs	.+10     	; 0x22a <trigger_drum+0x8c>
			spi_data[8] |= (1<<ACCENT);
     220:	ef e7       	ldi	r30, 0x7F	; 127
     222:	f2 e0       	ldi	r31, 0x02	; 2
     224:	80 85       	ldd	r24, Z+8	; 0x08
     226:	81 60       	ori	r24, 0x01	; 1
     228:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     22a:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     22c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     230:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     232:	ee e6       	ldi	r30, 0x6E	; 110
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     23c:	85 b5       	in	r24, 0x25	; 37
     23e:	83 60       	ori	r24, 0x03	; 3
     240:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     242:	10 92 77 01 	sts	0x0177, r1
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	08 95       	ret

0000024e <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     24e:	ef e7       	ldi	r30, 0x7F	; 127
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     254:	86 81       	ldd	r24, Z+6	; 0x06
     256:	80 7f       	andi	r24, 0xF0	; 240
     258:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     25a:	87 81       	ldd	r24, Z+7	; 0x07
     25c:	8f 7d       	andi	r24, 0xDF	; 223
     25e:	87 83       	std	Z+7, r24	; 0x07
     260:	08 95       	ret

00000262 <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     262:	5f 92       	push	r5
     264:	6f 92       	push	r6
     266:	7f 92       	push	r7
     268:	8f 92       	push	r8
     26a:	9f 92       	push	r9
     26c:	af 92       	push	r10
     26e:	bf 92       	push	r11
     270:	cf 92       	push	r12
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29

	clear_all_trigs();
     280:	0e 94 27 01 	call	0x24e	; 0x24e <clear_all_trigs>
     284:	05 e0       	ldi	r16, 0x05	; 5
     286:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     288:	c0 e0       	ldi	r28, 0x00	; 0
     28a:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     28c:	0f 2e       	mov	r0, r31
     28e:	f0 e6       	ldi	r31, 0x60	; 96
     290:	8f 2e       	mov	r8, r31
     292:	f4 e0       	ldi	r31, 0x04	; 4
     294:	9f 2e       	mov	r9, r31
     296:	f0 2d       	mov	r31, r0
     298:	0f 2e       	mov	r0, r31
     29a:	fb e5       	ldi	r31, 0x5B	; 91
     29c:	af 2e       	mov	r10, r31
     29e:	f4 e0       	ldi	r31, 0x04	; 4
     2a0:	bf 2e       	mov	r11, r31
     2a2:	f0 2d       	mov	r31, r0
     2a4:	0f 2e       	mov	r0, r31
     2a6:	ff e5       	ldi	r31, 0x5F	; 95
     2a8:	cf 2e       	mov	r12, r31
     2aa:	f4 e0       	ldi	r31, 0x04	; 4
     2ac:	df 2e       	mov	r13, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f3 e3       	ldi	r31, 0x33	; 51
     2b4:	5f 2e       	mov	r5, r31
     2b6:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2b8:	0f 2e       	mov	r0, r31
     2ba:	ff e7       	ldi	r31, 0x7F	; 127
     2bc:	6f 2e       	mov	r6, r31
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	7f 2e       	mov	r7, r31
     2c2:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2c4:	fe 01       	movw	r30, r28
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	ee 0f       	add	r30, r30
     2d0:	ff 1f       	adc	r31, r31
     2d2:	ec 1b       	sub	r30, r28
     2d4:	fd 0b       	sbc	r31, r29
     2d6:	ea 5f       	subi	r30, 0xFA	; 250
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	80 81       	ld	r24, Z
     2dc:	80 fd       	sbrc	r24, 0
     2de:	6b c0       	rjmp	.+214    	; 0x3b6 <trigger_step+0x154>
     2e0:	f4 01       	movw	r30, r8
     2e2:	80 81       	ld	r24, Z
     2e4:	81 fb       	bst	r24, 1
     2e6:	ee 24       	eor	r14, r14
     2e8:	e0 f8       	bld	r14, 0
     2ea:	f1 2c       	mov	r15, r1
     2ec:	f5 01       	movw	r30, r10
     2ee:	20 81       	ld	r18, Z
     2f0:	f6 01       	movw	r30, r12
     2f2:	90 81       	ld	r25, Z
     2f4:	92 95       	swap	r25
     2f6:	96 95       	lsr	r25
     2f8:	97 70       	andi	r25, 0x07	; 7
     2fa:	81 70       	andi	r24, 0x01	; 1
     2fc:	88 0f       	add	r24, r24
     2fe:	88 0f       	add	r24, r24
     300:	88 0f       	add	r24, r24
     302:	89 2b       	or	r24, r25
     304:	f7 01       	movw	r30, r14
     306:	e2 95       	swap	r30
     308:	f2 95       	swap	r31
     30a:	f0 7f       	andi	r31, 0xF0	; 240
     30c:	fe 27       	eor	r31, r30
     30e:	e0 7f       	andi	r30, 0xF0	; 240
     310:	fe 27       	eor	r31, r30
     312:	92 2f       	mov	r25, r18
     314:	91 70       	andi	r25, 0x01	; 1
     316:	59 9e       	mul	r5, r25
     318:	e0 0d       	add	r30, r0
     31a:	f1 1d       	adc	r31, r1
     31c:	11 24       	eor	r1, r1
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e1 57       	subi	r30, 0x71	; 113
     328:	fc 4f       	sbci	r31, 0xFC	; 252
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	0c 2e       	mov	r0, r28
     330:	02 c0       	rjmp	.+4      	; 0x336 <trigger_step+0xd4>
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <trigger_step+0xd0>
     33a:	80 ff       	sbrs	r24, 0
     33c:	3c c0       	rjmp	.+120    	; 0x3b6 <trigger_step+0x154>
			turn_on(drum_hit[i].led_index);
     33e:	f8 01       	movw	r30, r16
     340:	80 81       	ld	r24, Z
     342:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     346:	de 01       	movw	r26, r28
     348:	aa 0f       	add	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	aa 0f       	add	r26, r26
     34e:	bb 1f       	adc	r27, r27
     350:	aa 0f       	add	r26, r26
     352:	bb 1f       	adc	r27, r27
     354:	ac 1b       	sub	r26, r28
     356:	bd 0b       	sbc	r27, r29
     358:	a0 50       	subi	r26, 0x00	; 0
     35a:	bf 4f       	sbci	r27, 0xFF	; 255
     35c:	ec 91       	ld	r30, X
     35e:	8e 2f       	mov	r24, r30
     360:	88 1f       	adc	r24, r24
     362:	88 27       	eor	r24, r24
     364:	88 1f       	adc	r24, r24
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	ec 91       	ld	r30, X
     36a:	e7 70       	andi	r30, 0x07	; 7
     36c:	ee 0f       	add	r30, r30
     36e:	e8 2b       	or	r30, r24
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	e1 58       	subi	r30, 0x81	; 129
     374:	fd 4f       	sbci	r31, 0xFD	; 253
     376:	d8 01       	movw	r26, r16
     378:	13 97       	sbiw	r26, 0x03	; 3
     37a:	9c 91       	ld	r25, X
     37c:	80 81       	ld	r24, Z
     37e:	89 2b       	or	r24, r25
     380:	80 83       	st	Z, r24
     382:	f8 01       	movw	r30, r16
     384:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
     386:	80 81       	ld	r24, Z
     388:	8f 3f       	cpi	r24, 0xFF	; 255
     38a:	a9 f0       	breq	.+42     	; 0x3b6 <trigger_step+0x154>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     38c:	f3 01       	movw	r30, r6
     38e:	23 81       	ldd	r18, Z+3	; 0x03
     390:	fe 01       	movw	r30, r28
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ee 0f       	add	r30, r30
     398:	ff 1f       	adc	r31, r31
     39a:	ee 0f       	add	r30, r30
     39c:	ff 1f       	adc	r31, r31
     39e:	ec 1b       	sub	r30, r28
     3a0:	fd 0b       	sbc	r31, r29
     3a2:	ec 5f       	subi	r30, 0xFC	; 252
     3a4:	fe 4f       	sbci	r31, 0xFE	; 254
     3a6:	90 81       	ld	r25, Z
     3a8:	91 70       	andi	r25, 0x01	; 1
     3aa:	91 95       	neg	r25
     3ac:	92 27       	eor	r25, r18
     3ae:	89 23       	and	r24, r25
     3b0:	82 27       	eor	r24, r18
     3b2:	f3 01       	movw	r30, r6
     3b4:	83 83       	std	Z+3, r24	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3b6:	21 96       	adiw	r28, 0x01	; 1
     3b8:	09 5f       	subi	r16, 0xF9	; 249
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	c0 31       	cpi	r28, 0x10	; 16
     3be:	d1 05       	cpc	r29, r1
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <trigger_step+0x162>
     3c2:	80 cf       	rjmp	.-256    	; 0x2c4 <trigger_step+0x62>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	7f 90       	pop	r7
     3de:	6f 90       	pop	r6
     3e0:	5f 90       	pop	r5
     3e2:	08 95       	ret

000003e4 <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3e4:	80 91 4b 02 	lds	r24, 0x024B
     3e8:	86 ff       	sbrs	r24, 6
     3ea:	08 c0       	rjmp	.+16     	; 0x3fc <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3ec:	eb e4       	ldi	r30, 0x4B	; 75
     3ee:	f2 e0       	ldi	r31, 0x02	; 2
     3f0:	8f 7b       	andi	r24, 0xBF	; 191
     3f2:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3fc:	80 91 4d 02 	lds	r24, 0x024D
     400:	86 ff       	sbrs	r24, 6
     402:	08 c0       	rjmp	.+16     	; 0x414 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     404:	ed e4       	ldi	r30, 0x4D	; 77
     406:	f2 e0       	ldi	r31, 0x02	; 2
     408:	8f 7b       	andi	r24, 0xBF	; 191
     40a:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     414:	80 91 4f 02 	lds	r24, 0x024F
     418:	86 ff       	sbrs	r24, 6
     41a:	08 c0       	rjmp	.+16     	; 0x42c <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     41c:	ef e4       	ldi	r30, 0x4F	; 79
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	8f 7b       	andi	r24, 0xBF	; 191
     422:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     42c:	80 91 51 02 	lds	r24, 0x0251
     430:	86 ff       	sbrs	r24, 6
     432:	08 c0       	rjmp	.+16     	; 0x444 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     434:	e1 e5       	ldi	r30, 0x51	; 81
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	8f 7b       	andi	r24, 0xBF	; 191
     43a:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     444:	80 91 53 02 	lds	r24, 0x0253
     448:	86 ff       	sbrs	r24, 6
     44a:	08 c0       	rjmp	.+16     	; 0x45c <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     44c:	e3 e5       	ldi	r30, 0x53	; 83
     44e:	f2 e0       	ldi	r31, 0x02	; 2
     450:	8f 7b       	andi	r24, 0xBF	; 191
     452:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	84 e0       	ldi	r24, 0x04	; 4
     458:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     45c:	80 91 55 02 	lds	r24, 0x0255
     460:	86 ff       	sbrs	r24, 6
     462:	08 c0       	rjmp	.+16     	; 0x474 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     464:	e5 e5       	ldi	r30, 0x55	; 85
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	8f 7b       	andi	r24, 0xBF	; 191
     46a:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     474:	80 91 57 02 	lds	r24, 0x0257
     478:	86 ff       	sbrs	r24, 6
     47a:	08 c0       	rjmp	.+16     	; 0x48c <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     47c:	e7 e5       	ldi	r30, 0x57	; 87
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	8f 7b       	andi	r24, 0xBF	; 191
     482:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     48c:	80 91 59 02 	lds	r24, 0x0259
     490:	86 ff       	sbrs	r24, 6
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     494:	e9 e5       	ldi	r30, 0x59	; 89
     496:	f2 e0       	ldi	r31, 0x02	; 2
     498:	8f 7b       	andi	r24, 0xBF	; 191
     49a:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	87 e0       	ldi	r24, 0x07	; 7
     4a0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     4a4:	80 91 5b 02 	lds	r24, 0x025B
     4a8:	86 ff       	sbrs	r24, 6
     4aa:	08 c0       	rjmp	.+16     	; 0x4bc <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     4ac:	eb e5       	ldi	r30, 0x5B	; 91
     4ae:	f2 e0       	ldi	r31, 0x02	; 2
     4b0:	8f 7b       	andi	r24, 0xBF	; 191
     4b2:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4bc:	80 91 5d 02 	lds	r24, 0x025D
     4c0:	86 ff       	sbrs	r24, 6
     4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4c4:	ed e5       	ldi	r30, 0x5D	; 93
     4c6:	f2 e0       	ldi	r31, 0x02	; 2
     4c8:	8f 7b       	andi	r24, 0xBF	; 191
     4ca:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	89 e0       	ldi	r24, 0x09	; 9
     4d0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4d4:	80 91 5f 02 	lds	r24, 0x025F
     4d8:	86 ff       	sbrs	r24, 6
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4dc:	ef e5       	ldi	r30, 0x5F	; 95
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	8f 7b       	andi	r24, 0xBF	; 191
     4e2:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	8a e0       	ldi	r24, 0x0A	; 10
     4e8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4ec:	08 95       	ret

000004ee <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	8f 93       	push	r24
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4fe:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     500:	ee e6       	ldi	r30, 0x6E	; 110
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	8d 7f       	andi	r24, 0xFD	; 253
     508:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     50a:	80 91 8c 03 	lds	r24, 0x038C
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	80 93 8c 03 	sts	0x038C, r24
	
}
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	8f 91       	pop	r24
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     54e:	ea e8       	ldi	r30, 0x8A	; 138
     550:	f2 e0       	ldi	r31, 0x02	; 2
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	81 83       	std	Z+1, r24	; 0x01
     558:	90 81       	ld	r25, Z
     55a:	89 13       	cpse	r24, r25
     55c:	96 c0       	rjmp	.+300    	; 0x68a <__vector_11+0x166>
	{
		flag.next_step = 1;
     55e:	80 91 8c 03 	lds	r24, 0x038C
     562:	81 60       	ori	r24, 0x01	; 1
     564:	80 93 8c 03 	sts	0x038C, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     568:	ec e8       	ldi	r30, 0x8C	; 140
     56a:	f2 e0       	ldi	r31, 0x02	; 2
     56c:	80 81       	ld	r24, Z
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	98 0f       	add	r25, r24
     572:	93 70       	andi	r25, 0x03	; 3
     574:	8c 7f       	andi	r24, 0xFC	; 252
     576:	89 2b       	or	r24, r25
     578:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     57a:	10 92 8b 02 	sts	0x028B, r1
		if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) { 
     57e:	ef e5       	ldi	r30, 0x5F	; 95
     580:	f4 e0       	ldi	r31, 0x04	; 4
     582:	90 81       	ld	r25, Z
     584:	89 2f       	mov	r24, r25
     586:	82 95       	swap	r24
     588:	86 95       	lsr	r24
     58a:	87 70       	andi	r24, 0x07	; 7
     58c:	20 91 60 04 	lds	r18, 0x0460
     590:	21 70       	andi	r18, 0x01	; 1
     592:	22 0f       	add	r18, r18
     594:	22 0f       	add	r18, r18
     596:	22 0f       	add	r18, r18
     598:	28 2b       	or	r18, r24
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	82 0f       	add	r24, r18
     59e:	38 2f       	mov	r19, r24
     5a0:	32 95       	swap	r19
     5a2:	33 0f       	add	r19, r19
     5a4:	30 7e       	andi	r19, 0xE0	; 224
     5a6:	9f 71       	andi	r25, 0x1F	; 31
     5a8:	93 2b       	or	r25, r19
     5aa:	90 83       	st	Z, r25
     5ac:	83 fb       	bst	r24, 3
     5ae:	99 27       	eor	r25, r25
     5b0:	90 f9       	bld	r25, 0
     5b2:	81 81       	ldd	r24, Z+1	; 0x01
     5b4:	8e 7f       	andi	r24, 0xFE	; 254
     5b6:	89 2b       	or	r24, r25
     5b8:	81 83       	std	Z+1, r24	; 0x01
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	81 fb       	bst	r24, 1
     5be:	44 27       	eor	r20, r20
     5c0:	40 f9       	bld	r20, 0
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	43 57       	subi	r20, 0x73	; 115
     5c6:	5c 4f       	sbci	r21, 0xFC	; 252
     5c8:	fa 01       	movw	r30, r20
     5ca:	e0 53       	subi	r30, 0x30	; 48
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	28 17       	cp	r18, r24
     5d4:	39 07       	cpc	r19, r25
     5d6:	09 f0       	breq	.+2      	; 0x5da <__vector_11+0xb6>
     5d8:	58 c0       	rjmp	.+176    	; 0x68a <__vector_11+0x166>
     5da:	80 91 8e 03 	lds	r24, 0x038E
     5de:	81 ff       	sbrs	r24, 1
     5e0:	54 c0       	rjmp	.+168    	; 0x68a <__vector_11+0x166>
			flag.new_measure = 1;
     5e2:	80 91 8c 03 	lds	r24, 0x038C
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	80 93 8c 03 	sts	0x038C, r24
			sequencer.current_step = 0;
     5ec:	ef e5       	ldi	r30, 0x5F	; 95
     5ee:	f4 e0       	ldi	r31, 0x04	; 4
     5f0:	80 81       	ld	r24, Z
     5f2:	8f 71       	andi	r24, 0x1F	; 31
     5f4:	80 83       	st	Z, r24
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	8e 7f       	andi	r24, 0xFE	; 254
     5fa:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying exception handler
     5fc:	80 91 5e 04 	lds	r24, 0x045E
     600:	80 31       	cpi	r24, 0x10	; 16
     602:	09 f1       	breq	.+66     	; 0x646 <__vector_11+0x122>
				
				if (sequencer.part_playing == SECOND) {
     604:	80 91 60 04 	lds	r24, 0x0460
     608:	81 ff       	sbrs	r24, 1
     60a:	09 c0       	rjmp	.+18     	; 0x61e <__vector_11+0xfa>
					turn_off(SECOND_PART_LED);
     60c:	8b e2       	ldi	r24, 0x2B	; 43
     60e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_off>
					turn_on(FIRST_PART_LED);
     612:	8a e2       	ldi	r24, 0x2A	; 42
     614:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
					toggle_variation(); //only toggle variation at the end of the 2nd part
     618:	0e 94 af 09 	call	0x135e	; 0x135e <toggle_variation>
     61c:	06 c0       	rjmp	.+12     	; 0x62a <__vector_11+0x106>
				} else {
					turn_off(FIRST_PART_LED); 
     61e:	8a e2       	ldi	r24, 0x2A	; 42
     620:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_off>
					turn_on(SECOND_PART_LED);
     624:	8b e2       	ldi	r24, 0x2B	; 43
     626:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
				}
				sequencer.part_playing ^= 1 << 0;
     62a:	80 91 60 04 	lds	r24, 0x0460
     62e:	81 fb       	bst	r24, 1
     630:	99 27       	eor	r25, r25
     632:	90 f9       	bld	r25, 0
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	89 27       	eor	r24, r25
     638:	ef e5       	ldi	r30, 0x5F	; 95
     63a:	f4 e0       	ldi	r31, 0x04	; 4
     63c:	91 81       	ldd	r25, Z+1	; 0x01
     63e:	80 fb       	bst	r24, 0
     640:	91 f9       	bld	r25, 1
     642:	91 83       	std	Z+1, r25	; 0x01
     644:	02 c0       	rjmp	.+4      	; 0x64a <__vector_11+0x126>
			} else { 
	
				toggle_variation(); //no second part, so toggle variation 
     646:	0e 94 af 09 	call	0x135e	; 0x135e <toggle_variation>
				
			}
			//update step number
			sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
     64a:	80 91 60 04 	lds	r24, 0x0460
     64e:	82 fb       	bst	r24, 2
     650:	00 27       	eor	r16, r16
     652:	00 f9       	bld	r16, 0
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	03 57       	subi	r16, 0x73	; 115
     658:	1c 4f       	sbci	r17, 0xFC	; 252
     65a:	f8 01       	movw	r30, r16
     65c:	e0 53       	subi	r30, 0x30	; 48
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	80 91 5f 04 	lds	r24, 0x045F
     664:	8f 71       	andi	r24, 0x1F	; 31
     666:	80 83       	st	Z, r24
			update_step_led_mask();
     668:	0e 94 9f 04 	call	0x93e	; 0x93e <update_step_led_mask>
			
			//handle pre-scale change
			if (flag.pre_scale_change) {
     66c:	80 91 8c 03 	lds	r24, 0x038C
     670:	86 ff       	sbrs	r24, 6
     672:	0b c0       	rjmp	.+22     	; 0x68a <__vector_11+0x166>
				
				flag.pre_scale_change = 0;
     674:	8f 7b       	andi	r24, 0xBF	; 191
     676:	80 93 8c 03 	sts	0x038C, r24
				internal_clock.divider = pre_scale[pre_scale_index];
     67a:	e0 91 28 02 	lds	r30, 0x0228
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ec 5d       	subi	r30, 0xDC	; 220
     682:	fd 4f       	sbci	r31, 0xFD	; 253
     684:	80 81       	ld	r24, Z
     686:	80 93 8a 02 	sts	0x028A, r24
	
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     68a:	ea e8       	ldi	r30, 0x8A	; 138
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	80 81       	ld	r24, Z
     690:	86 95       	lsr	r24
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	98 13       	cpse	r25, r24
     696:	df c0       	rjmp	.+446    	; 0x856 <__vector_11+0x332>
		flag.half_step = 1;
     698:	80 91 8c 03 	lds	r24, 0x038C
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 93 8c 03 	sts	0x038C, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     6a2:	40 91 e4 01 	lds	r20, 0x01E4
     6a6:	30 91 e7 01 	lds	r19, 0x01E7
     6aa:	ef e7       	ldi	r30, 0x7F	; 127
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	83 2f       	mov	r24, r19
     6b0:	84 2b       	or	r24, r20
     6b2:	80 95       	com	r24
     6b4:	95 81       	ldd	r25, Z+5	; 0x05
     6b6:	89 23       	and	r24, r25
     6b8:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     6ba:	80 91 8e 03 	lds	r24, 0x038E
     6be:	81 ff       	sbrs	r24, 1
     6c0:	9c c0       	rjmp	.+312    	; 0x7fa <__vector_11+0x2d6>
	
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     6c2:	80 91 5b 04 	lds	r24, 0x045B
     6c6:	81 70       	andi	r24, 0x01	; 1
     6c8:	c8 2f       	mov	r28, r24
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	d8 2f       	mov	r29, r24
     6ce:	03 e6       	ldi	r16, 0x63	; 99
     6d0:	14 e0       	ldi	r17, 0x04	; 4
     6d2:	d8 01       	movw	r26, r16
     6d4:	8c 91       	ld	r24, X
     6d6:	93 e3       	ldi	r25, 0x33	; 51
     6d8:	9c 9f       	mul	r25, r28
     6da:	f0 01       	movw	r30, r0
     6dc:	9d 9f       	mul	r25, r29
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	e8 0f       	add	r30, r24
     6e4:	f1 1d       	adc	r31, r1
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ed 52       	subi	r30, 0x2D	; 45
     6ec:	fc 4f       	sbci	r31, 0xFC	; 252
     6ee:	90 81       	ld	r25, Z
     6f0:	81 81       	ldd	r24, Z+1	; 0x01
     6f2:	ef e7       	ldi	r30, 0x7F	; 127
     6f4:	f2 e0       	ldi	r31, 0x02	; 2
     6f6:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     6f8:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     6fa:	0e 94 90 04 	call	0x920	; 0x920 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     6fe:	d8 01       	movw	r26, r16
     700:	ec 91       	ld	r30, X
     702:	b7 e0       	ldi	r27, 0x07	; 7
     704:	eb 9f       	mul	r30, r27
     706:	f0 01       	movw	r30, r0
     708:	11 24       	eor	r1, r1
     70a:	e0 50       	subi	r30, 0x00	; 0
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	85 81       	ldd	r24, Z+5	; 0x05
     710:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
								
			switch (sequencer.variation_mode) {
     714:	20 91 5c 04 	lds	r18, 0x045C
     718:	21 30       	cpi	r18, 0x01	; 1
     71a:	49 f0       	breq	.+18     	; 0x72e <__vector_11+0x20a>
     71c:	18 f0       	brcs	.+6      	; 0x724 <__vector_11+0x200>
     71e:	22 30       	cpi	r18, 0x02	; 2
     720:	a1 f0       	breq	.+40     	; 0x74a <__vector_11+0x226>
     722:	20 c0       	rjmp	.+64     	; 0x764 <__vector_11+0x240>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     724:	80 91 e4 01 	lds	r24, 0x01E4
     728:	80 93 64 04 	sts	0x0464, r24
					break;					
     72c:	1b c0       	rjmp	.+54     	; 0x764 <__vector_11+0x240>
				case VAR_B:
					if (flag.variation_change == 1) {
     72e:	80 91 8c 03 	lds	r24, 0x038C
     732:	82 ff       	sbrs	r24, 2
     734:	05 c0       	rjmp	.+10     	; 0x740 <__vector_11+0x21c>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     736:	80 91 e4 01 	lds	r24, 0x01E4
     73a:	80 93 64 04 	sts	0x0464, r24
     73e:	12 c0       	rjmp	.+36     	; 0x764 <__vector_11+0x240>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     740:	80 91 e7 01 	lds	r24, 0x01E7
     744:	80 93 64 04 	sts	0x0464, r24
     748:	0d c0       	rjmp	.+26     	; 0x764 <__vector_11+0x240>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     74a:	80 91 5b 04 	lds	r24, 0x045B
     74e:	80 fd       	sbrc	r24, 0
     750:	05 c0       	rjmp	.+10     	; 0x75c <__vector_11+0x238>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     752:	80 91 e4 01 	lds	r24, 0x01E4
     756:	80 93 64 04 	sts	0x0464, r24
     75a:	04 c0       	rjmp	.+8      	; 0x764 <__vector_11+0x240>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     75c:	80 91 e7 01 	lds	r24, 0x01E7
     760:	80 93 64 04 	sts	0x0464, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     764:	80 91 8c 02 	lds	r24, 0x028C
     768:	83 70       	andi	r24, 0x03	; 3
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	02 97       	sbiw	r24, 0x02	; 2
     76e:	0c f0       	brlt	.+2      	; 0x772 <__vector_11+0x24e>
     770:	6b c0       	rjmp	.+214    	; 0x848 <__vector_11+0x324>
				
				if (flag.variation_change == 1) {
     772:	80 91 8c 03 	lds	r24, 0x038C
     776:	82 ff       	sbrs	r24, 2
     778:	2a c0       	rjmp	.+84     	; 0x7ce <__vector_11+0x2aa>
					
					switch (sequencer.variation_mode) {
     77a:	21 30       	cpi	r18, 0x01	; 1
     77c:	61 f0       	breq	.+24     	; 0x796 <__vector_11+0x272>
     77e:	18 f0       	brcs	.+6      	; 0x786 <__vector_11+0x262>
     780:	22 30       	cpi	r18, 0x02	; 2
     782:	89 f0       	breq	.+34     	; 0x7a6 <__vector_11+0x282>
     784:	24 c0       	rjmp	.+72     	; 0x7ce <__vector_11+0x2aa>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     786:	e4 e6       	ldi	r30, 0x64	; 100
     788:	f4 e0       	ldi	r31, 0x04	; 4
     78a:	90 91 e7 01 	lds	r25, 0x01E7
     78e:	80 81       	ld	r24, Z
     790:	89 2b       	or	r24, r25
     792:	80 83       	st	Z, r24
							break;
     794:	59 c0       	rjmp	.+178    	; 0x848 <__vector_11+0x324>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     796:	e4 e6       	ldi	r30, 0x64	; 100
     798:	f4 e0       	ldi	r31, 0x04	; 4
     79a:	90 91 e7 01 	lds	r25, 0x01E7
     79e:	80 81       	ld	r24, Z
     7a0:	89 2b       	or	r24, r25
     7a2:	80 83       	st	Z, r24
     7a4:	51 c0       	rjmp	.+162    	; 0x848 <__vector_11+0x324>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     7a6:	80 91 5b 04 	lds	r24, 0x045B
     7aa:	80 fd       	sbrc	r24, 0
     7ac:	08 c0       	rjmp	.+16     	; 0x7be <__vector_11+0x29a>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7ae:	e4 e6       	ldi	r30, 0x64	; 100
     7b0:	f4 e0       	ldi	r31, 0x04	; 4
     7b2:	90 91 e7 01 	lds	r25, 0x01E7
     7b6:	80 81       	ld	r24, Z
     7b8:	89 2b       	or	r24, r25
     7ba:	80 83       	st	Z, r24
     7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <__vector_11+0x2ae>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7be:	e4 e6       	ldi	r30, 0x64	; 100
     7c0:	f4 e0       	ldi	r31, 0x04	; 4
     7c2:	90 91 e4 01 	lds	r25, 0x01E4
     7c6:	80 81       	ld	r24, Z
     7c8:	89 2b       	or	r24, r25
     7ca:	80 83       	st	Z, r24
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <__vector_11+0x2ae>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     7ce:	22 30       	cpi	r18, 0x02	; 2
     7d0:	d9 f5       	brne	.+118    	; 0x848 <__vector_11+0x324>
						if (sequencer.variation == VAR_A) {
     7d2:	80 91 5b 04 	lds	r24, 0x045B
     7d6:	80 fd       	sbrc	r24, 0
     7d8:	08 c0       	rjmp	.+16     	; 0x7ea <__vector_11+0x2c6>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7da:	e4 e6       	ldi	r30, 0x64	; 100
     7dc:	f4 e0       	ldi	r31, 0x04	; 4
     7de:	90 91 e7 01 	lds	r25, 0x01E7
     7e2:	80 81       	ld	r24, Z
     7e4:	89 2b       	or	r24, r25
     7e6:	80 83       	st	Z, r24
     7e8:	2f c0       	rjmp	.+94     	; 0x848 <__vector_11+0x324>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7ea:	e4 e6       	ldi	r30, 0x64	; 100
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	90 91 e4 01 	lds	r25, 0x01E4
     7f2:	80 81       	ld	r24, Z
     7f4:	89 2b       	or	r24, r25
     7f6:	80 83       	st	Z, r24
     7f8:	27 c0       	rjmp	.+78     	; 0x848 <__vector_11+0x324>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     7fa:	ef e7       	ldi	r30, 0x7F	; 127
     7fc:	f2 e0       	ldi	r31, 0x02	; 2
     7fe:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     800:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     802:	20 91 5c 04 	lds	r18, 0x045C
     806:	21 30       	cpi	r18, 0x01	; 1
     808:	31 f0       	breq	.+12     	; 0x816 <__vector_11+0x2f2>
     80a:	10 f0       	brcs	.+4      	; 0x810 <__vector_11+0x2ec>
     80c:	22 30       	cpi	r18, 0x02	; 2
     80e:	61 f4       	brne	.+24     	; 0x828 <__vector_11+0x304>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     810:	40 93 64 04 	sts	0x0464, r20
				break;
     814:	09 c0       	rjmp	.+18     	; 0x828 <__vector_11+0x304>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     816:	30 93 64 04 	sts	0x0464, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     81a:	80 91 8c 02 	lds	r24, 0x028C
     81e:	83 70       	andi	r24, 0x03	; 3
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	02 97       	sbiw	r24, 0x02	; 2
     824:	8c f4       	brge	.+34     	; 0x848 <__vector_11+0x324>
     826:	0d c0       	rjmp	.+26     	; 0x842 <__vector_11+0x31e>
     828:	80 91 8c 02 	lds	r24, 0x028C
     82c:	83 70       	andi	r24, 0x03	; 3
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	02 97       	sbiw	r24, 0x02	; 2
     832:	54 f4       	brge	.+20     	; 0x848 <__vector_11+0x324>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     834:	22 30       	cpi	r18, 0x02	; 2
     836:	29 f4       	brne	.+10     	; 0x842 <__vector_11+0x31e>
     838:	e4 e6       	ldi	r30, 0x64	; 100
     83a:	f4 e0       	ldi	r31, 0x04	; 4
     83c:	80 81       	ld	r24, Z
     83e:	38 2b       	or	r19, r24
     840:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     848:	ef e7       	ldi	r30, 0x7F	; 127
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	90 91 64 04 	lds	r25, 0x0464
     850:	85 81       	ldd	r24, Z+5	; 0x05
     852:	89 2b       	or	r24, r25
     854:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	0f 90       	pop	r0
     87c:	1f 90       	pop	r1
     87e:	18 95       	reti

00000880 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9c 01       	movw	r18, r24
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	82 0f       	add	r24, r18
     88e:	93 1f       	adc	r25, r19
     890:	dc 01       	movw	r26, r24
     892:	a7 58       	subi	r26, 0x87	; 135
     894:	be 4f       	sbci	r27, 0xFE	; 254
     896:	2c 91       	ld	r18, X
     898:	e2 2f       	mov	r30, r18
     89a:	ef 70       	andi	r30, 0x0F	; 15
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e1 58       	subi	r30, 0x81	; 129
     8a0:	fd 4f       	sbci	r31, 0xFD	; 253
     8a2:	ec 01       	movw	r28, r24
     8a4:	c8 58       	subi	r28, 0x88	; 136
     8a6:	de 4f       	sbci	r29, 0xFE	; 254
     8a8:	30 81       	ld	r19, Z
     8aa:	88 81       	ld	r24, Y
     8ac:	83 2b       	or	r24, r19
     8ae:	80 83       	st	Z, r24
	led[led_index].state = 1;
     8b0:	82 2f       	mov	r24, r18
     8b2:	80 61       	ori	r24, 0x10	; 16
     8b4:	8c 93       	st	X, r24

}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <turn_off>:

void turn_off(uint8_t led_index) {
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9c 01       	movw	r18, r24
     8c4:	22 0f       	add	r18, r18
     8c6:	33 1f       	adc	r19, r19
     8c8:	82 0f       	add	r24, r18
     8ca:	93 1f       	adc	r25, r19
     8cc:	dc 01       	movw	r26, r24
     8ce:	a7 58       	subi	r26, 0x87	; 135
     8d0:	be 4f       	sbci	r27, 0xFE	; 254
     8d2:	2c 91       	ld	r18, X
     8d4:	e2 2f       	mov	r30, r18
     8d6:	ef 70       	andi	r30, 0x0F	; 15
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	e1 58       	subi	r30, 0x81	; 129
     8dc:	fd 4f       	sbci	r31, 0xFD	; 253
     8de:	ec 01       	movw	r28, r24
     8e0:	c8 58       	subi	r28, 0x88	; 136
     8e2:	de 4f       	sbci	r29, 0xFE	; 254
     8e4:	88 81       	ld	r24, Y
     8e6:	80 95       	com	r24
     8e8:	90 81       	ld	r25, Z
     8ea:	89 23       	and	r24, r25
     8ec:	80 83       	st	Z, r24
	led[led_index].state = 0;
     8ee:	82 2f       	mov	r24, r18
     8f0:	8f 7e       	andi	r24, 0xEF	; 239
     8f2:	8c 93       	st	X, r24
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	f9 01       	movw	r30, r18
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	2e 0f       	add	r18, r30
     906:	3f 1f       	adc	r19, r31
     908:	f9 01       	movw	r30, r18
     90a:	e7 58       	subi	r30, 0x87	; 135
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	90 81       	ld	r25, Z
     910:	94 ff       	sbrs	r25, 4
     912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0x1b>
		
		turn_off(led_index);
     914:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_off>
     918:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     91a:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
     91e:	08 95       	ret

00000920 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     920:	ef e7       	ldi	r30, 0x7F	; 127
     922:	f2 e0       	ldi	r31, 0x02	; 2
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     92a:	87 81       	ldd	r24, Z+7	; 0x07
     92c:	80 72       	andi	r24, 0x20	; 32
     92e:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     930:	83 81       	ldd	r24, Z+3	; 0x03
     932:	8f 70       	andi	r24, 0x0F	; 15
     934:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     936:	86 81       	ldd	r24, Z+6	; 0x06
     938:	8f 7c       	andi	r24, 0xCF	; 207
     93a:	86 83       	std	Z+6, r24	; 0x06
     93c:	08 95       	ret

0000093e <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     93e:	2f 92       	push	r2
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     962:	22 e2       	ldi	r18, 0x22	; 34
     964:	e3 ed       	ldi	r30, 0xD3	; 211
     966:	f3 e0       	ldi	r31, 0x03	; 3
     968:	df 01       	movw	r26, r30
     96a:	42 2f       	mov	r20, r18
     96c:	1d 92       	st	X+, r1
     96e:	4a 95       	dec	r20
     970:	e9 f7       	brne	.-6      	; 0x96c <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     972:	e9 e3       	ldi	r30, 0x39	; 57
     974:	f4 e0       	ldi	r31, 0x04	; 4
     976:	df 01       	movw	r26, r30
     978:	1d 92       	st	X+, r1
     97a:	2a 95       	dec	r18
     97c:	e9 f7       	brne	.-6      	; 0x978 <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     97e:	20 91 60 04 	lds	r18, 0x0460
     982:	22 fb       	bst	r18, 2
     984:	88 27       	eor	r24, r24
     986:	80 f9       	bld	r24, 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     98e:	6c 01       	movw	r12, r24
     990:	cc 0c       	add	r12, r12
     992:	dd 1c       	adc	r13, r13
     994:	cc 0c       	add	r12, r12
     996:	dd 1c       	adc	r13, r13
     998:	cc 0c       	add	r12, r12
     99a:	dd 1c       	adc	r13, r13
     99c:	cc 0c       	add	r12, r12
     99e:	dd 1c       	adc	r13, r13
     9a0:	ee 24       	eor	r14, r14
     9a2:	e3 94       	inc	r14
     9a4:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     9a6:	5c 01       	movw	r10, r24
     9a8:	b1 e2       	ldi	r27, 0x21	; 33
     9aa:	ab 0e       	add	r10, r27
     9ac:	b1 1c       	adc	r11, r1
     9ae:	95 01       	movw	r18, r10
     9b0:	22 0f       	add	r18, r18
     9b2:	33 1f       	adc	r19, r19
     9b4:	f9 01       	movw	r30, r18
     9b6:	e3 57       	subi	r30, 0x73	; 115
     9b8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ba:	5f 01       	movw	r10, r30
     9bc:	0f 2e       	mov	r0, r31
     9be:	f3 ef       	ldi	r31, 0xF3	; 243
     9c0:	8f 2e       	mov	r8, r31
     9c2:	f3 e0       	ldi	r31, 0x03	; 3
     9c4:	9f 2e       	mov	r9, r31
     9c6:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     9c8:	3c 01       	movw	r6, r24
     9ca:	f4 e5       	ldi	r31, 0x54	; 84
     9cc:	6f 0e       	add	r6, r31
     9ce:	71 1c       	adc	r7, r1
     9d0:	93 01       	movw	r18, r6
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	a9 01       	movw	r20, r18
     9d8:	43 57       	subi	r20, 0x73	; 115
     9da:	5c 4f       	sbci	r21, 0xFC	; 252
     9dc:	3a 01       	movw	r6, r20
     9de:	0f 2e       	mov	r0, r31
     9e0:	f9 e5       	ldi	r31, 0x59	; 89
     9e2:	4f 2e       	mov	r4, r31
     9e4:	f4 e0       	ldi	r31, 0x04	; 4
     9e6:	5f 2e       	mov	r5, r31
     9e8:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9ea:	83 57       	subi	r24, 0x73	; 115
     9ec:	9c 4f       	sbci	r25, 0xFC	; 252
     9ee:	1c 01       	movw	r2, r24
     9f0:	50 ed       	ldi	r21, 0xD0	; 208
     9f2:	25 0e       	add	r2, r21
     9f4:	31 1c       	adc	r3, r1
     9f6:	52 c0       	rjmp	.+164    	; 0xa9c <update_step_led_mask+0x15e>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9f8:	9e 01       	movw	r18, r28
     9fa:	08 2e       	mov	r0, r24
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <update_step_led_mask+0xc4>
     9fe:	36 95       	lsr	r19
     a00:	27 95       	ror	r18
     a02:	0a 94       	dec	r0
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <update_step_led_mask+0xc0>
     a06:	20 ff       	sbrs	r18, 0
     a08:	06 c0       	rjmp	.+12     	; 0xa16 <update_step_led_mask+0xd8>
     a0a:	20 81       	ld	r18, Z
     a0c:	31 81       	ldd	r19, Z+1	; 0x01
     a0e:	24 2b       	or	r18, r20
     a10:	35 2b       	or	r19, r21
     a12:	31 83       	std	Z+1, r19	; 0x01
     a14:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a16:	9b 01       	movw	r18, r22
     a18:	08 2e       	mov	r0, r24
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <update_step_led_mask+0xe2>
     a1c:	36 95       	lsr	r19
     a1e:	27 95       	ror	r18
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <update_step_led_mask+0xde>
     a24:	20 ff       	sbrs	r18, 0
     a26:	08 c0       	rjmp	.+16     	; 0xa38 <update_step_led_mask+0xfa>
     a28:	2d 91       	ld	r18, X+
     a2a:	3c 91       	ld	r19, X
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	24 2b       	or	r18, r20
     a30:	35 2b       	or	r19, r21
     a32:	11 96       	adiw	r26, 0x01	; 1
     a34:	3c 93       	st	X, r19
     a36:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	12 96       	adiw	r26, 0x02	; 2
     a3c:	32 96       	adiw	r30, 0x02	; 2
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	91 05       	cpc	r25, r1
     a42:	d1 f6       	brne	.-76     	; 0x9f8 <update_step_led_mask+0xba>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a44:	d5 01       	movw	r26, r10
     a46:	8d 91       	ld	r24, X+
     a48:	9c 91       	ld	r25, X
     a4a:	00 2e       	mov	r0, r16
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <update_step_led_mask+0x114>
     a4e:	96 95       	lsr	r25
     a50:	87 95       	ror	r24
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <update_step_led_mask+0x110>
     a56:	80 ff       	sbrs	r24, 0
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <update_step_led_mask+0x12a>
     a5a:	f4 01       	movw	r30, r8
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	84 2b       	or	r24, r20
     a62:	95 2b       	or	r25, r21
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a68:	d3 01       	movw	r26, r6
     a6a:	8d 91       	ld	r24, X+
     a6c:	9c 91       	ld	r25, X
     a6e:	00 2e       	mov	r0, r16
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <update_step_led_mask+0x138>
     a72:	96 95       	lsr	r25
     a74:	87 95       	ror	r24
     a76:	0a 94       	dec	r0
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <update_step_led_mask+0x134>
     a7a:	80 ff       	sbrs	r24, 0
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <update_step_led_mask+0x14e>
     a7e:	f2 01       	movw	r30, r4
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	48 2b       	or	r20, r24
     a86:	59 2b       	or	r21, r25
     a88:	51 83       	std	Z+1, r21	; 0x01
     a8a:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	d1 01       	movw	r26, r2
     a92:	8c 91       	ld	r24, X
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	80 17       	cp	r24, r16
     a98:	91 07       	cpc	r25, r17
     a9a:	fc f0       	brlt	.+62     	; 0xada <update_step_led_mask+0x19c>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a9c:	c6 01       	movw	r24, r12
     a9e:	80 0f       	add	r24, r16
     aa0:	91 1f       	adc	r25, r17
     aa2:	fc 01       	movw	r30, r24
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e1 57       	subi	r30, 0x71	; 113
     aaa:	fc 4f       	sbci	r31, 0xFC	; 252
     aac:	c0 81       	ld	r28, Z
     aae:	d1 81       	ldd	r29, Z+1	; 0x01
     ab0:	a7 01       	movw	r20, r14
     ab2:	00 2e       	mov	r0, r16
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <update_step_led_mask+0x17c>
     ab6:	44 0f       	add	r20, r20
     ab8:	55 1f       	adc	r21, r21
     aba:	0a 94       	dec	r0
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <update_step_led_mask+0x178>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	fc 01       	movw	r30, r24
     ac4:	eb 50       	subi	r30, 0x0B	; 11
     ac6:	fc 4f       	sbci	r31, 0xFC	; 252
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	a9 e3       	ldi	r26, 0x39	; 57
     ace:	b4 e0       	ldi	r27, 0x04	; 4
     ad0:	e3 ed       	ldi	r30, 0xD3	; 211
     ad2:	f3 e0       	ldi	r31, 0x03	; 3
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	8f cf       	rjmp	.-226    	; 0x9f8 <update_step_led_mask+0xba>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	7f 90       	pop	r7
     af4:	6f 90       	pop	r6
     af6:	5f 90       	pop	r5
     af8:	4f 90       	pop	r4
     afa:	3f 90       	pop	r3
     afc:	2f 90       	pop	r2
     afe:	08 95       	ret

00000b00 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     b00:	08 95       	ret

00000b02 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     b02:	08 95       	ret

00000b04 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     b04:	40 31       	cpi	r20, 0x10	; 16
     b06:	20 f4       	brcc	.+8      	; 0xb10 <note_on_event+0xc>
     b08:	62 2f       	mov	r22, r18
     b0a:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     b0c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     b10:	08 95       	ret

00000b12 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     b12:	0e 94 c3 06 	call	0xd86	; 0xd86 <update_tempo>
	read_switches();
     b16:	0e 94 04 0a 	call	0x1408	; 0x1408 <read_switches>
	check_start_stop_tap();
     b1a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <check_start_stop_tap>
	
	parse_switch_data();
     b1e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b22:	80 91 8d 03 	lds	r24, 0x038D
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	11 f4       	brne	.+4      	; 0xb2e <refresh+0x1c>
     b2a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <live_hits>
	update_mode();
     b2e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <update_mode>
	check_clear_switch();
     b32:	0e 94 81 0c 	call	0x1902	; 0x1902 <check_clear_switch>
	check_variation_switches();
     b36:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <check_variation_switches>
	update_prescale();
     b3a:	0e 94 46 08 	call	0x108c	; 0x108c <update_prescale>
	//update_variation();
	check_inst_switches();	
     b3e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <check_inst_switches>
	update_step_board();
     b42:	0e 94 f1 06 	call	0xde2	; 0xde2 <update_step_board>
	//update_step_led_mask();
	process_step();
     b46:	0e 94 0e 09 	call	0x121c	; 0x121c <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     b4a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <update_spi>
	PORTD &= ~(1<<TRIG);
     b4e:	5d 98       	cbi	0x0b, 5	; 11
     b50:	08 95       	ret

00000b52 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     b52:	8f e1       	ldi	r24, 0x1F	; 31
     b54:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     b58:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     b5c:	88 ed       	ldi	r24, 0xD8	; 216
     b5e:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     b62:	51 9a       	sbi	0x0a, 1	; 10
     b64:	08 95       	ret

00000b66 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     b92:	80 91 c6 00 	lds	r24, 0x00C6
     b96:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     b98:	ae 01       	movw	r20, r28
     b9a:	4f 5f       	subi	r20, 0xFF	; 255
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	8f e9       	ldi	r24, 0x9F	; 159
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     ba8:	0f 90       	pop	r0
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_20>:

ISR (USART0_TX_vect) {
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1


	
}
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti

00000be4 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     be4:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     be6:	8d b1       	in	r24, 0x0d	; 13
     be8:	8c 60       	ori	r24, 0x0C	; 12
     bea:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     bec:	87 b1       	in	r24, 0x07	; 7
     bee:	8e 60       	ori	r24, 0x0E	; 14
     bf0:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     bf2:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     bf4:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     bf6:	88 b1       	in	r24, 0x08	; 8
     bf8:	81 7f       	andi	r24, 0xF1	; 241
     bfa:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     bfc:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     bfe:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     c00:	80 e5       	ldi	r24, 0x50	; 80
     c02:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     c06:	ed ea       	ldi	r30, 0xAD	; 173
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     c16:	8d e1       	ldi	r24, 0x1D	; 29
     c18:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
	turn_on(FILL_MANUAL);
     c1c:	82 e2       	ldi	r24, 0x22	; 34
     c1e:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
	
	update_spi();
     c22:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     c26:	84 b5       	in	r24, 0x24	; 36
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     c2c:	81 ee       	ldi	r24, 0xE1	; 225
     c2e:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     c30:	8f e9       	ldi	r24, 0x9F	; 159
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     c38:	62 e8       	ldi	r22, 0x82	; 130
     c3a:	75 e0       	ldi	r23, 0x05	; 5
     c3c:	8f e9       	ldi	r24, 0x9F	; 159
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     c44:	60 e8       	ldi	r22, 0x80	; 128
     c46:	75 e0       	ldi	r23, 0x05	; 5
     c48:	8f e9       	ldi	r24, 0x9F	; 159
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     c50:	61 e8       	ldi	r22, 0x81	; 129
     c52:	75 e0       	ldi	r23, 0x05	; 5
     c54:	8f e9       	ldi	r24, 0x9F	; 159
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     c5c:	0e 94 a9 05 	call	0xb52	; 0xb52 <setup_midi_usart>
	
	setup_internal_clock();
     c60:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	internal_clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     c64:	ea e8       	ldi	r30, 0x8A	; 138
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     c6c:	11 e0       	ldi	r17, 0x01	; 1
     c6e:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     c70:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     c74:	80 91 8c 03 	lds	r24, 0x038C
	flag.pre_scale_change = 0;
     c78:	88 60       	ori	r24, 0x08	; 8
     c7a:	8f 7b       	andi	r24, 0xBF	; 191
     c7c:	80 93 8c 03 	sts	0x038C, r24
	sequencer.START = 0;
     c80:	ee e8       	ldi	r30, 0x8E	; 142
     c82:	f3 e0       	ldi	r31, 0x03	; 3
     c84:	80 81       	ld	r24, Z
     c86:	8d 7f       	andi	r24, 0xFD	; 253
     c88:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     c8a:	8f e0       	ldi	r24, 0x0F	; 15
     c8c:	80 93 5d 04 	sts	0x045D, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     c90:	80 e1       	ldi	r24, 0x10	; 16
     c92:	80 93 5e 04 	sts	0x045E, r24
	sequencer.step_num_new = 15;
     c96:	cf e5       	ldi	r28, 0x5F	; 95
     c98:	d4 e0       	ldi	r29, 0x04	; 4
     c9a:	88 81       	ld	r24, Y
     c9c:	80 7e       	andi	r24, 0xE0	; 224
     c9e:	8f 60       	ori	r24, 0x0F	; 15
     ca0:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     ca2:	10 92 5c 04 	sts	0x045C, r1
	turn_on(BASIC_VAR_A_LED);
     ca6:	84 e2       	ldi	r24, 0x24	; 36
     ca8:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
	sequencer.mode = FIRST_PART;
     cac:	10 93 8d 03 	sts	0x038D, r17

	sequencer.part_playing = FIRST;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     cb2:	8d 7f       	andi	r24, 0xFD	; 253
     cb4:	8b 7f       	andi	r24, 0xFB	; 251
     cb6:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     cb8:	8a e2       	ldi	r24, 0x2A	; 42
     cba:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
	turn_on(SCALE_3_LED);
     cbe:	87 e2       	ldi	r24, 0x27	; 39
     cc0:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
	sei(); //enable global interrupts	
     cc4:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     cc6:	8f e9       	ldi	r24, 0x9F	; 159
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <midi_device_process>
	
	refresh();		
     cce:	0e 94 89 05 	call	0xb12	; 0xb12 <refresh>

	
	}
     cd2:	f9 cf       	rjmp	.-14     	; 0xcc6 <main+0xe2>

00000cd4 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     cd4:	80 91 69 02 	lds	r24, 0x0269
     cd8:	86 ff       	sbrs	r24, 6
     cda:	54 c0       	rjmp	.+168    	; 0xd84 <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     cdc:	e9 e6       	ldi	r30, 0x69	; 105
     cde:	f2 e0       	ldi	r31, 0x02	; 2
     ce0:	8f 7b       	andi	r24, 0xBF	; 191
     ce2:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     ce4:	80 91 8e 03 	lds	r24, 0x038E
     ce8:	80 ff       	sbrs	r24, 0
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     cec:	80 91 23 02 	lds	r24, 0x0223
     cf0:	88 23       	and	r24, r24
     cf2:	21 f0       	breq	.+8      	; 0xcfc <update_mode+0x28>
     cf4:	81 50       	subi	r24, 0x01	; 1
     cf6:	80 93 23 02 	sts	0x0223, r24
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <update_mode+0x44>
     cfc:	85 e0       	ldi	r24, 0x05	; 5
     cfe:	80 93 23 02 	sts	0x0223, r24
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     d04:	80 91 23 02 	lds	r24, 0x0223
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	86 30       	cpi	r24, 0x06	; 6
     d0c:	19 f0       	breq	.+6      	; 0xd14 <update_mode+0x40>
     d0e:	80 93 23 02 	sts	0x0223, r24
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <update_mode+0x44>
     d14:	10 92 23 02 	sts	0x0223, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d18:	30 91 23 02 	lds	r19, 0x0223
     d1c:	e3 2f       	mov	r30, r19
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	e3 5e       	subi	r30, 0xE3	; 227
     d22:	fd 4f       	sbci	r31, 0xFD	; 253
     d24:	20 81       	ld	r18, Z
     d26:	20 93 8d 03 	sts	0x038D, r18
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
		spi_data[4] |= (1<< mode_index);
     d2a:	ef e7       	ldi	r30, 0x7F	; 127
     d2c:	f2 e0       	ldi	r31, 0x02	; 2
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <update_mode+0x64>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	3a 95       	dec	r19
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <update_mode+0x60>
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
     d3c:	94 81       	ldd	r25, Z+4	; 0x04
     d3e:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] |= (1<< mode_index);
     d40:	89 2b       	or	r24, r25
     d42:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	82 0f       	add	r24, r18
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	e0 f4       	brcc	.+56     	; 0xd84 <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     d4c:	e1 e0       	ldi	r30, 0x01	; 1
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	09 f4       	brne	.+2      	; 0xd54 <update_mode+0x80>
     d52:	e0 e0       	ldi	r30, 0x00	; 0
     d54:	af e5       	ldi	r26, 0x5F	; 95
     d56:	b4 e0       	ldi	r27, 0x04	; 4
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	8c 91       	ld	r24, X
     d5c:	11 97       	sbiw	r26, 0x01	; 1
     d5e:	e0 fb       	bst	r30, 0
     d60:	82 f9       	bld	r24, 2
     d62:	11 96       	adiw	r26, 0x01	; 1
     d64:	8c 93       	st	X, r24
     d66:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e3 57       	subi	r30, 0x73	; 115
     d6c:	fc 4f       	sbci	r31, 0xFC	; 252
     d6e:	e0 53       	subi	r30, 0x30	; 48
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	80 81       	ld	r24, Z
     d74:	98 2f       	mov	r25, r24
     d76:	9f 71       	andi	r25, 0x1F	; 31
     d78:	8c 91       	ld	r24, X
     d7a:	80 7e       	andi	r24, 0xE0	; 224
     d7c:	89 2b       	or	r24, r25
     d7e:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     d80:	0e 94 9f 04 	call	0x93e	; 0x93e <update_step_led_mask>
     d84:	08 95       	ret

00000d86 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     d86:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     d8a:	90 93 74 02 	sts	0x0274, r25
     d8e:	80 93 73 02 	sts	0x0273, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     d92:	20 91 71 02 	lds	r18, 0x0271
     d96:	30 91 72 02 	lds	r19, 0x0272
     d9a:	82 1b       	sub	r24, r18
     d9c:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	90 93 72 02 	sts	0x0272, r25
     dae:	80 93 71 02 	sts	0x0271, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     db2:	23 e6       	ldi	r18, 0x63	; 99
     db4:	34 e0       	ldi	r19, 0x04	; 4
     db6:	a9 01       	movw	r20, r18
     db8:	48 1b       	sub	r20, r24
     dba:	59 0b       	sbc	r21, r25
     dbc:	ca 01       	movw	r24, r20
     dbe:	ea e8       	ldi	r30, 0x8A	; 138
     dc0:	f2 e0       	ldi	r31, 0x02	; 2
     dc2:	54 83       	std	Z+4, r21	; 0x04
     dc4:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     dc6:	25 81       	ldd	r18, Z+5	; 0x05
     dc8:	36 81       	ldd	r19, Z+6	; 0x06
     dca:	42 17       	cp	r20, r18
     dcc:	53 07       	cpc	r21, r19
     dce:	11 f0       	breq	.+4      	; 0xdd4 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     dd0:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     dd4:	ea e8       	ldi	r30, 0x8A	; 138
     dd6:	f2 e0       	ldi	r31, 0x02	; 2
     dd8:	83 81       	ldd	r24, Z+3	; 0x03
     dda:	94 81       	ldd	r25, Z+4	; 0x04
     ddc:	96 83       	std	Z+6, r25	; 0x06
     dde:	85 83       	std	Z+5, r24	; 0x05
     de0:	08 95       	ret

00000de2 <update_step_board>:
			//turn_on(STEP_1_LED);
			
		}
}

void update_step_board() {
     de2:	2f 92       	push	r2
     de4:	3f 92       	push	r3
     de6:	4f 92       	push	r4
     de8:	5f 92       	push	r5
     dea:	6f 92       	push	r6
     dec:	7f 92       	push	r7
     dee:	8f 92       	push	r8
     df0:	9f 92       	push	r9
     df2:	af 92       	push	r10
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
	
	if (sequencer.START) {
     e06:	90 91 8e 03 	lds	r25, 0x038E
     e0a:	91 ff       	sbrs	r25, 1
     e0c:	2c c1       	rjmp	.+600    	; 0x1066 <update_step_board+0x284>
		
			switch (sequencer.mode) {		
     e0e:	80 91 8d 03 	lds	r24, 0x038D
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	08 f0       	brcs	.+2      	; 0xe1a <update_step_board+0x38>
     e18:	26 c1       	rjmp	.+588    	; 0x1066 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e1a:	92 ff       	sbrs	r25, 2
     e1c:	26 c0       	rjmp	.+76     	; 0xe6a <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     e1e:	80 91 29 02 	lds	r24, 0x0229
     e22:	86 fd       	sbrc	r24, 6
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <update_step_board+0x5a>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	fc 01       	movw	r30, r24
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e7 5d       	subi	r30, 0xD7	; 215
     e32:	fd 4f       	sbci	r31, 0xFD	; 253
     e34:	20 81       	ld	r18, Z
     e36:	26 ff       	sbrs	r18, 6
     e38:	13 c0       	rjmp	.+38     	; 0xe60 <update_step_board+0x7e>
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <update_step_board+0x5e>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     e40:	fc 01       	movw	r30, r24
     e42:	ee 0f       	add	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	e7 5d       	subi	r30, 0xD7	; 215
     e48:	fd 4f       	sbci	r31, 0xFD	; 253
     e4a:	90 81       	ld	r25, Z
     e4c:	9f 7b       	andi	r25, 0xBF	; 191
     e4e:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     e50:	ef e5       	ldi	r30, 0x5F	; 95
     e52:	f4 e0       	ldi	r31, 0x04	; 4
     e54:	8f 71       	andi	r24, 0x1F	; 31
     e56:	90 81       	ld	r25, Z
     e58:	90 7e       	andi	r25, 0xE0	; 224
     e5a:	89 2b       	or	r24, r25
     e5c:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     e5e:	03 c1       	rjmp	.+518    	; 0x1066 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	80 31       	cpi	r24, 0x10	; 16
     e64:	91 05       	cpc	r25, r1
     e66:	09 f7       	brne	.-62     	; 0xe2a <update_step_board+0x48>
     e68:	fe c0       	rjmp	.+508    	; 0x1066 <update_step_board+0x284>
					
					break; //break or return? or is it needed?
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     e6a:	80 91 63 04 	lds	r24, 0x0463
     e6e:	80 31       	cpi	r24, 0x10	; 16
     e70:	09 f0       	breq	.+2      	; 0xe74 <update_step_board+0x92>
     e72:	72 c0       	rjmp	.+228    	; 0xf58 <update_step_board+0x176>
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     e78:	c0 e6       	ldi	r28, 0x60	; 96
     e7a:	d4 e0       	ldi	r29, 0x04	; 4
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     e7c:	0f 2e       	mov	r0, r31
     e7e:	fb e5       	ldi	r31, 0x5B	; 91
     e80:	6f 2e       	mov	r6, r31
     e82:	f4 e0       	ldi	r31, 0x04	; 4
     e84:	7f 2e       	mov	r7, r31
     e86:	f0 2d       	mov	r31, r0
     e88:	cc 24       	eor	r12, r12
     e8a:	c3 94       	inc	r12
     e8c:	d1 2c       	mov	r13, r1
     e8e:	0f 2e       	mov	r0, r31
     e90:	f3 e3       	ldi	r31, 0x33	; 51
     e92:	bf 2e       	mov	r11, r31
     e94:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     e96:	0f 2e       	mov	r0, r31
     e98:	f3 e6       	ldi	r31, 0x63	; 99
     e9a:	4f 2e       	mov	r4, r31
     e9c:	f4 e0       	ldi	r31, 0x04	; 4
     e9e:	5f 2e       	mov	r5, r31
     ea0:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     ea2:	f8 01       	movw	r30, r16
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	e7 5d       	subi	r30, 0xD7	; 215
     eaa:	fd 4f       	sbci	r31, 0xFD	; 253
     eac:	80 81       	ld	r24, Z
     eae:	86 ff       	sbrs	r24, 6
     eb0:	4c c0       	rjmp	.+152    	; 0xf4a <update_step_board+0x168>
					
							
							button[i].state ^= button[i].state;
     eb2:	f8 01       	movw	r30, r16
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	e7 5d       	subi	r30, 0xD7	; 215
     eba:	fd 4f       	sbci	r31, 0xFD	; 253
     ebc:	8f 7b       	andi	r24, 0xBF	; 191
     ebe:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     ec0:	88 81       	ld	r24, Y
     ec2:	82 fb       	bst	r24, 2
     ec4:	88 24       	eor	r8, r8
     ec6:	80 f8       	bld	r8, 0
     ec8:	91 2c       	mov	r9, r1
     eca:	f4 01       	movw	r30, r8
     ecc:	e3 57       	subi	r30, 0x73	; 115
     ece:	fc 4f       	sbci	r31, 0xFC	; 252
     ed0:	e0 53       	subi	r30, 0x30	; 48
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	80 81       	ld	r24, Z
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	80 17       	cp	r24, r16
     eda:	91 07       	cpc	r25, r17
     edc:	b4 f1       	brlt	.+108    	; 0xf4a <update_step_board+0x168>
								toggle(i);
     ede:	80 2f       	mov	r24, r16
     ee0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     ee4:	d3 01       	movw	r26, r6
     ee6:	8c 91       	ld	r24, X
     ee8:	80 fb       	bst	r24, 0
     eea:	22 24       	eor	r2, r2
     eec:	20 f8       	bld	r2, 0
     eee:	31 2c       	mov	r3, r1
     ef0:	88 81       	ld	r24, Y
     ef2:	82 fb       	bst	r24, 2
     ef4:	ee 24       	eor	r14, r14
     ef6:	e0 f8       	bld	r14, 0
     ef8:	f1 2c       	mov	r15, r1
     efa:	b2 9c       	mul	r11, r2
     efc:	f0 01       	movw	r30, r0
     efe:	b3 9c       	mul	r11, r3
     f00:	f0 0d       	add	r31, r0
     f02:	11 24       	eor	r1, r1
     f04:	df 01       	movw	r26, r30
     f06:	ae 0d       	add	r26, r14
     f08:	bf 1d       	adc	r27, r15
     f0a:	aa 0f       	add	r26, r26
     f0c:	bb 1f       	adc	r27, r27
     f0e:	a1 53       	subi	r26, 0x31	; 49
     f10:	bc 4f       	sbci	r27, 0xFC	; 252
     f12:	2d 91       	ld	r18, X+
     f14:	3c 91       	ld	r19, X
     f16:	11 97       	sbiw	r26, 0x01	; 1
     f18:	c6 01       	movw	r24, r12
     f1a:	00 2e       	mov	r0, r16
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <update_step_board+0x140>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <update_step_board+0x13c>
     f26:	28 27       	eor	r18, r24
     f28:	39 27       	eor	r19, r25
     f2a:	2d 93       	st	X+, r18
     f2c:	3c 93       	st	X, r19
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f2e:	d2 01       	movw	r26, r4
     f30:	2c 91       	ld	r18, X
     f32:	e2 0f       	add	r30, r18
     f34:	f1 1d       	adc	r31, r1
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ed 52       	subi	r30, 0x2D	; 45
     f3c:	fc 4f       	sbci	r31, 0xFC	; 252
     f3e:	20 81       	ld	r18, Z
     f40:	31 81       	ldd	r19, Z+1	; 0x01
     f42:	82 27       	eor	r24, r18
     f44:	93 27       	eor	r25, r19
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
     f4a:	0f 5f       	subi	r16, 0xFF	; 255
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	00 31       	cpi	r16, 0x10	; 16
     f50:	11 05       	cpc	r17, r1
     f52:	09 f0       	breq	.+2      	; 0xf56 <update_step_board+0x174>
     f54:	a6 cf       	rjmp	.-180    	; 0xea2 <update_step_board+0xc0>
     f56:	87 c0       	rjmp	.+270    	; 0x1066 <update_step_board+0x284>
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
     f5c:	0f 2e       	mov	r0, r31
     f5e:	f0 e6       	ldi	r31, 0x60	; 96
     f60:	ef 2e       	mov	r14, r31
     f62:	f4 e0       	ldi	r31, 0x04	; 4
     f64:	ff 2e       	mov	r15, r31
     f66:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
     f68:	0f 2e       	mov	r0, r31
     f6a:	fb e5       	ldi	r31, 0x5B	; 91
     f6c:	6f 2e       	mov	r6, r31
     f6e:	f4 e0       	ldi	r31, 0x04	; 4
     f70:	7f 2e       	mov	r7, r31
     f72:	f0 2d       	mov	r31, r0
     f74:	0f 2e       	mov	r0, r31
     f76:	f3 e6       	ldi	r31, 0x63	; 99
     f78:	4f 2e       	mov	r4, r31
     f7a:	f4 e0       	ldi	r31, 0x04	; 4
     f7c:	5f 2e       	mov	r5, r31
     f7e:	f0 2d       	mov	r31, r0
     f80:	0f 2e       	mov	r0, r31
     f82:	f3 e3       	ldi	r31, 0x33	; 51
     f84:	3f 2e       	mov	r3, r31
     f86:	f0 2d       	mov	r31, r0
     f88:	88 24       	eor	r8, r8
     f8a:	83 94       	inc	r8
     f8c:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
     f8e:	fe 01       	movw	r30, r28
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	e7 5d       	subi	r30, 0xD7	; 215
     f96:	fd 4f       	sbci	r31, 0xFD	; 253
     f98:	80 81       	ld	r24, Z
     f9a:	86 ff       	sbrs	r24, 6
     f9c:	5f c0       	rjmp	.+190    	; 0x105c <update_step_board+0x27a>
						
						
						button[i].state ^= button[i].state;
     f9e:	fe 01       	movw	r30, r28
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	e7 5d       	subi	r30, 0xD7	; 215
     fa6:	fd 4f       	sbci	r31, 0xFD	; 253
     fa8:	8f 7b       	andi	r24, 0xBF	; 191
     faa:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
     fac:	f7 01       	movw	r30, r14
     fae:	80 81       	ld	r24, Z
     fb0:	82 fb       	bst	r24, 2
     fb2:	00 27       	eor	r16, r16
     fb4:	00 f9       	bld	r16, 0
     fb6:	10 e0       	ldi	r17, 0x00	; 0
     fb8:	f8 01       	movw	r30, r16
     fba:	e3 57       	subi	r30, 0x73	; 115
     fbc:	fc 4f       	sbci	r31, 0xFC	; 252
     fbe:	e0 53       	subi	r30, 0x30	; 48
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	8c 17       	cp	r24, r28
     fc8:	9d 07       	cpc	r25, r29
     fca:	0c f4       	brge	.+2      	; 0xfce <update_step_board+0x1ec>
     fcc:	47 c0       	rjmp	.+142    	; 0x105c <update_step_board+0x27a>
							toggle(i);
     fce:	8c 2f       	mov	r24, r28
     fd0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
     fd4:	d3 01       	movw	r26, r6
     fd6:	8c 91       	ld	r24, X
     fd8:	80 fb       	bst	r24, 0
     fda:	cc 24       	eor	r12, r12
     fdc:	c0 f8       	bld	r12, 0
     fde:	d1 2c       	mov	r13, r1
     fe0:	f7 01       	movw	r30, r14
     fe2:	80 81       	ld	r24, Z
     fe4:	82 fb       	bst	r24, 2
     fe6:	aa 24       	eor	r10, r10
     fe8:	a0 f8       	bld	r10, 0
     fea:	b1 2c       	mov	r11, r1
     fec:	d2 01       	movw	r26, r4
     fee:	6c 91       	ld	r22, X
     ff0:	c5 01       	movw	r24, r10
     ff2:	82 95       	swap	r24
     ff4:	92 95       	swap	r25
     ff6:	90 7f       	andi	r25, 0xF0	; 240
     ff8:	98 27       	eor	r25, r24
     ffa:	80 7f       	andi	r24, 0xF0	; 240
     ffc:	98 27       	eor	r25, r24
     ffe:	3c 9c       	mul	r3, r12
    1000:	90 01       	movw	r18, r0
    1002:	3d 9c       	mul	r3, r13
    1004:	30 0d       	add	r19, r0
    1006:	11 24       	eor	r1, r1
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	8c 0f       	add	r24, r28
    100e:	9d 1f       	adc	r25, r29
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	e1 57       	subi	r30, 0x71	; 113
    1018:	fc 4f       	sbci	r31, 0xFC	; 252
    101a:	c4 01       	movw	r24, r8
    101c:	06 2e       	mov	r0, r22
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <update_step_board+0x242>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <update_step_board+0x23e>
    1028:	40 81       	ld	r20, Z
    102a:	51 81       	ldd	r21, Z+1	; 0x01
    102c:	84 27       	eor	r24, r20
    102e:	95 27       	eor	r25, r21
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1034:	f9 01       	movw	r30, r18
    1036:	e6 0f       	add	r30, r22
    1038:	f1 1d       	adc	r31, r1
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	ed 52       	subi	r30, 0x2D	; 45
    1040:	fc 4f       	sbci	r31, 0xFC	; 252
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	94 01       	movw	r18, r8
    1048:	0c 2e       	mov	r0, r28
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <update_step_board+0x26e>
    104c:	22 0f       	add	r18, r18
    104e:	33 1f       	adc	r19, r19
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <update_step_board+0x26a>
    1054:	82 27       	eor	r24, r18
    1056:	93 27       	eor	r25, r19
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    105c:	21 96       	adiw	r28, 0x01	; 1
    105e:	c0 31       	cpi	r28, 0x10	; 16
    1060:	d1 05       	cpc	r29, r1
    1062:	09 f0       	breq	.+2      	; 0x1066 <update_step_board+0x284>
    1064:	94 cf       	rjmp	.-216    	; 0xf8e <update_step_board+0x1ac>
	} else {
		
		//handle changing selected pattern and rhythm. Not currently handling switches presses now when sequencer is stopped, which means they get added once sequencer starts
		
	}
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	3f 90       	pop	r3
    1088:	2f 90       	pop	r2
    108a:	08 95       	ret

0000108c <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    108c:	80 91 65 02 	lds	r24, 0x0265
    1090:	86 ff       	sbrs	r24, 6
    1092:	29 c0       	rjmp	.+82     	; 0x10e6 <update_prescale+0x5a>
    1094:	80 91 8e 03 	lds	r24, 0x038E
    1098:	80 ff       	sbrs	r24, 0
    109a:	25 c0       	rjmp	.+74     	; 0x10e6 <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    109c:	e5 e6       	ldi	r30, 0x65	; 101
    109e:	f2 e0       	ldi	r31, 0x02	; 2
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 7b       	andi	r24, 0xBF	; 191
    10a4:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    10a6:	80 91 28 02 	lds	r24, 0x0228
    10aa:	88 23       	and	r24, r24
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <update_prescale+0x2a>
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	80 93 28 02 	sts	0x0228, r24
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	80 93 28 02 	sts	0x0228, r24
					
		}
		flag.pre_scale_change = 1;
    10bc:	80 91 8c 03 	lds	r24, 0x038C
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	80 93 8c 03 	sts	0x038C, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    10c6:	ef e7       	ldi	r30, 0x7F	; 127
    10c8:	f2 e0       	ldi	r31, 0x02	; 2
    10ca:	20 91 28 02 	lds	r18, 0x0228
    10ce:	2e 5f       	subi	r18, 0xFE	; 254
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <update_prescale+0x4e>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	2a 95       	dec	r18
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    10de:	95 81       	ldd	r25, Z+5	; 0x05
    10e0:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    10e2:	89 2b       	or	r24, r25
    10e4:	85 83       	std	Z+5, r24	; 0x05
    10e6:	08 95       	ret

000010e8 <check_tap>:
	}
}

void check_tap(void) {
	
	if (flag.tap) {
    10e8:	80 91 8c 03 	lds	r24, 0x038C
    10ec:	88 23       	and	r24, r24
    10ee:	0c f0       	brlt	.+2      	; 0x10f2 <check_tap+0xa>
    10f0:	94 c0       	rjmp	.+296    	; 0x121a <check_tap+0x132>
		
		flag.tap = 0;
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	80 93 8c 03 	sts	0x038C, r24
		if (sequencer.current_inst == AC) {
    10f8:	40 91 63 04 	lds	r20, 0x0463
    10fc:	40 31       	cpi	r20, 0x10	; 16
    10fe:	69 f5       	brne	.+90     	; 0x115a <check_tap+0x72>
			sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] |= 1<<sequencer.current_step;	
    1100:	90 91 5b 04 	lds	r25, 0x045B
    1104:	80 91 60 04 	lds	r24, 0x0460
    1108:	82 fb       	bst	r24, 2
    110a:	66 27       	eor	r22, r22
    110c:	60 f9       	bld	r22, 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	91 70       	andi	r25, 0x01	; 1
    1112:	fb 01       	movw	r30, r22
    1114:	53 e3       	ldi	r21, 0x33	; 51
    1116:	95 9f       	mul	r25, r21
    1118:	e0 0d       	add	r30, r0
    111a:	f1 1d       	adc	r31, r1
    111c:	11 24       	eor	r1, r1
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	e1 53       	subi	r30, 0x31	; 49
    1124:	fc 4f       	sbci	r31, 0xFC	; 252
    1126:	90 91 5f 04 	lds	r25, 0x045F
    112a:	92 95       	swap	r25
    112c:	96 95       	lsr	r25
    112e:	97 70       	andi	r25, 0x07	; 7
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	88 0f       	add	r24, r24
    1134:	88 0f       	add	r24, r24
    1136:	88 0f       	add	r24, r24
    1138:	89 2b       	or	r24, r25
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	db 01       	movw	r26, r22
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <check_tap+0x5e>
    1142:	aa 0f       	add	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <check_tap+0x5a>
    114a:	cd 01       	movw	r24, r26
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	86 2b       	or	r24, r22
    1152:	97 2b       	or	r25, r23
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    1158:	33 c0       	rjmp	.+102    	; 0x11c0 <check_tap+0xd8>
		} else {
			sequencer.pattern[sequencer.variation].part[sequencer.part_editing][sequencer.current_step] |= 1<<sequencer.current_inst;
    115a:	50 91 5b 04 	lds	r21, 0x045B
    115e:	80 91 60 04 	lds	r24, 0x0460
    1162:	82 fb       	bst	r24, 2
    1164:	ee 27       	eor	r30, r30
    1166:	e0 f9       	bld	r30, 0
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	90 91 5f 04 	lds	r25, 0x045F
    116e:	92 95       	swap	r25
    1170:	96 95       	lsr	r25
    1172:	97 70       	andi	r25, 0x07	; 7
    1174:	81 70       	andi	r24, 0x01	; 1
    1176:	88 0f       	add	r24, r24
    1178:	88 0f       	add	r24, r24
    117a:	88 0f       	add	r24, r24
    117c:	89 2b       	or	r24, r25
    117e:	e2 95       	swap	r30
    1180:	f2 95       	swap	r31
    1182:	f0 7f       	andi	r31, 0xF0	; 240
    1184:	fe 27       	eor	r31, r30
    1186:	e0 7f       	andi	r30, 0xF0	; 240
    1188:	fe 27       	eor	r31, r30
    118a:	95 2f       	mov	r25, r21
    118c:	91 70       	andi	r25, 0x01	; 1
    118e:	b3 e3       	ldi	r27, 0x33	; 51
    1190:	9b 9f       	mul	r25, r27
    1192:	e0 0d       	add	r30, r0
    1194:	f1 1d       	adc	r31, r1
    1196:	11 24       	eor	r1, r1
    1198:	e8 0f       	add	r30, r24
    119a:	f1 1d       	adc	r31, r1
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	e1 57       	subi	r30, 0x71	; 113
    11a2:	fc 4f       	sbci	r31, 0xFC	; 252
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	04 2e       	mov	r0, r20
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <check_tap+0xc8>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <check_tap+0xc4>
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	86 2b       	or	r24, r22
    11ba:	97 2b       	or	r25, r23
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
		}
		sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= 1<<sequencer.current_step;
    11c0:	80 91 5b 04 	lds	r24, 0x045B
    11c4:	28 2f       	mov	r18, r24
    11c6:	21 70       	andi	r18, 0x01	; 1
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	83 e3       	ldi	r24, 0x33	; 51
    11cc:	82 9f       	mul	r24, r18
    11ce:	f0 01       	movw	r30, r0
    11d0:	83 9f       	mul	r24, r19
    11d2:	f0 0d       	add	r31, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	e4 0f       	add	r30, r20
    11d8:	f1 1d       	adc	r31, r1
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	ed 52       	subi	r30, 0x2D	; 45
    11e0:	fc 4f       	sbci	r31, 0xFC	; 252
    11e2:	80 91 5f 04 	lds	r24, 0x045F
    11e6:	98 2f       	mov	r25, r24
    11e8:	92 95       	swap	r25
    11ea:	96 95       	lsr	r25
    11ec:	97 70       	andi	r25, 0x07	; 7
    11ee:	80 91 60 04 	lds	r24, 0x0460
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	88 0f       	add	r24, r24
    11f6:	88 0f       	add	r24, r24
    11f8:	88 0f       	add	r24, r24
    11fa:	89 2b       	or	r24, r25
    11fc:	21 e0       	ldi	r18, 0x01	; 1
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <check_tap+0x120>
    1204:	44 0f       	add	r20, r20
    1206:	55 1f       	adc	r21, r21
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <check_tap+0x11c>
    120c:	ca 01       	movw	r24, r20
    120e:	20 81       	ld	r18, Z
    1210:	31 81       	ldd	r19, Z+1	; 0x01
    1212:	82 2b       	or	r24, r18
    1214:	93 2b       	or	r25, r19
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    121a:	08 95       	ret

0000121c <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
    1224:	80 91 8e 03 	lds	r24, 0x038E
    1228:	81 ff       	sbrs	r24, 1
    122a:	8d c0       	rjmp	.+282    	; 0x1346 <process_step+0x12a>
			
			//if (sequencer.part_playing == FIRST || sequencer.part_playing == SECOND) {	
				if (flag.next_step) {
    122c:	80 91 8c 03 	lds	r24, 0x038C
    1230:	80 ff       	sbrs	r24, 0
    1232:	90 c0       	rjmp	.+288    	; 0x1354 <process_step+0x138>
					flag.next_step = 0;
    1234:	8e 7f       	andi	r24, 0xFE	; 254
    1236:	80 93 8c 03 	sts	0x038C, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
    123a:	88 70       	andi	r24, 0x08	; 8
    123c:	88 23       	and	r24, r24
    123e:	f1 f3       	breq	.-4      	; 0x123c <process_step+0x20>
					
					check_tap();
    1240:	0e 94 74 08 	call	0x10e8	; 0x10e8 <check_tap>
					PORTD |= (1<<TRIG);
    1244:	5d 9a       	sbi	0x0b, 5	; 11
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
    1246:	80 91 60 04 	lds	r24, 0x0460
    124a:	82 fb       	bst	r24, 2
    124c:	99 27       	eor	r25, r25
    124e:	90 f9       	bld	r25, 0
    1250:	86 95       	lsr	r24
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	98 13       	cpse	r25, r24
    1256:	37 c0       	rjmp	.+110    	; 0x12c6 <process_step+0xaa>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    1258:	80 91 5f 04 	lds	r24, 0x045F
    125c:	98 2f       	mov	r25, r24
    125e:	92 95       	swap	r25
    1260:	96 95       	lsr	r25
    1262:	97 70       	andi	r25, 0x07	; 7
    1264:	80 91 60 04 	lds	r24, 0x0460
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	88 0f       	add	r24, r24
    126c:	88 0f       	add	r24, r24
    126e:	88 0f       	add	r24, r24
    1270:	89 2b       	or	r24, r25
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <process_step+0x60>
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <process_step+0x5c>
    1280:	80 91 5b 04 	lds	r24, 0x045B
    1284:	08 2f       	mov	r16, r24
    1286:	01 70       	andi	r16, 0x01	; 1
    1288:	10 e0       	ldi	r17, 0x00	; 0
    128a:	80 91 63 04 	lds	r24, 0x0463
    128e:	93 e3       	ldi	r25, 0x33	; 51
    1290:	90 9f       	mul	r25, r16
    1292:	f0 01       	movw	r30, r0
    1294:	91 9f       	mul	r25, r17
    1296:	f0 0d       	add	r31, r0
    1298:	11 24       	eor	r1, r1
    129a:	e8 0f       	add	r30, r24
    129c:	f1 1d       	adc	r31, r1
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	ed 52       	subi	r30, 0x2D	; 45
    12a4:	fc 4f       	sbci	r31, 0xFC	; 252
    12a6:	90 81       	ld	r25, Z
    12a8:	81 81       	ldd	r24, Z+1	; 0x01
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    12aa:	ef e7       	ldi	r30, 0x7F	; 127
    12ac:	f2 e0       	ldi	r31, 0x02	; 2
    12ae:	49 2f       	mov	r20, r25
    12b0:	42 23       	and	r20, r18
    12b2:	40 95       	com	r20
					check_tap();
					PORTD |= (1<<TRIG);
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    12b4:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    12b6:	94 23       	and	r25, r20
    12b8:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    12ba:	98 2f       	mov	r25, r24
    12bc:	93 23       	and	r25, r19
    12be:	90 95       	com	r25
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
    12c0:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    12c2:	89 23       	and	r24, r25
    12c4:	80 83       	st	Z, r24
					} else {
						
						
					}

					trigger_step();
    12c6:	0e 94 31 01 	call	0x262	; 0x262 <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
    12ca:	90 91 5b 04 	lds	r25, 0x045B
    12ce:	80 91 60 04 	lds	r24, 0x0460
    12d2:	81 fb       	bst	r24, 1
    12d4:	22 27       	eor	r18, r18
    12d6:	20 f9       	bld	r18, 0
    12d8:	c2 2f       	mov	r28, r18
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	d4 2f       	mov	r29, r20
    12de:	91 70       	andi	r25, 0x01	; 1
    12e0:	53 e3       	ldi	r21, 0x33	; 51
    12e2:	95 9f       	mul	r25, r21
    12e4:	c0 0d       	add	r28, r0
    12e6:	d1 1d       	adc	r29, r1
    12e8:	11 24       	eor	r1, r1
    12ea:	cc 0f       	add	r28, r28
    12ec:	dd 1f       	adc	r29, r29
    12ee:	c1 53       	subi	r28, 0x31	; 49
    12f0:	dc 4f       	sbci	r29, 0xFC	; 252
    12f2:	90 91 5f 04 	lds	r25, 0x045F
    12f6:	92 95       	swap	r25
    12f8:	96 95       	lsr	r25
    12fa:	97 70       	andi	r25, 0x07	; 7
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	88 0f       	add	r24, r24
    1300:	88 0f       	add	r24, r24
    1302:	88 0f       	add	r24, r24
    1304:	89 2b       	or	r24, r25
    1306:	28 81       	ld	r18, Y
    1308:	39 81       	ldd	r19, Y+1	; 0x01
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <process_step+0xf6>
    130e:	56 95       	lsr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <process_step+0xf2>
    1316:	40 ff       	sbrs	r20, 0
    1318:	08 c0       	rjmp	.+16     	; 0x132a <process_step+0x10e>
						spi_data[8] |= 1<<ACCENT;
    131a:	ef e7       	ldi	r30, 0x7F	; 127
    131c:	f2 e0       	ldi	r31, 0x02	; 2
    131e:	80 85       	ldd	r24, Z+8	; 0x08
    1320:	81 60       	ori	r24, 0x01	; 1
    1322:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
    1324:	84 e1       	ldi	r24, 0x14	; 20
    1326:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
    132a:	ee e6       	ldi	r30, 0x6E	; 110
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	82 60       	ori	r24, 0x02	; 2
    1332:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
    1334:	85 b5       	in	r24, 0x25	; 37
    1336:	83 60       	ori	r24, 0x03	; 3
    1338:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
    133a:	80 91 8c 03 	lds	r24, 0x038C
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	80 93 8c 03 	sts	0x038C, r24
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <process_step+0x138>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
    1346:	80 91 8c 03 	lds	r24, 0x038C
    134a:	80 ff       	sbrs	r24, 0
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <process_step+0x138>
			
			flag.next_step = 0;
    134e:	8e 7f       	andi	r24, 0xFE	; 254
    1350:	80 93 8c 03 	sts	0x038C, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <toggle_variation>:
	
}

void toggle_variation(void) {
	
	if (flag.variation_change == 1) {
    135e:	80 91 8c 03 	lds	r24, 0x038C
    1362:	82 ff       	sbrs	r24, 2
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <toggle_variation+0x34>
		flag.variation_change = 0;
    1366:	8b 7f       	andi	r24, 0xFB	; 251
    1368:	80 93 8c 03 	sts	0x038C, r24
		switch (sequencer.variation_mode) {
    136c:	80 91 5c 04 	lds	r24, 0x045C
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	49 f0       	breq	.+18     	; 0x1386 <toggle_variation+0x28>
    1374:	10 f0       	brcs	.+4      	; 0x137a <toggle_variation+0x1c>
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	c1 f4       	brne	.+48     	; 0x13aa <toggle_variation+0x4c>
					
			case VAR_A: case VAR_AB:
			sequencer.variation = VAR_A;
    137a:	eb e5       	ldi	r30, 0x5B	; 91
    137c:	f4 e0       	ldi	r31, 0x04	; 4
    137e:	80 81       	ld	r24, Z
    1380:	8e 7f       	andi	r24, 0xFE	; 254
    1382:	80 83       	st	Z, r24
			break;
    1384:	08 95       	ret
			case VAR_B:
			sequencer.variation = VAR_B;
    1386:	eb e5       	ldi	r30, 0x5B	; 91
    1388:	f4 e0       	ldi	r31, 0x04	; 4
    138a:	80 81       	ld	r24, Z
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	80 83       	st	Z, r24
			break;
    1390:	08 95       	ret
					
					
		}
				
		} else if (sequencer.variation_mode == VAR_AB) {
    1392:	80 91 5c 04 	lds	r24, 0x045C
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	41 f4       	brne	.+16     	; 0x13aa <toggle_variation+0x4c>
				
		sequencer.variation ^= 1<<0; //toggle state
    139a:	eb e5       	ldi	r30, 0x5B	; 91
    139c:	f4 e0       	ldi	r31, 0x04	; 4
    139e:	80 81       	ld	r24, Z
    13a0:	98 2f       	mov	r25, r24
    13a2:	90 95       	com	r25
    13a4:	90 fb       	bst	r25, 0
    13a6:	80 f9       	bld	r24, 0
    13a8:	80 83       	st	Z, r24
    13aa:	08 95       	ret

000013ac <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    13ac:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    13b0:	ed ea       	ldi	r30, 0xAD	; 173
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 23       	and	r24, r24
    13b8:	ec f7       	brge	.-6      	; 0x13b4 <spi_shift_byte+0x8>
	return SPDR1;
    13ba:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    13be:	08 95       	ret

000013c0 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    13c4:	cf e7       	ldi	r28, 0x7F	; 127
    13c6:	d2 e0       	ldi	r29, 0x02	; 2
    13c8:	88 81       	ld	r24, Y
    13ca:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    13f2:	8f 81       	ldd	r24, Y+7	; 0x07
    13f4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    13f8:	88 85       	ldd	r24, Y+8	; 0x08
    13fa:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    13fe:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    1400:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <read_switches>:

void read_switches(void) { //reads switch data
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    140c:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
    1414:	ca e7       	ldi	r28, 0x7A	; 122
    1416:	d2 e0       	ldi	r29, 0x02	; 2
    1418:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
    1420:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
    1428:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
    1430:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 d6 09 	call	0x13ac	; 0x13ac <spi_shift_byte>
    1438:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    143a:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    143c:	28 81       	ld	r18, Y
    143e:	92 2f       	mov	r25, r18
    1440:	96 95       	lsr	r25
    1442:	ee e8       	ldi	r30, 0x8E	; 142
    1444:	f3 e0       	ldi	r31, 0x03	; 3
    1446:	30 81       	ld	r19, Z
    1448:	90 fb       	bst	r25, 0
    144a:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	49 2f       	mov	r20, r25
    1450:	42 95       	swap	r20
    1452:	4f 70       	andi	r20, 0x0F	; 15
    1454:	40 fb       	bst	r20, 0
    1456:	32 f9       	bld	r19, 2
    1458:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    145a:	e5 e7       	ldi	r30, 0x75	; 117
    145c:	f2 e0       	ldi	r31, 0x02	; 2
    145e:	30 81       	ld	r19, Z
    1460:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    1462:	32 27       	eor	r19, r18
    1464:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1466:	23 23       	and	r18, r19
    1468:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    146a:	31 81       	ldd	r19, Z+1	; 0x01
    146c:	29 81       	ldd	r18, Y+1	; 0x01
    146e:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    1470:	32 27       	eor	r19, r18
    1472:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    1474:	23 23       	and	r18, r19
    1476:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1478:	22 81       	ldd	r18, Z+2	; 0x02
    147a:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    147c:	29 27       	eor	r18, r25
    147e:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    1480:	92 23       	and	r25, r18
    1482:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    1484:	23 81       	ldd	r18, Z+3	; 0x03
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    148a:	29 27       	eor	r18, r25
    148c:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    148e:	92 23       	and	r25, r18
    1490:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    1492:	94 81       	ldd	r25, Z+4	; 0x04
    1494:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1496:	98 27       	eor	r25, r24
    1498:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    149a:	89 23       	and	r24, r25
    149c:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    14a8:	da 01       	movw	r26, r20
    14aa:	aa 0f       	add	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	a7 5d       	subi	r26, 0xD7	; 215
    14b0:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    14b2:	8c 91       	ld	r24, X
    14b4:	e8 2f       	mov	r30, r24
    14b6:	e6 95       	lsr	r30
    14b8:	e6 95       	lsr	r30
    14ba:	e6 95       	lsr	r30
    14bc:	e7 70       	andi	r30, 0x07	; 7
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	e6 58       	subi	r30, 0x86	; 134
    14c2:	fd 4f       	sbci	r31, 0xFD	; 253
    14c4:	20 81       	ld	r18, Z
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	98 2f       	mov	r25, r24
    14ca:	97 70       	andi	r25, 0x07	; 7
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <parse_switch_data+0x2e>
    14ce:	35 95       	asr	r19
    14d0:	27 95       	ror	r18
    14d2:	9a 95       	dec	r25
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <parse_switch_data+0x2a>
    14d6:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    14d8:	86 fb       	bst	r24, 6
    14da:	99 27       	eor	r25, r25
    14dc:	90 f9       	bld	r25, 0
    14de:	29 27       	eor	r18, r25
    14e0:	20 fb       	bst	r18, 0
    14e2:	86 f9       	bld	r24, 6
    14e4:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    14e6:	4f 5f       	subi	r20, 0xFF	; 255
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	43 32       	cpi	r20, 0x23	; 35
    14ec:	51 05       	cpc	r21, r1
    14ee:	e1 f6       	brne	.-72     	; 0x14a8 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    14f0:	08 95       	ret

000014f2 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    14f2:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    14f4:	80 91 88 02 	lds	r24, 0x0288
    14f8:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    14fa:	89 27       	eor	r24, r25
    14fc:	80 93 88 02 	sts	0x0288, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    1500:	89 23       	and	r24, r25
    1502:	80 93 89 02 	sts	0x0289, r24
	uint8_t start_state = sequencer.START;
    1506:	ee e8       	ldi	r30, 0x8E	; 142
    1508:	f3 e0       	ldi	r31, 0x03	; 3
    150a:	90 81       	ld	r25, Z
    150c:	91 fb       	bst	r25, 1
    150e:	22 27       	eor	r18, r18
    1510:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    1512:	86 95       	lsr	r24
    1514:	82 27       	eor	r24, r18
    1516:	80 fb       	bst	r24, 0
    1518:	91 f9       	bld	r25, 1
    151a:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    151c:	91 ff       	sbrs	r25, 1
    151e:	50 c0       	rjmp	.+160    	; 0x15c0 <check_start_stop_tap+0xce>
    1520:	21 11       	cpse	r18, r1
    1522:	3c c0       	rjmp	.+120    	; 0x159c <check_start_stop_tap+0xaa>
		
		sequencer.current_step = 0;
    1524:	ef e5       	ldi	r30, 0x5F	; 95
    1526:	f4 e0       	ldi	r31, 0x04	; 4
    1528:	80 81       	ld	r24, Z
    152a:	8f 71       	andi	r24, 0x1F	; 31
    152c:	80 83       	st	Z, r24
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	8e 7f       	andi	r24, 0xFE	; 254
    1532:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
    1534:	80 91 8c 03 	lds	r24, 0x038C
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1538:	10 92 8b 02 	sts	0x028B, r1
		
		flag.variation_change = 0;
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	8b 7f       	andi	r24, 0xFB	; 251
    1540:	80 93 8c 03 	sts	0x038C, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1544:	80 91 5c 04 	lds	r24, 0x045C
    1548:	8d 7f       	andi	r24, 0xFD	; 253
    154a:	31 f4       	brne	.+12     	; 0x1558 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    154c:	eb e5       	ldi	r30, 0x5B	; 91
    154e:	f4 e0       	ldi	r31, 0x04	; 4
    1550:	80 81       	ld	r24, Z
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	80 83       	st	Z, r24
    1556:	22 c0       	rjmp	.+68     	; 0x159c <check_start_stop_tap+0xaa>
		} else {
			
			sequencer.variation = VAR_B;
    1558:	eb e5       	ldi	r30, 0x5B	; 91
    155a:	f4 e0       	ldi	r31, 0x04	; 4
    155c:	80 81       	ld	r24, Z
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	80 83       	st	Z, r24
    1562:	1c c0       	rjmp	.+56     	; 0x159c <check_start_stop_tap+0xaa>
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		if (sequencer.part_playing == SECOND) { //reset part playing
    1564:	80 91 60 04 	lds	r24, 0x0460
    1568:	81 ff       	sbrs	r24, 1
    156a:	0b c0       	rjmp	.+22     	; 0x1582 <check_start_stop_tap+0x90>
			sequencer.part_playing = FIRST;
    156c:	ef e5       	ldi	r30, 0x5F	; 95
    156e:	f4 e0       	ldi	r31, 0x04	; 4
    1570:	81 81       	ldd	r24, Z+1	; 0x01
    1572:	8d 7f       	andi	r24, 0xFD	; 253
    1574:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
    1576:	8b e2       	ldi	r24, 0x2B	; 43
    1578:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_off>
			turn_on (FIRST_PART_LED);	
    157c:	8a e2       	ldi	r24, 0x2A	; 42
    157e:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
			
		}
		turn_off_all_inst_leds();
    1582:	0e 94 90 04 	call	0x920	; 0x920 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1586:	e0 91 63 04 	lds	r30, 0x0463
    158a:	87 e0       	ldi	r24, 0x07	; 7
    158c:	e8 9f       	mul	r30, r24
    158e:	f0 01       	movw	r30, r0
    1590:	11 24       	eor	r1, r1
    1592:	e0 50       	subi	r30, 0x00	; 0
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	85 81       	ldd	r24, Z+5	; 0x05
    1598:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
		
	} 
	
	if ((sequencer.START && (current_start_stop_tap_state >> TAP) &1)) {
    159c:	80 91 8e 03 	lds	r24, 0x038E
    15a0:	81 ff       	sbrs	r24, 1
    15a2:	10 c0       	rjmp	.+32     	; 0x15c4 <check_start_stop_tap+0xd2>
    15a4:	80 91 89 02 	lds	r24, 0x0289
    15a8:	82 ff       	sbrs	r24, 2
    15aa:	0c c0       	rjmp	.+24     	; 0x15c4 <check_start_stop_tap+0xd2>
		
		current_start_stop_tap_state ^= (1<<TAP); //toggle tap switch bit
    15ac:	94 e0       	ldi	r25, 0x04	; 4
    15ae:	89 27       	eor	r24, r25
    15b0:	80 93 89 02 	sts	0x0289, r24
		flag.tap = 1;
    15b4:	80 91 8c 03 	lds	r24, 0x038C
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	80 93 8c 03 	sts	0x038C, r24
    15be:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    15c0:	21 30       	cpi	r18, 0x01	; 1
    15c2:	81 f2       	breq	.-96     	; 0x1564 <check_start_stop_tap+0x72>
    15c4:	08 95       	ret

000015c6 <check_inst_switches>:
		
	}
	
}
	
void check_inst_switches(void) {
    15c6:	2f 92       	push	r2
    15c8:	3f 92       	push	r3
    15ca:	4f 92       	push	r4
    15cc:	5f 92       	push	r5
    15ce:	6f 92       	push	r6
    15d0:	7f 92       	push	r7
    15d2:	8f 92       	push	r8
    15d4:	9f 92       	push	r9
    15d6:	af 92       	push	r10
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	0f 2e       	mov	r0, r31
    15ec:	f3 e0       	ldi	r31, 0x03	; 3
    15ee:	af 2e       	mov	r10, r31
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	bf 2e       	mov	r11, r31
    15f4:	f0 2d       	mov	r31, r0
    15f6:	0f 2e       	mov	r0, r31
    15f8:	f5 e0       	ldi	r31, 0x05	; 5
    15fa:	8f 2e       	mov	r8, r31
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	9f 2e       	mov	r9, r31
    1600:	f0 2d       	mov	r31, r0
    1602:	0f 2e       	mov	r0, r31
    1604:	f9 e0       	ldi	r31, 0x09	; 9
    1606:	cf 2e       	mov	r12, r31
    1608:	d1 2c       	mov	r13, r1
    160a:	f0 2d       	mov	r31, r0
    160c:	0f 2e       	mov	r0, r31
    160e:	f2 e1       	ldi	r31, 0x12	; 18
    1610:	ef 2e       	mov	r14, r31
    1612:	f1 2c       	mov	r15, r1
    1614:	f0 2d       	mov	r31, r0
    1616:	c1 e1       	ldi	r28, 0x11	; 17
    1618:	d0 e0       	ldi	r29, 0x00	; 0
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	10 e0       	ldi	r17, 0x00	; 0
		
		if (button[i].state) {
			
			button[i].state ^= button[i].state; //toggle state
			
			if (sequencer.SHIFT) {
    161e:	0f 2e       	mov	r0, r31
    1620:	fe e8       	ldi	r31, 0x8E	; 142
    1622:	6f 2e       	mov	r6, r31
    1624:	f3 e0       	ldi	r31, 0x03	; 3
    1626:	7f 2e       	mov	r7, r31
    1628:	f0 2d       	mov	r31, r0
    162a:	0f c0       	rjmp	.+30     	; 0x164a <check_inst_switches+0x84>
    162c:	0f 5f       	subi	r16, 0xFF	; 255
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	21 96       	adiw	r28, 0x01	; 1
    1632:	2f ef       	ldi	r18, 0xFF	; 255
    1634:	e2 1a       	sub	r14, r18
    1636:	f2 0a       	sbc	r15, r18
    1638:	87 e0       	ldi	r24, 0x07	; 7
    163a:	a8 0e       	add	r10, r24
    163c:	b1 1c       	adc	r11, r1
    163e:	e7 e0       	ldi	r30, 0x07	; 7
    1640:	8e 0e       	add	r8, r30
    1642:	91 1c       	adc	r9, r1
    1644:	ff ef       	ldi	r31, 0xFF	; 255
    1646:	cf 1a       	sub	r12, r31
    1648:	df 0a       	sbc	r13, r31
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    164a:	fe 01       	movw	r30, r28
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	e7 5d       	subi	r30, 0xD7	; 215
    1652:	fd 4f       	sbci	r31, 0xFD	; 253
    1654:	80 81       	ld	r24, Z
    1656:	86 ff       	sbrs	r24, 6
    1658:	fe c0       	rjmp	.+508    	; 0x1856 <check_inst_switches+0x290>
			
			button[i].state ^= button[i].state; //toggle state
    165a:	fe 01       	movw	r30, r28
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	e7 5d       	subi	r30, 0xD7	; 215
    1662:	fd 4f       	sbci	r31, 0xFD	; 253
    1664:	8f 7b       	andi	r24, 0xBF	; 191
    1666:	80 83       	st	Z, r24
			
			if (sequencer.SHIFT) {
    1668:	f3 01       	movw	r30, r6
    166a:	80 81       	ld	r24, Z
    166c:	80 ff       	sbrs	r24, 0
    166e:	bb c0       	rjmp	.+374    	; 0x17e6 <check_inst_switches+0x220>
				
				if (drum_hit[i-INST_BD_2_SW].switch_bit != NO_SWITCH) { //need to handle toggling between instrument
    1670:	f5 01       	movw	r30, r10
    1672:	20 81       	ld	r18, Z
    1674:	2f 3f       	cpi	r18, 0xFF	; 255
    1676:	09 f4       	brne	.+2      	; 0x167a <check_inst_switches+0xb4>
    1678:	9e c0       	rjmp	.+316    	; 0x17b6 <check_inst_switches+0x1f0>
					//maybe evaluate the two drum states as 00, 01, 10, 11 and then use switch case
					uint8_t mute_state = (drum_hit[i - INST_BD_2_SW].muted) | (drum_hit[i - INST_BD_2_SW + 9].muted << 1);
    167a:	f6 01       	movw	r30, r12
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ee 0f       	add	r30, r30
    1686:	ff 1f       	adc	r31, r31
    1688:	ec 19       	sub	r30, r12
    168a:	fd 09       	sbc	r31, r13
    168c:	ea 5f       	subi	r30, 0xFA	; 250
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	40 81       	ld	r20, Z
    1692:	40 fb       	bst	r20, 0
    1694:	44 24       	eor	r4, r4
    1696:	40 f8       	bld	r4, 0
    1698:	51 2c       	mov	r5, r1
    169a:	a2 01       	movw	r20, r4
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	f8 01       	movw	r30, r16
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	e0 1b       	sub	r30, r16
    16b0:	f1 0b       	sbc	r31, r17
    16b2:	ea 5f       	subi	r30, 0xFA	; 250
    16b4:	fe 4f       	sbci	r31, 0xFE	; 254
    16b6:	50 81       	ld	r21, Z
    16b8:	51 70       	andi	r21, 0x01	; 1
    16ba:	45 2b       	or	r20, r21
					switch (mute_state) {
    16bc:	41 30       	cpi	r20, 0x01	; 1
    16be:	21 f1       	breq	.+72     	; 0x1708 <check_inst_switches+0x142>
    16c0:	30 f0       	brcs	.+12     	; 0x16ce <check_inst_switches+0x108>
    16c2:	42 30       	cpi	r20, 0x02	; 2
    16c4:	f1 f1       	breq	.+124    	; 0x1742 <check_inst_switches+0x17c>
    16c6:	43 30       	cpi	r20, 0x03	; 3
    16c8:	09 f4       	brne	.+2      	; 0x16cc <check_inst_switches+0x106>
    16ca:	58 c0       	rjmp	.+176    	; 0x177c <check_inst_switches+0x1b6>
    16cc:	c4 c0       	rjmp	.+392    	; 0x1856 <check_inst_switches+0x290>
						
						case 0:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    16ce:	f8 01       	movw	r30, r16
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	e0 1b       	sub	r30, r16
    16de:	f1 0b       	sbc	r31, r17
    16e0:	ea 5f       	subi	r30, 0xFA	; 250
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	80 81       	ld	r24, Z
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;
    16ea:	f6 01       	movw	r30, r12
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ec 19       	sub	r30, r12
    16fa:	fd 09       	sbc	r31, r13
    16fc:	ea 5f       	subi	r30, 0xFA	; 250
    16fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1700:	80 81       	ld	r24, Z
    1702:	8e 7f       	andi	r24, 0xFE	; 254
    1704:	80 83       	st	Z, r24
						break;
    1706:	a7 c0       	rjmp	.+334    	; 0x1856 <check_inst_switches+0x290>
						
						case 1:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    1708:	f8 01       	movw	r30, r16
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	e0 1b       	sub	r30, r16
    1718:	f1 0b       	sbc	r31, r17
    171a:	ea 5f       	subi	r30, 0xFA	; 250
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	80 81       	ld	r24, Z
    1720:	8e 7f       	andi	r24, 0xFE	; 254
    1722:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;							
    1724:	f6 01       	movw	r30, r12
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	ec 19       	sub	r30, r12
    1734:	fd 09       	sbc	r31, r13
    1736:	ea 5f       	subi	r30, 0xFA	; 250
    1738:	fe 4f       	sbci	r31, 0xFE	; 254
    173a:	80 81       	ld	r24, Z
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	80 83       	st	Z, r24
						
						break;
    1740:	8a c0       	rjmp	.+276    	; 0x1856 <check_inst_switches+0x290>
						
						case 2:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    1742:	f8 01       	movw	r30, r16
    1744:	ee 0f       	add	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	e0 1b       	sub	r30, r16
    1752:	f1 0b       	sbc	r31, r17
    1754:	ea 5f       	subi	r30, 0xFA	; 250
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	80 81       	ld	r24, Z
    175a:	81 60       	ori	r24, 0x01	; 1
    175c:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;						
    175e:	f6 01       	movw	r30, r12
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	ec 19       	sub	r30, r12
    176e:	fd 09       	sbc	r31, r13
    1770:	ea 5f       	subi	r30, 0xFA	; 250
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	80 81       	ld	r24, Z
    1776:	81 60       	ori	r24, 0x01	; 1
    1778:	80 83       	st	Z, r24
						break;
    177a:	6d c0       	rjmp	.+218    	; 0x1856 <check_inst_switches+0x290>
						
						case 3:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    177c:	f8 01       	movw	r30, r16
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	e0 1b       	sub	r30, r16
    178c:	f1 0b       	sbc	r31, r17
    178e:	ea 5f       	subi	r30, 0xFA	; 250
    1790:	fe 4f       	sbci	r31, 0xFE	; 254
    1792:	80 81       	ld	r24, Z
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;						
    1798:	f6 01       	movw	r30, r12
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ec 19       	sub	r30, r12
    17a8:	fd 09       	sbc	r31, r13
    17aa:	ea 5f       	subi	r30, 0xFA	; 250
    17ac:	fe 4f       	sbci	r31, 0xFE	; 254
    17ae:	80 81       	ld	r24, Z
    17b0:	8e 7f       	andi	r24, 0xFE	; 254
    17b2:	80 83       	st	Z, r24
						break;
    17b4:	50 c0       	rjmp	.+160    	; 0x1856 <check_inst_switches+0x290>
						
					}
					
				} else {
					
					if (i - INST_BD_2_SW == CP) { //handle clap in the same way, it just doesn't have NO_SWITCH flag
    17b6:	c7 31       	cpi	r28, 0x17	; 23
    17b8:	d1 05       	cpc	r29, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <check_inst_switches+0x1f8>
    17bc:	37 cf       	rjmp	.-402    	; 0x162c <check_inst_switches+0x66>
						
						
					} else {
					
						drum_hit[i - INST_BD_2_SW].muted ^= 1<<0; //toggle drum mute
    17be:	f8 01       	movw	r30, r16
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	e0 1b       	sub	r30, r16
    17ce:	f1 0b       	sbc	r31, r17
    17d0:	ea 5f       	subi	r30, 0xFA	; 250
    17d2:	fe 4f       	sbci	r31, 0xFE	; 254
    17d4:	80 81       	ld	r24, Z
    17d6:	98 2f       	mov	r25, r24
    17d8:	91 70       	andi	r25, 0x01	; 1
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	92 27       	eor	r25, r18
    17de:	90 fb       	bst	r25, 0
    17e0:	80 f9       	bld	r24, 0
    17e2:	80 83       	st	Z, r24
    17e4:	38 c0       	rjmp	.+112    	; 0x1856 <check_inst_switches+0x290>
					}
				}
				
			} else {	
			
				turn_off_all_inst_leds();
    17e6:	0e 94 90 04 	call	0x920	; 0x920 <turn_off_all_inst_leds>
			
			
				if(drum_hit[i - INST_BD_2_SW].switch_bit != NO_SWITCH) { // need to handle instrument toggle here
    17ea:	f5 01       	movw	r30, r10
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 3f       	cpi	r24, 0xFF	; 255
    17f0:	c9 f0       	breq	.+50     	; 0x1824 <check_inst_switches+0x25e>
				
				
					if (sequencer.current_inst == i - INST_BD_2_SW) {
    17f2:	e3 e6       	ldi	r30, 0x63	; 99
    17f4:	f4 e0       	ldi	r31, 0x04	; 4
    17f6:	80 81       	ld	r24, Z
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	08 17       	cp	r16, r24
    17fc:	19 07       	cpc	r17, r25
    17fe:	51 f4       	brne	.+20     	; 0x1814 <check_inst_switches+0x24e>
    1800:	f5 01       	movw	r30, r10
    1802:	ef 5b       	subi	r30, 0xBF	; 191
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
						//alternative drum hits are offset by 9 places in drum_hit array
						turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1806:	80 81       	ld	r24, Z
    1808:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
						sequencer.current_inst = i - INST_BD_2_SW + 9;
    180c:	e3 e6       	ldi	r30, 0x63	; 99
    180e:	f4 e0       	ldi	r31, 0x04	; 4
    1810:	c0 82       	st	Z, r12
    1812:	21 c0       	rjmp	.+66     	; 0x1856 <check_inst_switches+0x290>
					
					} else {
					
						turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1814:	f4 01       	movw	r30, r8
    1816:	80 81       	ld	r24, Z
    1818:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
						sequencer.current_inst = i - INST_BD_2_SW;
    181c:	e3 e6       	ldi	r30, 0x63	; 99
    181e:	f4 e0       	ldi	r31, 0x04	; 4
    1820:	00 83       	st	Z, r16
    1822:	19 c0       	rjmp	.+50     	; 0x1856 <check_inst_switches+0x290>
					}
				
				
				} else {
				
					if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1824:	e3 e6       	ldi	r30, 0x63	; 99
    1826:	f4 e0       	ldi	r31, 0x04	; 4
    1828:	80 81       	ld	r24, Z
    182a:	86 30       	cpi	r24, 0x06	; 6
    182c:	69 f4       	brne	.+26     	; 0x1848 <check_inst_switches+0x282>
    182e:	c7 31       	cpi	r28, 0x17	; 23
    1830:	d1 05       	cpc	r29, r1
    1832:	51 f4       	brne	.+20     	; 0x1848 <check_inst_switches+0x282>
					
						turn_on(drum_hit[MA].led_index);
    1834:	ee e6       	ldi	r30, 0x6E	; 110
    1836:	f1 e0       	ldi	r31, 0x01	; 1
    1838:	80 81       	ld	r24, Z
    183a:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
						sequencer.current_inst = MA;
    183e:	2f e0       	ldi	r18, 0x0F	; 15
    1840:	e3 e6       	ldi	r30, 0x63	; 99
    1842:	f4 e0       	ldi	r31, 0x04	; 4
    1844:	20 83       	st	Z, r18
    1846:	f2 ce       	rjmp	.-540    	; 0x162c <check_inst_switches+0x66>
					
					} else {
					
						turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    1848:	f4 01       	movw	r30, r8
    184a:	80 81       	ld	r24, Z
    184c:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
						sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1850:	e3 e6       	ldi	r30, 0x63	; 99
    1852:	f4 e0       	ldi	r31, 0x04	; 4
    1854:	00 83       	st	Z, r16
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1856:	fc e1       	ldi	r31, 0x1C	; 28
    1858:	ef 16       	cp	r14, r31
    185a:	f1 04       	cpc	r15, r1
    185c:	0c f4       	brge	.+2      	; 0x1860 <check_inst_switches+0x29a>
    185e:	e6 ce       	rjmp	.-564    	; 0x162c <check_inst_switches+0x66>
				//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    1860:	80 91 49 02 	lds	r24, 0x0249
    1864:	86 ff       	sbrs	r24, 6
    1866:	0c c0       	rjmp	.+24     	; 0x1880 <check_inst_switches+0x2ba>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1868:	e9 e4       	ldi	r30, 0x49	; 73
    186a:	f2 e0       	ldi	r31, 0x02	; 2
    186c:	8f 7b       	andi	r24, 0xBF	; 191
    186e:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    1870:	0e 94 90 04 	call	0x920	; 0x920 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    1874:	84 e1       	ldi	r24, 0x14	; 20
    1876:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
		sequencer.current_inst = AC;
    187a:	80 e1       	ldi	r24, 0x10	; 16
    187c:	80 93 63 04 	sts	0x0463, r24
	}
	
}	
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	af 90       	pop	r10
    1894:	9f 90       	pop	r9
    1896:	8f 90       	pop	r8
    1898:	7f 90       	pop	r7
    189a:	6f 90       	pop	r6
    189c:	5f 90       	pop	r5
    189e:	4f 90       	pop	r4
    18a0:	3f 90       	pop	r3
    18a2:	2f 90       	pop	r2
    18a4:	08 95       	ret

000018a6 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    18a6:	80 91 65 02 	lds	r24, 0x0265
    18aa:	86 ff       	sbrs	r24, 6
    18ac:	29 c0       	rjmp	.+82     	; 0x1900 <check_variation_switches+0x5a>
    18ae:	90 91 8e 03 	lds	r25, 0x038E
    18b2:	90 fd       	sbrc	r25, 0
    18b4:	25 c0       	rjmp	.+74     	; 0x1900 <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    18b6:	e5 e6       	ldi	r30, 0x65	; 101
    18b8:	f2 e0       	ldi	r31, 0x02	; 2
    18ba:	8f 7b       	andi	r24, 0xBF	; 191
    18bc:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    18be:	ec e5       	ldi	r30, 0x5C	; 92
    18c0:	f4 e0       	ldi	r31, 0x04	; 4
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	80 83       	st	Z, r24
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <check_variation_switches+0x30>
    18cc:	10 92 5c 04 	sts	0x045C, r1
		if (sequencer.START) {
    18d0:	91 ff       	sbrs	r25, 1
    18d2:	0b c0       	rjmp	.+22     	; 0x18ea <check_variation_switches+0x44>
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <check_variation_switches+0x34>
    18d6:	91 ff       	sbrs	r25, 1
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    18da:	80 91 8c 03 	lds	r24, 0x038C
    18de:	84 60       	ori	r24, 0x04	; 4
    18e0:	80 93 8c 03 	sts	0x038C, r24
    18e4:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    18e6:	8d 7f       	andi	r24, 0xFD	; 253
    18e8:	31 f4       	brne	.+12     	; 0x18f6 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    18ea:	eb e5       	ldi	r30, 0x5B	; 91
    18ec:	f4 e0       	ldi	r31, 0x04	; 4
    18ee:	80 81       	ld	r24, Z
    18f0:	8e 7f       	andi	r24, 0xFE	; 254
    18f2:	80 83       	st	Z, r24
    18f4:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    18f6:	eb e5       	ldi	r30, 0x5B	; 91
    18f8:	f4 e0       	ldi	r31, 0x04	; 4
    18fa:	80 81       	ld	r24, Z
    18fc:	81 60       	ori	r24, 0x01	; 1
    18fe:	80 83       	st	Z, r24
    1900:	08 95       	ret

00001902 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    190e:	80 91 8e 03 	lds	r24, 0x038E
    1912:	86 70       	andi	r24, 0x06	; 6
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	09 f0       	breq	.+2      	; 0x191a <check_clear_switch+0x18>
    1918:	43 c0       	rjmp	.+134    	; 0x19a0 <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    191a:	80 91 8d 03 	lds	r24, 0x038D
    191e:	81 11       	cpse	r24, r1
    1920:	46 c0       	rjmp	.+140    	; 0x19ae <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    1922:	8c e1       	ldi	r24, 0x1C	; 28
    1924:	0e 94 7d 04 	call	0x8fa	; 0x8fa <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1928:	eb e5       	ldi	r30, 0x5B	; 91
    192a:	f4 e0       	ldi	r31, 0x04	; 4
    192c:	80 81       	ld	r24, Z
    192e:	80 fb       	bst	r24, 0
    1930:	ee 24       	eor	r14, r14
    1932:	e0 f8       	bld	r14, 0
    1934:	f1 2c       	mov	r15, r1
    1936:	26 e6       	ldi	r18, 0x66	; 102
    1938:	2e 9d       	mul	r18, r14
    193a:	d0 01       	movw	r26, r0
    193c:	2f 9d       	mul	r18, r15
    193e:	b0 0d       	add	r27, r0
    1940:	11 24       	eor	r1, r1
    1942:	a1 57       	subi	r26, 0x71	; 113
    1944:	bc 4f       	sbci	r27, 0xFC	; 252
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	ed 01       	movw	r28, r26
    194a:	19 92       	st	Y+, r1
    194c:	8a 95       	dec	r24
    194e:	e9 f7       	brne	.-6      	; 0x194a <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    1950:	80 81       	ld	r24, Z
    1952:	08 2f       	mov	r16, r24
    1954:	01 70       	andi	r16, 0x01	; 1
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	20 9f       	mul	r18, r16
    195a:	d0 01       	movw	r26, r0
    195c:	21 9f       	mul	r18, r17
    195e:	b0 0d       	add	r27, r0
    1960:	11 24       	eor	r1, r1
    1962:	ad 52       	subi	r26, 0x2D	; 45
    1964:	bc 4f       	sbci	r27, 0xFC	; 252
    1966:	82 e2       	ldi	r24, 0x22	; 34
    1968:	ed 01       	movw	r28, r26
    196a:	19 92       	st	Y+, r1
    196c:	8a 95       	dec	r24
    196e:	e9 f7       	brne	.-6      	; 0x196a <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    1970:	80 81       	ld	r24, Z
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	c8 2f       	mov	r28, r24
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	d8 2f       	mov	r29, r24
    197a:	2c 9f       	mul	r18, r28
    197c:	c0 01       	movw	r24, r0
    197e:	2d 9f       	mul	r18, r29
    1980:	90 0d       	add	r25, r0
    1982:	11 24       	eor	r1, r1
    1984:	83 57       	subi	r24, 0x73	; 115
    1986:	9c 4f       	sbci	r25, 0xFC	; 252
    1988:	fc 01       	movw	r30, r24
    198a:	ee 5b       	subi	r30, 0xBE	; 190
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	11 82       	std	Z+1, r1	; 0x01
    1990:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    1992:	32 96       	adiw	r30, 0x02	; 2
    1994:	11 82       	std	Z+1, r1	; 0x01
    1996:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    1998:	80 e1       	ldi	r24, 0x10	; 16
    199a:	80 93 5e 04 	sts	0x045E, r24
				break;
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    19a0:	80 91 8d 03 	lds	r24, 0x038D
    19a4:	81 11       	cpse	r24, r1
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    19a8:	8c e1       	ldi	r24, 0x1C	; 28
    19aa:	0e 94 40 04 	call	0x880	; 0x880 <turn_on>
		}
		
	}
	
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	08 95       	ret

000019bc <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    19bc:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    19be:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    19c0:	74 83       	std	Z+4, r23	; 0x04
    19c2:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    19c4:	11 82       	std	Z+1, r1	; 0x01
    19c6:	10 82       	st	Z, r1
    19c8:	08 95       	ret

000019ca <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	ec 01       	movw	r28, r24
    19d6:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    19d8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <store_and_clear_interrupt>
    19dc:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    19de:	f9 80       	ldd	r15, Y+1	; 0x01
    19e0:	4f 2d       	mov	r20, r15
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	ca 01       	movw	r24, r20
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ea:	62 2f       	mov	r22, r18
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	0e 94 0d 10 	call	0x201a	; 0x201a <__divmodhi4>
    19f2:	28 81       	ld	r18, Y
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	82 17       	cp	r24, r18
    19f8:	93 07       	cpc	r25, r19
    19fa:	29 f4       	brne	.+10     	; 0x1a06 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    19fc:	81 2f       	mov	r24, r17
    19fe:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <restore_interrupt_setting>
      return false;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	12 c0       	rjmp	.+36     	; 0x1a2a <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1a06:	eb 81       	ldd	r30, Y+3	; 0x03
    1a08:	fc 81       	ldd	r31, Y+4	; 0x04
    1a0a:	ef 0d       	add	r30, r15
    1a0c:	f1 1d       	adc	r31, r1
    1a0e:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1a10:	29 81       	ldd	r18, Y+1	; 0x01
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	c9 01       	movw	r24, r18
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	0e 94 0d 10 	call	0x201a	; 0x201a <__divmodhi4>
    1a20:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1a22:	81 2f       	mov	r24, r17
    1a24:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <restore_interrupt_setting>
      return true;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	08 95       	ret

00001a36 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a3c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1a40:	39 81       	ldd	r19, Y+1	; 0x01
    1a42:	28 81       	ld	r18, Y
    1a44:	32 17       	cp	r19, r18
    1a46:	18 f0       	brcs	.+6      	; 0x1a4e <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1a48:	c3 2f       	mov	r28, r19
    1a4a:	c2 1b       	sub	r28, r18
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <bytequeue_length+0x20>
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	c3 2f       	mov	r28, r19
    1a52:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1a54:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1a56:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <restore_interrupt_setting>
   return len;
}
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1a62:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1a64:	80 81       	ld	r24, Z
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	9b 01       	movw	r18, r22
    1a6a:	28 0f       	add	r18, r24
    1a6c:	31 1d       	adc	r19, r1
    1a6e:	c9 01       	movw	r24, r18
    1a70:	62 81       	ldd	r22, Z+2	; 0x02
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	0e 94 0d 10 	call	0x201a	; 0x201a <__divmodhi4>
    1a78:	03 80       	ldd	r0, Z+3	; 0x03
    1a7a:	f4 81       	ldd	r31, Z+4	; 0x04
    1a7c:	e0 2d       	mov	r30, r0
    1a7e:	e8 0f       	add	r30, r24
    1a80:	f9 1f       	adc	r31, r25
}
    1a82:	80 81       	ld	r24, Z
    1a84:	08 95       	ret

00001a86 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a90:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <store_and_clear_interrupt>
    1a94:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1a96:	88 81       	ld	r24, Y
    1a98:	21 2f       	mov	r18, r17
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	68 0f       	add	r22, r24
    1aa0:	71 1d       	adc	r23, r1
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	6a 81       	ldd	r22, Y+2	; 0x02
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	0e 94 0d 10 	call	0x201a	; 0x201a <__divmodhi4>
    1aac:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1aae:	84 2f       	mov	r24, r20
    1ab0:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <restore_interrupt_setting>
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	08 95       	ret

00001abc <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1abc:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1abe:	f8 94       	cli
   return sreg;
}
    1ac0:	08 95       	ret

00001ac2 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1ac2:	8f bf       	out	0x3f, r24	; 63
    1ac4:	08 95       	ret

00001ac6 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	88 27       	eor	r24, r24
    1aca:	88 1f       	adc	r24, r24
    1acc:	08 95       	ret

00001ace <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	88 3f       	cpi	r24, 0xF8	; 248
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <midi_is_realtime+0x8>
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
}
    1ad6:	89 2f       	mov	r24, r25
    1ad8:	08 95       	ret

00001ada <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1ada:	98 2f       	mov	r25, r24
    1adc:	90 7f       	andi	r25, 0xF0	; 240
    1ade:	90 3c       	cpi	r25, 0xC0	; 192
    1ae0:	b1 f0       	breq	.+44     	; 0x1b0e <midi_packet_length+0x34>
    1ae2:	58 f4       	brcc	.+22     	; 0x1afa <midi_packet_length+0x20>
    1ae4:	90 39       	cpi	r25, 0x90	; 144
    1ae6:	41 f1       	breq	.+80     	; 0x1b38 <midi_packet_length+0x5e>
    1ae8:	18 f4       	brcc	.+6      	; 0x1af0 <midi_packet_length+0x16>
    1aea:	90 38       	cpi	r25, 0x80	; 128
    1aec:	19 f5       	brne	.+70     	; 0x1b34 <midi_packet_length+0x5a>
    1aee:	24 c0       	rjmp	.+72     	; 0x1b38 <midi_packet_length+0x5e>
    1af0:	90 3a       	cpi	r25, 0xA0	; 160
    1af2:	11 f1       	breq	.+68     	; 0x1b38 <midi_packet_length+0x5e>
    1af4:	90 3b       	cpi	r25, 0xB0	; 176
    1af6:	f1 f4       	brne	.+60     	; 0x1b34 <midi_packet_length+0x5a>
    1af8:	1f c0       	rjmp	.+62     	; 0x1b38 <midi_packet_length+0x5e>
    1afa:	90 3e       	cpi	r25, 0xE0	; 224
    1afc:	e9 f0       	breq	.+58     	; 0x1b38 <midi_packet_length+0x5e>
    1afe:	18 f4       	brcc	.+6      	; 0x1b06 <midi_packet_length+0x2c>
    1b00:	90 3d       	cpi	r25, 0xD0	; 208
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <midi_packet_length+0x34>
    1b04:	17 c0       	rjmp	.+46     	; 0x1b34 <midi_packet_length+0x5a>
    1b06:	90 3f       	cpi	r25, 0xF0	; 240
    1b08:	21 f0       	breq	.+8      	; 0x1b12 <midi_packet_length+0x38>
    1b0a:	93 3f       	cpi	r25, 0xF3	; 243
    1b0c:	99 f4       	brne	.+38     	; 0x1b34 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	08 95       	ret
      case 0xF0:
         switch(status) {
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	fc 01       	movw	r30, r24
    1b16:	e1 5f       	subi	r30, 0xF1	; 241
    1b18:	f1 09       	sbc	r31, r1
    1b1a:	ef 30       	cpi	r30, 0x0F	; 15
    1b1c:	f1 05       	cpc	r31, r1
    1b1e:	40 f4       	brcc	.+16     	; 0x1b30 <midi_packet_length+0x56>
    1b20:	e6 5a       	subi	r30, 0xA6	; 166
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1b3e:	08 95       	ret

00001b40 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1b40:	fc 01       	movw	r30, r24
    1b42:	75 83       	std	Z+5, r23	; 0x05
    1b44:	64 83       	std	Z+4, r22	; 0x04
    1b46:	08 95       	ret

00001b48 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1b48:	fc 01       	movw	r30, r24
    1b4a:	77 83       	std	Z+7, r23	; 0x07
    1b4c:	66 83       	std	Z+6, r22	; 0x06
    1b4e:	08 95       	ret

00001b50 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1b50:	fc 01       	movw	r30, r24
    1b52:	77 8b       	std	Z+23, r23	; 0x17
    1b54:	66 8b       	std	Z+22, r22	; 0x16
    1b56:	08 95       	ret

00001b58 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1b5e:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1b60:	1f a2       	std	Y+39, r1	; 0x27
    1b62:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1b64:	bc 01       	movw	r22, r24
    1b66:	68 5d       	subi	r22, 0xD8	; 216
    1b68:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6a:	40 ec       	ldi	r20, 0xC0	; 192
    1b6c:	88 51       	subi	r24, 0x18	; 24
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	0e 94 de 0c 	call	0x19bc	; 0x19bc <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1b74:	1b 82       	std	Y+3, r1	; 0x03
    1b76:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1b78:	1d 82       	std	Y+5, r1	; 0x05
    1b7a:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1b7c:	1f 82       	std	Y+7, r1	; 0x07
    1b7e:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1b80:	19 86       	std	Y+9, r1	; 0x09
    1b82:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1b84:	1b 86       	std	Y+11, r1	; 0x0b
    1b86:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1b88:	1d 86       	std	Y+13, r1	; 0x0d
    1b8a:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1b8c:	1f 86       	std	Y+15, r1	; 0x0f
    1b8e:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1b90:	19 8a       	std	Y+17, r1	; 0x11
    1b92:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1b94:	1b 8a       	std	Y+19, r1	; 0x13
    1b96:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1b98:	1d 8a       	std	Y+21, r1	; 0x15
    1b9a:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1b9c:	1f 8a       	std	Y+23, r1	; 0x17
    1b9e:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1ba0:	19 8e       	std	Y+25, r1	; 0x19
    1ba2:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1ba4:	1b 8e       	std	Y+27, r1	; 0x1b
    1ba6:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1ba8:	1d 8e       	std	Y+29, r1	; 0x1d
    1baa:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1bac:	1f 8e       	std	Y+31, r1	; 0x1f
    1bae:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1bb0:	19 a2       	std	Y+33, r1	; 0x21
    1bb2:	18 a2       	std	Y+32, r1	; 0x20
}
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1bc6:	66 23       	and	r22, r22
    1bc8:	99 f0       	breq	.+38     	; 0x1bf0 <midi_device_input+0x36>
    1bca:	ea 01       	movw	r28, r20
    1bcc:	61 50       	subi	r22, 0x01	; 1
    1bce:	06 2f       	mov	r16, r22
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	0f 5f       	subi	r16, 0xFF	; 255
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	04 0f       	add	r16, r20
    1bd8:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1bda:	7c 01       	movw	r14, r24
    1bdc:	28 ee       	ldi	r18, 0xE8	; 232
    1bde:	e2 0e       	add	r14, r18
    1be0:	f1 1c       	adc	r15, r1
    1be2:	69 91       	ld	r22, Y+
    1be4:	c7 01       	movw	r24, r14
    1be6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1bea:	c0 17       	cp	r28, r16
    1bec:	d1 07       	cpc	r29, r17
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	08 95       	ret

00001bfe <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <midi_input_callbacks+0x16>
    1c14:	1f 92       	push	r1
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	7c 01       	movw	r14, r24
    1c1c:	6b 01       	movw	r12, r22
    1c1e:	14 2f       	mov	r17, r20
    1c20:	b2 2e       	mov	r11, r18
    1c22:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1c24:	dc 01       	movw	r26, r24
    1c26:	95 96       	adiw	r26, 0x25	; 37
    1c28:	8c 91       	ld	r24, X
    1c2a:	95 97       	sbiw	r26, 0x25	; 37
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	11 f5       	brne	.+68     	; 0x1c74 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1c30:	5a 96       	adiw	r26, 0x1a	; 26
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	5b 97       	sbiw	r26, 0x1b	; 27
    1c38:	30 97       	sbiw	r30, 0x00	; 0
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <midi_input_callbacks+0x40>
    1c3c:	cc c0       	rjmp	.+408    	; 0x1dd6 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1c3e:	9b 01       	movw	r18, r22
    1c40:	21 50       	subi	r18, 0x01	; 1
    1c42:	31 09       	sbc	r19, r1
    1c44:	ab ea       	ldi	r26, 0xAB	; 171
    1c46:	ba ea       	ldi	r27, 0xAA	; 170
    1c48:	0e 94 27 10 	call	0x204e	; 0x204e <__umulhisi3>
    1c4c:	96 95       	lsr	r25
    1c4e:	87 95       	ror	r24
    1c50:	9c 01       	movw	r18, r24
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1c5a:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1c5c:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1c5e:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1c60:	4c 2d       	mov	r20, r12
    1c62:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1c64:	9e 01       	movw	r18, r28
    1c66:	2f 5f       	subi	r18, 0xFF	; 255
    1c68:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6a:	68 2f       	mov	r22, r24
    1c6c:	79 2f       	mov	r23, r25
    1c6e:	c7 01       	movw	r24, r14
    1c70:	09 95       	icall
    1c72:	be c0       	rjmp	.+380    	; 0x1df0 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1c74:	62 30       	cpi	r22, 0x02	; 2
    1c76:	71 05       	cpc	r23, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <midi_input_callbacks+0x7e>
    1c7a:	55 c0       	rjmp	.+170    	; 0x1d26 <midi_input_callbacks+0x128>
    1c7c:	63 30       	cpi	r22, 0x03	; 3
    1c7e:	71 05       	cpc	r23, r1
    1c80:	29 f0       	breq	.+10     	; 0x1c8c <midi_input_callbacks+0x8e>
    1c82:	61 30       	cpi	r22, 0x01	; 1
    1c84:	71 05       	cpc	r23, r1
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <midi_input_callbacks+0x8c>
    1c88:	a1 c0       	rjmp	.+322    	; 0x1dcc <midi_input_callbacks+0x1ce>
    1c8a:	88 c0       	rjmp	.+272    	; 0x1d9c <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1c8c:	84 2f       	mov	r24, r20
    1c8e:	80 7f       	andi	r24, 0xF0	; 240
    1c90:	80 3a       	cpi	r24, 0xA0	; 160
    1c92:	f1 f0       	breq	.+60     	; 0x1cd0 <midi_input_callbacks+0xd2>
    1c94:	28 f4       	brcc	.+10     	; 0x1ca0 <midi_input_callbacks+0xa2>
    1c96:	80 38       	cpi	r24, 0x80	; 128
    1c98:	a9 f0       	breq	.+42     	; 0x1cc4 <midi_input_callbacks+0xc6>
    1c9a:	80 39       	cpi	r24, 0x90	; 144
    1c9c:	69 f0       	breq	.+26     	; 0x1cb8 <midi_input_callbacks+0xba>
    1c9e:	2f c0       	rjmp	.+94     	; 0x1cfe <midi_input_callbacks+0x100>
    1ca0:	80 3e       	cpi	r24, 0xE0	; 224
    1ca2:	e1 f0       	breq	.+56     	; 0x1cdc <midi_input_callbacks+0xde>
    1ca4:	80 3f       	cpi	r24, 0xF0	; 240
    1ca6:	01 f1       	breq	.+64     	; 0x1ce8 <midi_input_callbacks+0xea>
    1ca8:	80 3b       	cpi	r24, 0xB0	; 176
    1caa:	49 f5       	brne	.+82     	; 0x1cfe <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    1cac:	d7 01       	movw	r26, r14
    1cae:	12 96       	adiw	r26, 0x02	; 2
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1cb6:	25 c0       	rjmp	.+74     	; 0x1d02 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1cb8:	d7 01       	movw	r26, r14
    1cba:	14 96       	adiw	r26, 0x04	; 4
    1cbc:	ed 91       	ld	r30, X+
    1cbe:	fc 91       	ld	r31, X
    1cc0:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1cc2:	1f c0       	rjmp	.+62     	; 0x1d02 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1cc4:	d7 01       	movw	r26, r14
    1cc6:	16 96       	adiw	r26, 0x06	; 6
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1cce:	19 c0       	rjmp	.+50     	; 0x1d02 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1cd0:	d7 01       	movw	r26, r14
    1cd2:	18 96       	adiw	r26, 0x08	; 8
    1cd4:	ed 91       	ld	r30, X+
    1cd6:	fc 91       	ld	r31, X
    1cd8:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1cda:	13 c0       	rjmp	.+38     	; 0x1d02 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1cdc:	d7 01       	movw	r26, r14
    1cde:	1a 96       	adiw	r26, 0x0a	; 10
    1ce0:	ed 91       	ld	r30, X+
    1ce2:	fc 91       	ld	r31, X
    1ce4:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1ce8:	42 3f       	cpi	r20, 0xF2	; 242
    1cea:	09 f0       	breq	.+2      	; 0x1cee <midi_input_callbacks+0xf0>
    1cec:	74 c0       	rjmp	.+232    	; 0x1dd6 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1cee:	d7 01       	movw	r26, r14
    1cf0:	1c 96       	adiw	r26, 0x0c	; 12
    1cf2:	ed 91       	ld	r30, X+
    1cf4:	fc 91       	ld	r31, X
    1cf6:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1cf8:	30 97       	sbiw	r30, 0x00	; 0
    1cfa:	41 f4       	brne	.+16     	; 0x1d0c <midi_input_callbacks+0x10e>
    1cfc:	6c c0       	rjmp	.+216    	; 0x1dd6 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1cfe:	e0 e0       	ldi	r30, 0x00	; 0
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1d02:	30 97       	sbiw	r30, 0x00	; 0
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <midi_input_callbacks+0x10a>
    1d06:	67 c0       	rjmp	.+206    	; 0x1dd6 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1d08:	12 3f       	cpi	r17, 0xF2	; 242
    1d0a:	31 f4       	brne	.+12     	; 0x1d18 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1d0c:	2a 2d       	mov	r18, r10
    1d0e:	4b 2d       	mov	r20, r11
    1d10:	62 ef       	ldi	r22, 0xF2	; 242
    1d12:	c7 01       	movw	r24, r14
    1d14:	09 95       	icall
    1d16:	6c c0       	rjmp	.+216    	; 0x1df0 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1d18:	2a 2d       	mov	r18, r10
    1d1a:	4b 2d       	mov	r20, r11
    1d1c:	61 2f       	mov	r22, r17
    1d1e:	6f 70       	andi	r22, 0x0F	; 15
    1d20:	c7 01       	movw	r24, r14
    1d22:	09 95       	icall
    1d24:	65 c0       	rjmp	.+202    	; 0x1df0 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1d26:	84 2f       	mov	r24, r20
    1d28:	80 7f       	andi	r24, 0xF0	; 240
    1d2a:	80 3d       	cpi	r24, 0xD0	; 208
    1d2c:	51 f0       	breq	.+20     	; 0x1d42 <midi_input_callbacks+0x144>
    1d2e:	80 3f       	cpi	r24, 0xF0	; 240
    1d30:	71 f0       	breq	.+28     	; 0x1d4e <midi_input_callbacks+0x150>
    1d32:	80 3c       	cpi	r24, 0xC0	; 192
    1d34:	01 f5       	brne	.+64     	; 0x1d76 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1d36:	d7 01       	movw	r26, r14
    1d38:	1e 96       	adiw	r26, 0x0e	; 14
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
    1d3e:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1d40:	1c c0       	rjmp	.+56     	; 0x1d7a <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1d42:	d7 01       	movw	r26, r14
    1d44:	50 96       	adiw	r26, 0x10	; 16
    1d46:	ed 91       	ld	r30, X+
    1d48:	fc 91       	ld	r31, X
    1d4a:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1d4c:	16 c0       	rjmp	.+44     	; 0x1d7a <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1d4e:	43 3f       	cpi	r20, 0xF3	; 243
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1d52:	d7 01       	movw	r26, r14
    1d54:	52 96       	adiw	r26, 0x12	; 18
    1d56:	ed 91       	ld	r30, X+
    1d58:	fc 91       	ld	r31, X
    1d5a:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1d5c:	30 97       	sbiw	r30, 0x00	; 0
    1d5e:	99 f4       	brne	.+38     	; 0x1d86 <midi_input_callbacks+0x188>
    1d60:	3a c0       	rjmp	.+116    	; 0x1dd6 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1d62:	41 3f       	cpi	r20, 0xF1	; 241
    1d64:	c1 f5       	brne	.+112    	; 0x1dd6 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1d66:	d7 01       	movw	r26, r14
    1d68:	54 96       	adiw	r26, 0x14	; 20
    1d6a:	ed 91       	ld	r30, X+
    1d6c:	fc 91       	ld	r31, X
    1d6e:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1d70:	30 97       	sbiw	r30, 0x00	; 0
    1d72:	49 f4       	brne	.+18     	; 0x1d86 <midi_input_callbacks+0x188>
    1d74:	30 c0       	rjmp	.+96     	; 0x1dd6 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1d76:	e0 e0       	ldi	r30, 0x00	; 0
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1d7a:	30 97       	sbiw	r30, 0x00	; 0
    1d7c:	61 f1       	breq	.+88     	; 0x1dd6 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1d7e:	81 2f       	mov	r24, r17
    1d80:	8d 7f       	andi	r24, 0xFD	; 253
    1d82:	81 3f       	cpi	r24, 0xF1	; 241
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1d86:	4b 2d       	mov	r20, r11
    1d88:	61 2f       	mov	r22, r17
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	09 95       	icall
    1d8e:	30 c0       	rjmp	.+96     	; 0x1df0 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1d90:	4b 2d       	mov	r20, r11
    1d92:	61 2f       	mov	r22, r17
    1d94:	6f 70       	andi	r22, 0x0F	; 15
    1d96:	c7 01       	movw	r24, r14
    1d98:	09 95       	icall
    1d9a:	2a c0       	rjmp	.+84     	; 0x1df0 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1d9c:	84 2f       	mov	r24, r20
    1d9e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <midi_is_realtime>
    1da2:	88 23       	and	r24, r24
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1da6:	d7 01       	movw	r26, r14
    1da8:	56 96       	adiw	r26, 0x16	; 22
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	57 97       	sbiw	r26, 0x17	; 23
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1db2:	16 3f       	cpi	r17, 0xF6	; 246
    1db4:	81 f4       	brne	.+32     	; 0x1dd6 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1db6:	d7 01       	movw	r26, r14
    1db8:	58 96       	adiw	r26, 0x18	; 24
    1dba:	ed 91       	ld	r30, X+
    1dbc:	fc 91       	ld	r31, X
    1dbe:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1dc0:	30 97       	sbiw	r30, 0x00	; 0
    1dc2:	49 f0       	breq	.+18     	; 0x1dd6 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1dc4:	61 2f       	mov	r22, r17
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	09 95       	icall
    1dca:	12 c0       	rjmp	.+36     	; 0x1df0 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1dcc:	64 30       	cpi	r22, 0x04	; 4
    1dce:	71 05       	cpc	r23, r1
    1dd0:	10 f0       	brcs	.+4      	; 0x1dd6 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1dd2:	c1 2c       	mov	r12, r1
    1dd4:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1dd6:	d7 01       	movw	r26, r14
    1dd8:	5c 96       	adiw	r26, 0x1c	; 28
    1dda:	ed 91       	ld	r30, X+
    1ddc:	fc 91       	ld	r31, X
    1dde:	5d 97       	sbiw	r26, 0x1d	; 29
    1de0:	30 97       	sbiw	r30, 0x00	; 0
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1de4:	0a 2d       	mov	r16, r10
    1de6:	2b 2d       	mov	r18, r11
    1de8:	41 2f       	mov	r20, r17
    1dea:	b6 01       	movw	r22, r12
    1dec:	c7 01       	movw	r24, r14
    1dee:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1df0:	d7 01       	movw	r26, r14
    1df2:	5e 96       	adiw	r26, 0x1e	; 30
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	5f 97       	sbiw	r26, 0x1f	; 31
    1dfa:	30 97       	sbiw	r30, 0x00	; 0
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1dfe:	0a 2d       	mov	r16, r10
    1e00:	2b 2d       	mov	r18, r11
    1e02:	41 2f       	mov	r20, r17
    1e04:	b6 01       	movw	r22, r12
    1e06:	c7 01       	movw	r24, r14
    1e08:	09 95       	icall
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	08 95       	ret

00001e26 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1e34:	86 2f       	mov	r24, r22
    1e36:	0e 94 67 0d 	call	0x1ace	; 0x1ace <midi_is_realtime>
    1e3a:	88 23       	and	r24, r24
    1e3c:	69 f0       	breq	.+26     	; 0x1e58 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1e3e:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1e44:	00 e0       	ldi	r16, 0x00	; 0
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	41 2f       	mov	r20, r17
    1e4a:	61 e0       	ldi	r22, 0x01	; 1
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	ce 01       	movw	r24, r28
    1e50:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <midi_input_callbacks>
    device->input_state = state;
    1e54:	fd a2       	std	Y+37, r15	; 0x25
    1e56:	a4 c0       	rjmp	.+328    	; 0x1fa0 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1e58:	81 2f       	mov	r24, r17
    1e5a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <midi_is_statusbyte>
    1e5e:	88 23       	and	r24, r24
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <midi_process_byte+0x3e>
    1e62:	5d c0       	rjmp	.+186    	; 0x1f1e <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	84 30       	cpi	r24, 0x04	; 4
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1e6a:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9f a3       	std	Y+39, r25	; 0x27
    1e72:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1e74:	81 2f       	mov	r24, r17
    1e76:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <midi_packet_length>
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	31 f0       	breq	.+12     	; 0x1e8a <midi_process_byte+0x64>
    1e7e:	b8 f0       	brcs	.+46     	; 0x1eae <midi_process_byte+0x88>
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	79 f0       	breq	.+30     	; 0x1ea2 <midi_process_byte+0x7c>
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <midi_process_byte+0x82>
    1e88:	46 c0       	rjmp	.+140    	; 0x1f16 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1e8e:	00 e0       	ldi	r16, 0x00	; 0
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	41 2f       	mov	r20, r17
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	ce 01       	movw	r24, r28
    1e9a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <midi_input_callbacks>
        device->input_state = IDLE;
    1e9e:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1ea0:	7f c0       	rjmp	.+254    	; 0x1fa0 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1ea6:	7c c0       	rjmp	.+248    	; 0x1fa0 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1eac:	79 c0       	rjmp	.+242    	; 0x1fa0 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1eae:	10 3f       	cpi	r17, 0xF0	; 240
    1eb0:	19 f0       	breq	.+6      	; 0x1eb8 <midi_process_byte+0x92>
    1eb2:	17 3f       	cpi	r17, 0xF7	; 247
    1eb4:	51 f0       	breq	.+20     	; 0x1eca <midi_process_byte+0xa4>
    1eb6:	2b c0       	rjmp	.+86     	; 0x1f0e <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
    1eba:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1ebc:	80 ef       	ldi	r24, 0xF0	; 240
    1ebe:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9f a3       	std	Y+39, r25	; 0x27
    1ec6:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1ec8:	6b c0       	rjmp	.+214    	; 0x1fa0 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1eca:	4e a1       	ldd	r20, Y+38	; 0x26
    1ecc:	5f a1       	ldd	r21, Y+39	; 0x27
    1ece:	9a 01       	movw	r18, r20
    1ed0:	ab ea       	ldi	r26, 0xAB	; 171
    1ed2:	ba ea       	ldi	r27, 0xAA	; 170
    1ed4:	0e 94 27 10 	call	0x204e	; 0x204e <__umulhisi3>
    1ed8:	96 95       	lsr	r25
    1eda:	87 95       	ror	r24
    1edc:	9c 01       	movw	r18, r24
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	fa 01       	movw	r30, r20
    1ee8:	e8 1b       	sub	r30, r24
    1eea:	f9 0b       	sbc	r31, r25
    1eec:	ec 0f       	add	r30, r28
    1eee:	fd 1f       	adc	r31, r29
    1ef0:	87 ef       	ldi	r24, 0xF7	; 247
    1ef2:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1ef4:	ba 01       	movw	r22, r20
    1ef6:	6f 5f       	subi	r22, 0xFF	; 255
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	7f a3       	std	Y+39, r23	; 0x27
    1efc:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1efe:	0c a1       	ldd	r16, Y+36	; 0x24
    1f00:	2b a1       	ldd	r18, Y+35	; 0x23
    1f02:	4a a1       	ldd	r20, Y+34	; 0x22
    1f04:	ce 01       	movw	r24, r28
    1f06:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1f0a:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1f0c:	49 c0       	rjmp	.+146    	; 0x1fa0 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1f0e:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1f10:	1f a2       	std	Y+39, r1	; 0x27
    1f12:	1e a2       	std	Y+38, r1	; 0x26
    1f14:	45 c0       	rjmp	.+138    	; 0x1fa0 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1f16:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1f18:	1f a2       	std	Y+39, r1	; 0x27
    1f1a:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1f1c:	41 c0       	rjmp	.+130    	; 0x1fa0 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1f1e:	ed a1       	ldd	r30, Y+37	; 0x25
    1f20:	ee 23       	and	r30, r30
    1f22:	f1 f1       	breq	.+124    	; 0x1fa0 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1f24:	4e a1       	ldd	r20, Y+38	; 0x26
    1f26:	5f a1       	ldd	r21, Y+39	; 0x27
    1f28:	9a 01       	movw	r18, r20
    1f2a:	ab ea       	ldi	r26, 0xAB	; 171
    1f2c:	ba ea       	ldi	r27, 0xAA	; 170
    1f2e:	0e 94 27 10 	call	0x204e	; 0x204e <__umulhisi3>
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	9c 01       	movw	r18, r24
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	82 0f       	add	r24, r18
    1f3e:	93 1f       	adc	r25, r19
    1f40:	9a 01       	movw	r18, r20
    1f42:	28 1b       	sub	r18, r24
    1f44:	39 0b       	sbc	r19, r25
    1f46:	de 01       	movw	r26, r28
    1f48:	a2 0f       	add	r26, r18
    1f4a:	b3 1f       	adc	r27, r19
    1f4c:	92 96       	adiw	r26, 0x22	; 34
    1f4e:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1f50:	ba 01       	movw	r22, r20
    1f52:	6f 5f       	subi	r22, 0xFF	; 255
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	7f a3       	std	Y+39, r23	; 0x27
    1f58:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1f5a:	21 30       	cpi	r18, 0x01	; 1
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	89 f0       	breq	.+34     	; 0x1f82 <midi_process_byte+0x15c>
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	e9 f4       	brne	.+58     	; 0x1fa0 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1f66:	0c a1       	ldd	r16, Y+36	; 0x24
    1f68:	2b a1       	ldd	r18, Y+35	; 0x23
    1f6a:	4a a1       	ldd	r20, Y+34	; 0x22
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1f72:	8d a1       	ldd	r24, Y+37	; 0x25
    1f74:	84 30       	cpi	r24, 0x04	; 4
    1f76:	a1 f0       	breq	.+40     	; 0x1fa0 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9f a3       	std	Y+39, r25	; 0x27
    1f7e:	8e a3       	std	Y+38, r24	; 0x26
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1f82:	e2 30       	cpi	r30, 0x02	; 2
    1f84:	69 f4       	brne	.+26     	; 0x1fa0 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1f86:	00 e0       	ldi	r16, 0x00	; 0
    1f88:	2b a1       	ldd	r18, Y+35	; 0x23
    1f8a:	4a a1       	ldd	r20, Y+34	; 0x22
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1f92:	8d a1       	ldd	r24, Y+37	; 0x25
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	21 f0       	breq	.+8      	; 0x1fa0 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9f a3       	std	Y+39, r25	; 0x27
    1f9e:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	08 95       	ret

00001fac <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	90 96       	adiw	r26, 0x20	; 32
    1fc2:	ed 91       	ld	r30, X+
    1fc4:	fc 91       	ld	r31, X
    1fc6:	91 97       	sbiw	r26, 0x21	; 33
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	09 f0       	breq	.+2      	; 0x1fce <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1fcc:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1fce:	86 01       	movw	r16, r12
    1fd0:	08 51       	subi	r16, 0x18	; 24
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1fda:	e8 2e       	mov	r14, r24
    1fdc:	f1 2c       	mov	r15, r1
    1fde:	e1 14       	cp	r14, r1
    1fe0:	f1 04       	cpc	r15, r1
    1fe2:	91 f0       	breq	.+36     	; 0x2008 <midi_device_process+0x5c>
    1fe4:	c0 e0       	ldi	r28, 0x00	; 0
    1fe6:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	c8 01       	movw	r24, r16
    1fec:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <bytequeue_get>
    1ff0:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1ff2:	c6 01       	movw	r24, r12
    1ff4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1ff8:	61 e0       	ldi	r22, 0x01	; 1
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2000:	21 96       	adiw	r28, 0x01	; 1
    2002:	ce 15       	cp	r28, r14
    2004:	df 05       	cpc	r29, r15
    2006:	81 f7       	brne	.-32     	; 0x1fe8 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	df 90       	pop	r13
    2016:	cf 90       	pop	r12
    2018:	08 95       	ret

0000201a <__divmodhi4>:
    201a:	97 fb       	bst	r25, 7
    201c:	07 2e       	mov	r0, r23
    201e:	16 f4       	brtc	.+4      	; 0x2024 <__divmodhi4+0xa>
    2020:	00 94       	com	r0
    2022:	07 d0       	rcall	.+14     	; 0x2032 <__divmodhi4_neg1>
    2024:	77 fd       	sbrc	r23, 7
    2026:	09 d0       	rcall	.+18     	; 0x203a <__divmodhi4_neg2>
    2028:	0e 94 36 10 	call	0x206c	; 0x206c <__udivmodhi4>
    202c:	07 fc       	sbrc	r0, 7
    202e:	05 d0       	rcall	.+10     	; 0x203a <__divmodhi4_neg2>
    2030:	3e f4       	brtc	.+14     	; 0x2040 <__divmodhi4_exit>

00002032 <__divmodhi4_neg1>:
    2032:	90 95       	com	r25
    2034:	81 95       	neg	r24
    2036:	9f 4f       	sbci	r25, 0xFF	; 255
    2038:	08 95       	ret

0000203a <__divmodhi4_neg2>:
    203a:	70 95       	com	r23
    203c:	61 95       	neg	r22
    203e:	7f 4f       	sbci	r23, 0xFF	; 255

00002040 <__divmodhi4_exit>:
    2040:	08 95       	ret

00002042 <__tablejump2__>:
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	05 90       	lpm	r0, Z+
    2048:	f4 91       	lpm	r31, Z
    204a:	e0 2d       	mov	r30, r0
    204c:	09 94       	ijmp

0000204e <__umulhisi3>:
    204e:	a2 9f       	mul	r26, r18
    2050:	b0 01       	movw	r22, r0
    2052:	b3 9f       	mul	r27, r19
    2054:	c0 01       	movw	r24, r0
    2056:	a3 9f       	mul	r26, r19
    2058:	70 0d       	add	r23, r0
    205a:	81 1d       	adc	r24, r1
    205c:	11 24       	eor	r1, r1
    205e:	91 1d       	adc	r25, r1
    2060:	b2 9f       	mul	r27, r18
    2062:	70 0d       	add	r23, r0
    2064:	81 1d       	adc	r24, r1
    2066:	11 24       	eor	r1, r1
    2068:	91 1d       	adc	r25, r1
    206a:	08 95       	ret

0000206c <__udivmodhi4>:
    206c:	aa 1b       	sub	r26, r26
    206e:	bb 1b       	sub	r27, r27
    2070:	51 e1       	ldi	r21, 0x11	; 17
    2072:	07 c0       	rjmp	.+14     	; 0x2082 <__udivmodhi4_ep>

00002074 <__udivmodhi4_loop>:
    2074:	aa 1f       	adc	r26, r26
    2076:	bb 1f       	adc	r27, r27
    2078:	a6 17       	cp	r26, r22
    207a:	b7 07       	cpc	r27, r23
    207c:	10 f0       	brcs	.+4      	; 0x2082 <__udivmodhi4_ep>
    207e:	a6 1b       	sub	r26, r22
    2080:	b7 0b       	sbc	r27, r23

00002082 <__udivmodhi4_ep>:
    2082:	88 1f       	adc	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	5a 95       	dec	r21
    2088:	a9 f7       	brne	.-22     	; 0x2074 <__udivmodhi4_loop>
    208a:	80 95       	com	r24
    208c:	90 95       	com	r25
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	08 95       	ret

00002094 <_exit>:
    2094:	f8 94       	cli

00002096 <__stop_program>:
    2096:	ff cf       	rjmp	.-2      	; 0x2096 <__stop_program>
