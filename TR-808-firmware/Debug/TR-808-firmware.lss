
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00001d96  00001e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  0080025e  0080025e  00001f88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054de  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000149c  00000000  00000000  00007906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001587  00000000  00000000  00008da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b58  00000000  00000000  0000a32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010b7  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021f0  00000000  00000000  0000bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0000e12b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	15 0c       	add	r1, r5
      b6:	13 0c       	add	r1, r3
      b8:	15 0c       	add	r1, r5
      ba:	17 0c       	add	r1, r7
      bc:	17 0c       	add	r1, r7
      be:	1d 0c       	add	r1, r13
      c0:	17 0c       	add	r1, r7
      c2:	1d 0c       	add	r1, r13
      c4:	1d 0c       	add	r1, r13
      c6:	1d 0c       	add	r1, r13
      c8:	1d 0c       	add	r1, r13
      ca:	1d 0c       	add	r1, r13
      cc:	17 0c       	add	r1, r7
      ce:	1d 0c       	add	r1, r13
      d0:	1d 0c       	add	r1, r13

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e6 e9       	ldi	r30, 0x96	; 150
      e6:	fd e1       	ldi	r31, 0x1D	; 29
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	ae 35       	cpi	r26, 0x5E	; 94
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	ae e5       	ldi	r26, 0x5E	; 94
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a4 35       	cpi	r26, 0x54	; 84
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 10 06 	call	0xc20	; 0xc20 <main>
     108:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 5e 02 	sts	0x025E, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a2 59       	subi	r26, 0x92	; 146
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 9b 04 	call	0x936	; 0x936 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	ae e6       	ldi	r26, 0x6E	; 110
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	ee e6       	ldi	r30, 0x6E	; 110
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 37 09 	call	0x126e	; 0x126e <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	ee e6       	ldi	r30, 0x6E	; 110
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29

	clear_all_trigs();
     28c:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     290:	0f 2e       	mov	r0, r31
     292:	f5 e0       	ldi	r31, 0x05	; 5
     294:	ef 2e       	mov	r14, r31
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
	for (int i = BD; i <= MA; i++) {
     29c:	c0 e0       	ldi	r28, 0x00	; 0
     29e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2a0:	0f 2e       	mov	r0, r31
     2a2:	ff e4       	ldi	r31, 0x4F	; 79
     2a4:	8f 2e       	mov	r8, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	9f 2e       	mov	r9, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	fa e4       	ldi	r31, 0x4A	; 74
     2b0:	af 2e       	mov	r10, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	bf 2e       	mov	r11, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fe e4       	ldi	r31, 0x4E	; 78
     2bc:	cf 2e       	mov	r12, r31
     2be:	f4 e0       	ldi	r31, 0x04	; 4
     2c0:	df 2e       	mov	r13, r31
     2c2:	f0 2d       	mov	r31, r0
     2c4:	0f 2e       	mov	r0, r31
     2c6:	f3 e3       	ldi	r31, 0x33	; 51
     2c8:	5f 2e       	mov	r5, r31
     2ca:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fe e6       	ldi	r31, 0x6E	; 110
     2d0:	6f 2e       	mov	r6, r31
     2d2:	f2 e0       	ldi	r31, 0x02	; 2
     2d4:	7f 2e       	mov	r7, r31
     2d6:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2d8:	f4 01       	movw	r30, r8
     2da:	80 81       	ld	r24, Z
     2dc:	81 fb       	bst	r24, 1
     2de:	00 27       	eor	r16, r16
     2e0:	00 f9       	bld	r16, 0
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	f5 01       	movw	r30, r10
     2e6:	20 81       	ld	r18, Z
     2e8:	f6 01       	movw	r30, r12
     2ea:	90 81       	ld	r25, Z
     2ec:	92 95       	swap	r25
     2ee:	96 95       	lsr	r25
     2f0:	97 70       	andi	r25, 0x07	; 7
     2f2:	81 70       	andi	r24, 0x01	; 1
     2f4:	88 0f       	add	r24, r24
     2f6:	88 0f       	add	r24, r24
     2f8:	88 0f       	add	r24, r24
     2fa:	89 2b       	or	r24, r25
     2fc:	f8 01       	movw	r30, r16
     2fe:	e2 95       	swap	r30
     300:	f2 95       	swap	r31
     302:	f0 7f       	andi	r31, 0xF0	; 240
     304:	fe 27       	eor	r31, r30
     306:	e0 7f       	andi	r30, 0xF0	; 240
     308:	fe 27       	eor	r31, r30
     30a:	92 2f       	mov	r25, r18
     30c:	91 70       	andi	r25, 0x01	; 1
     30e:	59 9e       	mul	r5, r25
     310:	e0 0d       	add	r30, r0
     312:	f1 1d       	adc	r31, r1
     314:	11 24       	eor	r1, r1
     316:	e8 0f       	add	r30, r24
     318:	f1 1d       	adc	r31, r1
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e2 58       	subi	r30, 0x82	; 130
     320:	fc 4f       	sbci	r31, 0xFC	; 252
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	0c 2e       	mov	r0, r28
     328:	02 c0       	rjmp	.+4      	; 0x32e <trigger_step+0xc0>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <trigger_step+0xbc>
     332:	80 ff       	sbrs	r24, 0
     334:	38 c0       	rjmp	.+112    	; 0x3a6 <trigger_step+0x138>
			turn_on(drum_hit[i].led_index);
     336:	f7 01       	movw	r30, r14
     338:	80 81       	ld	r24, Z
     33a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     33e:	de 01       	movw	r26, r28
     340:	aa 0f       	add	r26, r26
     342:	bb 1f       	adc	r27, r27
     344:	ac 0f       	add	r26, r28
     346:	bd 1f       	adc	r27, r29
     348:	aa 0f       	add	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	a0 50       	subi	r26, 0x00	; 0
     34e:	bf 4f       	sbci	r27, 0xFF	; 255
     350:	ec 91       	ld	r30, X
     352:	8e 2f       	mov	r24, r30
     354:	88 1f       	adc	r24, r24
     356:	88 27       	eor	r24, r24
     358:	88 1f       	adc	r24, r24
     35a:	11 96       	adiw	r26, 0x01	; 1
     35c:	ec 91       	ld	r30, X
     35e:	e7 70       	andi	r30, 0x07	; 7
     360:	ee 0f       	add	r30, r30
     362:	e8 2b       	or	r30, r24
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	e2 59       	subi	r30, 0x92	; 146
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	d7 01       	movw	r26, r14
     36c:	13 97       	sbiw	r26, 0x03	; 3
     36e:	9c 91       	ld	r25, X
     370:	80 81       	ld	r24, Z
     372:	89 2b       	or	r24, r25
     374:	80 83       	st	Z, r24
     376:	f7 01       	movw	r30, r14
     378:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     37a:	80 81       	ld	r24, Z
     37c:	8f 3f       	cpi	r24, 0xFF	; 255
     37e:	99 f0       	breq	.+38     	; 0x3a6 <trigger_step+0x138>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     380:	f3 01       	movw	r30, r6
     382:	23 81       	ldd	r18, Z+3	; 0x03
     384:	fe 01       	movw	r30, r28
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ec 0f       	add	r30, r28
     38c:	fd 1f       	adc	r31, r29
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	ec 5f       	subi	r30, 0xFC	; 252
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	90 81       	ld	r25, Z
     398:	91 70       	andi	r25, 0x01	; 1
     39a:	91 95       	neg	r25
     39c:	92 27       	eor	r25, r18
     39e:	89 23       	and	r24, r25
     3a0:	82 27       	eor	r24, r18
     3a2:	f3 01       	movw	r30, r6
     3a4:	83 83       	std	Z+3, r24	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3a6:	21 96       	adiw	r28, 0x01	; 1
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	ef 0e       	add	r14, r31
     3ac:	f1 1c       	adc	r15, r1
     3ae:	c0 31       	cpi	r28, 0x10	; 16
     3b0:	d1 05       	cpc	r29, r1
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <trigger_step+0x148>
     3b4:	91 cf       	rjmp	.-222    	; 0x2d8 <trigger_step+0x6a>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	08 95       	ret

000003d6 <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3d6:	80 91 39 02 	lds	r24, 0x0239
     3da:	86 ff       	sbrs	r24, 6
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3de:	e9 e3       	ldi	r30, 0x39	; 57
     3e0:	f2 e0       	ldi	r31, 0x02	; 2
     3e2:	8f 7b       	andi	r24, 0xBF	; 191
     3e4:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3ee:	80 91 3b 02 	lds	r24, 0x023B
     3f2:	86 ff       	sbrs	r24, 6
     3f4:	08 c0       	rjmp	.+16     	; 0x406 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3f6:	eb e3       	ldi	r30, 0x3B	; 59
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	8f 7b       	andi	r24, 0xBF	; 191
     3fc:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     406:	80 91 3d 02 	lds	r24, 0x023D
     40a:	86 ff       	sbrs	r24, 6
     40c:	08 c0       	rjmp	.+16     	; 0x41e <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     40e:	ed e3       	ldi	r30, 0x3D	; 61
     410:	f2 e0       	ldi	r31, 0x02	; 2
     412:	8f 7b       	andi	r24, 0xBF	; 191
     414:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     41e:	80 91 3f 02 	lds	r24, 0x023F
     422:	86 ff       	sbrs	r24, 6
     424:	08 c0       	rjmp	.+16     	; 0x436 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     426:	ef e3       	ldi	r30, 0x3F	; 63
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	8f 7b       	andi	r24, 0xBF	; 191
     42c:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     436:	80 91 41 02 	lds	r24, 0x0241
     43a:	86 ff       	sbrs	r24, 6
     43c:	08 c0       	rjmp	.+16     	; 0x44e <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     43e:	e1 e4       	ldi	r30, 0x41	; 65
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	8f 7b       	andi	r24, 0xBF	; 191
     444:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     44e:	80 91 43 02 	lds	r24, 0x0243
     452:	86 ff       	sbrs	r24, 6
     454:	08 c0       	rjmp	.+16     	; 0x466 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     456:	e3 e4       	ldi	r30, 0x43	; 67
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	8f 7b       	andi	r24, 0xBF	; 191
     45c:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	85 e0       	ldi	r24, 0x05	; 5
     462:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     466:	80 91 45 02 	lds	r24, 0x0245
     46a:	86 ff       	sbrs	r24, 6
     46c:	08 c0       	rjmp	.+16     	; 0x47e <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     46e:	e5 e4       	ldi	r30, 0x45	; 69
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	8f 7b       	andi	r24, 0xBF	; 191
     474:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     47e:	80 91 47 02 	lds	r24, 0x0247
     482:	86 ff       	sbrs	r24, 6
     484:	08 c0       	rjmp	.+16     	; 0x496 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     486:	e7 e4       	ldi	r30, 0x47	; 71
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	8f 7b       	andi	r24, 0xBF	; 191
     48c:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     496:	80 91 49 02 	lds	r24, 0x0249
     49a:	86 ff       	sbrs	r24, 6
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     49e:	e9 e4       	ldi	r30, 0x49	; 73
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	8f 7b       	andi	r24, 0xBF	; 191
     4a4:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4ae:	80 91 4b 02 	lds	r24, 0x024B
     4b2:	86 ff       	sbrs	r24, 6
     4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4b6:	eb e4       	ldi	r30, 0x4B	; 75
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	8f 7b       	andi	r24, 0xBF	; 191
     4bc:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	89 e0       	ldi	r24, 0x09	; 9
     4c2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4c6:	80 91 4d 02 	lds	r24, 0x024D
     4ca:	86 ff       	sbrs	r24, 6
     4cc:	08 c0       	rjmp	.+16     	; 0x4de <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4ce:	ed e4       	ldi	r30, 0x4D	; 77
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	8f 7b       	andi	r24, 0xBF	; 191
     4d4:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4de:	08 95       	ret

000004e0 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	8f 93       	push	r24
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4f0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4f2:	ee e6       	ldi	r30, 0x6E	; 110
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8d 7f       	andi	r24, 0xFD	; 253
     4fa:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     4fc:	80 91 7b 03 	lds	r24, 0x037B
     500:	88 60       	ori	r24, 0x08	; 8
     502:	80 93 7b 03 	sts	0x037B, r24
	
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	8f 91       	pop	r24
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     540:	e9 e7       	ldi	r30, 0x79	; 121
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	81 81       	ldd	r24, Z+1	; 0x01
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	81 83       	std	Z+1, r24	; 0x01
     54a:	90 81       	ld	r25, Z
     54c:	89 13       	cpse	r24, r25
     54e:	b7 c0       	rjmp	.+366    	; 0x6be <__vector_11+0x1a8>
	{
		flag.next_step = 1;
     550:	80 91 7b 03 	lds	r24, 0x037B
     554:	81 60       	ori	r24, 0x01	; 1
     556:	80 93 7b 03 	sts	0x037B, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     55a:	eb e7       	ldi	r30, 0x7B	; 123
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	80 81       	ld	r24, Z
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	98 0f       	add	r25, r24
     564:	93 70       	andi	r25, 0x03	; 3
     566:	8c 7f       	andi	r24, 0xFC	; 252
     568:	89 2b       	or	r24, r25
     56a:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     56c:	10 92 7a 02 	sts	0x027A, r1
		if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) { 
     570:	ee e4       	ldi	r30, 0x4E	; 78
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	90 81       	ld	r25, Z
     576:	89 2f       	mov	r24, r25
     578:	82 95       	swap	r24
     57a:	86 95       	lsr	r24
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	20 91 4f 04 	lds	r18, 0x044F
     582:	21 70       	andi	r18, 0x01	; 1
     584:	22 0f       	add	r18, r18
     586:	22 0f       	add	r18, r18
     588:	22 0f       	add	r18, r18
     58a:	28 2b       	or	r18, r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	82 0f       	add	r24, r18
     590:	38 2f       	mov	r19, r24
     592:	32 95       	swap	r19
     594:	33 0f       	add	r19, r19
     596:	30 7e       	andi	r19, 0xE0	; 224
     598:	9f 71       	andi	r25, 0x1F	; 31
     59a:	93 2b       	or	r25, r19
     59c:	90 83       	st	Z, r25
     59e:	83 fb       	bst	r24, 3
     5a0:	99 27       	eor	r25, r25
     5a2:	90 f9       	bld	r25, 0
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	89 2b       	or	r24, r25
     5aa:	81 83       	std	Z+1, r24	; 0x01
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	81 fb       	bst	r24, 1
     5b0:	44 27       	eor	r20, r20
     5b2:	40 f9       	bld	r20, 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	44 58       	subi	r20, 0x84	; 132
     5b8:	5c 4f       	sbci	r21, 0xFC	; 252
     5ba:	fa 01       	movw	r30, r20
     5bc:	e0 53       	subi	r30, 0x30	; 48
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 81       	ld	r24, Z
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	28 17       	cp	r18, r24
     5c6:	39 07       	cpc	r19, r25
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_11+0xb6>
     5ca:	79 c0       	rjmp	.+242    	; 0x6be <__vector_11+0x1a8>
     5cc:	80 91 7d 03 	lds	r24, 0x037D
     5d0:	81 ff       	sbrs	r24, 1
     5d2:	75 c0       	rjmp	.+234    	; 0x6be <__vector_11+0x1a8>
			flag.new_measure = 1;
     5d4:	80 91 7b 03 	lds	r24, 0x037B
     5d8:	80 62       	ori	r24, 0x20	; 32
     5da:	80 93 7b 03 	sts	0x037B, r24
			sequencer.current_step = 0;
     5de:	ee e4       	ldi	r30, 0x4E	; 78
     5e0:	f4 e0       	ldi	r31, 0x04	; 4
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 71       	andi	r24, 0x1F	; 31
     5e6:	80 83       	st	Z, r24
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying 
     5ee:	80 91 4d 04 	lds	r24, 0x044D
     5f2:	80 31       	cpi	r24, 0x10	; 16
     5f4:	f1 f0       	breq	.+60     	; 0x632 <__vector_11+0x11c>
				
				if (sequencer.part_playing == SECOND) {
     5f6:	80 91 4f 04 	lds	r24, 0x044F
     5fa:	81 ff       	sbrs	r24, 1
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <__vector_11+0xf6>
					turn_off(SECOND_PART_LED);
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <turn_off>
					turn_on(FIRST_PART_LED);
     604:	8a e2       	ldi	r24, 0x2A	; 42
     606:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
     60a:	06 c0       	rjmp	.+12     	; 0x618 <__vector_11+0x102>
				} else {
					turn_off(FIRST_PART_LED);
     60c:	8a e2       	ldi	r24, 0x2A	; 42
     60e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <turn_off>
					turn_on(SECOND_PART_LED);
     612:	8b e2       	ldi	r24, 0x2B	; 43
     614:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
				}
				sequencer.part_playing ^= 1 << 0;
     618:	80 91 4f 04 	lds	r24, 0x044F
     61c:	81 fb       	bst	r24, 1
     61e:	99 27       	eor	r25, r25
     620:	90 f9       	bld	r25, 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	89 27       	eor	r24, r25
     626:	ee e4       	ldi	r30, 0x4E	; 78
     628:	f4 e0       	ldi	r31, 0x04	; 4
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	80 fb       	bst	r24, 0
     62e:	91 f9       	bld	r25, 1
     630:	91 83       	std	Z+1, r25	; 0x01
			}
			//update step number
			sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
     632:	80 91 4f 04 	lds	r24, 0x044F
     636:	82 fb       	bst	r24, 2
     638:	00 27       	eor	r16, r16
     63a:	00 f9       	bld	r16, 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	04 58       	subi	r16, 0x84	; 132
     640:	1c 4f       	sbci	r17, 0xFC	; 252
     642:	f8 01       	movw	r30, r16
     644:	e0 53       	subi	r30, 0x30	; 48
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	80 91 4e 04 	lds	r24, 0x044E
     64c:	8f 71       	andi	r24, 0x1F	; 31
     64e:	80 83       	st	Z, r24
			update_step_led_mask();
     650:	0e 94 bd 04 	call	0x97a	; 0x97a <update_step_led_mask>
			
			//handle pre-scale change
			if (flag.pre_scale_change) {
     654:	80 91 7b 03 	lds	r24, 0x037B
     658:	86 ff       	sbrs	r24, 6
     65a:	0b c0       	rjmp	.+22     	; 0x672 <__vector_11+0x15c>
				
				flag.pre_scale_change = 0;
     65c:	8f 7b       	andi	r24, 0xBF	; 191
     65e:	80 93 7b 03 	sts	0x037B, r24
				internal_clock.divider = pre_scale[pre_scale_index];
     662:	e0 91 16 02 	lds	r30, 0x0216
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	ee 5e       	subi	r30, 0xEE	; 238
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	80 81       	ld	r24, Z
     66e:	80 93 79 02 	sts	0x0279, r24
				
			}
			
			//handle variation
			if (flag.variation_change == 1) {
     672:	80 91 7b 03 	lds	r24, 0x037B
     676:	82 ff       	sbrs	r24, 2
     678:	16 c0       	rjmp	.+44     	; 0x6a6 <__vector_11+0x190>
				flag.variation_change = 0;
     67a:	8b 7f       	andi	r24, 0xFB	; 251
     67c:	80 93 7b 03 	sts	0x037B, r24
				switch (sequencer.variation_mode) {
     680:	80 91 4b 04 	lds	r24, 0x044B
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	49 f0       	breq	.+18     	; 0x69a <__vector_11+0x184>
     688:	10 f0       	brcs	.+4      	; 0x68e <__vector_11+0x178>
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	c1 f4       	brne	.+48     	; 0x6be <__vector_11+0x1a8>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     68e:	ea e4       	ldi	r30, 0x4A	; 74
     690:	f4 e0       	ldi	r31, 0x04	; 4
     692:	80 81       	ld	r24, Z
     694:	8e 7f       	andi	r24, 0xFE	; 254
     696:	80 83       	st	Z, r24
					break;
     698:	12 c0       	rjmp	.+36     	; 0x6be <__vector_11+0x1a8>
				case VAR_B:
					sequencer.variation = VAR_B;
     69a:	ea e4       	ldi	r30, 0x4A	; 74
     69c:	f4 e0       	ldi	r31, 0x04	; 4
     69e:	80 81       	ld	r24, Z
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	80 83       	st	Z, r24
					break;	
     6a4:	0c c0       	rjmp	.+24     	; 0x6be <__vector_11+0x1a8>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     6a6:	80 91 4b 04 	lds	r24, 0x044B
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	41 f4       	brne	.+16     	; 0x6be <__vector_11+0x1a8>
					
				sequencer.variation ^= 1<<0; //toggle state
     6ae:	ea e4       	ldi	r30, 0x4A	; 74
     6b0:	f4 e0       	ldi	r31, 0x04	; 4
     6b2:	80 81       	ld	r24, Z
     6b4:	98 2f       	mov	r25, r24
     6b6:	90 95       	com	r25
     6b8:	90 fb       	bst	r25, 0
     6ba:	80 f9       	bld	r24, 0
     6bc:	80 83       	st	Z, r24
	
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     6be:	e9 e7       	ldi	r30, 0x79	; 121
     6c0:	f2 e0       	ldi	r31, 0x02	; 2
     6c2:	80 81       	ld	r24, Z
     6c4:	86 95       	lsr	r24
     6c6:	91 81       	ldd	r25, Z+1	; 0x01
     6c8:	98 13       	cpse	r25, r24
     6ca:	e3 c0       	rjmp	.+454    	; 0x892 <__vector_11+0x37c>
		flag.half_step = 1;
     6cc:	80 91 7b 03 	lds	r24, 0x037B
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	80 93 7b 03 	sts	0x037B, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     6d6:	40 91 d3 01 	lds	r20, 0x01D3
     6da:	30 91 d6 01 	lds	r19, 0x01D6
     6de:	ee e6       	ldi	r30, 0x6E	; 110
     6e0:	f2 e0       	ldi	r31, 0x02	; 2
     6e2:	83 2f       	mov	r24, r19
     6e4:	84 2b       	or	r24, r20
     6e6:	80 95       	com	r24
     6e8:	95 81       	ldd	r25, Z+5	; 0x05
     6ea:	89 23       	and	r24, r25
     6ec:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     6ee:	80 91 7d 03 	lds	r24, 0x037D
     6f2:	81 ff       	sbrs	r24, 1
     6f4:	a0 c0       	rjmp	.+320    	; 0x836 <__vector_11+0x320>
	
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     6f6:	80 91 4a 04 	lds	r24, 0x044A
     6fa:	81 70       	andi	r24, 0x01	; 1
     6fc:	c8 2f       	mov	r28, r24
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	d8 2f       	mov	r29, r24
     702:	02 e5       	ldi	r16, 0x52	; 82
     704:	14 e0       	ldi	r17, 0x04	; 4
     706:	f8 01       	movw	r30, r16
     708:	80 81       	ld	r24, Z
     70a:	93 e3       	ldi	r25, 0x33	; 51
     70c:	9c 9f       	mul	r25, r28
     70e:	f0 01       	movw	r30, r0
     710:	9d 9f       	mul	r25, r29
     712:	f0 0d       	add	r31, r0
     714:	11 24       	eor	r1, r1
     716:	e8 0f       	add	r30, r24
     718:	f1 1d       	adc	r31, r1
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ee 53       	subi	r30, 0x3E	; 62
     720:	fc 4f       	sbci	r31, 0xFC	; 252
     722:	90 81       	ld	r25, Z
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	ee e6       	ldi	r30, 0x6E	; 110
     728:	f2 e0       	ldi	r31, 0x02	; 2
     72a:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     72c:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     72e:	0e 94 ae 04 	call	0x95c	; 0x95c <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     732:	f8 01       	movw	r30, r16
     734:	80 81       	ld	r24, Z
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	fc 01       	movw	r30, r24
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e8 0f       	add	r30, r24
     740:	f9 1f       	adc	r31, r25
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	e0 50       	subi	r30, 0x00	; 0
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	85 81       	ldd	r24, Z+5	; 0x05
     74c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
								
			switch (sequencer.variation_mode) {
     750:	20 91 4b 04 	lds	r18, 0x044B
     754:	21 30       	cpi	r18, 0x01	; 1
     756:	49 f0       	breq	.+18     	; 0x76a <__vector_11+0x254>
     758:	18 f0       	brcs	.+6      	; 0x760 <__vector_11+0x24a>
     75a:	22 30       	cpi	r18, 0x02	; 2
     75c:	a1 f0       	breq	.+40     	; 0x786 <__vector_11+0x270>
     75e:	20 c0       	rjmp	.+64     	; 0x7a0 <__vector_11+0x28a>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     760:	80 91 d3 01 	lds	r24, 0x01D3
     764:	80 93 53 04 	sts	0x0453, r24
					break;					
     768:	1b c0       	rjmp	.+54     	; 0x7a0 <__vector_11+0x28a>
				case VAR_B:
					if (flag.variation_change == 1) {
     76a:	80 91 7b 03 	lds	r24, 0x037B
     76e:	82 ff       	sbrs	r24, 2
     770:	05 c0       	rjmp	.+10     	; 0x77c <__vector_11+0x266>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     772:	80 91 d3 01 	lds	r24, 0x01D3
     776:	80 93 53 04 	sts	0x0453, r24
     77a:	12 c0       	rjmp	.+36     	; 0x7a0 <__vector_11+0x28a>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     77c:	80 91 d6 01 	lds	r24, 0x01D6
     780:	80 93 53 04 	sts	0x0453, r24
     784:	0d c0       	rjmp	.+26     	; 0x7a0 <__vector_11+0x28a>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     786:	80 91 4a 04 	lds	r24, 0x044A
     78a:	80 fd       	sbrc	r24, 0
     78c:	05 c0       	rjmp	.+10     	; 0x798 <__vector_11+0x282>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     78e:	80 91 d3 01 	lds	r24, 0x01D3
     792:	80 93 53 04 	sts	0x0453, r24
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <__vector_11+0x28a>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     798:	80 91 d6 01 	lds	r24, 0x01D6
     79c:	80 93 53 04 	sts	0x0453, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     7a0:	80 91 7b 02 	lds	r24, 0x027B
     7a4:	83 70       	andi	r24, 0x03	; 3
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	02 97       	sbiw	r24, 0x02	; 2
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <__vector_11+0x298>
     7ac:	6b c0       	rjmp	.+214    	; 0x884 <__vector_11+0x36e>
				
				if (flag.variation_change == 1) {
     7ae:	80 91 7b 03 	lds	r24, 0x037B
     7b2:	82 ff       	sbrs	r24, 2
     7b4:	2a c0       	rjmp	.+84     	; 0x80a <__vector_11+0x2f4>
					
					switch (sequencer.variation_mode) {
     7b6:	21 30       	cpi	r18, 0x01	; 1
     7b8:	61 f0       	breq	.+24     	; 0x7d2 <__vector_11+0x2bc>
     7ba:	18 f0       	brcs	.+6      	; 0x7c2 <__vector_11+0x2ac>
     7bc:	22 30       	cpi	r18, 0x02	; 2
     7be:	89 f0       	breq	.+34     	; 0x7e2 <__vector_11+0x2cc>
     7c0:	24 c0       	rjmp	.+72     	; 0x80a <__vector_11+0x2f4>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7c2:	e3 e5       	ldi	r30, 0x53	; 83
     7c4:	f4 e0       	ldi	r31, 0x04	; 4
     7c6:	90 91 d6 01 	lds	r25, 0x01D6
     7ca:	80 81       	ld	r24, Z
     7cc:	89 2b       	or	r24, r25
     7ce:	80 83       	st	Z, r24
							break;
     7d0:	59 c0       	rjmp	.+178    	; 0x884 <__vector_11+0x36e>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7d2:	e3 e5       	ldi	r30, 0x53	; 83
     7d4:	f4 e0       	ldi	r31, 0x04	; 4
     7d6:	90 91 d6 01 	lds	r25, 0x01D6
     7da:	80 81       	ld	r24, Z
     7dc:	89 2b       	or	r24, r25
     7de:	80 83       	st	Z, r24
     7e0:	51 c0       	rjmp	.+162    	; 0x884 <__vector_11+0x36e>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     7e2:	80 91 4a 04 	lds	r24, 0x044A
     7e6:	80 fd       	sbrc	r24, 0
     7e8:	08 c0       	rjmp	.+16     	; 0x7fa <__vector_11+0x2e4>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7ea:	e3 e5       	ldi	r30, 0x53	; 83
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	90 91 d6 01 	lds	r25, 0x01D6
     7f2:	80 81       	ld	r24, Z
     7f4:	89 2b       	or	r24, r25
     7f6:	80 83       	st	Z, r24
     7f8:	0a c0       	rjmp	.+20     	; 0x80e <__vector_11+0x2f8>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7fa:	e3 e5       	ldi	r30, 0x53	; 83
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	90 91 d3 01 	lds	r25, 0x01D3
     802:	80 81       	ld	r24, Z
     804:	89 2b       	or	r24, r25
     806:	80 83       	st	Z, r24
     808:	02 c0       	rjmp	.+4      	; 0x80e <__vector_11+0x2f8>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     80a:	22 30       	cpi	r18, 0x02	; 2
     80c:	d9 f5       	brne	.+118    	; 0x884 <__vector_11+0x36e>
						if (sequencer.variation == VAR_A) {
     80e:	80 91 4a 04 	lds	r24, 0x044A
     812:	80 fd       	sbrc	r24, 0
     814:	08 c0       	rjmp	.+16     	; 0x826 <__vector_11+0x310>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     816:	e3 e5       	ldi	r30, 0x53	; 83
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	90 91 d6 01 	lds	r25, 0x01D6
     81e:	80 81       	ld	r24, Z
     820:	89 2b       	or	r24, r25
     822:	80 83       	st	Z, r24
     824:	2f c0       	rjmp	.+94     	; 0x884 <__vector_11+0x36e>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     826:	e3 e5       	ldi	r30, 0x53	; 83
     828:	f4 e0       	ldi	r31, 0x04	; 4
     82a:	90 91 d3 01 	lds	r25, 0x01D3
     82e:	80 81       	ld	r24, Z
     830:	89 2b       	or	r24, r25
     832:	80 83       	st	Z, r24
     834:	27 c0       	rjmp	.+78     	; 0x884 <__vector_11+0x36e>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     836:	ee e6       	ldi	r30, 0x6E	; 110
     838:	f2 e0       	ldi	r31, 0x02	; 2
     83a:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     83c:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     83e:	20 91 4b 04 	lds	r18, 0x044B
     842:	21 30       	cpi	r18, 0x01	; 1
     844:	31 f0       	breq	.+12     	; 0x852 <__vector_11+0x33c>
     846:	10 f0       	brcs	.+4      	; 0x84c <__vector_11+0x336>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	61 f4       	brne	.+24     	; 0x864 <__vector_11+0x34e>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     84c:	40 93 53 04 	sts	0x0453, r20
				break;
     850:	09 c0       	rjmp	.+18     	; 0x864 <__vector_11+0x34e>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     852:	30 93 53 04 	sts	0x0453, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     856:	80 91 7b 02 	lds	r24, 0x027B
     85a:	83 70       	andi	r24, 0x03	; 3
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	02 97       	sbiw	r24, 0x02	; 2
     860:	8c f4       	brge	.+34     	; 0x884 <__vector_11+0x36e>
     862:	0d c0       	rjmp	.+26     	; 0x87e <__vector_11+0x368>
     864:	80 91 7b 02 	lds	r24, 0x027B
     868:	83 70       	andi	r24, 0x03	; 3
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	02 97       	sbiw	r24, 0x02	; 2
     86e:	54 f4       	brge	.+20     	; 0x884 <__vector_11+0x36e>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     870:	22 30       	cpi	r18, 0x02	; 2
     872:	29 f4       	brne	.+10     	; 0x87e <__vector_11+0x368>
     874:	e3 e5       	ldi	r30, 0x53	; 83
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	80 81       	ld	r24, Z
     87a:	38 2b       	or	r19, r24
     87c:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     884:	ee e6       	ldi	r30, 0x6E	; 110
     886:	f2 e0       	ldi	r31, 0x02	; 2
     888:	90 91 53 04 	lds	r25, 0x0453
     88c:	85 81       	ldd	r24, Z+5	; 0x05
     88e:	89 2b       	or	r24, r25
     890:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	bf 91       	pop	r27
     89c:	af 91       	pop	r26
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	7f 91       	pop	r23
     8a4:	6f 91       	pop	r22
     8a6:	5f 91       	pop	r21
     8a8:	4f 91       	pop	r20
     8aa:	3f 91       	pop	r19
     8ac:	2f 91       	pop	r18
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9c 01       	movw	r18, r24
     8c4:	22 0f       	add	r18, r18
     8c6:	33 1f       	adc	r19, r19
     8c8:	82 0f       	add	r24, r18
     8ca:	93 1f       	adc	r25, r19
     8cc:	dc 01       	movw	r26, r24
     8ce:	a8 59       	subi	r26, 0x98	; 152
     8d0:	be 4f       	sbci	r27, 0xFE	; 254
     8d2:	2c 91       	ld	r18, X
     8d4:	e2 2f       	mov	r30, r18
     8d6:	ef 70       	andi	r30, 0x0F	; 15
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	e2 59       	subi	r30, 0x92	; 146
     8dc:	fd 4f       	sbci	r31, 0xFD	; 253
     8de:	ec 01       	movw	r28, r24
     8e0:	c9 59       	subi	r28, 0x99	; 153
     8e2:	de 4f       	sbci	r29, 0xFE	; 254
     8e4:	30 81       	ld	r19, Z
     8e6:	88 81       	ld	r24, Y
     8e8:	83 2b       	or	r24, r19
     8ea:	80 83       	st	Z, r24
	led[led_index].state = 1;
     8ec:	82 2f       	mov	r24, r18
     8ee:	80 61       	ori	r24, 0x10	; 16
     8f0:	8c 93       	st	X, r24

}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <turn_off>:

void turn_off(uint8_t led_index) {
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9c 01       	movw	r18, r24
     900:	22 0f       	add	r18, r18
     902:	33 1f       	adc	r19, r19
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	dc 01       	movw	r26, r24
     90a:	a8 59       	subi	r26, 0x98	; 152
     90c:	be 4f       	sbci	r27, 0xFE	; 254
     90e:	2c 91       	ld	r18, X
     910:	e2 2f       	mov	r30, r18
     912:	ef 70       	andi	r30, 0x0F	; 15
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	e2 59       	subi	r30, 0x92	; 146
     918:	fd 4f       	sbci	r31, 0xFD	; 253
     91a:	ec 01       	movw	r28, r24
     91c:	c9 59       	subi	r28, 0x99	; 153
     91e:	de 4f       	sbci	r29, 0xFE	; 254
     920:	88 81       	ld	r24, Y
     922:	80 95       	com	r24
     924:	90 81       	ld	r25, Z
     926:	89 23       	and	r24, r25
     928:	80 83       	st	Z, r24
	led[led_index].state = 0;
     92a:	82 2f       	mov	r24, r18
     92c:	8f 7e       	andi	r24, 0xEF	; 239
     92e:	8c 93       	st	X, r24
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     936:	28 2f       	mov	r18, r24
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	f9 01       	movw	r30, r18
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	2e 0f       	add	r18, r30
     942:	3f 1f       	adc	r19, r31
     944:	f9 01       	movw	r30, r18
     946:	e8 59       	subi	r30, 0x98	; 152
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	90 81       	ld	r25, Z
     94c:	94 ff       	sbrs	r25, 4
     94e:	03 c0       	rjmp	.+6      	; 0x956 <toggle+0x20>
		
		turn_off(led_index);
     950:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <turn_off>
     954:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     956:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
     95a:	08 95       	ret

0000095c <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     95c:	ee e6       	ldi	r30, 0x6E	; 110
     95e:	f2 e0       	ldi	r31, 0x02	; 2
     960:	82 81       	ldd	r24, Z+2	; 0x02
     962:	8f 70       	andi	r24, 0x0F	; 15
     964:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     966:	87 81       	ldd	r24, Z+7	; 0x07
     968:	80 72       	andi	r24, 0x20	; 32
     96a:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     96c:	83 81       	ldd	r24, Z+3	; 0x03
     96e:	8f 70       	andi	r24, 0x0F	; 15
     970:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     972:	86 81       	ldd	r24, Z+6	; 0x06
     974:	8f 7c       	andi	r24, 0xCF	; 207
     976:	86 83       	std	Z+6, r24	; 0x06
     978:	08 95       	ret

0000097a <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     97a:	2f 92       	push	r2
     97c:	3f 92       	push	r3
     97e:	4f 92       	push	r4
     980:	5f 92       	push	r5
     982:	6f 92       	push	r6
     984:	7f 92       	push	r7
     986:	8f 92       	push	r8
     988:	9f 92       	push	r9
     98a:	af 92       	push	r10
     98c:	bf 92       	push	r11
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     99e:	22 e2       	ldi	r18, 0x22	; 34
     9a0:	e2 ec       	ldi	r30, 0xC2	; 194
     9a2:	f3 e0       	ldi	r31, 0x03	; 3
     9a4:	df 01       	movw	r26, r30
     9a6:	42 2f       	mov	r20, r18
     9a8:	1d 92       	st	X+, r1
     9aa:	4a 95       	dec	r20
     9ac:	e9 f7       	brne	.-6      	; 0x9a8 <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     9ae:	e8 e2       	ldi	r30, 0x28	; 40
     9b0:	f4 e0       	ldi	r31, 0x04	; 4
     9b2:	df 01       	movw	r26, r30
     9b4:	1d 92       	st	X+, r1
     9b6:	2a 95       	dec	r18
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9ba:	20 91 4f 04 	lds	r18, 0x044F
     9be:	22 fb       	bst	r18, 2
     9c0:	88 27       	eor	r24, r24
     9c2:	80 f9       	bld	r24, 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	00 e0       	ldi	r16, 0x00	; 0
     9c8:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9ca:	6c 01       	movw	r12, r24
     9cc:	cc 0c       	add	r12, r12
     9ce:	dd 1c       	adc	r13, r13
     9d0:	cc 0c       	add	r12, r12
     9d2:	dd 1c       	adc	r13, r13
     9d4:	cc 0c       	add	r12, r12
     9d6:	dd 1c       	adc	r13, r13
     9d8:	cc 0c       	add	r12, r12
     9da:	dd 1c       	adc	r13, r13
     9dc:	ee 24       	eor	r14, r14
     9de:	e3 94       	inc	r14
     9e0:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     9e2:	5c 01       	movw	r10, r24
     9e4:	b1 e2       	ldi	r27, 0x21	; 33
     9e6:	ab 0e       	add	r10, r27
     9e8:	b1 1c       	adc	r11, r1
     9ea:	95 01       	movw	r18, r10
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	f9 01       	movw	r30, r18
     9f2:	e4 58       	subi	r30, 0x84	; 132
     9f4:	fc 4f       	sbci	r31, 0xFC	; 252
     9f6:	5f 01       	movw	r10, r30
     9f8:	0f 2e       	mov	r0, r31
     9fa:	f2 ee       	ldi	r31, 0xE2	; 226
     9fc:	8f 2e       	mov	r8, r31
     9fe:	f3 e0       	ldi	r31, 0x03	; 3
     a00:	9f 2e       	mov	r9, r31
     a02:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a04:	3c 01       	movw	r6, r24
     a06:	f4 e5       	ldi	r31, 0x54	; 84
     a08:	6f 0e       	add	r6, r31
     a0a:	71 1c       	adc	r7, r1
     a0c:	93 01       	movw	r18, r6
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	a9 01       	movw	r20, r18
     a14:	44 58       	subi	r20, 0x84	; 132
     a16:	5c 4f       	sbci	r21, 0xFC	; 252
     a18:	3a 01       	movw	r6, r20
     a1a:	0f 2e       	mov	r0, r31
     a1c:	f8 e4       	ldi	r31, 0x48	; 72
     a1e:	4f 2e       	mov	r4, r31
     a20:	f4 e0       	ldi	r31, 0x04	; 4
     a22:	5f 2e       	mov	r5, r31
     a24:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     a26:	84 58       	subi	r24, 0x84	; 132
     a28:	9c 4f       	sbci	r25, 0xFC	; 252
     a2a:	1c 01       	movw	r2, r24
     a2c:	50 ed       	ldi	r21, 0xD0	; 208
     a2e:	25 0e       	add	r2, r21
     a30:	31 1c       	adc	r3, r1
     a32:	52 c0       	rjmp	.+164    	; 0xad8 <update_step_led_mask+0x15e>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a34:	9e 01       	movw	r18, r28
     a36:	08 2e       	mov	r0, r24
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <update_step_led_mask+0xc4>
     a3a:	36 95       	lsr	r19
     a3c:	27 95       	ror	r18
     a3e:	0a 94       	dec	r0
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <update_step_led_mask+0xc0>
     a42:	20 ff       	sbrs	r18, 0
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <update_step_led_mask+0xd8>
     a46:	20 81       	ld	r18, Z
     a48:	31 81       	ldd	r19, Z+1	; 0x01
     a4a:	24 2b       	or	r18, r20
     a4c:	35 2b       	or	r19, r21
     a4e:	31 83       	std	Z+1, r19	; 0x01
     a50:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a52:	9b 01       	movw	r18, r22
     a54:	08 2e       	mov	r0, r24
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <update_step_led_mask+0xe2>
     a58:	36 95       	lsr	r19
     a5a:	27 95       	ror	r18
     a5c:	0a 94       	dec	r0
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <update_step_led_mask+0xde>
     a60:	20 ff       	sbrs	r18, 0
     a62:	08 c0       	rjmp	.+16     	; 0xa74 <update_step_led_mask+0xfa>
     a64:	2d 91       	ld	r18, X+
     a66:	3c 91       	ld	r19, X
     a68:	11 97       	sbiw	r26, 0x01	; 1
     a6a:	24 2b       	or	r18, r20
     a6c:	35 2b       	or	r19, r21
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	12 96       	adiw	r26, 0x02	; 2
     a78:	32 96       	adiw	r30, 0x02	; 2
     a7a:	80 31       	cpi	r24, 0x10	; 16
     a7c:	91 05       	cpc	r25, r1
     a7e:	d1 f6       	brne	.-76     	; 0xa34 <update_step_led_mask+0xba>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a80:	d5 01       	movw	r26, r10
     a82:	8d 91       	ld	r24, X+
     a84:	9c 91       	ld	r25, X
     a86:	00 2e       	mov	r0, r16
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <update_step_led_mask+0x114>
     a8a:	96 95       	lsr	r25
     a8c:	87 95       	ror	r24
     a8e:	0a 94       	dec	r0
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <update_step_led_mask+0x110>
     a92:	80 ff       	sbrs	r24, 0
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <update_step_led_mask+0x12a>
     a96:	f4 01       	movw	r30, r8
     a98:	80 81       	ld	r24, Z
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	84 2b       	or	r24, r20
     a9e:	95 2b       	or	r25, r21
     aa0:	91 83       	std	Z+1, r25	; 0x01
     aa2:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     aa4:	d3 01       	movw	r26, r6
     aa6:	8d 91       	ld	r24, X+
     aa8:	9c 91       	ld	r25, X
     aaa:	00 2e       	mov	r0, r16
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <update_step_led_mask+0x138>
     aae:	96 95       	lsr	r25
     ab0:	87 95       	ror	r24
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <update_step_led_mask+0x134>
     ab6:	80 ff       	sbrs	r24, 0
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <update_step_led_mask+0x14e>
     aba:	f2 01       	movw	r30, r4
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	48 2b       	or	r20, r24
     ac2:	59 2b       	or	r21, r25
     ac4:	51 83       	std	Z+1, r21	; 0x01
     ac6:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     ac8:	0f 5f       	subi	r16, 0xFF	; 255
     aca:	1f 4f       	sbci	r17, 0xFF	; 255
     acc:	d1 01       	movw	r26, r2
     ace:	8c 91       	ld	r24, X
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	80 17       	cp	r24, r16
     ad4:	91 07       	cpc	r25, r17
     ad6:	fc f0       	brlt	.+62     	; 0xb16 <update_step_led_mask+0x19c>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     ad8:	c6 01       	movw	r24, r12
     ada:	80 0f       	add	r24, r16
     adc:	91 1f       	adc	r25, r17
     ade:	fc 01       	movw	r30, r24
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	e2 58       	subi	r30, 0x82	; 130
     ae6:	fc 4f       	sbci	r31, 0xFC	; 252
     ae8:	c0 81       	ld	r28, Z
     aea:	d1 81       	ldd	r29, Z+1	; 0x01
     aec:	a7 01       	movw	r20, r14
     aee:	00 2e       	mov	r0, r16
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <update_step_led_mask+0x17c>
     af2:	44 0f       	add	r20, r20
     af4:	55 1f       	adc	r21, r21
     af6:	0a 94       	dec	r0
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <update_step_led_mask+0x178>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	fc 01       	movw	r30, r24
     b00:	ec 51       	subi	r30, 0x1C	; 28
     b02:	fc 4f       	sbci	r31, 0xFC	; 252
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	a8 e2       	ldi	r26, 0x28	; 40
     b0a:	b4 e0       	ldi	r27, 0x04	; 4
     b0c:	e2 ec       	ldi	r30, 0xC2	; 194
     b0e:	f3 e0       	ldi	r31, 0x03	; 3
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	8f cf       	rjmp	.-226    	; 0xa34 <update_step_led_mask+0xba>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	7f 90       	pop	r7
     b30:	6f 90       	pop	r6
     b32:	5f 90       	pop	r5
     b34:	4f 90       	pop	r4
     b36:	3f 90       	pop	r3
     b38:	2f 90       	pop	r2
     b3a:	08 95       	ret

00000b3c <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     b3c:	08 95       	ret

00000b3e <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     b3e:	08 95       	ret

00000b40 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     b40:	40 31       	cpi	r20, 0x10	; 16
     b42:	20 f4       	brcc	.+8      	; 0xb4c <note_on_event+0xc>
     b44:	62 2f       	mov	r22, r18
     b46:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     b48:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     b4c:	08 95       	ret

00000b4e <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     b4e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <update_tempo>
	read_switches();
     b52:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <read_switches>
	check_start_stop_tap();
     b56:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <check_start_stop_tap>
	
	parse_switch_data();
     b5a:	0e 94 a9 09 	call	0x1352	; 0x1352 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b5e:	80 91 7c 03 	lds	r24, 0x037C
     b62:	83 30       	cpi	r24, 0x03	; 3
     b64:	11 f4       	brne	.+4      	; 0xb6a <refresh+0x1c>
     b66:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <live_hits>
	update_mode();
     b6a:	0e 94 88 06 	call	0xd10	; 0xd10 <update_mode>
	check_clear_switch();
     b6e:	0e 94 00 0b 	call	0x1600	; 0x1600 <check_clear_switch>
	check_variation_switches();
     b72:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <check_variation_switches>
	update_prescale();
     b76:	0e 94 ff 08 	call	0x11fe	; 0x11fe <update_prescale>
	//update_variation();
	check_inst_switches();	
     b7a:	0e 94 2d 0a 	call	0x145a	; 0x145a <check_inst_switches>
	update_step_board();
     b7e:	0e 94 aa 07 	call	0xf54	; 0xf54 <update_step_board>
	//update_step_led_mask();
	process_step();
     b82:	0e 94 0f 07 	call	0xe1e	; 0xe1e <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     b86:	0e 94 37 09 	call	0x126e	; 0x126e <update_spi>
	PORTD &= ~(1<<TRIG);
     b8a:	5d 98       	cbi	0x0b, 5	; 11
     b8c:	08 95       	ret

00000b8e <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     b8e:	8f e1       	ldi	r24, 0x1F	; 31
     b90:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     b94:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     b98:	88 ed       	ldi	r24, 0xD8	; 216
     b9a:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     b9e:	51 9a       	sbi	0x0a, 1	; 10
     ba0:	08 95       	ret

00000ba2 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	2f 93       	push	r18
     bae:	3f 93       	push	r19
     bb0:	4f 93       	push	r20
     bb2:	5f 93       	push	r21
     bb4:	6f 93       	push	r22
     bb6:	7f 93       	push	r23
     bb8:	8f 93       	push	r24
     bba:	9f 93       	push	r25
     bbc:	af 93       	push	r26
     bbe:	bf 93       	push	r27
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	1f 92       	push	r1
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     bce:	80 91 c6 00 	lds	r24, 0x00C6
     bd2:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     bd4:	ae 01       	movw	r20, r28
     bd6:	4f 5f       	subi	r20, 0xFF	; 255
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	8e e8       	ldi	r24, 0x8E	; 142
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	ff 91       	pop	r31
     bec:	ef 91       	pop	r30
     bee:	bf 91       	pop	r27
     bf0:	af 91       	pop	r26
     bf2:	9f 91       	pop	r25
     bf4:	8f 91       	pop	r24
     bf6:	7f 91       	pop	r23
     bf8:	6f 91       	pop	r22
     bfa:	5f 91       	pop	r21
     bfc:	4f 91       	pop	r20
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_20>:

ISR (USART0_TX_vect) {
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1


	
}
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     c20:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     c22:	8d b1       	in	r24, 0x0d	; 13
     c24:	8c 60       	ori	r24, 0x0C	; 12
     c26:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     c28:	87 b1       	in	r24, 0x07	; 7
     c2a:	8e 60       	ori	r24, 0x0E	; 14
     c2c:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     c2e:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     c30:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     c32:	88 b1       	in	r24, 0x08	; 8
     c34:	81 7f       	andi	r24, 0xF1	; 241
     c36:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     c38:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     c3a:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     c3c:	80 e5       	ldi	r24, 0x50	; 80
     c3e:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     c42:	ed ea       	ldi	r30, 0xAD	; 173
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     c52:	8d e1       	ldi	r24, 0x1D	; 29
     c54:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
	turn_on(FILL_MANUAL);
     c58:	82 e2       	ldi	r24, 0x22	; 34
     c5a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
	
	update_spi();
     c5e:	0e 94 37 09 	call	0x126e	; 0x126e <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     c62:	84 b5       	in	r24, 0x24	; 36
     c64:	82 60       	ori	r24, 0x02	; 2
     c66:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     c68:	81 ee       	ldi	r24, 0xE1	; 225
     c6a:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     c6c:	8e e8       	ldi	r24, 0x8E	; 142
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 2b 0c 	call	0x1856	; 0x1856 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     c74:	60 ea       	ldi	r22, 0xA0	; 160
     c76:	75 e0       	ldi	r23, 0x05	; 5
     c78:	8e e8       	ldi	r24, 0x8E	; 142
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 1f 0c 	call	0x183e	; 0x183e <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     c80:	6e e9       	ldi	r22, 0x9E	; 158
     c82:	75 e0       	ldi	r23, 0x05	; 5
     c84:	8e e8       	ldi	r24, 0x8E	; 142
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	0e 94 23 0c 	call	0x1846	; 0x1846 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     c8c:	6f e9       	ldi	r22, 0x9F	; 159
     c8e:	75 e0       	ldi	r23, 0x05	; 5
     c90:	8e e8       	ldi	r24, 0x8E	; 142
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 27 0c 	call	0x184e	; 0x184e <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     c98:	0e 94 c7 05 	call	0xb8e	; 0xb8e <setup_midi_usart>
	
	setup_internal_clock();
     c9c:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	internal_clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     ca0:	e9 e7       	ldi	r30, 0x79	; 121
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	86 e0       	ldi	r24, 0x06	; 6
     ca6:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     ca8:	11 e0       	ldi	r17, 0x01	; 1
     caa:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     cac:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     cb0:	80 91 7b 03 	lds	r24, 0x037B
	flag.pre_scale_change = 0;
     cb4:	88 60       	ori	r24, 0x08	; 8
     cb6:	8f 7b       	andi	r24, 0xBF	; 191
     cb8:	80 93 7b 03 	sts	0x037B, r24
	sequencer.START = 0;
     cbc:	ed e7       	ldi	r30, 0x7D	; 125
     cbe:	f3 e0       	ldi	r31, 0x03	; 3
     cc0:	80 81       	ld	r24, Z
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     cc6:	8f e0       	ldi	r24, 0x0F	; 15
     cc8:	80 93 4c 04 	sts	0x044C, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     ccc:	80 e1       	ldi	r24, 0x10	; 16
     cce:	80 93 4d 04 	sts	0x044D, r24
	sequencer.step_num_new = 15;
     cd2:	ce e4       	ldi	r28, 0x4E	; 78
     cd4:	d4 e0       	ldi	r29, 0x04	; 4
     cd6:	88 81       	ld	r24, Y
     cd8:	80 7e       	andi	r24, 0xE0	; 224
     cda:	8f 60       	ori	r24, 0x0F	; 15
     cdc:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     cde:	10 92 4b 04 	sts	0x044B, r1
	turn_on(BASIC_VAR_A_LED);
     ce2:	84 e2       	ldi	r24, 0x24	; 36
     ce4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
	sequencer.mode = FIRST_PART;
     ce8:	10 93 7c 03 	sts	0x037C, r17

	sequencer.part_playing = FIRST;
     cec:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     cee:	8d 7f       	andi	r24, 0xFD	; 253
     cf0:	8b 7f       	andi	r24, 0xFB	; 251
     cf2:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     cf4:	8a e2       	ldi	r24, 0x2A	; 42
     cf6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
	turn_on(SCALE_3_LED);
     cfa:	87 e2       	ldi	r24, 0x27	; 39
     cfc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
	sei(); //enable global interrupts	
     d00:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     d02:	8e e8       	ldi	r24, 0x8E	; 142
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 55 0e 	call	0x1caa	; 0x1caa <midi_device_process>
	
	refresh();		
     d0a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <refresh>

	
	}
     d0e:	f9 cf       	rjmp	.-14     	; 0xd02 <main+0xe2>

00000d10 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     d10:	80 91 57 02 	lds	r24, 0x0257
     d14:	86 ff       	sbrs	r24, 6
     d16:	54 c0       	rjmp	.+168    	; 0xdc0 <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     d18:	e7 e5       	ldi	r30, 0x57	; 87
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     d20:	80 91 7d 03 	lds	r24, 0x037D
     d24:	80 ff       	sbrs	r24, 0
     d26:	0c c0       	rjmp	.+24     	; 0xd40 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     d28:	80 91 5f 02 	lds	r24, 0x025F
     d2c:	88 23       	and	r24, r24
     d2e:	21 f0       	breq	.+8      	; 0xd38 <update_mode+0x28>
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	80 93 5f 02 	sts	0x025F, r24
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <update_mode+0x44>
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	80 93 5f 02 	sts	0x025F, r24
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     d40:	80 91 5f 02 	lds	r24, 0x025F
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	86 30       	cpi	r24, 0x06	; 6
     d48:	19 f0       	breq	.+6      	; 0xd50 <update_mode+0x40>
     d4a:	80 93 5f 02 	sts	0x025F, r24
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <update_mode+0x44>
     d50:	10 92 5f 02 	sts	0x025F, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d54:	30 91 5f 02 	lds	r19, 0x025F
     d58:	e3 2f       	mov	r30, r19
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	e4 5f       	subi	r30, 0xF4	; 244
     d5e:	fd 4f       	sbci	r31, 0xFD	; 253
     d60:	20 81       	ld	r18, Z
     d62:	20 93 7c 03 	sts	0x037C, r18
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     d66:	ee e6       	ldi	r30, 0x6E	; 110
     d68:	f2 e0       	ldi	r31, 0x02	; 2
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <update_mode+0x64>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	3a 95       	dec	r19
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     d78:	94 81       	ldd	r25, Z+4	; 0x04
     d7a:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     d7c:	89 2b       	or	r24, r25
     d7e:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	82 0f       	add	r24, r18
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	e0 f4       	brcc	.+56     	; 0xdc0 <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     d88:	e1 e0       	ldi	r30, 0x01	; 1
     d8a:	21 30       	cpi	r18, 0x01	; 1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <update_mode+0x80>
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	ae e4       	ldi	r26, 0x4E	; 78
     d92:	b4 e0       	ldi	r27, 0x04	; 4
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	8c 91       	ld	r24, X
     d98:	11 97       	sbiw	r26, 0x01	; 1
     d9a:	e0 fb       	bst	r30, 0
     d9c:	82 f9       	bld	r24, 2
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	8c 93       	st	X, r24
     da2:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e4 58       	subi	r30, 0x84	; 132
     da8:	fc 4f       	sbci	r31, 0xFC	; 252
     daa:	e0 53       	subi	r30, 0x30	; 48
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 81       	ld	r24, Z
     db0:	98 2f       	mov	r25, r24
     db2:	9f 71       	andi	r25, 0x1F	; 31
     db4:	8c 91       	ld	r24, X
     db6:	80 7e       	andi	r24, 0xE0	; 224
     db8:	89 2b       	or	r24, r25
     dba:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     dbc:	0e 94 bd 04 	call	0x97a	; 0x97a <update_step_led_mask>
     dc0:	08 95       	ret

00000dc2 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     dc2:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     dc6:	90 93 63 02 	sts	0x0263, r25
     dca:	80 93 62 02 	sts	0x0262, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     dce:	20 91 60 02 	lds	r18, 0x0260
     dd2:	30 91 61 02 	lds	r19, 0x0261
     dd6:	82 1b       	sub	r24, r18
     dd8:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
     dde:	95 95       	asr	r25
     de0:	87 95       	ror	r24
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	90 93 61 02 	sts	0x0261, r25
     dea:	80 93 60 02 	sts	0x0260, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     dee:	23 e6       	ldi	r18, 0x63	; 99
     df0:	34 e0       	ldi	r19, 0x04	; 4
     df2:	a9 01       	movw	r20, r18
     df4:	48 1b       	sub	r20, r24
     df6:	59 0b       	sbc	r21, r25
     df8:	ca 01       	movw	r24, r20
     dfa:	e9 e7       	ldi	r30, 0x79	; 121
     dfc:	f2 e0       	ldi	r31, 0x02	; 2
     dfe:	54 83       	std	Z+4, r21	; 0x04
     e00:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     e02:	25 81       	ldd	r18, Z+5	; 0x05
     e04:	36 81       	ldd	r19, Z+6	; 0x06
     e06:	42 17       	cp	r20, r18
     e08:	53 07       	cpc	r21, r19
     e0a:	11 f0       	breq	.+4      	; 0xe10 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     e0c:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     e10:	e9 e7       	ldi	r30, 0x79	; 121
     e12:	f2 e0       	ldi	r31, 0x02	; 2
     e14:	83 81       	ldd	r24, Z+3	; 0x03
     e16:	94 81       	ldd	r25, Z+4	; 0x04
     e18:	96 83       	std	Z+6, r25	; 0x06
     e1a:	85 83       	std	Z+5, r24	; 0x05
     e1c:	08 95       	ret

00000e1e <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     e22:	80 91 7d 03 	lds	r24, 0x037D
     e26:	81 ff       	sbrs	r24, 1
     e28:	8b c0       	rjmp	.+278    	; 0xf40 <process_step+0x122>
			
			//if (sequencer.part_playing == FIRST || sequencer.part_playing == SECOND) {	
				if (flag.next_step) {
     e2a:	80 91 7b 03 	lds	r24, 0x037B
     e2e:	80 ff       	sbrs	r24, 0
     e30:	8e c0       	rjmp	.+284    	; 0xf4e <process_step+0x130>
					flag.next_step = 0;
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 93 7b 03 	sts	0x037B, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     e38:	88 70       	andi	r24, 0x08	; 8
     e3a:	88 23       	and	r24, r24
     e3c:	f1 f3       	breq	.-4      	; 0xe3a <process_step+0x1c>
					PORTD |= (1<<TRIG);
     e3e:	5d 9a       	sbi	0x0b, 5	; 11
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
     e40:	80 91 4f 04 	lds	r24, 0x044F
     e44:	82 fb       	bst	r24, 2
     e46:	99 27       	eor	r25, r25
     e48:	90 f9       	bld	r25, 0
     e4a:	86 95       	lsr	r24
     e4c:	81 70       	andi	r24, 0x01	; 1
     e4e:	98 13       	cpse	r25, r24
     e50:	37 c0       	rjmp	.+110    	; 0xec0 <process_step+0xa2>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     e52:	80 91 4e 04 	lds	r24, 0x044E
     e56:	98 2f       	mov	r25, r24
     e58:	92 95       	swap	r25
     e5a:	96 95       	lsr	r25
     e5c:	97 70       	andi	r25, 0x07	; 7
     e5e:	80 91 4f 04 	lds	r24, 0x044F
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	88 0f       	add	r24, r24
     e66:	88 0f       	add	r24, r24
     e68:	88 0f       	add	r24, r24
     e6a:	89 2b       	or	r24, r25
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <process_step+0x58>
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	8a 95       	dec	r24
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <process_step+0x54>
     e7a:	80 91 4a 04 	lds	r24, 0x044A
     e7e:	48 2f       	mov	r20, r24
     e80:	41 70       	andi	r20, 0x01	; 1
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	80 91 52 04 	lds	r24, 0x0452
     e88:	93 e3       	ldi	r25, 0x33	; 51
     e8a:	94 9f       	mul	r25, r20
     e8c:	f0 01       	movw	r30, r0
     e8e:	95 9f       	mul	r25, r21
     e90:	f0 0d       	add	r31, r0
     e92:	11 24       	eor	r1, r1
     e94:	e8 0f       	add	r30, r24
     e96:	f1 1d       	adc	r31, r1
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ee 53       	subi	r30, 0x3E	; 62
     e9e:	fc 4f       	sbci	r31, 0xFC	; 252
     ea0:	90 81       	ld	r25, Z
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     ea4:	ee e6       	ldi	r30, 0x6E	; 110
     ea6:	f2 e0       	ldi	r31, 0x02	; 2
     ea8:	49 2f       	mov	r20, r25
     eaa:	42 23       	and	r20, r18
     eac:	40 95       	com	r20
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     eae:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     eb0:	94 23       	and	r25, r20
     eb2:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     eb4:	98 2f       	mov	r25, r24
     eb6:	93 23       	and	r25, r19
     eb8:	90 95       	com	r25
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     eba:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     ebc:	89 23       	and	r24, r25
     ebe:	80 83       	st	Z, r24
					} else {
						
						
					}

					trigger_step();
     ec0:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
     ec4:	90 91 4a 04 	lds	r25, 0x044A
     ec8:	80 91 4f 04 	lds	r24, 0x044F
     ecc:	81 fb       	bst	r24, 1
     ece:	22 27       	eor	r18, r18
     ed0:	20 f9       	bld	r18, 0
     ed2:	c2 2f       	mov	r28, r18
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	d4 2f       	mov	r29, r20
     ed8:	91 70       	andi	r25, 0x01	; 1
     eda:	53 e3       	ldi	r21, 0x33	; 51
     edc:	95 9f       	mul	r25, r21
     ede:	c0 0d       	add	r28, r0
     ee0:	d1 1d       	adc	r29, r1
     ee2:	11 24       	eor	r1, r1
     ee4:	cc 0f       	add	r28, r28
     ee6:	dd 1f       	adc	r29, r29
     ee8:	c2 54       	subi	r28, 0x42	; 66
     eea:	dc 4f       	sbci	r29, 0xFC	; 252
     eec:	90 91 4e 04 	lds	r25, 0x044E
     ef0:	92 95       	swap	r25
     ef2:	96 95       	lsr	r25
     ef4:	97 70       	andi	r25, 0x07	; 7
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	88 0f       	add	r24, r24
     efa:	88 0f       	add	r24, r24
     efc:	88 0f       	add	r24, r24
     efe:	89 2b       	or	r24, r25
     f00:	28 81       	ld	r18, Y
     f02:	39 81       	ldd	r19, Y+1	; 0x01
     f04:	a9 01       	movw	r20, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <process_step+0xee>
     f08:	56 95       	lsr	r21
     f0a:	47 95       	ror	r20
     f0c:	8a 95       	dec	r24
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <process_step+0xea>
     f10:	40 ff       	sbrs	r20, 0
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <process_step+0x106>
						spi_data[8] |= 1<<ACCENT;
     f14:	ee e6       	ldi	r30, 0x6E	; 110
     f16:	f2 e0       	ldi	r31, 0x02	; 2
     f18:	80 85       	ldd	r24, Z+8	; 0x08
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     f1e:	84 e1       	ldi	r24, 0x14	; 20
     f20:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     f24:	ee e6       	ldi	r30, 0x6E	; 110
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	82 60       	ori	r24, 0x02	; 2
     f2c:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	83 60       	ori	r24, 0x03	; 3
     f32:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
     f34:	80 91 7b 03 	lds	r24, 0x037B
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	80 93 7b 03 	sts	0x037B, r24
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <process_step+0x130>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
     f40:	80 91 7b 03 	lds	r24, 0x037B
     f44:	80 ff       	sbrs	r24, 0
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <process_step+0x130>
			
			flag.next_step = 0;
     f48:	8e 7f       	andi	r24, 0xFE	; 254
     f4a:	80 93 7b 03 	sts	0x037B, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <update_step_board>:

void update_step_board() {
     f54:	2f 92       	push	r2
     f56:	3f 92       	push	r3
     f58:	4f 92       	push	r4
     f5a:	5f 92       	push	r5
     f5c:	6f 92       	push	r6
     f5e:	7f 92       	push	r7
     f60:	8f 92       	push	r8
     f62:	9f 92       	push	r9
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	
	if (sequencer.START) {
     f78:	90 91 7d 03 	lds	r25, 0x037D
     f7c:	91 ff       	sbrs	r25, 1
     f7e:	2c c1       	rjmp	.+600    	; 0x11d8 <update_step_board+0x284>
		
			switch (sequencer.mode) {		
     f80:	80 91 7c 03 	lds	r24, 0x037C
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	08 f0       	brcs	.+2      	; 0xf8c <update_step_board+0x38>
     f8a:	26 c1       	rjmp	.+588    	; 0x11d8 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     f8c:	92 ff       	sbrs	r25, 2
     f8e:	26 c0       	rjmp	.+76     	; 0xfdc <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     f90:	80 91 17 02 	lds	r24, 0x0217
     f94:	86 fd       	sbrc	r24, 6
     f96:	0b c0       	rjmp	.+22     	; 0xfae <update_step_board+0x5a>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	fc 01       	movw	r30, r24
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	e9 5e       	subi	r30, 0xE9	; 233
     fa4:	fd 4f       	sbci	r31, 0xFD	; 253
     fa6:	20 81       	ld	r18, Z
     fa8:	26 ff       	sbrs	r18, 6
     faa:	13 c0       	rjmp	.+38     	; 0xfd2 <update_step_board+0x7e>
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <update_step_board+0x5e>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     fb2:	fc 01       	movw	r30, r24
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	e9 5e       	subi	r30, 0xE9	; 233
     fba:	fd 4f       	sbci	r31, 0xFD	; 253
     fbc:	90 81       	ld	r25, Z
     fbe:	9f 7b       	andi	r25, 0xBF	; 191
     fc0:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f4 e0       	ldi	r31, 0x04	; 4
     fc6:	8f 71       	andi	r24, 0x1F	; 31
     fc8:	90 81       	ld	r25, Z
     fca:	90 7e       	andi	r25, 0xE0	; 224
     fcc:	89 2b       	or	r24, r25
     fce:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     fd0:	03 c1       	rjmp	.+518    	; 0x11d8 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	80 31       	cpi	r24, 0x10	; 16
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f7       	brne	.-62     	; 0xf9c <update_step_board+0x48>
     fda:	fe c0       	rjmp	.+508    	; 0x11d8 <update_step_board+0x284>
					//step_num = sequencer.step_num_second;
					//offset = 16; //offset for steps 16-31
					//
				//}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     fdc:	80 91 52 04 	lds	r24, 0x0452
     fe0:	80 31       	cpi	r24, 0x10	; 16
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <update_step_board+0x92>
     fe4:	72 c0       	rjmp	.+228    	; 0x10ca <update_step_board+0x176>
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     fea:	cf e4       	ldi	r28, 0x4F	; 79
     fec:	d4 e0       	ldi	r29, 0x04	; 4
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     fee:	0f 2e       	mov	r0, r31
     ff0:	fa e4       	ldi	r31, 0x4A	; 74
     ff2:	6f 2e       	mov	r6, r31
     ff4:	f4 e0       	ldi	r31, 0x04	; 4
     ff6:	7f 2e       	mov	r7, r31
     ff8:	f0 2d       	mov	r31, r0
     ffa:	cc 24       	eor	r12, r12
     ffc:	c3 94       	inc	r12
     ffe:	d1 2c       	mov	r13, r1
    1000:	0f 2e       	mov	r0, r31
    1002:	f3 e3       	ldi	r31, 0x33	; 51
    1004:	bf 2e       	mov	r11, r31
    1006:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1008:	0f 2e       	mov	r0, r31
    100a:	f2 e5       	ldi	r31, 0x52	; 82
    100c:	4f 2e       	mov	r4, r31
    100e:	f4 e0       	ldi	r31, 0x04	; 4
    1010:	5f 2e       	mov	r5, r31
    1012:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
    1014:	f8 01       	movw	r30, r16
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	e9 5e       	subi	r30, 0xE9	; 233
    101c:	fd 4f       	sbci	r31, 0xFD	; 253
    101e:	80 81       	ld	r24, Z
    1020:	86 ff       	sbrs	r24, 6
    1022:	4c c0       	rjmp	.+152    	; 0x10bc <update_step_board+0x168>
					
							
							button[i].state ^= button[i].state;
    1024:	f8 01       	movw	r30, r16
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	e9 5e       	subi	r30, 0xE9	; 233
    102c:	fd 4f       	sbci	r31, 0xFD	; 253
    102e:	8f 7b       	andi	r24, 0xBF	; 191
    1030:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
    1032:	88 81       	ld	r24, Y
    1034:	82 fb       	bst	r24, 2
    1036:	88 24       	eor	r8, r8
    1038:	80 f8       	bld	r8, 0
    103a:	91 2c       	mov	r9, r1
    103c:	f4 01       	movw	r30, r8
    103e:	e4 58       	subi	r30, 0x84	; 132
    1040:	fc 4f       	sbci	r31, 0xFC	; 252
    1042:	e0 53       	subi	r30, 0x30	; 48
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	80 17       	cp	r24, r16
    104c:	91 07       	cpc	r25, r17
    104e:	b4 f1       	brlt	.+108    	; 0x10bc <update_step_board+0x168>
								toggle(i);
    1050:	80 2f       	mov	r24, r16
    1052:	0e 94 9b 04 	call	0x936	; 0x936 <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
    1056:	d3 01       	movw	r26, r6
    1058:	8c 91       	ld	r24, X
    105a:	80 fb       	bst	r24, 0
    105c:	22 24       	eor	r2, r2
    105e:	20 f8       	bld	r2, 0
    1060:	31 2c       	mov	r3, r1
    1062:	88 81       	ld	r24, Y
    1064:	82 fb       	bst	r24, 2
    1066:	ee 24       	eor	r14, r14
    1068:	e0 f8       	bld	r14, 0
    106a:	f1 2c       	mov	r15, r1
    106c:	b2 9c       	mul	r11, r2
    106e:	f0 01       	movw	r30, r0
    1070:	b3 9c       	mul	r11, r3
    1072:	f0 0d       	add	r31, r0
    1074:	11 24       	eor	r1, r1
    1076:	df 01       	movw	r26, r30
    1078:	ae 0d       	add	r26, r14
    107a:	bf 1d       	adc	r27, r15
    107c:	aa 0f       	add	r26, r26
    107e:	bb 1f       	adc	r27, r27
    1080:	a2 54       	subi	r26, 0x42	; 66
    1082:	bc 4f       	sbci	r27, 0xFC	; 252
    1084:	2d 91       	ld	r18, X+
    1086:	3c 91       	ld	r19, X
    1088:	11 97       	sbiw	r26, 0x01	; 1
    108a:	c6 01       	movw	r24, r12
    108c:	00 2e       	mov	r0, r16
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <update_step_board+0x140>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <update_step_board+0x13c>
    1098:	28 27       	eor	r18, r24
    109a:	39 27       	eor	r19, r25
    109c:	2d 93       	st	X+, r18
    109e:	3c 93       	st	X, r19
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    10a0:	d2 01       	movw	r26, r4
    10a2:	2c 91       	ld	r18, X
    10a4:	e2 0f       	add	r30, r18
    10a6:	f1 1d       	adc	r31, r1
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	ee 53       	subi	r30, 0x3E	; 62
    10ae:	fc 4f       	sbci	r31, 0xFC	; 252
    10b0:	20 81       	ld	r18, Z
    10b2:	31 81       	ldd	r19, Z+1	; 0x01
    10b4:	82 27       	eor	r24, r18
    10b6:	93 27       	eor	r25, r19
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
					//
				//}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
    10bc:	0f 5f       	subi	r16, 0xFF	; 255
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	00 31       	cpi	r16, 0x10	; 16
    10c2:	11 05       	cpc	r17, r1
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <update_step_board+0x174>
    10c6:	a6 cf       	rjmp	.-180    	; 0x1014 <update_step_board+0xc0>
    10c8:	87 c0       	rjmp	.+270    	; 0x11d8 <update_step_board+0x284>
    10ca:	c0 e0       	ldi	r28, 0x00	; 0
    10cc:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    10ce:	0f 2e       	mov	r0, r31
    10d0:	ff e4       	ldi	r31, 0x4F	; 79
    10d2:	ef 2e       	mov	r14, r31
    10d4:	f4 e0       	ldi	r31, 0x04	; 4
    10d6:	ff 2e       	mov	r15, r31
    10d8:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    10da:	0f 2e       	mov	r0, r31
    10dc:	fa e4       	ldi	r31, 0x4A	; 74
    10de:	6f 2e       	mov	r6, r31
    10e0:	f4 e0       	ldi	r31, 0x04	; 4
    10e2:	7f 2e       	mov	r7, r31
    10e4:	f0 2d       	mov	r31, r0
    10e6:	0f 2e       	mov	r0, r31
    10e8:	f2 e5       	ldi	r31, 0x52	; 82
    10ea:	4f 2e       	mov	r4, r31
    10ec:	f4 e0       	ldi	r31, 0x04	; 4
    10ee:	5f 2e       	mov	r5, r31
    10f0:	f0 2d       	mov	r31, r0
    10f2:	0f 2e       	mov	r0, r31
    10f4:	f3 e3       	ldi	r31, 0x33	; 51
    10f6:	3f 2e       	mov	r3, r31
    10f8:	f0 2d       	mov	r31, r0
    10fa:	88 24       	eor	r8, r8
    10fc:	83 94       	inc	r8
    10fe:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
    1100:	fe 01       	movw	r30, r28
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e9 5e       	subi	r30, 0xE9	; 233
    1108:	fd 4f       	sbci	r31, 0xFD	; 253
    110a:	80 81       	ld	r24, Z
    110c:	86 ff       	sbrs	r24, 6
    110e:	5f c0       	rjmp	.+190    	; 0x11ce <update_step_board+0x27a>
						
						
						button[i].state ^= button[i].state;
    1110:	fe 01       	movw	r30, r28
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	e9 5e       	subi	r30, 0xE9	; 233
    1118:	fd 4f       	sbci	r31, 0xFD	; 253
    111a:	8f 7b       	andi	r24, 0xBF	; 191
    111c:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    111e:	f7 01       	movw	r30, r14
    1120:	80 81       	ld	r24, Z
    1122:	82 fb       	bst	r24, 2
    1124:	00 27       	eor	r16, r16
    1126:	00 f9       	bld	r16, 0
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	f8 01       	movw	r30, r16
    112c:	e4 58       	subi	r30, 0x84	; 132
    112e:	fc 4f       	sbci	r31, 0xFC	; 252
    1130:	e0 53       	subi	r30, 0x30	; 48
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	80 81       	ld	r24, Z
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	8c 17       	cp	r24, r28
    113a:	9d 07       	cpc	r25, r29
    113c:	0c f4       	brge	.+2      	; 0x1140 <update_step_board+0x1ec>
    113e:	47 c0       	rjmp	.+142    	; 0x11ce <update_step_board+0x27a>
							toggle(i);
    1140:	8c 2f       	mov	r24, r28
    1142:	0e 94 9b 04 	call	0x936	; 0x936 <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    1146:	d3 01       	movw	r26, r6
    1148:	8c 91       	ld	r24, X
    114a:	80 fb       	bst	r24, 0
    114c:	cc 24       	eor	r12, r12
    114e:	c0 f8       	bld	r12, 0
    1150:	d1 2c       	mov	r13, r1
    1152:	f7 01       	movw	r30, r14
    1154:	80 81       	ld	r24, Z
    1156:	82 fb       	bst	r24, 2
    1158:	aa 24       	eor	r10, r10
    115a:	a0 f8       	bld	r10, 0
    115c:	b1 2c       	mov	r11, r1
    115e:	d2 01       	movw	r26, r4
    1160:	6c 91       	ld	r22, X
    1162:	c5 01       	movw	r24, r10
    1164:	82 95       	swap	r24
    1166:	92 95       	swap	r25
    1168:	90 7f       	andi	r25, 0xF0	; 240
    116a:	98 27       	eor	r25, r24
    116c:	80 7f       	andi	r24, 0xF0	; 240
    116e:	98 27       	eor	r25, r24
    1170:	3c 9c       	mul	r3, r12
    1172:	90 01       	movw	r18, r0
    1174:	3d 9c       	mul	r3, r13
    1176:	30 0d       	add	r19, r0
    1178:	11 24       	eor	r1, r1
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	8c 0f       	add	r24, r28
    1180:	9d 1f       	adc	r25, r29
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	fc 01       	movw	r30, r24
    1188:	e2 58       	subi	r30, 0x82	; 130
    118a:	fc 4f       	sbci	r31, 0xFC	; 252
    118c:	c4 01       	movw	r24, r8
    118e:	06 2e       	mov	r0, r22
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <update_step_board+0x242>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <update_step_board+0x23e>
    119a:	40 81       	ld	r20, Z
    119c:	51 81       	ldd	r21, Z+1	; 0x01
    119e:	84 27       	eor	r24, r20
    11a0:	95 27       	eor	r25, r21
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    11a6:	f9 01       	movw	r30, r18
    11a8:	e6 0f       	add	r30, r22
    11aa:	f1 1d       	adc	r31, r1
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	ee 53       	subi	r30, 0x3E	; 62
    11b2:	fc 4f       	sbci	r31, 0xFC	; 252
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	94 01       	movw	r18, r8
    11ba:	0c 2e       	mov	r0, r28
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <update_step_board+0x26e>
    11be:	22 0f       	add	r18, r18
    11c0:	33 1f       	adc	r19, r19
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <update_step_board+0x26a>
    11c6:	82 27       	eor	r24, r18
    11c8:	93 27       	eor	r25, r19
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	80 83       	st	Z, r24
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    11ce:	21 96       	adiw	r28, 0x01	; 1
    11d0:	c0 31       	cpi	r28, 0x10	; 16
    11d2:	d1 05       	cpc	r29, r1
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <update_step_board+0x284>
    11d6:	94 cf       	rjmp	.-216    	; 0x1100 <update_step_board+0x1ac>
	} else {
		
		//handle what here? changing selected pattern or rhythm? 
		
	}
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	bf 90       	pop	r11
    11ea:	af 90       	pop	r10
    11ec:	9f 90       	pop	r9
    11ee:	8f 90       	pop	r8
    11f0:	7f 90       	pop	r7
    11f2:	6f 90       	pop	r6
    11f4:	5f 90       	pop	r5
    11f6:	4f 90       	pop	r4
    11f8:	3f 90       	pop	r3
    11fa:	2f 90       	pop	r2
    11fc:	08 95       	ret

000011fe <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    11fe:	80 91 53 02 	lds	r24, 0x0253
    1202:	86 ff       	sbrs	r24, 6
    1204:	29 c0       	rjmp	.+82     	; 0x1258 <update_prescale+0x5a>
    1206:	80 91 7d 03 	lds	r24, 0x037D
    120a:	80 ff       	sbrs	r24, 0
    120c:	25 c0       	rjmp	.+74     	; 0x1258 <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    120e:	e3 e5       	ldi	r30, 0x53	; 83
    1210:	f2 e0       	ldi	r31, 0x02	; 2
    1212:	80 81       	ld	r24, Z
    1214:	8f 7b       	andi	r24, 0xBF	; 191
    1216:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    1218:	80 91 16 02 	lds	r24, 0x0216
    121c:	88 23       	and	r24, r24
    121e:	21 f0       	breq	.+8      	; 0x1228 <update_prescale+0x2a>
    1220:	81 50       	subi	r24, 0x01	; 1
    1222:	80 93 16 02 	sts	0x0216, r24
    1226:	03 c0       	rjmp	.+6      	; 0x122e <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	80 93 16 02 	sts	0x0216, r24
					
		}
		flag.pre_scale_change = 1;
    122e:	80 91 7b 03 	lds	r24, 0x037B
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	80 93 7b 03 	sts	0x037B, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    1238:	ee e6       	ldi	r30, 0x6E	; 110
    123a:	f2 e0       	ldi	r31, 0x02	; 2
    123c:	20 91 16 02 	lds	r18, 0x0216
    1240:	2e 5f       	subi	r18, 0xFE	; 254
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <update_prescale+0x4e>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	2a 95       	dec	r18
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    1250:	95 81       	ldd	r25, Z+5	; 0x05
    1252:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    1254:	89 2b       	or	r24, r25
    1256:	85 83       	std	Z+5, r24	; 0x05
    1258:	08 95       	ret

0000125a <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    125a:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    125e:	ed ea       	ldi	r30, 0xAD	; 173
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 23       	and	r24, r24
    1266:	ec f7       	brge	.-6      	; 0x1262 <spi_shift_byte+0x8>
	return SPDR1;
    1268:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    126c:	08 95       	ret

0000126e <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    1272:	ce e6       	ldi	r28, 0x6E	; 110
    1274:	d2 e0       	ldi	r29, 0x02	; 2
    1276:	88 81       	ld	r24, Y
    1278:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    129a:	8e 81       	ldd	r24, Y+6	; 0x06
    129c:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    12a0:	8f 81       	ldd	r24, Y+7	; 0x07
    12a2:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    12a6:	88 85       	ldd	r24, Y+8	; 0x08
    12a8:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    12ac:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    12ae:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <read_switches>:

void read_switches(void) { //reads switch data
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    12ba:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
    12c2:	c9 e6       	ldi	r28, 0x69	; 105
    12c4:	d2 e0       	ldi	r29, 0x02	; 2
    12c6:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
    12ce:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
    12d6:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
    12de:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0e 94 2d 09 	call	0x125a	; 0x125a <spi_shift_byte>
    12e6:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    12e8:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    12ea:	28 81       	ld	r18, Y
    12ec:	92 2f       	mov	r25, r18
    12ee:	96 95       	lsr	r25
    12f0:	ed e7       	ldi	r30, 0x7D	; 125
    12f2:	f3 e0       	ldi	r31, 0x03	; 3
    12f4:	30 81       	ld	r19, Z
    12f6:	90 fb       	bst	r25, 0
    12f8:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	49 2f       	mov	r20, r25
    12fe:	42 95       	swap	r20
    1300:	4f 70       	andi	r20, 0x0F	; 15
    1302:	40 fb       	bst	r20, 0
    1304:	32 f9       	bld	r19, 2
    1306:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    1308:	e4 e6       	ldi	r30, 0x64	; 100
    130a:	f2 e0       	ldi	r31, 0x02	; 2
    130c:	30 81       	ld	r19, Z
    130e:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    1310:	32 27       	eor	r19, r18
    1312:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1314:	23 23       	and	r18, r19
    1316:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    1318:	31 81       	ldd	r19, Z+1	; 0x01
    131a:	29 81       	ldd	r18, Y+1	; 0x01
    131c:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    131e:	32 27       	eor	r19, r18
    1320:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    1322:	23 23       	and	r18, r19
    1324:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1326:	22 81       	ldd	r18, Z+2	; 0x02
    1328:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    132a:	29 27       	eor	r18, r25
    132c:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    132e:	92 23       	and	r25, r18
    1330:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    1332:	23 81       	ldd	r18, Z+3	; 0x03
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    1338:	29 27       	eor	r18, r25
    133a:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    133c:	92 23       	and	r25, r18
    133e:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    1340:	94 81       	ldd	r25, Z+4	; 0x04
    1342:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1344:	98 27       	eor	r25, r24
    1346:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    1348:	89 23       	and	r24, r25
    134a:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    1356:	da 01       	movw	r26, r20
    1358:	aa 0f       	add	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	a9 5e       	subi	r26, 0xE9	; 233
    135e:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    1360:	8c 91       	ld	r24, X
    1362:	e8 2f       	mov	r30, r24
    1364:	e6 95       	lsr	r30
    1366:	e6 95       	lsr	r30
    1368:	e6 95       	lsr	r30
    136a:	e7 70       	andi	r30, 0x07	; 7
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	e7 59       	subi	r30, 0x97	; 151
    1370:	fd 4f       	sbci	r31, 0xFD	; 253
    1372:	20 81       	ld	r18, Z
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	98 2f       	mov	r25, r24
    1378:	97 70       	andi	r25, 0x07	; 7
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <parse_switch_data+0x2e>
    137c:	35 95       	asr	r19
    137e:	27 95       	ror	r18
    1380:	9a 95       	dec	r25
    1382:	e2 f7       	brpl	.-8      	; 0x137c <parse_switch_data+0x2a>
    1384:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    1386:	86 fb       	bst	r24, 6
    1388:	99 27       	eor	r25, r25
    138a:	90 f9       	bld	r25, 0
    138c:	29 27       	eor	r18, r25
    138e:	20 fb       	bst	r18, 0
    1390:	86 f9       	bld	r24, 6
    1392:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    1394:	4f 5f       	subi	r20, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	43 32       	cpi	r20, 0x23	; 35
    139a:	51 05       	cpc	r21, r1
    139c:	e1 f6       	brne	.-72     	; 0x1356 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    139e:	08 95       	ret

000013a0 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    13a0:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    13a2:	80 91 77 02 	lds	r24, 0x0277
    13a6:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    13a8:	89 27       	eor	r24, r25
    13aa:	80 93 77 02 	sts	0x0277, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    13ae:	89 23       	and	r24, r25
    13b0:	80 93 78 02 	sts	0x0278, r24
	uint8_t start_state = sequencer.START;
    13b4:	ed e7       	ldi	r30, 0x7D	; 125
    13b6:	f3 e0       	ldi	r31, 0x03	; 3
    13b8:	90 81       	ld	r25, Z
    13ba:	91 fb       	bst	r25, 1
    13bc:	22 27       	eor	r18, r18
    13be:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    13c0:	86 95       	lsr	r24
    13c2:	82 27       	eor	r24, r18
    13c4:	80 fb       	bst	r24, 0
    13c6:	91 f9       	bld	r25, 1
    13c8:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    13ca:	91 ff       	sbrs	r25, 1
    13cc:	43 c0       	rjmp	.+134    	; 0x1454 <check_start_stop_tap+0xb4>
    13ce:	21 11       	cpse	r18, r1
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <check_start_stop_tap+0xb8>
		
		sequencer.current_step = 0;
    13d2:	ee e4       	ldi	r30, 0x4E	; 78
    13d4:	f4 e0       	ldi	r31, 0x04	; 4
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 71       	andi	r24, 0x1F	; 31
    13da:	80 83       	st	Z, r24
    13dc:	81 81       	ldd	r24, Z+1	; 0x01
    13de:	8e 7f       	andi	r24, 0xFE	; 254
    13e0:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
    13e2:	80 91 7b 03 	lds	r24, 0x037B
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    13e6:	10 92 7a 02 	sts	0x027A, r1
		
		flag.variation_change = 0;
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	8b 7f       	andi	r24, 0xFB	; 251
    13ee:	80 93 7b 03 	sts	0x037B, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    13f2:	80 91 4b 04 	lds	r24, 0x044B
    13f6:	8d 7f       	andi	r24, 0xFD	; 253
    13f8:	31 f4       	brne	.+12     	; 0x1406 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    13fa:	ea e4       	ldi	r30, 0x4A	; 74
    13fc:	f4 e0       	ldi	r31, 0x04	; 4
    13fe:	80 81       	ld	r24, Z
    1400:	8e 7f       	andi	r24, 0xFE	; 254
    1402:	80 83       	st	Z, r24
    1404:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
    1406:	ea e4       	ldi	r30, 0x4A	; 74
    1408:	f4 e0       	ldi	r31, 0x04	; 4
    140a:	80 81       	ld	r24, Z
    140c:	81 60       	ori	r24, 0x01	; 1
    140e:	80 83       	st	Z, r24
    1410:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		if (sequencer.part_playing == SECOND) { //reset part playing
    1412:	80 91 4f 04 	lds	r24, 0x044F
    1416:	81 ff       	sbrs	r24, 1
    1418:	0b c0       	rjmp	.+22     	; 0x1430 <check_start_stop_tap+0x90>
			sequencer.part_playing = FIRST;
    141a:	ee e4       	ldi	r30, 0x4E	; 78
    141c:	f4 e0       	ldi	r31, 0x04	; 4
    141e:	81 81       	ldd	r24, Z+1	; 0x01
    1420:	8d 7f       	andi	r24, 0xFD	; 253
    1422:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
    1424:	8b e2       	ldi	r24, 0x2B	; 43
    1426:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <turn_off>
			turn_on (FIRST_PART_LED);	
    142a:	8a e2       	ldi	r24, 0x2A	; 42
    142c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
			
		}
		turn_off_all_inst_leds();
    1430:	0e 94 ae 04 	call	0x95c	; 0x95c <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1434:	80 91 52 04 	lds	r24, 0x0452
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	fc 01       	movw	r30, r24
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31
    1440:	e8 0f       	add	r30, r24
    1442:	f9 1f       	adc	r31, r25
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	e0 50       	subi	r30, 0x00	; 0
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	85 81       	ldd	r24, Z+5	; 0x05
    144e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
    1452:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	e9 f2       	breq	.-70     	; 0x1412 <check_start_stop_tap+0x72>
    1458:	08 95       	ret

0000145a <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
    145a:	3f 92       	push	r3
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	0f 2e       	mov	r0, r31
    147e:	f5 e0       	ldi	r31, 0x05	; 5
    1480:	ef 2e       	mov	r14, r31
    1482:	f1 e0       	ldi	r31, 0x01	; 1
    1484:	ff 2e       	mov	r15, r31
    1486:	f0 2d       	mov	r31, r0
    1488:	0f 2e       	mov	r0, r31
    148a:	fb e3       	ldi	r31, 0x3B	; 59
    148c:	8f 2e       	mov	r8, r31
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	9f 2e       	mov	r9, r31
    1492:	f0 2d       	mov	r31, r0
    1494:	02 e1       	ldi	r16, 0x12	; 18
    1496:	10 e0       	ldi	r17, 0x00	; 0
    1498:	c1 e1       	ldi	r28, 0x11	; 17
    149a:	d0 e0       	ldi	r29, 0x00	; 0
    149c:	c1 2c       	mov	r12, r1
    149e:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    14a0:	0f 2e       	mov	r0, r31
    14a2:	f2 e5       	ldi	r31, 0x52	; 82
    14a4:	af 2e       	mov	r10, r31
    14a6:	f4 e0       	ldi	r31, 0x04	; 4
    14a8:	bf 2e       	mov	r11, r31
    14aa:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    14ac:	0f 2e       	mov	r0, r31
    14ae:	ff e5       	ldi	r31, 0x5F	; 95
    14b0:	4f 2e       	mov	r4, r31
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	5f 2e       	mov	r5, r31
    14b6:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    14b8:	0f 2e       	mov	r0, r31
    14ba:	ff e0       	ldi	r31, 0x0F	; 15
    14bc:	3f 2e       	mov	r3, r31
    14be:	f0 2d       	mov	r31, r0
    14c0:	0c c0       	rjmp	.+24     	; 0x14da <check_inst_switches+0x80>
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	c8 1a       	sub	r12, r24
    14c6:	d8 0a       	sbc	r13, r24
    14c8:	21 96       	adiw	r28, 0x01	; 1
    14ca:	0f 5f       	subi	r16, 0xFF	; 255
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	a6 e0       	ldi	r26, 0x06	; 6
    14d0:	ea 0e       	add	r14, r26
    14d2:	f1 1c       	adc	r15, r1
    14d4:	b6 e0       	ldi	r27, 0x06	; 6
    14d6:	8b 0e       	add	r8, r27
    14d8:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    14da:	fe 01       	movw	r30, r28
    14dc:	ee 0f       	add	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	e9 5e       	subi	r30, 0xE9	; 233
    14e2:	fd 4f       	sbci	r31, 0xFD	; 253
    14e4:	80 81       	ld	r24, Z
    14e6:	86 ff       	sbrs	r24, 6
    14e8:	37 c0       	rjmp	.+110    	; 0x1558 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    14ea:	fe 01       	movw	r30, r28
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	e9 5e       	subi	r30, 0xE9	; 233
    14f2:	fd 4f       	sbci	r31, 0xFD	; 253
    14f4:	8f 7b       	andi	r24, 0xBF	; 191
    14f6:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    14f8:	0e 94 ae 04 	call	0x95c	; 0x95c <turn_off_all_inst_leds>
    14fc:	f7 01       	movw	r30, r14
    14fe:	d7 01       	movw	r26, r14
    1500:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1502:	8c 91       	ld	r24, X
    1504:	8f 3f       	cpi	r24, 0xFF	; 255
    1506:	a9 f0       	breq	.+42     	; 0x1532 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1508:	d5 01       	movw	r26, r10
    150a:	8c 91       	ld	r24, X
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	c8 16       	cp	r12, r24
    1510:	d9 06       	cpc	r13, r25
    1512:	49 f4       	brne	.+18     	; 0x1526 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1514:	f4 01       	movw	r30, r8
    1516:	80 81       	ld	r24, Z
    1518:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
    151c:	89 e0       	ldi	r24, 0x09	; 9
    151e:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    1520:	d5 01       	movw	r26, r10
    1522:	8c 93       	st	X, r24
    1524:	19 c0       	rjmp	.+50     	; 0x1558 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1526:	80 81       	ld	r24, Z
    1528:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    152c:	f5 01       	movw	r30, r10
    152e:	c0 82       	st	Z, r12
    1530:	13 c0       	rjmp	.+38     	; 0x1558 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1532:	d5 01       	movw	r26, r10
    1534:	8c 91       	ld	r24, X
    1536:	86 30       	cpi	r24, 0x06	; 6
    1538:	51 f4       	brne	.+20     	; 0x154e <check_inst_switches+0xf4>
    153a:	c7 31       	cpi	r28, 0x17	; 23
    153c:	d1 05       	cpc	r29, r1
    153e:	39 f4       	brne	.+14     	; 0x154e <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    1540:	f2 01       	movw	r30, r4
    1542:	80 81       	ld	r24, Z
    1544:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
					sequencer.current_inst = MA;
    1548:	d5 01       	movw	r26, r10
    154a:	3c 92       	st	X, r3
    154c:	ba cf       	rjmp	.-140    	; 0x14c2 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    154e:	80 81       	ld	r24, Z
    1550:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1554:	f5 01       	movw	r30, r10
    1556:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1558:	0c 31       	cpi	r16, 0x1C	; 28
    155a:	11 05       	cpc	r17, r1
    155c:	0c f4       	brge	.+2      	; 0x1560 <check_inst_switches+0x106>
    155e:	b1 cf       	rjmp	.-158    	; 0x14c2 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    1560:	80 91 37 02 	lds	r24, 0x0237
    1564:	86 ff       	sbrs	r24, 6
    1566:	0c c0       	rjmp	.+24     	; 0x1580 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1568:	e7 e3       	ldi	r30, 0x37	; 55
    156a:	f2 e0       	ldi	r31, 0x02	; 2
    156c:	8f 7b       	andi	r24, 0xBF	; 191
    156e:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    1570:	0e 94 ae 04 	call	0x95c	; 0x95c <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    1574:	84 e1       	ldi	r24, 0x14	; 20
    1576:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
		sequencer.current_inst = AC;
    157a:	80 e1       	ldi	r24, 0x10	; 16
    157c:	80 93 52 04 	sts	0x0452, r24
	}
	
}	
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	9f 90       	pop	r9
    1596:	8f 90       	pop	r8
    1598:	7f 90       	pop	r7
    159a:	6f 90       	pop	r6
    159c:	5f 90       	pop	r5
    159e:	4f 90       	pop	r4
    15a0:	3f 90       	pop	r3
    15a2:	08 95       	ret

000015a4 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    15a4:	80 91 53 02 	lds	r24, 0x0253
    15a8:	86 ff       	sbrs	r24, 6
    15aa:	29 c0       	rjmp	.+82     	; 0x15fe <check_variation_switches+0x5a>
    15ac:	90 91 7d 03 	lds	r25, 0x037D
    15b0:	90 fd       	sbrc	r25, 0
    15b2:	25 c0       	rjmp	.+74     	; 0x15fe <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    15b4:	e3 e5       	ldi	r30, 0x53	; 83
    15b6:	f2 e0       	ldi	r31, 0x02	; 2
    15b8:	8f 7b       	andi	r24, 0xBF	; 191
    15ba:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    15bc:	eb e4       	ldi	r30, 0x4B	; 75
    15be:	f4 e0       	ldi	r31, 0x04	; 4
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <check_variation_switches+0x30>
    15ca:	10 92 4b 04 	sts	0x044B, r1
		if (sequencer.START) {
    15ce:	91 ff       	sbrs	r25, 1
    15d0:	0b c0       	rjmp	.+22     	; 0x15e8 <check_variation_switches+0x44>
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <check_variation_switches+0x34>
    15d4:	91 ff       	sbrs	r25, 1
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    15d8:	80 91 7b 03 	lds	r24, 0x037B
    15dc:	84 60       	ori	r24, 0x04	; 4
    15de:	80 93 7b 03 	sts	0x037B, r24
    15e2:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    15e4:	8d 7f       	andi	r24, 0xFD	; 253
    15e6:	31 f4       	brne	.+12     	; 0x15f4 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    15e8:	ea e4       	ldi	r30, 0x4A	; 74
    15ea:	f4 e0       	ldi	r31, 0x04	; 4
    15ec:	80 81       	ld	r24, Z
    15ee:	8e 7f       	andi	r24, 0xFE	; 254
    15f0:	80 83       	st	Z, r24
    15f2:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    15f4:	ea e4       	ldi	r30, 0x4A	; 74
    15f6:	f4 e0       	ldi	r31, 0x04	; 4
    15f8:	80 81       	ld	r24, Z
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
    15fe:	08 95       	ret

00001600 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    160c:	80 91 7d 03 	lds	r24, 0x037D
    1610:	86 70       	andi	r24, 0x06	; 6
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	09 f0       	breq	.+2      	; 0x1618 <check_clear_switch+0x18>
    1616:	43 c0       	rjmp	.+134    	; 0x169e <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    1618:	80 91 7c 03 	lds	r24, 0x037C
    161c:	81 11       	cpse	r24, r1
    161e:	46 c0       	rjmp	.+140    	; 0x16ac <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    1620:	8c e1       	ldi	r24, 0x1C	; 28
    1622:	0e 94 9b 04 	call	0x936	; 0x936 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1626:	ea e4       	ldi	r30, 0x4A	; 74
    1628:	f4 e0       	ldi	r31, 0x04	; 4
    162a:	80 81       	ld	r24, Z
    162c:	80 fb       	bst	r24, 0
    162e:	ee 24       	eor	r14, r14
    1630:	e0 f8       	bld	r14, 0
    1632:	f1 2c       	mov	r15, r1
    1634:	26 e6       	ldi	r18, 0x66	; 102
    1636:	2e 9d       	mul	r18, r14
    1638:	d0 01       	movw	r26, r0
    163a:	2f 9d       	mul	r18, r15
    163c:	b0 0d       	add	r27, r0
    163e:	11 24       	eor	r1, r1
    1640:	a2 58       	subi	r26, 0x82	; 130
    1642:	bc 4f       	sbci	r27, 0xFC	; 252
    1644:	80 e4       	ldi	r24, 0x40	; 64
    1646:	ed 01       	movw	r28, r26
    1648:	19 92       	st	Y+, r1
    164a:	8a 95       	dec	r24
    164c:	e9 f7       	brne	.-6      	; 0x1648 <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    164e:	80 81       	ld	r24, Z
    1650:	08 2f       	mov	r16, r24
    1652:	01 70       	andi	r16, 0x01	; 1
    1654:	10 e0       	ldi	r17, 0x00	; 0
    1656:	20 9f       	mul	r18, r16
    1658:	d0 01       	movw	r26, r0
    165a:	21 9f       	mul	r18, r17
    165c:	b0 0d       	add	r27, r0
    165e:	11 24       	eor	r1, r1
    1660:	ae 53       	subi	r26, 0x3E	; 62
    1662:	bc 4f       	sbci	r27, 0xFC	; 252
    1664:	82 e2       	ldi	r24, 0x22	; 34
    1666:	ed 01       	movw	r28, r26
    1668:	19 92       	st	Y+, r1
    166a:	8a 95       	dec	r24
    166c:	e9 f7       	brne	.-6      	; 0x1668 <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    166e:	80 81       	ld	r24, Z
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	c8 2f       	mov	r28, r24
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	d8 2f       	mov	r29, r24
    1678:	2c 9f       	mul	r18, r28
    167a:	c0 01       	movw	r24, r0
    167c:	2d 9f       	mul	r18, r29
    167e:	90 0d       	add	r25, r0
    1680:	11 24       	eor	r1, r1
    1682:	84 58       	subi	r24, 0x84	; 132
    1684:	9c 4f       	sbci	r25, 0xFC	; 252
    1686:	fc 01       	movw	r30, r24
    1688:	ee 5b       	subi	r30, 0xBE	; 190
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	11 82       	std	Z+1, r1	; 0x01
    168e:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    1690:	32 96       	adiw	r30, 0x02	; 2
    1692:	11 82       	std	Z+1, r1	; 0x01
    1694:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    1696:	80 e1       	ldi	r24, 0x10	; 16
    1698:	80 93 4d 04 	sts	0x044D, r24
				break;
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    169e:	80 91 7c 03 	lds	r24, 0x037C
    16a2:	81 11       	cpse	r24, r1
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    16a6:	8c e1       	ldi	r24, 0x1C	; 28
    16a8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <turn_on>
		}
		
	}
	
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	08 95       	ret

000016ba <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    16ba:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    16bc:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    16be:	74 83       	std	Z+4, r23	; 0x04
    16c0:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    16c2:	11 82       	std	Z+1, r1	; 0x01
    16c4:	10 82       	st	Z, r1
    16c6:	08 95       	ret

000016c8 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	ec 01       	movw	r28, r24
    16d4:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    16d6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <store_and_clear_interrupt>
    16da:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    16dc:	f9 80       	ldd	r15, Y+1	; 0x01
    16de:	4f 2d       	mov	r20, r15
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	ca 01       	movw	r24, r20
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	2a 81       	ldd	r18, Y+2	; 0x02
    16e8:	62 2f       	mov	r22, r18
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    16f0:	28 81       	ld	r18, Y
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	82 17       	cp	r24, r18
    16f6:	93 07       	cpc	r25, r19
    16f8:	29 f4       	brne	.+10     	; 0x1704 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    16fa:	81 2f       	mov	r24, r17
    16fc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <restore_interrupt_setting>
      return false;
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	12 c0       	rjmp	.+36     	; 0x1728 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1704:	eb 81       	ldd	r30, Y+3	; 0x03
    1706:	fc 81       	ldd	r31, Y+4	; 0x04
    1708:	ef 0d       	add	r30, r15
    170a:	f1 1d       	adc	r31, r1
    170c:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    170e:	29 81       	ldd	r18, Y+1	; 0x01
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	c9 01       	movw	r24, r18
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	6a 81       	ldd	r22, Y+2	; 0x02
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    171e:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1720:	81 2f       	mov	r24, r17
    1722:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <restore_interrupt_setting>
      return true;
    1726:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	08 95       	ret

00001734 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    173a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    173e:	39 81       	ldd	r19, Y+1	; 0x01
    1740:	28 81       	ld	r18, Y
    1742:	32 17       	cp	r19, r18
    1744:	18 f0       	brcs	.+6      	; 0x174c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1746:	c3 2f       	mov	r28, r19
    1748:	c2 1b       	sub	r28, r18
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <bytequeue_length+0x20>
    174c:	9a 81       	ldd	r25, Y+2	; 0x02
    174e:	c3 2f       	mov	r28, r19
    1750:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1752:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1754:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <restore_interrupt_setting>
   return len;
}
    1758:	8c 2f       	mov	r24, r28
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret

00001760 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1760:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1762:	80 81       	ld	r24, Z
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	9b 01       	movw	r18, r22
    1768:	28 0f       	add	r18, r24
    176a:	31 1d       	adc	r19, r1
    176c:	c9 01       	movw	r24, r18
    176e:	62 81       	ldd	r22, Z+2	; 0x02
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    1776:	03 80       	ldd	r0, Z+3	; 0x03
    1778:	f4 81       	ldd	r31, Z+4	; 0x04
    177a:	e0 2d       	mov	r30, r0
    177c:	e8 0f       	add	r30, r24
    177e:	f9 1f       	adc	r31, r25
}
    1780:	80 81       	ld	r24, Z
    1782:	08 95       	ret

00001784 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	ec 01       	movw	r28, r24
    178c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    178e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <store_and_clear_interrupt>
    1792:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1794:	88 81       	ld	r24, Y
    1796:	21 2f       	mov	r18, r17
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	b9 01       	movw	r22, r18
    179c:	68 0f       	add	r22, r24
    179e:	71 1d       	adc	r23, r1
    17a0:	cb 01       	movw	r24, r22
    17a2:	6a 81       	ldd	r22, Y+2	; 0x02
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__divmodhi4>
    17aa:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    17ac:	84 2f       	mov	r24, r20
    17ae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <restore_interrupt_setting>
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	08 95       	ret

000017ba <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    17ba:	8f b7       	in	r24, 0x3f	; 63
   cli();
    17bc:	f8 94       	cli
   return sreg;
}
    17be:	08 95       	ret

000017c0 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    17c0:	8f bf       	out	0x3f, r24	; 63
    17c2:	08 95       	ret

000017c4 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    17c4:	88 1f       	adc	r24, r24
    17c6:	88 27       	eor	r24, r24
    17c8:	88 1f       	adc	r24, r24
    17ca:	08 95       	ret

000017cc <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	88 3f       	cpi	r24, 0xF8	; 248
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <midi_is_realtime+0x8>
    17d2:	90 e0       	ldi	r25, 0x00	; 0
}
    17d4:	89 2f       	mov	r24, r25
    17d6:	08 95       	ret

000017d8 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    17d8:	98 2f       	mov	r25, r24
    17da:	90 7f       	andi	r25, 0xF0	; 240
    17dc:	90 3c       	cpi	r25, 0xC0	; 192
    17de:	b1 f0       	breq	.+44     	; 0x180c <midi_packet_length+0x34>
    17e0:	58 f4       	brcc	.+22     	; 0x17f8 <midi_packet_length+0x20>
    17e2:	90 39       	cpi	r25, 0x90	; 144
    17e4:	41 f1       	breq	.+80     	; 0x1836 <midi_packet_length+0x5e>
    17e6:	18 f4       	brcc	.+6      	; 0x17ee <midi_packet_length+0x16>
    17e8:	90 38       	cpi	r25, 0x80	; 128
    17ea:	19 f5       	brne	.+70     	; 0x1832 <midi_packet_length+0x5a>
    17ec:	24 c0       	rjmp	.+72     	; 0x1836 <midi_packet_length+0x5e>
    17ee:	90 3a       	cpi	r25, 0xA0	; 160
    17f0:	11 f1       	breq	.+68     	; 0x1836 <midi_packet_length+0x5e>
    17f2:	90 3b       	cpi	r25, 0xB0	; 176
    17f4:	f1 f4       	brne	.+60     	; 0x1832 <midi_packet_length+0x5a>
    17f6:	1f c0       	rjmp	.+62     	; 0x1836 <midi_packet_length+0x5e>
    17f8:	90 3e       	cpi	r25, 0xE0	; 224
    17fa:	e9 f0       	breq	.+58     	; 0x1836 <midi_packet_length+0x5e>
    17fc:	18 f4       	brcc	.+6      	; 0x1804 <midi_packet_length+0x2c>
    17fe:	90 3d       	cpi	r25, 0xD0	; 208
    1800:	29 f0       	breq	.+10     	; 0x180c <midi_packet_length+0x34>
    1802:	17 c0       	rjmp	.+46     	; 0x1832 <midi_packet_length+0x5a>
    1804:	90 3f       	cpi	r25, 0xF0	; 240
    1806:	21 f0       	breq	.+8      	; 0x1810 <midi_packet_length+0x38>
    1808:	93 3f       	cpi	r25, 0xF3	; 243
    180a:	99 f4       	brne	.+38     	; 0x1832 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	08 95       	ret
      case 0xF0:
         switch(status) {
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	fc 01       	movw	r30, r24
    1814:	e1 5f       	subi	r30, 0xF1	; 241
    1816:	f1 09       	sbc	r31, r1
    1818:	ef 30       	cpi	r30, 0x0F	; 15
    181a:	f1 05       	cpc	r31, r1
    181c:	40 f4       	brcc	.+16     	; 0x182e <midi_packet_length+0x56>
    181e:	e6 5a       	subi	r30, 0xA6	; 166
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    183c:	08 95       	ret

0000183e <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    183e:	fc 01       	movw	r30, r24
    1840:	75 83       	std	Z+5, r23	; 0x05
    1842:	64 83       	std	Z+4, r22	; 0x04
    1844:	08 95       	ret

00001846 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1846:	fc 01       	movw	r30, r24
    1848:	77 83       	std	Z+7, r23	; 0x07
    184a:	66 83       	std	Z+6, r22	; 0x06
    184c:	08 95       	ret

0000184e <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    184e:	fc 01       	movw	r30, r24
    1850:	77 8b       	std	Z+23, r23	; 0x17
    1852:	66 8b       	std	Z+22, r22	; 0x16
    1854:	08 95       	ret

00001856 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    185c:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    185e:	1f a2       	std	Y+39, r1	; 0x27
    1860:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1862:	bc 01       	movw	r22, r24
    1864:	68 5d       	subi	r22, 0xD8	; 216
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	40 ec       	ldi	r20, 0xC0	; 192
    186a:	88 51       	subi	r24, 0x18	; 24
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1872:	1b 82       	std	Y+3, r1	; 0x03
    1874:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1876:	1d 82       	std	Y+5, r1	; 0x05
    1878:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    187a:	1f 82       	std	Y+7, r1	; 0x07
    187c:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    187e:	19 86       	std	Y+9, r1	; 0x09
    1880:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1882:	1b 86       	std	Y+11, r1	; 0x0b
    1884:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1886:	1d 86       	std	Y+13, r1	; 0x0d
    1888:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    188a:	1f 86       	std	Y+15, r1	; 0x0f
    188c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    188e:	19 8a       	std	Y+17, r1	; 0x11
    1890:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1892:	1b 8a       	std	Y+19, r1	; 0x13
    1894:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1896:	1d 8a       	std	Y+21, r1	; 0x15
    1898:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    189a:	1f 8a       	std	Y+23, r1	; 0x17
    189c:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    189e:	19 8e       	std	Y+25, r1	; 0x19
    18a0:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    18a2:	1b 8e       	std	Y+27, r1	; 0x1b
    18a4:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    18a6:	1d 8e       	std	Y+29, r1	; 0x1d
    18a8:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    18aa:	1f 8e       	std	Y+31, r1	; 0x1f
    18ac:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    18ae:	19 a2       	std	Y+33, r1	; 0x21
    18b0:	18 a2       	std	Y+32, r1	; 0x20
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    18c4:	66 23       	and	r22, r22
    18c6:	99 f0       	breq	.+38     	; 0x18ee <midi_device_input+0x36>
    18c8:	ea 01       	movw	r28, r20
    18ca:	61 50       	subi	r22, 0x01	; 1
    18cc:	06 2f       	mov	r16, r22
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	0f 5f       	subi	r16, 0xFF	; 255
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	04 0f       	add	r16, r20
    18d6:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    18d8:	7c 01       	movw	r14, r24
    18da:	28 ee       	ldi	r18, 0xE8	; 232
    18dc:	e2 0e       	add	r14, r18
    18de:	f1 1c       	adc	r15, r1
    18e0:	69 91       	ld	r22, Y+
    18e2:	c7 01       	movw	r24, r14
    18e4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    18e8:	c0 17       	cp	r28, r16
    18ea:	d1 07       	cpc	r29, r17
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	08 95       	ret

000018fc <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	00 d0       	rcall	.+0      	; 0x1912 <midi_input_callbacks+0x16>
    1912:	1f 92       	push	r1
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	7c 01       	movw	r14, r24
    191a:	6b 01       	movw	r12, r22
    191c:	14 2f       	mov	r17, r20
    191e:	b2 2e       	mov	r11, r18
    1920:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1922:	dc 01       	movw	r26, r24
    1924:	95 96       	adiw	r26, 0x25	; 37
    1926:	8c 91       	ld	r24, X
    1928:	95 97       	sbiw	r26, 0x25	; 37
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	11 f5       	brne	.+68     	; 0x1972 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    192e:	5a 96       	adiw	r26, 0x1a	; 26
    1930:	ed 91       	ld	r30, X+
    1932:	fc 91       	ld	r31, X
    1934:	5b 97       	sbiw	r26, 0x1b	; 27
    1936:	30 97       	sbiw	r30, 0x00	; 0
    1938:	09 f4       	brne	.+2      	; 0x193c <midi_input_callbacks+0x40>
    193a:	cc c0       	rjmp	.+408    	; 0x1ad4 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    193c:	9b 01       	movw	r18, r22
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	31 09       	sbc	r19, r1
    1942:	ab ea       	ldi	r26, 0xAB	; 171
    1944:	ba ea       	ldi	r27, 0xAA	; 170
    1946:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__umulhisi3>
    194a:	96 95       	lsr	r25
    194c:	87 95       	ror	r24
    194e:	9c 01       	movw	r18, r24
    1950:	22 0f       	add	r18, r18
    1952:	33 1f       	adc	r19, r19
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1958:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    195a:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    195c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    195e:	4c 2d       	mov	r20, r12
    1960:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1962:	9e 01       	movw	r18, r28
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	68 2f       	mov	r22, r24
    196a:	79 2f       	mov	r23, r25
    196c:	c7 01       	movw	r24, r14
    196e:	09 95       	icall
    1970:	be c0       	rjmp	.+380    	; 0x1aee <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1972:	62 30       	cpi	r22, 0x02	; 2
    1974:	71 05       	cpc	r23, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <midi_input_callbacks+0x7e>
    1978:	55 c0       	rjmp	.+170    	; 0x1a24 <midi_input_callbacks+0x128>
    197a:	63 30       	cpi	r22, 0x03	; 3
    197c:	71 05       	cpc	r23, r1
    197e:	29 f0       	breq	.+10     	; 0x198a <midi_input_callbacks+0x8e>
    1980:	61 30       	cpi	r22, 0x01	; 1
    1982:	71 05       	cpc	r23, r1
    1984:	09 f0       	breq	.+2      	; 0x1988 <midi_input_callbacks+0x8c>
    1986:	a1 c0       	rjmp	.+322    	; 0x1aca <midi_input_callbacks+0x1ce>
    1988:	88 c0       	rjmp	.+272    	; 0x1a9a <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    198a:	84 2f       	mov	r24, r20
    198c:	80 7f       	andi	r24, 0xF0	; 240
    198e:	80 3a       	cpi	r24, 0xA0	; 160
    1990:	f1 f0       	breq	.+60     	; 0x19ce <midi_input_callbacks+0xd2>
    1992:	28 f4       	brcc	.+10     	; 0x199e <midi_input_callbacks+0xa2>
    1994:	80 38       	cpi	r24, 0x80	; 128
    1996:	a9 f0       	breq	.+42     	; 0x19c2 <midi_input_callbacks+0xc6>
    1998:	80 39       	cpi	r24, 0x90	; 144
    199a:	69 f0       	breq	.+26     	; 0x19b6 <midi_input_callbacks+0xba>
    199c:	2f c0       	rjmp	.+94     	; 0x19fc <midi_input_callbacks+0x100>
    199e:	80 3e       	cpi	r24, 0xE0	; 224
    19a0:	e1 f0       	breq	.+56     	; 0x19da <midi_input_callbacks+0xde>
    19a2:	80 3f       	cpi	r24, 0xF0	; 240
    19a4:	01 f1       	breq	.+64     	; 0x19e6 <midi_input_callbacks+0xea>
    19a6:	80 3b       	cpi	r24, 0xB0	; 176
    19a8:	49 f5       	brne	.+82     	; 0x19fc <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    19aa:	d7 01       	movw	r26, r14
    19ac:	12 96       	adiw	r26, 0x02	; 2
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	13 97       	sbiw	r26, 0x03	; 3
              break;
    19b4:	25 c0       	rjmp	.+74     	; 0x1a00 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    19b6:	d7 01       	movw	r26, r14
    19b8:	14 96       	adiw	r26, 0x04	; 4
    19ba:	ed 91       	ld	r30, X+
    19bc:	fc 91       	ld	r31, X
    19be:	15 97       	sbiw	r26, 0x05	; 5
              break;
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    19c2:	d7 01       	movw	r26, r14
    19c4:	16 96       	adiw	r26, 0x06	; 6
    19c6:	ed 91       	ld	r30, X+
    19c8:	fc 91       	ld	r31, X
    19ca:	17 97       	sbiw	r26, 0x07	; 7
              break;
    19cc:	19 c0       	rjmp	.+50     	; 0x1a00 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    19ce:	d7 01       	movw	r26, r14
    19d0:	18 96       	adiw	r26, 0x08	; 8
    19d2:	ed 91       	ld	r30, X+
    19d4:	fc 91       	ld	r31, X
    19d6:	19 97       	sbiw	r26, 0x09	; 9
              break;
    19d8:	13 c0       	rjmp	.+38     	; 0x1a00 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    19da:	d7 01       	movw	r26, r14
    19dc:	1a 96       	adiw	r26, 0x0a	; 10
    19de:	ed 91       	ld	r30, X+
    19e0:	fc 91       	ld	r31, X
    19e2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    19e6:	42 3f       	cpi	r20, 0xF2	; 242
    19e8:	09 f0       	breq	.+2      	; 0x19ec <midi_input_callbacks+0xf0>
    19ea:	74 c0       	rjmp	.+232    	; 0x1ad4 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    19ec:	d7 01       	movw	r26, r14
    19ee:	1c 96       	adiw	r26, 0x0c	; 12
    19f0:	ed 91       	ld	r30, X+
    19f2:	fc 91       	ld	r31, X
    19f4:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	41 f4       	brne	.+16     	; 0x1a0a <midi_input_callbacks+0x10e>
    19fa:	6c c0       	rjmp	.+216    	; 0x1ad4 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    19fc:	e0 e0       	ldi	r30, 0x00	; 0
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a00:	30 97       	sbiw	r30, 0x00	; 0
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <midi_input_callbacks+0x10a>
    1a04:	67 c0       	rjmp	.+206    	; 0x1ad4 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1a06:	12 3f       	cpi	r17, 0xF2	; 242
    1a08:	31 f4       	brne	.+12     	; 0x1a16 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1a0a:	2a 2d       	mov	r18, r10
    1a0c:	4b 2d       	mov	r20, r11
    1a0e:	62 ef       	ldi	r22, 0xF2	; 242
    1a10:	c7 01       	movw	r24, r14
    1a12:	09 95       	icall
    1a14:	6c c0       	rjmp	.+216    	; 0x1aee <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1a16:	2a 2d       	mov	r18, r10
    1a18:	4b 2d       	mov	r20, r11
    1a1a:	61 2f       	mov	r22, r17
    1a1c:	6f 70       	andi	r22, 0x0F	; 15
    1a1e:	c7 01       	movw	r24, r14
    1a20:	09 95       	icall
    1a22:	65 c0       	rjmp	.+202    	; 0x1aee <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1a24:	84 2f       	mov	r24, r20
    1a26:	80 7f       	andi	r24, 0xF0	; 240
    1a28:	80 3d       	cpi	r24, 0xD0	; 208
    1a2a:	51 f0       	breq	.+20     	; 0x1a40 <midi_input_callbacks+0x144>
    1a2c:	80 3f       	cpi	r24, 0xF0	; 240
    1a2e:	71 f0       	breq	.+28     	; 0x1a4c <midi_input_callbacks+0x150>
    1a30:	80 3c       	cpi	r24, 0xC0	; 192
    1a32:	01 f5       	brne	.+64     	; 0x1a74 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1a34:	d7 01       	movw	r26, r14
    1a36:	1e 96       	adiw	r26, 0x0e	; 14
    1a38:	ed 91       	ld	r30, X+
    1a3a:	fc 91       	ld	r31, X
    1a3c:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1a3e:	1c c0       	rjmp	.+56     	; 0x1a78 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1a40:	d7 01       	movw	r26, r14
    1a42:	50 96       	adiw	r26, 0x10	; 16
    1a44:	ed 91       	ld	r30, X+
    1a46:	fc 91       	ld	r31, X
    1a48:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1a4c:	43 3f       	cpi	r20, 0xF3	; 243
    1a4e:	41 f4       	brne	.+16     	; 0x1a60 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1a50:	d7 01       	movw	r26, r14
    1a52:	52 96       	adiw	r26, 0x12	; 18
    1a54:	ed 91       	ld	r30, X+
    1a56:	fc 91       	ld	r31, X
    1a58:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a5a:	30 97       	sbiw	r30, 0x00	; 0
    1a5c:	99 f4       	brne	.+38     	; 0x1a84 <midi_input_callbacks+0x188>
    1a5e:	3a c0       	rjmp	.+116    	; 0x1ad4 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1a60:	41 3f       	cpi	r20, 0xF1	; 241
    1a62:	c1 f5       	brne	.+112    	; 0x1ad4 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1a64:	d7 01       	movw	r26, r14
    1a66:	54 96       	adiw	r26, 0x14	; 20
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1a6e:	30 97       	sbiw	r30, 0x00	; 0
    1a70:	49 f4       	brne	.+18     	; 0x1a84 <midi_input_callbacks+0x188>
    1a72:	30 c0       	rjmp	.+96     	; 0x1ad4 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1a74:	e0 e0       	ldi	r30, 0x00	; 0
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a78:	30 97       	sbiw	r30, 0x00	; 0
    1a7a:	61 f1       	breq	.+88     	; 0x1ad4 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1a7c:	81 2f       	mov	r24, r17
    1a7e:	8d 7f       	andi	r24, 0xFD	; 253
    1a80:	81 3f       	cpi	r24, 0xF1	; 241
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1a84:	4b 2d       	mov	r20, r11
    1a86:	61 2f       	mov	r22, r17
    1a88:	c7 01       	movw	r24, r14
    1a8a:	09 95       	icall
    1a8c:	30 c0       	rjmp	.+96     	; 0x1aee <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1a8e:	4b 2d       	mov	r20, r11
    1a90:	61 2f       	mov	r22, r17
    1a92:	6f 70       	andi	r22, 0x0F	; 15
    1a94:	c7 01       	movw	r24, r14
    1a96:	09 95       	icall
    1a98:	2a c0       	rjmp	.+84     	; 0x1aee <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1a9a:	84 2f       	mov	r24, r20
    1a9c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <midi_is_realtime>
    1aa0:	88 23       	and	r24, r24
    1aa2:	31 f0       	breq	.+12     	; 0x1ab0 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1aa4:	d7 01       	movw	r26, r14
    1aa6:	56 96       	adiw	r26, 0x16	; 22
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	57 97       	sbiw	r26, 0x17	; 23
    1aae:	07 c0       	rjmp	.+14     	; 0x1abe <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1ab0:	16 3f       	cpi	r17, 0xF6	; 246
    1ab2:	81 f4       	brne	.+32     	; 0x1ad4 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1ab4:	d7 01       	movw	r26, r14
    1ab6:	58 96       	adiw	r26, 0x18	; 24
    1ab8:	ed 91       	ld	r30, X+
    1aba:	fc 91       	ld	r31, X
    1abc:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1abe:	30 97       	sbiw	r30, 0x00	; 0
    1ac0:	49 f0       	breq	.+18     	; 0x1ad4 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1ac2:	61 2f       	mov	r22, r17
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	09 95       	icall
    1ac8:	12 c0       	rjmp	.+36     	; 0x1aee <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1aca:	64 30       	cpi	r22, 0x04	; 4
    1acc:	71 05       	cpc	r23, r1
    1ace:	10 f0       	brcs	.+4      	; 0x1ad4 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1ad0:	c1 2c       	mov	r12, r1
    1ad2:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1ad4:	d7 01       	movw	r26, r14
    1ad6:	5c 96       	adiw	r26, 0x1c	; 28
    1ad8:	ed 91       	ld	r30, X+
    1ada:	fc 91       	ld	r31, X
    1adc:	5d 97       	sbiw	r26, 0x1d	; 29
    1ade:	30 97       	sbiw	r30, 0x00	; 0
    1ae0:	31 f0       	breq	.+12     	; 0x1aee <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1ae2:	0a 2d       	mov	r16, r10
    1ae4:	2b 2d       	mov	r18, r11
    1ae6:	41 2f       	mov	r20, r17
    1ae8:	b6 01       	movw	r22, r12
    1aea:	c7 01       	movw	r24, r14
    1aec:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1aee:	d7 01       	movw	r26, r14
    1af0:	5e 96       	adiw	r26, 0x1e	; 30
    1af2:	ed 91       	ld	r30, X+
    1af4:	fc 91       	ld	r31, X
    1af6:	5f 97       	sbiw	r26, 0x1f	; 31
    1af8:	30 97       	sbiw	r30, 0x00	; 0
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1afc:	0a 2d       	mov	r16, r10
    1afe:	2b 2d       	mov	r18, r11
    1b00:	41 2f       	mov	r20, r17
    1b02:	b6 01       	movw	r22, r12
    1b04:	c7 01       	movw	r24, r14
    1b06:	09 95       	icall
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	08 95       	ret

00001b24 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	ec 01       	movw	r28, r24
    1b30:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1b32:	86 2f       	mov	r24, r22
    1b34:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <midi_is_realtime>
    1b38:	88 23       	and	r24, r24
    1b3a:	69 f0       	breq	.+26     	; 0x1b56 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1b3c:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	41 2f       	mov	r20, r17
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <midi_input_callbacks>
    device->input_state = state;
    1b52:	fd a2       	std	Y+37, r15	; 0x25
    1b54:	a4 c0       	rjmp	.+328    	; 0x1c9e <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1b56:	81 2f       	mov	r24, r17
    1b58:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <midi_is_statusbyte>
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <midi_process_byte+0x3e>
    1b60:	5d c0       	rjmp	.+186    	; 0x1c1c <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1b62:	8d a1       	ldd	r24, Y+37	; 0x25
    1b64:	84 30       	cpi	r24, 0x04	; 4
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1b68:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9f a3       	std	Y+39, r25	; 0x27
    1b70:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1b72:	81 2f       	mov	r24, r17
    1b74:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <midi_packet_length>
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	31 f0       	breq	.+12     	; 0x1b88 <midi_process_byte+0x64>
    1b7c:	b8 f0       	brcs	.+46     	; 0x1bac <midi_process_byte+0x88>
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	79 f0       	breq	.+30     	; 0x1ba0 <midi_process_byte+0x7c>
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <midi_process_byte+0x82>
    1b86:	46 c0       	rjmp	.+140    	; 0x1c14 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1b8c:	00 e0       	ldi	r16, 0x00	; 0
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	41 2f       	mov	r20, r17
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	ce 01       	movw	r24, r28
    1b98:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <midi_input_callbacks>
        device->input_state = IDLE;
    1b9c:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1b9e:	7f c0       	rjmp	.+254    	; 0x1c9e <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1ba4:	7c c0       	rjmp	.+248    	; 0x1c9e <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1baa:	79 c0       	rjmp	.+242    	; 0x1c9e <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1bac:	10 3f       	cpi	r17, 0xF0	; 240
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <midi_process_byte+0x92>
    1bb0:	17 3f       	cpi	r17, 0xF7	; 247
    1bb2:	51 f0       	breq	.+20     	; 0x1bc8 <midi_process_byte+0xa4>
    1bb4:	2b c0       	rjmp	.+86     	; 0x1c0c <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1bb6:	84 e0       	ldi	r24, 0x04	; 4
    1bb8:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1bba:	80 ef       	ldi	r24, 0xF0	; 240
    1bbc:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9f a3       	std	Y+39, r25	; 0x27
    1bc4:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1bc6:	6b c0       	rjmp	.+214    	; 0x1c9e <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1bc8:	4e a1       	ldd	r20, Y+38	; 0x26
    1bca:	5f a1       	ldd	r21, Y+39	; 0x27
    1bcc:	9a 01       	movw	r18, r20
    1bce:	ab ea       	ldi	r26, 0xAB	; 171
    1bd0:	ba ea       	ldi	r27, 0xAA	; 170
    1bd2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__umulhisi3>
    1bd6:	96 95       	lsr	r25
    1bd8:	87 95       	ror	r24
    1bda:	9c 01       	movw	r18, r24
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	fa 01       	movw	r30, r20
    1be6:	e8 1b       	sub	r30, r24
    1be8:	f9 0b       	sbc	r31, r25
    1bea:	ec 0f       	add	r30, r28
    1bec:	fd 1f       	adc	r31, r29
    1bee:	87 ef       	ldi	r24, 0xF7	; 247
    1bf0:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1bf2:	ba 01       	movw	r22, r20
    1bf4:	6f 5f       	subi	r22, 0xFF	; 255
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	7f a3       	std	Y+39, r23	; 0x27
    1bfa:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1bfc:	0c a1       	ldd	r16, Y+36	; 0x24
    1bfe:	2b a1       	ldd	r18, Y+35	; 0x23
    1c00:	4a a1       	ldd	r20, Y+34	; 0x22
    1c02:	ce 01       	movw	r24, r28
    1c04:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1c08:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1c0a:	49 c0       	rjmp	.+146    	; 0x1c9e <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1c0c:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1c0e:	1f a2       	std	Y+39, r1	; 0x27
    1c10:	1e a2       	std	Y+38, r1	; 0x26
    1c12:	45 c0       	rjmp	.+138    	; 0x1c9e <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1c14:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1c16:	1f a2       	std	Y+39, r1	; 0x27
    1c18:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1c1a:	41 c0       	rjmp	.+130    	; 0x1c9e <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1c1c:	ed a1       	ldd	r30, Y+37	; 0x25
    1c1e:	ee 23       	and	r30, r30
    1c20:	f1 f1       	breq	.+124    	; 0x1c9e <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1c22:	4e a1       	ldd	r20, Y+38	; 0x26
    1c24:	5f a1       	ldd	r21, Y+39	; 0x27
    1c26:	9a 01       	movw	r18, r20
    1c28:	ab ea       	ldi	r26, 0xAB	; 171
    1c2a:	ba ea       	ldi	r27, 0xAA	; 170
    1c2c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__umulhisi3>
    1c30:	96 95       	lsr	r25
    1c32:	87 95       	ror	r24
    1c34:	9c 01       	movw	r18, r24
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	82 0f       	add	r24, r18
    1c3c:	93 1f       	adc	r25, r19
    1c3e:	9a 01       	movw	r18, r20
    1c40:	28 1b       	sub	r18, r24
    1c42:	39 0b       	sbc	r19, r25
    1c44:	de 01       	movw	r26, r28
    1c46:	a2 0f       	add	r26, r18
    1c48:	b3 1f       	adc	r27, r19
    1c4a:	92 96       	adiw	r26, 0x22	; 34
    1c4c:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1c4e:	ba 01       	movw	r22, r20
    1c50:	6f 5f       	subi	r22, 0xFF	; 255
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	7f a3       	std	Y+39, r23	; 0x27
    1c56:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1c58:	21 30       	cpi	r18, 0x01	; 1
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	89 f0       	breq	.+34     	; 0x1c80 <midi_process_byte+0x15c>
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	e9 f4       	brne	.+58     	; 0x1c9e <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1c64:	0c a1       	ldd	r16, Y+36	; 0x24
    1c66:	2b a1       	ldd	r18, Y+35	; 0x23
    1c68:	4a a1       	ldd	r20, Y+34	; 0x22
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1c70:	8d a1       	ldd	r24, Y+37	; 0x25
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	a1 f0       	breq	.+40     	; 0x1c9e <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9f a3       	std	Y+39, r25	; 0x27
    1c7c:	8e a3       	std	Y+38, r24	; 0x26
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1c80:	e2 30       	cpi	r30, 0x02	; 2
    1c82:	69 f4       	brne	.+26     	; 0x1c9e <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1c84:	00 e0       	ldi	r16, 0x00	; 0
    1c86:	2b a1       	ldd	r18, Y+35	; 0x23
    1c88:	4a a1       	ldd	r20, Y+34	; 0x22
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	84 30       	cpi	r24, 0x04	; 4
    1c94:	21 f0       	breq	.+8      	; 0x1c9e <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9f a3       	std	Y+39, r25	; 0x27
    1c9c:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	08 95       	ret

00001caa <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	90 96       	adiw	r26, 0x20	; 32
    1cc0:	ed 91       	ld	r30, X+
    1cc2:	fc 91       	ld	r31, X
    1cc4:	91 97       	sbiw	r26, 0x21	; 33
    1cc6:	30 97       	sbiw	r30, 0x00	; 0
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1cca:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1ccc:	86 01       	movw	r16, r12
    1cce:	08 51       	subi	r16, 0x18	; 24
    1cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1cd8:	e8 2e       	mov	r14, r24
    1cda:	f1 2c       	mov	r15, r1
    1cdc:	e1 14       	cp	r14, r1
    1cde:	f1 04       	cpc	r15, r1
    1ce0:	91 f0       	breq	.+36     	; 0x1d06 <midi_device_process+0x5c>
    1ce2:	c0 e0       	ldi	r28, 0x00	; 0
    1ce4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	c8 01       	movw	r24, r16
    1cea:	0e 94 b0 0b 	call	0x1760	; 0x1760 <bytequeue_get>
    1cee:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1cf0:	c6 01       	movw	r24, r12
    1cf2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	0e 94 c2 0b 	call	0x1784	; 0x1784 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1cfe:	21 96       	adiw	r28, 0x01	; 1
    1d00:	ce 15       	cp	r28, r14
    1d02:	df 05       	cpc	r29, r15
    1d04:	81 f7       	brne	.-32     	; 0x1ce6 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <__divmodhi4>:
    1d18:	97 fb       	bst	r25, 7
    1d1a:	07 2e       	mov	r0, r23
    1d1c:	16 f4       	brtc	.+4      	; 0x1d22 <__divmodhi4+0xa>
    1d1e:	00 94       	com	r0
    1d20:	07 d0       	rcall	.+14     	; 0x1d30 <__divmodhi4_neg1>
    1d22:	77 fd       	sbrc	r23, 7
    1d24:	09 d0       	rcall	.+18     	; 0x1d38 <__divmodhi4_neg2>
    1d26:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodhi4>
    1d2a:	07 fc       	sbrc	r0, 7
    1d2c:	05 d0       	rcall	.+10     	; 0x1d38 <__divmodhi4_neg2>
    1d2e:	3e f4       	brtc	.+14     	; 0x1d3e <__divmodhi4_exit>

00001d30 <__divmodhi4_neg1>:
    1d30:	90 95       	com	r25
    1d32:	81 95       	neg	r24
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	08 95       	ret

00001d38 <__divmodhi4_neg2>:
    1d38:	70 95       	com	r23
    1d3a:	61 95       	neg	r22
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001d3e <__divmodhi4_exit>:
    1d3e:	08 95       	ret

00001d40 <__tablejump2__>:
    1d40:	ee 0f       	add	r30, r30
    1d42:	ff 1f       	adc	r31, r31
    1d44:	05 90       	lpm	r0, Z+
    1d46:	f4 91       	lpm	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	09 94       	ijmp

00001d4c <__umulhisi3>:
    1d4c:	a2 9f       	mul	r26, r18
    1d4e:	b0 01       	movw	r22, r0
    1d50:	b3 9f       	mul	r27, r19
    1d52:	c0 01       	movw	r24, r0
    1d54:	a3 9f       	mul	r26, r19
    1d56:	70 0d       	add	r23, r0
    1d58:	81 1d       	adc	r24, r1
    1d5a:	11 24       	eor	r1, r1
    1d5c:	91 1d       	adc	r25, r1
    1d5e:	b2 9f       	mul	r27, r18
    1d60:	70 0d       	add	r23, r0
    1d62:	81 1d       	adc	r24, r1
    1d64:	11 24       	eor	r1, r1
    1d66:	91 1d       	adc	r25, r1
    1d68:	08 95       	ret

00001d6a <__udivmodhi4>:
    1d6a:	aa 1b       	sub	r26, r26
    1d6c:	bb 1b       	sub	r27, r27
    1d6e:	51 e1       	ldi	r21, 0x11	; 17
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <__udivmodhi4_ep>

00001d72 <__udivmodhi4_loop>:
    1d72:	aa 1f       	adc	r26, r26
    1d74:	bb 1f       	adc	r27, r27
    1d76:	a6 17       	cp	r26, r22
    1d78:	b7 07       	cpc	r27, r23
    1d7a:	10 f0       	brcs	.+4      	; 0x1d80 <__udivmodhi4_ep>
    1d7c:	a6 1b       	sub	r26, r22
    1d7e:	b7 0b       	sbc	r27, r23

00001d80 <__udivmodhi4_ep>:
    1d80:	88 1f       	adc	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	5a 95       	dec	r21
    1d86:	a9 f7       	brne	.-22     	; 0x1d72 <__udivmodhi4_loop>
    1d88:	80 95       	com	r24
    1d8a:	90 95       	com	r25
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	08 95       	ret

00001d92 <_exit>:
    1d92:	f8 94       	cli

00001d94 <__stop_program>:
    1d94:	ff cf       	rjmp	.-2      	; 0x1d94 <__stop_program>
