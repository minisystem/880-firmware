
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  0000248c  00002520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000248c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ae  00800270  00800270  00002690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e05  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017ab  00000000  00000000  00009995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190b  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc8  00000000  00000000  0000ca4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011d5  00000000  00000000  0000d714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025d9  00000000  00000000  0000e8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00010ec2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_18>
      4c:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_33>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	68 0f       	add	r22, r24
      b6:	66 0f       	add	r22, r22
      b8:	68 0f       	add	r22, r24
      ba:	6a 0f       	add	r22, r26
      bc:	6a 0f       	add	r22, r26
      be:	70 0f       	add	r23, r16
      c0:	6a 0f       	add	r22, r26
      c2:	70 0f       	add	r23, r16
      c4:	70 0f       	add	r23, r16
      c6:	70 0f       	add	r23, r16
      c8:	70 0f       	add	r23, r16
      ca:	70 0f       	add	r23, r16
      cc:	6a 0f       	add	r22, r26
      ce:	70 0f       	add	r23, r16
      d0:	70 0f       	add	r23, r16

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ec e8       	ldi	r30, 0x8C	; 140
      e6:	f4 e2       	ldi	r31, 0x24	; 36
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a0 37       	cpi	r26, 0x70	; 112
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	25 e0       	ldi	r18, 0x05	; 5
      f6:	a0 e7       	ldi	r26, 0x70	; 112
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ae 31       	cpi	r26, 0x1E	; 30
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 38 05 	call	0xa70	; 0xa70 <main>
     108:	0c 94 44 12 	jmp	0x2488	; 0x2488 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_clock>:


void setup_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:



void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,NO_SWITCH, 0, MA_LED},
	{16,8, 1<<ACCENT,NO_SWITCH, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	f6 2e       	mov	r15, r22
	
		while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
     1aa:	90 91 77 01 	lds	r25, 0x0177
     1ae:	99 23       	and	r25, r25
     1b0:	e1 f3       	breq	.-8      	; 0x1aa <trigger_drum+0xc>
		//individual accents are implemented for sequencer
		
		//midi_note_queue[note_queue_index] = note;
		//note_queue_index++;
		
		current_drum_hit = note;
     1b2:	80 93 70 02 	sts	0x0270, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1b6:	08 2f       	mov	r16, r24
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	97 e0       	ldi	r25, 0x07	; 7
     1bc:	89 9f       	mul	r24, r25
     1be:	e0 01       	movw	r28, r0
     1c0:	11 24       	eor	r1, r1
     1c2:	c0 50       	subi	r28, 0x00	; 0
     1c4:	df 4f       	sbci	r29, 0xFF	; 255
     1c6:	e8 81       	ld	r30, Y
     1c8:	8e 2f       	mov	r24, r30
     1ca:	88 1f       	adc	r24, r24
     1cc:	88 27       	eor	r24, r24
     1ce:	88 1f       	adc	r24, r24
     1d0:	e9 81       	ldd	r30, Y+1	; 0x01
     1d2:	e7 70       	andi	r30, 0x07	; 7
     1d4:	ee 0f       	add	r30, r30
     1d6:	e8 2b       	or	r30, r24
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	e1 58       	subi	r30, 0x81	; 129
     1dc:	fd 4f       	sbci	r31, 0xFD	; 253
     1de:	90 81       	ld	r25, Z
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	89 2b       	or	r24, r25
     1e4:	80 83       	st	Z, r24
		turn_on(drum_hit[note].led_index);
     1e6:	8d 81       	ldd	r24, Y+5	; 0x05
     1e8:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != NO_SWITCH) {//need to set instrument switch
     1ec:	9b 81       	ldd	r25, Y+3	; 0x03
     1ee:	9f 3f       	cpi	r25, 0xFF	; 255
     1f0:	c1 f0       	breq	.+48     	; 0x222 <trigger_drum+0x84>
				
			//toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1f2:	af e7       	ldi	r26, 0x7F	; 127
     1f4:	b2 e0       	ldi	r27, 0x02	; 2
     1f6:	13 96       	adiw	r26, 0x03	; 3
     1f8:	2c 91       	ld	r18, X
     1fa:	13 97       	sbiw	r26, 0x03	; 3
     1fc:	f8 01       	movw	r30, r16
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e0 1b       	sub	r30, r16
     20c:	f1 0b       	sbc	r31, r17
     20e:	ec 5f       	subi	r30, 0xFC	; 252
     210:	fe 4f       	sbci	r31, 0xFE	; 254
     212:	80 81       	ld	r24, Z
     214:	81 70       	andi	r24, 0x01	; 1
     216:	81 95       	neg	r24
     218:	82 27       	eor	r24, r18
     21a:	89 23       	and	r24, r25
     21c:	82 27       	eor	r24, r18
     21e:	13 96       	adiw	r26, 0x03	; 3
     220:	8c 93       	st	X, r24
					
		}
			
		if (velocity > 64) {
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	8f 15       	cp	r24, r15
     226:	40 f4       	brcc	.+16     	; 0x238 <trigger_drum+0x9a>
			spi_data[8] |= (1<<ACCENT);
     228:	ef e7       	ldi	r30, 0x7F	; 127
     22a:	f2 e0       	ldi	r31, 0x02	; 2
     22c:	80 85       	ldd	r24, Z+8	; 0x08
     22e:	81 60       	ori	r24, 0x01	; 1
     230:	80 87       	std	Z+8, r24	; 0x08
			turn_on(ACCENT_1_LED);
     232:	84 e1       	ldi	r24, 0x14	; 20
     234:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
			
		}
		PORTD |= 1<<TRIG; 
     238:	5d 9a       	sbi	0x0b, 5	; 11
		//PORTD &= ~(1<<TRIG);
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23a:	ee e6       	ldi	r30, 0x6E	; 110
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     244:	85 b5       	in	r24, 0x25	; 37
     246:	83 60       	ori	r24, 0x03	; 3
     248:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24a:	10 92 77 01 	sts	0x0177, r1
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	ef e7       	ldi	r30, 0x7F	; 127
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	3f 92       	push	r3
     270:	4f 92       	push	r4
     272:	5f 92       	push	r5
     274:	6f 92       	push	r6
     276:	7f 92       	push	r7
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
	//while (trigger_finished == 0); //wait to ensure no drums are in the midst of being triggered by external MIDI - FOR NOW SEQUENCER AND INCOMING MIDI NOTES ARE INCOMPATABLE
	PORTD |= (1<<TRIG);
     290:	5d 9a       	sbi	0x0b, 5	; 11
	clear_all_trigs();
     292:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     296:	05 e0       	ldi	r16, 0x05	; 5
     298:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     29e:	0f 2e       	mov	r0, r31
     2a0:	f9 e1       	ldi	r31, 0x19	; 25
     2a2:	8f 2e       	mov	r8, r31
     2a4:	f5 e0       	ldi	r31, 0x05	; 5
     2a6:	9f 2e       	mov	r9, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f4 e1       	ldi	r31, 0x14	; 20
     2ae:	af 2e       	mov	r10, r31
     2b0:	f5 e0       	ldi	r31, 0x05	; 5
     2b2:	bf 2e       	mov	r11, r31
     2b4:	f0 2d       	mov	r31, r0
     2b6:	0f 2e       	mov	r0, r31
     2b8:	f8 e1       	ldi	r31, 0x18	; 24
     2ba:	cf 2e       	mov	r12, r31
     2bc:	f5 e0       	ldi	r31, 0x05	; 5
     2be:	df 2e       	mov	r13, r31
     2c0:	f0 2d       	mov	r31, r0
     2c2:	0f 2e       	mov	r0, r31
     2c4:	f3 e3       	ldi	r31, 0x33	; 51
     2c6:	3f 2e       	mov	r3, r31
     2c8:	f0 2d       	mov	r31, r0
			if (!sequencer.SHIFT) turn_on(drum_hit[i].led_index);
     2ca:	0f 2e       	mov	r0, r31
     2cc:	f7 e4       	ldi	r31, 0x47	; 71
     2ce:	4f 2e       	mov	r4, r31
     2d0:	f4 e0       	ldi	r31, 0x04	; 4
     2d2:	5f 2e       	mov	r5, r31
     2d4:	f0 2d       	mov	r31, r0
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2d6:	0f 2e       	mov	r0, r31
     2d8:	ff e7       	ldi	r31, 0x7F	; 127
     2da:	6f 2e       	mov	r6, r31
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
     2de:	7f 2e       	mov	r7, r31
     2e0:	f0 2d       	mov	r31, r0
	//while (trigger_finished == 0); //wait to ensure no drums are in the midst of being triggered by external MIDI - FOR NOW SEQUENCER AND INCOMING MIDI NOTES ARE INCOMPATABLE
	PORTD |= (1<<TRIG);
	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((!drum_hit[i].muted) && (sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2e2:	fe 01       	movw	r30, r28
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	ec 1b       	sub	r30, r28
     2f2:	fd 0b       	sbc	r31, r29
     2f4:	ea 5f       	subi	r30, 0xFA	; 250
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	80 81       	ld	r24, Z
     2fa:	80 fd       	sbrc	r24, 0
     2fc:	6f c0       	rjmp	.+222    	; 0x3dc <trigger_step+0x16e>
     2fe:	f4 01       	movw	r30, r8
     300:	80 81       	ld	r24, Z
     302:	81 fb       	bst	r24, 1
     304:	ee 24       	eor	r14, r14
     306:	e0 f8       	bld	r14, 0
     308:	f1 2c       	mov	r15, r1
     30a:	f5 01       	movw	r30, r10
     30c:	20 81       	ld	r18, Z
     30e:	f6 01       	movw	r30, r12
     310:	90 81       	ld	r25, Z
     312:	92 95       	swap	r25
     314:	96 95       	lsr	r25
     316:	97 70       	andi	r25, 0x07	; 7
     318:	81 70       	andi	r24, 0x01	; 1
     31a:	88 0f       	add	r24, r24
     31c:	88 0f       	add	r24, r24
     31e:	88 0f       	add	r24, r24
     320:	89 2b       	or	r24, r25
     322:	f7 01       	movw	r30, r14
     324:	e2 95       	swap	r30
     326:	f2 95       	swap	r31
     328:	f0 7f       	andi	r31, 0xF0	; 240
     32a:	fe 27       	eor	r31, r30
     32c:	e0 7f       	andi	r30, 0xF0	; 240
     32e:	fe 27       	eor	r31, r30
     330:	92 2f       	mov	r25, r18
     332:	91 70       	andi	r25, 0x01	; 1
     334:	39 9e       	mul	r3, r25
     336:	e0 0d       	add	r30, r0
     338:	f1 1d       	adc	r31, r1
     33a:	11 24       	eor	r1, r1
     33c:	e8 0f       	add	r30, r24
     33e:	f1 1d       	adc	r31, r1
     340:	ee 0f       	add	r30, r30
     342:	ff 1f       	adc	r31, r31
     344:	eb 5b       	subi	r30, 0xBB	; 187
     346:	fb 4f       	sbci	r31, 0xFB	; 251
     348:	83 81       	ldd	r24, Z+3	; 0x03
     34a:	94 81       	ldd	r25, Z+4	; 0x04
     34c:	0c 2e       	mov	r0, r28
     34e:	02 c0       	rjmp	.+4      	; 0x354 <trigger_step+0xe6>
     350:	96 95       	lsr	r25
     352:	87 95       	ror	r24
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <trigger_step+0xe2>
     358:	80 ff       	sbrs	r24, 0
     35a:	40 c0       	rjmp	.+128    	; 0x3dc <trigger_step+0x16e>
			if (!sequencer.SHIFT) turn_on(drum_hit[i].led_index);
     35c:	f2 01       	movw	r30, r4
     35e:	80 81       	ld	r24, Z
     360:	80 fd       	sbrc	r24, 0
     362:	04 c0       	rjmp	.+8      	; 0x36c <trigger_step+0xfe>
     364:	f8 01       	movw	r30, r16
     366:	80 81       	ld	r24, Z
     368:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     36c:	de 01       	movw	r26, r28
     36e:	aa 0f       	add	r26, r26
     370:	bb 1f       	adc	r27, r27
     372:	aa 0f       	add	r26, r26
     374:	bb 1f       	adc	r27, r27
     376:	aa 0f       	add	r26, r26
     378:	bb 1f       	adc	r27, r27
     37a:	ac 1b       	sub	r26, r28
     37c:	bd 0b       	sbc	r27, r29
     37e:	a0 50       	subi	r26, 0x00	; 0
     380:	bf 4f       	sbci	r27, 0xFF	; 255
     382:	ec 91       	ld	r30, X
     384:	8e 2f       	mov	r24, r30
     386:	88 1f       	adc	r24, r24
     388:	88 27       	eor	r24, r24
     38a:	88 1f       	adc	r24, r24
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	ec 91       	ld	r30, X
     390:	e7 70       	andi	r30, 0x07	; 7
     392:	ee 0f       	add	r30, r30
     394:	e8 2b       	or	r30, r24
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	e1 58       	subi	r30, 0x81	; 129
     39a:	fd 4f       	sbci	r31, 0xFD	; 253
     39c:	d8 01       	movw	r26, r16
     39e:	13 97       	sbiw	r26, 0x03	; 3
     3a0:	9c 91       	ld	r25, X
     3a2:	80 81       	ld	r24, Z
     3a4:	89 2b       	or	r24, r25
     3a6:	80 83       	st	Z, r24
     3a8:	f8 01       	movw	r30, r16
     3aa:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != NO_SWITCH) {//need to set instrument switch
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 3f       	cpi	r24, 0xFF	; 255
     3b0:	a9 f0       	breq	.+42     	; 0x3dc <trigger_step+0x16e>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     3b2:	f3 01       	movw	r30, r6
     3b4:	23 81       	ldd	r18, Z+3	; 0x03
     3b6:	fe 01       	movw	r30, r28
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	ec 1b       	sub	r30, r28
     3c6:	fd 0b       	sbc	r31, r29
     3c8:	ec 5f       	subi	r30, 0xFC	; 252
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	90 81       	ld	r25, Z
     3ce:	91 70       	andi	r25, 0x01	; 1
     3d0:	91 95       	neg	r25
     3d2:	92 27       	eor	r25, r18
     3d4:	89 23       	and	r24, r25
     3d6:	82 27       	eor	r24, r18
     3d8:	f3 01       	movw	r30, r6
     3da:	83 83       	std	Z+3, r24	; 0x03

void trigger_step(void) { //trigger all drums on current step
	//while (trigger_finished == 0); //wait to ensure no drums are in the midst of being triggered by external MIDI - FOR NOW SEQUENCER AND INCOMING MIDI NOTES ARE INCOMPATABLE
	PORTD |= (1<<TRIG);
	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3dc:	21 96       	adiw	r28, 0x01	; 1
     3de:	09 5f       	subi	r16, 0xF9	; 249
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	c0 31       	cpi	r28, 0x10	; 16
     3e4:	d1 05       	cpc	r29, r1
     3e6:	09 f0       	breq	.+2      	; 0x3ea <trigger_step+0x17c>
     3e8:	7c cf       	rjmp	.-264    	; 0x2e2 <trigger_step+0x74>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	08 95       	ret

0000040e <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     40e:	80 91 4b 02 	lds	r24, 0x024B
     412:	86 ff       	sbrs	r24, 6
     414:	08 c0       	rjmp	.+16     	; 0x426 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     416:	eb e4       	ldi	r30, 0x4B	; 75
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	8f 7b       	andi	r24, 0xBF	; 191
     41c:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     426:	80 91 4d 02 	lds	r24, 0x024D
     42a:	86 ff       	sbrs	r24, 6
     42c:	08 c0       	rjmp	.+16     	; 0x43e <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     42e:	ed e4       	ldi	r30, 0x4D	; 77
     430:	f2 e0       	ldi	r31, 0x02	; 2
     432:	8f 7b       	andi	r24, 0xBF	; 191
     434:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     43e:	80 91 4f 02 	lds	r24, 0x024F
     442:	86 ff       	sbrs	r24, 6
     444:	08 c0       	rjmp	.+16     	; 0x456 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     446:	ef e4       	ldi	r30, 0x4F	; 79
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	8f 7b       	andi	r24, 0xBF	; 191
     44c:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     456:	80 91 51 02 	lds	r24, 0x0251
     45a:	86 ff       	sbrs	r24, 6
     45c:	08 c0       	rjmp	.+16     	; 0x46e <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     45e:	e1 e5       	ldi	r30, 0x51	; 81
     460:	f2 e0       	ldi	r31, 0x02	; 2
     462:	8f 7b       	andi	r24, 0xBF	; 191
     464:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     46e:	80 91 53 02 	lds	r24, 0x0253
     472:	86 ff       	sbrs	r24, 6
     474:	08 c0       	rjmp	.+16     	; 0x486 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     476:	e3 e5       	ldi	r30, 0x53	; 83
     478:	f2 e0       	ldi	r31, 0x02	; 2
     47a:	8f 7b       	andi	r24, 0xBF	; 191
     47c:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     486:	80 91 55 02 	lds	r24, 0x0255
     48a:	86 ff       	sbrs	r24, 6
     48c:	08 c0       	rjmp	.+16     	; 0x49e <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     48e:	e5 e5       	ldi	r30, 0x55	; 85
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	8f 7b       	andi	r24, 0xBF	; 191
     494:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	85 e0       	ldi	r24, 0x05	; 5
     49a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     49e:	80 91 57 02 	lds	r24, 0x0257
     4a2:	86 ff       	sbrs	r24, 6
     4a4:	08 c0       	rjmp	.+16     	; 0x4b6 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     4a6:	e7 e5       	ldi	r30, 0x57	; 87
     4a8:	f2 e0       	ldi	r31, 0x02	; 2
     4aa:	8f 7b       	andi	r24, 0xBF	; 191
     4ac:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	86 e0       	ldi	r24, 0x06	; 6
     4b2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     4b6:	80 91 59 02 	lds	r24, 0x0259
     4ba:	86 ff       	sbrs	r24, 6
     4bc:	08 c0       	rjmp	.+16     	; 0x4ce <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     4be:	e9 e5       	ldi	r30, 0x59	; 89
     4c0:	f2 e0       	ldi	r31, 0x02	; 2
     4c2:	8f 7b       	andi	r24, 0xBF	; 191
     4c4:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	87 e0       	ldi	r24, 0x07	; 7
     4ca:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     4ce:	80 91 5b 02 	lds	r24, 0x025B
     4d2:	86 ff       	sbrs	r24, 6
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     4d6:	eb e5       	ldi	r30, 0x5B	; 91
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	8f 7b       	andi	r24, 0xBF	; 191
     4dc:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	88 e0       	ldi	r24, 0x08	; 8
     4e2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4e6:	80 91 5d 02 	lds	r24, 0x025D
     4ea:	86 ff       	sbrs	r24, 6
     4ec:	08 c0       	rjmp	.+16     	; 0x4fe <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4ee:	ed e5       	ldi	r30, 0x5D	; 93
     4f0:	f2 e0       	ldi	r31, 0x02	; 2
     4f2:	8f 7b       	andi	r24, 0xBF	; 191
     4f4:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	89 e0       	ldi	r24, 0x09	; 9
     4fa:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4fe:	80 91 5f 02 	lds	r24, 0x025F
     502:	86 ff       	sbrs	r24, 6
     504:	08 c0       	rjmp	.+16     	; 0x516 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     506:	ef e5       	ldi	r30, 0x5F	; 95
     508:	f2 e0       	ldi	r31, 0x02	; 2
     50a:	8f 7b       	andi	r24, 0xBF	; 191
     50c:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	8a e0       	ldi	r24, 0x0A	; 10
     512:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     516:	08 95       	ret

00000518 <__vector_14>:
#include "xnormidi-develop/midi_device.h"
#include "xnormidi-develop/bytequeue/bytequeue.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     53e:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     540:	ee e6       	ldi	r30, 0x6E	; 110
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	80 83       	st	Z, r24
	//}
	//spi_data[8] = 0;
	//spi_data[6] &= 0b1111000;
	//uint8_t current_drum_hit  = midi_note_queue[note_queue_index];
	//note_queue_index--;
	spi_data[drum_hit[current_drum_hit].spi_byte_num] &= ~(drum_hit[current_drum_hit].trig_bit);
     54a:	a0 91 70 02 	lds	r26, 0x0270
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	a8 9f       	mul	r26, r24
     552:	d0 01       	movw	r26, r0
     554:	11 24       	eor	r1, r1
     556:	a0 50       	subi	r26, 0x00	; 0
     558:	bf 4f       	sbci	r27, 0xFF	; 255
     55a:	ec 91       	ld	r30, X
     55c:	8e 2f       	mov	r24, r30
     55e:	88 1f       	adc	r24, r24
     560:	88 27       	eor	r24, r24
     562:	88 1f       	adc	r24, r24
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	ec 91       	ld	r30, X
     568:	11 97       	sbiw	r26, 0x01	; 1
     56a:	e7 70       	andi	r30, 0x07	; 7
     56c:	ee 0f       	add	r30, r30
     56e:	e8 2b       	or	r30, r24
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	cf e7       	ldi	r28, 0x7F	; 127
     574:	d2 e0       	ldi	r29, 0x02	; 2
     576:	e1 58       	subi	r30, 0x81	; 129
     578:	fd 4f       	sbci	r31, 0xFD	; 253
     57a:	12 96       	adiw	r26, 0x02	; 2
     57c:	8c 91       	ld	r24, X
     57e:	80 95       	com	r24
     580:	90 81       	ld	r25, Z
     582:	89 23       	and	r24, r25
     584:	80 83       	st	Z, r24
	turn_off(ACCENT_1_LED);
     586:	84 e1       	ldi	r24, 0x14	; 20
     588:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>
	spi_data[8] &= ~(1<<ACCENT);
     58c:	88 85       	ldd	r24, Y+8	; 0x08
     58e:	8e 7f       	andi	r24, 0xFE	; 254
     590:	88 87       	std	Y+8, r24	; 0x08
	turn_off(drum_hit[current_drum_hit].led_index);
     592:	e0 91 70 02 	lds	r30, 0x0270
     596:	87 e0       	ldi	r24, 0x07	; 7
     598:	e8 9f       	mul	r30, r24
     59a:	f0 01       	movw	r30, r0
     59c:	11 24       	eor	r1, r1
     59e:	e0 50       	subi	r30, 0x00	; 0
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	85 81       	ldd	r24, Z+5	; 0x05
     5a4:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	trigger_finished = 1;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 77 01 	sts	0x0177, r24
	
}
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <__vector_33>:

ISR (TIMER3_COMPA_vect) { //led flashing interrupt. Will this be too much overhead to do something simple like flash LEDs?
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
	
	//turn_off_all_inst_leds();
	//update_inst_leds();
	
}
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 93       	push	r18
     5f4:	3f 93       	push	r19
     5f6:	4f 93       	push	r20
     5f8:	5f 93       	push	r21
     5fa:	6f 93       	push	r22
     5fc:	7f 93       	push	r23
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	//update_inst_leds();
	if (clock.source == INTERNAL) {
     60a:	80 91 91 02 	lds	r24, 0x0291
     60e:	81 11       	cpse	r24, r1
     610:	0a c0       	rjmp	.+20     	; 0x626 <__vector_11+0x3e>
		
		process_tick();
     612:	0e 94 b1 06 	call	0xd62	; 0xd62 <process_tick>
		if (sequencer.START) midi_send_clock(&midi_device); //send MIDI clock
     616:	80 91 47 04 	lds	r24, 0x0447
     61a:	81 ff       	sbrs	r24, 1
     61c:	04 c0       	rjmp	.+8      	; 0x626 <__vector_11+0x3e>
     61e:	83 e9       	ldi	r24, 0x93	; 147
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <midi_send_clock>
	//}
	
	

	
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_18>:

ISR (USART0_RX_vect) { // USART receive interrupt
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     674:	80 91 c6 00 	lds	r24, 0x00C6
     678:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     67a:	ae 01       	movw	r20, r28
     67c:	4f 5f       	subi	r20, 0xFF	; 255
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	83 e9       	ldi	r24, 0x93	; 147
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     68a:	0f 90       	pop	r0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_19>:
//ISR (USART0_TX_vect) {
//
//
	//
//}
ISR(USART0_UDRE_vect) {
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
	uint8_t val;

	// check if bytes are available for transmission

	if (bytequeue_length(&midi_byte_queue) > 0) {
     6d4:	80 e4       	ldi	r24, 0x40	; 64
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <bytequeue_length>
     6dc:	88 23       	and	r24, r24
     6de:	61 f0       	breq	.+24     	; 0x6f8 <__vector_19+0x46>
		//first, grab a byte
		val = bytequeue_get(&midi_byte_queue, 0);
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	80 e4       	ldi	r24, 0x40	; 64
     6e4:	94 e0       	ldi	r25, 0x04	; 4
     6e6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <bytequeue_get>

		//then transmit
		//and remove from queue
		UDR0 = val;
     6ea:	80 93 c6 00 	sts	0x00C6, r24
		bytequeue_remove(&midi_byte_queue, 1);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	94 e0       	ldi	r25, 0x04	; 4
     6f4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <bytequeue_remove>
	}

	// if queue is empty, stop!
	if(bytequeue_length(&midi_byte_queue) == 0)
     6f8:	80 e4       	ldi	r24, 0x40	; 64
     6fa:	94 e0       	ldi	r25, 0x04	; 4
     6fc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <bytequeue_length>
     700:	81 11       	cpse	r24, r1
     702:	05 c0       	rjmp	.+10     	; 0x70e <__vector_19+0x5c>
	UCSR0B &= ~( 1 << UDRIE0 );
     704:	e1 ec       	ldi	r30, 0xC1	; 193
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	8f 7d       	andi	r24, 0xDF	; 223
     70c:	80 83       	st	Z, r24
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9c 01       	movw	r18, r24
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	82 0f       	add	r24, r18
     73e:	93 1f       	adc	r25, r19
     740:	dc 01       	movw	r26, r24
     742:	a7 58       	subi	r26, 0x87	; 135
     744:	be 4f       	sbci	r27, 0xFE	; 254
     746:	2c 91       	ld	r18, X
     748:	e2 2f       	mov	r30, r18
     74a:	ef 70       	andi	r30, 0x0F	; 15
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e1 58       	subi	r30, 0x81	; 129
     750:	fd 4f       	sbci	r31, 0xFD	; 253
     752:	ec 01       	movw	r28, r24
     754:	c8 58       	subi	r28, 0x88	; 136
     756:	de 4f       	sbci	r29, 0xFE	; 254
     758:	30 81       	ld	r19, Z
     75a:	88 81       	ld	r24, Y
     75c:	83 2b       	or	r24, r19
     75e:	80 83       	st	Z, r24
	led[led_index].state = 1;
     760:	82 2f       	mov	r24, r18
     762:	80 61       	ori	r24, 0x10	; 16
     764:	8c 93       	st	X, r24

}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <turn_off>:

void turn_off(uint8_t led_index) {
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	9c 01       	movw	r18, r24
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
     778:	82 0f       	add	r24, r18
     77a:	93 1f       	adc	r25, r19
     77c:	dc 01       	movw	r26, r24
     77e:	a7 58       	subi	r26, 0x87	; 135
     780:	be 4f       	sbci	r27, 0xFE	; 254
     782:	2c 91       	ld	r18, X
     784:	e2 2f       	mov	r30, r18
     786:	ef 70       	andi	r30, 0x0F	; 15
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e1 58       	subi	r30, 0x81	; 129
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	ec 01       	movw	r28, r24
     790:	c8 58       	subi	r28, 0x88	; 136
     792:	de 4f       	sbci	r29, 0xFE	; 254
     794:	88 81       	ld	r24, Y
     796:	80 95       	com	r24
     798:	90 81       	ld	r25, Z
     79a:	89 23       	and	r24, r25
     79c:	80 83       	st	Z, r24
	led[led_index].state = 0;
     79e:	82 2f       	mov	r24, r18
     7a0:	8f 7e       	andi	r24, 0xEF	; 239
     7a2:	8c 93       	st	X, r24
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     7aa:	28 2f       	mov	r18, r24
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	2e 0f       	add	r18, r30
     7b6:	3f 1f       	adc	r19, r31
     7b8:	f9 01       	movw	r30, r18
     7ba:	e7 58       	subi	r30, 0x87	; 135
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	90 81       	ld	r25, Z
     7c0:	94 ff       	sbrs	r25, 4
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <toggle+0x20>
		
		turn_off(led_index);
     7c4:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>
     7c8:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     7ca:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
     7ce:	08 95       	ret

000007d0 <turn_off_all_inst_leds>:

void turn_off_all_inst_leds(void) {
	
	//This is quick and dirty fast way to turn off all LEDs, but doesn't preserve their states for toggling 
	//TODO: make masks constants
	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     7d0:	ef e7       	ldi	r30, 0x7F	; 127
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	82 81       	ldd	r24, Z+2	; 0x02
     7d6:	8f 70       	andi	r24, 0x0F	; 15
     7d8:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     7da:	87 81       	ldd	r24, Z+7	; 0x07
     7dc:	80 72       	andi	r24, 0x20	; 32
     7de:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     7e0:	83 81       	ldd	r24, Z+3	; 0x03
     7e2:	8f 70       	andi	r24, 0x0F	; 15
     7e4:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     7e6:	86 81       	ldd	r24, Z+6	; 0x06
     7e8:	8f 7c       	andi	r24, 0xCF	; 207
     7ea:	86 83       	std	Z+6, r24	; 0x06
     7ec:	08 95       	ret

000007ee <update_inst_leds>:
		//
	//}
	
}

void update_inst_leds(void) {
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
	
if (sequencer.SHIFT) {
     7f6:	80 91 47 04 	lds	r24, 0x0447
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	22 c0       	rjmp	.+68     	; 0x842 <update_inst_leds+0x54>
     7fe:	05 e0       	ldi	r16, 0x05	; 5
     800:	11 e0       	ldi	r17, 0x01	; 1
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = BD; i <= MA; i++) {
		
		
		if (drum_hit[i].muted) {
     806:	fe 01       	movw	r30, r28
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	ec 1b       	sub	r30, r28
     816:	fd 0b       	sbc	r31, r29
     818:	ea 5f       	subi	r30, 0xFA	; 250
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	80 81       	ld	r24, Z
     81e:	80 ff       	sbrs	r24, 0
     820:	05 c0       	rjmp	.+10     	; 0x82c <update_inst_leds+0x3e>
			
			turn_on(drum_hit[i].led_index);
     822:	f8 01       	movw	r30, r16
     824:	80 81       	ld	r24, Z
     826:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
     82a:	04 c0       	rjmp	.+8      	; 0x834 <update_inst_leds+0x46>
			
		} else {
			
			turn_off(drum_hit[i].led_index);
     82c:	f8 01       	movw	r30, r16
     82e:	80 81       	ld	r24, Z
     830:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>

void update_inst_leds(void) {
	
if (sequencer.SHIFT) {
	
	for (int i = BD; i <= MA; i++) {
     834:	21 96       	adiw	r28, 0x01	; 1
     836:	09 5f       	subi	r16, 0xF9	; 249
     838:	1f 4f       	sbci	r17, 0xFF	; 255
     83a:	c0 31       	cpi	r28, 0x10	; 16
     83c:	d1 05       	cpc	r29, r1
     83e:	19 f7       	brne	.-58     	; 0x806 <update_inst_leds+0x18>
     840:	0b c0       	rjmp	.+22     	; 0x858 <update_inst_leds+0x6a>
		}
		
	}
} else {
	
	turn_on(drum_hit[sequencer.current_inst].led_index);	
     842:	e0 91 1c 05 	lds	r30, 0x051C
     846:	87 e0       	ldi	r24, 0x07	; 7
     848:	e8 9f       	mul	r30, r24
     84a:	f0 01       	movw	r30, r0
     84c:	11 24       	eor	r1, r1
     84e:	e0 50       	subi	r30, 0x00	; 0
     850:	ff 4f       	sbci	r31, 0xFF	; 255
     852:	85 81       	ldd	r24, Z+5	; 0x05
     854:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
}
	
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <update_step_led_mask>:
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     862:	2f 92       	push	r2
     864:	3f 92       	push	r3
     866:	4f 92       	push	r4
     868:	5f 92       	push	r5
     86a:	6f 92       	push	r6
     86c:	7f 92       	push	r7
     86e:	8f 92       	push	r8
     870:	9f 92       	push	r9
     872:	af 92       	push	r10
     874:	bf 92       	push	r11
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     886:	22 e2       	ldi	r18, 0x22	; 34
     888:	ec e8       	ldi	r30, 0x8C	; 140
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	df 01       	movw	r26, r30
     88e:	42 2f       	mov	r20, r18
     890:	1d 92       	st	X+, r1
     892:	4a 95       	dec	r20
     894:	e9 f7       	brne	.-6      	; 0x890 <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     896:	e2 ef       	ldi	r30, 0xF2	; 242
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	df 01       	movw	r26, r30
     89c:	1d 92       	st	X+, r1
     89e:	2a 95       	dec	r18
     8a0:	e9 f7       	brne	.-6      	; 0x89c <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     8a2:	20 91 19 05 	lds	r18, 0x0519
     8a6:	22 fb       	bst	r18, 2
     8a8:	88 27       	eor	r24, r24
     8aa:	80 f9       	bld	r24, 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	00 e0       	ldi	r16, 0x00	; 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     8b2:	6c 01       	movw	r12, r24
     8b4:	cc 0c       	add	r12, r12
     8b6:	dd 1c       	adc	r13, r13
     8b8:	cc 0c       	add	r12, r12
     8ba:	dd 1c       	adc	r13, r13
     8bc:	cc 0c       	add	r12, r12
     8be:	dd 1c       	adc	r13, r13
     8c0:	cc 0c       	add	r12, r12
     8c2:	dd 1c       	adc	r13, r13
     8c4:	ee 24       	eor	r14, r14
     8c6:	e3 94       	inc	r14
     8c8:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     8ca:	5c 01       	movw	r10, r24
     8cc:	b0 e2       	ldi	r27, 0x20	; 32
     8ce:	ab 0e       	add	r10, r27
     8d0:	b1 1c       	adc	r11, r1
     8d2:	95 01       	movw	r18, r10
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	f9 01       	movw	r30, r18
     8da:	e8 5b       	subi	r30, 0xB8	; 184
     8dc:	fb 4f       	sbci	r31, 0xFB	; 251
     8de:	5f 01       	movw	r10, r30
     8e0:	0f 2e       	mov	r0, r31
     8e2:	fc ea       	ldi	r31, 0xAC	; 172
     8e4:	8f 2e       	mov	r8, r31
     8e6:	f4 e0       	ldi	r31, 0x04	; 4
     8e8:	9f 2e       	mov	r9, r31
     8ea:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     8ec:	3c 01       	movw	r6, r24
     8ee:	f3 e5       	ldi	r31, 0x53	; 83
     8f0:	6f 0e       	add	r6, r31
     8f2:	71 1c       	adc	r7, r1
     8f4:	93 01       	movw	r18, r6
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	a9 01       	movw	r20, r18
     8fc:	48 5b       	subi	r20, 0xB8	; 184
     8fe:	5b 4f       	sbci	r21, 0xFB	; 251
     900:	3a 01       	movw	r6, r20
     902:	0f 2e       	mov	r0, r31
     904:	f2 e1       	ldi	r31, 0x12	; 18
     906:	4f 2e       	mov	r4, r31
     908:	f5 e0       	ldi	r31, 0x05	; 5
     90a:	5f 2e       	mov	r5, r31
     90c:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     90e:	8b 5b       	subi	r24, 0xBB	; 187
     910:	9b 4f       	sbci	r25, 0xFB	; 251
     912:	1c 01       	movw	r2, r24
     914:	51 ed       	ldi	r21, 0xD1	; 209
     916:	25 0e       	add	r2, r21
     918:	31 1c       	adc	r3, r1
     91a:	52 c0       	rjmp	.+164    	; 0x9c0 <__stack+0xc1>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     91c:	9e 01       	movw	r18, r28
     91e:	08 2e       	mov	r0, r24
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
     922:	36 95       	lsr	r19
     924:	27 95       	ror	r18
     926:	0a 94       	dec	r0
     928:	e2 f7       	brpl	.-8      	; 0x922 <__stack+0x23>
     92a:	20 ff       	sbrs	r18, 0
     92c:	06 c0       	rjmp	.+12     	; 0x93a <__stack+0x3b>
     92e:	20 81       	ld	r18, Z
     930:	31 81       	ldd	r19, Z+1	; 0x01
     932:	24 2b       	or	r18, r20
     934:	35 2b       	or	r19, r21
     936:	31 83       	std	Z+1, r19	; 0x01
     938:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     93a:	9b 01       	movw	r18, r22
     93c:	08 2e       	mov	r0, r24
     93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0x45>
     940:	36 95       	lsr	r19
     942:	27 95       	ror	r18
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <__stack+0x41>
     948:	20 ff       	sbrs	r18, 0
     94a:	08 c0       	rjmp	.+16     	; 0x95c <__stack+0x5d>
     94c:	2d 91       	ld	r18, X+
     94e:	3c 91       	ld	r19, X
     950:	11 97       	sbiw	r26, 0x01	; 1
     952:	24 2b       	or	r18, r20
     954:	35 2b       	or	r19, r21
     956:	11 96       	adiw	r26, 0x01	; 1
     958:	3c 93       	st	X, r19
     95a:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	12 96       	adiw	r26, 0x02	; 2
     960:	32 96       	adiw	r30, 0x02	; 2
     962:	80 31       	cpi	r24, 0x10	; 16
     964:	91 05       	cpc	r25, r1
     966:	d1 f6       	brne	.-76     	; 0x91c <__stack+0x1d>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     968:	d5 01       	movw	r26, r10
     96a:	8d 91       	ld	r24, X+
     96c:	9c 91       	ld	r25, X
     96e:	00 2e       	mov	r0, r16
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	0a 94       	dec	r0
     978:	e2 f7       	brpl	.-8      	; 0x972 <__stack+0x73>
     97a:	80 ff       	sbrs	r24, 0
     97c:	07 c0       	rjmp	.+14     	; 0x98c <__stack+0x8d>
     97e:	f4 01       	movw	r30, r8
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	84 2b       	or	r24, r20
     986:	95 2b       	or	r25, r21
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     98c:	d3 01       	movw	r26, r6
     98e:	8d 91       	ld	r24, X+
     990:	9c 91       	ld	r25, X
     992:	00 2e       	mov	r0, r16
     994:	02 c0       	rjmp	.+4      	; 0x99a <__stack+0x9b>
     996:	96 95       	lsr	r25
     998:	87 95       	ror	r24
     99a:	0a 94       	dec	r0
     99c:	e2 f7       	brpl	.-8      	; 0x996 <__stack+0x97>
     99e:	80 ff       	sbrs	r24, 0
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <__stack+0xb1>
     9a2:	f2 01       	movw	r30, r4
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	48 2b       	or	r20, r24
     9aa:	59 2b       	or	r21, r25
     9ac:	51 83       	std	Z+1, r21	; 0x01
     9ae:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9b0:	0f 5f       	subi	r16, 0xFF	; 255
     9b2:	1f 4f       	sbci	r17, 0xFF	; 255
     9b4:	d1 01       	movw	r26, r2
     9b6:	8c 91       	ld	r24, X
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	80 17       	cp	r24, r16
     9bc:	91 07       	cpc	r25, r17
     9be:	fc f0       	brlt	.+62     	; 0x9fe <__stack+0xff>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9c0:	c6 01       	movw	r24, r12
     9c2:	80 0f       	add	r24, r16
     9c4:	91 1f       	adc	r25, r17
     9c6:	fc 01       	movw	r30, r24
     9c8:	ee 0f       	add	r30, r30
     9ca:	ff 1f       	adc	r31, r31
     9cc:	eb 5b       	subi	r30, 0xBB	; 187
     9ce:	fb 4f       	sbci	r31, 0xFB	; 251
     9d0:	c3 81       	ldd	r28, Z+3	; 0x03
     9d2:	d4 81       	ldd	r29, Z+4	; 0x04
     9d4:	a7 01       	movw	r20, r14
     9d6:	00 2e       	mov	r0, r16
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
     9da:	44 0f       	add	r20, r20
     9dc:	55 1f       	adc	r21, r21
     9de:	0a 94       	dec	r0
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <__stack+0xdb>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	fc 01       	movw	r30, r24
     9e8:	e5 55       	subi	r30, 0x55	; 85
     9ea:	fb 4f       	sbci	r31, 0xFB	; 251
     9ec:	63 81       	ldd	r22, Z+3	; 0x03
     9ee:	74 81       	ldd	r23, Z+4	; 0x04
     9f0:	a2 ef       	ldi	r26, 0xF2	; 242
     9f2:	b4 e0       	ldi	r27, 0x04	; 4
     9f4:	ec e8       	ldi	r30, 0x8C	; 140
     9f6:	f4 e0       	ldi	r31, 0x04	; 4
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	8f cf       	rjmp	.-226    	; 0x91c <__stack+0x1d>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	af 90       	pop	r10
     a12:	9f 90       	pop	r9
     a14:	8f 90       	pop	r8
     a16:	7f 90       	pop	r7
     a18:	6f 90       	pop	r6
     a1a:	5f 90       	pop	r5
     a1c:	4f 90       	pop	r4
     a1e:	3f 90       	pop	r3
     a20:	2f 90       	pop	r2
     a22:	08 95       	ret

00000a24 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	if (clock.source == INTERNAL) {
     a24:	80 91 91 02 	lds	r24, 0x0291
     a28:	81 11       	cpse	r24, r1
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <refresh+0xc>
		update_tempo(); //meh, doesn't seem to make a huge difference.		
     a2c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <update_tempo>
	}
	check_start_stop_tap();
     a30:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <check_start_stop_tap>
	read_switches();
     a34:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <read_switches>
	parse_switch_data();
     a38:	0e 94 32 0c 	call	0x1864	; 0x1864 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits(); //live_hits() needs to be updated to work with synchronized spi updating
     a3c:	80 91 45 04 	lds	r24, 0x0445
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	11 f4       	brne	.+4      	; 0xa48 <refresh+0x24>
     a44:	0e 94 07 02 	call	0x40e	; 0x40e <live_hits>
	update_mode();
     a48:	0e 94 25 06 	call	0xc4a	; 0xc4a <update_mode>
	check_clear_switch();
     a4c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <check_clear_switch>
	check_variation_switches();
     a50:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <check_variation_switches>
	update_prescale();
     a54:	0e 94 c8 08 	call	0x1190	; 0x1190 <update_prescale>
	check_inst_switches();
     a58:	0e 94 90 0c 	call	0x1920	; 0x1920 <check_inst_switches>
	update_inst_leds();	
     a5c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <update_inst_leds>
	update_step_board();
     a60:	0e 94 70 07 	call	0xee0	; 0xee0 <update_step_board>
	process_step();
     a64:	0e 94 bb 09 	call	0x1376	; 0x1376 <process_step>
	update_spi();
     a68:	0e 94 c0 0b 	call	0x1780	; 0x1780 <update_spi>
	PORTD &= ~(1<<TRIG);
     a6c:	5d 98       	cbi	0x0b, 5	; 11
     a6e:	08 95       	ret

00000a70 <main>:


int main(void)
{
		
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     a70:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     a72:	8d b1       	in	r24, 0x0d	; 13
     a74:	8c 60       	ori	r24, 0x0C	; 12
     a76:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     a78:	87 b1       	in	r24, 0x07	; 7
     a7a:	8e 60       	ori	r24, 0x0E	; 14
     a7c:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     a7e:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     a80:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     a82:	88 b1       	in	r24, 0x08	; 8
     a84:	81 7f       	andi	r24, 0xF1	; 241
     a86:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     a88:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     a8a:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     a8c:	80 e5       	ldi	r24, 0x50	; 80
     a8e:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     a92:	ed ea       	ldi	r30, 0xAD	; 173
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	81 60       	ori	r24, 0x01	; 1
     a9a:	80 83       	st	Z, r24
	
	turn_on(STEP_1_LED);
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     aa2:	8d e1       	ldi	r24, 0x1D	; 29
     aa4:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
	turn_on(FILL_MANUAL);
     aa8:	82 e2       	ldi	r24, 0x22	; 34
     aaa:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
	
	update_spi();
     aae:	0e 94 c0 0b 	call	0x1780	; 0x1780 <update_spi>
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     ab2:	84 b5       	in	r24, 0x24	; 36
     ab4:	82 60       	ori	r24, 0x02	; 2
     ab6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     ab8:	81 ee       	ldi	r24, 0xE1	; 225
     aba:	87 bd       	out	0x27, r24	; 39
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     abc:	83 e9       	ldi	r24, 0x93	; 147
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <midi_device_init>
	
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	76 e0       	ldi	r23, 0x06	; 6
     ac8:	83 e9       	ldi	r24, 0x93	; 147
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     ad0:	67 e0       	ldi	r22, 0x07	; 7
     ad2:	76 e0       	ldi	r23, 0x06	; 6
     ad4:	83 e9       	ldi	r24, 0x93	; 147
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     adc:	68 e0       	ldi	r22, 0x08	; 8
     ade:	76 e0       	ldi	r23, 0x06	; 6
     ae0:	83 e9       	ldi	r24, 0x93	; 147
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     ae8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <setup_midi_usart>
	
	setup_clock();
     aec:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     af0:	ea e8       	ldi	r30, 0x8A	; 138
     af2:	f2 e0       	ldi	r31, 0x02	; 2
     af4:	80 81       	ld	r24, Z
     af6:	80 7f       	andi	r24, 0xF0	; 240
     af8:	86 60       	ori	r24, 0x06	; 6
     afa:	80 83       	st	Z, r24
	clock.ppqn_counter = 1;
     afc:	11 e0       	ldi	r17, 0x01	; 1
     afe:	11 83       	std	Z+1, r17	; 0x01
	clock.source = INTERNAL;
     b00:	17 82       	std	Z+7, r1	; 0x07
	//clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(clock.rate);
	setup_adc();
     b02:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	trigger_finished = 1;
     b06:	10 93 77 01 	sts	0x0177, r17
	flag.pre_scale_change = 0;
     b0a:	80 91 92 02 	lds	r24, 0x0292
     b0e:	8f 7b       	andi	r24, 0xBF	; 191
     b10:	80 93 92 02 	sts	0x0292, r24
	sequencer.START = 0;
     b14:	0f 2e       	mov	r0, r31
     b16:	f7 e4       	ldi	r31, 0x47	; 71
     b18:	ef 2e       	mov	r14, r31
     b1a:	f4 e0       	ldi	r31, 0x04	; 4
     b1c:	ff 2e       	mov	r15, r31
     b1e:	f0 2d       	mov	r31, r0
     b20:	f7 01       	movw	r30, r14
     b22:	80 81       	ld	r24, Z
     b24:	8d 7f       	andi	r24, 0xFD	; 253
     b26:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     b28:	0f 2e       	mov	r0, r31
     b2a:	f5 e4       	ldi	r31, 0x45	; 69
     b2c:	cf 2e       	mov	r12, r31
     b2e:	f4 e0       	ldi	r31, 0x04	; 4
     b30:	df 2e       	mov	r13, r31
     b32:	f0 2d       	mov	r31, r0
     b34:	8f e0       	ldi	r24, 0x0F	; 15
     b36:	80 93 16 05 	sts	0x0516, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     b3a:	80 e1       	ldi	r24, 0x10	; 16
     b3c:	80 93 17 05 	sts	0x0517, r24
	sequencer.step_num_new = 15;
     b40:	c8 e1       	ldi	r28, 0x18	; 24
     b42:	d5 e0       	ldi	r29, 0x05	; 5
     b44:	88 81       	ld	r24, Y
     b46:	80 7e       	andi	r24, 0xE0	; 224
     b48:	8f 60       	ori	r24, 0x0F	; 15
     b4a:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     b4c:	10 92 15 05 	sts	0x0515, r1
	turn_on(BASIC_VAR_A_LED);
     b50:	84 e2       	ldi	r24, 0x24	; 36
     b52:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
	sequencer.mode = FIRST_PART;
     b56:	f6 01       	movw	r30, r12
     b58:	10 83       	st	Z, r17
	sequencer.SLAVE = 0;
     b5a:	f7 01       	movw	r30, r14
     b5c:	80 81       	ld	r24, Z
     b5e:	87 7f       	andi	r24, 0xF7	; 247
     b60:	80 83       	st	Z, r24
	sequencer.sync_mode = MIDI_MASTER;
     b62:	f6 01       	movw	r30, r12
     b64:	11 83       	std	Z+1, r17	; 0x01

	sequencer.part_playing = FIRST;
     b66:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	8b 7f       	andi	r24, 0xFB	; 251
     b6c:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     b6e:	8a e2       	ldi	r24, 0x2A	; 42
     b70:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
	turn_on(SCALE_3_LED);
     b74:	87 e2       	ldi	r24, 0x27	; 39
     b76:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
	//set_up_led_timer();
	sei(); //enable global interrupts	
     b7a:	78 94       	sei
	
    while (1) 
    {
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     b7c:	83 e9       	ldi	r24, 0x93	; 147
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <midi_device_process>
		refresh();		
     b84:	0e 94 12 05 	call	0xa24	; 0xa24 <refresh>

	}
     b88:	f9 cf       	rjmp	.-14     	; 0xb7c <main+0x10c>

00000b8a <midi_send>:
	}
	
	
}

void midi_send(MidiDevice * device, uint16_t cnt, uint8_t inByte0, uint8_t inByte1, uint8_t inByte2) {
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	eb 01       	movw	r28, r22
     b94:	12 2f       	mov	r17, r18
	
	  // enqueue into buffer & start interrupt
	  bytequeue_enqueue(&midi_byte_queue, inByte0);
     b96:	64 2f       	mov	r22, r20
     b98:	80 e4       	ldi	r24, 0x40	; 64
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <bytequeue_enqueue>
	  if(cnt > 1)
     ba0:	c2 30       	cpi	r28, 0x02	; 2
     ba2:	d1 05       	cpc	r29, r1
     ba4:	28 f0       	brcs	.+10     	; 0xbb0 <midi_send+0x26>
	  bytequeue_enqueue(&midi_byte_queue, inByte1);
     ba6:	61 2f       	mov	r22, r17
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	94 e0       	ldi	r25, 0x04	; 4
     bac:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <bytequeue_enqueue>
	  if(cnt == 3)
     bb0:	23 97       	sbiw	r28, 0x03	; 3
     bb2:	29 f4       	brne	.+10     	; 0xbbe <midi_send+0x34>
	  bytequeue_enqueue(&midi_byte_queue, inByte2);
     bb4:	60 2f       	mov	r22, r16
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	94 e0       	ldi	r25, 0x04	; 4
     bba:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <bytequeue_enqueue>

	  // then turn on data transmit buffer interrupt
	  UCSR0B |= (1 << UDRIE0);
     bbe:	e1 ec       	ldi	r30, 0xC1	; 193
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 62       	ori	r24, 0x20	; 32
     bc6:	80 83       	st	Z, r24
	
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     bd2:	8f e1       	ldi	r24, 0x1F	; 31
     bd4:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     bd8:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);// | (1<<TXCIE0);
     bdc:	88 e9       	ldi	r24, 0x98	; 152
     bde:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     be2:	51 9a       	sbi	0x0a, 1	; 10
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
	
	bytequeue_init(&midi_byte_queue, midi_output_queue_data, MIDI_OUTPUT_QUEUE_LENGTH);
     be4:	40 ec       	ldi	r20, 0xC0	; 192
     be6:	60 e8       	ldi	r22, 0x80	; 128
     be8:	73 e0       	ldi	r23, 0x03	; 3
     bea:	80 e4       	ldi	r24, 0x40	; 64
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <bytequeue_init>
	midi_device_set_send_func(&midi_device, midi_send);
     bf2:	65 ec       	ldi	r22, 0xC5	; 197
     bf4:	75 e0       	ldi	r23, 0x05	; 5
     bf6:	83 e9       	ldi	r24, 0x93	; 147
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <midi_device_set_send_func>
     bfe:	08 95       	ret

00000c00 <note_on_event>:
}

void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     c00:	40 31       	cpi	r20, 0x10	; 16
     c02:	20 f4       	brcc	.+8      	; 0xc0c <note_on_event+0xc>
     c04:	62 2f       	mov	r22, r18
     c06:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     c08:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     c0c:	08 95       	ret

00000c0e <note_off_event>:
	}

	
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     c0e:	08 95       	ret

00000c10 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	if (clock.source == INTERNAL) return; //ignore incoming MIDI clock
     c10:	80 91 91 02 	lds	r24, 0x0291
     c14:	88 23       	and	r24, r24
     c16:	c1 f0       	breq	.+48     	; 0xc48 <real_time_event+0x38>
	switch (real_time_byte) {
     c18:	6a 3f       	cpi	r22, 0xFA	; 250
     c1a:	39 f0       	breq	.+14     	; 0xc2a <real_time_event+0x1a>
     c1c:	6c 3f       	cpi	r22, 0xFC	; 252
     c1e:	69 f0       	breq	.+26     	; 0xc3a <real_time_event+0x2a>
     c20:	68 3f       	cpi	r22, 0xF8	; 248
     c22:	91 f4       	brne	.+36     	; 0xc48 <real_time_event+0x38>
		
		case MIDI_CLOCK://could set tick flag here and process it in one function used by both MIDI, DIN and INTERNAL clocks?
		process_tick(); //flag.tick = 1;
     c24:	0e 94 b1 06 	call	0xd62	; 0xd62 <process_tick>
		break;
     c28:	08 95       	ret
		
		case MIDI_START:
		sequencer.START = 1;
     c2a:	e7 e4       	ldi	r30, 0x47	; 71
     c2c:	f4 e0       	ldi	r31, 0x04	; 4
     c2e:	80 81       	ld	r24, Z
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	80 83       	st	Z, r24
		process_start();
     c34:	0e 94 14 07 	call	0xe28	; 0xe28 <process_start>
		break;
     c38:	08 95       	ret
		
		case MIDI_STOP:
		sequencer.START = 0;
     c3a:	e7 e4       	ldi	r30, 0x47	; 71
     c3c:	f4 e0       	ldi	r31, 0x04	; 4
     c3e:	80 81       	ld	r24, Z
     c40:	8d 7f       	andi	r24, 0xFD	; 253
     c42:	80 83       	st	Z, r24
		process_stop();
     c44:	0e 94 44 07 	call	0xe88	; 0xe88 <process_stop>
     c48:	08 95       	ret

00000c4a <update_mode>:
	
enum sync_mode sync_mode[4] = {MIDI_MASTER, MIDI_SLAVE, DIN_SYNC_MASTER, DIN_SYNC_SLAVE};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     c4a:	80 91 69 02 	lds	r24, 0x0269
     c4e:	86 ff       	sbrs	r24, 6
     c50:	54 c0       	rjmp	.+168    	; 0xcfa <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     c52:	e9 e6       	ldi	r30, 0x69	; 105
     c54:	f2 e0       	ldi	r31, 0x02	; 2
     c56:	8f 7b       	andi	r24, 0xBF	; 191
     c58:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     c5a:	80 91 47 04 	lds	r24, 0x0447
     c5e:	80 ff       	sbrs	r24, 0
     c60:	0c c0       	rjmp	.+24     	; 0xc7a <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     c62:	80 91 23 02 	lds	r24, 0x0223
     c66:	88 23       	and	r24, r24
     c68:	21 f0       	breq	.+8      	; 0xc72 <update_mode+0x28>
     c6a:	81 50       	subi	r24, 0x01	; 1
     c6c:	80 93 23 02 	sts	0x0223, r24
     c70:	0e c0       	rjmp	.+28     	; 0xc8e <update_mode+0x44>
     c72:	85 e0       	ldi	r24, 0x05	; 5
     c74:	80 93 23 02 	sts	0x0223, r24
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c7a:	80 91 23 02 	lds	r24, 0x0223
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	86 30       	cpi	r24, 0x06	; 6
     c82:	19 f0       	breq	.+6      	; 0xc8a <update_mode+0x40>
     c84:	80 93 23 02 	sts	0x0223, r24
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <update_mode+0x44>
     c8a:	10 92 23 02 	sts	0x0223, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c8e:	30 91 23 02 	lds	r19, 0x0223
     c92:	e3 2f       	mov	r30, r19
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	e3 5e       	subi	r30, 0xE3	; 227
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
     c9a:	20 81       	ld	r18, Z
     c9c:	20 93 45 04 	sts	0x0445, r18
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
		spi_data[4] |= (1<< mode_index);
     ca0:	ef e7       	ldi	r30, 0x7F	; 127
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <update_mode+0x64>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	3a 95       	dec	r19
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <update_mode+0x60>
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
     cb2:	94 81       	ldd	r25, Z+4	; 0x04
     cb4:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] |= (1<< mode_index);
     cb6:	89 2b       	or	r24, r25
     cb8:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	82 0f       	add	r24, r18
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	e0 f4       	brcc	.+56     	; 0xcfa <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     cc2:	e1 e0       	ldi	r30, 0x01	; 1
     cc4:	21 30       	cpi	r18, 0x01	; 1
     cc6:	09 f4       	brne	.+2      	; 0xcca <update_mode+0x80>
     cc8:	e0 e0       	ldi	r30, 0x00	; 0
     cca:	a8 e1       	ldi	r26, 0x18	; 24
     ccc:	b5 e0       	ldi	r27, 0x05	; 5
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	8c 91       	ld	r24, X
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	e0 fb       	bst	r30, 0
     cd6:	82 f9       	bld	r24, 2
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	8c 93       	st	X, r24
     cdc:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	eb 5b       	subi	r30, 0xBB	; 187
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	ef 52       	subi	r30, 0x2F	; 47
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	98 2f       	mov	r25, r24
     cec:	9f 71       	andi	r25, 0x1F	; 31
     cee:	8c 91       	ld	r24, X
     cf0:	80 7e       	andi	r24, 0xE0	; 224
     cf2:	89 2b       	or	r24, r25
     cf4:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     cf6:	0e 94 31 04 	call	0x862	; 0x862 <update_step_led_mask>
     cfa:	08 95       	ret

00000cfc <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     cfc:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     d00:	90 93 74 02 	sts	0x0274, r25
     d04:	80 93 73 02 	sts	0x0273, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     d08:	20 91 71 02 	lds	r18, 0x0271
     d0c:	30 91 72 02 	lds	r19, 0x0272
     d10:	82 1b       	sub	r24, r18
     d12:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     d14:	95 95       	asr	r25
     d16:	87 95       	ror	r24
     d18:	95 95       	asr	r25
     d1a:	87 95       	ror	r24
     d1c:	82 0f       	add	r24, r18
     d1e:	93 1f       	adc	r25, r19
     d20:	90 93 72 02 	sts	0x0272, r25
     d24:	80 93 71 02 	sts	0x0271, r24
	
	clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     d28:	23 e6       	ldi	r18, 0x63	; 99
     d2a:	34 e0       	ldi	r19, 0x04	; 4
     d2c:	a9 01       	movw	r20, r18
     d2e:	48 1b       	sub	r20, r24
     d30:	59 0b       	sbc	r21, r25
     d32:	ea e8       	ldi	r30, 0x8A	; 138
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	54 83       	std	Z+4, r21	; 0x04
     d38:	43 83       	std	Z+3, r20	; 0x03

	if (clock.rate != clock.previous_rate) {
     d3a:	23 81       	ldd	r18, Z+3	; 0x03
     d3c:	34 81       	ldd	r19, Z+4	; 0x04
     d3e:	85 81       	ldd	r24, Z+5	; 0x05
     d40:	96 81       	ldd	r25, Z+6	; 0x06
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	31 f0       	breq	.+12     	; 0xd54 <update_tempo+0x58>
		
		update_clock_rate(clock.rate);
     d48:	80 91 8d 02 	lds	r24, 0x028D
     d4c:	90 91 8e 02 	lds	r25, 0x028E
     d50:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	clock.previous_rate = clock.rate;
     d54:	ea e8       	ldi	r30, 0x8A	; 138
     d56:	f2 e0       	ldi	r31, 0x02	; 2
     d58:	83 81       	ldd	r24, Z+3	; 0x03
     d5a:	94 81       	ldd	r25, Z+4	; 0x04
     d5c:	96 83       	std	Z+6, r25	; 0x06
     d5e:	85 83       	std	Z+5, r24	; 0x05
     d60:	08 95       	ret

00000d62 <process_tick>:
	
}

void process_tick(void) {

		if (++clock.ppqn_counter == clock.divider) {
     d62:	ea e8       	ldi	r30, 0x8A	; 138
     d64:	f2 e0       	ldi	r31, 0x02	; 2
     d66:	81 81       	ldd	r24, Z+1	; 0x01
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	81 83       	std	Z+1, r24	; 0x01
     d6c:	90 81       	ld	r25, Z
     d6e:	9f 70       	andi	r25, 0x0F	; 15
     d70:	89 13       	cpse	r24, r25
     d72:	48 c0       	rjmp	.+144    	; 0xe04 <process_tick+0xa2>
			flag.next_step = 1;
     d74:	80 91 92 02 	lds	r24, 0x0292
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	80 93 92 02 	sts	0x0292, r24
			if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) flag.new_measure = 1;
     d7e:	e8 e1       	ldi	r30, 0x18	; 24
     d80:	f5 e0       	ldi	r31, 0x05	; 5
     d82:	90 81       	ld	r25, Z
     d84:	89 2f       	mov	r24, r25
     d86:	82 95       	swap	r24
     d88:	86 95       	lsr	r24
     d8a:	87 70       	andi	r24, 0x07	; 7
     d8c:	20 91 19 05 	lds	r18, 0x0519
     d90:	21 70       	andi	r18, 0x01	; 1
     d92:	22 0f       	add	r18, r18
     d94:	22 0f       	add	r18, r18
     d96:	22 0f       	add	r18, r18
     d98:	28 2b       	or	r18, r24
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	82 0f       	add	r24, r18
     d9e:	38 2f       	mov	r19, r24
     da0:	32 95       	swap	r19
     da2:	33 0f       	add	r19, r19
     da4:	30 7e       	andi	r19, 0xE0	; 224
     da6:	9f 71       	andi	r25, 0x1F	; 31
     da8:	93 2b       	or	r25, r19
     daa:	90 83       	st	Z, r25
     dac:	83 fb       	bst	r24, 3
     dae:	99 27       	eor	r25, r25
     db0:	90 f9       	bld	r25, 0
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	8e 7f       	andi	r24, 0xFE	; 254
     db6:	89 2b       	or	r24, r25
     db8:	81 83       	std	Z+1, r24	; 0x01
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 fb       	bst	r24, 1
     dbe:	44 27       	eor	r20, r20
     dc0:	40 f9       	bld	r20, 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	4b 5b       	subi	r20, 0xBB	; 187
     dc6:	5b 4f       	sbci	r21, 0xFB	; 251
     dc8:	fa 01       	movw	r30, r20
     dca:	ef 52       	subi	r30, 0x2F	; 47
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	49 f4       	brne	.+18     	; 0xdea <process_tick+0x88>
     dd8:	80 91 47 04 	lds	r24, 0x0447
     ddc:	81 ff       	sbrs	r24, 1
     dde:	05 c0       	rjmp	.+10     	; 0xdea <process_tick+0x88>
     de0:	80 91 92 02 	lds	r24, 0x0292
     de4:	80 62       	ori	r24, 0x20	; 32
     de6:	80 93 92 02 	sts	0x0292, r24
			clock.beat_counter++; //overflows every 4 beats
     dea:	ec e8       	ldi	r30, 0x8C	; 140
     dec:	f2 e0       	ldi	r31, 0x02	; 2
     dee:	80 81       	ld	r24, Z
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	98 2f       	mov	r25, r24
     df4:	93 70       	andi	r25, 0x03	; 3
     df6:	80 81       	ld	r24, Z
     df8:	8c 7f       	andi	r24, 0xFC	; 252
     dfa:	89 2b       	or	r24, r25
     dfc:	80 83       	st	Z, r24
			clock.ppqn_counter = 0;
     dfe:	10 92 8b 02 	sts	0x028B, r1
     e02:	08 95       	ret
		} else if (clock.ppqn_counter == clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     e04:	ea e8       	ldi	r30, 0x8A	; 138
     e06:	f2 e0       	ldi	r31, 0x02	; 2
     e08:	21 81       	ldd	r18, Z+1	; 0x01
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 70       	andi	r24, 0x0F	; 15
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	95 95       	asr	r25
     e14:	87 95       	ror	r24
     e16:	28 17       	cp	r18, r24
     e18:	39 07       	cpc	r19, r25
     e1a:	29 f4       	brne	.+10     	; 0xe26 <process_tick+0xc4>
				
			flag.half_step = 1;
     e1c:	80 91 92 02 	lds	r24, 0x0292
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	80 93 92 02 	sts	0x0292, r24
     e26:	08 95       	ret

00000e28 <process_start>:
	
}

void process_start(void) {
	
		sequencer.current_step = 0;
     e28:	e8 e1       	ldi	r30, 0x18	; 24
     e2a:	f5 e0       	ldi	r31, 0x05	; 5
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 71       	andi	r24, 0x1F	; 31
     e30:	80 83       	st	Z, r24
     e32:	81 81       	ldd	r24, Z+1	; 0x01
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
     e38:	80 91 92 02 	lds	r24, 0x0292
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	80 93 92 02 	sts	0x0292, r24
		//flag.new_measure = 1;
		clock.ppqn_counter = 0;
     e42:	10 92 8b 02 	sts	0x028B, r1
			
		flag.variation_change = 0;
     e46:	80 91 92 02 	lds	r24, 0x0292
     e4a:	8b 7f       	andi	r24, 0xFB	; 251
     e4c:	80 93 92 02 	sts	0x0292, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
     e50:	80 91 15 05 	lds	r24, 0x0515
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	31 f4       	brne	.+12     	; 0xe64 <process_start+0x3c>
				
			sequencer.variation = VAR_A; //start on variation A
     e58:	e4 e1       	ldi	r30, 0x14	; 20
     e5a:	f5 e0       	ldi	r31, 0x05	; 5
     e5c:	80 81       	ld	r24, Z
     e5e:	8e 7f       	andi	r24, 0xFE	; 254
     e60:	80 83       	st	Z, r24
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <process_start+0x46>
			} else {
				
			sequencer.variation = VAR_B;
     e64:	e4 e1       	ldi	r30, 0x14	; 20
     e66:	f5 e0       	ldi	r31, 0x05	; 5
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	80 83       	st	Z, r24
		}
		if (clock.source == INTERNAL) {
     e6e:	80 91 91 02 	lds	r24, 0x0291
     e72:	81 11       	cpse	r24, r1
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <process_start+0x5e>
			
			midi_send_start(&midi_device);
     e76:	83 e9       	ldi	r24, 0x93	; 147
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <midi_send_start>
			midi_send_clock(&midi_device);
     e7e:	83 e9       	ldi	r24, 0x93	; 147
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <midi_send_clock>
     e86:	08 95       	ret

00000e88 <process_stop>:

}

void process_stop(void) {
	
		if (sequencer.part_playing == SECOND) { //reset part playing
     e88:	80 91 19 05 	lds	r24, 0x0519
     e8c:	81 ff       	sbrs	r24, 1
     e8e:	0b c0       	rjmp	.+22     	; 0xea6 <process_stop+0x1e>
			sequencer.part_playing = FIRST;
     e90:	e8 e1       	ldi	r30, 0x18	; 24
     e92:	f5 e0       	ldi	r31, 0x05	; 5
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	8d 7f       	andi	r24, 0xFD	; 253
     e98:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
     e9a:	8b e2       	ldi	r24, 0x2B	; 43
     e9c:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>
			turn_on (FIRST_PART_LED);
     ea0:	8a e2       	ldi	r24, 0x2A	; 42
     ea2:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
				
		}
		turn_off_all_inst_leds();
     ea6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
     eaa:	e0 91 1c 05 	lds	r30, 0x051C
     eae:	87 e0       	ldi	r24, 0x07	; 7
     eb0:	e8 9f       	mul	r30, r24
     eb2:	f0 01       	movw	r30, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	e0 50       	subi	r30, 0x00	; 0
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	85 81       	ldd	r24, Z+5	; 0x05
     ebc:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
			
		//blank all step leds and turn on current pattern LED
		spi_data[1] = 0;
     ec0:	ef e7       	ldi	r30, 0x7F	; 127
     ec2:	f2 e0       	ldi	r31, 0x02	; 2
     ec4:	11 82       	std	Z+1, r1	; 0x01
		spi_data[0] = 0;
     ec6:	10 82       	st	Z, r1
		turn_on(STEP_1_LED);	
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
		if (clock.source == INTERNAL) midi_send_stop(&midi_device);
     ece:	80 91 91 02 	lds	r24, 0x0291
     ed2:	81 11       	cpse	r24, r1
     ed4:	04 c0       	rjmp	.+8      	; 0xede <process_stop+0x56>
     ed6:	83 e9       	ldi	r24, 0x93	; 147
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <midi_send_stop>
     ede:	08 95       	ret

00000ee0 <update_step_board>:
		//
//}
		
//}

void update_step_board() {
     ee0:	2f 92       	push	r2
     ee2:	3f 92       	push	r3
     ee4:	4f 92       	push	r4
     ee6:	5f 92       	push	r5
     ee8:	6f 92       	push	r6
     eea:	7f 92       	push	r7
     eec:	8f 92       	push	r8
     eee:	9f 92       	push	r9
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
	
	if (sequencer.START) {
     f04:	90 91 47 04 	lds	r25, 0x0447
     f08:	91 ff       	sbrs	r25, 1
     f0a:	2f c1       	rjmp	.+606    	; 0x116a <update_step_board+0x28a>
		
			switch (sequencer.mode) {		
     f0c:	80 91 45 04 	lds	r24, 0x0445
     f10:	81 50       	subi	r24, 0x01	; 1
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	08 f0       	brcs	.+2      	; 0xf18 <update_step_board+0x38>
     f16:	29 c1       	rjmp	.+594    	; 0x116a <update_step_board+0x28a>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     f18:	92 ff       	sbrs	r25, 2
     f1a:	26 c0       	rjmp	.+76     	; 0xf68 <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     f1c:	80 91 29 02 	lds	r24, 0x0229
     f20:	86 fd       	sbrc	r24, 6
     f22:	0b c0       	rjmp	.+22     	; 0xf3a <update_step_board+0x5a>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e7 5d       	subi	r30, 0xD7	; 215
     f30:	fd 4f       	sbci	r31, 0xFD	; 253
     f32:	20 81       	ld	r18, Z
     f34:	26 ff       	sbrs	r18, 6
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <update_step_board+0x7e>
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <update_step_board+0x5e>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     f3e:	fc 01       	movw	r30, r24
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	e7 5d       	subi	r30, 0xD7	; 215
     f46:	fd 4f       	sbci	r31, 0xFD	; 253
     f48:	90 81       	ld	r25, Z
     f4a:	9f 7b       	andi	r25, 0xBF	; 191
     f4c:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     f4e:	e8 e1       	ldi	r30, 0x18	; 24
     f50:	f5 e0       	ldi	r31, 0x05	; 5
     f52:	8f 71       	andi	r24, 0x1F	; 31
     f54:	90 81       	ld	r25, Z
     f56:	90 7e       	andi	r25, 0xE0	; 224
     f58:	89 2b       	or	r24, r25
     f5a:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     f5c:	06 c1       	rjmp	.+524    	; 0x116a <update_step_board+0x28a>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	80 31       	cpi	r24, 0x10	; 16
     f62:	91 05       	cpc	r25, r1
     f64:	09 f7       	brne	.-62     	; 0xf28 <update_step_board+0x48>
     f66:	01 c1       	rjmp	.+514    	; 0x116a <update_step_board+0x28a>
					
					break; //break or return? or is it needed?
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     f68:	80 91 1c 05 	lds	r24, 0x051C
     f6c:	80 31       	cpi	r24, 0x10	; 16
     f6e:	09 f0       	breq	.+2      	; 0xf72 <update_step_board+0x92>
     f70:	75 c0       	rjmp	.+234    	; 0x105c <update_step_board+0x17c>
     f72:	00 e0       	ldi	r16, 0x00	; 0
     f74:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     f76:	c9 e1       	ldi	r28, 0x19	; 25
     f78:	d5 e0       	ldi	r29, 0x05	; 5
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     f7a:	0f 2e       	mov	r0, r31
     f7c:	f4 e1       	ldi	r31, 0x14	; 20
     f7e:	6f 2e       	mov	r6, r31
     f80:	f5 e0       	ldi	r31, 0x05	; 5
     f82:	7f 2e       	mov	r7, r31
     f84:	f0 2d       	mov	r31, r0
     f86:	cc 24       	eor	r12, r12
     f88:	c3 94       	inc	r12
     f8a:	d1 2c       	mov	r13, r1
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f3 e3       	ldi	r31, 0x33	; 51
     f90:	bf 2e       	mov	r11, r31
     f92:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f94:	0f 2e       	mov	r0, r31
     f96:	fc e1       	ldi	r31, 0x1C	; 28
     f98:	4f 2e       	mov	r4, r31
     f9a:	f5 e0       	ldi	r31, 0x05	; 5
     f9c:	5f 2e       	mov	r5, r31
     f9e:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     fa0:	f8 01       	movw	r30, r16
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	e7 5d       	subi	r30, 0xD7	; 215
     fa8:	fd 4f       	sbci	r31, 0xFD	; 253
     faa:	80 81       	ld	r24, Z
     fac:	86 ff       	sbrs	r24, 6
     fae:	4f c0       	rjmp	.+158    	; 0x104e <update_step_board+0x16e>
					
							
							button[i].state ^= button[i].state;
     fb0:	f8 01       	movw	r30, r16
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	e7 5d       	subi	r30, 0xD7	; 215
     fb8:	fd 4f       	sbci	r31, 0xFD	; 253
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     fbe:	88 81       	ld	r24, Y
     fc0:	82 fb       	bst	r24, 2
     fc2:	88 24       	eor	r8, r8
     fc4:	80 f8       	bld	r8, 0
     fc6:	91 2c       	mov	r9, r1
     fc8:	f4 01       	movw	r30, r8
     fca:	eb 5b       	subi	r30, 0xBB	; 187
     fcc:	fb 4f       	sbci	r31, 0xFB	; 251
     fce:	ef 52       	subi	r30, 0x2F	; 47
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	80 17       	cp	r24, r16
     fd8:	91 07       	cpc	r25, r17
     fda:	cc f1       	brlt	.+114    	; 0x104e <update_step_board+0x16e>
								toggle(i);
     fdc:	80 2f       	mov	r24, r16
     fde:	0e 94 d5 03 	call	0x7aa	; 0x7aa <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     fe2:	d3 01       	movw	r26, r6
     fe4:	8c 91       	ld	r24, X
     fe6:	80 fb       	bst	r24, 0
     fe8:	22 24       	eor	r2, r2
     fea:	20 f8       	bld	r2, 0
     fec:	31 2c       	mov	r3, r1
     fee:	88 81       	ld	r24, Y
     ff0:	82 fb       	bst	r24, 2
     ff2:	ee 24       	eor	r14, r14
     ff4:	e0 f8       	bld	r14, 0
     ff6:	f1 2c       	mov	r15, r1
     ff8:	b2 9c       	mul	r11, r2
     ffa:	f0 01       	movw	r30, r0
     ffc:	b3 9c       	mul	r11, r3
     ffe:	f0 0d       	add	r31, r0
    1000:	11 24       	eor	r1, r1
    1002:	df 01       	movw	r26, r30
    1004:	ae 0d       	add	r26, r14
    1006:	bf 1d       	adc	r27, r15
    1008:	aa 0f       	add	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	ab 57       	subi	r26, 0x7B	; 123
    100e:	bb 4f       	sbci	r27, 0xFB	; 251
    1010:	13 96       	adiw	r26, 0x03	; 3
    1012:	2d 91       	ld	r18, X+
    1014:	3c 91       	ld	r19, X
    1016:	14 97       	sbiw	r26, 0x04	; 4
    1018:	c6 01       	movw	r24, r12
    101a:	00 2e       	mov	r0, r16
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <update_step_board+0x142>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <update_step_board+0x13e>
    1026:	28 27       	eor	r18, r24
    1028:	39 27       	eor	r19, r25
    102a:	14 96       	adiw	r26, 0x04	; 4
    102c:	3c 93       	st	X, r19
    102e:	2e 93       	st	-X, r18
    1030:	13 97       	sbiw	r26, 0x03	; 3
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1032:	d2 01       	movw	r26, r4
    1034:	2c 91       	ld	r18, X
    1036:	e2 0f       	add	r30, r18
    1038:	f1 1d       	adc	r31, r1
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	e7 57       	subi	r30, 0x77	; 119
    1040:	fb 4f       	sbci	r31, 0xFB	; 251
    1042:	23 81       	ldd	r18, Z+3	; 0x03
    1044:	34 81       	ldd	r19, Z+4	; 0x04
    1046:	82 27       	eor	r24, r18
    1048:	93 27       	eor	r25, r19
    104a:	94 83       	std	Z+4, r25	; 0x04
    104c:	83 83       	std	Z+3, r24	; 0x03
				}
				
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
    104e:	0f 5f       	subi	r16, 0xFF	; 255
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	00 31       	cpi	r16, 0x10	; 16
    1054:	11 05       	cpc	r17, r1
    1056:	09 f0       	breq	.+2      	; 0x105a <update_step_board+0x17a>
    1058:	a3 cf       	rjmp	.-186    	; 0xfa0 <update_step_board+0xc0>
    105a:	87 c0       	rjmp	.+270    	; 0x116a <update_step_board+0x28a>
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    1060:	0f 2e       	mov	r0, r31
    1062:	f9 e1       	ldi	r31, 0x19	; 25
    1064:	ef 2e       	mov	r14, r31
    1066:	f5 e0       	ldi	r31, 0x05	; 5
    1068:	ff 2e       	mov	r15, r31
    106a:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    106c:	0f 2e       	mov	r0, r31
    106e:	f4 e1       	ldi	r31, 0x14	; 20
    1070:	6f 2e       	mov	r6, r31
    1072:	f5 e0       	ldi	r31, 0x05	; 5
    1074:	7f 2e       	mov	r7, r31
    1076:	f0 2d       	mov	r31, r0
    1078:	0f 2e       	mov	r0, r31
    107a:	fc e1       	ldi	r31, 0x1C	; 28
    107c:	4f 2e       	mov	r4, r31
    107e:	f5 e0       	ldi	r31, 0x05	; 5
    1080:	5f 2e       	mov	r5, r31
    1082:	f0 2d       	mov	r31, r0
    1084:	0f 2e       	mov	r0, r31
    1086:	f3 e3       	ldi	r31, 0x33	; 51
    1088:	3f 2e       	mov	r3, r31
    108a:	f0 2d       	mov	r31, r0
    108c:	88 24       	eor	r8, r8
    108e:	83 94       	inc	r8
    1090:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
    1092:	fe 01       	movw	r30, r28
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	e7 5d       	subi	r30, 0xD7	; 215
    109a:	fd 4f       	sbci	r31, 0xFD	; 253
    109c:	80 81       	ld	r24, Z
    109e:	86 ff       	sbrs	r24, 6
    10a0:	5f c0       	rjmp	.+190    	; 0x1160 <update_step_board+0x280>
						
						
						button[i].state ^= button[i].state;
    10a2:	fe 01       	movw	r30, r28
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	e7 5d       	subi	r30, 0xD7	; 215
    10aa:	fd 4f       	sbci	r31, 0xFD	; 253
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    10b0:	f7 01       	movw	r30, r14
    10b2:	80 81       	ld	r24, Z
    10b4:	82 fb       	bst	r24, 2
    10b6:	00 27       	eor	r16, r16
    10b8:	00 f9       	bld	r16, 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	f8 01       	movw	r30, r16
    10be:	eb 5b       	subi	r30, 0xBB	; 187
    10c0:	fb 4f       	sbci	r31, 0xFB	; 251
    10c2:	ef 52       	subi	r30, 0x2F	; 47
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	8c 17       	cp	r24, r28
    10cc:	9d 07       	cpc	r25, r29
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <update_step_board+0x1f2>
    10d0:	47 c0       	rjmp	.+142    	; 0x1160 <update_step_board+0x280>
							toggle(i);
    10d2:	8c 2f       	mov	r24, r28
    10d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    10d8:	d3 01       	movw	r26, r6
    10da:	8c 91       	ld	r24, X
    10dc:	80 fb       	bst	r24, 0
    10de:	cc 24       	eor	r12, r12
    10e0:	c0 f8       	bld	r12, 0
    10e2:	d1 2c       	mov	r13, r1
    10e4:	f7 01       	movw	r30, r14
    10e6:	80 81       	ld	r24, Z
    10e8:	82 fb       	bst	r24, 2
    10ea:	aa 24       	eor	r10, r10
    10ec:	a0 f8       	bld	r10, 0
    10ee:	b1 2c       	mov	r11, r1
    10f0:	d2 01       	movw	r26, r4
    10f2:	6c 91       	ld	r22, X
    10f4:	c5 01       	movw	r24, r10
    10f6:	82 95       	swap	r24
    10f8:	92 95       	swap	r25
    10fa:	90 7f       	andi	r25, 0xF0	; 240
    10fc:	98 27       	eor	r25, r24
    10fe:	80 7f       	andi	r24, 0xF0	; 240
    1100:	98 27       	eor	r25, r24
    1102:	3c 9c       	mul	r3, r12
    1104:	90 01       	movw	r18, r0
    1106:	3d 9c       	mul	r3, r13
    1108:	30 0d       	add	r19, r0
    110a:	11 24       	eor	r1, r1
    110c:	82 0f       	add	r24, r18
    110e:	93 1f       	adc	r25, r19
    1110:	8c 0f       	add	r24, r28
    1112:	9d 1f       	adc	r25, r29
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	fc 01       	movw	r30, r24
    111a:	eb 5b       	subi	r30, 0xBB	; 187
    111c:	fb 4f       	sbci	r31, 0xFB	; 251
    111e:	c4 01       	movw	r24, r8
    1120:	06 2e       	mov	r0, r22
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <update_step_board+0x248>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <update_step_board+0x244>
    112c:	43 81       	ldd	r20, Z+3	; 0x03
    112e:	54 81       	ldd	r21, Z+4	; 0x04
    1130:	84 27       	eor	r24, r20
    1132:	95 27       	eor	r25, r21
    1134:	94 83       	std	Z+4, r25	; 0x04
    1136:	83 83       	std	Z+3, r24	; 0x03
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1138:	f9 01       	movw	r30, r18
    113a:	e6 0f       	add	r30, r22
    113c:	f1 1d       	adc	r31, r1
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	e7 57       	subi	r30, 0x77	; 119
    1144:	fb 4f       	sbci	r31, 0xFB	; 251
    1146:	83 81       	ldd	r24, Z+3	; 0x03
    1148:	94 81       	ldd	r25, Z+4	; 0x04
    114a:	94 01       	movw	r18, r8
    114c:	0c 2e       	mov	r0, r28
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <update_step_board+0x274>
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <update_step_board+0x270>
    1158:	82 27       	eor	r24, r18
    115a:	93 27       	eor	r25, r19
    115c:	94 83       	std	Z+4, r25	; 0x04
    115e:	83 83       	std	Z+3, r24	; 0x03
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    1160:	21 96       	adiw	r28, 0x01	; 1
    1162:	c0 31       	cpi	r28, 0x10	; 16
    1164:	d1 05       	cpc	r29, r1
    1166:	09 f0       	breq	.+2      	; 0x116a <update_step_board+0x28a>
    1168:	94 cf       	rjmp	.-216    	; 0x1092 <update_step_board+0x1b2>
	} else {
		
		//handle changing selected pattern and rhythm. Not currently handling switches presses now when sequencer is stopped, which means they get added once sequencer starts
		
	}
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	2f 90       	pop	r2
    118e:	08 95       	ret

00001190 <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    1190:	80 91 65 02 	lds	r24, 0x0265
    1194:	86 ff       	sbrs	r24, 6
    1196:	29 c0       	rjmp	.+82     	; 0x11ea <update_prescale+0x5a>
    1198:	80 91 47 04 	lds	r24, 0x0447
    119c:	80 ff       	sbrs	r24, 0
    119e:	25 c0       	rjmp	.+74     	; 0x11ea <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    11a0:	e5 e6       	ldi	r30, 0x65	; 101
    11a2:	f2 e0       	ldi	r31, 0x02	; 2
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 7b       	andi	r24, 0xBF	; 191
    11a8:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    11aa:	80 91 28 02 	lds	r24, 0x0228
    11ae:	88 23       	and	r24, r24
    11b0:	21 f0       	breq	.+8      	; 0x11ba <update_prescale+0x2a>
    11b2:	81 50       	subi	r24, 0x01	; 1
    11b4:	80 93 28 02 	sts	0x0228, r24
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	80 93 28 02 	sts	0x0228, r24
					
		}
		flag.pre_scale_change = 1;
    11c0:	80 91 92 02 	lds	r24, 0x0292
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	80 93 92 02 	sts	0x0292, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    11ca:	ef e7       	ldi	r30, 0x7F	; 127
    11cc:	f2 e0       	ldi	r31, 0x02	; 2
    11ce:	20 91 28 02 	lds	r18, 0x0228
    11d2:	2e 5f       	subi	r18, 0xFE	; 254
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <update_prescale+0x4e>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	2a 95       	dec	r18
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    11e2:	95 81       	ldd	r25, Z+5	; 0x05
    11e4:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    11e6:	89 2b       	or	r24, r25
    11e8:	85 83       	std	Z+5, r24	; 0x05
    11ea:	08 95       	ret

000011ec <check_tap>:
	}
}

void check_tap(void) {
	
	if (flag.tap) {
    11ec:	80 91 92 02 	lds	r24, 0x0292
    11f0:	88 23       	and	r24, r24
    11f2:	0c f0       	brlt	.+2      	; 0x11f6 <check_tap+0xa>
    11f4:	96 c0       	rjmp	.+300    	; 0x1322 <check_tap+0x136>
		
		flag.tap = 0;
    11f6:	80 91 92 02 	lds	r24, 0x0292
    11fa:	8f 77       	andi	r24, 0x7F	; 127
    11fc:	80 93 92 02 	sts	0x0292, r24
		if (sequencer.current_inst == AC) {
    1200:	40 91 1c 05 	lds	r20, 0x051C
    1204:	40 31       	cpi	r20, 0x10	; 16
    1206:	69 f5       	brne	.+90     	; 0x1262 <check_tap+0x76>
			sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] |= 1<<sequencer.current_step;	
    1208:	90 91 14 05 	lds	r25, 0x0514
    120c:	80 91 19 05 	lds	r24, 0x0519
    1210:	82 fb       	bst	r24, 2
    1212:	66 27       	eor	r22, r22
    1214:	60 f9       	bld	r22, 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	91 70       	andi	r25, 0x01	; 1
    121a:	fb 01       	movw	r30, r22
    121c:	53 e3       	ldi	r21, 0x33	; 51
    121e:	95 9f       	mul	r25, r21
    1220:	e0 0d       	add	r30, r0
    1222:	f1 1d       	adc	r31, r1
    1224:	11 24       	eor	r1, r1
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	eb 57       	subi	r30, 0x7B	; 123
    122c:	fb 4f       	sbci	r31, 0xFB	; 251
    122e:	90 91 18 05 	lds	r25, 0x0518
    1232:	92 95       	swap	r25
    1234:	96 95       	lsr	r25
    1236:	97 70       	andi	r25, 0x07	; 7
    1238:	81 70       	andi	r24, 0x01	; 1
    123a:	88 0f       	add	r24, r24
    123c:	88 0f       	add	r24, r24
    123e:	88 0f       	add	r24, r24
    1240:	89 2b       	or	r24, r25
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	db 01       	movw	r26, r22
    1248:	02 c0       	rjmp	.+4      	; 0x124e <check_tap+0x62>
    124a:	aa 0f       	add	r26, r26
    124c:	bb 1f       	adc	r27, r27
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <check_tap+0x5e>
    1252:	cd 01       	movw	r24, r26
    1254:	63 81       	ldd	r22, Z+3	; 0x03
    1256:	74 81       	ldd	r23, Z+4	; 0x04
    1258:	86 2b       	or	r24, r22
    125a:	97 2b       	or	r25, r23
    125c:	94 83       	std	Z+4, r25	; 0x04
    125e:	83 83       	std	Z+3, r24	; 0x03
    1260:	33 c0       	rjmp	.+102    	; 0x12c8 <check_tap+0xdc>
		} else {
			sequencer.pattern[sequencer.variation].part[sequencer.part_editing][sequencer.current_step] |= 1<<sequencer.current_inst;
    1262:	50 91 14 05 	lds	r21, 0x0514
    1266:	80 91 19 05 	lds	r24, 0x0519
    126a:	82 fb       	bst	r24, 2
    126c:	ee 27       	eor	r30, r30
    126e:	e0 f9       	bld	r30, 0
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	90 91 18 05 	lds	r25, 0x0518
    1276:	92 95       	swap	r25
    1278:	96 95       	lsr	r25
    127a:	97 70       	andi	r25, 0x07	; 7
    127c:	81 70       	andi	r24, 0x01	; 1
    127e:	88 0f       	add	r24, r24
    1280:	88 0f       	add	r24, r24
    1282:	88 0f       	add	r24, r24
    1284:	89 2b       	or	r24, r25
    1286:	e2 95       	swap	r30
    1288:	f2 95       	swap	r31
    128a:	f0 7f       	andi	r31, 0xF0	; 240
    128c:	fe 27       	eor	r31, r30
    128e:	e0 7f       	andi	r30, 0xF0	; 240
    1290:	fe 27       	eor	r31, r30
    1292:	95 2f       	mov	r25, r21
    1294:	91 70       	andi	r25, 0x01	; 1
    1296:	b3 e3       	ldi	r27, 0x33	; 51
    1298:	9b 9f       	mul	r25, r27
    129a:	e0 0d       	add	r30, r0
    129c:	f1 1d       	adc	r31, r1
    129e:	11 24       	eor	r1, r1
    12a0:	e8 0f       	add	r30, r24
    12a2:	f1 1d       	adc	r31, r1
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	eb 5b       	subi	r30, 0xBB	; 187
    12aa:	fb 4f       	sbci	r31, 0xFB	; 251
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	04 2e       	mov	r0, r20
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <check_tap+0xcc>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <check_tap+0xc8>
    12bc:	63 81       	ldd	r22, Z+3	; 0x03
    12be:	74 81       	ldd	r23, Z+4	; 0x04
    12c0:	86 2b       	or	r24, r22
    12c2:	97 2b       	or	r25, r23
    12c4:	94 83       	std	Z+4, r25	; 0x04
    12c6:	83 83       	std	Z+3, r24	; 0x03
		}
		sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= 1<<sequencer.current_step;
    12c8:	80 91 14 05 	lds	r24, 0x0514
    12cc:	28 2f       	mov	r18, r24
    12ce:	21 70       	andi	r18, 0x01	; 1
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	83 e3       	ldi	r24, 0x33	; 51
    12d4:	82 9f       	mul	r24, r18
    12d6:	f0 01       	movw	r30, r0
    12d8:	83 9f       	mul	r24, r19
    12da:	f0 0d       	add	r31, r0
    12dc:	11 24       	eor	r1, r1
    12de:	e4 0f       	add	r30, r20
    12e0:	f1 1d       	adc	r31, r1
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e7 57       	subi	r30, 0x77	; 119
    12e8:	fb 4f       	sbci	r31, 0xFB	; 251
    12ea:	80 91 18 05 	lds	r24, 0x0518
    12ee:	98 2f       	mov	r25, r24
    12f0:	92 95       	swap	r25
    12f2:	96 95       	lsr	r25
    12f4:	97 70       	andi	r25, 0x07	; 7
    12f6:	80 91 19 05 	lds	r24, 0x0519
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	88 0f       	add	r24, r24
    12fe:	88 0f       	add	r24, r24
    1300:	88 0f       	add	r24, r24
    1302:	89 2b       	or	r24, r25
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <check_tap+0x124>
    130c:	44 0f       	add	r20, r20
    130e:	55 1f       	adc	r21, r21
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <check_tap+0x120>
    1314:	ca 01       	movw	r24, r20
    1316:	23 81       	ldd	r18, Z+3	; 0x03
    1318:	34 81       	ldd	r19, Z+4	; 0x04
    131a:	82 2b       	or	r24, r18
    131c:	93 2b       	or	r25, r19
    131e:	94 83       	std	Z+4, r25	; 0x04
    1320:	83 83       	std	Z+3, r24	; 0x03
    1322:	08 95       	ret

00001324 <toggle_variation>:
	
}

void toggle_variation(void) {
	
	if (flag.variation_change == 1) {
    1324:	80 91 92 02 	lds	r24, 0x0292
    1328:	82 ff       	sbrs	r24, 2
    132a:	18 c0       	rjmp	.+48     	; 0x135c <toggle_variation+0x38>
		flag.variation_change = 0;
    132c:	80 91 92 02 	lds	r24, 0x0292
    1330:	8b 7f       	andi	r24, 0xFB	; 251
    1332:	80 93 92 02 	sts	0x0292, r24
		switch (sequencer.variation_mode) {
    1336:	80 91 15 05 	lds	r24, 0x0515
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	49 f0       	breq	.+18     	; 0x1350 <toggle_variation+0x2c>
    133e:	10 f0       	brcs	.+4      	; 0x1344 <toggle_variation+0x20>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	c1 f4       	brne	.+48     	; 0x1374 <toggle_variation+0x50>
					
			case VAR_A: case VAR_AB:
			sequencer.variation = VAR_A;
    1344:	e4 e1       	ldi	r30, 0x14	; 20
    1346:	f5 e0       	ldi	r31, 0x05	; 5
    1348:	80 81       	ld	r24, Z
    134a:	8e 7f       	andi	r24, 0xFE	; 254
    134c:	80 83       	st	Z, r24
			break;
    134e:	08 95       	ret
			case VAR_B:
			sequencer.variation = VAR_B;
    1350:	e4 e1       	ldi	r30, 0x14	; 20
    1352:	f5 e0       	ldi	r31, 0x05	; 5
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24
			break;
    135a:	08 95       	ret
					
					
		}
				
		} else if (sequencer.variation_mode == VAR_AB) {
    135c:	80 91 15 05 	lds	r24, 0x0515
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	41 f4       	brne	.+16     	; 0x1374 <toggle_variation+0x50>
				
		sequencer.variation ^= 1<<0; //toggle state
    1364:	e4 e1       	ldi	r30, 0x14	; 20
    1366:	f5 e0       	ldi	r31, 0x05	; 5
    1368:	80 81       	ld	r24, Z
    136a:	98 2f       	mov	r25, r24
    136c:	90 95       	com	r25
    136e:	90 fb       	bst	r25, 0
    1370:	80 f9       	bld	r24, 0
    1372:	80 83       	st	Z, r24
    1374:	08 95       	ret

00001376 <process_step>:
		spi_data[0] = 0;
		turn_on(STEP_1_LED);	
		if (clock.source == INTERNAL) midi_send_stop(&midi_device);
	
}
void process_step(void) {
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
	
	//if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
			
	if (flag.next_step) {
    1386:	80 91 92 02 	lds	r24, 0x0292
    138a:	80 ff       	sbrs	r24, 0
    138c:	e6 c0       	rjmp	.+460    	; 0x155a <process_step+0x1e4>
		flag.next_step = 0;
    138e:	80 91 92 02 	lds	r24, 0x0292
    1392:	8e 7f       	andi	r24, 0xFE	; 254
    1394:	80 93 92 02 	sts	0x0292, r24
		if (sequencer.START) {
    1398:	80 91 47 04 	lds	r24, 0x0447
    139c:	81 ff       	sbrs	r24, 1
    139e:	d6 c1       	rjmp	.+940    	; 0x174c <process_step+0x3d6>
		//*************************TAKEN FROM INTERRUPT*****************************//
			if (flag.new_measure) {
    13a0:	80 91 92 02 	lds	r24, 0x0292
    13a4:	85 ff       	sbrs	r24, 5
    13a6:	5c c0       	rjmp	.+184    	; 0x1460 <process_step+0xea>

				flag.new_measure = 0;
    13a8:	80 91 92 02 	lds	r24, 0x0292
    13ac:	8f 7d       	andi	r24, 0xDF	; 223
    13ae:	80 93 92 02 	sts	0x0292, r24
				sequencer.current_step = 0;
    13b2:	e8 e1       	ldi	r30, 0x18	; 24
    13b4:	f5 e0       	ldi	r31, 0x05	; 5
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 71       	andi	r24, 0x1F	; 31
    13ba:	80 83       	st	Z, r24
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	81 83       	std	Z+1, r24	; 0x01
				if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying exception handler
    13c2:	80 91 17 05 	lds	r24, 0x0517
    13c6:	80 31       	cpi	r24, 0x10	; 16
    13c8:	09 f1       	breq	.+66     	; 0x140c <process_step+0x96>
								
					if (sequencer.part_playing == SECOND) {
    13ca:	80 91 19 05 	lds	r24, 0x0519
    13ce:	81 ff       	sbrs	r24, 1
    13d0:	09 c0       	rjmp	.+18     	; 0x13e4 <process_step+0x6e>
						turn_off(SECOND_PART_LED);
    13d2:	8b e2       	ldi	r24, 0x2B	; 43
    13d4:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>
						turn_on(FIRST_PART_LED);
    13d8:	8a e2       	ldi	r24, 0x2A	; 42
    13da:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
						toggle_variation(); //only toggle variation at the end of the 2nd part
    13de:	0e 94 92 09 	call	0x1324	; 0x1324 <toggle_variation>
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <process_step+0x7a>
						} else {
						turn_off(FIRST_PART_LED);
    13e4:	8a e2       	ldi	r24, 0x2A	; 42
    13e6:	0e 94 b6 03 	call	0x76c	; 0x76c <turn_off>
						turn_on(SECOND_PART_LED);
    13ea:	8b e2       	ldi	r24, 0x2B	; 43
    13ec:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
					}
					sequencer.part_playing ^= 1 << 0;
    13f0:	80 91 19 05 	lds	r24, 0x0519
    13f4:	81 fb       	bst	r24, 1
    13f6:	99 27       	eor	r25, r25
    13f8:	90 f9       	bld	r25, 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 27       	eor	r24, r25
    13fe:	e8 e1       	ldi	r30, 0x18	; 24
    1400:	f5 e0       	ldi	r31, 0x05	; 5
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	80 fb       	bst	r24, 0
    1406:	91 f9       	bld	r25, 1
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <process_step+0x9a>
					} else {
								
					toggle_variation(); //no second part, so toggle variation
    140c:	0e 94 92 09 	call	0x1324	; 0x1324 <toggle_variation>
								
				}
				//update step number
				sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
    1410:	80 91 19 05 	lds	r24, 0x0519
    1414:	82 fb       	bst	r24, 2
    1416:	ee 24       	eor	r14, r14
    1418:	e0 f8       	bld	r14, 0
    141a:	f1 2c       	mov	r15, r1
    141c:	f7 01       	movw	r30, r14
    141e:	eb 5b       	subi	r30, 0xBB	; 187
    1420:	fb 4f       	sbci	r31, 0xFB	; 251
    1422:	ef 52       	subi	r30, 0x2F	; 47
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 91 18 05 	lds	r24, 0x0518
    142a:	8f 71       	andi	r24, 0x1F	; 31
    142c:	80 83       	st	Z, r24
				update_step_led_mask();
    142e:	0e 94 31 04 	call	0x862	; 0x862 <update_step_led_mask>
							
				//handle pre-scale change
				if (flag.pre_scale_change) {
    1432:	80 91 92 02 	lds	r24, 0x0292
    1436:	86 ff       	sbrs	r24, 6
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <process_step+0xea>
					flag.pre_scale_change = 0;
    143a:	80 91 92 02 	lds	r24, 0x0292
    143e:	8f 7b       	andi	r24, 0xBF	; 191
    1440:	80 93 92 02 	sts	0x0292, r24
					clock.divider = pre_scale[pre_scale_index];
    1444:	e0 91 28 02 	lds	r30, 0x0228
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	ec 5d       	subi	r30, 0xDC	; 220
    144c:	fd 4f       	sbci	r31, 0xFD	; 253
    144e:	80 81       	ld	r24, Z
    1450:	98 2f       	mov	r25, r24
    1452:	9f 70       	andi	r25, 0x0F	; 15
    1454:	ea e8       	ldi	r30, 0x8A	; 138
    1456:	f2 e0       	ldi	r31, 0x02	; 2
    1458:	80 81       	ld	r24, Z
    145a:	80 7f       	andi	r24, 0xF0	; 240
    145c:	89 2b       	or	r24, r25
    145e:	80 83       	st	Z, r24
				//sequencer.current_measure++;

			}			

			//*************************************************************************//
			while(trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one - this really only applies when there is incoming MIDI data. May have to do away
    1460:	80 91 77 01 	lds	r24, 0x0177
    1464:	88 23       	and	r24, r24
    1466:	e1 f3       	breq	.-8      	; 0x1460 <process_step+0xea>
			//with allowing drums to be triggered by MIDI when sequencer is running?
					
			check_tap();
    1468:	0e 94 f6 08 	call	0x11ec	; 0x11ec <check_tap>
			//PORTD |= (1<<TRIG);
						
			if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
    146c:	80 91 19 05 	lds	r24, 0x0519
    1470:	82 fb       	bst	r24, 2
    1472:	99 27       	eor	r25, r25
    1474:	90 f9       	bld	r25, 0
    1476:	86 95       	lsr	r24
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	98 13       	cpse	r25, r24
    147c:	37 c0       	rjmp	.+110    	; 0x14ec <process_step+0x176>
				spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    147e:	80 91 18 05 	lds	r24, 0x0518
    1482:	98 2f       	mov	r25, r24
    1484:	92 95       	swap	r25
    1486:	96 95       	lsr	r25
    1488:	97 70       	andi	r25, 0x07	; 7
    148a:	80 91 19 05 	lds	r24, 0x0519
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	88 0f       	add	r24, r24
    1492:	88 0f       	add	r24, r24
    1494:	88 0f       	add	r24, r24
    1496:	89 2b       	or	r24, r25
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <process_step+0x12c>
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <process_step+0x128>
    14a6:	80 91 14 05 	lds	r24, 0x0514
    14aa:	08 2f       	mov	r16, r24
    14ac:	01 70       	andi	r16, 0x01	; 1
    14ae:	10 e0       	ldi	r17, 0x00	; 0
    14b0:	80 91 1c 05 	lds	r24, 0x051C
    14b4:	93 e3       	ldi	r25, 0x33	; 51
    14b6:	90 9f       	mul	r25, r16
    14b8:	f0 01       	movw	r30, r0
    14ba:	91 9f       	mul	r25, r17
    14bc:	f0 0d       	add	r31, r0
    14be:	11 24       	eor	r1, r1
    14c0:	e8 0f       	add	r30, r24
    14c2:	f1 1d       	adc	r31, r1
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	e7 57       	subi	r30, 0x77	; 119
    14ca:	fb 4f       	sbci	r31, 0xFB	; 251
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	84 81       	ldd	r24, Z+4	; 0x04
				spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    14d0:	ef e7       	ldi	r30, 0x7F	; 127
    14d2:	f2 e0       	ldi	r31, 0x02	; 2
    14d4:	49 2f       	mov	r20, r25
    14d6:	42 23       	and	r20, r18
    14d8:	40 95       	com	r20
					
			check_tap();
			//PORTD |= (1<<TRIG);
						
			if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
				spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
    14da:	92 2b       	or	r25, r18
				spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
    14dc:	94 23       	and	r25, r20
    14de:	91 83       	std	Z+1, r25	; 0x01
				spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
				spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    14e0:	98 2f       	mov	r25, r24
    14e2:	93 23       	and	r25, r19
    14e4:	90 95       	com	r25
			//PORTD |= (1<<TRIG);
						
			if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
				spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
				spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
				spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
    14e6:	83 2b       	or	r24, r19
				spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
    14e8:	89 23       	and	r24, r25
    14ea:	80 83       	st	Z, r24
			}

			trigger_step();
    14ec:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
			if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
    14f0:	90 91 14 05 	lds	r25, 0x0514
    14f4:	80 91 19 05 	lds	r24, 0x0519
    14f8:	81 fb       	bst	r24, 1
    14fa:	22 27       	eor	r18, r18
    14fc:	20 f9       	bld	r18, 0
    14fe:	c2 2f       	mov	r28, r18
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	d4 2f       	mov	r29, r20
    1504:	91 70       	andi	r25, 0x01	; 1
    1506:	53 e3       	ldi	r21, 0x33	; 51
    1508:	95 9f       	mul	r25, r21
    150a:	c0 0d       	add	r28, r0
    150c:	d1 1d       	adc	r29, r1
    150e:	11 24       	eor	r1, r1
    1510:	cc 0f       	add	r28, r28
    1512:	dd 1f       	adc	r29, r29
    1514:	cb 57       	subi	r28, 0x7B	; 123
    1516:	db 4f       	sbci	r29, 0xFB	; 251
    1518:	90 91 18 05 	lds	r25, 0x0518
    151c:	92 95       	swap	r25
    151e:	96 95       	lsr	r25
    1520:	97 70       	andi	r25, 0x07	; 7
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	88 0f       	add	r24, r24
    1526:	88 0f       	add	r24, r24
    1528:	88 0f       	add	r24, r24
    152a:	89 2b       	or	r24, r25
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <process_step+0x1c2>
    1534:	56 95       	lsr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <process_step+0x1be>
    153c:	40 ff       	sbrs	r20, 0
    153e:	06 c1       	rjmp	.+524    	; 0x174c <process_step+0x3d6>
				spi_data[8] |= 1<<ACCENT;
    1540:	ef e7       	ldi	r30, 0x7F	; 127
    1542:	f2 e0       	ldi	r31, 0x02	; 2
    1544:	80 85       	ldd	r24, Z+8	; 0x08
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	80 87       	std	Z+8, r24	; 0x08
				if (!sequencer.SHIFT) turn_on(ACCENT_1_LED);
    154a:	80 91 47 04 	lds	r24, 0x0447
    154e:	80 fd       	sbrc	r24, 0
    1550:	fd c0       	rjmp	.+506    	; 0x174c <process_step+0x3d6>
    1552:	84 e1       	ldi	r24, 0x14	; 20
    1554:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
    1558:	f9 c0       	rjmp	.+498    	; 0x174c <process_step+0x3d6>
			}
		}
	} else if (flag.half_step) {
    155a:	80 91 92 02 	lds	r24, 0x0292
    155e:	81 ff       	sbrs	r24, 1
    1560:	d0 c0       	rjmp	.+416    	; 0x1702 <process_step+0x38c>
				
		flag.half_step = 0;
    1562:	80 91 92 02 	lds	r24, 0x0292
    1566:	8d 7f       	andi	r24, 0xFD	; 253
    1568:	80 93 92 02 	sts	0x0292, r24
		turn_off_all_inst_leds();
    156c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <turn_off_all_inst_leds>
		if (!sequencer.SHIFT) turn_on(drum_hit[sequencer.current_inst].led_index);
    1570:	80 91 47 04 	lds	r24, 0x0447
    1574:	80 fd       	sbrc	r24, 0
    1576:	0b c0       	rjmp	.+22     	; 0x158e <process_step+0x218>
    1578:	e0 91 1c 05 	lds	r30, 0x051C
    157c:	57 e0       	ldi	r21, 0x07	; 7
    157e:	e5 9f       	mul	r30, r21
    1580:	f0 01       	movw	r30, r0
    1582:	11 24       	eor	r1, r1
    1584:	e0 50       	subi	r30, 0x00	; 0
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	85 81       	ldd	r24, Z+5	; 0x05
    158a:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
    158e:	30 91 e4 01 	lds	r19, 0x01E4
    1592:	20 91 e7 01 	lds	r18, 0x01E7
    1596:	ef e7       	ldi	r30, 0x7F	; 127
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	82 2f       	mov	r24, r18
    159c:	83 2b       	or	r24, r19
    159e:	80 95       	com	r24
    15a0:	95 81       	ldd	r25, Z+5	; 0x05
    15a2:	89 23       	and	r24, r25
    15a4:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) {
    15a6:	80 91 47 04 	lds	r24, 0x0447
    15aa:	81 ff       	sbrs	r24, 1
    15ac:	82 c0       	rjmp	.+260    	; 0x16b2 <process_step+0x33c>
					
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
    15ae:	80 91 14 05 	lds	r24, 0x0514
    15b2:	80 fb       	bst	r24, 0
    15b4:	cc 24       	eor	r12, r12
    15b6:	c0 f8       	bld	r12, 0
    15b8:	d1 2c       	mov	r13, r1
    15ba:	80 91 1c 05 	lds	r24, 0x051C
    15be:	93 e3       	ldi	r25, 0x33	; 51
    15c0:	9c 9d       	mul	r25, r12
    15c2:	f0 01       	movw	r30, r0
    15c4:	9d 9d       	mul	r25, r13
    15c6:	f0 0d       	add	r31, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	e8 0f       	add	r30, r24
    15cc:	f1 1d       	adc	r31, r1
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	e7 57       	subi	r30, 0x77	; 119
    15d4:	fb 4f       	sbci	r31, 0xFB	; 251
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	84 81       	ldd	r24, Z+4	; 0x04
    15da:	ef e7       	ldi	r30, 0x7F	; 127
    15dc:	f2 e0       	ldi	r31, 0x02	; 2
    15de:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
    15e0:	80 83       	st	Z, r24
					
			switch (sequencer.variation_mode) {
    15e2:	40 91 15 05 	lds	r20, 0x0515
    15e6:	41 30       	cpi	r20, 0x01	; 1
    15e8:	39 f0       	breq	.+14     	; 0x15f8 <process_step+0x282>
    15ea:	18 f0       	brcs	.+6      	; 0x15f2 <process_step+0x27c>
    15ec:	42 30       	cpi	r20, 0x02	; 2
    15ee:	71 f0       	breq	.+28     	; 0x160c <process_step+0x296>
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <process_step+0x2a8>
						
				case VAR_A:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
    15f2:	30 93 1d 05 	sts	0x051D, r19
				break;
    15f6:	13 c0       	rjmp	.+38     	; 0x161e <process_step+0x2a8>
				case VAR_B:
				if (flag.variation_change == 1) {
    15f8:	80 91 92 02 	lds	r24, 0x0292
    15fc:	82 ff       	sbrs	r24, 2
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <process_step+0x290>
							
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
    1600:	30 93 1d 05 	sts	0x051D, r19
    1604:	0c c0       	rjmp	.+24     	; 0x161e <process_step+0x2a8>
							
					}else {
					sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
    1606:	20 93 1d 05 	sts	0x051D, r18
    160a:	09 c0       	rjmp	.+18     	; 0x161e <process_step+0x2a8>
				}
				break;
				case VAR_AB:
				if (sequencer.variation == VAR_A) {
    160c:	80 91 14 05 	lds	r24, 0x0514
    1610:	80 fd       	sbrc	r24, 0
    1612:	03 c0       	rjmp	.+6      	; 0x161a <process_step+0x2a4>
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
    1614:	30 93 1d 05 	sts	0x051D, r19
    1618:	02 c0       	rjmp	.+4      	; 0x161e <process_step+0x2a8>
					} else {
					sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
    161a:	20 93 1d 05 	sts	0x051D, r18
				}
				break;
			}
					
			if (clock.beat_counter <2) {
    161e:	80 91 8c 02 	lds	r24, 0x028C
    1622:	83 70       	andi	r24, 0x03	; 3
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 97       	sbiw	r24, 0x02	; 2
    1628:	0c f0       	brlt	.+2      	; 0x162c <process_step+0x2b6>
    162a:	90 c0       	rjmp	.+288    	; 0x174c <process_step+0x3d6>
						
				if (flag.variation_change == 1) {
    162c:	80 91 92 02 	lds	r24, 0x0292
    1630:	82 ff       	sbrs	r24, 2
    1632:	2c c0       	rjmp	.+88     	; 0x168c <process_step+0x316>
							
					switch (sequencer.variation_mode) {
    1634:	41 30       	cpi	r20, 0x01	; 1
    1636:	51 f0       	breq	.+20     	; 0x164c <process_step+0x2d6>
    1638:	18 f0       	brcs	.+6      	; 0x1640 <process_step+0x2ca>
    163a:	42 30       	cpi	r20, 0x02	; 2
    163c:	b9 f0       	breq	.+46     	; 0x166c <process_step+0x2f6>
    163e:	26 c0       	rjmp	.+76     	; 0x168c <process_step+0x316>
								
						case VAR_A:
						sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
    1640:	ed e1       	ldi	r30, 0x1D	; 29
    1642:	f5 e0       	ldi	r31, 0x05	; 5
    1644:	80 81       	ld	r24, Z
    1646:	28 2b       	or	r18, r24
    1648:	20 83       	st	Z, r18
						break;
    164a:	80 c0       	rjmp	.+256    	; 0x174c <process_step+0x3d6>
						case VAR_B:
						if (flag.variation_change == 1) {
    164c:	80 91 92 02 	lds	r24, 0x0292
    1650:	82 ff       	sbrs	r24, 2
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <process_step+0x2ea>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
    1654:	ed e1       	ldi	r30, 0x1D	; 29
    1656:	f5 e0       	ldi	r31, 0x05	; 5
    1658:	80 81       	ld	r24, Z
    165a:	28 2b       	or	r18, r24
    165c:	20 83       	st	Z, r18
    165e:	76 c0       	rjmp	.+236    	; 0x174c <process_step+0x3d6>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
    1660:	ed e1       	ldi	r30, 0x1D	; 29
    1662:	f5 e0       	ldi	r31, 0x05	; 5
    1664:	80 81       	ld	r24, Z
    1666:	38 2b       	or	r19, r24
    1668:	30 83       	st	Z, r19
    166a:	70 c0       	rjmp	.+224    	; 0x174c <process_step+0x3d6>
						}
						break;
						case VAR_AB:
						if (sequencer.variation == VAR_A) {
    166c:	80 91 14 05 	lds	r24, 0x0514
    1670:	80 fd       	sbrc	r24, 0
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <process_step+0x30a>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
    1674:	ed e1       	ldi	r30, 0x1D	; 29
    1676:	f5 e0       	ldi	r31, 0x05	; 5
    1678:	80 81       	ld	r24, Z
    167a:	82 2b       	or	r24, r18
    167c:	80 83       	st	Z, r24
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <process_step+0x31c>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
    1680:	ed e1       	ldi	r30, 0x1D	; 29
    1682:	f5 e0       	ldi	r31, 0x05	; 5
    1684:	80 81       	ld	r24, Z
    1686:	83 2b       	or	r24, r19
    1688:	80 83       	st	Z, r24
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <process_step+0x31c>
					}
							
							
				}
						
				if (sequencer.variation_mode == VAR_AB) {
    168c:	42 30       	cpi	r20, 0x02	; 2
    168e:	09 f0       	breq	.+2      	; 0x1692 <process_step+0x31c>
    1690:	5d c0       	rjmp	.+186    	; 0x174c <process_step+0x3d6>
					if (sequencer.variation == VAR_A) {
    1692:	80 91 14 05 	lds	r24, 0x0514
    1696:	80 fd       	sbrc	r24, 0
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <process_step+0x330>
						sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
    169a:	ed e1       	ldi	r30, 0x1D	; 29
    169c:	f5 e0       	ldi	r31, 0x05	; 5
    169e:	80 81       	ld	r24, Z
    16a0:	28 2b       	or	r18, r24
    16a2:	20 83       	st	Z, r18
    16a4:	53 c0       	rjmp	.+166    	; 0x174c <process_step+0x3d6>
						} else {
						sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
    16a6:	ed e1       	ldi	r30, 0x1D	; 29
    16a8:	f5 e0       	ldi	r31, 0x05	; 5
    16aa:	80 81       	ld	r24, Z
    16ac:	38 2b       	or	r19, r24
    16ae:	30 83       	st	Z, r19
    16b0:	4d c0       	rjmp	.+154    	; 0x174c <process_step+0x3d6>
				}
			}
					
			} else {
					
			spi_data[1] = 0;
    16b2:	ef e7       	ldi	r30, 0x7F	; 127
    16b4:	f2 e0       	ldi	r31, 0x02	; 2
    16b6:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
    16b8:	10 82       	st	Z, r1
					
			switch (sequencer.variation_mode) {
    16ba:	40 91 15 05 	lds	r20, 0x0515
    16be:	41 30       	cpi	r20, 0x01	; 1
    16c0:	31 f0       	breq	.+12     	; 0x16ce <process_step+0x358>
    16c2:	10 f0       	brcs	.+4      	; 0x16c8 <process_step+0x352>
    16c4:	42 30       	cpi	r20, 0x02	; 2
    16c6:	61 f4       	brne	.+24     	; 0x16e0 <process_step+0x36a>
						
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
    16c8:	30 93 1d 05 	sts	0x051D, r19
				break;
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <process_step+0x36a>
						
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
    16ce:	20 93 1d 05 	sts	0x051D, r18
				break;
						
			}
					
			if (clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
    16d2:	80 91 8c 02 	lds	r24, 0x028C
    16d6:	83 70       	andi	r24, 0x03	; 3
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 97       	sbiw	r24, 0x02	; 2
    16dc:	bc f5       	brge	.+110    	; 0x174c <process_step+0x3d6>
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <process_step+0x384>
    16e0:	80 91 8c 02 	lds	r24, 0x028C
    16e4:	83 70       	andi	r24, 0x03	; 3
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 97       	sbiw	r24, 0x02	; 2
    16ea:	84 f5       	brge	.+96     	; 0x174c <process_step+0x3d6>
						

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
    16ec:	42 30       	cpi	r20, 0x02	; 2
    16ee:	29 f4       	brne	.+10     	; 0x16fa <process_step+0x384>
    16f0:	ed e1       	ldi	r30, 0x1D	; 29
    16f2:	f5 e0       	ldi	r31, 0x05	; 5
    16f4:	80 81       	ld	r24, Z
    16f6:	28 2b       	or	r18, r24
    16f8:	20 83       	st	Z, r18
						

						
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
    1700:	25 c0       	rjmp	.+74     	; 0x174c <process_step+0x3d6>
			}
		}
				
		//spi_data[5] |= sequencer.var_led_mask;
				
	} else if (clock.source == EXTERNAL && !sequencer.START) { //this handles variation LEDs when waiting for external clock signal
    1702:	80 91 91 02 	lds	r24, 0x0291
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	09 f5       	brne	.+66     	; 0x174c <process_step+0x3d6>
    170a:	80 91 47 04 	lds	r24, 0x0447
    170e:	81 fd       	sbrc	r24, 1
    1710:	1d c0       	rjmp	.+58     	; 0x174c <process_step+0x3d6>
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
    1712:	30 91 e4 01 	lds	r19, 0x01E4
    1716:	20 91 e7 01 	lds	r18, 0x01E7
    171a:	92 2f       	mov	r25, r18
    171c:	93 2b       	or	r25, r19
    171e:	ef e7       	ldi	r30, 0x7F	; 127
    1720:	f2 e0       	ldi	r31, 0x02	; 2
    1722:	49 2f       	mov	r20, r25
    1724:	40 95       	com	r20
    1726:	85 81       	ldd	r24, Z+5	; 0x05
    1728:	84 23       	and	r24, r20
    172a:	85 83       	std	Z+5, r24	; 0x05
		switch (sequencer.variation_mode) {
    172c:	80 91 15 05 	lds	r24, 0x0515
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	39 f0       	breq	.+14     	; 0x1742 <process_step+0x3cc>
    1734:	18 f0       	brcs	.+6      	; 0x173c <process_step+0x3c6>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	39 f0       	breq	.+14     	; 0x1748 <process_step+0x3d2>
    173a:	08 c0       	rjmp	.+16     	; 0x174c <process_step+0x3d6>
			
			case VAR_A:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
    173c:	30 93 1d 05 	sts	0x051D, r19
				break;
    1740:	05 c0       	rjmp	.+10     	; 0x174c <process_step+0x3d6>
				
			case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
    1742:	20 93 1d 05 	sts	0x051D, r18
				break;
    1746:	02 c0       	rjmp	.+4      	; 0x174c <process_step+0x3d6>
				
			case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit;
    1748:	90 93 1d 05 	sts	0x051D, r25
				break;		
			
		}
		
	}		
	spi_data[5] |= sequencer.var_led_mask;
    174c:	ef e7       	ldi	r30, 0x7F	; 127
    174e:	f2 e0       	ldi	r31, 0x02	; 2
    1750:	90 91 1d 05 	lds	r25, 0x051D
    1754:	85 81       	ldd	r24, Z+5	; 0x05
    1756:	89 2b       	or	r24, r25
    1758:	85 83       	std	Z+5, r24	; 0x05
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	08 95       	ret

0000176c <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    176c:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    1770:	ed ea       	ldi	r30, 0xAD	; 173
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	88 23       	and	r24, r24
    1778:	ec f7       	brge	.-6      	; 0x1774 <spi_shift_byte+0x8>
	return SPDR1;
    177a:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    177e:	08 95       	ret

00001780 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    1784:	cf e7       	ldi	r28, 0x7F	; 127
    1786:	d2 e0       	ldi	r29, 0x02	; 2
    1788:	88 81       	ld	r24, Y
    178a:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    17b2:	8f 81       	ldd	r24, Y+7	; 0x07
    17b4:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    17b8:	88 85       	ldd	r24, Y+8	; 0x08
    17ba:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    17be:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    17c0:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <read_switches>:

void read_switches(void) { //reads switch data
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    17cc:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
    17d4:	ca e7       	ldi	r28, 0x7A	; 122
    17d6:	d2 e0       	ldi	r29, 0x02	; 2
    17d8:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
    17e0:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
    17e8:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
    17f0:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_shift_byte>
    17f8:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    17fa:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    17fc:	28 81       	ld	r18, Y
    17fe:	92 2f       	mov	r25, r18
    1800:	96 95       	lsr	r25
    1802:	e7 e4       	ldi	r30, 0x47	; 71
    1804:	f4 e0       	ldi	r31, 0x04	; 4
    1806:	30 81       	ld	r19, Z
    1808:	90 fb       	bst	r25, 0
    180a:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	49 2f       	mov	r20, r25
    1810:	42 95       	swap	r20
    1812:	4f 70       	andi	r20, 0x0F	; 15
    1814:	40 fb       	bst	r20, 0
    1816:	32 f9       	bld	r19, 2
    1818:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    181a:	e5 e7       	ldi	r30, 0x75	; 117
    181c:	f2 e0       	ldi	r31, 0x02	; 2
    181e:	30 81       	ld	r19, Z
    1820:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    1822:	32 27       	eor	r19, r18
    1824:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1826:	23 23       	and	r18, r19
    1828:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    182a:	31 81       	ldd	r19, Z+1	; 0x01
    182c:	29 81       	ldd	r18, Y+1	; 0x01
    182e:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    1830:	32 27       	eor	r19, r18
    1832:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    1834:	23 23       	and	r18, r19
    1836:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1838:	22 81       	ldd	r18, Z+2	; 0x02
    183a:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    183c:	29 27       	eor	r18, r25
    183e:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    1840:	92 23       	and	r25, r18
    1842:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    1844:	23 81       	ldd	r18, Z+3	; 0x03
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    184a:	29 27       	eor	r18, r25
    184c:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    184e:	92 23       	and	r25, r18
    1850:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    1852:	94 81       	ldd	r25, Z+4	; 0x04
    1854:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1856:	98 27       	eor	r25, r24
    1858:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    185a:	89 23       	and	r24, r25
    185c:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    1868:	da 01       	movw	r26, r20
    186a:	aa 0f       	add	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	a7 5d       	subi	r26, 0xD7	; 215
    1870:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    1872:	8c 91       	ld	r24, X
    1874:	e8 2f       	mov	r30, r24
    1876:	e6 95       	lsr	r30
    1878:	e6 95       	lsr	r30
    187a:	e6 95       	lsr	r30
    187c:	e7 70       	andi	r30, 0x07	; 7
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	e6 58       	subi	r30, 0x86	; 134
    1882:	fd 4f       	sbci	r31, 0xFD	; 253
    1884:	20 81       	ld	r18, Z
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	98 2f       	mov	r25, r24
    188a:	97 70       	andi	r25, 0x07	; 7
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <parse_switch_data+0x2e>
    188e:	35 95       	asr	r19
    1890:	27 95       	ror	r18
    1892:	9a 95       	dec	r25
    1894:	e2 f7       	brpl	.-8      	; 0x188e <parse_switch_data+0x2a>
    1896:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    1898:	86 fb       	bst	r24, 6
    189a:	99 27       	eor	r25, r25
    189c:	90 f9       	bld	r25, 0
    189e:	29 27       	eor	r18, r25
    18a0:	20 fb       	bst	r18, 0
    18a2:	86 f9       	bld	r24, 6
    18a4:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    18a6:	4f 5f       	subi	r20, 0xFF	; 255
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	43 32       	cpi	r20, 0x23	; 35
    18ac:	51 05       	cpc	r21, r1
    18ae:	e1 f6       	brne	.-72     	; 0x1868 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    18b0:	08 95       	ret

000018b2 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    18b2:	83 b1       	in	r24, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    18b4:	90 91 88 02 	lds	r25, 0x0288
    18b8:	89 27       	eor	r24, r25
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    18ba:	98 27       	eor	r25, r24
    18bc:	90 93 88 02 	sts	0x0288, r25
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    18c0:	89 23       	and	r24, r25
    18c2:	80 93 89 02 	sts	0x0289, r24
	
	if ((sequencer.START && (current_start_stop_tap_state >> TAP) &1)) {
    18c6:	90 91 47 04 	lds	r25, 0x0447
    18ca:	91 ff       	sbrs	r25, 1
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <check_start_stop_tap+0x32>
    18ce:	82 ff       	sbrs	r24, 2
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <check_start_stop_tap+0x32>
			
		current_start_stop_tap_state ^= (1<<TAP); //toggle tap switch bit
    18d2:	94 e0       	ldi	r25, 0x04	; 4
    18d4:	89 27       	eor	r24, r25
    18d6:	80 93 89 02 	sts	0x0289, r24
		flag.tap = 1;
    18da:	80 91 92 02 	lds	r24, 0x0292
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	80 93 92 02 	sts	0x0292, r24
			
	}
	
	if (clock.source == EXTERNAL) return; //get out of here because when using external clock you don't need to process start/stop button activity
    18e4:	80 91 91 02 	lds	r24, 0x0291
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	c9 f0       	breq	.+50     	; 0x191e <check_start_stop_tap+0x6c>
	
	uint8_t start_state = sequencer.START;
    18ec:	e7 e4       	ldi	r30, 0x47	; 71
    18ee:	f4 e0       	ldi	r31, 0x04	; 4
    18f0:	80 81       	ld	r24, Z
    18f2:	81 fb       	bst	r24, 1
    18f4:	22 27       	eor	r18, r18
    18f6:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    18f8:	90 91 89 02 	lds	r25, 0x0289
    18fc:	96 95       	lsr	r25
    18fe:	92 27       	eor	r25, r18
    1900:	90 fb       	bst	r25, 0
    1902:	81 f9       	bld	r24, 1
    1904:	80 83       	st	Z, r24
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    1906:	81 ff       	sbrs	r24, 1
    1908:	08 c0       	rjmp	.+16     	; 0x191a <check_start_stop_tap+0x68>
    190a:	21 11       	cpse	r18, r1
    190c:	08 c0       	rjmp	.+16     	; 0x191e <check_start_stop_tap+0x6c>
		
		process_start();
    190e:	0e 94 14 07 	call	0xe28	; 0xe28 <process_start>
    1912:	08 95       	ret
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		process_stop();
    1914:	0e 94 44 07 	call	0xe88	; 0xe88 <process_stop>
    1918:	08 95       	ret
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
		
		process_start();
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    191a:	21 30       	cpi	r18, 0x01	; 1
    191c:	d9 f3       	breq	.-10     	; 0x1914 <check_start_stop_tap+0x62>
    191e:	08 95       	ret

00001920 <check_inst_switches>:
	

	
}
	
void check_inst_switches(void) {
    1920:	2f 92       	push	r2
    1922:	3f 92       	push	r3
    1924:	4f 92       	push	r4
    1926:	5f 92       	push	r5
    1928:	6f 92       	push	r6
    192a:	7f 92       	push	r7
    192c:	8f 92       	push	r8
    192e:	9f 92       	push	r9
    1930:	af 92       	push	r10
    1932:	bf 92       	push	r11
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	00 d0       	rcall	.+0      	; 0x1946 <check_inst_switches+0x26>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <check_inst_switches+0x28>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	
	if (button[INST_AC_1_SW].state) {
    194c:	80 91 49 02 	lds	r24, 0x0249
    1950:	86 ff       	sbrs	r24, 6
    1952:	11 c0       	rjmp	.+34     	; 0x1976 <check_inst_switches+0x56>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1954:	e9 e4       	ldi	r30, 0x49	; 73
    1956:	f2 e0       	ldi	r31, 0x02	; 2
    1958:	8f 7b       	andi	r24, 0xBF	; 191
    195a:	80 83       	st	Z, r24
		if (!sequencer.SHIFT) {
    195c:	80 91 47 04 	lds	r24, 0x0447
    1960:	80 fd       	sbrc	r24, 0
    1962:	5c c1       	rjmp	.+696    	; 0x1c1c <check_inst_switches+0x2fc>
			turn_off_all_inst_leds();
    1964:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <turn_off_all_inst_leds>
			turn_on(ACCENT_1_LED);
    1968:	84 e1       	ldi	r24, 0x14	; 20
    196a:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
			sequencer.current_inst = AC;
    196e:	80 e1       	ldi	r24, 0x10	; 16
    1970:	80 93 1c 05 	sts	0x051C, r24
    1974:	53 c1       	rjmp	.+678    	; 0x1c1c <check_inst_switches+0x2fc>
    1976:	0f 2e       	mov	r0, r31
    1978:	f3 e0       	ldi	r31, 0x03	; 3
    197a:	af 2e       	mov	r10, r31
    197c:	f1 e0       	ldi	r31, 0x01	; 1
    197e:	bf 2e       	mov	r11, r31
    1980:	f0 2d       	mov	r31, r0
	
}
	
void check_inst_switches(void) {
	
	if (button[INST_AC_1_SW].state) {
    1982:	0f 2e       	mov	r0, r31
    1984:	f9 e0       	ldi	r31, 0x09	; 9
    1986:	cf 2e       	mov	r12, r31
    1988:	d1 2c       	mov	r13, r1
    198a:	f0 2d       	mov	r31, r0
    198c:	0f 2e       	mov	r0, r31
    198e:	f2 e1       	ldi	r31, 0x12	; 18
    1990:	ef 2e       	mov	r14, r31
    1992:	f1 2c       	mov	r15, r1
    1994:	f0 2d       	mov	r31, r0
    1996:	41 e1       	ldi	r20, 0x11	; 17
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	5c 83       	std	Y+4, r21	; 0x04
    199c:	4b 83       	std	Y+3, r20	; 0x03
    199e:	00 e0       	ldi	r16, 0x00	; 0
    19a0:	10 e0       	ldi	r17, 0x00	; 0
		
		if (button[i].state) {
			
			button[i].state ^= button[i].state; //toggle state
			
			if (sequencer.SHIFT) {
    19a2:	0f 2e       	mov	r0, r31
    19a4:	f7 e4       	ldi	r31, 0x47	; 71
    19a6:	8f 2e       	mov	r8, r31
    19a8:	f4 e0       	ldi	r31, 0x04	; 4
    19aa:	9f 2e       	mov	r9, r31
    19ac:	f0 2d       	mov	r31, r0
					}
				
				
				} else {
				
					if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    19ae:	0f 2e       	mov	r0, r31
    19b0:	fc e1       	ldi	r31, 0x1C	; 28
    19b2:	4f 2e       	mov	r4, r31
    19b4:	f5 e0       	ldi	r31, 0x05	; 5
    19b6:	5f 2e       	mov	r5, r31
    19b8:	f0 2d       	mov	r31, r0
    19ba:	10 c0       	rjmp	.+32     	; 0x19dc <check_inst_switches+0xbc>
    19bc:	0f 5f       	subi	r16, 0xFF	; 255
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    19ca:	9f ef       	ldi	r25, 0xFF	; 255
    19cc:	e9 1a       	sub	r14, r25
    19ce:	f9 0a       	sbc	r15, r25
    19d0:	ef ef       	ldi	r30, 0xFF	; 255
    19d2:	ce 1a       	sub	r12, r30
    19d4:	de 0a       	sbc	r13, r30
    19d6:	f7 e0       	ldi	r31, 0x07	; 7
    19d8:	af 0e       	add	r10, r31
    19da:	b1 1c       	adc	r11, r1
    19dc:	2b 80       	ldd	r2, Y+3	; 0x03
    19de:	3c 80       	ldd	r3, Y+4	; 0x04
		return;
	}
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    19e0:	f1 01       	movw	r30, r2
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	e7 5d       	subi	r30, 0xD7	; 215
    19e8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ea:	80 81       	ld	r24, Z
    19ec:	86 ff       	sbrs	r24, 6
    19ee:	e8 c0       	rjmp	.+464    	; 0x1bc0 <check_inst_switches+0x2a0>
			
			button[i].state ^= button[i].state; //toggle state
    19f0:	f1 01       	movw	r30, r2
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e7 5d       	subi	r30, 0xD7	; 215
    19f8:	fd 4f       	sbci	r31, 0xFD	; 253
    19fa:	8f 7b       	andi	r24, 0xBF	; 191
    19fc:	80 83       	st	Z, r24
			
			if (sequencer.SHIFT) {
    19fe:	f4 01       	movw	r30, r8
    1a00:	80 81       	ld	r24, Z
    1a02:	80 ff       	sbrs	r24, 0
    1a04:	be c0       	rjmp	.+380    	; 0x1b82 <check_inst_switches+0x262>
				
				if (drum_hit[i-INST_BD_2_SW].switch_bit != NO_SWITCH || (i - INST_BD_2_SW == CP)) { //need to handle toggling between instrument
    1a06:	c8 01       	movw	r24, r16
    1a08:	f5 01       	movw	r30, r10
    1a0a:	20 81       	ld	r18, Z
    1a0c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a0e:	31 f4       	brne	.+12     	; 0x1a1c <check_inst_switches+0xfc>
    1a10:	f7 e1       	ldi	r31, 0x17	; 23
    1a12:	2f 16       	cp	r2, r31
    1a14:	31 04       	cpc	r3, r1
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <check_inst_switches+0xfa>
    1a18:	a0 c0       	rjmp	.+320    	; 0x1b5a <check_inst_switches+0x23a>
    1a1a:	d8 c0       	rjmp	.+432    	; 0x1bcc <check_inst_switches+0x2ac>
					//maybe evaluate the two drum states as 00, 01, 10, 11 and then use switch case
					uint8_t mute_state = (drum_hit[i - INST_BD_2_SW].muted) | (drum_hit[i - INST_BD_2_SW + 9].muted << 1);
    1a1c:	96 01       	movw	r18, r12
    1a1e:	f6 01       	movw	r30, r12
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	ec 19       	sub	r30, r12
    1a2e:	fd 09       	sbc	r31, r13
    1a30:	ea 5f       	subi	r30, 0xFA	; 250
    1a32:	fe 4f       	sbci	r31, 0xFE	; 254
    1a34:	40 81       	ld	r20, Z
    1a36:	40 fb       	bst	r20, 0
    1a38:	66 24       	eor	r6, r6
    1a3a:	60 f8       	bld	r6, 0
    1a3c:	71 2c       	mov	r7, r1
    1a3e:	a3 01       	movw	r20, r6
    1a40:	44 0f       	add	r20, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	f8 01       	movw	r30, r16
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	ee 0f       	add	r30, r30
    1a50:	ff 1f       	adc	r31, r31
    1a52:	e0 1b       	sub	r30, r16
    1a54:	f1 0b       	sbc	r31, r17
    1a56:	ea 5f       	subi	r30, 0xFA	; 250
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	50 81       	ld	r21, Z
    1a5c:	51 70       	andi	r21, 0x01	; 1
    1a5e:	45 2b       	or	r20, r21
					switch (mute_state) {
    1a60:	41 30       	cpi	r20, 0x01	; 1
    1a62:	21 f1       	breq	.+72     	; 0x1aac <check_inst_switches+0x18c>
    1a64:	30 f0       	brcs	.+12     	; 0x1a72 <check_inst_switches+0x152>
    1a66:	42 30       	cpi	r20, 0x02	; 2
    1a68:	f1 f1       	breq	.+124    	; 0x1ae6 <check_inst_switches+0x1c6>
    1a6a:	43 30       	cpi	r20, 0x03	; 3
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <check_inst_switches+0x150>
    1a6e:	58 c0       	rjmp	.+176    	; 0x1b20 <check_inst_switches+0x200>
    1a70:	a7 c0       	rjmp	.+334    	; 0x1bc0 <check_inst_switches+0x2a0>
						
						case 0:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    1a72:	fc 01       	movw	r30, r24
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	e8 1b       	sub	r30, r24
    1a82:	f9 0b       	sbc	r31, r25
    1a84:	ea 5f       	subi	r30, 0xFA	; 250
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	80 81       	ld	r24, Z
    1a8a:	81 60       	ori	r24, 0x01	; 1
    1a8c:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;
    1a8e:	f9 01       	movw	r30, r18
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	e2 1b       	sub	r30, r18
    1a9e:	f3 0b       	sbc	r31, r19
    1aa0:	ea 5f       	subi	r30, 0xFA	; 250
    1aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8e 7f       	andi	r24, 0xFE	; 254
    1aa8:	80 83       	st	Z, r24
						break;
    1aaa:	8a c0       	rjmp	.+276    	; 0x1bc0 <check_inst_switches+0x2a0>
						
						case 1:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    1aac:	fc 01       	movw	r30, r24
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	e8 1b       	sub	r30, r24
    1abc:	f9 0b       	sbc	r31, r25
    1abe:	ea 5f       	subi	r30, 0xFA	; 250
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8e 7f       	andi	r24, 0xFE	; 254
    1ac6:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;									
    1ac8:	f9 01       	movw	r30, r18
    1aca:	ee 0f       	add	r30, r30
    1acc:	ff 1f       	adc	r31, r31
    1ace:	ee 0f       	add	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	e2 1b       	sub	r30, r18
    1ad8:	f3 0b       	sbc	r31, r19
    1ada:	ea 5f       	subi	r30, 0xFA	; 250
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	80 81       	ld	r24, Z
    1ae0:	81 60       	ori	r24, 0x01	; 1
    1ae2:	80 83       	st	Z, r24
						break;
    1ae4:	6d c0       	rjmp	.+218    	; 0x1bc0 <check_inst_switches+0x2a0>
						
						case 2:
							drum_hit[i - INST_BD_2_SW].muted = 1;
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	e8 1b       	sub	r30, r24
    1af6:	f9 0b       	sbc	r31, r25
    1af8:	ea 5f       	subi	r30, 0xFA	; 250
    1afa:	fe 4f       	sbci	r31, 0xFE	; 254
    1afc:	80 81       	ld	r24, Z
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 1;						
    1b02:	f9 01       	movw	r30, r18
    1b04:	ee 0f       	add	r30, r30
    1b06:	ff 1f       	adc	r31, r31
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	e2 1b       	sub	r30, r18
    1b12:	f3 0b       	sbc	r31, r19
    1b14:	ea 5f       	subi	r30, 0xFA	; 250
    1b16:	fe 4f       	sbci	r31, 0xFE	; 254
    1b18:	80 81       	ld	r24, Z
    1b1a:	81 60       	ori	r24, 0x01	; 1
    1b1c:	80 83       	st	Z, r24
						break;
    1b1e:	50 c0       	rjmp	.+160    	; 0x1bc0 <check_inst_switches+0x2a0>
						
						case 3:
							drum_hit[i - INST_BD_2_SW].muted = 0;
    1b20:	fc 01       	movw	r30, r24
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	e8 1b       	sub	r30, r24
    1b30:	f9 0b       	sbc	r31, r25
    1b32:	ea 5f       	subi	r30, 0xFA	; 250
    1b34:	fe 4f       	sbci	r31, 0xFE	; 254
    1b36:	80 81       	ld	r24, Z
    1b38:	8e 7f       	andi	r24, 0xFE	; 254
    1b3a:	80 83       	st	Z, r24
							drum_hit[i - INST_BD_2_SW + 9].muted = 0;						
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	ee 0f       	add	r30, r30
    1b48:	ff 1f       	adc	r31, r31
    1b4a:	e2 1b       	sub	r30, r18
    1b4c:	f3 0b       	sbc	r31, r19
    1b4e:	ea 5f       	subi	r30, 0xFA	; 250
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	80 81       	ld	r24, Z
    1b54:	8e 7f       	andi	r24, 0xFE	; 254
    1b56:	80 83       	st	Z, r24
						break;
    1b58:	33 c0       	rjmp	.+102    	; 0x1bc0 <check_inst_switches+0x2a0>
						
					}
					
				} else {
					
						drum_hit[i - INST_BD_2_SW].muted ^= 1<<0; //toggle drum mute
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	e0 1b       	sub	r30, r16
    1b6a:	f1 0b       	sbc	r31, r17
    1b6c:	ea 5f       	subi	r30, 0xFA	; 250
    1b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b70:	80 81       	ld	r24, Z
    1b72:	98 2f       	mov	r25, r24
    1b74:	91 70       	andi	r25, 0x01	; 1
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	92 27       	eor	r25, r18
    1b7a:	90 fb       	bst	r25, 0
    1b7c:	80 f9       	bld	r24, 0
    1b7e:	80 83       	st	Z, r24
    1b80:	1f c0       	rjmp	.+62     	; 0x1bc0 <check_inst_switches+0x2a0>
					
				}
				
			} else {	
			
				turn_off_all_inst_leds(); 
    1b82:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <turn_off_all_inst_leds>
			
			
				if(drum_hit[i - INST_BD_2_SW].switch_bit != NO_SWITCH) { // need to handle instrument toggle here
    1b86:	f5 01       	movw	r30, r10
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8c:	59 f0       	breq	.+22     	; 0x1ba4 <check_inst_switches+0x284>
				
				
					if (sequencer.current_inst == i - INST_BD_2_SW) {
    1b8e:	f2 01       	movw	r30, r4
    1b90:	80 81       	ld	r24, Z
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	08 17       	cp	r16, r24
    1b96:	19 07       	cpc	r17, r25
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <check_inst_switches+0x27e>
						//alternative drum hits are offset by 9 places in drum_hit array
						sequencer.current_inst = i - INST_BD_2_SW + 9;
    1b9a:	c0 82       	st	Z, r12
    1b9c:	11 c0       	rjmp	.+34     	; 0x1bc0 <check_inst_switches+0x2a0>
					
					} else {			
						sequencer.current_inst = i - INST_BD_2_SW;
    1b9e:	f2 01       	movw	r30, r4
    1ba0:	00 83       	st	Z, r16
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <check_inst_switches+0x2a0>
					}
				
				
				} else {
				
					if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1ba4:	f2 01       	movw	r30, r4
    1ba6:	80 81       	ld	r24, Z
    1ba8:	86 30       	cpi	r24, 0x06	; 6
    1baa:	41 f4       	brne	.+16     	; 0x1bbc <check_inst_switches+0x29c>
    1bac:	f7 e1       	ldi	r31, 0x17	; 23
    1bae:	2f 16       	cp	r2, r31
    1bb0:	31 04       	cpc	r3, r1
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <check_inst_switches+0x29c>

						sequencer.current_inst = MA;
    1bb4:	2f e0       	ldi	r18, 0x0F	; 15
    1bb6:	f2 01       	movw	r30, r4
    1bb8:	20 83       	st	Z, r18
    1bba:	00 cf       	rjmp	.-512    	; 0x19bc <check_inst_switches+0x9c>
					
					} else {
					
						sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1bbc:	f2 01       	movw	r30, r4
    1bbe:	00 83       	st	Z, r16
			sequencer.current_inst = AC;
		}
		return;
	}
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1bc0:	fc e1       	ldi	r31, 0x1C	; 28
    1bc2:	ef 16       	cp	r14, r31
    1bc4:	f1 04       	cpc	r15, r1
    1bc6:	0c f4       	brge	.+2      	; 0x1bca <check_inst_switches+0x2aa>
    1bc8:	f9 ce       	rjmp	.-526    	; 0x19bc <check_inst_switches+0x9c>
    1bca:	28 c0       	rjmp	.+80     	; 0x1c1c <check_inst_switches+0x2fc>
			
			if (sequencer.SHIFT) {
				
				if (drum_hit[i-INST_BD_2_SW].switch_bit != NO_SWITCH || (i - INST_BD_2_SW == CP)) { //need to handle toggling between instrument
					//maybe evaluate the two drum states as 00, 01, 10, 11 and then use switch case
					uint8_t mute_state = (drum_hit[i - INST_BD_2_SW].muted) | (drum_hit[i - INST_BD_2_SW + 9].muted << 1);
    1bcc:	96 01       	movw	r18, r12
    1bce:	47 e0       	ldi	r20, 0x07	; 7
    1bd0:	4c 9d       	mul	r20, r12
    1bd2:	f0 01       	movw	r30, r0
    1bd4:	4d 9d       	mul	r20, r13
    1bd6:	f0 0d       	add	r31, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	ea 5f       	subi	r30, 0xFA	; 250
    1bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bde:	40 81       	ld	r20, Z
    1be0:	41 70       	andi	r20, 0x01	; 1
    1be2:	49 83       	std	Y+1, r20	; 0x01
    1be4:	1a 82       	std	Y+2, r1	; 0x02
    1be6:	49 81       	ldd	r20, Y+1	; 0x01
    1be8:	5a 81       	ldd	r21, Y+2	; 0x02
    1bea:	44 0f       	add	r20, r20
    1bec:	55 1f       	adc	r21, r21
    1bee:	67 e0       	ldi	r22, 0x07	; 7
    1bf0:	60 9f       	mul	r22, r16
    1bf2:	f0 01       	movw	r30, r0
    1bf4:	61 9f       	mul	r22, r17
    1bf6:	f0 0d       	add	r31, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	ea 5f       	subi	r30, 0xFA	; 250
    1bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfe:	50 81       	ld	r21, Z
    1c00:	51 70       	andi	r21, 0x01	; 1
    1c02:	45 2b       	or	r20, r21
					switch (mute_state) {
    1c04:	41 30       	cpi	r20, 0x01	; 1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <check_inst_switches+0x2ea>
    1c08:	51 cf       	rjmp	.-350    	; 0x1aac <check_inst_switches+0x18c>
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <check_inst_switches+0x2ee>
    1c0c:	32 cf       	rjmp	.-412    	; 0x1a72 <check_inst_switches+0x152>
    1c0e:	42 30       	cpi	r20, 0x02	; 2
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <check_inst_switches+0x2f4>
    1c12:	69 cf       	rjmp	.-302    	; 0x1ae6 <check_inst_switches+0x1c6>
    1c14:	43 30       	cpi	r20, 0x03	; 3
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <check_inst_switches+0x2fa>
    1c18:	83 cf       	rjmp	.-250    	; 0x1b20 <check_inst_switches+0x200>
    1c1a:	d0 ce       	rjmp	.-608    	; 0x19bc <check_inst_switches+0x9c>
		
	}
	

	
}	
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	9f 90       	pop	r9
    1c3a:	8f 90       	pop	r8
    1c3c:	7f 90       	pop	r7
    1c3e:	6f 90       	pop	r6
    1c40:	5f 90       	pop	r5
    1c42:	4f 90       	pop	r4
    1c44:	3f 90       	pop	r3
    1c46:	2f 90       	pop	r2
    1c48:	08 95       	ret

00001c4a <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    1c4a:	80 91 65 02 	lds	r24, 0x0265
    1c4e:	86 ff       	sbrs	r24, 6
    1c50:	29 c0       	rjmp	.+82     	; 0x1ca4 <check_variation_switches+0x5a>
    1c52:	90 91 47 04 	lds	r25, 0x0447
    1c56:	90 fd       	sbrc	r25, 0
    1c58:	25 c0       	rjmp	.+74     	; 0x1ca4 <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    1c5a:	e5 e6       	ldi	r30, 0x65	; 101
    1c5c:	f2 e0       	ldi	r31, 0x02	; 2
    1c5e:	8f 7b       	andi	r24, 0xBF	; 191
    1c60:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    1c62:	e5 e1       	ldi	r30, 0x15	; 21
    1c64:	f5 e0       	ldi	r31, 0x05	; 5
    1c66:	80 81       	ld	r24, Z
    1c68:	8f 5f       	subi	r24, 0xFF	; 255
    1c6a:	80 83       	st	Z, r24
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	29 f4       	brne	.+10     	; 0x1c7a <check_variation_switches+0x30>
    1c70:	10 92 15 05 	sts	0x0515, r1
		if (sequencer.START) {
    1c74:	91 ff       	sbrs	r25, 1
    1c76:	0b c0       	rjmp	.+22     	; 0x1c8e <check_variation_switches+0x44>
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <check_variation_switches+0x34>
    1c7a:	91 ff       	sbrs	r25, 1
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    1c7e:	80 91 92 02 	lds	r24, 0x0292
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	80 93 92 02 	sts	0x0292, r24
    1c88:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1c8a:	8d 7f       	andi	r24, 0xFD	; 253
    1c8c:	31 f4       	brne	.+12     	; 0x1c9a <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1c8e:	e4 e1       	ldi	r30, 0x14	; 20
    1c90:	f5 e0       	ldi	r31, 0x05	; 5
    1c92:	80 81       	ld	r24, Z
    1c94:	8e 7f       	andi	r24, 0xFE	; 254
    1c96:	80 83       	st	Z, r24
    1c98:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1c9a:	e4 e1       	ldi	r30, 0x14	; 20
    1c9c:	f5 e0       	ldi	r31, 0x05	; 5
    1c9e:	80 81       	ld	r24, Z
    1ca0:	81 60       	ori	r24, 0x01	; 1
    1ca2:	80 83       	st	Z, r24
    1ca4:	08 95       	ret

00001ca6 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1ca6:	ef 92       	push	r14
    1ca8:	ff 92       	push	r15
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1cb2:	80 91 47 04 	lds	r24, 0x0447
    1cb6:	86 70       	andi	r24, 0x06	; 6
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <check_clear_switch+0x18>
    1cbc:	43 c0       	rjmp	.+134    	; 0x1d44 <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    1cbe:	80 91 45 04 	lds	r24, 0x0445
    1cc2:	81 11       	cpse	r24, r1
    1cc4:	46 c0       	rjmp	.+140    	; 0x1d52 <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    1cc6:	8c e1       	ldi	r24, 0x1C	; 28
    1cc8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1ccc:	e4 e1       	ldi	r30, 0x14	; 20
    1cce:	f5 e0       	ldi	r31, 0x05	; 5
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 fb       	bst	r24, 0
    1cd4:	ee 24       	eor	r14, r14
    1cd6:	e0 f8       	bld	r14, 0
    1cd8:	f1 2c       	mov	r15, r1
    1cda:	26 e6       	ldi	r18, 0x66	; 102
    1cdc:	2e 9d       	mul	r18, r14
    1cde:	d0 01       	movw	r26, r0
    1ce0:	2f 9d       	mul	r18, r15
    1ce2:	b0 0d       	add	r27, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	a8 5b       	subi	r26, 0xB8	; 184
    1ce8:	bb 4f       	sbci	r27, 0xFB	; 251
    1cea:	80 e4       	ldi	r24, 0x40	; 64
    1cec:	ed 01       	movw	r28, r26
    1cee:	19 92       	st	Y+, r1
    1cf0:	8a 95       	dec	r24
    1cf2:	e9 f7       	brne	.-6      	; 0x1cee <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    1cf4:	80 81       	ld	r24, Z
    1cf6:	08 2f       	mov	r16, r24
    1cf8:	01 70       	andi	r16, 0x01	; 1
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	20 9f       	mul	r18, r16
    1cfe:	d0 01       	movw	r26, r0
    1d00:	21 9f       	mul	r18, r17
    1d02:	b0 0d       	add	r27, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	a4 57       	subi	r26, 0x74	; 116
    1d08:	bb 4f       	sbci	r27, 0xFB	; 251
    1d0a:	82 e2       	ldi	r24, 0x22	; 34
    1d0c:	ed 01       	movw	r28, r26
    1d0e:	19 92       	st	Y+, r1
    1d10:	8a 95       	dec	r24
    1d12:	e9 f7       	brne	.-6      	; 0x1d0e <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    1d14:	80 81       	ld	r24, Z
    1d16:	81 70       	andi	r24, 0x01	; 1
    1d18:	c8 2f       	mov	r28, r24
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	d8 2f       	mov	r29, r24
    1d1e:	2c 9f       	mul	r18, r28
    1d20:	c0 01       	movw	r24, r0
    1d22:	2d 9f       	mul	r18, r29
    1d24:	90 0d       	add	r25, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	8b 5b       	subi	r24, 0xBB	; 187
    1d2a:	9b 4f       	sbci	r25, 0xFB	; 251
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	ed 5b       	subi	r30, 0xBD	; 189
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	11 82       	std	Z+1, r1	; 0x01
    1d34:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    1d36:	32 96       	adiw	r30, 0x02	; 2
    1d38:	11 82       	std	Z+1, r1	; 0x01
    1d3a:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    1d3c:	80 e1       	ldi	r24, 0x10	; 16
    1d3e:	80 93 17 05 	sts	0x0517, r24
				break;
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    1d44:	80 91 45 04 	lds	r24, 0x0445
    1d48:	81 11       	cpse	r24, r1
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    1d4c:	8c e1       	ldi	r24, 0x1C	; 28
    1d4e:	0e 94 98 03 	call	0x730	; 0x730 <turn_on>
		}
		
	}
	
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	08 95       	ret

00001d60 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1d60:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1d62:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1d64:	74 83       	std	Z+4, r23	; 0x04
    1d66:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1d68:	11 82       	std	Z+1, r1	; 0x01
    1d6a:	10 82       	st	Z, r1
    1d6c:	08 95       	ret

00001d6e <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	ec 01       	movw	r28, r24
    1d7a:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1d7c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <store_and_clear_interrupt>
    1d80:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1d82:	f9 80       	ldd	r15, Y+1	; 0x01
    1d84:	4f 2d       	mov	r20, r15
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	ca 01       	movw	r24, r20
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8e:	62 2f       	mov	r22, r18
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	0e 94 07 12 	call	0x240e	; 0x240e <__divmodhi4>
    1d96:	28 81       	ld	r18, Y
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	82 17       	cp	r24, r18
    1d9c:	93 07       	cpc	r25, r19
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1da0:	81 2f       	mov	r24, r17
    1da2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <restore_interrupt_setting>
      return false;
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	12 c0       	rjmp	.+36     	; 0x1dce <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1daa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dac:	fc 81       	ldd	r31, Y+4	; 0x04
    1dae:	ef 0d       	add	r30, r15
    1db0:	f1 1d       	adc	r31, r1
    1db2:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1db4:	29 81       	ldd	r18, Y+1	; 0x01
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	c9 01       	movw	r24, r18
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	6a 81       	ldd	r22, Y+2	; 0x02
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	0e 94 07 12 	call	0x240e	; 0x240e <__divmodhi4>
    1dc4:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1dc6:	81 2f       	mov	r24, r17
    1dc8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <restore_interrupt_setting>
      return true;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	08 95       	ret

00001dda <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1de0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1de4:	39 81       	ldd	r19, Y+1	; 0x01
    1de6:	28 81       	ld	r18, Y
    1de8:	32 17       	cp	r19, r18
    1dea:	18 f0       	brcs	.+6      	; 0x1df2 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1dec:	c3 2f       	mov	r28, r19
    1dee:	c2 1b       	sub	r28, r18
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <bytequeue_length+0x20>
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	c3 2f       	mov	r28, r19
    1df6:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1df8:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1dfa:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <restore_interrupt_setting>
   return len;
}
    1dfe:	8c 2f       	mov	r24, r28
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1e06:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1e08:	80 81       	ld	r24, Z
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	28 0f       	add	r18, r24
    1e10:	31 1d       	adc	r19, r1
    1e12:	c9 01       	movw	r24, r18
    1e14:	62 81       	ldd	r22, Z+2	; 0x02
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	0e 94 07 12 	call	0x240e	; 0x240e <__divmodhi4>
    1e1c:	03 80       	ldd	r0, Z+3	; 0x03
    1e1e:	f4 81       	ldd	r31, Z+4	; 0x04
    1e20:	e0 2d       	mov	r30, r0
    1e22:	e8 0f       	add	r30, r24
    1e24:	f9 1f       	adc	r31, r25
}
    1e26:	80 81       	ld	r24, Z
    1e28:	08 95       	ret

00001e2a <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1e34:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <store_and_clear_interrupt>
    1e38:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1e3a:	88 81       	ld	r24, Y
    1e3c:	21 2f       	mov	r18, r17
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	b9 01       	movw	r22, r18
    1e42:	68 0f       	add	r22, r24
    1e44:	71 1d       	adc	r23, r1
    1e46:	cb 01       	movw	r24, r22
    1e48:	6a 81       	ldd	r22, Y+2	; 0x02
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	0e 94 07 12 	call	0x240e	; 0x240e <__divmodhi4>
    1e50:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1e52:	84 2f       	mov	r24, r20
    1e54:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <restore_interrupt_setting>
}
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	08 95       	ret

00001e60 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1e60:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1e62:	f8 94       	cli
   return sreg;
}
    1e64:	08 95       	ret

00001e66 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1e66:	8f bf       	out	0x3f, r24	; 63
    1e68:	08 95       	ret

00001e6a <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	88 27       	eor	r24, r24
    1e6e:	88 1f       	adc	r24, r24
    1e70:	08 95       	ret

00001e72 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	88 3f       	cpi	r24, 0xF8	; 248
    1e76:	08 f4       	brcc	.+2      	; 0x1e7a <midi_is_realtime+0x8>
    1e78:	90 e0       	ldi	r25, 0x00	; 0
}
    1e7a:	89 2f       	mov	r24, r25
    1e7c:	08 95       	ret

00001e7e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1e7e:	98 2f       	mov	r25, r24
    1e80:	90 7f       	andi	r25, 0xF0	; 240
    1e82:	90 3c       	cpi	r25, 0xC0	; 192
    1e84:	b1 f0       	breq	.+44     	; 0x1eb2 <midi_packet_length+0x34>
    1e86:	58 f4       	brcc	.+22     	; 0x1e9e <midi_packet_length+0x20>
    1e88:	90 39       	cpi	r25, 0x90	; 144
    1e8a:	41 f1       	breq	.+80     	; 0x1edc <midi_packet_length+0x5e>
    1e8c:	18 f4       	brcc	.+6      	; 0x1e94 <midi_packet_length+0x16>
    1e8e:	90 38       	cpi	r25, 0x80	; 128
    1e90:	19 f5       	brne	.+70     	; 0x1ed8 <midi_packet_length+0x5a>
    1e92:	24 c0       	rjmp	.+72     	; 0x1edc <midi_packet_length+0x5e>
    1e94:	90 3a       	cpi	r25, 0xA0	; 160
    1e96:	11 f1       	breq	.+68     	; 0x1edc <midi_packet_length+0x5e>
    1e98:	90 3b       	cpi	r25, 0xB0	; 176
    1e9a:	f1 f4       	brne	.+60     	; 0x1ed8 <midi_packet_length+0x5a>
    1e9c:	1f c0       	rjmp	.+62     	; 0x1edc <midi_packet_length+0x5e>
    1e9e:	90 3e       	cpi	r25, 0xE0	; 224
    1ea0:	e9 f0       	breq	.+58     	; 0x1edc <midi_packet_length+0x5e>
    1ea2:	18 f4       	brcc	.+6      	; 0x1eaa <midi_packet_length+0x2c>
    1ea4:	90 3d       	cpi	r25, 0xD0	; 208
    1ea6:	29 f0       	breq	.+10     	; 0x1eb2 <midi_packet_length+0x34>
    1ea8:	17 c0       	rjmp	.+46     	; 0x1ed8 <midi_packet_length+0x5a>
    1eaa:	90 3f       	cpi	r25, 0xF0	; 240
    1eac:	21 f0       	breq	.+8      	; 0x1eb6 <midi_packet_length+0x38>
    1eae:	93 3f       	cpi	r25, 0xF3	; 243
    1eb0:	99 f4       	brne	.+38     	; 0x1ed8 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	08 95       	ret
      case 0xF0:
         switch(status) {
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e1 5f       	subi	r30, 0xF1	; 241
    1ebc:	f1 09       	sbc	r31, r1
    1ebe:	ef 30       	cpi	r30, 0x0F	; 15
    1ec0:	f1 05       	cpc	r31, r1
    1ec2:	40 f4       	brcc	.+16     	; 0x1ed4 <midi_packet_length+0x56>
    1ec4:	e6 5a       	subi	r30, 0xA6	; 166
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1ee2:	08 95       	ret

00001ee4 <midi_send_clock>:
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}

void midi_send_clock(MidiDevice * device){
    1ee4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	ed 91       	ld	r30, X+
    1eea:	fc 91       	ld	r31, X
    1eec:	00 e0       	ldi	r16, 0x00	; 0
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	48 ef       	ldi	r20, 0xF8	; 248
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	09 95       	icall
}
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <midi_send_start>:

void midi_send_tick(MidiDevice * device){
   device->send_func(device, 1, MIDI_TICK, 0, 0);
}

void midi_send_start(MidiDevice * device){
    1efc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1efe:	dc 01       	movw	r26, r24
    1f00:	ed 91       	ld	r30, X+
    1f02:	fc 91       	ld	r31, X
    1f04:	00 e0       	ldi	r16, 0x00	; 0
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	09 95       	icall
}
    1f10:	0f 91       	pop	r16
    1f12:	08 95       	ret

00001f14 <midi_send_stop>:

void midi_send_continue(MidiDevice * device){
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
}

void midi_send_stop(MidiDevice * device){
    1f14:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1f16:	dc 01       	movw	r26, r24
    1f18:	ed 91       	ld	r30, X+
    1f1a:	fc 91       	ld	r31, X
    1f1c:	00 e0       	ldi	r16, 0x00	; 0
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	4c ef       	ldi	r20, 0xFC	; 252
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	09 95       	icall
}
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret

00001f2c <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	75 83       	std	Z+5, r23	; 0x05
    1f30:	64 83       	std	Z+4, r22	; 0x04
    1f32:	08 95       	ret

00001f34 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1f34:	fc 01       	movw	r30, r24
    1f36:	77 83       	std	Z+7, r23	; 0x07
    1f38:	66 83       	std	Z+6, r22	; 0x06
    1f3a:	08 95       	ret

00001f3c <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	77 8b       	std	Z+23, r23	; 0x17
    1f40:	66 8b       	std	Z+22, r22	; 0x16
    1f42:	08 95       	ret

00001f44 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1f4a:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1f4c:	1f a2       	std	Y+39, r1	; 0x27
    1f4e:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1f50:	bc 01       	movw	r22, r24
    1f52:	68 5d       	subi	r22, 0xD8	; 216
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	40 ec       	ldi	r20, 0xC0	; 192
    1f58:	88 51       	subi	r24, 0x18	; 24
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1f60:	1b 82       	std	Y+3, r1	; 0x03
    1f62:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1f64:	1d 82       	std	Y+5, r1	; 0x05
    1f66:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1f68:	1f 82       	std	Y+7, r1	; 0x07
    1f6a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1f6c:	19 86       	std	Y+9, r1	; 0x09
    1f6e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1f70:	1b 86       	std	Y+11, r1	; 0x0b
    1f72:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1f74:	1d 86       	std	Y+13, r1	; 0x0d
    1f76:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1f78:	1f 86       	std	Y+15, r1	; 0x0f
    1f7a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1f7c:	19 8a       	std	Y+17, r1	; 0x11
    1f7e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1f80:	1b 8a       	std	Y+19, r1	; 0x13
    1f82:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1f84:	1d 8a       	std	Y+21, r1	; 0x15
    1f86:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1f88:	1f 8a       	std	Y+23, r1	; 0x17
    1f8a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1f8c:	19 8e       	std	Y+25, r1	; 0x19
    1f8e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1f90:	1b 8e       	std	Y+27, r1	; 0x1b
    1f92:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1f94:	1d 8e       	std	Y+29, r1	; 0x1d
    1f96:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1f98:	1f 8e       	std	Y+31, r1	; 0x1f
    1f9a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1f9c:	19 a2       	std	Y+33, r1	; 0x21
    1f9e:	18 a2       	std	Y+32, r1	; 0x20
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret

00001fa6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1fb2:	66 23       	and	r22, r22
    1fb4:	99 f0       	breq	.+38     	; 0x1fdc <midi_device_input+0x36>
    1fb6:	ea 01       	movw	r28, r20
    1fb8:	61 50       	subi	r22, 0x01	; 1
    1fba:	06 2f       	mov	r16, r22
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
    1fbe:	0f 5f       	subi	r16, 0xFF	; 255
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	04 0f       	add	r16, r20
    1fc4:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1fc6:	7c 01       	movw	r14, r24
    1fc8:	28 ee       	ldi	r18, 0xE8	; 232
    1fca:	e2 0e       	add	r14, r18
    1fcc:	f1 1c       	adc	r15, r1
    1fce:	69 91       	ld	r22, Y+
    1fd0:	c7 01       	movw	r24, r14
    1fd2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1fd6:	c0 17       	cp	r28, r16
    1fd8:	d1 07       	cpc	r29, r17
    1fda:	c9 f7       	brne	.-14     	; 0x1fce <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	08 95       	ret

00001fea <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1fea:	fc 01       	movw	r30, r24
    1fec:	71 83       	std	Z+1, r23	; 0x01
    1fee:	60 83       	st	Z, r22
    1ff0:	08 95       	ret

00001ff2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	00 d0       	rcall	.+0      	; 0x2008 <midi_input_callbacks+0x16>
    2008:	1f 92       	push	r1
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	7c 01       	movw	r14, r24
    2010:	6b 01       	movw	r12, r22
    2012:	14 2f       	mov	r17, r20
    2014:	b2 2e       	mov	r11, r18
    2016:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2018:	dc 01       	movw	r26, r24
    201a:	95 96       	adiw	r26, 0x25	; 37
    201c:	8c 91       	ld	r24, X
    201e:	95 97       	sbiw	r26, 0x25	; 37
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	11 f5       	brne	.+68     	; 0x2068 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    2024:	5a 96       	adiw	r26, 0x1a	; 26
    2026:	ed 91       	ld	r30, X+
    2028:	fc 91       	ld	r31, X
    202a:	5b 97       	sbiw	r26, 0x1b	; 27
    202c:	30 97       	sbiw	r30, 0x00	; 0
    202e:	09 f4       	brne	.+2      	; 0x2032 <midi_input_callbacks+0x40>
    2030:	cc c0       	rjmp	.+408    	; 0x21ca <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2032:	9b 01       	movw	r18, r22
    2034:	21 50       	subi	r18, 0x01	; 1
    2036:	31 09       	sbc	r19, r1
    2038:	ab ea       	ldi	r26, 0xAB	; 171
    203a:	ba ea       	ldi	r27, 0xAA	; 170
    203c:	0e 94 21 12 	call	0x2442	; 0x2442 <__umulhisi3>
    2040:	96 95       	lsr	r25
    2042:	87 95       	ror	r24
    2044:	9c 01       	movw	r18, r24
    2046:	22 0f       	add	r18, r18
    2048:	33 1f       	adc	r19, r19
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    204e:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2050:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    2052:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2054:	4c 2d       	mov	r20, r12
    2056:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2058:	9e 01       	movw	r18, r28
    205a:	2f 5f       	subi	r18, 0xFF	; 255
    205c:	3f 4f       	sbci	r19, 0xFF	; 255
    205e:	68 2f       	mov	r22, r24
    2060:	79 2f       	mov	r23, r25
    2062:	c7 01       	movw	r24, r14
    2064:	09 95       	icall
    2066:	be c0       	rjmp	.+380    	; 0x21e4 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    2068:	62 30       	cpi	r22, 0x02	; 2
    206a:	71 05       	cpc	r23, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <midi_input_callbacks+0x7e>
    206e:	55 c0       	rjmp	.+170    	; 0x211a <midi_input_callbacks+0x128>
    2070:	63 30       	cpi	r22, 0x03	; 3
    2072:	71 05       	cpc	r23, r1
    2074:	29 f0       	breq	.+10     	; 0x2080 <midi_input_callbacks+0x8e>
    2076:	61 30       	cpi	r22, 0x01	; 1
    2078:	71 05       	cpc	r23, r1
    207a:	09 f0       	breq	.+2      	; 0x207e <midi_input_callbacks+0x8c>
    207c:	a1 c0       	rjmp	.+322    	; 0x21c0 <midi_input_callbacks+0x1ce>
    207e:	88 c0       	rjmp	.+272    	; 0x2190 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2080:	84 2f       	mov	r24, r20
    2082:	80 7f       	andi	r24, 0xF0	; 240
    2084:	80 3a       	cpi	r24, 0xA0	; 160
    2086:	f1 f0       	breq	.+60     	; 0x20c4 <midi_input_callbacks+0xd2>
    2088:	28 f4       	brcc	.+10     	; 0x2094 <midi_input_callbacks+0xa2>
    208a:	80 38       	cpi	r24, 0x80	; 128
    208c:	a9 f0       	breq	.+42     	; 0x20b8 <midi_input_callbacks+0xc6>
    208e:	80 39       	cpi	r24, 0x90	; 144
    2090:	69 f0       	breq	.+26     	; 0x20ac <midi_input_callbacks+0xba>
    2092:	2f c0       	rjmp	.+94     	; 0x20f2 <midi_input_callbacks+0x100>
    2094:	80 3e       	cpi	r24, 0xE0	; 224
    2096:	e1 f0       	breq	.+56     	; 0x20d0 <midi_input_callbacks+0xde>
    2098:	80 3f       	cpi	r24, 0xF0	; 240
    209a:	01 f1       	breq	.+64     	; 0x20dc <midi_input_callbacks+0xea>
    209c:	80 3b       	cpi	r24, 0xB0	; 176
    209e:	49 f5       	brne	.+82     	; 0x20f2 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    20a0:	d7 01       	movw	r26, r14
    20a2:	12 96       	adiw	r26, 0x02	; 2
    20a4:	ed 91       	ld	r30, X+
    20a6:	fc 91       	ld	r31, X
    20a8:	13 97       	sbiw	r26, 0x03	; 3
              break;
    20aa:	25 c0       	rjmp	.+74     	; 0x20f6 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    20ac:	d7 01       	movw	r26, r14
    20ae:	14 96       	adiw	r26, 0x04	; 4
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	15 97       	sbiw	r26, 0x05	; 5
              break;
    20b6:	1f c0       	rjmp	.+62     	; 0x20f6 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    20b8:	d7 01       	movw	r26, r14
    20ba:	16 96       	adiw	r26, 0x06	; 6
    20bc:	ed 91       	ld	r30, X+
    20be:	fc 91       	ld	r31, X
    20c0:	17 97       	sbiw	r26, 0x07	; 7
              break;
    20c2:	19 c0       	rjmp	.+50     	; 0x20f6 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    20c4:	d7 01       	movw	r26, r14
    20c6:	18 96       	adiw	r26, 0x08	; 8
    20c8:	ed 91       	ld	r30, X+
    20ca:	fc 91       	ld	r31, X
    20cc:	19 97       	sbiw	r26, 0x09	; 9
              break;
    20ce:	13 c0       	rjmp	.+38     	; 0x20f6 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    20d0:	d7 01       	movw	r26, r14
    20d2:	1a 96       	adiw	r26, 0x0a	; 10
    20d4:	ed 91       	ld	r30, X+
    20d6:	fc 91       	ld	r31, X
    20d8:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    20da:	0d c0       	rjmp	.+26     	; 0x20f6 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    20dc:	42 3f       	cpi	r20, 0xF2	; 242
    20de:	09 f0       	breq	.+2      	; 0x20e2 <midi_input_callbacks+0xf0>
    20e0:	74 c0       	rjmp	.+232    	; 0x21ca <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    20e2:	d7 01       	movw	r26, r14
    20e4:	1c 96       	adiw	r26, 0x0c	; 12
    20e6:	ed 91       	ld	r30, X+
    20e8:	fc 91       	ld	r31, X
    20ea:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    20ec:	30 97       	sbiw	r30, 0x00	; 0
    20ee:	41 f4       	brne	.+16     	; 0x2100 <midi_input_callbacks+0x10e>
    20f0:	6c c0       	rjmp	.+216    	; 0x21ca <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    20f2:	e0 e0       	ldi	r30, 0x00	; 0
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    20f6:	30 97       	sbiw	r30, 0x00	; 0
    20f8:	09 f4       	brne	.+2      	; 0x20fc <midi_input_callbacks+0x10a>
    20fa:	67 c0       	rjmp	.+206    	; 0x21ca <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    20fc:	12 3f       	cpi	r17, 0xF2	; 242
    20fe:	31 f4       	brne	.+12     	; 0x210c <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    2100:	2a 2d       	mov	r18, r10
    2102:	4b 2d       	mov	r20, r11
    2104:	62 ef       	ldi	r22, 0xF2	; 242
    2106:	c7 01       	movw	r24, r14
    2108:	09 95       	icall
    210a:	6c c0       	rjmp	.+216    	; 0x21e4 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    210c:	2a 2d       	mov	r18, r10
    210e:	4b 2d       	mov	r20, r11
    2110:	61 2f       	mov	r22, r17
    2112:	6f 70       	andi	r22, 0x0F	; 15
    2114:	c7 01       	movw	r24, r14
    2116:	09 95       	icall
    2118:	65 c0       	rjmp	.+202    	; 0x21e4 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    211a:	84 2f       	mov	r24, r20
    211c:	80 7f       	andi	r24, 0xF0	; 240
    211e:	80 3d       	cpi	r24, 0xD0	; 208
    2120:	51 f0       	breq	.+20     	; 0x2136 <midi_input_callbacks+0x144>
    2122:	80 3f       	cpi	r24, 0xF0	; 240
    2124:	71 f0       	breq	.+28     	; 0x2142 <midi_input_callbacks+0x150>
    2126:	80 3c       	cpi	r24, 0xC0	; 192
    2128:	01 f5       	brne	.+64     	; 0x216a <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    212a:	d7 01       	movw	r26, r14
    212c:	1e 96       	adiw	r26, 0x0e	; 14
    212e:	ed 91       	ld	r30, X+
    2130:	fc 91       	ld	r31, X
    2132:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2134:	1c c0       	rjmp	.+56     	; 0x216e <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2136:	d7 01       	movw	r26, r14
    2138:	50 96       	adiw	r26, 0x10	; 16
    213a:	ed 91       	ld	r30, X+
    213c:	fc 91       	ld	r31, X
    213e:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2140:	16 c0       	rjmp	.+44     	; 0x216e <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2142:	43 3f       	cpi	r20, 0xF3	; 243
    2144:	41 f4       	brne	.+16     	; 0x2156 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    2146:	d7 01       	movw	r26, r14
    2148:	52 96       	adiw	r26, 0x12	; 18
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	99 f4       	brne	.+38     	; 0x217a <midi_input_callbacks+0x188>
    2154:	3a c0       	rjmp	.+116    	; 0x21ca <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2156:	41 3f       	cpi	r20, 0xF1	; 241
    2158:	c1 f5       	brne	.+112    	; 0x21ca <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    215a:	d7 01       	movw	r26, r14
    215c:	54 96       	adiw	r26, 0x14	; 20
    215e:	ed 91       	ld	r30, X+
    2160:	fc 91       	ld	r31, X
    2162:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    2164:	30 97       	sbiw	r30, 0x00	; 0
    2166:	49 f4       	brne	.+18     	; 0x217a <midi_input_callbacks+0x188>
    2168:	30 c0       	rjmp	.+96     	; 0x21ca <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    216a:	e0 e0       	ldi	r30, 0x00	; 0
    216c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    216e:	30 97       	sbiw	r30, 0x00	; 0
    2170:	61 f1       	breq	.+88     	; 0x21ca <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2172:	81 2f       	mov	r24, r17
    2174:	8d 7f       	andi	r24, 0xFD	; 253
    2176:	81 3f       	cpi	r24, 0xF1	; 241
    2178:	29 f4       	brne	.+10     	; 0x2184 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    217a:	4b 2d       	mov	r20, r11
    217c:	61 2f       	mov	r22, r17
    217e:	c7 01       	movw	r24, r14
    2180:	09 95       	icall
    2182:	30 c0       	rjmp	.+96     	; 0x21e4 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    2184:	4b 2d       	mov	r20, r11
    2186:	61 2f       	mov	r22, r17
    2188:	6f 70       	andi	r22, 0x0F	; 15
    218a:	c7 01       	movw	r24, r14
    218c:	09 95       	icall
    218e:	2a c0       	rjmp	.+84     	; 0x21e4 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2190:	84 2f       	mov	r24, r20
    2192:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <midi_is_realtime>
    2196:	88 23       	and	r24, r24
    2198:	31 f0       	breq	.+12     	; 0x21a6 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    219a:	d7 01       	movw	r26, r14
    219c:	56 96       	adiw	r26, 0x16	; 22
    219e:	ed 91       	ld	r30, X+
    21a0:	fc 91       	ld	r31, X
    21a2:	57 97       	sbiw	r26, 0x17	; 23
    21a4:	07 c0       	rjmp	.+14     	; 0x21b4 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    21a6:	16 3f       	cpi	r17, 0xF6	; 246
    21a8:	81 f4       	brne	.+32     	; 0x21ca <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    21aa:	d7 01       	movw	r26, r14
    21ac:	58 96       	adiw	r26, 0x18	; 24
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    21b4:	30 97       	sbiw	r30, 0x00	; 0
    21b6:	49 f0       	breq	.+18     	; 0x21ca <midi_input_callbacks+0x1d8>
            func(device, byte0);
    21b8:	61 2f       	mov	r22, r17
    21ba:	c7 01       	movw	r24, r14
    21bc:	09 95       	icall
    21be:	12 c0       	rjmp	.+36     	; 0x21e4 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    21c0:	64 30       	cpi	r22, 0x04	; 4
    21c2:	71 05       	cpc	r23, r1
    21c4:	10 f0       	brcs	.+4      	; 0x21ca <midi_input_callbacks+0x1d8>
          cnt = 0;
    21c6:	c1 2c       	mov	r12, r1
    21c8:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    21ca:	d7 01       	movw	r26, r14
    21cc:	5c 96       	adiw	r26, 0x1c	; 28
    21ce:	ed 91       	ld	r30, X+
    21d0:	fc 91       	ld	r31, X
    21d2:	5d 97       	sbiw	r26, 0x1d	; 29
    21d4:	30 97       	sbiw	r30, 0x00	; 0
    21d6:	31 f0       	breq	.+12     	; 0x21e4 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    21d8:	0a 2d       	mov	r16, r10
    21da:	2b 2d       	mov	r18, r11
    21dc:	41 2f       	mov	r20, r17
    21de:	b6 01       	movw	r22, r12
    21e0:	c7 01       	movw	r24, r14
    21e2:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    21e4:	d7 01       	movw	r26, r14
    21e6:	5e 96       	adiw	r26, 0x1e	; 30
    21e8:	ed 91       	ld	r30, X+
    21ea:	fc 91       	ld	r31, X
    21ec:	5f 97       	sbiw	r26, 0x1f	; 31
    21ee:	30 97       	sbiw	r30, 0x00	; 0
    21f0:	31 f0       	breq	.+12     	; 0x21fe <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    21f2:	0a 2d       	mov	r16, r10
    21f4:	2b 2d       	mov	r18, r11
    21f6:	41 2f       	mov	r20, r17
    21f8:	b6 01       	movw	r22, r12
    21fa:	c7 01       	movw	r24, r14
    21fc:	09 95       	icall
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	df 90       	pop	r13
    2212:	cf 90       	pop	r12
    2214:	bf 90       	pop	r11
    2216:	af 90       	pop	r10
    2218:	08 95       	ret

0000221a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	ec 01       	movw	r28, r24
    2226:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    2228:	86 2f       	mov	r24, r22
    222a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <midi_is_realtime>
    222e:	88 23       	and	r24, r24
    2230:	69 f0       	breq	.+26     	; 0x224c <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    2232:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    2238:	00 e0       	ldi	r16, 0x00	; 0
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	41 2f       	mov	r20, r17
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	ce 01       	movw	r24, r28
    2244:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <midi_input_callbacks>
    device->input_state = state;
    2248:	fd a2       	std	Y+37, r15	; 0x25
    224a:	a4 c0       	rjmp	.+328    	; 0x2394 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    224c:	81 2f       	mov	r24, r17
    224e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <midi_is_statusbyte>
    2252:	88 23       	and	r24, r24
    2254:	09 f4       	brne	.+2      	; 0x2258 <midi_process_byte+0x3e>
    2256:	5d c0       	rjmp	.+186    	; 0x2312 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2258:	8d a1       	ldd	r24, Y+37	; 0x25
    225a:	84 30       	cpi	r24, 0x04	; 4
    225c:	29 f0       	breq	.+10     	; 0x2268 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    225e:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9f a3       	std	Y+39, r25	; 0x27
    2266:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    2268:	81 2f       	mov	r24, r17
    226a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <midi_packet_length>
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	31 f0       	breq	.+12     	; 0x227e <midi_process_byte+0x64>
    2272:	b8 f0       	brcs	.+46     	; 0x22a2 <midi_process_byte+0x88>
    2274:	82 30       	cpi	r24, 0x02	; 2
    2276:	79 f0       	breq	.+30     	; 0x2296 <midi_process_byte+0x7c>
    2278:	83 30       	cpi	r24, 0x03	; 3
    227a:	81 f0       	breq	.+32     	; 0x229c <midi_process_byte+0x82>
    227c:	46 c0       	rjmp	.+140    	; 0x230a <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    2282:	00 e0       	ldi	r16, 0x00	; 0
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	41 2f       	mov	r20, r17
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	ce 01       	movw	r24, r28
    228e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <midi_input_callbacks>
        device->input_state = IDLE;
    2292:	1d a2       	std	Y+37, r1	; 0x25
        break;
    2294:	7f c0       	rjmp	.+254    	; 0x2394 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	8d a3       	std	Y+37, r24	; 0x25
        break;
    229a:	7c c0       	rjmp	.+248    	; 0x2394 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	8d a3       	std	Y+37, r24	; 0x25
        break;
    22a0:	79 c0       	rjmp	.+242    	; 0x2394 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    22a2:	10 3f       	cpi	r17, 0xF0	; 240
    22a4:	19 f0       	breq	.+6      	; 0x22ac <midi_process_byte+0x92>
    22a6:	17 3f       	cpi	r17, 0xF7	; 247
    22a8:	51 f0       	breq	.+20     	; 0x22be <midi_process_byte+0xa4>
    22aa:	2b c0       	rjmp	.+86     	; 0x2302 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    22ac:	84 e0       	ldi	r24, 0x04	; 4
    22ae:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    22b0:	80 ef       	ldi	r24, 0xF0	; 240
    22b2:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9f a3       	std	Y+39, r25	; 0x27
    22ba:	8e a3       	std	Y+38, r24	; 0x26
            break;
    22bc:	6b c0       	rjmp	.+214    	; 0x2394 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    22be:	4e a1       	ldd	r20, Y+38	; 0x26
    22c0:	5f a1       	ldd	r21, Y+39	; 0x27
    22c2:	9a 01       	movw	r18, r20
    22c4:	ab ea       	ldi	r26, 0xAB	; 171
    22c6:	ba ea       	ldi	r27, 0xAA	; 170
    22c8:	0e 94 21 12 	call	0x2442	; 0x2442 <__umulhisi3>
    22cc:	96 95       	lsr	r25
    22ce:	87 95       	ror	r24
    22d0:	9c 01       	movw	r18, r24
    22d2:	22 0f       	add	r18, r18
    22d4:	33 1f       	adc	r19, r19
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	fa 01       	movw	r30, r20
    22dc:	e8 1b       	sub	r30, r24
    22de:	f9 0b       	sbc	r31, r25
    22e0:	ec 0f       	add	r30, r28
    22e2:	fd 1f       	adc	r31, r29
    22e4:	87 ef       	ldi	r24, 0xF7	; 247
    22e6:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    22e8:	ba 01       	movw	r22, r20
    22ea:	6f 5f       	subi	r22, 0xFF	; 255
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	7f a3       	std	Y+39, r23	; 0x27
    22f0:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    22f2:	0c a1       	ldd	r16, Y+36	; 0x24
    22f4:	2b a1       	ldd	r18, Y+35	; 0x23
    22f6:	4a a1       	ldd	r20, Y+34	; 0x22
    22f8:	ce 01       	movw	r24, r28
    22fa:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    22fe:	1d a2       	std	Y+37, r1	; 0x25
            break;
    2300:	49 c0       	rjmp	.+146    	; 0x2394 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    2302:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    2304:	1f a2       	std	Y+39, r1	; 0x27
    2306:	1e a2       	std	Y+38, r1	; 0x26
    2308:	45 c0       	rjmp	.+138    	; 0x2394 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    230a:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    230c:	1f a2       	std	Y+39, r1	; 0x27
    230e:	1e a2       	std	Y+38, r1	; 0x26
        break;
    2310:	41 c0       	rjmp	.+130    	; 0x2394 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    2312:	ed a1       	ldd	r30, Y+37	; 0x25
    2314:	ee 23       	and	r30, r30
    2316:	f1 f1       	breq	.+124    	; 0x2394 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    2318:	4e a1       	ldd	r20, Y+38	; 0x26
    231a:	5f a1       	ldd	r21, Y+39	; 0x27
    231c:	9a 01       	movw	r18, r20
    231e:	ab ea       	ldi	r26, 0xAB	; 171
    2320:	ba ea       	ldi	r27, 0xAA	; 170
    2322:	0e 94 21 12 	call	0x2442	; 0x2442 <__umulhisi3>
    2326:	96 95       	lsr	r25
    2328:	87 95       	ror	r24
    232a:	9c 01       	movw	r18, r24
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	9a 01       	movw	r18, r20
    2336:	28 1b       	sub	r18, r24
    2338:	39 0b       	sbc	r19, r25
    233a:	de 01       	movw	r26, r28
    233c:	a2 0f       	add	r26, r18
    233e:	b3 1f       	adc	r27, r19
    2340:	92 96       	adiw	r26, 0x22	; 34
    2342:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2344:	ba 01       	movw	r22, r20
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	7f a3       	std	Y+39, r23	; 0x27
    234c:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    234e:	21 30       	cpi	r18, 0x01	; 1
    2350:	31 05       	cpc	r19, r1
    2352:	89 f0       	breq	.+34     	; 0x2376 <midi_process_byte+0x15c>
    2354:	22 30       	cpi	r18, 0x02	; 2
    2356:	31 05       	cpc	r19, r1
    2358:	e9 f4       	brne	.+58     	; 0x2394 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    235a:	0c a1       	ldd	r16, Y+36	; 0x24
    235c:	2b a1       	ldd	r18, Y+35	; 0x23
    235e:	4a a1       	ldd	r20, Y+34	; 0x22
    2360:	ce 01       	movw	r24, r28
    2362:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2366:	8d a1       	ldd	r24, Y+37	; 0x25
    2368:	84 30       	cpi	r24, 0x04	; 4
    236a:	a1 f0       	breq	.+40     	; 0x2394 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9f a3       	std	Y+39, r25	; 0x27
    2372:	8e a3       	std	Y+38, r24	; 0x26
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2376:	e2 30       	cpi	r30, 0x02	; 2
    2378:	69 f4       	brne	.+26     	; 0x2394 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    237a:	00 e0       	ldi	r16, 0x00	; 0
    237c:	2b a1       	ldd	r18, Y+35	; 0x23
    237e:	4a a1       	ldd	r20, Y+34	; 0x22
    2380:	ce 01       	movw	r24, r28
    2382:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2386:	8d a1       	ldd	r24, Y+37	; 0x25
    2388:	84 30       	cpi	r24, 0x04	; 4
    238a:	21 f0       	breq	.+8      	; 0x2394 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9f a3       	std	Y+39, r25	; 0x27
    2392:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	08 95       	ret

000023a0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    23b2:	dc 01       	movw	r26, r24
    23b4:	90 96       	adiw	r26, 0x20	; 32
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	91 97       	sbiw	r26, 0x21	; 33
    23bc:	30 97       	sbiw	r30, 0x00	; 0
    23be:	09 f0       	breq	.+2      	; 0x23c2 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    23c0:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    23c2:	86 01       	movw	r16, r12
    23c4:	08 51       	subi	r16, 0x18	; 24
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	c8 01       	movw	r24, r16
    23ca:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    23ce:	e8 2e       	mov	r14, r24
    23d0:	f1 2c       	mov	r15, r1
    23d2:	e1 14       	cp	r14, r1
    23d4:	f1 04       	cpc	r15, r1
    23d6:	91 f0       	breq	.+36     	; 0x23fc <midi_device_process+0x5c>
    23d8:	c0 e0       	ldi	r28, 0x00	; 0
    23da:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	c8 01       	movw	r24, r16
    23e0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <bytequeue_get>
    23e4:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    23e6:	c6 01       	movw	r24, r12
    23e8:	0e 94 0d 11 	call	0x221a	; 0x221a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	c8 01       	movw	r24, r16
    23f0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    23f4:	21 96       	adiw	r28, 0x01	; 1
    23f6:	ce 15       	cp	r28, r14
    23f8:	df 05       	cpc	r29, r15
    23fa:	81 f7       	brne	.-32     	; 0x23dc <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	08 95       	ret

0000240e <__divmodhi4>:
    240e:	97 fb       	bst	r25, 7
    2410:	07 2e       	mov	r0, r23
    2412:	16 f4       	brtc	.+4      	; 0x2418 <__divmodhi4+0xa>
    2414:	00 94       	com	r0
    2416:	07 d0       	rcall	.+14     	; 0x2426 <__divmodhi4_neg1>
    2418:	77 fd       	sbrc	r23, 7
    241a:	09 d0       	rcall	.+18     	; 0x242e <__divmodhi4_neg2>
    241c:	0e 94 30 12 	call	0x2460	; 0x2460 <__udivmodhi4>
    2420:	07 fc       	sbrc	r0, 7
    2422:	05 d0       	rcall	.+10     	; 0x242e <__divmodhi4_neg2>
    2424:	3e f4       	brtc	.+14     	; 0x2434 <__divmodhi4_exit>

00002426 <__divmodhi4_neg1>:
    2426:	90 95       	com	r25
    2428:	81 95       	neg	r24
    242a:	9f 4f       	sbci	r25, 0xFF	; 255
    242c:	08 95       	ret

0000242e <__divmodhi4_neg2>:
    242e:	70 95       	com	r23
    2430:	61 95       	neg	r22
    2432:	7f 4f       	sbci	r23, 0xFF	; 255

00002434 <__divmodhi4_exit>:
    2434:	08 95       	ret

00002436 <__tablejump2__>:
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	05 90       	lpm	r0, Z+
    243c:	f4 91       	lpm	r31, Z
    243e:	e0 2d       	mov	r30, r0
    2440:	09 94       	ijmp

00002442 <__umulhisi3>:
    2442:	a2 9f       	mul	r26, r18
    2444:	b0 01       	movw	r22, r0
    2446:	b3 9f       	mul	r27, r19
    2448:	c0 01       	movw	r24, r0
    244a:	a3 9f       	mul	r26, r19
    244c:	70 0d       	add	r23, r0
    244e:	81 1d       	adc	r24, r1
    2450:	11 24       	eor	r1, r1
    2452:	91 1d       	adc	r25, r1
    2454:	b2 9f       	mul	r27, r18
    2456:	70 0d       	add	r23, r0
    2458:	81 1d       	adc	r24, r1
    245a:	11 24       	eor	r1, r1
    245c:	91 1d       	adc	r25, r1
    245e:	08 95       	ret

00002460 <__udivmodhi4>:
    2460:	aa 1b       	sub	r26, r26
    2462:	bb 1b       	sub	r27, r27
    2464:	51 e1       	ldi	r21, 0x11	; 17
    2466:	07 c0       	rjmp	.+14     	; 0x2476 <__udivmodhi4_ep>

00002468 <__udivmodhi4_loop>:
    2468:	aa 1f       	adc	r26, r26
    246a:	bb 1f       	adc	r27, r27
    246c:	a6 17       	cp	r26, r22
    246e:	b7 07       	cpc	r27, r23
    2470:	10 f0       	brcs	.+4      	; 0x2476 <__udivmodhi4_ep>
    2472:	a6 1b       	sub	r26, r22
    2474:	b7 0b       	sbc	r27, r23

00002476 <__udivmodhi4_ep>:
    2476:	88 1f       	adc	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	5a 95       	dec	r21
    247c:	a9 f7       	brne	.-22     	; 0x2468 <__udivmodhi4_loop>
    247e:	80 95       	com	r24
    2480:	90 95       	com	r25
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	08 95       	ret

00002488 <_exit>:
    2488:	f8 94       	cli

0000248a <__stop_program>:
    248a:	ff cf       	rjmp	.-2      	; 0x248a <__stop_program>
