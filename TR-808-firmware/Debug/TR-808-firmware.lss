
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001ce2  00001d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  00800258  00800258  00001ece  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005356  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ac  00000000  00000000  000076be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b9  00000000  00000000  00008b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b40  00000000  00000000  0000a124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a4  00000000  00000000  0000ac64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002301  00000000  00000000  0000bd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0000e009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	bb 0b       	sbc	r27, r27
      b6:	b9 0b       	sbc	r27, r25
      b8:	bb 0b       	sbc	r27, r27
      ba:	bd 0b       	sbc	r27, r29
      bc:	bd 0b       	sbc	r27, r29
      be:	c3 0b       	sbc	r28, r19
      c0:	bd 0b       	sbc	r27, r29
      c2:	c3 0b       	sbc	r28, r19
      c4:	c3 0b       	sbc	r28, r19
      c6:	c3 0b       	sbc	r28, r19
      c8:	c3 0b       	sbc	r28, r19
      ca:	c3 0b       	sbc	r28, r19
      cc:	bd 0b       	sbc	r27, r29
      ce:	c3 0b       	sbc	r28, r19
      d0:	c3 0b       	sbc	r28, r19

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e2 ee       	ldi	r30, 0xE2	; 226
      e6:	fc e1       	ldi	r31, 0x1C	; 28
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ae 34       	cpi	r26, 0x4E	; 78
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <main>
     108:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	7f 92       	push	r7
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29

	clear_all_trigs();
     288:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     28c:	05 e0       	ldi	r16, 0x05	; 5
     28e:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     290:	c0 e0       	ldi	r28, 0x00	; 0
     292:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     294:	0f 2e       	mov	r0, r31
     296:	f9 e4       	ldi	r31, 0x49	; 73
     298:	8f 2e       	mov	r8, r31
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	9f 2e       	mov	r9, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fa e4       	ldi	r31, 0x4A	; 74
     2a4:	cf 2e       	mov	r12, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	df 2e       	mov	r13, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f6 e4       	ldi	r31, 0x46	; 70
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f7 e6       	ldi	r31, 0x67	; 103
     2bc:	7f 2e       	mov	r7, r31
     2be:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f8 e6       	ldi	r31, 0x68	; 104
     2c4:	af 2e       	mov	r10, r31
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2cc:	d4 01       	movw	r26, r8
     2ce:	ec 91       	ld	r30, X
     2d0:	8e 2f       	mov	r24, r30
     2d2:	82 95       	swap	r24
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	d6 01       	movw	r26, r12
     2d8:	ec 91       	ld	r30, X
     2da:	e1 70       	andi	r30, 0x01	; 1
     2dc:	e2 95       	swap	r30
     2de:	e0 7f       	andi	r30, 0xF0	; 240
     2e0:	e8 2b       	or	r30, r24
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	d7 01       	movw	r26, r14
     2e6:	8c 91       	ld	r24, X
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	81 70       	andi	r24, 0x01	; 1
     2ee:	78 9e       	mul	r7, r24
     2f0:	e0 0d       	add	r30, r0
     2f2:	f1 1d       	adc	r31, r1
     2f4:	11 24       	eor	r1, r1
     2f6:	ea 58       	subi	r30, 0x8A	; 138
     2f8:	fc 4f       	sbci	r31, 0xFC	; 252
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	0c 2e       	mov	r0, r28
     300:	02 c0       	rjmp	.+4      	; 0x306 <trigger_step+0x98>
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	0a 94       	dec	r0
     308:	e2 f7       	brpl	.-8      	; 0x302 <trigger_step+0x94>
     30a:	80 ff       	sbrs	r24, 0
     30c:	3a c0       	rjmp	.+116    	; 0x382 <trigger_step+0x114>
			turn_on(drum_hit[i].led_index);
     30e:	f8 01       	movw	r30, r16
     310:	80 81       	ld	r24, Z
     312:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     316:	de 01       	movw	r26, r28
     318:	aa 0f       	add	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	ac 0f       	add	r26, r28
     31e:	bd 1f       	adc	r27, r29
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	a0 50       	subi	r26, 0x00	; 0
     326:	bf 4f       	sbci	r27, 0xFF	; 255
     328:	ec 91       	ld	r30, X
     32a:	8e 2f       	mov	r24, r30
     32c:	88 1f       	adc	r24, r24
     32e:	88 27       	eor	r24, r24
     330:	88 1f       	adc	r24, r24
     332:	11 96       	adiw	r26, 0x01	; 1
     334:	ec 91       	ld	r30, X
     336:	e7 70       	andi	r30, 0x07	; 7
     338:	ee 0f       	add	r30, r30
     33a:	e8 2b       	or	r30, r24
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	e8 59       	subi	r30, 0x98	; 152
     340:	fd 4f       	sbci	r31, 0xFD	; 253
     342:	d8 01       	movw	r26, r16
     344:	13 97       	sbiw	r26, 0x03	; 3
     346:	9c 91       	ld	r25, X
     348:	80 81       	ld	r24, Z
     34a:	89 2b       	or	r24, r25
     34c:	80 83       	st	Z, r24
     34e:	f8 01       	movw	r30, r16
     350:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     352:	80 81       	ld	r24, Z
     354:	8f 3f       	cpi	r24, 0xFF	; 255
     356:	a9 f0       	breq	.+42     	; 0x382 <trigger_step+0x114>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     358:	d5 01       	movw	r26, r10
     35a:	13 96       	adiw	r26, 0x03	; 3
     35c:	2c 91       	ld	r18, X
     35e:	13 97       	sbiw	r26, 0x03	; 3
     360:	fe 01       	movw	r30, r28
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ec 0f       	add	r30, r28
     368:	fd 1f       	adc	r31, r29
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ec 5f       	subi	r30, 0xFC	; 252
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	90 81       	ld	r25, Z
     374:	91 70       	andi	r25, 0x01	; 1
     376:	91 95       	neg	r25
     378:	92 27       	eor	r25, r18
     37a:	89 23       	and	r24, r25
     37c:	82 27       	eor	r24, r18
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	0a 5f       	subi	r16, 0xFA	; 250
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	c0 31       	cpi	r28, 0x10	; 16
     38a:	d1 05       	cpc	r29, r1
     38c:	09 f0       	breq	.+2      	; 0x390 <trigger_step+0x122>
     38e:	9e cf       	rjmp	.-196    	; 0x2cc <trigger_step+0x5e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	08 95       	ret

000003ac <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3ac:	80 91 34 02 	lds	r24, 0x0234
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3b4:	e4 e3       	ldi	r30, 0x34	; 52
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	8f 7b       	andi	r24, 0xBF	; 191
     3ba:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3c4:	80 91 36 02 	lds	r24, 0x0236
     3c8:	86 ff       	sbrs	r24, 6
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3cc:	e6 e3       	ldi	r30, 0x36	; 54
     3ce:	f2 e0       	ldi	r31, 0x02	; 2
     3d0:	8f 7b       	andi	r24, 0xBF	; 191
     3d2:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     3dc:	80 91 38 02 	lds	r24, 0x0238
     3e0:	86 ff       	sbrs	r24, 6
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     3e4:	e8 e3       	ldi	r30, 0x38	; 56
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     3f4:	80 91 3a 02 	lds	r24, 0x023A
     3f8:	86 ff       	sbrs	r24, 6
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     3fc:	ea e3       	ldi	r30, 0x3A	; 58
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	8f 7b       	andi	r24, 0xBF	; 191
     402:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     40c:	80 91 3c 02 	lds	r24, 0x023C
     410:	86 ff       	sbrs	r24, 6
     412:	08 c0       	rjmp	.+16     	; 0x424 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     414:	ec e3       	ldi	r30, 0x3C	; 60
     416:	f2 e0       	ldi	r31, 0x02	; 2
     418:	8f 7b       	andi	r24, 0xBF	; 191
     41a:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     424:	80 91 3e 02 	lds	r24, 0x023E
     428:	86 ff       	sbrs	r24, 6
     42a:	08 c0       	rjmp	.+16     	; 0x43c <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     42c:	ee e3       	ldi	r30, 0x3E	; 62
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	8f 7b       	andi	r24, 0xBF	; 191
     432:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     43c:	80 91 40 02 	lds	r24, 0x0240
     440:	86 ff       	sbrs	r24, 6
     442:	08 c0       	rjmp	.+16     	; 0x454 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     444:	e0 e4       	ldi	r30, 0x40	; 64
     446:	f2 e0       	ldi	r31, 0x02	; 2
     448:	8f 7b       	andi	r24, 0xBF	; 191
     44a:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     454:	80 91 42 02 	lds	r24, 0x0242
     458:	86 ff       	sbrs	r24, 6
     45a:	08 c0       	rjmp	.+16     	; 0x46c <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     45c:	e2 e4       	ldi	r30, 0x42	; 66
     45e:	f2 e0       	ldi	r31, 0x02	; 2
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     46c:	80 91 44 02 	lds	r24, 0x0244
     470:	86 ff       	sbrs	r24, 6
     472:	08 c0       	rjmp	.+16     	; 0x484 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     474:	e4 e4       	ldi	r30, 0x44	; 68
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	8f 7b       	andi	r24, 0xBF	; 191
     47a:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     484:	80 91 46 02 	lds	r24, 0x0246
     488:	86 ff       	sbrs	r24, 6
     48a:	08 c0       	rjmp	.+16     	; 0x49c <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     48c:	e6 e4       	ldi	r30, 0x46	; 70
     48e:	f2 e0       	ldi	r31, 0x02	; 2
     490:	8f 7b       	andi	r24, 0xBF	; 191
     492:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	89 e0       	ldi	r24, 0x09	; 9
     498:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     49c:	80 91 48 02 	lds	r24, 0x0248
     4a0:	86 ff       	sbrs	r24, 6
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4a4:	e8 e4       	ldi	r30, 0x48	; 72
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	8f 7b       	andi	r24, 0xBF	; 191
     4aa:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	8a e0       	ldi	r24, 0x0A	; 10
     4b0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4b4:	08 95       	ret

000004b6 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4c6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4c8:	ee e6       	ldi	r30, 0x6E	; 110
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8d 7f       	andi	r24, 0xFD	; 253
     4d0:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     4d2:	80 91 75 03 	lds	r24, 0x0375
     4d6:	88 60       	ori	r24, 0x08	; 8
     4d8:	80 93 75 03 	sts	0x0375, r24
	
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	8f 91       	pop	r24
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     512:	e3 e7       	ldi	r30, 0x73	; 115
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	81 83       	std	Z+1, r24	; 0x01
     51c:	90 81       	ld	r25, Z
     51e:	89 13       	cpse	r24, r25
     520:	9c c0       	rjmp	.+312    	; 0x65a <__vector_11+0x16e>
	{
		flag.next_step = 1;
     522:	80 91 75 03 	lds	r24, 0x0375
     526:	81 60       	ori	r24, 0x01	; 1
     528:	80 93 75 03 	sts	0x0375, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     52c:	e5 e7       	ldi	r30, 0x75	; 117
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	80 81       	ld	r24, Z
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	98 0f       	add	r25, r24
     536:	93 70       	andi	r25, 0x03	; 3
     538:	8c 7f       	andi	r24, 0xFC	; 252
     53a:	89 2b       	or	r24, r25
     53c:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     53e:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == (sequencer.step_num_first + sequencer.step_num_second +1)) { //+1 because 15+15 = 30. BUT 0-15 + 0-15 = 32 steps so need to go from 0-31. brainfudge.
     542:	80 91 49 04 	lds	r24, 0x0449
     546:	98 2f       	mov	r25, r24
     548:	92 95       	swap	r25
     54a:	9f 70       	andi	r25, 0x0F	; 15
     54c:	80 91 4a 04 	lds	r24, 0x044A
     550:	81 70       	andi	r24, 0x01	; 1
     552:	82 95       	swap	r24
     554:	80 7f       	andi	r24, 0xF0	; 240
     556:	89 2b       	or	r24, r25
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	28 0f       	add	r18, r24
     55c:	2f 71       	andi	r18, 0x1F	; 31
     55e:	e8 e4       	ldi	r30, 0x48	; 72
     560:	f4 e0       	ldi	r31, 0x04	; 4
     562:	32 2f       	mov	r19, r18
     564:	32 95       	swap	r19
     566:	30 7f       	andi	r19, 0xF0	; 240
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	9f 70       	andi	r25, 0x0F	; 15
     56c:	93 2b       	or	r25, r19
     56e:	91 83       	std	Z+1, r25	; 0x01
     570:	32 2f       	mov	r19, r18
     572:	32 95       	swap	r19
     574:	3f 70       	andi	r19, 0x0F	; 15
     576:	92 81       	ldd	r25, Z+2	; 0x02
     578:	9e 7f       	andi	r25, 0xFE	; 254
     57a:	93 2b       	or	r25, r19
     57c:	92 83       	std	Z+2, r25	; 0x02
     57e:	30 81       	ld	r19, Z
     580:	43 2f       	mov	r20, r19
     582:	4f 70       	andi	r20, 0x0F	; 15
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	32 95       	swap	r19
     58a:	3f 70       	andi	r19, 0x0F	; 15
     58c:	ba 01       	movw	r22, r20
     58e:	63 0f       	add	r22, r19
     590:	71 1d       	adc	r23, r1
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	86 17       	cp	r24, r22
     598:	97 07       	cpc	r25, r23
     59a:	09 f0       	breq	.+2      	; 0x59e <__vector_11+0xb2>
     59c:	46 c0       	rjmp	.+140    	; 0x62a <__vector_11+0x13e>
			//maybe worth having 32 bit step_led mask? Extra 68 bytes, but more bitshifting. 
			flag.new_measure = 1;
     59e:	80 91 75 03 	lds	r24, 0x0375
     5a2:	80 62       	ori	r24, 0x20	; 32
     5a4:	80 93 75 03 	sts	0x0375, r24
			sequencer.current_step = 0;
     5a8:	ef 01       	movw	r28, r30
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	8f 70       	andi	r24, 0x0F	; 15
     5ae:	81 83       	std	Z+1, r24	; 0x01
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	82 83       	std	Z+2, r24	; 0x02
			turn_off(SECOND_PART_LED);
     5b6:	8b e2       	ldi	r24, 0x2B	; 43
     5b8:	0e 94 42 04 	call	0x884	; 0x884 <turn_off>
			turn_on(FIRST_PART_LED);
     5bc:	8a e2       	ldi	r24, 0x2A	; 42
     5be:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
			sequencer.part_num = FIRST;
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	8d 7f       	andi	r24, 0xFD	; 253
     5c6:	8a 83       	std	Y+2, r24	; 0x02
			update_step_led_mask();
     5c8:	0e 94 83 04 	call	0x906	; 0x906 <update_step_led_mask>
			//update step number
			//uint8_t old_step_num = sequencer.step_num_first;
			sequencer.step_num_first = sequencer.step_num_new; //temp test, will need to accommodate first and second part, maybe just by addition?
     5cc:	80 91 49 04 	lds	r24, 0x0449
     5d0:	98 2f       	mov	r25, r24
     5d2:	9f 70       	andi	r25, 0x0F	; 15
     5d4:	88 81       	ld	r24, Y
     5d6:	80 7f       	andi	r24, 0xF0	; 240
     5d8:	89 2b       	or	r24, r25
     5da:	88 83       	st	Y, r24
			//if (old_step_num != sequencer.step_num_first) update_step_led_mask();
			
			//handle variation
			if (flag.variation_change == 1) {
     5dc:	80 91 75 03 	lds	r24, 0x0375
     5e0:	82 ff       	sbrs	r24, 2
     5e2:	16 c0       	rjmp	.+44     	; 0x610 <__vector_11+0x124>
				flag.variation_change = 0;
     5e4:	8b 7f       	andi	r24, 0xFB	; 251
     5e6:	80 93 75 03 	sts	0x0375, r24
				switch (sequencer.variation_mode) {
     5ea:	80 91 47 04 	lds	r24, 0x0447
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	49 f0       	breq	.+18     	; 0x604 <__vector_11+0x118>
     5f2:	10 f0       	brcs	.+4      	; 0x5f8 <__vector_11+0x10c>
     5f4:	82 30       	cpi	r24, 0x02	; 2
     5f6:	89 f5       	brne	.+98     	; 0x65a <__vector_11+0x16e>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     5f8:	e6 e4       	ldi	r30, 0x46	; 70
     5fa:	f4 e0       	ldi	r31, 0x04	; 4
     5fc:	80 81       	ld	r24, Z
     5fe:	8e 7f       	andi	r24, 0xFE	; 254
     600:	80 83       	st	Z, r24
					break;
     602:	2b c0       	rjmp	.+86     	; 0x65a <__vector_11+0x16e>
				case VAR_B:
					sequencer.variation = VAR_B;
     604:	e6 e4       	ldi	r30, 0x46	; 70
     606:	f4 e0       	ldi	r31, 0x04	; 4
     608:	80 81       	ld	r24, Z
     60a:	81 60       	ori	r24, 0x01	; 1
     60c:	80 83       	st	Z, r24
					break;	
     60e:	25 c0       	rjmp	.+74     	; 0x65a <__vector_11+0x16e>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     610:	80 91 47 04 	lds	r24, 0x0447
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	09 f5       	brne	.+66     	; 0x65a <__vector_11+0x16e>
					
				sequencer.variation ^= 1<<0; //toggle state
     618:	e6 e4       	ldi	r30, 0x46	; 70
     61a:	f4 e0       	ldi	r31, 0x04	; 4
     61c:	80 81       	ld	r24, Z
     61e:	98 2f       	mov	r25, r24
     620:	90 95       	com	r25
     622:	90 fb       	bst	r25, 0
     624:	80 f9       	bld	r24, 0
     626:	80 83       	st	Z, r24
     628:	18 c0       	rjmp	.+48     	; 0x65a <__vector_11+0x16e>
			}
			//sequencer.current_measure++;
		} else if ((sequencer.current_step == sequencer.step_num_first +1) && sequencer.START) {
     62a:	82 2f       	mov	r24, r18
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	4f 5f       	subi	r20, 0xFF	; 255
     630:	5f 4f       	sbci	r21, 0xFF	; 255
     632:	84 17       	cp	r24, r20
     634:	95 07       	cpc	r25, r21
     636:	89 f4       	brne	.+34     	; 0x65a <__vector_11+0x16e>
     638:	80 91 77 03 	lds	r24, 0x0377
     63c:	81 ff       	sbrs	r24, 1
     63e:	0d c0       	rjmp	.+26     	; 0x65a <__vector_11+0x16e>
			//sequencer.step_num_second = sequencer.step_num_new; //this just makes each part the same number of steps - need to change it so second part can have independent number of steps
			turn_off(FIRST_PART_LED);
     640:	8a e2       	ldi	r24, 0x2A	; 42
     642:	0e 94 42 04 	call	0x884	; 0x884 <turn_off>
			turn_on(SECOND_PART_LED);
     646:	8b e2       	ldi	r24, 0x2B	; 43
     648:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
			sequencer.part_num = SECOND;
     64c:	e8 e4       	ldi	r30, 0x48	; 72
     64e:	f4 e0       	ldi	r31, 0x04	; 4
     650:	82 81       	ldd	r24, Z+2	; 0x02
     652:	82 60       	ori	r24, 0x02	; 2
     654:	82 83       	std	Z+2, r24	; 0x02
			update_step_led_mask();
     656:	0e 94 83 04 	call	0x906	; 0x906 <update_step_led_mask>
		
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     65a:	e3 e7       	ldi	r30, 0x73	; 115
     65c:	f2 e0       	ldi	r31, 0x02	; 2
     65e:	80 81       	ld	r24, Z
     660:	86 95       	lsr	r24
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	98 13       	cpse	r25, r24
     666:	dd c0       	rjmp	.+442    	; 0x822 <__vector_11+0x336>
		flag.half_step = 1;
     668:	80 91 75 03 	lds	r24, 0x0375
     66c:	82 60       	ori	r24, 0x02	; 2
     66e:	80 93 75 03 	sts	0x0375, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     672:	40 91 d3 01 	lds	r20, 0x01D3
     676:	30 91 d6 01 	lds	r19, 0x01D6
     67a:	e8 e6       	ldi	r30, 0x68	; 104
     67c:	f2 e0       	ldi	r31, 0x02	; 2
     67e:	83 2f       	mov	r24, r19
     680:	84 2b       	or	r24, r20
     682:	80 95       	com	r24
     684:	95 81       	ldd	r25, Z+5	; 0x05
     686:	89 23       	and	r24, r25
     688:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     68a:	80 91 77 03 	lds	r24, 0x0377
     68e:	81 ff       	sbrs	r24, 1
     690:	9a c0       	rjmp	.+308    	; 0x7c6 <__vector_11+0x2da>
			
			//if/else here is temporary hack while trying to sort out 2nd part behaviour. step_led_mask will be updated depending on which part is selected by mode selector
			//if ((sequencer.mode == SECOND_PART && sequencer.part_num == SECOND) || (sequencer.mode == FIRST_PART && sequencer.part_num == FIRST)) {
				spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     692:	cc e4       	ldi	r28, 0x4C	; 76
     694:	d4 e0       	ldi	r29, 0x04	; 4
     696:	e8 81       	ld	r30, Y
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	b2 96       	adiw	r30, 0x22	; 34
     69c:	80 91 46 04 	lds	r24, 0x0446
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	81 70       	andi	r24, 0x01	; 1
     6a6:	97 e6       	ldi	r25, 0x67	; 103
     6a8:	89 9f       	mul	r24, r25
     6aa:	e0 0d       	add	r30, r0
     6ac:	f1 1d       	adc	r31, r1
     6ae:	11 24       	eor	r1, r1
     6b0:	ea 58       	subi	r30, 0x8A	; 138
     6b2:	fc 4f       	sbci	r31, 0xFC	; 252
     6b4:	92 81       	ldd	r25, Z+2	; 0x02
     6b6:	83 81       	ldd	r24, Z+3	; 0x03
     6b8:	e8 e6       	ldi	r30, 0x68	; 104
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	91 83       	std	Z+1, r25	; 0x01
				spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     6be:	80 83       	st	Z, r24
				
			//	spi_data[1] = 0; 
			//	spi_data[0] = 0;
				
			//}
			turn_off_all_inst_leds();
     6c0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     6c4:	88 81       	ld	r24, Y
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	e0 50       	subi	r30, 0x00	; 0
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	85 81       	ldd	r24, Z+5	; 0x05
     6dc:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
								
			switch (sequencer.variation_mode) {
     6e0:	20 91 47 04 	lds	r18, 0x0447
     6e4:	21 30       	cpi	r18, 0x01	; 1
     6e6:	49 f0       	breq	.+18     	; 0x6fa <__vector_11+0x20e>
     6e8:	18 f0       	brcs	.+6      	; 0x6f0 <__vector_11+0x204>
     6ea:	22 30       	cpi	r18, 0x02	; 2
     6ec:	a1 f0       	breq	.+40     	; 0x716 <__vector_11+0x22a>
     6ee:	20 c0       	rjmp	.+64     	; 0x730 <__vector_11+0x244>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     6f0:	80 91 d3 01 	lds	r24, 0x01D3
     6f4:	80 93 4d 04 	sts	0x044D, r24
					break;					
     6f8:	1b c0       	rjmp	.+54     	; 0x730 <__vector_11+0x244>
				case VAR_B:
					if (flag.variation_change == 1) {
     6fa:	80 91 75 03 	lds	r24, 0x0375
     6fe:	82 ff       	sbrs	r24, 2
     700:	05 c0       	rjmp	.+10     	; 0x70c <__vector_11+0x220>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     702:	80 91 d3 01 	lds	r24, 0x01D3
     706:	80 93 4d 04 	sts	0x044D, r24
     70a:	12 c0       	rjmp	.+36     	; 0x730 <__vector_11+0x244>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     70c:	80 91 d6 01 	lds	r24, 0x01D6
     710:	80 93 4d 04 	sts	0x044D, r24
     714:	0d c0       	rjmp	.+26     	; 0x730 <__vector_11+0x244>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     716:	80 91 46 04 	lds	r24, 0x0446
     71a:	80 fd       	sbrc	r24, 0
     71c:	05 c0       	rjmp	.+10     	; 0x728 <__vector_11+0x23c>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     71e:	80 91 d3 01 	lds	r24, 0x01D3
     722:	80 93 4d 04 	sts	0x044D, r24
     726:	04 c0       	rjmp	.+8      	; 0x730 <__vector_11+0x244>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     728:	80 91 d6 01 	lds	r24, 0x01D6
     72c:	80 93 4d 04 	sts	0x044D, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     730:	80 91 75 02 	lds	r24, 0x0275
     734:	83 70       	andi	r24, 0x03	; 3
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	02 97       	sbiw	r24, 0x02	; 2
     73a:	0c f0       	brlt	.+2      	; 0x73e <__vector_11+0x252>
     73c:	6b c0       	rjmp	.+214    	; 0x814 <__vector_11+0x328>
				
				if (flag.variation_change == 1) {
     73e:	80 91 75 03 	lds	r24, 0x0375
     742:	82 ff       	sbrs	r24, 2
     744:	2a c0       	rjmp	.+84     	; 0x79a <__vector_11+0x2ae>
					
					switch (sequencer.variation_mode) {
     746:	21 30       	cpi	r18, 0x01	; 1
     748:	61 f0       	breq	.+24     	; 0x762 <__vector_11+0x276>
     74a:	18 f0       	brcs	.+6      	; 0x752 <__vector_11+0x266>
     74c:	22 30       	cpi	r18, 0x02	; 2
     74e:	89 f0       	breq	.+34     	; 0x772 <__vector_11+0x286>
     750:	24 c0       	rjmp	.+72     	; 0x79a <__vector_11+0x2ae>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     752:	ed e4       	ldi	r30, 0x4D	; 77
     754:	f4 e0       	ldi	r31, 0x04	; 4
     756:	90 91 d6 01 	lds	r25, 0x01D6
     75a:	80 81       	ld	r24, Z
     75c:	89 2b       	or	r24, r25
     75e:	80 83       	st	Z, r24
							break;
     760:	59 c0       	rjmp	.+178    	; 0x814 <__vector_11+0x328>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     762:	ed e4       	ldi	r30, 0x4D	; 77
     764:	f4 e0       	ldi	r31, 0x04	; 4
     766:	90 91 d6 01 	lds	r25, 0x01D6
     76a:	80 81       	ld	r24, Z
     76c:	89 2b       	or	r24, r25
     76e:	80 83       	st	Z, r24
     770:	51 c0       	rjmp	.+162    	; 0x814 <__vector_11+0x328>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     772:	80 91 46 04 	lds	r24, 0x0446
     776:	80 fd       	sbrc	r24, 0
     778:	08 c0       	rjmp	.+16     	; 0x78a <__vector_11+0x29e>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     77a:	ed e4       	ldi	r30, 0x4D	; 77
     77c:	f4 e0       	ldi	r31, 0x04	; 4
     77e:	90 91 d6 01 	lds	r25, 0x01D6
     782:	80 81       	ld	r24, Z
     784:	89 2b       	or	r24, r25
     786:	80 83       	st	Z, r24
     788:	0a c0       	rjmp	.+20     	; 0x79e <__vector_11+0x2b2>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     78a:	ed e4       	ldi	r30, 0x4D	; 77
     78c:	f4 e0       	ldi	r31, 0x04	; 4
     78e:	90 91 d3 01 	lds	r25, 0x01D3
     792:	80 81       	ld	r24, Z
     794:	89 2b       	or	r24, r25
     796:	80 83       	st	Z, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <__vector_11+0x2b2>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     79a:	22 30       	cpi	r18, 0x02	; 2
     79c:	d9 f5       	brne	.+118    	; 0x814 <__vector_11+0x328>
						if (sequencer.variation == VAR_A) {
     79e:	80 91 46 04 	lds	r24, 0x0446
     7a2:	80 fd       	sbrc	r24, 0
     7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <__vector_11+0x2ca>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7a6:	ed e4       	ldi	r30, 0x4D	; 77
     7a8:	f4 e0       	ldi	r31, 0x04	; 4
     7aa:	90 91 d6 01 	lds	r25, 0x01D6
     7ae:	80 81       	ld	r24, Z
     7b0:	89 2b       	or	r24, r25
     7b2:	80 83       	st	Z, r24
     7b4:	2f c0       	rjmp	.+94     	; 0x814 <__vector_11+0x328>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7b6:	ed e4       	ldi	r30, 0x4D	; 77
     7b8:	f4 e0       	ldi	r31, 0x04	; 4
     7ba:	90 91 d3 01 	lds	r25, 0x01D3
     7be:	80 81       	ld	r24, Z
     7c0:	89 2b       	or	r24, r25
     7c2:	80 83       	st	Z, r24
     7c4:	27 c0       	rjmp	.+78     	; 0x814 <__vector_11+0x328>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     7c6:	e8 e6       	ldi	r30, 0x68	; 104
     7c8:	f2 e0       	ldi	r31, 0x02	; 2
     7ca:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     7cc:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     7ce:	20 91 47 04 	lds	r18, 0x0447
     7d2:	21 30       	cpi	r18, 0x01	; 1
     7d4:	31 f0       	breq	.+12     	; 0x7e2 <__vector_11+0x2f6>
     7d6:	10 f0       	brcs	.+4      	; 0x7dc <__vector_11+0x2f0>
     7d8:	22 30       	cpi	r18, 0x02	; 2
     7da:	61 f4       	brne	.+24     	; 0x7f4 <__vector_11+0x308>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     7dc:	40 93 4d 04 	sts	0x044D, r20
				break;
     7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <__vector_11+0x308>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     7e2:	30 93 4d 04 	sts	0x044D, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     7e6:	80 91 75 02 	lds	r24, 0x0275
     7ea:	83 70       	andi	r24, 0x03	; 3
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	02 97       	sbiw	r24, 0x02	; 2
     7f0:	8c f4       	brge	.+34     	; 0x814 <__vector_11+0x328>
     7f2:	0d c0       	rjmp	.+26     	; 0x80e <__vector_11+0x322>
     7f4:	80 91 75 02 	lds	r24, 0x0275
     7f8:	83 70       	andi	r24, 0x03	; 3
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	02 97       	sbiw	r24, 0x02	; 2
     7fe:	54 f4       	brge	.+20     	; 0x814 <__vector_11+0x328>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     800:	22 30       	cpi	r18, 0x02	; 2
     802:	29 f4       	brne	.+10     	; 0x80e <__vector_11+0x322>
     804:	ed e4       	ldi	r30, 0x4D	; 77
     806:	f4 e0       	ldi	r31, 0x04	; 4
     808:	80 81       	ld	r24, Z
     80a:	38 2b       	or	r19, r24
     80c:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     814:	e8 e6       	ldi	r30, 0x68	; 104
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	90 91 4d 04 	lds	r25, 0x044D
     81c:	85 81       	ldd	r24, Z+5	; 0x05
     81e:	89 2b       	or	r24, r25
     820:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     822:	ff 91       	pop	r31
     824:	ef 91       	pop	r30
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	9c 01       	movw	r18, r24
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	dc 01       	movw	r26, r24
     85a:	a8 59       	subi	r26, 0x98	; 152
     85c:	be 4f       	sbci	r27, 0xFE	; 254
     85e:	2c 91       	ld	r18, X
     860:	e2 2f       	mov	r30, r18
     862:	ef 70       	andi	r30, 0x0F	; 15
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	e8 59       	subi	r30, 0x98	; 152
     868:	fd 4f       	sbci	r31, 0xFD	; 253
     86a:	ec 01       	movw	r28, r24
     86c:	c9 59       	subi	r28, 0x99	; 153
     86e:	de 4f       	sbci	r29, 0xFE	; 254
     870:	30 81       	ld	r19, Z
     872:	88 81       	ld	r24, Y
     874:	83 2b       	or	r24, r19
     876:	80 83       	st	Z, r24
	led[led_index].state = 1;
     878:	82 2f       	mov	r24, r18
     87a:	80 61       	ori	r24, 0x10	; 16
     87c:	8c 93       	st	X, r24

}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <turn_off>:

void turn_off(uint8_t led_index) {
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9c 01       	movw	r18, r24
     88c:	22 0f       	add	r18, r18
     88e:	33 1f       	adc	r19, r19
     890:	82 0f       	add	r24, r18
     892:	93 1f       	adc	r25, r19
     894:	dc 01       	movw	r26, r24
     896:	a8 59       	subi	r26, 0x98	; 152
     898:	be 4f       	sbci	r27, 0xFE	; 254
     89a:	2c 91       	ld	r18, X
     89c:	e2 2f       	mov	r30, r18
     89e:	ef 70       	andi	r30, 0x0F	; 15
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	e8 59       	subi	r30, 0x98	; 152
     8a4:	fd 4f       	sbci	r31, 0xFD	; 253
     8a6:	ec 01       	movw	r28, r24
     8a8:	c9 59       	subi	r28, 0x99	; 153
     8aa:	de 4f       	sbci	r29, 0xFE	; 254
     8ac:	88 81       	ld	r24, Y
     8ae:	80 95       	com	r24
     8b0:	90 81       	ld	r25, Z
     8b2:	89 23       	and	r24, r25
     8b4:	80 83       	st	Z, r24
	led[led_index].state = 0;
     8b6:	82 2f       	mov	r24, r18
     8b8:	8f 7e       	andi	r24, 0xEF	; 239
     8ba:	8c 93       	st	X, r24
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     8c2:	28 2f       	mov	r18, r24
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	ee 0f       	add	r30, r30
     8ca:	ff 1f       	adc	r31, r31
     8cc:	2e 0f       	add	r18, r30
     8ce:	3f 1f       	adc	r19, r31
     8d0:	f9 01       	movw	r30, r18
     8d2:	e8 59       	subi	r30, 0x98	; 152
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	90 81       	ld	r25, Z
     8d8:	94 ff       	sbrs	r25, 4
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <toggle+0x20>
		
		turn_off(led_index);
     8dc:	0e 94 42 04 	call	0x884	; 0x884 <turn_off>
     8e0:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     8e2:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
     8e6:	08 95       	ret

000008e8 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     8e8:	e8 e6       	ldi	r30, 0x68	; 104
     8ea:	f2 e0       	ldi	r31, 0x02	; 2
     8ec:	82 81       	ldd	r24, Z+2	; 0x02
     8ee:	8f 70       	andi	r24, 0x0F	; 15
     8f0:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     8f2:	87 81       	ldd	r24, Z+7	; 0x07
     8f4:	80 72       	andi	r24, 0x20	; 32
     8f6:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     8f8:	83 81       	ldd	r24, Z+3	; 0x03
     8fa:	8f 70       	andi	r24, 0x0F	; 15
     8fc:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     8fe:	86 81       	ldd	r24, Z+6	; 0x06
     900:	8f 7c       	andi	r24, 0xCF	; 207
     902:	86 83       	std	Z+6, r24	; 0x06
     904:	08 95       	ret

00000906 <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     906:	2f 92       	push	r2
     908:	3f 92       	push	r3
     90a:	4f 92       	push	r4
     90c:	5f 92       	push	r5
     90e:	6f 92       	push	r6
     910:	7f 92       	push	r7
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	00 d0       	rcall	.+0      	; 0x92c <update_step_led_mask+0x26>
     92c:	00 d0       	rcall	.+0      	; 0x92e <update_step_led_mask+0x28>
     92e:	00 d0       	rcall	.+0      	; 0x930 <update_step_led_mask+0x2a>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     934:	82 e2       	ldi	r24, 0x22	; 34
     936:	ec eb       	ldi	r30, 0xBC	; 188
     938:	f3 e0       	ldi	r31, 0x03	; 3
     93a:	df 01       	movw	r26, r30
     93c:	28 2f       	mov	r18, r24
     93e:	1d 92       	st	X+, r1
     940:	2a 95       	dec	r18
     942:	e9 f7       	brne	.-6      	; 0x93e <update_step_led_mask+0x38>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     944:	e3 e2       	ldi	r30, 0x23	; 35
     946:	f4 e0       	ldi	r31, 0x04	; 4
     948:	df 01       	movw	r26, r30
     94a:	1d 92       	st	X+, r1
     94c:	8a 95       	dec	r24
     94e:	e9 f7       	brne	.-6      	; 0x94a <update_step_led_mask+0x44>
	uint8_t step_num = sequencer.mode == FIRST_PART? sequencer.step_num_first : sequencer.step_num_second;
     950:	80 91 76 03 	lds	r24, 0x0376
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	29 f4       	brne	.+10     	; 0x962 <update_step_led_mask+0x5c>
     958:	80 91 48 04 	lds	r24, 0x0448
     95c:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t offset = sequencer.mode == FIRST_PART? 0 : 16;
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	05 c0       	rjmp	.+10     	; 0x96c <update_step_led_mask+0x66>
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	uint8_t step_num = sequencer.mode == FIRST_PART? sequencer.step_num_first : sequencer.step_num_second;
     962:	80 91 48 04 	lds	r24, 0x0448
     966:	82 95       	swap	r24
     968:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t offset = sequencer.mode == FIRST_PART? 0 : 16;
     96a:	90 e1       	ldi	r25, 0x10	; 16
	for (int i = 0; i <= step_num; i++) {
     96c:	e8 2f       	mov	r30, r24
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	fc 83       	std	Y+4, r31	; 0x04
     972:	eb 83       	std	Y+3, r30	; 0x03
			if ((sequencer.pattern[VAR_A].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> (i+offset)) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     974:	c0 90 b8 03 	lds	r12, 0x03B8
     978:	d0 90 b9 03 	lds	r13, 0x03B9
     97c:	e0 90 ba 03 	lds	r14, 0x03BA
     980:	f0 90 bb 03 	lds	r15, 0x03BB
		if ((sequencer.pattern[VAR_B].accent >> (i+offset)) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     984:	80 90 1f 04 	lds	r8, 0x041F
     988:	90 90 20 04 	lds	r9, 0x0420
     98c:	a0 90 21 04 	lds	r10, 0x0421
     990:	b0 90 22 04 	lds	r11, 0x0422
     994:	49 2e       	mov	r4, r25
     996:	51 2c       	mov	r5, r1
     998:	32 01       	movw	r6, r4
     99a:	ff ef       	ldi	r31, 0xFF	; 255
     99c:	6f 1a       	sub	r6, r31
     99e:	7f 0a       	sbc	r7, r31
     9a0:	c3 01       	movw	r24, r6
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	9c 01       	movw	r18, r24
     9a8:	2a 58       	subi	r18, 0x8A	; 138
     9aa:	3c 4f       	sbci	r19, 0xFC	; 252
     9ac:	39 01       	movw	r6, r18
     9ae:	c2 01       	movw	r24, r4
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	87 59       	subi	r24, 0x97	; 151
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	dc 01       	movw	r26, r24
     9ba:	aa 58       	subi	r26, 0x8A	; 138
     9bc:	bc 4f       	sbci	r27, 0xFC	; 252
     9be:	ba 83       	std	Y+2, r27	; 0x02
     9c0:	a9 83       	std	Y+1, r26	; 0x01
     9c2:	00 e0       	ldi	r16, 0x00	; 0
     9c4:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t offset = sequencer.mode == FIRST_PART? 0 : 16;
	for (int i = 0; i <= step_num; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9c6:	22 24       	eor	r2, r2
     9c8:	23 94       	inc	r2
     9ca:	31 2c       	mov	r3, r1
     9cc:	59 c0       	rjmp	.+178    	; 0xa80 <update_step_led_mask+0x17a>
     9ce:	2d 81       	ldd	r18, Y+5	; 0x05
     9d0:	3e 81       	ldd	r19, Y+6	; 0x06
     9d2:	08 2e       	mov	r0, r24
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <update_step_led_mask+0xd4>
     9d6:	36 95       	lsr	r19
     9d8:	27 95       	ror	r18
     9da:	0a 94       	dec	r0
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <update_step_led_mask+0xd0>
     9de:	20 ff       	sbrs	r18, 0
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <update_step_led_mask+0xe8>
     9e2:	20 81       	ld	r18, Z
     9e4:	31 81       	ldd	r19, Z+1	; 0x01
     9e6:	24 2b       	or	r18, r20
     9e8:	35 2b       	or	r19, r21
     9ea:	31 83       	std	Z+1, r19	; 0x01
     9ec:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     9ee:	9b 01       	movw	r18, r22
     9f0:	08 2e       	mov	r0, r24
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <update_step_led_mask+0xf2>
     9f4:	36 95       	lsr	r19
     9f6:	27 95       	ror	r18
     9f8:	0a 94       	dec	r0
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <update_step_led_mask+0xee>
     9fc:	20 ff       	sbrs	r18, 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <update_step_led_mask+0x10a>
     a00:	2d 91       	ld	r18, X+
     a02:	3c 91       	ld	r19, X
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	24 2b       	or	r18, r20
     a08:	35 2b       	or	r19, r21
     a0a:	11 96       	adiw	r26, 0x01	; 1
     a0c:	3c 93       	st	X, r19
     a0e:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	uint8_t step_num = sequencer.mode == FIRST_PART? sequencer.step_num_first : sequencer.step_num_second;
	uint8_t offset = sequencer.mode == FIRST_PART? 0 : 16;
	for (int i = 0; i <= step_num; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	32 96       	adiw	r30, 0x02	; 2
     a16:	80 31       	cpi	r24, 0x10	; 16
     a18:	91 05       	cpc	r25, r1
     a1a:	c9 f6       	brne	.-78     	; 0x9ce <update_step_led_mask+0xc8>
     a1c:	b2 01       	movw	r22, r4
     a1e:	60 0f       	add	r22, r16
     a20:	71 1f       	adc	r23, r17
			if ((sequencer.pattern[VAR_A].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> (i+offset)) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a22:	d7 01       	movw	r26, r14
     a24:	c6 01       	movw	r24, r12
     a26:	06 2e       	mov	r0, r22
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <update_step_led_mask+0x12c>
     a2a:	b6 95       	lsr	r27
     a2c:	a7 95       	ror	r26
     a2e:	97 95       	ror	r25
     a30:	87 95       	ror	r24
     a32:	0a 94       	dec	r0
     a34:	d2 f7       	brpl	.-12     	; 0xa2a <update_step_led_mask+0x124>
     a36:	80 ff       	sbrs	r24, 0
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <update_step_led_mask+0x144>
     a3a:	ec ed       	ldi	r30, 0xDC	; 220
     a3c:	f3 e0       	ldi	r31, 0x03	; 3
     a3e:	20 81       	ld	r18, Z
     a40:	31 81       	ldd	r19, Z+1	; 0x01
     a42:	24 2b       	or	r18, r20
     a44:	35 2b       	or	r19, r21
     a46:	31 83       	std	Z+1, r19	; 0x01
     a48:	20 83       	st	Z, r18
		if ((sequencer.pattern[VAR_B].accent >> (i+offset)) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a4a:	d5 01       	movw	r26, r10
     a4c:	c4 01       	movw	r24, r8
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <update_step_led_mask+0x152>
     a50:	b6 95       	lsr	r27
     a52:	a7 95       	ror	r26
     a54:	97 95       	ror	r25
     a56:	87 95       	ror	r24
     a58:	6a 95       	dec	r22
     a5a:	d2 f7       	brpl	.-12     	; 0xa50 <update_step_led_mask+0x14a>
     a5c:	80 ff       	sbrs	r24, 0
     a5e:	09 c0       	rjmp	.+18     	; 0xa72 <update_step_led_mask+0x16c>
     a60:	a3 e4       	ldi	r26, 0x43	; 67
     a62:	b4 e0       	ldi	r27, 0x04	; 4
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	11 97       	sbiw	r26, 0x01	; 1
     a6a:	48 2b       	or	r20, r24
     a6c:	59 2b       	or	r21, r25
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	uint8_t step_num = sequencer.mode == FIRST_PART? sequencer.step_num_first : sequencer.step_num_second;
	uint8_t offset = sequencer.mode == FIRST_PART? 0 : 16;
	for (int i = 0; i <= step_num; i++) {
     a72:	0f 5f       	subi	r16, 0xFF	; 255
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	eb 81       	ldd	r30, Y+3	; 0x03
     a78:	fc 81       	ldd	r31, Y+4	; 0x04
     a7a:	e0 17       	cp	r30, r16
     a7c:	f1 07       	cpc	r31, r17
     a7e:	d4 f0       	brlt	.+52     	; 0xab4 <update_step_led_mask+0x1ae>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a80:	d3 01       	movw	r26, r6
     a82:	2d 91       	ld	r18, X+
     a84:	3d 91       	ld	r19, X+
     a86:	3d 01       	movw	r6, r26
     a88:	a1 01       	movw	r20, r2
     a8a:	00 2e       	mov	r0, r16
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <update_step_led_mask+0x18c>
     a8e:	44 0f       	add	r20, r20
     a90:	55 1f       	adc	r21, r21
     a92:	0a 94       	dec	r0
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <update_step_led_mask+0x188>
			if ((sequencer.pattern[VAR_B].part[i+offset] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a96:	e9 81       	ldd	r30, Y+1	; 0x01
     a98:	fa 81       	ldd	r31, Y+2	; 0x02
     a9a:	61 91       	ld	r22, Z+
     a9c:	71 91       	ld	r23, Z+
     a9e:	fa 83       	std	Y+2, r31	; 0x02
     aa0:	e9 83       	std	Y+1, r30	; 0x01
     aa2:	a3 e2       	ldi	r26, 0x23	; 35
     aa4:	b4 e0       	ldi	r27, 0x04	; 4
     aa6:	ec eb       	ldi	r30, 0xBC	; 188
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	3e 83       	std	Y+6, r19	; 0x06
     ab0:	2d 83       	std	Y+5, r18	; 0x05
     ab2:	8d cf       	rjmp	.-230    	; 0x9ce <update_step_led_mask+0xc8>
		//
		//
	//}
	
	
}	
     ab4:	26 96       	adiw	r28, 0x06	; 6
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	7f 90       	pop	r7
     ada:	6f 90       	pop	r6
     adc:	5f 90       	pop	r5
     ade:	4f 90       	pop	r4
     ae0:	3f 90       	pop	r3
     ae2:	2f 90       	pop	r2
     ae4:	08 95       	ret

00000ae6 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     ae6:	08 95       	ret

00000ae8 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     ae8:	08 95       	ret

00000aea <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     aea:	40 31       	cpi	r20, 0x10	; 16
     aec:	20 f4       	brcc	.+8      	; 0xaf6 <note_on_event+0xc>
     aee:	62 2f       	mov	r22, r18
     af0:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     af2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     af6:	08 95       	ret

00000af8 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     af8:	0e 94 92 06 	call	0xd24	; 0xd24 <update_tempo>
	read_switches();
     afc:	0e 94 18 09 	call	0x1230	; 0x1230 <read_switches>
	check_start_stop_tap();
     b00:	0e 94 8d 09 	call	0x131a	; 0x131a <check_start_stop_tap>
	
	parse_switch_data();
     b04:	0e 94 66 09 	call	0x12cc	; 0x12cc <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b08:	80 91 76 03 	lds	r24, 0x0376
     b0c:	83 30       	cpi	r24, 0x03	; 3
     b0e:	11 f4       	brne	.+4      	; 0xb14 <refresh+0x1c>
     b10:	0e 94 d6 01 	call	0x3ac	; 0x3ac <live_hits>
	update_mode();
     b14:	0e 94 54 06 	call	0xca8	; 0xca8 <update_mode>
	check_clear_switch();
     b18:	0e 94 ae 0a 	call	0x155c	; 0x155c <check_clear_switch>
	check_variation_switches();
     b1c:	0e 94 80 0a 	call	0x1500	; 0x1500 <check_variation_switches>
	//update_variation();
	check_inst_switches();	
     b20:	0e 94 db 09 	call	0x13b6	; 0x13b6 <check_inst_switches>
	update_step_board();
     b24:	0e 94 99 07 	call	0xf32	; 0xf32 <update_step_board>
	//update_step_led_mask();
	process_step();
     b28:	0e 94 c0 06 	call	0xd80	; 0xd80 <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     b2c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <update_spi>
	PORTD &= ~(1<<TRIG);
     b30:	5d 98       	cbi	0x0b, 5	; 11
     b32:	08 95       	ret

00000b34 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     b34:	8f e1       	ldi	r24, 0x1F	; 31
     b36:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     b3a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     b3e:	88 ed       	ldi	r24, 0xD8	; 216
     b40:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     b44:	51 9a       	sbi	0x0a, 1	; 10
     b46:	08 95       	ret

00000b48 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
     b52:	2f 93       	push	r18
     b54:	3f 93       	push	r19
     b56:	4f 93       	push	r20
     b58:	5f 93       	push	r21
     b5a:	6f 93       	push	r22
     b5c:	7f 93       	push	r23
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	af 93       	push	r26
     b64:	bf 93       	push	r27
     b66:	ef 93       	push	r30
     b68:	ff 93       	push	r31
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	1f 92       	push	r1
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     b74:	80 91 c6 00 	lds	r24, 0x00C6
     b78:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     b7a:	ae 01       	movw	r20, r28
     b7c:	4f 5f       	subi	r20, 0xFF	; 255
     b7e:	5f 4f       	sbci	r21, 0xFF	; 255
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	88 e8       	ldi	r24, 0x88	; 136
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 02 0c 	call	0x1804	; 0x1804 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	bf 91       	pop	r27
     b96:	af 91       	pop	r26
     b98:	9f 91       	pop	r25
     b9a:	8f 91       	pop	r24
     b9c:	7f 91       	pop	r23
     b9e:	6f 91       	pop	r22
     ba0:	5f 91       	pop	r21
     ba2:	4f 91       	pop	r20
     ba4:	3f 91       	pop	r19
     ba6:	2f 91       	pop	r18
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <__vector_20>:

ISR (USART0_TX_vect) {
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1


	
}
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     bc6:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     bc8:	8d b1       	in	r24, 0x0d	; 13
     bca:	8c 60       	ori	r24, 0x0C	; 12
     bcc:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     bce:	87 b1       	in	r24, 0x07	; 7
     bd0:	8e 60       	ori	r24, 0x0E	; 14
     bd2:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     bd4:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     bd6:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     bd8:	88 b1       	in	r24, 0x08	; 8
     bda:	81 7f       	andi	r24, 0xF1	; 241
     bdc:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     bde:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     be0:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     be2:	80 e5       	ldi	r24, 0x50	; 80
     be4:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     be8:	ed ea       	ldi	r30, 0xAD	; 173
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     bf8:	8d e1       	ldi	r24, 0x1D	; 29
     bfa:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
	turn_on(FILL_MANUAL);
     bfe:	82 e2       	ldi	r24, 0x22	; 34
     c00:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
	
	update_spi();
     c04:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     c08:	84 b5       	in	r24, 0x24	; 36
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     c0e:	81 ee       	ldi	r24, 0xE1	; 225
     c10:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     c12:	88 e8       	ldi	r24, 0x88	; 136
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     c1a:	65 e7       	ldi	r22, 0x75	; 117
     c1c:	75 e0       	ldi	r23, 0x05	; 5
     c1e:	88 e8       	ldi	r24, 0x88	; 136
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 c5 0b 	call	0x178a	; 0x178a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     c26:	63 e7       	ldi	r22, 0x73	; 115
     c28:	75 e0       	ldi	r23, 0x05	; 5
     c2a:	88 e8       	ldi	r24, 0x88	; 136
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     c32:	64 e7       	ldi	r22, 0x74	; 116
     c34:	75 e0       	ldi	r23, 0x05	; 5
     c36:	88 e8       	ldi	r24, 0x88	; 136
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 cd 0b 	call	0x179a	; 0x179a <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     c3e:	0e 94 9a 05 	call	0xb34	; 0xb34 <setup_midi_usart>
	
	setup_internal_clock();
     c42:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     c46:	e3 e7       	ldi	r30, 0x73	; 115
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	86 e0       	ldi	r24, 0x06	; 6
     c4c:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     c4e:	11 e0       	ldi	r17, 0x01	; 1
     c50:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     c52:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     c56:	80 91 75 03 	lds	r24, 0x0375
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	80 93 75 03 	sts	0x0375, r24
	sequencer.START = 0;
     c60:	e7 e7       	ldi	r30, 0x77	; 119
     c62:	f3 e0       	ldi	r31, 0x03	; 3
     c64:	80 81       	ld	r24, Z
     c66:	8d 7f       	andi	r24, 0xFD	; 253
     c68:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num_first = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     c6a:	c8 e4       	ldi	r28, 0x48	; 72
     c6c:	d4 e0       	ldi	r29, 0x04	; 4
	sequencer.step_num_second = 15;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	88 83       	st	Y, r24
	sequencer.step_num_new = 15;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	8f 60       	ori	r24, 0x0F	; 15
     c76:	89 83       	std	Y+1, r24	; 0x01
	sequencer.variation_mode = VAR_A;
     c78:	10 92 47 04 	sts	0x0447, r1
	turn_on(BASIC_VAR_A_LED);
     c7c:	84 e2       	ldi	r24, 0x24	; 36
     c7e:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
	sequencer.mode = FIRST_PART;
     c82:	10 93 76 03 	sts	0x0376, r17
	sequencer.part_num = FIRST;
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	8d 7f       	andi	r24, 0xFD	; 253
     c8a:	8a 83       	std	Y+2, r24	; 0x02
	turn_on(FIRST_PART_LED);
     c8c:	8a e2       	ldi	r24, 0x2A	; 42
     c8e:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
	turn_on(SCALE_3_LED);
     c92:	87 e2       	ldi	r24, 0x27	; 39
     c94:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
	sei(); //enable global interrupts	
     c98:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     c9a:	88 e8       	ldi	r24, 0x88	; 136
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <midi_device_process>
	
	refresh();		
     ca2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <refresh>

	
	}
     ca6:	f9 cf       	rjmp	.-14     	; 0xc9a <main+0xd4>

00000ca8 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     ca8:	80 91 52 02 	lds	r24, 0x0252
     cac:	86 ff       	sbrs	r24, 6
     cae:	39 c0       	rjmp	.+114    	; 0xd22 <update_mode+0x7a>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     cb0:	e2 e5       	ldi	r30, 0x52	; 82
     cb2:	f2 e0       	ldi	r31, 0x02	; 2
     cb4:	8f 7b       	andi	r24, 0xBF	; 191
     cb6:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     cb8:	80 91 77 03 	lds	r24, 0x0377
     cbc:	80 ff       	sbrs	r24, 0
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     cc0:	80 91 59 02 	lds	r24, 0x0259
     cc4:	88 23       	and	r24, r24
     cc6:	21 f0       	breq	.+8      	; 0xcd0 <update_mode+0x28>
     cc8:	81 50       	subi	r24, 0x01	; 1
     cca:	80 93 59 02 	sts	0x0259, r24
     cce:	0e c0       	rjmp	.+28     	; 0xcec <update_mode+0x44>
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	80 93 59 02 	sts	0x0259, r24
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     cd8:	80 91 59 02 	lds	r24, 0x0259
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	86 30       	cpi	r24, 0x06	; 6
     ce0:	19 f0       	breq	.+6      	; 0xce8 <update_mode+0x40>
     ce2:	80 93 59 02 	sts	0x0259, r24
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <update_mode+0x44>
     ce8:	10 92 59 02 	sts	0x0259, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     cec:	30 91 59 02 	lds	r19, 0x0259
     cf0:	e3 2f       	mov	r30, r19
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	e4 5f       	subi	r30, 0xF4	; 244
     cf6:	fd 4f       	sbci	r31, 0xFD	; 253
     cf8:	20 81       	ld	r18, Z
     cfa:	20 93 76 03 	sts	0x0376, r18
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     cfe:	e8 e6       	ldi	r30, 0x68	; 104
     d00:	f2 e0       	ldi	r31, 0x02	; 2
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <update_mode+0x64>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	3a 95       	dec	r19
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     d10:	94 81       	ldd	r25, Z+4	; 0x04
     d12:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     d14:	89 2b       	or	r24, r25
     d16:	84 83       	std	Z+4, r24	; 0x04
		
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     d18:	21 50       	subi	r18, 0x01	; 1
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	10 f4       	brcc	.+4      	; 0xd22 <update_mode+0x7a>
     d1e:	0e 94 83 04 	call	0x906	; 0x906 <update_step_led_mask>
     d22:	08 95       	ret

00000d24 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     d24:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     d28:	90 93 5d 02 	sts	0x025D, r25
     d2c:	80 93 5c 02 	sts	0x025C, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     d30:	20 91 5a 02 	lds	r18, 0x025A
     d34:	30 91 5b 02 	lds	r19, 0x025B
     d38:	82 1b       	sub	r24, r18
     d3a:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     d3c:	95 95       	asr	r25
     d3e:	87 95       	ror	r24
     d40:	95 95       	asr	r25
     d42:	87 95       	ror	r24
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	90 93 5b 02 	sts	0x025B, r25
     d4c:	80 93 5a 02 	sts	0x025A, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     d50:	23 e6       	ldi	r18, 0x63	; 99
     d52:	34 e0       	ldi	r19, 0x04	; 4
     d54:	a9 01       	movw	r20, r18
     d56:	48 1b       	sub	r20, r24
     d58:	59 0b       	sbc	r21, r25
     d5a:	ca 01       	movw	r24, r20
     d5c:	e3 e7       	ldi	r30, 0x73	; 115
     d5e:	f2 e0       	ldi	r31, 0x02	; 2
     d60:	54 83       	std	Z+4, r21	; 0x04
     d62:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     d64:	25 81       	ldd	r18, Z+5	; 0x05
     d66:	36 81       	ldd	r19, Z+6	; 0x06
     d68:	42 17       	cp	r20, r18
     d6a:	53 07       	cpc	r21, r19
     d6c:	11 f0       	breq	.+4      	; 0xd72 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     d6e:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     d72:	e3 e7       	ldi	r30, 0x73	; 115
     d74:	f2 e0       	ldi	r31, 0x02	; 2
     d76:	83 81       	ldd	r24, Z+3	; 0x03
     d78:	94 81       	ldd	r25, Z+4	; 0x04
     d7a:	96 83       	std	Z+6, r25	; 0x06
     d7c:	85 83       	std	Z+5, r24	; 0x05
     d7e:	08 95       	ret

00000d80 <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     d88:	80 91 77 03 	lds	r24, 0x0377
     d8c:	81 ff       	sbrs	r24, 1
     d8e:	c5 c0       	rjmp	.+394    	; 0xf1a <process_step+0x19a>
			
			//if (sequencer.part_num == FIRST || sequencer.part_num == SECOND) {	
				if (flag.next_step) {
     d90:	80 91 75 03 	lds	r24, 0x0375
     d94:	80 ff       	sbrs	r24, 0
     d96:	c8 c0       	rjmp	.+400    	; 0xf28 <process_step+0x1a8>
					flag.next_step = 0;
     d98:	8e 7f       	andi	r24, 0xFE	; 254
     d9a:	80 93 75 03 	sts	0x0375, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     d9e:	88 70       	andi	r24, 0x08	; 8
     da0:	88 23       	and	r24, r24
     da2:	f1 f3       	breq	.-4      	; 0xda0 <process_step+0x20>
					PORTD |= (1<<TRIG);
     da4:	5d 9a       	sbi	0x0b, 5	; 11
					
					if (sequencer.mode == FIRST_PART && sequencer.part_num == FIRST) { //only blink step LEDs if in current parts mode (ie. part_num == FIRST && mode == FIRST_PART
     da6:	80 91 76 03 	lds	r24, 0x0376
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	b9 f5       	brne	.+110    	; 0xe1c <process_step+0x9c>
     dae:	80 91 4a 04 	lds	r24, 0x044A
     db2:	81 fd       	sbrc	r24, 1
     db4:	72 c0       	rjmp	.+228    	; 0xe9a <process_step+0x11a>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     db6:	80 91 49 04 	lds	r24, 0x0449
     dba:	98 2f       	mov	r25, r24
     dbc:	92 95       	swap	r25
     dbe:	9f 70       	andi	r25, 0x0F	; 15
     dc0:	80 91 4a 04 	lds	r24, 0x044A
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	82 95       	swap	r24
     dc8:	80 7f       	andi	r24, 0xF0	; 240
     dca:	89 2b       	or	r24, r25
     dcc:	21 e0       	ldi	r18, 0x01	; 1
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <process_step+0x56>
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	8a 95       	dec	r24
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <process_step+0x52>
     dda:	e0 91 4c 04 	lds	r30, 0x044C
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	b2 96       	adiw	r30, 0x22	; 34
     de2:	80 91 46 04 	lds	r24, 0x0446
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	81 70       	andi	r24, 0x01	; 1
     dec:	07 e6       	ldi	r16, 0x67	; 103
     dee:	80 9f       	mul	r24, r16
     df0:	e0 0d       	add	r30, r0
     df2:	f1 1d       	adc	r31, r1
     df4:	11 24       	eor	r1, r1
     df6:	ea 58       	subi	r30, 0x8A	; 138
     df8:	fc 4f       	sbci	r31, 0xFC	; 252
     dfa:	92 81       	ldd	r25, Z+2	; 0x02
     dfc:	83 81       	ldd	r24, Z+3	; 0x03
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     dfe:	e8 e6       	ldi	r30, 0x68	; 104
     e00:	f2 e0       	ldi	r31, 0x02	; 2
     e02:	49 2f       	mov	r20, r25
     e04:	42 23       	and	r20, r18
     e06:	40 95       	com	r20
					flag.next_step = 0;
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					
					if (sequencer.mode == FIRST_PART && sequencer.part_num == FIRST) { //only blink step LEDs if in current parts mode (ie. part_num == FIRST && mode == FIRST_PART
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     e08:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     e0a:	94 23       	and	r25, r20
     e0c:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     e0e:	98 2f       	mov	r25, r24
     e10:	93 23       	and	r25, r19
     e12:	90 95       	com	r25
					PORTD |= (1<<TRIG);
					
					if (sequencer.mode == FIRST_PART && sequencer.part_num == FIRST) { //only blink step LEDs if in current parts mode (ie. part_num == FIRST && mode == FIRST_PART
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     e14:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     e16:	89 23       	and	r24, r25
     e18:	80 83       	st	Z, r24
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <process_step+0x11a>
					} else if (sequencer.mode == SECOND_PART && sequencer.part_num == SECOND) {
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	e9 f5       	brne	.+122    	; 0xe9a <process_step+0x11a>
     e20:	80 91 4a 04 	lds	r24, 0x044A
     e24:	81 ff       	sbrs	r24, 1
     e26:	39 c0       	rjmp	.+114    	; 0xe9a <process_step+0x11a>
						spi_data[1] = (1 << (sequencer.current_step - sequencer.step_num_first -1)) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     e28:	80 91 49 04 	lds	r24, 0x0449
     e2c:	98 2f       	mov	r25, r24
     e2e:	92 95       	swap	r25
     e30:	9f 70       	andi	r25, 0x0F	; 15
     e32:	80 91 4a 04 	lds	r24, 0x044A
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	82 95       	swap	r24
     e3a:	80 7f       	andi	r24, 0xF0	; 240
     e3c:	89 2b       	or	r24, r25
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	20 91 48 04 	lds	r18, 0x0448
     e44:	2f 70       	andi	r18, 0x0F	; 15
     e46:	82 1b       	sub	r24, r18
     e48:	91 09       	sbc	r25, r1
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <process_step+0xd6>
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	8a 95       	dec	r24
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <process_step+0xd2>
     e5a:	e0 91 4c 04 	lds	r30, 0x044C
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	b2 96       	adiw	r30, 0x22	; 34
     e62:	80 91 46 04 	lds	r24, 0x0446
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	17 e6       	ldi	r17, 0x67	; 103
     e6e:	81 9f       	mul	r24, r17
     e70:	e0 0d       	add	r30, r0
     e72:	f1 1d       	adc	r31, r1
     e74:	11 24       	eor	r1, r1
     e76:	ea 58       	subi	r30, 0x8A	; 138
     e78:	fc 4f       	sbci	r31, 0xFC	; 252
     e7a:	92 81       	ldd	r25, Z+2	; 0x02
     e7c:	83 81       	ldd	r24, Z+3	; 0x03
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<(sequencer.current_step - sequencer.step_num_first-1)));
     e7e:	e8 e6       	ldi	r30, 0x68	; 104
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	49 2f       	mov	r20, r25
     e84:	42 23       	and	r20, r18
     e86:	40 95       	com	r20
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
					} else if (sequencer.mode == SECOND_PART && sequencer.part_num == SECOND) {
						spi_data[1] = (1 << (sequencer.current_step - sequencer.step_num_first -1)) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     e88:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<(sequencer.current_step - sequencer.step_num_first-1)));
     e8a:	94 23       	and	r25, r20
     e8c:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << (sequencer.current_step - sequencer.step_num_first-1)) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<(sequencer.current_step - sequencer.step_num_first-1)) >>8));
     e8e:	98 2f       	mov	r25, r24
     e90:	93 23       	and	r25, r19
     e92:	90 95       	com	r25
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
					} else if (sequencer.mode == SECOND_PART && sequencer.part_num == SECOND) {
						spi_data[1] = (1 << (sequencer.current_step - sequencer.step_num_first -1)) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<(sequencer.current_step - sequencer.step_num_first-1)));
						spi_data[0] = ((1 << (sequencer.current_step - sequencer.step_num_first-1)) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     e94:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<(sequencer.current_step - sequencer.step_num_first-1)) >>8));
     e96:	89 23       	and	r24, r25
     e98:	80 83       	st	Z, r24
						//spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<(sequencer.current_step - sequencer.step_num_first-1)) >>8));						
						//
					//}
					

					trigger_step();
     e9a:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     e9e:	80 91 46 04 	lds	r24, 0x0446
     ea2:	81 70       	andi	r24, 0x01	; 1
     ea4:	c8 2f       	mov	r28, r24
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	d2 2f       	mov	r29, r18
     eaa:	87 e6       	ldi	r24, 0x67	; 103
     eac:	8c 9f       	mul	r24, r28
     eae:	f0 01       	movw	r30, r0
     eb0:	8d 9f       	mul	r24, r29
     eb2:	f0 0d       	add	r31, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	e8 54       	subi	r30, 0x48	; 72
     eb8:	fc 4f       	sbci	r31, 0xFC	; 252
     eba:	80 91 49 04 	lds	r24, 0x0449
     ebe:	98 2f       	mov	r25, r24
     ec0:	92 95       	swap	r25
     ec2:	9f 70       	andi	r25, 0x0F	; 15
     ec4:	80 91 4a 04 	lds	r24, 0x044A
     ec8:	81 70       	andi	r24, 0x01	; 1
     eca:	82 95       	swap	r24
     ecc:	80 7f       	andi	r24, 0xF0	; 240
     ece:	89 2b       	or	r24, r25
     ed0:	40 81       	ld	r20, Z
     ed2:	51 81       	ldd	r21, Z+1	; 0x01
     ed4:	62 81       	ldd	r22, Z+2	; 0x02
     ed6:	73 81       	ldd	r23, Z+3	; 0x03
     ed8:	8a 01       	movw	r16, r20
     eda:	9b 01       	movw	r18, r22
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <process_step+0x166>
     ede:	36 95       	lsr	r19
     ee0:	27 95       	ror	r18
     ee2:	17 95       	ror	r17
     ee4:	07 95       	ror	r16
     ee6:	8a 95       	dec	r24
     ee8:	d2 f7       	brpl	.-12     	; 0xede <process_step+0x15e>
     eea:	00 ff       	sbrs	r16, 0
     eec:	08 c0       	rjmp	.+16     	; 0xefe <process_step+0x17e>
						spi_data[8] |= 1<<ACCENT;
     eee:	e8 e6       	ldi	r30, 0x68	; 104
     ef0:	f2 e0       	ldi	r31, 0x02	; 2
     ef2:	80 85       	ldd	r24, Z+8	; 0x08
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     ef8:	84 e1       	ldi	r24, 0x14	; 20
     efa:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     efe:	ee e6       	ldi	r30, 0x6E	; 110
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	83 60       	ori	r24, 0x03	; 3
     f0c:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
     f0e:	80 91 75 03 	lds	r24, 0x0375
     f12:	87 7f       	andi	r24, 0xF7	; 247
     f14:	80 93 75 03 	sts	0x0375, r24
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <process_step+0x1a8>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
     f1a:	80 91 75 03 	lds	r24, 0x0375
     f1e:	80 ff       	sbrs	r24, 0
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <process_step+0x1a8>
			
			flag.next_step = 0;
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	80 93 75 03 	sts	0x0375, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <update_step_board>:

void update_step_board() {
     f32:	2f 92       	push	r2
     f34:	3f 92       	push	r3
     f36:	4f 92       	push	r4
     f38:	5f 92       	push	r5
     f3a:	6f 92       	push	r6
     f3c:	7f 92       	push	r7
     f3e:	8f 92       	push	r8
     f40:	9f 92       	push	r9
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
	
	if (sequencer.START) {
     f56:	80 91 77 03 	lds	r24, 0x0377
     f5a:	81 ff       	sbrs	r24, 1
     f5c:	28 c1       	rjmp	.+592    	; 0x11ae <update_step_board+0x27c>
		
			switch (sequencer.mode) {		
     f5e:	90 91 76 03 	lds	r25, 0x0376
     f62:	2f ef       	ldi	r18, 0xFF	; 255
     f64:	29 0f       	add	r18, r25
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	08 f0       	brcs	.+2      	; 0xf6c <update_step_board+0x3a>
     f6a:	21 c1       	rjmp	.+578    	; 0x11ae <update_step_board+0x27c>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     f6c:	82 ff       	sbrs	r24, 2
     f6e:	26 c0       	rjmp	.+76     	; 0xfbc <update_step_board+0x8a>
					
					for (int i = 0; i < 16; i++) {
						
							if (button[i].state) {
     f70:	80 91 12 02 	lds	r24, 0x0212
     f74:	86 fd       	sbrc	r24, 6
     f76:	0b c0       	rjmp	.+22     	; 0xf8e <update_step_board+0x5c>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fc 01       	movw	r30, r24
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 5e       	subi	r30, 0xEE	; 238
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
     f86:	20 81       	ld	r18, Z
     f88:	26 ff       	sbrs	r18, 6
     f8a:	13 c0       	rjmp	.+38     	; 0xfb2 <update_step_board+0x80>
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <update_step_board+0x60>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     f92:	fc 01       	movw	r30, r24
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	ee 5e       	subi	r30, 0xEE	; 238
     f9a:	fd 4f       	sbci	r31, 0xFD	; 253
     f9c:	90 81       	ld	r25, Z
     f9e:	9f 7b       	andi	r25, 0xBF	; 191
     fa0:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     fa2:	e8 e4       	ldi	r30, 0x48	; 72
     fa4:	f4 e0       	ldi	r31, 0x04	; 4
     fa6:	8f 70       	andi	r24, 0x0F	; 15
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	90 7f       	andi	r25, 0xF0	; 240
     fac:	89 2b       	or	r24, r25
     fae:	81 83       	std	Z+1, r24	; 0x01
								break;// - should we break out of here? multiple presses will mess things up, right?
     fb0:	fe c0       	rjmp	.+508    	; 0x11ae <update_step_board+0x27c>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < 16; i++) {
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	80 31       	cpi	r24, 0x10	; 16
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f7       	brne	.-62     	; 0xf7c <update_step_board+0x4a>
     fba:	f9 c0       	rjmp	.+498    	; 0x11ae <update_step_board+0x27c>
				}
				
				uint8_t step_num = 0;
				uint8_t offset = 0;
				
				if (sequencer.mode == FIRST_PART) {
     fbc:	91 30       	cpi	r25, 0x01	; 1
     fbe:	29 f4       	brne	.+10     	; 0xfca <update_step_board+0x98>
					
					step_num = sequencer.step_num_first;
     fc0:	00 91 48 04 	lds	r16, 0x0448
     fc4:	0f 70       	andi	r16, 0x0F	; 15
					offset = 0;
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <update_step_board+0xa8>
				} else if (sequencer.mode == SECOND_PART) {
     fca:	92 30       	cpi	r25, 0x02	; 2
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <update_step_board+0x9e>
     fce:	e7 c0       	rjmp	.+462    	; 0x119e <update_step_board+0x26c>
					
					step_num = sequencer.step_num_second;
     fd0:	00 91 48 04 	lds	r16, 0x0448
     fd4:	02 95       	swap	r16
     fd6:	0f 70       	andi	r16, 0x0F	; 15
					offset = 16; //offset for steps 16-31
     fd8:	80 e1       	ldi	r24, 0x10	; 16
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     fda:	90 91 4c 04 	lds	r25, 0x044C
     fde:	90 31       	cpi	r25, 0x10	; 16
     fe0:	c9 f0       	breq	.+50     	; 0x1014 <update_step_board+0xe2>
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient.
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	c0 e0       	ldi	r28, 0x00	; 0
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						//toggle(SECOND_PART_LED);
						toggle(i);
						button[i].state ^= button[i].state;
						sequencer.pattern[sequencer.variation].part[i + offset] ^= 1<<sequencer.current_inst;
     fe8:	0f 2e       	mov	r0, r31
     fea:	f6 e4       	ldi	r31, 0x46	; 70
     fec:	cf 2e       	mov	r12, r31
     fee:	f4 e0       	ldi	r31, 0x04	; 4
     ff0:	df 2e       	mov	r13, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	88 2e       	mov	r8, r24
     ff6:	91 2c       	mov	r9, r1
     ff8:	0f 2e       	mov	r0, r31
     ffa:	fc e4       	ldi	r31, 0x4C	; 76
     ffc:	6f 2e       	mov	r6, r31
     ffe:	f4 e0       	ldi	r31, 0x04	; 4
    1000:	7f 2e       	mov	r7, r31
    1002:	f0 2d       	mov	r31, r0
    1004:	0f 2e       	mov	r0, r31
    1006:	f7 e6       	ldi	r31, 0x67	; 103
    1008:	5f 2e       	mov	r5, r31
    100a:	f0 2d       	mov	r31, r0
    100c:	aa 24       	eor	r10, r10
    100e:	a3 94       	inc	r10
    1010:	b1 2c       	mov	r11, r1
    1012:	71 c0       	rjmp	.+226    	; 0x10f6 <update_step_board+0x1c4>
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	03 c0       	rjmp	.+6      	; 0x101e <update_step_board+0xec>
    1018:	00 e0       	ldi	r16, 0x00	; 0
    101a:	10 e0       	ldi	r17, 0x00	; 0
					
					break; //break or return? or is it needed?
				}
				
				uint8_t step_num = 0;
				uint8_t offset = 0;
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	c0 e0       	ldi	r28, 0x00	; 0
    1020:	d0 e0       	ldi	r29, 0x00	; 0
				
						if (button[i].state) {
					
							toggle(i);
							button[i].state ^= button[i].state;
							sequencer.pattern[sequencer.variation].accent ^= 1<<(i + offset); 
    1022:	0f 2e       	mov	r0, r31
    1024:	f6 e4       	ldi	r31, 0x46	; 70
    1026:	af 2e       	mov	r10, r31
    1028:	f4 e0       	ldi	r31, 0x04	; 4
    102a:	bf 2e       	mov	r11, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	e8 2e       	mov	r14, r24
    1030:	f1 2c       	mov	r15, r1
    1032:	88 24       	eor	r8, r8
    1034:	83 94       	inc	r8
    1036:	91 2c       	mov	r9, r1
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1038:	0f 2e       	mov	r0, r31
    103a:	fc e4       	ldi	r31, 0x4C	; 76
    103c:	6f 2e       	mov	r6, r31
    103e:	f4 e0       	ldi	r31, 0x04	; 4
    1040:	7f 2e       	mov	r7, r31
    1042:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
    1044:	fe 01       	movw	r30, r28
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ee 5e       	subi	r30, 0xEE	; 238
    104c:	fd 4f       	sbci	r31, 0xFD	; 253
    104e:	80 81       	ld	r24, Z
    1050:	86 ff       	sbrs	r24, 6
    1052:	4b c0       	rjmp	.+150    	; 0x10ea <update_step_board+0x1b8>
					
							toggle(i);
    1054:	8c 2f       	mov	r24, r28
    1056:	0e 94 61 04 	call	0x8c2	; 0x8c2 <toggle>
							button[i].state ^= button[i].state;
    105a:	fe 01       	movw	r30, r28
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 5e       	subi	r30, 0xEE	; 238
    1062:	fd 4f       	sbci	r31, 0xFD	; 253
    1064:	80 81       	ld	r24, Z
    1066:	8f 7b       	andi	r24, 0xBF	; 191
    1068:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].accent ^= 1<<(i + offset); 
    106a:	d5 01       	movw	r26, r10
    106c:	8c 91       	ld	r24, X
    106e:	80 fb       	bst	r24, 0
    1070:	cc 24       	eor	r12, r12
    1072:	c0 f8       	bld	r12, 0
    1074:	d1 2c       	mov	r13, r1
    1076:	b7 e6       	ldi	r27, 0x67	; 103
    1078:	bc 9d       	mul	r27, r12
    107a:	c0 01       	movw	r24, r0
    107c:	bd 9d       	mul	r27, r13
    107e:	90 0d       	add	r25, r0
    1080:	11 24       	eor	r1, r1
    1082:	fc 01       	movw	r30, r24
    1084:	e8 54       	subi	r30, 0x48	; 72
    1086:	fc 4f       	sbci	r31, 0xFC	; 252
    1088:	9e 01       	movw	r18, r28
    108a:	2e 0d       	add	r18, r14
    108c:	3f 1d       	adc	r19, r15
    108e:	14 01       	movw	r2, r8
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <update_step_board+0x164>
    1092:	22 0c       	add	r2, r2
    1094:	33 1c       	adc	r3, r3
    1096:	2a 95       	dec	r18
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <update_step_board+0x160>
    109a:	03 2c       	mov	r0, r3
    109c:	00 0c       	add	r0, r0
    109e:	44 08       	sbc	r4, r4
    10a0:	55 08       	sbc	r5, r5
    10a2:	40 81       	ld	r20, Z
    10a4:	51 81       	ldd	r21, Z+1	; 0x01
    10a6:	62 81       	ldd	r22, Z+2	; 0x02
    10a8:	73 81       	ldd	r23, Z+3	; 0x03
    10aa:	42 25       	eor	r20, r2
    10ac:	53 25       	eor	r21, r3
    10ae:	64 25       	eor	r22, r4
    10b0:	75 25       	eor	r23, r5
    10b2:	40 83       	st	Z, r20
    10b4:	51 83       	std	Z+1, r21	; 0x01
    10b6:	62 83       	std	Z+2, r22	; 0x02
    10b8:	73 83       	std	Z+3, r23	; 0x03
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    10ba:	d3 01       	movw	r26, r6
    10bc:	ec 91       	ld	r30, X
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	b2 96       	adiw	r30, 0x22	; 34
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	8e 0f       	add	r24, r30
    10c8:	9f 1f       	adc	r25, r31
    10ca:	fc 01       	movw	r30, r24
    10cc:	ea 58       	subi	r30, 0x8A	; 138
    10ce:	fc 4f       	sbci	r31, 0xFC	; 252
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	94 01       	movw	r18, r8
    10d6:	0c 2e       	mov	r0, r28
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <update_step_board+0x1ac>
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <update_step_board+0x1a8>
    10e2:	82 27       	eor	r24, r18
    10e4:	93 27       	eor	r25, r19
    10e6:	93 83       	std	Z+3, r25	; 0x03
    10e8:	82 83       	std	Z+2, r24	; 0x02
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
    10ea:	21 96       	adiw	r28, 0x01	; 1
    10ec:	0c 17       	cp	r16, r28
    10ee:	1d 07       	cpc	r17, r29
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <update_step_board+0x1c2>
    10f2:	a8 cf       	rjmp	.-176    	; 0x1044 <update_step_board+0x112>
    10f4:	5c c0       	rjmp	.+184    	; 0x11ae <update_step_board+0x27c>
					}
					return;
				}
				for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
    10f6:	fe 01       	movw	r30, r28
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ee 5e       	subi	r30, 0xEE	; 238
    10fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1100:	80 81       	ld	r24, Z
    1102:	86 ff       	sbrs	r24, 6
    1104:	46 c0       	rjmp	.+140    	; 0x1192 <update_step_board+0x260>
						//toggle(SECOND_PART_LED);
						toggle(i);
    1106:	8c 2f       	mov	r24, r28
    1108:	0e 94 61 04 	call	0x8c2	; 0x8c2 <toggle>
						button[i].state ^= button[i].state;
    110c:	fe 01       	movw	r30, r28
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	ee 5e       	subi	r30, 0xEE	; 238
    1114:	fd 4f       	sbci	r31, 0xFD	; 253
    1116:	80 81       	ld	r24, Z
    1118:	8f 7b       	andi	r24, 0xBF	; 191
    111a:	80 83       	st	Z, r24
						sequencer.pattern[sequencer.variation].part[i + offset] ^= 1<<sequencer.current_inst;
    111c:	f6 01       	movw	r30, r12
    111e:	80 81       	ld	r24, Z
    1120:	80 fb       	bst	r24, 0
    1122:	ee 24       	eor	r14, r14
    1124:	e0 f8       	bld	r14, 0
    1126:	f1 2c       	mov	r15, r1
    1128:	d3 01       	movw	r26, r6
    112a:	4c 91       	ld	r20, X
    112c:	24 2f       	mov	r18, r20
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	fe 01       	movw	r30, r28
    1132:	e8 0d       	add	r30, r8
    1134:	f9 1d       	adc	r31, r9
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	5e 9c       	mul	r5, r14
    113c:	c0 01       	movw	r24, r0
    113e:	5f 9c       	mul	r5, r15
    1140:	90 0d       	add	r25, r0
    1142:	11 24       	eor	r1, r1
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
    1148:	ea 58       	subi	r30, 0x8A	; 138
    114a:	fc 4f       	sbci	r31, 0xFC	; 252
    114c:	b5 01       	movw	r22, r10
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <update_step_board+0x222>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	4a 95       	dec	r20
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <update_step_board+0x21e>
    1158:	ab 01       	movw	r20, r22
    115a:	62 81       	ldd	r22, Z+2	; 0x02
    115c:	73 81       	ldd	r23, Z+3	; 0x03
    115e:	46 27       	eor	r20, r22
    1160:	57 27       	eor	r21, r23
    1162:	53 83       	std	Z+3, r21	; 0x03
    1164:	42 83       	std	Z+2, r20	; 0x02
						sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1166:	f9 01       	movw	r30, r18
    1168:	b2 96       	adiw	r30, 0x22	; 34
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	8e 0f       	add	r24, r30
    1170:	9f 1f       	adc	r25, r31
    1172:	fc 01       	movw	r30, r24
    1174:	ea 58       	subi	r30, 0x8A	; 138
    1176:	fc 4f       	sbci	r31, 0xFC	; 252
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	95 01       	movw	r18, r10
    117e:	0c 2e       	mov	r0, r28
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <update_step_board+0x254>
    1182:	22 0f       	add	r18, r18
    1184:	33 1f       	adc	r19, r19
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <update_step_board+0x250>
    118a:	82 27       	eor	r24, r18
    118c:	93 27       	eor	r25, r19
    118e:	93 83       	std	Z+3, r25	; 0x03
    1190:	82 83       	std	Z+2, r24	; 0x02
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient.
    1192:	21 96       	adiw	r28, 0x01	; 1
    1194:	0c 17       	cp	r16, r28
    1196:	1d 07       	cpc	r17, r29
    1198:	0c f0       	brlt	.+2      	; 0x119c <update_step_board+0x26a>
    119a:	ad cf       	rjmp	.-166    	; 0x10f6 <update_step_board+0x1c4>
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <update_step_board+0x27c>
					step_num = sequencer.step_num_second;
					offset = 16; //offset for steps 16-31
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
    119e:	80 91 4c 04 	lds	r24, 0x044C
    11a2:	80 31       	cpi	r24, 0x10	; 16
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <update_step_board+0x276>
    11a6:	38 cf       	rjmp	.-400    	; 0x1018 <update_step_board+0xe6>
					
					break; //break or return? or is it needed?
				}
				
				uint8_t step_num = 0;
				uint8_t offset = 0;
    11a8:	80 e0       	ldi	r24, 0x00	; 0
					}
					
					break; //break or return? or is it needed?
				}
				
				uint8_t step_num = 0;
    11aa:	00 e0       	ldi	r16, 0x00	; 0
    11ac:	1a cf       	rjmp	.-460    	; 0xfe2 <update_step_board+0xb0>
	} else {
		
		//handle what here? changing selected pattern or rhythm? 
		
	}
}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	7f 90       	pop	r7
    11c8:	6f 90       	pop	r6
    11ca:	5f 90       	pop	r5
    11cc:	4f 90       	pop	r4
    11ce:	3f 90       	pop	r3
    11d0:	2f 90       	pop	r2
    11d2:	08 95       	ret

000011d4 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    11d4:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    11d8:	ed ea       	ldi	r30, 0xAD	; 173
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 23       	and	r24, r24
    11e0:	ec f7       	brge	.-6      	; 0x11dc <spi_shift_byte+0x8>
	return SPDR1;
    11e2:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    11e6:	08 95       	ret

000011e8 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    11ec:	c8 e6       	ldi	r28, 0x68	; 104
    11ee:	d2 e0       	ldi	r29, 0x02	; 2
    11f0:	88 81       	ld	r24, Y
    11f2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    121a:	8f 81       	ldd	r24, Y+7	; 0x07
    121c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    1220:	88 85       	ldd	r24, Y+8	; 0x08
    1222:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    1226:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    1228:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <read_switches>:

void read_switches(void) { //reads switch data
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    1234:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
    123c:	c3 e6       	ldi	r28, 0x63	; 99
    123e:	d2 e0       	ldi	r29, 0x02	; 2
    1240:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
    1248:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
    1250:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
    1258:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spi_shift_byte>
    1260:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    1262:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    1264:	28 81       	ld	r18, Y
    1266:	92 2f       	mov	r25, r18
    1268:	96 95       	lsr	r25
    126a:	e7 e7       	ldi	r30, 0x77	; 119
    126c:	f3 e0       	ldi	r31, 0x03	; 3
    126e:	30 81       	ld	r19, Z
    1270:	90 fb       	bst	r25, 0
    1272:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	49 2f       	mov	r20, r25
    1278:	42 95       	swap	r20
    127a:	4f 70       	andi	r20, 0x0F	; 15
    127c:	40 fb       	bst	r20, 0
    127e:	32 f9       	bld	r19, 2
    1280:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    1282:	ee e5       	ldi	r30, 0x5E	; 94
    1284:	f2 e0       	ldi	r31, 0x02	; 2
    1286:	30 81       	ld	r19, Z
    1288:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    128a:	32 27       	eor	r19, r18
    128c:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    128e:	23 23       	and	r18, r19
    1290:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    1292:	31 81       	ldd	r19, Z+1	; 0x01
    1294:	29 81       	ldd	r18, Y+1	; 0x01
    1296:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    1298:	32 27       	eor	r19, r18
    129a:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    129c:	23 23       	and	r18, r19
    129e:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    12a0:	22 81       	ldd	r18, Z+2	; 0x02
    12a2:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    12a4:	29 27       	eor	r18, r25
    12a6:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    12a8:	92 23       	and	r25, r18
    12aa:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    12ac:	23 81       	ldd	r18, Z+3	; 0x03
    12ae:	9b 81       	ldd	r25, Y+3	; 0x03
    12b0:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    12b2:	29 27       	eor	r18, r25
    12b4:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    12b6:	92 23       	and	r25, r18
    12b8:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    12ba:	94 81       	ldd	r25, Z+4	; 0x04
    12bc:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    12be:	98 27       	eor	r25, r24
    12c0:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    12c2:	89 23       	and	r24, r25
    12c4:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    12d0:	da 01       	movw	r26, r20
    12d2:	aa 0f       	add	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	ae 5e       	subi	r26, 0xEE	; 238
    12d8:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    12da:	8c 91       	ld	r24, X
    12dc:	e8 2f       	mov	r30, r24
    12de:	e6 95       	lsr	r30
    12e0:	e6 95       	lsr	r30
    12e2:	e6 95       	lsr	r30
    12e4:	e7 70       	andi	r30, 0x07	; 7
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ed 59       	subi	r30, 0x9D	; 157
    12ea:	fd 4f       	sbci	r31, 0xFD	; 253
    12ec:	20 81       	ld	r18, Z
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	98 2f       	mov	r25, r24
    12f2:	97 70       	andi	r25, 0x07	; 7
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <parse_switch_data+0x2e>
    12f6:	35 95       	asr	r19
    12f8:	27 95       	ror	r18
    12fa:	9a 95       	dec	r25
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <parse_switch_data+0x2a>
    12fe:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    1300:	86 fb       	bst	r24, 6
    1302:	99 27       	eor	r25, r25
    1304:	90 f9       	bld	r25, 0
    1306:	29 27       	eor	r18, r25
    1308:	20 fb       	bst	r18, 0
    130a:	86 f9       	bld	r24, 6
    130c:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    130e:	4f 5f       	subi	r20, 0xFF	; 255
    1310:	5f 4f       	sbci	r21, 0xFF	; 255
    1312:	43 32       	cpi	r20, 0x23	; 35
    1314:	51 05       	cpc	r21, r1
    1316:	e1 f6       	brne	.-72     	; 0x12d0 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    1318:	08 95       	ret

0000131a <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    131a:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    131c:	80 91 71 02 	lds	r24, 0x0271
    1320:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    1322:	89 27       	eor	r24, r25
    1324:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    1328:	89 23       	and	r24, r25
    132a:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
    132e:	e7 e7       	ldi	r30, 0x77	; 119
    1330:	f3 e0       	ldi	r31, 0x03	; 3
    1332:	90 81       	ld	r25, Z
    1334:	91 fb       	bst	r25, 1
    1336:	22 27       	eor	r18, r18
    1338:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    133a:	86 95       	lsr	r24
    133c:	82 27       	eor	r24, r18
    133e:	80 fb       	bst	r24, 0
    1340:	91 f9       	bld	r25, 1
    1342:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    1344:	91 ff       	sbrs	r25, 1
    1346:	34 c0       	rjmp	.+104    	; 0x13b0 <check_start_stop_tap+0x96>
    1348:	21 11       	cpse	r18, r1
    134a:	34 c0       	rjmp	.+104    	; 0x13b4 <check_start_stop_tap+0x9a>
		
		sequencer.current_step = 0;
    134c:	e8 e4       	ldi	r30, 0x48	; 72
    134e:	f4 e0       	ldi	r31, 0x04	; 4
    1350:	81 81       	ldd	r24, Z+1	; 0x01
    1352:	8f 70       	andi	r24, 0x0F	; 15
    1354:	81 83       	std	Z+1, r24	; 0x01
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	82 83       	std	Z+2, r24	; 0x02
		flag.next_step = 1;
    135c:	80 91 75 03 	lds	r24, 0x0375
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1360:	10 92 74 02 	sts	0x0274, r1
		flag.variation_change = 0;
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	8b 7f       	andi	r24, 0xFB	; 251
    1368:	80 93 75 03 	sts	0x0375, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    136c:	80 91 47 04 	lds	r24, 0x0447
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	31 f4       	brne	.+12     	; 0x1380 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    1374:	e6 e4       	ldi	r30, 0x46	; 70
    1376:	f4 e0       	ldi	r31, 0x04	; 4
    1378:	80 81       	ld	r24, Z
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	80 83       	st	Z, r24
    137e:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
    1380:	e6 e4       	ldi	r30, 0x46	; 70
    1382:	f4 e0       	ldi	r31, 0x04	; 4
    1384:	80 81       	ld	r24, Z
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 83       	st	Z, r24
    138a:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
    138c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1390:	80 91 4c 04 	lds	r24, 0x044C
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	fc 01       	movw	r30, r24
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	e8 0f       	add	r30, r24
    139e:	f9 1f       	adc	r31, r25
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	e0 50       	subi	r30, 0x00	; 0
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	85 81       	ldd	r24, Z+5	; 0x05
    13aa:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
    13ae:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    13b0:	21 30       	cpi	r18, 0x01	; 1
    13b2:	61 f3       	breq	.-40     	; 0x138c <check_start_stop_tap+0x72>
    13b4:	08 95       	ret

000013b6 <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
    13b6:	3f 92       	push	r3
    13b8:	4f 92       	push	r4
    13ba:	5f 92       	push	r5
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	0f 2e       	mov	r0, r31
    13da:	f5 e0       	ldi	r31, 0x05	; 5
    13dc:	ef 2e       	mov	r14, r31
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	ff 2e       	mov	r15, r31
    13e2:	f0 2d       	mov	r31, r0
    13e4:	0f 2e       	mov	r0, r31
    13e6:	fb e3       	ldi	r31, 0x3B	; 59
    13e8:	8f 2e       	mov	r8, r31
    13ea:	f1 e0       	ldi	r31, 0x01	; 1
    13ec:	9f 2e       	mov	r9, r31
    13ee:	f0 2d       	mov	r31, r0
    13f0:	02 e1       	ldi	r16, 0x12	; 18
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	c1 e1       	ldi	r28, 0x11	; 17
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
    13f8:	c1 2c       	mov	r12, r1
    13fa:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    13fc:	0f 2e       	mov	r0, r31
    13fe:	fc e4       	ldi	r31, 0x4C	; 76
    1400:	af 2e       	mov	r10, r31
    1402:	f4 e0       	ldi	r31, 0x04	; 4
    1404:	bf 2e       	mov	r11, r31
    1406:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    1408:	0f 2e       	mov	r0, r31
    140a:	ff e5       	ldi	r31, 0x5F	; 95
    140c:	4f 2e       	mov	r4, r31
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	5f 2e       	mov	r5, r31
    1412:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    1414:	0f 2e       	mov	r0, r31
    1416:	ff e0       	ldi	r31, 0x0F	; 15
    1418:	3f 2e       	mov	r3, r31
    141a:	f0 2d       	mov	r31, r0
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <check_inst_switches+0x80>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	c8 1a       	sub	r12, r24
    1422:	d8 0a       	sbc	r13, r24
    1424:	21 96       	adiw	r28, 0x01	; 1
    1426:	0f 5f       	subi	r16, 0xFF	; 255
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	a6 e0       	ldi	r26, 0x06	; 6
    142c:	ea 0e       	add	r14, r26
    142e:	f1 1c       	adc	r15, r1
    1430:	b6 e0       	ldi	r27, 0x06	; 6
    1432:	8b 0e       	add	r8, r27
    1434:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    1436:	fe 01       	movw	r30, r28
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	ee 5e       	subi	r30, 0xEE	; 238
    143e:	fd 4f       	sbci	r31, 0xFD	; 253
    1440:	80 81       	ld	r24, Z
    1442:	86 ff       	sbrs	r24, 6
    1444:	37 c0       	rjmp	.+110    	; 0x14b4 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1446:	fe 01       	movw	r30, r28
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	ee 5e       	subi	r30, 0xEE	; 238
    144e:	fd 4f       	sbci	r31, 0xFD	; 253
    1450:	8f 7b       	andi	r24, 0xBF	; 191
    1452:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    1454:	0e 94 74 04 	call	0x8e8	; 0x8e8 <turn_off_all_inst_leds>
    1458:	f7 01       	movw	r30, r14
    145a:	d7 01       	movw	r26, r14
    145c:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    145e:	8c 91       	ld	r24, X
    1460:	8f 3f       	cpi	r24, 0xFF	; 255
    1462:	a9 f0       	breq	.+42     	; 0x148e <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1464:	d5 01       	movw	r26, r10
    1466:	8c 91       	ld	r24, X
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	c8 16       	cp	r12, r24
    146c:	d9 06       	cpc	r13, r25
    146e:	49 f4       	brne	.+18     	; 0x1482 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1470:	f4 01       	movw	r30, r8
    1472:	80 81       	ld	r24, Z
    1474:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
    1478:	89 e0       	ldi	r24, 0x09	; 9
    147a:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    147c:	d5 01       	movw	r26, r10
    147e:	8c 93       	st	X, r24
    1480:	19 c0       	rjmp	.+50     	; 0x14b4 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1482:	80 81       	ld	r24, Z
    1484:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    1488:	f5 01       	movw	r30, r10
    148a:	c0 82       	st	Z, r12
    148c:	13 c0       	rjmp	.+38     	; 0x14b4 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    148e:	d5 01       	movw	r26, r10
    1490:	8c 91       	ld	r24, X
    1492:	86 30       	cpi	r24, 0x06	; 6
    1494:	51 f4       	brne	.+20     	; 0x14aa <check_inst_switches+0xf4>
    1496:	c7 31       	cpi	r28, 0x17	; 23
    1498:	d1 05       	cpc	r29, r1
    149a:	39 f4       	brne	.+14     	; 0x14aa <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    149c:	f2 01       	movw	r30, r4
    149e:	80 81       	ld	r24, Z
    14a0:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
					sequencer.current_inst = MA;
    14a4:	d5 01       	movw	r26, r10
    14a6:	3c 92       	st	X, r3
    14a8:	ba cf       	rjmp	.-140    	; 0x141e <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    14aa:	80 81       	ld	r24, Z
    14ac:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    14b0:	f5 01       	movw	r30, r10
    14b2:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    14b4:	0c 31       	cpi	r16, 0x1C	; 28
    14b6:	11 05       	cpc	r17, r1
    14b8:	0c f4       	brge	.+2      	; 0x14bc <check_inst_switches+0x106>
    14ba:	b1 cf       	rjmp	.-158    	; 0x141e <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    14bc:	80 91 32 02 	lds	r24, 0x0232
    14c0:	86 ff       	sbrs	r24, 6
    14c2:	0c c0       	rjmp	.+24     	; 0x14dc <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    14c4:	e2 e3       	ldi	r30, 0x32	; 50
    14c6:	f2 e0       	ldi	r31, 0x02	; 2
    14c8:	8f 7b       	andi	r24, 0xBF	; 191
    14ca:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    14cc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    14d0:	84 e1       	ldi	r24, 0x14	; 20
    14d2:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
		sequencer.current_inst = AC;
    14d6:	80 e1       	ldi	r24, 0x10	; 16
    14d8:	80 93 4c 04 	sts	0x044C, r24
	}
	
}	
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	7f 90       	pop	r7
    14f6:	6f 90       	pop	r6
    14f8:	5f 90       	pop	r5
    14fa:	4f 90       	pop	r4
    14fc:	3f 90       	pop	r3
    14fe:	08 95       	ret

00001500 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    1500:	80 91 4e 02 	lds	r24, 0x024E
    1504:	86 ff       	sbrs	r24, 6
    1506:	29 c0       	rjmp	.+82     	; 0x155a <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    1508:	ee e4       	ldi	r30, 0x4E	; 78
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	8f 7b       	andi	r24, 0xBF	; 191
    150e:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    1510:	e7 e4       	ldi	r30, 0x47	; 71
    1512:	f4 e0       	ldi	r31, 0x04	; 4
    1514:	80 81       	ld	r24, Z
    1516:	8f 5f       	subi	r24, 0xFF	; 255
    1518:	80 83       	st	Z, r24
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	39 f4       	brne	.+14     	; 0x152c <check_variation_switches+0x2c>
    151e:	10 92 47 04 	sts	0x0447, r1
		if (sequencer.START) {
    1522:	80 91 77 03 	lds	r24, 0x0377
    1526:	81 ff       	sbrs	r24, 1
    1528:	0d c0       	rjmp	.+26     	; 0x1544 <check_variation_switches+0x44>
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <check_variation_switches+0x34>
    152c:	90 91 77 03 	lds	r25, 0x0377
    1530:	91 ff       	sbrs	r25, 1
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    1534:	80 91 75 03 	lds	r24, 0x0375
    1538:	84 60       	ori	r24, 0x04	; 4
    153a:	80 93 75 03 	sts	0x0375, r24
    153e:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	31 f4       	brne	.+12     	; 0x1550 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1544:	e6 e4       	ldi	r30, 0x46	; 70
    1546:	f4 e0       	ldi	r31, 0x04	; 4
    1548:	80 81       	ld	r24, Z
    154a:	8e 7f       	andi	r24, 0xFE	; 254
    154c:	80 83       	st	Z, r24
    154e:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1550:	e6 e4       	ldi	r30, 0x46	; 70
    1552:	f4 e0       	ldi	r31, 0x04	; 4
    1554:	80 81       	ld	r24, Z
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	80 83       	st	Z, r24
    155a:	08 95       	ret

0000155c <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1568:	80 91 77 03 	lds	r24, 0x0377
    156c:	86 70       	andi	r24, 0x06	; 6
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	e1 f5       	brne	.+120    	; 0x15ea <check_clear_switch+0x8e>
		
		switch (sequencer.mode) {
    1572:	80 91 76 03 	lds	r24, 0x0376
    1576:	81 11       	cpse	r24, r1
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <check_clear_switch+0x9c>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    157a:	8c e1       	ldi	r24, 0x1C	; 28
    157c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1580:	e6 e4       	ldi	r30, 0x46	; 70
    1582:	f4 e0       	ldi	r31, 0x04	; 4
    1584:	80 81       	ld	r24, Z
    1586:	80 fb       	bst	r24, 0
    1588:	ee 24       	eor	r14, r14
    158a:	e0 f8       	bld	r14, 0
    158c:	f1 2c       	mov	r15, r1
    158e:	87 e6       	ldi	r24, 0x67	; 103
    1590:	8e 9d       	mul	r24, r14
    1592:	d0 01       	movw	r26, r0
    1594:	8f 9d       	mul	r24, r15
    1596:	b0 0d       	add	r27, r0
    1598:	11 24       	eor	r1, r1
    159a:	a8 58       	subi	r26, 0x88	; 136
    159c:	bc 4f       	sbci	r27, 0xFC	; 252
    159e:	90 e4       	ldi	r25, 0x40	; 64
    15a0:	ed 01       	movw	r28, r26
    15a2:	19 92       	st	Y+, r1
    15a4:	9a 95       	dec	r25
    15a6:	e9 f7       	brne	.-6      	; 0x15a2 <check_clear_switch+0x46>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    15a8:	90 81       	ld	r25, Z
    15aa:	09 2f       	mov	r16, r25
    15ac:	01 70       	andi	r16, 0x01	; 1
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	80 9f       	mul	r24, r16
    15b2:	d0 01       	movw	r26, r0
    15b4:	81 9f       	mul	r24, r17
    15b6:	b0 0d       	add	r27, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	a4 54       	subi	r26, 0x44	; 68
    15bc:	bc 4f       	sbci	r27, 0xFC	; 252
    15be:	92 e2       	ldi	r25, 0x22	; 34
    15c0:	ed 01       	movw	r28, r26
    15c2:	19 92       	st	Y+, r1
    15c4:	9a 95       	dec	r25
    15c6:	e9 f7       	brne	.-6      	; 0x15c2 <check_clear_switch+0x66>
				sequencer.pattern[sequencer.variation].accent = 0;				
    15c8:	90 81       	ld	r25, Z
    15ca:	91 70       	andi	r25, 0x01	; 1
    15cc:	c9 2f       	mov	r28, r25
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	d9 2f       	mov	r29, r25
    15d2:	8c 9f       	mul	r24, r28
    15d4:	f0 01       	movw	r30, r0
    15d6:	8d 9f       	mul	r24, r29
    15d8:	f0 0d       	add	r31, r0
    15da:	11 24       	eor	r1, r1
    15dc:	e8 54       	subi	r30, 0x48	; 72
    15de:	fc 4f       	sbci	r31, 0xFC	; 252
    15e0:	10 82       	st	Z, r1
    15e2:	11 82       	std	Z+1, r1	; 0x01
    15e4:	12 82       	std	Z+2, r1	; 0x02
    15e6:	13 82       	std	Z+3, r1	; 0x03
				break;
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <check_clear_switch+0x9c>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    15ea:	80 91 76 03 	lds	r24, 0x0376
    15ee:	81 11       	cpse	r24, r1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <check_clear_switch+0x9c>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    15f2:	8c e1       	ldi	r24, 0x1C	; 28
    15f4:	0e 94 24 04 	call	0x848	; 0x848 <turn_on>
		}
		
	}
	
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	08 95       	ret

00001606 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1606:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1608:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    160a:	74 83       	std	Z+4, r23	; 0x04
    160c:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    160e:	11 82       	std	Z+1, r1	; 0x01
    1610:	10 82       	st	Z, r1
    1612:	08 95       	ret

00001614 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	ec 01       	movw	r28, r24
    1620:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1622:	0e 94 83 0b 	call	0x1706	; 0x1706 <store_and_clear_interrupt>
    1626:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1628:	f9 80       	ldd	r15, Y+1	; 0x01
    162a:	4f 2d       	mov	r20, r15
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	ca 01       	movw	r24, r20
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	2a 81       	ldd	r18, Y+2	; 0x02
    1634:	62 2f       	mov	r22, r18
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divmodhi4>
    163c:	28 81       	ld	r18, Y
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	29 f4       	brne	.+10     	; 0x1650 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1646:	81 2f       	mov	r24, r17
    1648:	0e 94 86 0b 	call	0x170c	; 0x170c <restore_interrupt_setting>
      return false;
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	12 c0       	rjmp	.+36     	; 0x1674 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1650:	eb 81       	ldd	r30, Y+3	; 0x03
    1652:	fc 81       	ldd	r31, Y+4	; 0x04
    1654:	ef 0d       	add	r30, r15
    1656:	f1 1d       	adc	r31, r1
    1658:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    165a:	29 81       	ldd	r18, Y+1	; 0x01
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	c9 01       	movw	r24, r18
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	6a 81       	ldd	r22, Y+2	; 0x02
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divmodhi4>
    166a:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    166c:	81 2f       	mov	r24, r17
    166e:	0e 94 86 0b 	call	0x170c	; 0x170c <restore_interrupt_setting>
      return true;
    1672:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	08 95       	ret

00001680 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1686:	0e 94 83 0b 	call	0x1706	; 0x1706 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    168a:	39 81       	ldd	r19, Y+1	; 0x01
    168c:	28 81       	ld	r18, Y
    168e:	32 17       	cp	r19, r18
    1690:	18 f0       	brcs	.+6      	; 0x1698 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1692:	c3 2f       	mov	r28, r19
    1694:	c2 1b       	sub	r28, r18
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <bytequeue_length+0x20>
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	c3 2f       	mov	r28, r19
    169c:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    169e:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    16a0:	0e 94 86 0b 	call	0x170c	; 0x170c <restore_interrupt_setting>
   return len;
}
    16a4:	8c 2f       	mov	r24, r28
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    16ac:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    16ae:	80 81       	ld	r24, Z
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	9b 01       	movw	r18, r22
    16b4:	28 0f       	add	r18, r24
    16b6:	31 1d       	adc	r19, r1
    16b8:	c9 01       	movw	r24, r18
    16ba:	62 81       	ldd	r22, Z+2	; 0x02
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divmodhi4>
    16c2:	03 80       	ldd	r0, Z+3	; 0x03
    16c4:	f4 81       	ldd	r31, Z+4	; 0x04
    16c6:	e0 2d       	mov	r30, r0
    16c8:	e8 0f       	add	r30, r24
    16ca:	f9 1f       	adc	r31, r25
}
    16cc:	80 81       	ld	r24, Z
    16ce:	08 95       	ret

000016d0 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ec 01       	movw	r28, r24
    16d8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    16da:	0e 94 83 0b 	call	0x1706	; 0x1706 <store_and_clear_interrupt>
    16de:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    16e0:	88 81       	ld	r24, Y
    16e2:	21 2f       	mov	r18, r17
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	b9 01       	movw	r22, r18
    16e8:	68 0f       	add	r22, r24
    16ea:	71 1d       	adc	r23, r1
    16ec:	cb 01       	movw	r24, r22
    16ee:	6a 81       	ldd	r22, Y+2	; 0x02
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divmodhi4>
    16f6:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    16f8:	84 2f       	mov	r24, r20
    16fa:	0e 94 86 0b 	call	0x170c	; 0x170c <restore_interrupt_setting>
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	08 95       	ret

00001706 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1706:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1708:	f8 94       	cli
   return sreg;
}
    170a:	08 95       	ret

0000170c <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    170c:	8f bf       	out	0x3f, r24	; 63
    170e:	08 95       	ret

00001710 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1710:	88 1f       	adc	r24, r24
    1712:	88 27       	eor	r24, r24
    1714:	88 1f       	adc	r24, r24
    1716:	08 95       	ret

00001718 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	88 3f       	cpi	r24, 0xF8	; 248
    171c:	08 f4       	brcc	.+2      	; 0x1720 <midi_is_realtime+0x8>
    171e:	90 e0       	ldi	r25, 0x00	; 0
}
    1720:	89 2f       	mov	r24, r25
    1722:	08 95       	ret

00001724 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1724:	98 2f       	mov	r25, r24
    1726:	90 7f       	andi	r25, 0xF0	; 240
    1728:	90 3c       	cpi	r25, 0xC0	; 192
    172a:	b1 f0       	breq	.+44     	; 0x1758 <midi_packet_length+0x34>
    172c:	58 f4       	brcc	.+22     	; 0x1744 <midi_packet_length+0x20>
    172e:	90 39       	cpi	r25, 0x90	; 144
    1730:	41 f1       	breq	.+80     	; 0x1782 <midi_packet_length+0x5e>
    1732:	18 f4       	brcc	.+6      	; 0x173a <midi_packet_length+0x16>
    1734:	90 38       	cpi	r25, 0x80	; 128
    1736:	19 f5       	brne	.+70     	; 0x177e <midi_packet_length+0x5a>
    1738:	24 c0       	rjmp	.+72     	; 0x1782 <midi_packet_length+0x5e>
    173a:	90 3a       	cpi	r25, 0xA0	; 160
    173c:	11 f1       	breq	.+68     	; 0x1782 <midi_packet_length+0x5e>
    173e:	90 3b       	cpi	r25, 0xB0	; 176
    1740:	f1 f4       	brne	.+60     	; 0x177e <midi_packet_length+0x5a>
    1742:	1f c0       	rjmp	.+62     	; 0x1782 <midi_packet_length+0x5e>
    1744:	90 3e       	cpi	r25, 0xE0	; 224
    1746:	e9 f0       	breq	.+58     	; 0x1782 <midi_packet_length+0x5e>
    1748:	18 f4       	brcc	.+6      	; 0x1750 <midi_packet_length+0x2c>
    174a:	90 3d       	cpi	r25, 0xD0	; 208
    174c:	29 f0       	breq	.+10     	; 0x1758 <midi_packet_length+0x34>
    174e:	17 c0       	rjmp	.+46     	; 0x177e <midi_packet_length+0x5a>
    1750:	90 3f       	cpi	r25, 0xF0	; 240
    1752:	21 f0       	breq	.+8      	; 0x175c <midi_packet_length+0x38>
    1754:	93 3f       	cpi	r25, 0xF3	; 243
    1756:	99 f4       	brne	.+38     	; 0x177e <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	08 95       	ret
      case 0xF0:
         switch(status) {
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	e1 5f       	subi	r30, 0xF1	; 241
    1762:	f1 09       	sbc	r31, r1
    1764:	ef 30       	cpi	r30, 0x0F	; 15
    1766:	f1 05       	cpc	r31, r1
    1768:	40 f4       	brcc	.+16     	; 0x177a <midi_packet_length+0x56>
    176a:	e6 5a       	subi	r30, 0xA6	; 166
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret
         }
      default:
         return UNDEFINED;
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1788:	08 95       	ret

0000178a <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    178a:	fc 01       	movw	r30, r24
    178c:	75 83       	std	Z+5, r23	; 0x05
    178e:	64 83       	std	Z+4, r22	; 0x04
    1790:	08 95       	ret

00001792 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1792:	fc 01       	movw	r30, r24
    1794:	77 83       	std	Z+7, r23	; 0x07
    1796:	66 83       	std	Z+6, r22	; 0x06
    1798:	08 95       	ret

0000179a <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    179a:	fc 01       	movw	r30, r24
    179c:	77 8b       	std	Z+23, r23	; 0x17
    179e:	66 8b       	std	Z+22, r22	; 0x16
    17a0:	08 95       	ret

000017a2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    17a8:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    17aa:	1f a2       	std	Y+39, r1	; 0x27
    17ac:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    17ae:	bc 01       	movw	r22, r24
    17b0:	68 5d       	subi	r22, 0xD8	; 216
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	40 ec       	ldi	r20, 0xC0	; 192
    17b6:	88 51       	subi	r24, 0x18	; 24
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	0e 94 03 0b 	call	0x1606	; 0x1606 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    17be:	1b 82       	std	Y+3, r1	; 0x03
    17c0:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    17c2:	1d 82       	std	Y+5, r1	; 0x05
    17c4:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    17c6:	1f 82       	std	Y+7, r1	; 0x07
    17c8:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    17ca:	19 86       	std	Y+9, r1	; 0x09
    17cc:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    17ce:	1b 86       	std	Y+11, r1	; 0x0b
    17d0:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    17d2:	1d 86       	std	Y+13, r1	; 0x0d
    17d4:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    17d6:	1f 86       	std	Y+15, r1	; 0x0f
    17d8:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    17da:	19 8a       	std	Y+17, r1	; 0x11
    17dc:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    17de:	1b 8a       	std	Y+19, r1	; 0x13
    17e0:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    17e2:	1d 8a       	std	Y+21, r1	; 0x15
    17e4:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    17e6:	1f 8a       	std	Y+23, r1	; 0x17
    17e8:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    17ea:	19 8e       	std	Y+25, r1	; 0x19
    17ec:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    17ee:	1b 8e       	std	Y+27, r1	; 0x1b
    17f0:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    17f2:	1d 8e       	std	Y+29, r1	; 0x1d
    17f4:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    17f6:	1f 8e       	std	Y+31, r1	; 0x1f
    17f8:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    17fa:	19 a2       	std	Y+33, r1	; 0x21
    17fc:	18 a2       	std	Y+32, r1	; 0x20
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1810:	66 23       	and	r22, r22
    1812:	99 f0       	breq	.+38     	; 0x183a <midi_device_input+0x36>
    1814:	ea 01       	movw	r28, r20
    1816:	61 50       	subi	r22, 0x01	; 1
    1818:	06 2f       	mov	r16, r22
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	04 0f       	add	r16, r20
    1822:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1824:	7c 01       	movw	r14, r24
    1826:	28 ee       	ldi	r18, 0xE8	; 232
    1828:	e2 0e       	add	r14, r18
    182a:	f1 1c       	adc	r15, r1
    182c:	69 91       	ld	r22, Y+
    182e:	c7 01       	movw	r24, r14
    1830:	0e 94 0a 0b 	call	0x1614	; 0x1614 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1834:	c0 17       	cp	r28, r16
    1836:	d1 07       	cpc	r29, r17
    1838:	c9 f7       	brne	.-14     	; 0x182c <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	08 95       	ret

00001848 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	00 d0       	rcall	.+0      	; 0x185e <midi_input_callbacks+0x16>
    185e:	1f 92       	push	r1
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	7c 01       	movw	r14, r24
    1866:	6b 01       	movw	r12, r22
    1868:	14 2f       	mov	r17, r20
    186a:	b2 2e       	mov	r11, r18
    186c:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    186e:	dc 01       	movw	r26, r24
    1870:	95 96       	adiw	r26, 0x25	; 37
    1872:	8c 91       	ld	r24, X
    1874:	95 97       	sbiw	r26, 0x25	; 37
    1876:	84 30       	cpi	r24, 0x04	; 4
    1878:	11 f5       	brne	.+68     	; 0x18be <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    187a:	5a 96       	adiw	r26, 0x1a	; 26
    187c:	ed 91       	ld	r30, X+
    187e:	fc 91       	ld	r31, X
    1880:	5b 97       	sbiw	r26, 0x1b	; 27
    1882:	30 97       	sbiw	r30, 0x00	; 0
    1884:	09 f4       	brne	.+2      	; 0x1888 <midi_input_callbacks+0x40>
    1886:	cc c0       	rjmp	.+408    	; 0x1a20 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1888:	9b 01       	movw	r18, r22
    188a:	21 50       	subi	r18, 0x01	; 1
    188c:	31 09       	sbc	r19, r1
    188e:	ab ea       	ldi	r26, 0xAB	; 171
    1890:	ba ea       	ldi	r27, 0xAA	; 170
    1892:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__umulhisi3>
    1896:	96 95       	lsr	r25
    1898:	87 95       	ror	r24
    189a:	9c 01       	movw	r18, r24
    189c:	22 0f       	add	r18, r18
    189e:	33 1f       	adc	r19, r19
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    18a4:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    18a6:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    18a8:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    18aa:	4c 2d       	mov	r20, r12
    18ac:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    18ae:	9e 01       	movw	r18, r28
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	68 2f       	mov	r22, r24
    18b6:	79 2f       	mov	r23, r25
    18b8:	c7 01       	movw	r24, r14
    18ba:	09 95       	icall
    18bc:	be c0       	rjmp	.+380    	; 0x1a3a <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    18be:	62 30       	cpi	r22, 0x02	; 2
    18c0:	71 05       	cpc	r23, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <midi_input_callbacks+0x7e>
    18c4:	55 c0       	rjmp	.+170    	; 0x1970 <midi_input_callbacks+0x128>
    18c6:	63 30       	cpi	r22, 0x03	; 3
    18c8:	71 05       	cpc	r23, r1
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <midi_input_callbacks+0x8e>
    18cc:	61 30       	cpi	r22, 0x01	; 1
    18ce:	71 05       	cpc	r23, r1
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <midi_input_callbacks+0x8c>
    18d2:	a1 c0       	rjmp	.+322    	; 0x1a16 <midi_input_callbacks+0x1ce>
    18d4:	88 c0       	rjmp	.+272    	; 0x19e6 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    18d6:	84 2f       	mov	r24, r20
    18d8:	80 7f       	andi	r24, 0xF0	; 240
    18da:	80 3a       	cpi	r24, 0xA0	; 160
    18dc:	f1 f0       	breq	.+60     	; 0x191a <midi_input_callbacks+0xd2>
    18de:	28 f4       	brcc	.+10     	; 0x18ea <midi_input_callbacks+0xa2>
    18e0:	80 38       	cpi	r24, 0x80	; 128
    18e2:	a9 f0       	breq	.+42     	; 0x190e <midi_input_callbacks+0xc6>
    18e4:	80 39       	cpi	r24, 0x90	; 144
    18e6:	69 f0       	breq	.+26     	; 0x1902 <midi_input_callbacks+0xba>
    18e8:	2f c0       	rjmp	.+94     	; 0x1948 <midi_input_callbacks+0x100>
    18ea:	80 3e       	cpi	r24, 0xE0	; 224
    18ec:	e1 f0       	breq	.+56     	; 0x1926 <midi_input_callbacks+0xde>
    18ee:	80 3f       	cpi	r24, 0xF0	; 240
    18f0:	01 f1       	breq	.+64     	; 0x1932 <midi_input_callbacks+0xea>
    18f2:	80 3b       	cpi	r24, 0xB0	; 176
    18f4:	49 f5       	brne	.+82     	; 0x1948 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    18f6:	d7 01       	movw	r26, r14
    18f8:	12 96       	adiw	r26, 0x02	; 2
    18fa:	ed 91       	ld	r30, X+
    18fc:	fc 91       	ld	r31, X
    18fe:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1900:	25 c0       	rjmp	.+74     	; 0x194c <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1902:	d7 01       	movw	r26, r14
    1904:	14 96       	adiw	r26, 0x04	; 4
    1906:	ed 91       	ld	r30, X+
    1908:	fc 91       	ld	r31, X
    190a:	15 97       	sbiw	r26, 0x05	; 5
              break;
    190c:	1f c0       	rjmp	.+62     	; 0x194c <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    190e:	d7 01       	movw	r26, r14
    1910:	16 96       	adiw	r26, 0x06	; 6
    1912:	ed 91       	ld	r30, X+
    1914:	fc 91       	ld	r31, X
    1916:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1918:	19 c0       	rjmp	.+50     	; 0x194c <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    191a:	d7 01       	movw	r26, r14
    191c:	18 96       	adiw	r26, 0x08	; 8
    191e:	ed 91       	ld	r30, X+
    1920:	fc 91       	ld	r31, X
    1922:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1924:	13 c0       	rjmp	.+38     	; 0x194c <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1926:	d7 01       	movw	r26, r14
    1928:	1a 96       	adiw	r26, 0x0a	; 10
    192a:	ed 91       	ld	r30, X+
    192c:	fc 91       	ld	r31, X
    192e:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1930:	0d c0       	rjmp	.+26     	; 0x194c <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1932:	42 3f       	cpi	r20, 0xF2	; 242
    1934:	09 f0       	breq	.+2      	; 0x1938 <midi_input_callbacks+0xf0>
    1936:	74 c0       	rjmp	.+232    	; 0x1a20 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1938:	d7 01       	movw	r26, r14
    193a:	1c 96       	adiw	r26, 0x0c	; 12
    193c:	ed 91       	ld	r30, X+
    193e:	fc 91       	ld	r31, X
    1940:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1942:	30 97       	sbiw	r30, 0x00	; 0
    1944:	41 f4       	brne	.+16     	; 0x1956 <midi_input_callbacks+0x10e>
    1946:	6c c0       	rjmp	.+216    	; 0x1a20 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1948:	e0 e0       	ldi	r30, 0x00	; 0
    194a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    194c:	30 97       	sbiw	r30, 0x00	; 0
    194e:	09 f4       	brne	.+2      	; 0x1952 <midi_input_callbacks+0x10a>
    1950:	67 c0       	rjmp	.+206    	; 0x1a20 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1952:	12 3f       	cpi	r17, 0xF2	; 242
    1954:	31 f4       	brne	.+12     	; 0x1962 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1956:	2a 2d       	mov	r18, r10
    1958:	4b 2d       	mov	r20, r11
    195a:	62 ef       	ldi	r22, 0xF2	; 242
    195c:	c7 01       	movw	r24, r14
    195e:	09 95       	icall
    1960:	6c c0       	rjmp	.+216    	; 0x1a3a <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1962:	2a 2d       	mov	r18, r10
    1964:	4b 2d       	mov	r20, r11
    1966:	61 2f       	mov	r22, r17
    1968:	6f 70       	andi	r22, 0x0F	; 15
    196a:	c7 01       	movw	r24, r14
    196c:	09 95       	icall
    196e:	65 c0       	rjmp	.+202    	; 0x1a3a <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1970:	84 2f       	mov	r24, r20
    1972:	80 7f       	andi	r24, 0xF0	; 240
    1974:	80 3d       	cpi	r24, 0xD0	; 208
    1976:	51 f0       	breq	.+20     	; 0x198c <midi_input_callbacks+0x144>
    1978:	80 3f       	cpi	r24, 0xF0	; 240
    197a:	71 f0       	breq	.+28     	; 0x1998 <midi_input_callbacks+0x150>
    197c:	80 3c       	cpi	r24, 0xC0	; 192
    197e:	01 f5       	brne	.+64     	; 0x19c0 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1980:	d7 01       	movw	r26, r14
    1982:	1e 96       	adiw	r26, 0x0e	; 14
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    198a:	1c c0       	rjmp	.+56     	; 0x19c4 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    198c:	d7 01       	movw	r26, r14
    198e:	50 96       	adiw	r26, 0x10	; 16
    1990:	ed 91       	ld	r30, X+
    1992:	fc 91       	ld	r31, X
    1994:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1996:	16 c0       	rjmp	.+44     	; 0x19c4 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1998:	43 3f       	cpi	r20, 0xF3	; 243
    199a:	41 f4       	brne	.+16     	; 0x19ac <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    199c:	d7 01       	movw	r26, r14
    199e:	52 96       	adiw	r26, 0x12	; 18
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	99 f4       	brne	.+38     	; 0x19d0 <midi_input_callbacks+0x188>
    19aa:	3a c0       	rjmp	.+116    	; 0x1a20 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    19ac:	41 3f       	cpi	r20, 0xF1	; 241
    19ae:	c1 f5       	brne	.+112    	; 0x1a20 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    19b0:	d7 01       	movw	r26, r14
    19b2:	54 96       	adiw	r26, 0x14	; 20
    19b4:	ed 91       	ld	r30, X+
    19b6:	fc 91       	ld	r31, X
    19b8:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    19ba:	30 97       	sbiw	r30, 0x00	; 0
    19bc:	49 f4       	brne	.+18     	; 0x19d0 <midi_input_callbacks+0x188>
    19be:	30 c0       	rjmp	.+96     	; 0x1a20 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    19c0:	e0 e0       	ldi	r30, 0x00	; 0
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    19c4:	30 97       	sbiw	r30, 0x00	; 0
    19c6:	61 f1       	breq	.+88     	; 0x1a20 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    19c8:	81 2f       	mov	r24, r17
    19ca:	8d 7f       	andi	r24, 0xFD	; 253
    19cc:	81 3f       	cpi	r24, 0xF1	; 241
    19ce:	29 f4       	brne	.+10     	; 0x19da <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    19d0:	4b 2d       	mov	r20, r11
    19d2:	61 2f       	mov	r22, r17
    19d4:	c7 01       	movw	r24, r14
    19d6:	09 95       	icall
    19d8:	30 c0       	rjmp	.+96     	; 0x1a3a <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    19da:	4b 2d       	mov	r20, r11
    19dc:	61 2f       	mov	r22, r17
    19de:	6f 70       	andi	r22, 0x0F	; 15
    19e0:	c7 01       	movw	r24, r14
    19e2:	09 95       	icall
    19e4:	2a c0       	rjmp	.+84     	; 0x1a3a <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    19e6:	84 2f       	mov	r24, r20
    19e8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <midi_is_realtime>
    19ec:	88 23       	and	r24, r24
    19ee:	31 f0       	breq	.+12     	; 0x19fc <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    19f0:	d7 01       	movw	r26, r14
    19f2:	56 96       	adiw	r26, 0x16	; 22
    19f4:	ed 91       	ld	r30, X+
    19f6:	fc 91       	ld	r31, X
    19f8:	57 97       	sbiw	r26, 0x17	; 23
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    19fc:	16 3f       	cpi	r17, 0xF6	; 246
    19fe:	81 f4       	brne	.+32     	; 0x1a20 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1a00:	d7 01       	movw	r26, r14
    1a02:	58 96       	adiw	r26, 0x18	; 24
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1a0e:	61 2f       	mov	r22, r17
    1a10:	c7 01       	movw	r24, r14
    1a12:	09 95       	icall
    1a14:	12 c0       	rjmp	.+36     	; 0x1a3a <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1a16:	64 30       	cpi	r22, 0x04	; 4
    1a18:	71 05       	cpc	r23, r1
    1a1a:	10 f0       	brcs	.+4      	; 0x1a20 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1a1c:	c1 2c       	mov	r12, r1
    1a1e:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1a20:	d7 01       	movw	r26, r14
    1a22:	5c 96       	adiw	r26, 0x1c	; 28
    1a24:	ed 91       	ld	r30, X+
    1a26:	fc 91       	ld	r31, X
    1a28:	5d 97       	sbiw	r26, 0x1d	; 29
    1a2a:	30 97       	sbiw	r30, 0x00	; 0
    1a2c:	31 f0       	breq	.+12     	; 0x1a3a <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1a2e:	0a 2d       	mov	r16, r10
    1a30:	2b 2d       	mov	r18, r11
    1a32:	41 2f       	mov	r20, r17
    1a34:	b6 01       	movw	r22, r12
    1a36:	c7 01       	movw	r24, r14
    1a38:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1a3a:	d7 01       	movw	r26, r14
    1a3c:	5e 96       	adiw	r26, 0x1e	; 30
    1a3e:	ed 91       	ld	r30, X+
    1a40:	fc 91       	ld	r31, X
    1a42:	5f 97       	sbiw	r26, 0x1f	; 31
    1a44:	30 97       	sbiw	r30, 0x00	; 0
    1a46:	31 f0       	breq	.+12     	; 0x1a54 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1a48:	0a 2d       	mov	r16, r10
    1a4a:	2b 2d       	mov	r18, r11
    1a4c:	41 2f       	mov	r20, r17
    1a4e:	b6 01       	movw	r22, r12
    1a50:	c7 01       	movw	r24, r14
    1a52:	09 95       	icall
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	af 90       	pop	r10
    1a6e:	08 95       	ret

00001a70 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1a7e:	86 2f       	mov	r24, r22
    1a80:	0e 94 8c 0b 	call	0x1718	; 0x1718 <midi_is_realtime>
    1a84:	88 23       	and	r24, r24
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1a88:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1a8e:	00 e0       	ldi	r16, 0x00	; 0
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	41 2f       	mov	r20, r17
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	ce 01       	movw	r24, r28
    1a9a:	0e 94 24 0c 	call	0x1848	; 0x1848 <midi_input_callbacks>
    device->input_state = state;
    1a9e:	fd a2       	std	Y+37, r15	; 0x25
    1aa0:	a4 c0       	rjmp	.+328    	; 0x1bea <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1aa2:	81 2f       	mov	r24, r17
    1aa4:	0e 94 88 0b 	call	0x1710	; 0x1710 <midi_is_statusbyte>
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <midi_process_byte+0x3e>
    1aac:	5d c0       	rjmp	.+186    	; 0x1b68 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1aae:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1ab4:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9f a3       	std	Y+39, r25	; 0x27
    1abc:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1abe:	81 2f       	mov	r24, r17
    1ac0:	0e 94 92 0b 	call	0x1724	; 0x1724 <midi_packet_length>
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	31 f0       	breq	.+12     	; 0x1ad4 <midi_process_byte+0x64>
    1ac8:	b8 f0       	brcs	.+46     	; 0x1af8 <midi_process_byte+0x88>
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	79 f0       	breq	.+30     	; 0x1aec <midi_process_byte+0x7c>
    1ace:	83 30       	cpi	r24, 0x03	; 3
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <midi_process_byte+0x82>
    1ad2:	46 c0       	rjmp	.+140    	; 0x1b60 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1ad8:	00 e0       	ldi	r16, 0x00	; 0
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	41 2f       	mov	r20, r17
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	0e 94 24 0c 	call	0x1848	; 0x1848 <midi_input_callbacks>
        device->input_state = IDLE;
    1ae8:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1aea:	7f c0       	rjmp	.+254    	; 0x1bea <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1af0:	7c c0       	rjmp	.+248    	; 0x1bea <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1af6:	79 c0       	rjmp	.+242    	; 0x1bea <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1af8:	10 3f       	cpi	r17, 0xF0	; 240
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <midi_process_byte+0x92>
    1afc:	17 3f       	cpi	r17, 0xF7	; 247
    1afe:	51 f0       	breq	.+20     	; 0x1b14 <midi_process_byte+0xa4>
    1b00:	2b c0       	rjmp	.+86     	; 0x1b58 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1b06:	80 ef       	ldi	r24, 0xF0	; 240
    1b08:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9f a3       	std	Y+39, r25	; 0x27
    1b10:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1b12:	6b c0       	rjmp	.+214    	; 0x1bea <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1b14:	4e a1       	ldd	r20, Y+38	; 0x26
    1b16:	5f a1       	ldd	r21, Y+39	; 0x27
    1b18:	9a 01       	movw	r18, r20
    1b1a:	ab ea       	ldi	r26, 0xAB	; 171
    1b1c:	ba ea       	ldi	r27, 0xAA	; 170
    1b1e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__umulhisi3>
    1b22:	96 95       	lsr	r25
    1b24:	87 95       	ror	r24
    1b26:	9c 01       	movw	r18, r24
    1b28:	22 0f       	add	r18, r18
    1b2a:	33 1f       	adc	r19, r19
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	fa 01       	movw	r30, r20
    1b32:	e8 1b       	sub	r30, r24
    1b34:	f9 0b       	sbc	r31, r25
    1b36:	ec 0f       	add	r30, r28
    1b38:	fd 1f       	adc	r31, r29
    1b3a:	87 ef       	ldi	r24, 0xF7	; 247
    1b3c:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1b3e:	ba 01       	movw	r22, r20
    1b40:	6f 5f       	subi	r22, 0xFF	; 255
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	7f a3       	std	Y+39, r23	; 0x27
    1b46:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1b48:	0c a1       	ldd	r16, Y+36	; 0x24
    1b4a:	2b a1       	ldd	r18, Y+35	; 0x23
    1b4c:	4a a1       	ldd	r20, Y+34	; 0x22
    1b4e:	ce 01       	movw	r24, r28
    1b50:	0e 94 24 0c 	call	0x1848	; 0x1848 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1b54:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1b56:	49 c0       	rjmp	.+146    	; 0x1bea <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1b58:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1b5a:	1f a2       	std	Y+39, r1	; 0x27
    1b5c:	1e a2       	std	Y+38, r1	; 0x26
    1b5e:	45 c0       	rjmp	.+138    	; 0x1bea <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1b60:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1b62:	1f a2       	std	Y+39, r1	; 0x27
    1b64:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1b66:	41 c0       	rjmp	.+130    	; 0x1bea <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1b68:	ed a1       	ldd	r30, Y+37	; 0x25
    1b6a:	ee 23       	and	r30, r30
    1b6c:	f1 f1       	breq	.+124    	; 0x1bea <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1b6e:	4e a1       	ldd	r20, Y+38	; 0x26
    1b70:	5f a1       	ldd	r21, Y+39	; 0x27
    1b72:	9a 01       	movw	r18, r20
    1b74:	ab ea       	ldi	r26, 0xAB	; 171
    1b76:	ba ea       	ldi	r27, 0xAA	; 170
    1b78:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__umulhisi3>
    1b7c:	96 95       	lsr	r25
    1b7e:	87 95       	ror	r24
    1b80:	9c 01       	movw	r18, r24
    1b82:	22 0f       	add	r18, r18
    1b84:	33 1f       	adc	r19, r19
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	9a 01       	movw	r18, r20
    1b8c:	28 1b       	sub	r18, r24
    1b8e:	39 0b       	sbc	r19, r25
    1b90:	de 01       	movw	r26, r28
    1b92:	a2 0f       	add	r26, r18
    1b94:	b3 1f       	adc	r27, r19
    1b96:	92 96       	adiw	r26, 0x22	; 34
    1b98:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1b9a:	ba 01       	movw	r22, r20
    1b9c:	6f 5f       	subi	r22, 0xFF	; 255
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	7f a3       	std	Y+39, r23	; 0x27
    1ba2:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1ba4:	21 30       	cpi	r18, 0x01	; 1
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	89 f0       	breq	.+34     	; 0x1bcc <midi_process_byte+0x15c>
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	e9 f4       	brne	.+58     	; 0x1bea <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1bb0:	0c a1       	ldd	r16, Y+36	; 0x24
    1bb2:	2b a1       	ldd	r18, Y+35	; 0x23
    1bb4:	4a a1       	ldd	r20, Y+34	; 0x22
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	0e 94 24 0c 	call	0x1848	; 0x1848 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	84 30       	cpi	r24, 0x04	; 4
    1bc0:	a1 f0       	breq	.+40     	; 0x1bea <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9f a3       	std	Y+39, r25	; 0x27
    1bc8:	8e a3       	std	Y+38, r24	; 0x26
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1bcc:	e2 30       	cpi	r30, 0x02	; 2
    1bce:	69 f4       	brne	.+26     	; 0x1bea <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1bd0:	00 e0       	ldi	r16, 0x00	; 0
    1bd2:	2b a1       	ldd	r18, Y+35	; 0x23
    1bd4:	4a a1       	ldd	r20, Y+34	; 0x22
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	0e 94 24 0c 	call	0x1848	; 0x1848 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	84 30       	cpi	r24, 0x04	; 4
    1be0:	21 f0       	breq	.+8      	; 0x1bea <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9f a3       	std	Y+39, r25	; 0x27
    1be8:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	08 95       	ret

00001bf6 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1c08:	dc 01       	movw	r26, r24
    1c0a:	90 96       	adiw	r26, 0x20	; 32
    1c0c:	ed 91       	ld	r30, X+
    1c0e:	fc 91       	ld	r31, X
    1c10:	91 97       	sbiw	r26, 0x21	; 33
    1c12:	30 97       	sbiw	r30, 0x00	; 0
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1c16:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1c18:	86 01       	movw	r16, r12
    1c1a:	08 51       	subi	r16, 0x18	; 24
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	c8 01       	movw	r24, r16
    1c20:	0e 94 40 0b 	call	0x1680	; 0x1680 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1c24:	e8 2e       	mov	r14, r24
    1c26:	f1 2c       	mov	r15, r1
    1c28:	e1 14       	cp	r14, r1
    1c2a:	f1 04       	cpc	r15, r1
    1c2c:	91 f0       	breq	.+36     	; 0x1c52 <midi_device_process+0x5c>
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	c8 01       	movw	r24, r16
    1c36:	0e 94 56 0b 	call	0x16ac	; 0x16ac <bytequeue_get>
    1c3a:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1c3c:	c6 01       	movw	r24, r12
    1c3e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	c8 01       	movw	r24, r16
    1c46:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1c4a:	21 96       	adiw	r28, 0x01	; 1
    1c4c:	ce 15       	cp	r28, r14
    1c4e:	df 05       	cpc	r29, r15
    1c50:	81 f7       	brne	.-32     	; 0x1c32 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	08 95       	ret

00001c64 <__divmodhi4>:
    1c64:	97 fb       	bst	r25, 7
    1c66:	07 2e       	mov	r0, r23
    1c68:	16 f4       	brtc	.+4      	; 0x1c6e <__divmodhi4+0xa>
    1c6a:	00 94       	com	r0
    1c6c:	07 d0       	rcall	.+14     	; 0x1c7c <__divmodhi4_neg1>
    1c6e:	77 fd       	sbrc	r23, 7
    1c70:	09 d0       	rcall	.+18     	; 0x1c84 <__divmodhi4_neg2>
    1c72:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__udivmodhi4>
    1c76:	07 fc       	sbrc	r0, 7
    1c78:	05 d0       	rcall	.+10     	; 0x1c84 <__divmodhi4_neg2>
    1c7a:	3e f4       	brtc	.+14     	; 0x1c8a <__divmodhi4_exit>

00001c7c <__divmodhi4_neg1>:
    1c7c:	90 95       	com	r25
    1c7e:	81 95       	neg	r24
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	08 95       	ret

00001c84 <__divmodhi4_neg2>:
    1c84:	70 95       	com	r23
    1c86:	61 95       	neg	r22
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255

00001c8a <__divmodhi4_exit>:
    1c8a:	08 95       	ret

00001c8c <__tablejump2__>:
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	05 90       	lpm	r0, Z+
    1c92:	f4 91       	lpm	r31, Z
    1c94:	e0 2d       	mov	r30, r0
    1c96:	09 94       	ijmp

00001c98 <__umulhisi3>:
    1c98:	a2 9f       	mul	r26, r18
    1c9a:	b0 01       	movw	r22, r0
    1c9c:	b3 9f       	mul	r27, r19
    1c9e:	c0 01       	movw	r24, r0
    1ca0:	a3 9f       	mul	r26, r19
    1ca2:	70 0d       	add	r23, r0
    1ca4:	81 1d       	adc	r24, r1
    1ca6:	11 24       	eor	r1, r1
    1ca8:	91 1d       	adc	r25, r1
    1caa:	b2 9f       	mul	r27, r18
    1cac:	70 0d       	add	r23, r0
    1cae:	81 1d       	adc	r24, r1
    1cb0:	11 24       	eor	r1, r1
    1cb2:	91 1d       	adc	r25, r1
    1cb4:	08 95       	ret

00001cb6 <__udivmodhi4>:
    1cb6:	aa 1b       	sub	r26, r26
    1cb8:	bb 1b       	sub	r27, r27
    1cba:	51 e1       	ldi	r21, 0x11	; 17
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <__udivmodhi4_ep>

00001cbe <__udivmodhi4_loop>:
    1cbe:	aa 1f       	adc	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	a6 17       	cp	r26, r22
    1cc4:	b7 07       	cpc	r27, r23
    1cc6:	10 f0       	brcs	.+4      	; 0x1ccc <__udivmodhi4_ep>
    1cc8:	a6 1b       	sub	r26, r22
    1cca:	b7 0b       	sbc	r27, r23

00001ccc <__udivmodhi4_ep>:
    1ccc:	88 1f       	adc	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	5a 95       	dec	r21
    1cd2:	a9 f7       	brne	.-22     	; 0x1cbe <__udivmodhi4_loop>
    1cd4:	80 95       	com	r24
    1cd6:	90 95       	com	r25
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	08 95       	ret

00001cde <_exit>:
    1cde:	f8 94       	cli

00001ce0 <__stop_program>:
    1ce0:	ff cf       	rjmp	.-2      	; 0x1ce0 <__stop_program>
