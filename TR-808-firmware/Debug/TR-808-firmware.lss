
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00001dc4  00001e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  0080025e  0080025e  00001fb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005557  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f2  00000000  00000000  000079bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b3  00000000  00000000  00008eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  0000a464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010c8  00000000  00000000  0000afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021f0  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000e294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	2c 0c       	add	r2, r12
      b6:	2a 0c       	add	r2, r10
      b8:	2c 0c       	add	r2, r12
      ba:	2e 0c       	add	r2, r14
      bc:	2e 0c       	add	r2, r14
      be:	34 0c       	add	r3, r4
      c0:	2e 0c       	add	r2, r14
      c2:	34 0c       	add	r3, r4
      c4:	34 0c       	add	r3, r4
      c6:	34 0c       	add	r3, r4
      c8:	34 0c       	add	r3, r4
      ca:	34 0c       	add	r3, r4
      cc:	2e 0c       	add	r2, r14
      ce:	34 0c       	add	r3, r4
      d0:	34 0c       	add	r3, r4

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e4 ec       	ldi	r30, 0xC4	; 196
      e6:	fd e1       	ldi	r31, 0x1D	; 29
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	ae 35       	cpi	r26, 0x5E	; 94
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	ae e5       	ldi	r26, 0x5E	; 94
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a3 35       	cpi	r26, 0x53	; 83
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
     108:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match. Should probably reduce 
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 5e 02 	sts	0x025E, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a3 59       	subi	r26, 0x93	; 147
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	ad e6       	ldi	r26, 0x6D	; 109
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	ed e6       	ldi	r30, 0x6D	; 109
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 3d 09 	call	0x127a	; 0x127a <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	ed e6       	ldi	r30, 0x6D	; 109
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29

	clear_all_trigs();
     28c:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     290:	0f 2e       	mov	r0, r31
     292:	f5 e0       	ldi	r31, 0x05	; 5
     294:	ef 2e       	mov	r14, r31
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
	for (int i = BD; i <= MA; i++) {
     29c:	c0 e0       	ldi	r28, 0x00	; 0
     29e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fe e4       	ldi	r31, 0x4E	; 78
     2a4:	8f 2e       	mov	r8, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	9f 2e       	mov	r9, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f9 e4       	ldi	r31, 0x49	; 73
     2b0:	af 2e       	mov	r10, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	bf 2e       	mov	r11, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fd e4       	ldi	r31, 0x4D	; 77
     2bc:	cf 2e       	mov	r12, r31
     2be:	f4 e0       	ldi	r31, 0x04	; 4
     2c0:	df 2e       	mov	r13, r31
     2c2:	f0 2d       	mov	r31, r0
     2c4:	0f 2e       	mov	r0, r31
     2c6:	f3 e3       	ldi	r31, 0x33	; 51
     2c8:	5f 2e       	mov	r5, r31
     2ca:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fd e6       	ldi	r31, 0x6D	; 109
     2d0:	6f 2e       	mov	r6, r31
     2d2:	f2 e0       	ldi	r31, 0x02	; 2
     2d4:	7f 2e       	mov	r7, r31
     2d6:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.part_playing][sequencer.current_step] >> i) &1) {
     2d8:	f4 01       	movw	r30, r8
     2da:	80 81       	ld	r24, Z
     2dc:	81 fb       	bst	r24, 1
     2de:	00 27       	eor	r16, r16
     2e0:	00 f9       	bld	r16, 0
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	f5 01       	movw	r30, r10
     2e6:	20 81       	ld	r18, Z
     2e8:	f6 01       	movw	r30, r12
     2ea:	90 81       	ld	r25, Z
     2ec:	92 95       	swap	r25
     2ee:	96 95       	lsr	r25
     2f0:	97 70       	andi	r25, 0x07	; 7
     2f2:	81 70       	andi	r24, 0x01	; 1
     2f4:	88 0f       	add	r24, r24
     2f6:	88 0f       	add	r24, r24
     2f8:	88 0f       	add	r24, r24
     2fa:	89 2b       	or	r24, r25
     2fc:	f8 01       	movw	r30, r16
     2fe:	e2 95       	swap	r30
     300:	f2 95       	swap	r31
     302:	f0 7f       	andi	r31, 0xF0	; 240
     304:	fe 27       	eor	r31, r30
     306:	e0 7f       	andi	r30, 0xF0	; 240
     308:	fe 27       	eor	r31, r30
     30a:	92 2f       	mov	r25, r18
     30c:	91 70       	andi	r25, 0x01	; 1
     30e:	59 9e       	mul	r5, r25
     310:	e0 0d       	add	r30, r0
     312:	f1 1d       	adc	r31, r1
     314:	11 24       	eor	r1, r1
     316:	e8 0f       	add	r30, r24
     318:	f1 1d       	adc	r31, r1
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e3 58       	subi	r30, 0x83	; 131
     320:	fc 4f       	sbci	r31, 0xFC	; 252
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	0c 2e       	mov	r0, r28
     328:	02 c0       	rjmp	.+4      	; 0x32e <trigger_step+0xc0>
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <trigger_step+0xbc>
     332:	80 ff       	sbrs	r24, 0
     334:	38 c0       	rjmp	.+112    	; 0x3a6 <trigger_step+0x138>
			turn_on(drum_hit[i].led_index);
     336:	f7 01       	movw	r30, r14
     338:	80 81       	ld	r24, Z
     33a:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     33e:	de 01       	movw	r26, r28
     340:	aa 0f       	add	r26, r26
     342:	bb 1f       	adc	r27, r27
     344:	ac 0f       	add	r26, r28
     346:	bd 1f       	adc	r27, r29
     348:	aa 0f       	add	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	a0 50       	subi	r26, 0x00	; 0
     34e:	bf 4f       	sbci	r27, 0xFF	; 255
     350:	ec 91       	ld	r30, X
     352:	8e 2f       	mov	r24, r30
     354:	88 1f       	adc	r24, r24
     356:	88 27       	eor	r24, r24
     358:	88 1f       	adc	r24, r24
     35a:	11 96       	adiw	r26, 0x01	; 1
     35c:	ec 91       	ld	r30, X
     35e:	e7 70       	andi	r30, 0x07	; 7
     360:	ee 0f       	add	r30, r30
     362:	e8 2b       	or	r30, r24
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	e3 59       	subi	r30, 0x93	; 147
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	d7 01       	movw	r26, r14
     36c:	13 97       	sbiw	r26, 0x03	; 3
     36e:	9c 91       	ld	r25, X
     370:	80 81       	ld	r24, Z
     372:	89 2b       	or	r24, r25
     374:	80 83       	st	Z, r24
     376:	f7 01       	movw	r30, r14
     378:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     37a:	80 81       	ld	r24, Z
     37c:	8f 3f       	cpi	r24, 0xFF	; 255
     37e:	99 f0       	breq	.+38     	; 0x3a6 <trigger_step+0x138>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     380:	f3 01       	movw	r30, r6
     382:	23 81       	ldd	r18, Z+3	; 0x03
     384:	fe 01       	movw	r30, r28
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ec 0f       	add	r30, r28
     38c:	fd 1f       	adc	r31, r29
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	ec 5f       	subi	r30, 0xFC	; 252
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	90 81       	ld	r25, Z
     398:	91 70       	andi	r25, 0x01	; 1
     39a:	91 95       	neg	r25
     39c:	92 27       	eor	r25, r18
     39e:	89 23       	and	r24, r25
     3a0:	82 27       	eor	r24, r18
     3a2:	f3 01       	movw	r30, r6
     3a4:	83 83       	std	Z+3, r24	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     3a6:	21 96       	adiw	r28, 0x01	; 1
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	ef 0e       	add	r14, r31
     3ac:	f1 1c       	adc	r15, r1
     3ae:	c0 31       	cpi	r28, 0x10	; 16
     3b0:	d1 05       	cpc	r29, r1
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <trigger_step+0x148>
     3b4:	91 cf       	rjmp	.-222    	; 0x2d8 <trigger_step+0x6a>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	08 95       	ret

000003d6 <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3d6:	80 91 3a 02 	lds	r24, 0x023A
     3da:	86 ff       	sbrs	r24, 6
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3de:	ea e3       	ldi	r30, 0x3A	; 58
     3e0:	f2 e0       	ldi	r31, 0x02	; 2
     3e2:	8f 7b       	andi	r24, 0xBF	; 191
     3e4:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3ee:	80 91 3c 02 	lds	r24, 0x023C
     3f2:	86 ff       	sbrs	r24, 6
     3f4:	08 c0       	rjmp	.+16     	; 0x406 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3f6:	ec e3       	ldi	r30, 0x3C	; 60
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	8f 7b       	andi	r24, 0xBF	; 191
     3fc:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     406:	80 91 3e 02 	lds	r24, 0x023E
     40a:	86 ff       	sbrs	r24, 6
     40c:	08 c0       	rjmp	.+16     	; 0x41e <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     40e:	ee e3       	ldi	r30, 0x3E	; 62
     410:	f2 e0       	ldi	r31, 0x02	; 2
     412:	8f 7b       	andi	r24, 0xBF	; 191
     414:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     41e:	80 91 40 02 	lds	r24, 0x0240
     422:	86 ff       	sbrs	r24, 6
     424:	08 c0       	rjmp	.+16     	; 0x436 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     426:	e0 e4       	ldi	r30, 0x40	; 64
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	8f 7b       	andi	r24, 0xBF	; 191
     42c:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     436:	80 91 42 02 	lds	r24, 0x0242
     43a:	86 ff       	sbrs	r24, 6
     43c:	08 c0       	rjmp	.+16     	; 0x44e <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     43e:	e2 e4       	ldi	r30, 0x42	; 66
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	8f 7b       	andi	r24, 0xBF	; 191
     444:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     44e:	80 91 44 02 	lds	r24, 0x0244
     452:	86 ff       	sbrs	r24, 6
     454:	08 c0       	rjmp	.+16     	; 0x466 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     456:	e4 e4       	ldi	r30, 0x44	; 68
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	8f 7b       	andi	r24, 0xBF	; 191
     45c:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	85 e0       	ldi	r24, 0x05	; 5
     462:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     466:	80 91 46 02 	lds	r24, 0x0246
     46a:	86 ff       	sbrs	r24, 6
     46c:	08 c0       	rjmp	.+16     	; 0x47e <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     46e:	e6 e4       	ldi	r30, 0x46	; 70
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	8f 7b       	andi	r24, 0xBF	; 191
     474:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     47e:	80 91 48 02 	lds	r24, 0x0248
     482:	86 ff       	sbrs	r24, 6
     484:	08 c0       	rjmp	.+16     	; 0x496 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     486:	e8 e4       	ldi	r30, 0x48	; 72
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	8f 7b       	andi	r24, 0xBF	; 191
     48c:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     496:	80 91 4a 02 	lds	r24, 0x024A
     49a:	86 ff       	sbrs	r24, 6
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     49e:	ea e4       	ldi	r30, 0x4A	; 74
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	8f 7b       	andi	r24, 0xBF	; 191
     4a4:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     4ae:	80 91 4c 02 	lds	r24, 0x024C
     4b2:	86 ff       	sbrs	r24, 6
     4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     4b6:	ec e4       	ldi	r30, 0x4C	; 76
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	8f 7b       	andi	r24, 0xBF	; 191
     4bc:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	89 e0       	ldi	r24, 0x09	; 9
     4c2:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4c6:	80 91 4e 02 	lds	r24, 0x024E
     4ca:	86 ff       	sbrs	r24, 6
     4cc:	08 c0       	rjmp	.+16     	; 0x4de <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4ce:	ee e4       	ldi	r30, 0x4E	; 78
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	8f 7b       	andi	r24, 0xBF	; 191
     4d4:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4de:	08 95       	ret

000004e0 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	8f 93       	push	r24
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4f0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4f2:	ee e6       	ldi	r30, 0x6E	; 110
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8d 7f       	andi	r24, 0xFD	; 253
     4fa:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     4fc:	80 91 7a 03 	lds	r24, 0x037A
     500:	88 60       	ori	r24, 0x08	; 8
     502:	80 93 7a 03 	sts	0x037A, r24
	
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	8f 91       	pop	r24
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     540:	e8 e7       	ldi	r30, 0x78	; 120
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	81 81       	ldd	r24, Z+1	; 0x01
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	81 83       	std	Z+1, r24	; 0x01
     54a:	90 81       	ld	r25, Z
     54c:	89 13       	cpse	r24, r25
     54e:	96 c0       	rjmp	.+300    	; 0x67c <__vector_11+0x166>
	{
		flag.next_step = 1;
     550:	80 91 7a 03 	lds	r24, 0x037A
     554:	81 60       	ori	r24, 0x01	; 1
     556:	80 93 7a 03 	sts	0x037A, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     55a:	ea e7       	ldi	r30, 0x7A	; 122
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	80 81       	ld	r24, Z
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	98 0f       	add	r25, r24
     564:	93 70       	andi	r25, 0x03	; 3
     566:	8c 7f       	andi	r24, 0xFC	; 252
     568:	89 2b       	or	r24, r25
     56a:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     56c:	10 92 79 02 	sts	0x0279, r1
		if (sequencer.current_step++ == sequencer.step_num[sequencer.part_playing] && sequencer.START) { 
     570:	ed e4       	ldi	r30, 0x4D	; 77
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	90 81       	ld	r25, Z
     576:	89 2f       	mov	r24, r25
     578:	82 95       	swap	r24
     57a:	86 95       	lsr	r24
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	20 91 4e 04 	lds	r18, 0x044E
     582:	21 70       	andi	r18, 0x01	; 1
     584:	22 0f       	add	r18, r18
     586:	22 0f       	add	r18, r18
     588:	22 0f       	add	r18, r18
     58a:	28 2b       	or	r18, r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	82 0f       	add	r24, r18
     590:	38 2f       	mov	r19, r24
     592:	32 95       	swap	r19
     594:	33 0f       	add	r19, r19
     596:	30 7e       	andi	r19, 0xE0	; 224
     598:	9f 71       	andi	r25, 0x1F	; 31
     59a:	93 2b       	or	r25, r19
     59c:	90 83       	st	Z, r25
     59e:	83 fb       	bst	r24, 3
     5a0:	99 27       	eor	r25, r25
     5a2:	90 f9       	bld	r25, 0
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	89 2b       	or	r24, r25
     5aa:	81 83       	std	Z+1, r24	; 0x01
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	81 fb       	bst	r24, 1
     5b0:	44 27       	eor	r20, r20
     5b2:	40 f9       	bld	r20, 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	45 58       	subi	r20, 0x85	; 133
     5b8:	5c 4f       	sbci	r21, 0xFC	; 252
     5ba:	fa 01       	movw	r30, r20
     5bc:	e0 53       	subi	r30, 0x30	; 48
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 81       	ld	r24, Z
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	28 17       	cp	r18, r24
     5c6:	39 07       	cpc	r19, r25
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_11+0xb6>
     5ca:	58 c0       	rjmp	.+176    	; 0x67c <__vector_11+0x166>
     5cc:	80 91 7c 03 	lds	r24, 0x037C
     5d0:	81 ff       	sbrs	r24, 1
     5d2:	54 c0       	rjmp	.+168    	; 0x67c <__vector_11+0x166>
			flag.new_measure = 1;
     5d4:	80 91 7a 03 	lds	r24, 0x037A
     5d8:	80 62       	ori	r24, 0x20	; 32
     5da:	80 93 7a 03 	sts	0x037A, r24
			sequencer.current_step = 0;
     5de:	ed e4       	ldi	r30, 0x4D	; 77
     5e0:	f4 e0       	ldi	r31, 0x04	; 4
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 71       	andi	r24, 0x1F	; 31
     5e6:	80 83       	st	Z, r24
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	81 83       	std	Z+1, r24	; 0x01
			if (sequencer.step_num[SECOND] != NO_STEPS) { //no toggling if second part has 0 steps - annoying exception handler
     5ee:	80 91 4c 04 	lds	r24, 0x044C
     5f2:	80 31       	cpi	r24, 0x10	; 16
     5f4:	09 f1       	breq	.+66     	; 0x638 <__vector_11+0x122>
				
				if (sequencer.part_playing == SECOND) {
     5f6:	80 91 4e 04 	lds	r24, 0x044E
     5fa:	81 ff       	sbrs	r24, 1
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <__vector_11+0xfa>
					turn_off(SECOND_PART_LED);
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
					turn_on(FIRST_PART_LED);
     604:	8a e2       	ldi	r24, 0x2A	; 42
     606:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					toggle_variation(); //only toggle variation at the end of the 2nd part
     60a:	0e 94 0c 09 	call	0x1218	; 0x1218 <toggle_variation>
     60e:	06 c0       	rjmp	.+12     	; 0x61c <__vector_11+0x106>
				} else {
					turn_off(FIRST_PART_LED); 
     610:	8a e2       	ldi	r24, 0x2A	; 42
     612:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
					turn_on(SECOND_PART_LED);
     616:	8b e2       	ldi	r24, 0x2B	; 43
     618:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
				}
				sequencer.part_playing ^= 1 << 0;
     61c:	80 91 4e 04 	lds	r24, 0x044E
     620:	81 fb       	bst	r24, 1
     622:	99 27       	eor	r25, r25
     624:	90 f9       	bld	r25, 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	89 27       	eor	r24, r25
     62a:	ed e4       	ldi	r30, 0x4D	; 77
     62c:	f4 e0       	ldi	r31, 0x04	; 4
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	80 fb       	bst	r24, 0
     632:	91 f9       	bld	r25, 1
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	02 c0       	rjmp	.+4      	; 0x63c <__vector_11+0x126>
			} else { 
	
				toggle_variation(); //no second part, so toggle variation 
     638:	0e 94 0c 09 	call	0x1218	; 0x1218 <toggle_variation>
				
			}
			//update step number
			sequencer.step_num[sequencer.part_editing] = sequencer.step_num_new;
     63c:	80 91 4e 04 	lds	r24, 0x044E
     640:	82 fb       	bst	r24, 2
     642:	00 27       	eor	r16, r16
     644:	00 f9       	bld	r16, 0
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	05 58       	subi	r16, 0x85	; 133
     64a:	1c 4f       	sbci	r17, 0xFC	; 252
     64c:	f8 01       	movw	r30, r16
     64e:	e0 53       	subi	r30, 0x30	; 48
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	80 91 4d 04 	lds	r24, 0x044D
     656:	8f 71       	andi	r24, 0x1F	; 31
     658:	80 83       	st	Z, r24
			update_step_led_mask();
     65a:	0e 94 9c 04 	call	0x938	; 0x938 <update_step_led_mask>
			
			//handle pre-scale change
			if (flag.pre_scale_change) {
     65e:	80 91 7a 03 	lds	r24, 0x037A
     662:	86 ff       	sbrs	r24, 6
     664:	0b c0       	rjmp	.+22     	; 0x67c <__vector_11+0x166>
				
				flag.pre_scale_change = 0;
     666:	8f 7b       	andi	r24, 0xBF	; 191
     668:	80 93 7a 03 	sts	0x037A, r24
				internal_clock.divider = pre_scale[pre_scale_index];
     66c:	e0 91 17 02 	lds	r30, 0x0217
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	ed 5e       	subi	r30, 0xED	; 237
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	80 81       	ld	r24, Z
     678:	80 93 78 02 	sts	0x0278, r24
	
	} //should make the else if so second condition doesn't need to be tested
	
	
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     67c:	e8 e7       	ldi	r30, 0x78	; 120
     67e:	f2 e0       	ldi	r31, 0x02	; 2
     680:	80 81       	ld	r24, Z
     682:	86 95       	lsr	r24
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	98 13       	cpse	r25, r24
     688:	e3 c0       	rjmp	.+454    	; 0x850 <__vector_11+0x33a>
		flag.half_step = 1;
     68a:	80 91 7a 03 	lds	r24, 0x037A
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	80 93 7a 03 	sts	0x037A, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     694:	40 91 d3 01 	lds	r20, 0x01D3
     698:	30 91 d6 01 	lds	r19, 0x01D6
     69c:	ed e6       	ldi	r30, 0x6D	; 109
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	83 2f       	mov	r24, r19
     6a2:	84 2b       	or	r24, r20
     6a4:	80 95       	com	r24
     6a6:	95 81       	ldd	r25, Z+5	; 0x05
     6a8:	89 23       	and	r24, r25
     6aa:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     6ac:	80 91 7c 03 	lds	r24, 0x037C
     6b0:	81 ff       	sbrs	r24, 1
     6b2:	a0 c0       	rjmp	.+320    	; 0x7f4 <__vector_11+0x2de>
	
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     6b4:	80 91 49 04 	lds	r24, 0x0449
     6b8:	81 70       	andi	r24, 0x01	; 1
     6ba:	c8 2f       	mov	r28, r24
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	d8 2f       	mov	r29, r24
     6c0:	01 e5       	ldi	r16, 0x51	; 81
     6c2:	14 e0       	ldi	r17, 0x04	; 4
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	93 e3       	ldi	r25, 0x33	; 51
     6ca:	9c 9f       	mul	r25, r28
     6cc:	f0 01       	movw	r30, r0
     6ce:	9d 9f       	mul	r25, r29
     6d0:	f0 0d       	add	r31, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	e8 0f       	add	r30, r24
     6d6:	f1 1d       	adc	r31, r1
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ef 53       	subi	r30, 0x3F	; 63
     6de:	fc 4f       	sbci	r31, 0xFC	; 252
     6e0:	90 81       	ld	r25, Z
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	ed e6       	ldi	r30, 0x6D	; 109
     6e6:	f2 e0       	ldi	r31, 0x02	; 2
     6e8:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     6ea:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     6ec:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     6f0:	f8 01       	movw	r30, r16
     6f2:	80 81       	ld	r24, Z
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	fc 01       	movw	r30, r24
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e8 0f       	add	r30, r24
     6fe:	f9 1f       	adc	r31, r25
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	e0 50       	subi	r30, 0x00	; 0
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	85 81       	ldd	r24, Z+5	; 0x05
     70a:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
								
			switch (sequencer.variation_mode) {
     70e:	20 91 4a 04 	lds	r18, 0x044A
     712:	21 30       	cpi	r18, 0x01	; 1
     714:	49 f0       	breq	.+18     	; 0x728 <__vector_11+0x212>
     716:	18 f0       	brcs	.+6      	; 0x71e <__vector_11+0x208>
     718:	22 30       	cpi	r18, 0x02	; 2
     71a:	a1 f0       	breq	.+40     	; 0x744 <__vector_11+0x22e>
     71c:	20 c0       	rjmp	.+64     	; 0x75e <__vector_11+0x248>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     71e:	80 91 d3 01 	lds	r24, 0x01D3
     722:	80 93 52 04 	sts	0x0452, r24
					break;					
     726:	1b c0       	rjmp	.+54     	; 0x75e <__vector_11+0x248>
				case VAR_B:
					if (flag.variation_change == 1) {
     728:	80 91 7a 03 	lds	r24, 0x037A
     72c:	82 ff       	sbrs	r24, 2
     72e:	05 c0       	rjmp	.+10     	; 0x73a <__vector_11+0x224>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     730:	80 91 d3 01 	lds	r24, 0x01D3
     734:	80 93 52 04 	sts	0x0452, r24
     738:	12 c0       	rjmp	.+36     	; 0x75e <__vector_11+0x248>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     73a:	80 91 d6 01 	lds	r24, 0x01D6
     73e:	80 93 52 04 	sts	0x0452, r24
     742:	0d c0       	rjmp	.+26     	; 0x75e <__vector_11+0x248>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     744:	80 91 49 04 	lds	r24, 0x0449
     748:	80 fd       	sbrc	r24, 0
     74a:	05 c0       	rjmp	.+10     	; 0x756 <__vector_11+0x240>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     74c:	80 91 d3 01 	lds	r24, 0x01D3
     750:	80 93 52 04 	sts	0x0452, r24
     754:	04 c0       	rjmp	.+8      	; 0x75e <__vector_11+0x248>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     756:	80 91 d6 01 	lds	r24, 0x01D6
     75a:	80 93 52 04 	sts	0x0452, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     75e:	80 91 7a 02 	lds	r24, 0x027A
     762:	83 70       	andi	r24, 0x03	; 3
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	02 97       	sbiw	r24, 0x02	; 2
     768:	0c f0       	brlt	.+2      	; 0x76c <__vector_11+0x256>
     76a:	6b c0       	rjmp	.+214    	; 0x842 <__vector_11+0x32c>
				
				if (flag.variation_change == 1) {
     76c:	80 91 7a 03 	lds	r24, 0x037A
     770:	82 ff       	sbrs	r24, 2
     772:	2a c0       	rjmp	.+84     	; 0x7c8 <__vector_11+0x2b2>
					
					switch (sequencer.variation_mode) {
     774:	21 30       	cpi	r18, 0x01	; 1
     776:	61 f0       	breq	.+24     	; 0x790 <__vector_11+0x27a>
     778:	18 f0       	brcs	.+6      	; 0x780 <__vector_11+0x26a>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	89 f0       	breq	.+34     	; 0x7a0 <__vector_11+0x28a>
     77e:	24 c0       	rjmp	.+72     	; 0x7c8 <__vector_11+0x2b2>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     780:	e2 e5       	ldi	r30, 0x52	; 82
     782:	f4 e0       	ldi	r31, 0x04	; 4
     784:	90 91 d6 01 	lds	r25, 0x01D6
     788:	80 81       	ld	r24, Z
     78a:	89 2b       	or	r24, r25
     78c:	80 83       	st	Z, r24
							break;
     78e:	59 c0       	rjmp	.+178    	; 0x842 <__vector_11+0x32c>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     790:	e2 e5       	ldi	r30, 0x52	; 82
     792:	f4 e0       	ldi	r31, 0x04	; 4
     794:	90 91 d6 01 	lds	r25, 0x01D6
     798:	80 81       	ld	r24, Z
     79a:	89 2b       	or	r24, r25
     79c:	80 83       	st	Z, r24
     79e:	51 c0       	rjmp	.+162    	; 0x842 <__vector_11+0x32c>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     7a0:	80 91 49 04 	lds	r24, 0x0449
     7a4:	80 fd       	sbrc	r24, 0
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <__vector_11+0x2a2>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7a8:	e2 e5       	ldi	r30, 0x52	; 82
     7aa:	f4 e0       	ldi	r31, 0x04	; 4
     7ac:	90 91 d6 01 	lds	r25, 0x01D6
     7b0:	80 81       	ld	r24, Z
     7b2:	89 2b       	or	r24, r25
     7b4:	80 83       	st	Z, r24
     7b6:	0a c0       	rjmp	.+20     	; 0x7cc <__vector_11+0x2b6>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7b8:	e2 e5       	ldi	r30, 0x52	; 82
     7ba:	f4 e0       	ldi	r31, 0x04	; 4
     7bc:	90 91 d3 01 	lds	r25, 0x01D3
     7c0:	80 81       	ld	r24, Z
     7c2:	89 2b       	or	r24, r25
     7c4:	80 83       	st	Z, r24
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <__vector_11+0x2b6>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     7c8:	22 30       	cpi	r18, 0x02	; 2
     7ca:	d9 f5       	brne	.+118    	; 0x842 <__vector_11+0x32c>
						if (sequencer.variation == VAR_A) {
     7cc:	80 91 49 04 	lds	r24, 0x0449
     7d0:	80 fd       	sbrc	r24, 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <__vector_11+0x2ce>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     7d4:	e2 e5       	ldi	r30, 0x52	; 82
     7d6:	f4 e0       	ldi	r31, 0x04	; 4
     7d8:	90 91 d6 01 	lds	r25, 0x01D6
     7dc:	80 81       	ld	r24, Z
     7de:	89 2b       	or	r24, r25
     7e0:	80 83       	st	Z, r24
     7e2:	2f c0       	rjmp	.+94     	; 0x842 <__vector_11+0x32c>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     7e4:	e2 e5       	ldi	r30, 0x52	; 82
     7e6:	f4 e0       	ldi	r31, 0x04	; 4
     7e8:	90 91 d3 01 	lds	r25, 0x01D3
     7ec:	80 81       	ld	r24, Z
     7ee:	89 2b       	or	r24, r25
     7f0:	80 83       	st	Z, r24
     7f2:	27 c0       	rjmp	.+78     	; 0x842 <__vector_11+0x32c>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     7f4:	ed e6       	ldi	r30, 0x6D	; 109
     7f6:	f2 e0       	ldi	r31, 0x02	; 2
     7f8:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     7fa:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     7fc:	20 91 4a 04 	lds	r18, 0x044A
     800:	21 30       	cpi	r18, 0x01	; 1
     802:	31 f0       	breq	.+12     	; 0x810 <__vector_11+0x2fa>
     804:	10 f0       	brcs	.+4      	; 0x80a <__vector_11+0x2f4>
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	61 f4       	brne	.+24     	; 0x822 <__vector_11+0x30c>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     80a:	40 93 52 04 	sts	0x0452, r20
				break;
     80e:	09 c0       	rjmp	.+18     	; 0x822 <__vector_11+0x30c>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     810:	30 93 52 04 	sts	0x0452, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     814:	80 91 7a 02 	lds	r24, 0x027A
     818:	83 70       	andi	r24, 0x03	; 3
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 97       	sbiw	r24, 0x02	; 2
     81e:	8c f4       	brge	.+34     	; 0x842 <__vector_11+0x32c>
     820:	0d c0       	rjmp	.+26     	; 0x83c <__vector_11+0x326>
     822:	80 91 7a 02 	lds	r24, 0x027A
     826:	83 70       	andi	r24, 0x03	; 3
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	02 97       	sbiw	r24, 0x02	; 2
     82c:	54 f4       	brge	.+20     	; 0x842 <__vector_11+0x32c>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     82e:	22 30       	cpi	r18, 0x02	; 2
     830:	29 f4       	brne	.+10     	; 0x83c <__vector_11+0x326>
     832:	e2 e5       	ldi	r30, 0x52	; 82
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	80 81       	ld	r24, Z
     838:	38 2b       	or	r19, r24
     83a:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     842:	ed e6       	ldi	r30, 0x6D	; 109
     844:	f2 e0       	ldi	r31, 0x02	; 2
     846:	90 91 52 04 	lds	r25, 0x0452
     84a:	85 81       	ldd	r24, Z+5	; 0x05
     84c:	89 2b       	or	r24, r25
     84e:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9c 01       	movw	r18, r24
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	82 0f       	add	r24, r18
     888:	93 1f       	adc	r25, r19
     88a:	dc 01       	movw	r26, r24
     88c:	a8 59       	subi	r26, 0x98	; 152
     88e:	be 4f       	sbci	r27, 0xFE	; 254
     890:	2c 91       	ld	r18, X
     892:	e2 2f       	mov	r30, r18
     894:	ef 70       	andi	r30, 0x0F	; 15
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	e3 59       	subi	r30, 0x93	; 147
     89a:	fd 4f       	sbci	r31, 0xFD	; 253
     89c:	ec 01       	movw	r28, r24
     89e:	c9 59       	subi	r28, 0x99	; 153
     8a0:	de 4f       	sbci	r29, 0xFE	; 254
     8a2:	30 81       	ld	r19, Z
     8a4:	88 81       	ld	r24, Y
     8a6:	83 2b       	or	r24, r19
     8a8:	80 83       	st	Z, r24
	led[led_index].state = 1;
     8aa:	82 2f       	mov	r24, r18
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	8c 93       	st	X, r24

}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <turn_off>:

void turn_off(uint8_t led_index) {
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	9c 01       	movw	r18, r24
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	dc 01       	movw	r26, r24
     8c8:	a8 59       	subi	r26, 0x98	; 152
     8ca:	be 4f       	sbci	r27, 0xFE	; 254
     8cc:	2c 91       	ld	r18, X
     8ce:	e2 2f       	mov	r30, r18
     8d0:	ef 70       	andi	r30, 0x0F	; 15
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e3 59       	subi	r30, 0x93	; 147
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	ec 01       	movw	r28, r24
     8da:	c9 59       	subi	r28, 0x99	; 153
     8dc:	de 4f       	sbci	r29, 0xFE	; 254
     8de:	88 81       	ld	r24, Y
     8e0:	80 95       	com	r24
     8e2:	90 81       	ld	r25, Z
     8e4:	89 23       	and	r24, r25
     8e6:	80 83       	st	Z, r24
	led[led_index].state = 0;
     8e8:	82 2f       	mov	r24, r18
     8ea:	8f 7e       	andi	r24, 0xEF	; 239
     8ec:	8c 93       	st	X, r24
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	2e 0f       	add	r18, r30
     900:	3f 1f       	adc	r19, r31
     902:	f9 01       	movw	r30, r18
     904:	e8 59       	subi	r30, 0x98	; 152
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	90 81       	ld	r25, Z
     90a:	94 ff       	sbrs	r25, 4
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
		
		turn_off(led_index);
     90e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
     912:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     914:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
     918:	08 95       	ret

0000091a <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     91a:	ed e6       	ldi	r30, 0x6D	; 109
     91c:	f2 e0       	ldi	r31, 0x02	; 2
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	8f 70       	andi	r24, 0x0F	; 15
     922:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     924:	87 81       	ldd	r24, Z+7	; 0x07
     926:	80 72       	andi	r24, 0x20	; 32
     928:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	8f 7c       	andi	r24, 0xCF	; 207
     934:	86 83       	std	Z+6, r24	; 0x06
     936:	08 95       	ret

00000938 <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     938:	2f 92       	push	r2
     93a:	3f 92       	push	r3
     93c:	4f 92       	push	r4
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     95c:	22 e2       	ldi	r18, 0x22	; 34
     95e:	e1 ec       	ldi	r30, 0xC1	; 193
     960:	f3 e0       	ldi	r31, 0x03	; 3
     962:	df 01       	movw	r26, r30
     964:	42 2f       	mov	r20, r18
     966:	1d 92       	st	X+, r1
     968:	4a 95       	dec	r20
     96a:	e9 f7       	brne	.-6      	; 0x966 <update_step_led_mask+0x2e>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     96c:	e7 e2       	ldi	r30, 0x27	; 39
     96e:	f4 e0       	ldi	r31, 0x04	; 4
     970:	df 01       	movw	r26, r30
     972:	1d 92       	st	X+, r1
     974:	2a 95       	dec	r18
     976:	e9 f7       	brne	.-6      	; 0x972 <update_step_led_mask+0x3a>

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     978:	20 91 4e 04 	lds	r18, 0x044E
     97c:	22 fb       	bst	r18, 2
     97e:	88 27       	eor	r24, r24
     980:	80 f9       	bld	r24, 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	00 e0       	ldi	r16, 0x00	; 0
     986:	10 e0       	ldi	r17, 0x00	; 0
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     988:	6c 01       	movw	r12, r24
     98a:	cc 0c       	add	r12, r12
     98c:	dd 1c       	adc	r13, r13
     98e:	cc 0c       	add	r12, r12
     990:	dd 1c       	adc	r13, r13
     992:	cc 0c       	add	r12, r12
     994:	dd 1c       	adc	r13, r13
     996:	cc 0c       	add	r12, r12
     998:	dd 1c       	adc	r13, r13
     99a:	ee 24       	eor	r14, r14
     99c:	e3 94       	inc	r14
     99e:	f1 2c       	mov	r15, r1
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     9a0:	5c 01       	movw	r10, r24
     9a2:	b1 e2       	ldi	r27, 0x21	; 33
     9a4:	ab 0e       	add	r10, r27
     9a6:	b1 1c       	adc	r11, r1
     9a8:	95 01       	movw	r18, r10
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	f9 01       	movw	r30, r18
     9b0:	e5 58       	subi	r30, 0x85	; 133
     9b2:	fc 4f       	sbci	r31, 0xFC	; 252
     9b4:	5f 01       	movw	r10, r30
     9b6:	0f 2e       	mov	r0, r31
     9b8:	f1 ee       	ldi	r31, 0xE1	; 225
     9ba:	8f 2e       	mov	r8, r31
     9bc:	f3 e0       	ldi	r31, 0x03	; 3
     9be:	9f 2e       	mov	r9, r31
     9c0:	f0 2d       	mov	r31, r0
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     9c2:	3c 01       	movw	r6, r24
     9c4:	f4 e5       	ldi	r31, 0x54	; 84
     9c6:	6f 0e       	add	r6, r31
     9c8:	71 1c       	adc	r7, r1
     9ca:	93 01       	movw	r18, r6
     9cc:	22 0f       	add	r18, r18
     9ce:	33 1f       	adc	r19, r19
     9d0:	a9 01       	movw	r20, r18
     9d2:	45 58       	subi	r20, 0x85	; 133
     9d4:	5c 4f       	sbci	r21, 0xFC	; 252
     9d6:	3a 01       	movw	r6, r20
     9d8:	0f 2e       	mov	r0, r31
     9da:	f7 e4       	ldi	r31, 0x47	; 71
     9dc:	4f 2e       	mov	r4, r31
     9de:	f4 e0       	ldi	r31, 0x04	; 4
     9e0:	5f 2e       	mov	r5, r31
     9e2:	f0 2d       	mov	r31, r0
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     9e4:	85 58       	subi	r24, 0x85	; 133
     9e6:	9c 4f       	sbci	r25, 0xFC	; 252
     9e8:	1c 01       	movw	r2, r24
     9ea:	50 ed       	ldi	r21, 0xD0	; 208
     9ec:	25 0e       	add	r2, r21
     9ee:	31 1c       	adc	r3, r1
     9f0:	52 c0       	rjmp	.+164    	; 0xa96 <update_step_led_mask+0x15e>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9f2:	9e 01       	movw	r18, r28
     9f4:	08 2e       	mov	r0, r24
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <update_step_led_mask+0xc4>
     9f8:	36 95       	lsr	r19
     9fa:	27 95       	ror	r18
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <update_step_led_mask+0xc0>
     a00:	20 ff       	sbrs	r18, 0
     a02:	06 c0       	rjmp	.+12     	; 0xa10 <update_step_led_mask+0xd8>
     a04:	20 81       	ld	r18, Z
     a06:	31 81       	ldd	r19, Z+1	; 0x01
     a08:	24 2b       	or	r18, r20
     a0a:	35 2b       	or	r19, r21
     a0c:	31 83       	std	Z+1, r19	; 0x01
     a0e:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a10:	9b 01       	movw	r18, r22
     a12:	08 2e       	mov	r0, r24
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <update_step_led_mask+0xe2>
     a16:	36 95       	lsr	r19
     a18:	27 95       	ror	r18
     a1a:	0a 94       	dec	r0
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <update_step_led_mask+0xde>
     a1e:	20 ff       	sbrs	r18, 0
     a20:	08 c0       	rjmp	.+16     	; 0xa32 <update_step_led_mask+0xfa>
     a22:	2d 91       	ld	r18, X+
     a24:	3c 91       	ld	r19, X
     a26:	11 97       	sbiw	r26, 0x01	; 1
     a28:	24 2b       	or	r18, r20
     a2a:	35 2b       	or	r19, r21
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	3c 93       	st	X, r19
     a30:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	32 96       	adiw	r30, 0x02	; 2
     a38:	80 31       	cpi	r24, 0x10	; 16
     a3a:	91 05       	cpc	r25, r1
     a3c:	d1 f6       	brne	.-76     	; 0x9f2 <update_step_led_mask+0xba>
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     a3e:	d5 01       	movw	r26, r10
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	00 2e       	mov	r0, r16
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <update_step_led_mask+0x114>
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <update_step_led_mask+0x110>
     a50:	80 ff       	sbrs	r24, 0
     a52:	07 c0       	rjmp	.+14     	; 0xa62 <update_step_led_mask+0x12a>
     a54:	f4 01       	movw	r30, r8
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	84 2b       	or	r24, r20
     a5c:	95 2b       	or	r25, r21
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     a62:	d3 01       	movw	r26, r6
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	00 2e       	mov	r0, r16
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <update_step_led_mask+0x138>
     a6c:	96 95       	lsr	r25
     a6e:	87 95       	ror	r24
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <update_step_led_mask+0x134>
     a74:	80 ff       	sbrs	r24, 0
     a76:	07 c0       	rjmp	.+14     	; 0xa86 <update_step_led_mask+0x14e>
     a78:	f2 01       	movw	r30, r4
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	48 2b       	or	r20, r24
     a80:	59 2b       	or	r21, r25
     a82:	51 83       	std	Z+1, r21	; 0x01
     a84:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));

	for (int i = 0; i <= sequencer.step_num[sequencer.part_editing]; i++) {
     a86:	0f 5f       	subi	r16, 0xFF	; 255
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	d1 01       	movw	r26, r2
     a8c:	8c 91       	ld	r24, X
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	80 17       	cp	r24, r16
     a92:	91 07       	cpc	r25, r17
     a94:	fc f0       	brlt	.+62     	; 0xad4 <update_step_led_mask+0x19c>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     a96:	c6 01       	movw	r24, r12
     a98:	80 0f       	add	r24, r16
     a9a:	91 1f       	adc	r25, r17
     a9c:	fc 01       	movw	r30, r24
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	e3 58       	subi	r30, 0x83	; 131
     aa4:	fc 4f       	sbci	r31, 0xFC	; 252
     aa6:	c0 81       	ld	r28, Z
     aa8:	d1 81       	ldd	r29, Z+1	; 0x01
     aaa:	a7 01       	movw	r20, r14
     aac:	00 2e       	mov	r0, r16
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <update_step_led_mask+0x17c>
     ab0:	44 0f       	add	r20, r20
     ab2:	55 1f       	adc	r21, r21
     ab4:	0a 94       	dec	r0
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <update_step_led_mask+0x178>
			if ((sequencer.pattern[VAR_B].part[sequencer.part_editing][i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	fc 01       	movw	r30, r24
     abe:	ed 51       	subi	r30, 0x1D	; 29
     ac0:	fc 4f       	sbci	r31, 0xFC	; 252
     ac2:	60 81       	ld	r22, Z
     ac4:	71 81       	ldd	r23, Z+1	; 0x01
     ac6:	a7 e2       	ldi	r26, 0x27	; 39
     ac8:	b4 e0       	ldi	r27, 0x04	; 4
     aca:	e1 ec       	ldi	r30, 0xC1	; 193
     acc:	f3 e0       	ldi	r31, 0x03	; 3
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	8f cf       	rjmp	.-226    	; 0x9f2 <update_step_led_mask+0xba>
		if ((sequencer.pattern[VAR_B].accent[sequencer.part_editing] >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
	}
	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
	
	
}	
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	9f 90       	pop	r9
     aea:	8f 90       	pop	r8
     aec:	7f 90       	pop	r7
     aee:	6f 90       	pop	r6
     af0:	5f 90       	pop	r5
     af2:	4f 90       	pop	r4
     af4:	3f 90       	pop	r3
     af6:	2f 90       	pop	r2
     af8:	08 95       	ret

00000afa <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     afa:	08 95       	ret

00000afc <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     afc:	08 95       	ret

00000afe <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     afe:	40 31       	cpi	r20, 0x10	; 16
     b00:	20 f4       	brcc	.+8      	; 0xb0a <note_on_event+0xc>
     b02:	62 2f       	mov	r22, r18
     b04:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     b06:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     b0a:	08 95       	ret

00000b0c <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     b0c:	0e 94 c0 06 	call	0xd80	; 0xd80 <update_tempo>
	read_switches();
     b10:	0e 94 61 09 	call	0x12c2	; 0x12c2 <read_switches>
	check_start_stop_tap();
     b14:	0e 94 d6 09 	call	0x13ac	; 0x13ac <check_start_stop_tap>
	
	parse_switch_data();
     b18:	0e 94 af 09 	call	0x135e	; 0x135e <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     b1c:	80 91 7b 03 	lds	r24, 0x037B
     b20:	83 30       	cpi	r24, 0x03	; 3
     b22:	11 f4       	brne	.+4      	; 0xb28 <refresh+0x1c>
     b24:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <live_hits>
	update_mode();
     b28:	0e 94 67 06 	call	0xcce	; 0xcce <update_mode>
	check_clear_switch();
     b2c:	0e 94 17 0b 	call	0x162e	; 0x162e <check_clear_switch>
	check_variation_switches();
     b30:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <check_variation_switches>
	update_prescale();
     b34:	0e 94 de 08 	call	0x11bc	; 0x11bc <update_prescale>
	//update_variation();
	check_inst_switches();	
     b38:	0e 94 44 0a 	call	0x1488	; 0x1488 <check_inst_switches>
	update_step_board();
     b3c:	0e 94 89 07 	call	0xf12	; 0xf12 <update_step_board>
	//update_step_led_mask();
	process_step();
     b40:	0e 94 ee 06 	call	0xddc	; 0xddc <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     b44:	0e 94 3d 09 	call	0x127a	; 0x127a <update_spi>
	PORTD &= ~(1<<TRIG);
     b48:	5d 98       	cbi	0x0b, 5	; 11
     b4a:	08 95       	ret

00000b4c <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     b4c:	8f e1       	ldi	r24, 0x1F	; 31
     b4e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     b52:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     b56:	88 ed       	ldi	r24, 0xD8	; 216
     b58:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     b5c:	51 9a       	sbi	0x0a, 1	; 10
     b5e:	08 95       	ret

00000b60 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     b8c:	80 91 c6 00 	lds	r24, 0x00C6
     b90:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     b92:	ae 01       	movw	r20, r28
     b94:	4f 5f       	subi	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	8d e8       	ldi	r24, 0x8D	; 141
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     ba2:	0f 90       	pop	r0
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_20>:

ISR (USART0_TX_vect) {
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1


	
}
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	1f 90       	pop	r1
     bdc:	18 95       	reti

00000bde <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     bde:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     be0:	8d b1       	in	r24, 0x0d	; 13
     be2:	8c 60       	ori	r24, 0x0C	; 12
     be4:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     be6:	87 b1       	in	r24, 0x07	; 7
     be8:	8e 60       	ori	r24, 0x0E	; 14
     bea:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     bec:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     bee:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     bf0:	88 b1       	in	r24, 0x08	; 8
     bf2:	81 7f       	andi	r24, 0xF1	; 241
     bf4:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     bf6:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     bf8:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     bfa:	80 e5       	ldi	r24, 0x50	; 80
     bfc:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     c00:	ed ea       	ldi	r30, 0xAD	; 173
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     c10:	8d e1       	ldi	r24, 0x1D	; 29
     c12:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	turn_on(FILL_MANUAL);
     c16:	82 e2       	ldi	r24, 0x22	; 34
     c18:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	
	update_spi();
     c1c:	0e 94 3d 09 	call	0x127a	; 0x127a <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     c20:	84 b5       	in	r24, 0x24	; 36
     c22:	82 60       	ori	r24, 0x02	; 2
     c24:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     c26:	81 ee       	ldi	r24, 0xE1	; 225
     c28:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     c2a:	8d e8       	ldi	r24, 0x8D	; 141
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 42 0c 	call	0x1884	; 0x1884 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     c32:	6f e7       	ldi	r22, 0x7F	; 127
     c34:	75 e0       	ldi	r23, 0x05	; 5
     c36:	8d e8       	ldi	r24, 0x8D	; 141
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 36 0c 	call	0x186c	; 0x186c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     c3e:	6d e7       	ldi	r22, 0x7D	; 125
     c40:	75 e0       	ldi	r23, 0x05	; 5
     c42:	8d e8       	ldi	r24, 0x8D	; 141
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 3a 0c 	call	0x1874	; 0x1874 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     c4a:	6e e7       	ldi	r22, 0x7E	; 126
     c4c:	75 e0       	ldi	r23, 0x05	; 5
     c4e:	8d e8       	ldi	r24, 0x8D	; 141
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0e 94 3e 0c 	call	0x187c	; 0x187c <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     c56:	0e 94 a6 05 	call	0xb4c	; 0xb4c <setup_midi_usart>
	
	setup_internal_clock();
     c5a:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	//sequencer.pre_scale = PRE_SCALE_3;
	internal_clock.divider = PRE_SCALE_3;//.pre_scale;; //6 pulses is 1/16th note - this is are default fundamental step
     c5e:	e8 e7       	ldi	r30, 0x78	; 120
     c60:	f2 e0       	ldi	r31, 0x02	; 2
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     c6a:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     c6e:	80 91 7a 03 	lds	r24, 0x037A
	flag.pre_scale_change = 0;
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	8f 7b       	andi	r24, 0xBF	; 191
     c76:	80 93 7a 03 	sts	0x037A, r24
	sequencer.START = 0;
     c7a:	ec e7       	ldi	r30, 0x7C	; 124
     c7c:	f3 e0       	ldi	r31, 0x03	; 3
     c7e:	80 81       	ld	r24, Z
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num[FIRST] = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     c84:	8f e0       	ldi	r24, 0x0F	; 15
     c86:	80 93 4b 04 	sts	0x044B, r24
	sequencer.step_num[SECOND] = NO_STEPS; //default is that second part is not active
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	80 93 4c 04 	sts	0x044C, r24
	sequencer.step_num_new = 15;
     c90:	cd e4       	ldi	r28, 0x4D	; 77
     c92:	d4 e0       	ldi	r29, 0x04	; 4
     c94:	88 81       	ld	r24, Y
     c96:	80 7e       	andi	r24, 0xE0	; 224
     c98:	8f 60       	ori	r24, 0x0F	; 15
     c9a:	88 83       	st	Y, r24
	sequencer.variation_mode = VAR_A;
     c9c:	10 92 4a 04 	sts	0x044A, r1
	turn_on(BASIC_VAR_A_LED);
     ca0:	84 e2       	ldi	r24, 0x24	; 36
     ca2:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	sequencer.mode = FIRST_PART;
     ca6:	10 93 7b 03 	sts	0x037B, r17

	sequencer.part_playing = FIRST;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
	sequencer.part_editing = FIRST;
     cac:	8d 7f       	andi	r24, 0xFD	; 253
     cae:	8b 7f       	andi	r24, 0xFB	; 251
     cb0:	89 83       	std	Y+1, r24	; 0x01
	turn_on(FIRST_PART_LED);
     cb2:	8a e2       	ldi	r24, 0x2A	; 42
     cb4:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	turn_on(SCALE_3_LED);
     cb8:	87 e2       	ldi	r24, 0x27	; 39
     cba:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
	sei(); //enable global interrupts	
     cbe:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     cc0:	8d e8       	ldi	r24, 0x8D	; 141
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <midi_device_process>
	
	refresh();		
     cc8:	0e 94 86 05 	call	0xb0c	; 0xb0c <refresh>

	
	}
     ccc:	f9 cf       	rjmp	.-14     	; 0xcc0 <main+0xe2>

00000cce <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     cce:	80 91 58 02 	lds	r24, 0x0258
     cd2:	86 ff       	sbrs	r24, 6
     cd4:	54 c0       	rjmp	.+168    	; 0xd7e <update_mode+0xb0>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     cd6:	e8 e5       	ldi	r30, 0x58	; 88
     cd8:	f2 e0       	ldi	r31, 0x02	; 2
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     cde:	80 91 7c 03 	lds	r24, 0x037C
     ce2:	80 ff       	sbrs	r24, 0
     ce4:	0c c0       	rjmp	.+24     	; 0xcfe <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     ce6:	80 91 12 02 	lds	r24, 0x0212
     cea:	88 23       	and	r24, r24
     cec:	21 f0       	breq	.+8      	; 0xcf6 <update_mode+0x28>
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	80 93 12 02 	sts	0x0212, r24
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <update_mode+0x44>
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	80 93 12 02 	sts	0x0212, r24
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     cfe:	80 91 12 02 	lds	r24, 0x0212
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	86 30       	cpi	r24, 0x06	; 6
     d06:	19 f0       	breq	.+6      	; 0xd0e <update_mode+0x40>
     d08:	80 93 12 02 	sts	0x0212, r24
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <update_mode+0x44>
     d0e:	10 92 12 02 	sts	0x0212, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     d12:	30 91 12 02 	lds	r19, 0x0212
     d16:	e3 2f       	mov	r30, r19
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	e4 5f       	subi	r30, 0xF4	; 244
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	20 81       	ld	r18, Z
     d20:	20 93 7b 03 	sts	0x037B, r18
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
		spi_data[4] |= (1<< mode_index);
     d24:	ed e6       	ldi	r30, 0x6D	; 109
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <update_mode+0x64>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	3a 95       	dec	r19
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <update_mode+0x60>
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		//uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] &= MODE_LED_MASK;
     d36:	94 81       	ldd	r25, Z+4	; 0x04
     d38:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] |= (1<< mode_index);
     d3a:	89 2b       	or	r24, r25
     d3c:	84 83       	std	Z+4, r24	; 0x04
		
		
		//if (sequencer.step_num[SECOND] != NO_STEPS) sequencer.step_num_new = sequencer.step_num[sequencer.part_editing]; //another annoying except
		if (sequencer.mode == FIRST_PART || sequencer.mode == SECOND_PART) {
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	82 0f       	add	r24, r18
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	e0 f4       	brcc	.+56     	; 0xd7e <update_mode+0xb0>
			
			sequencer.part_editing = sequencer.mode == FIRST_PART? FIRST : SECOND;
     d46:	e1 e0       	ldi	r30, 0x01	; 1
     d48:	21 30       	cpi	r18, 0x01	; 1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <update_mode+0x80>
     d4c:	e0 e0       	ldi	r30, 0x00	; 0
     d4e:	ad e4       	ldi	r26, 0x4D	; 77
     d50:	b4 e0       	ldi	r27, 0x04	; 4
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	8c 91       	ld	r24, X
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	e0 fb       	bst	r30, 0
     d5a:	82 f9       	bld	r24, 2
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	8c 93       	st	X, r24
     d60:	11 97       	sbiw	r26, 0x01	; 1
			sequencer.step_num_new = sequencer.step_num[sequencer.part_editing];
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e5 58       	subi	r30, 0x85	; 133
     d66:	fc 4f       	sbci	r31, 0xFC	; 252
     d68:	e0 53       	subi	r30, 0x30	; 48
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 81       	ld	r24, Z
     d6e:	98 2f       	mov	r25, r24
     d70:	9f 71       	andi	r25, 0x1F	; 31
     d72:	8c 91       	ld	r24, X
     d74:	80 7e       	andi	r24, 0xE0	; 224
     d76:	89 2b       	or	r24, r25
     d78:	8c 93       	st	X, r24
			update_step_led_mask(); //want to update led mask immediately, otherwise it only gets updated at end of measure
     d7a:	0e 94 9c 04 	call	0x938	; 0x938 <update_step_led_mask>
     d7e:	08 95       	ret

00000d80 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     d80:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     d84:	90 93 62 02 	sts	0x0262, r25
     d88:	80 93 61 02 	sts	0x0261, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     d8c:	20 91 5f 02 	lds	r18, 0x025F
     d90:	30 91 60 02 	lds	r19, 0x0260
     d94:	82 1b       	sub	r24, r18
     d96:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     d98:	95 95       	asr	r25
     d9a:	87 95       	ror	r24
     d9c:	95 95       	asr	r25
     d9e:	87 95       	ror	r24
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	90 93 60 02 	sts	0x0260, r25
     da8:	80 93 5f 02 	sts	0x025F, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     dac:	23 e6       	ldi	r18, 0x63	; 99
     dae:	34 e0       	ldi	r19, 0x04	; 4
     db0:	a9 01       	movw	r20, r18
     db2:	48 1b       	sub	r20, r24
     db4:	59 0b       	sbc	r21, r25
     db6:	ca 01       	movw	r24, r20
     db8:	e8 e7       	ldi	r30, 0x78	; 120
     dba:	f2 e0       	ldi	r31, 0x02	; 2
     dbc:	54 83       	std	Z+4, r21	; 0x04
     dbe:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     dc0:	25 81       	ldd	r18, Z+5	; 0x05
     dc2:	36 81       	ldd	r19, Z+6	; 0x06
     dc4:	42 17       	cp	r20, r18
     dc6:	53 07       	cpc	r21, r19
     dc8:	11 f0       	breq	.+4      	; 0xdce <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     dca:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     dce:	e8 e7       	ldi	r30, 0x78	; 120
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	83 81       	ldd	r24, Z+3	; 0x03
     dd4:	94 81       	ldd	r25, Z+4	; 0x04
     dd6:	96 83       	std	Z+6, r25	; 0x06
     dd8:	85 83       	std	Z+5, r24	; 0x05
     dda:	08 95       	ret

00000ddc <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     de0:	80 91 7c 03 	lds	r24, 0x037C
     de4:	81 ff       	sbrs	r24, 1
     de6:	8b c0       	rjmp	.+278    	; 0xefe <process_step+0x122>
			
			//if (sequencer.part_playing == FIRST || sequencer.part_playing == SECOND) {	
				if (flag.next_step) {
     de8:	80 91 7a 03 	lds	r24, 0x037A
     dec:	80 ff       	sbrs	r24, 0
     dee:	8e c0       	rjmp	.+284    	; 0xf0c <process_step+0x130>
					flag.next_step = 0;
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	80 93 7a 03 	sts	0x037A, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     df6:	88 70       	andi	r24, 0x08	; 8
     df8:	88 23       	and	r24, r24
     dfa:	f1 f3       	breq	.-4      	; 0xdf8 <process_step+0x1c>
					
					check_tap();
					PORTD |= (1<<TRIG);
     dfc:	5d 9a       	sbi	0x0b, 5	; 11
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
     dfe:	80 91 4e 04 	lds	r24, 0x044E
     e02:	82 fb       	bst	r24, 2
     e04:	99 27       	eor	r25, r25
     e06:	90 f9       	bld	r25, 0
     e08:	86 95       	lsr	r24
     e0a:	81 70       	andi	r24, 0x01	; 1
     e0c:	98 13       	cpse	r25, r24
     e0e:	37 c0       	rjmp	.+110    	; 0xe7e <process_step+0xa2>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     e10:	80 91 4d 04 	lds	r24, 0x044D
     e14:	98 2f       	mov	r25, r24
     e16:	92 95       	swap	r25
     e18:	96 95       	lsr	r25
     e1a:	97 70       	andi	r25, 0x07	; 7
     e1c:	80 91 4e 04 	lds	r24, 0x044E
     e20:	81 70       	andi	r24, 0x01	; 1
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	88 0f       	add	r24, r24
     e28:	89 2b       	or	r24, r25
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <process_step+0x58>
     e30:	22 0f       	add	r18, r18
     e32:	33 1f       	adc	r19, r19
     e34:	8a 95       	dec	r24
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <process_step+0x54>
     e38:	80 91 49 04 	lds	r24, 0x0449
     e3c:	48 2f       	mov	r20, r24
     e3e:	41 70       	andi	r20, 0x01	; 1
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	80 91 51 04 	lds	r24, 0x0451
     e46:	93 e3       	ldi	r25, 0x33	; 51
     e48:	94 9f       	mul	r25, r20
     e4a:	f0 01       	movw	r30, r0
     e4c:	95 9f       	mul	r25, r21
     e4e:	f0 0d       	add	r31, r0
     e50:	11 24       	eor	r1, r1
     e52:	e8 0f       	add	r30, r24
     e54:	f1 1d       	adc	r31, r1
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	ef 53       	subi	r30, 0x3F	; 63
     e5c:	fc 4f       	sbci	r31, 0xFC	; 252
     e5e:	90 81       	ld	r25, Z
     e60:	81 81       	ldd	r24, Z+1	; 0x01
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     e62:	ed e6       	ldi	r30, 0x6D	; 109
     e64:	f2 e0       	ldi	r31, 0x02	; 2
     e66:	49 2f       	mov	r20, r25
     e68:	42 23       	and	r20, r18
     e6a:	40 95       	com	r20
					check_tap();
					PORTD |= (1<<TRIG);
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     e6c:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     e6e:	94 23       	and	r25, r20
     e70:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     e72:	98 2f       	mov	r25, r24
     e74:	93 23       	and	r25, r19
     e76:	90 95       	com	r25
					
					
					if (sequencer.part_editing == sequencer.part_playing) {	//only blink if the part playing is the same as the part being edited
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     e78:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     e7a:	89 23       	and	r24, r25
     e7c:	80 83       	st	Z, r24
					} else {
						
						
					}

					trigger_step();
     e7e:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent[sequencer.part_playing] >> sequencer.current_step) &1) {
     e82:	90 91 49 04 	lds	r25, 0x0449
     e86:	80 91 4e 04 	lds	r24, 0x044E
     e8a:	81 fb       	bst	r24, 1
     e8c:	22 27       	eor	r18, r18
     e8e:	20 f9       	bld	r18, 0
     e90:	c2 2f       	mov	r28, r18
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	d4 2f       	mov	r29, r20
     e96:	91 70       	andi	r25, 0x01	; 1
     e98:	53 e3       	ldi	r21, 0x33	; 51
     e9a:	95 9f       	mul	r25, r21
     e9c:	c0 0d       	add	r28, r0
     e9e:	d1 1d       	adc	r29, r1
     ea0:	11 24       	eor	r1, r1
     ea2:	cc 0f       	add	r28, r28
     ea4:	dd 1f       	adc	r29, r29
     ea6:	c3 54       	subi	r28, 0x43	; 67
     ea8:	dc 4f       	sbci	r29, 0xFC	; 252
     eaa:	90 91 4d 04 	lds	r25, 0x044D
     eae:	92 95       	swap	r25
     eb0:	96 95       	lsr	r25
     eb2:	97 70       	andi	r25, 0x07	; 7
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	88 0f       	add	r24, r24
     eb8:	88 0f       	add	r24, r24
     eba:	88 0f       	add	r24, r24
     ebc:	89 2b       	or	r24, r25
     ebe:	28 81       	ld	r18, Y
     ec0:	39 81       	ldd	r19, Y+1	; 0x01
     ec2:	a9 01       	movw	r20, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <process_step+0xee>
     ec6:	56 95       	lsr	r21
     ec8:	47 95       	ror	r20
     eca:	8a 95       	dec	r24
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <process_step+0xea>
     ece:	40 ff       	sbrs	r20, 0
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <process_step+0x106>
						spi_data[8] |= 1<<ACCENT;
     ed2:	ed e6       	ldi	r30, 0x6D	; 109
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	80 85       	ldd	r24, Z+8	; 0x08
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     edc:	84 e1       	ldi	r24, 0x14	; 20
     ede:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     ee2:	ee e6       	ldi	r30, 0x6E	; 110
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     eec:	85 b5       	in	r24, 0x25	; 37
     eee:	83 60       	ori	r24, 0x03	; 3
     ef0:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
     ef2:	80 91 7a 03 	lds	r24, 0x037A
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	80 93 7a 03 	sts	0x037A, r24
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <process_step+0x130>
				//handle patterns >16 steps here, or maybe not?

				
			//}
				
		} else if (flag.next_step){
     efe:	80 91 7a 03 	lds	r24, 0x037A
     f02:	80 ff       	sbrs	r24, 0
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <process_step+0x130>
			
			flag.next_step = 0;
     f06:	8e 7f       	andi	r24, 0xFE	; 254
     f08:	80 93 7a 03 	sts	0x037A, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <update_step_board>:

void update_step_board() {
     f12:	2f 92       	push	r2
     f14:	3f 92       	push	r3
     f16:	4f 92       	push	r4
     f18:	5f 92       	push	r5
     f1a:	6f 92       	push	r6
     f1c:	7f 92       	push	r7
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
	
	if (sequencer.START) {
     f36:	90 91 7c 03 	lds	r25, 0x037C
     f3a:	91 ff       	sbrs	r25, 1
     f3c:	2c c1       	rjmp	.+600    	; 0x1196 <update_step_board+0x284>
		
			switch (sequencer.mode) {		
     f3e:	80 91 7b 03 	lds	r24, 0x037B
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	08 f0       	brcs	.+2      	; 0xf4a <update_step_board+0x38>
     f48:	26 c1       	rjmp	.+588    	; 0x1196 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     f4a:	92 ff       	sbrs	r25, 2
     f4c:	26 c0       	rjmp	.+76     	; 0xf9a <update_step_board+0x88>
					
					for (int i = 0; i < NUM_STEPS; i++) {
						
							if (button[i].state) {
     f4e:	80 91 18 02 	lds	r24, 0x0218
     f52:	86 fd       	sbrc	r24, 6
     f54:	0b c0       	rjmp	.+22     	; 0xf6c <update_step_board+0x5a>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	fc 01       	movw	r30, r24
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	e8 5e       	subi	r30, 0xE8	; 232
     f62:	fd 4f       	sbci	r31, 0xFD	; 253
     f64:	20 81       	ld	r18, Z
     f66:	26 ff       	sbrs	r18, 6
     f68:	13 c0       	rjmp	.+38     	; 0xf90 <update_step_board+0x7e>
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <update_step_board+0x5e>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     f70:	fc 01       	movw	r30, r24
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	e8 5e       	subi	r30, 0xE8	; 232
     f78:	fd 4f       	sbci	r31, 0xFD	; 253
     f7a:	90 81       	ld	r25, Z
     f7c:	9f 7b       	andi	r25, 0xBF	; 191
     f7e:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     f80:	ed e4       	ldi	r30, 0x4D	; 77
     f82:	f4 e0       	ldi	r31, 0x04	; 4
     f84:	8f 71       	andi	r24, 0x1F	; 31
     f86:	90 81       	ld	r25, Z
     f88:	90 7e       	andi	r25, 0xE0	; 224
     f8a:	89 2b       	or	r24, r25
     f8c:	80 83       	st	Z, r24
								break;// - should we break out of here? multiple presses will mess things up, right?
     f8e:	03 c1       	rjmp	.+518    	; 0x1196 <update_step_board+0x284>
			
			case FIRST_PART: case SECOND_PART:
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < NUM_STEPS; i++) {
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	80 31       	cpi	r24, 0x10	; 16
     f94:	91 05       	cpc	r25, r1
     f96:	09 f7       	brne	.-62     	; 0xf5a <update_step_board+0x48>
     f98:	fe c0       	rjmp	.+508    	; 0x1196 <update_step_board+0x284>
					//step_num = sequencer.step_num_second;
					//offset = 16; //offset for steps 16-31
					//
				//}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     f9a:	80 91 51 04 	lds	r24, 0x0451
     f9e:	80 31       	cpi	r24, 0x10	; 16
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <update_step_board+0x92>
     fa2:	72 c0       	rjmp	.+228    	; 0x1088 <update_step_board+0x176>
     fa4:	00 e0       	ldi	r16, 0x00	; 0
     fa6:	10 e0       	ldi	r17, 0x00	; 0
				
						if (button[i].state) {
					
							
							button[i].state ^= button[i].state;
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     fa8:	ce e4       	ldi	r28, 0x4E	; 78
     faa:	d4 e0       	ldi	r29, 0x04	; 4
								toggle(i);
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
     fac:	0f 2e       	mov	r0, r31
     fae:	f9 e4       	ldi	r31, 0x49	; 73
     fb0:	6f 2e       	mov	r6, r31
     fb2:	f4 e0       	ldi	r31, 0x04	; 4
     fb4:	7f 2e       	mov	r7, r31
     fb6:	f0 2d       	mov	r31, r0
     fb8:	cc 24       	eor	r12, r12
     fba:	c3 94       	inc	r12
     fbc:	d1 2c       	mov	r13, r1
     fbe:	0f 2e       	mov	r0, r31
     fc0:	f3 e3       	ldi	r31, 0x33	; 51
     fc2:	bf 2e       	mov	r11, r31
     fc4:	f0 2d       	mov	r31, r0
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     fc6:	0f 2e       	mov	r0, r31
     fc8:	f1 e5       	ldi	r31, 0x51	; 81
     fca:	4f 2e       	mov	r4, r31
     fcc:	f4 e0       	ldi	r31, 0x04	; 4
     fce:	5f 2e       	mov	r5, r31
     fd0:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     fd2:	f8 01       	movw	r30, r16
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	e8 5e       	subi	r30, 0xE8	; 232
     fda:	fd 4f       	sbci	r31, 0xFD	; 253
     fdc:	80 81       	ld	r24, Z
     fde:	86 ff       	sbrs	r24, 6
     fe0:	4c c0       	rjmp	.+152    	; 0x107a <update_step_board+0x168>
					
							
							button[i].state ^= button[i].state;
     fe2:	f8 01       	movw	r30, r16
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	e8 5e       	subi	r30, 0xE8	; 232
     fea:	fd 4f       	sbci	r31, 0xFD	; 253
     fec:	8f 7b       	andi	r24, 0xBF	; 191
     fee:	80 83       	st	Z, r24
							if (i <= sequencer.step_num[sequencer.part_editing]) { //need handle all button presses, but only use presses that are below current step number
     ff0:	88 81       	ld	r24, Y
     ff2:	82 fb       	bst	r24, 2
     ff4:	88 24       	eor	r8, r8
     ff6:	80 f8       	bld	r8, 0
     ff8:	91 2c       	mov	r9, r1
     ffa:	f4 01       	movw	r30, r8
     ffc:	e5 58       	subi	r30, 0x85	; 133
     ffe:	fc 4f       	sbci	r31, 0xFC	; 252
    1000:	e0 53       	subi	r30, 0x30	; 48
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 81       	ld	r24, Z
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	80 17       	cp	r24, r16
    100a:	91 07       	cpc	r25, r17
    100c:	b4 f1       	brlt	.+108    	; 0x107a <update_step_board+0x168>
								toggle(i);
    100e:	80 2f       	mov	r24, r16
    1010:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
								sequencer.pattern[sequencer.variation].accent[sequencer.part_editing] ^= 1<<i; 
    1014:	d3 01       	movw	r26, r6
    1016:	8c 91       	ld	r24, X
    1018:	80 fb       	bst	r24, 0
    101a:	22 24       	eor	r2, r2
    101c:	20 f8       	bld	r2, 0
    101e:	31 2c       	mov	r3, r1
    1020:	88 81       	ld	r24, Y
    1022:	82 fb       	bst	r24, 2
    1024:	ee 24       	eor	r14, r14
    1026:	e0 f8       	bld	r14, 0
    1028:	f1 2c       	mov	r15, r1
    102a:	b2 9c       	mul	r11, r2
    102c:	f0 01       	movw	r30, r0
    102e:	b3 9c       	mul	r11, r3
    1030:	f0 0d       	add	r31, r0
    1032:	11 24       	eor	r1, r1
    1034:	df 01       	movw	r26, r30
    1036:	ae 0d       	add	r26, r14
    1038:	bf 1d       	adc	r27, r15
    103a:	aa 0f       	add	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	a3 54       	subi	r26, 0x43	; 67
    1040:	bc 4f       	sbci	r27, 0xFC	; 252
    1042:	2d 91       	ld	r18, X+
    1044:	3c 91       	ld	r19, X
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	c6 01       	movw	r24, r12
    104a:	00 2e       	mov	r0, r16
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <update_step_board+0x140>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <update_step_board+0x13c>
    1056:	28 27       	eor	r18, r24
    1058:	39 27       	eor	r19, r25
    105a:	2d 93       	st	X+, r18
    105c:	3c 93       	st	X, r19
								sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    105e:	d2 01       	movw	r26, r4
    1060:	2c 91       	ld	r18, X
    1062:	e2 0f       	add	r30, r18
    1064:	f1 1d       	adc	r31, r1
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	ef 53       	subi	r30, 0x3F	; 63
    106c:	fc 4f       	sbci	r31, 0xFC	; 252
    106e:	20 81       	ld	r18, Z
    1070:	31 81       	ldd	r19, Z+1	; 0x01
    1072:	82 27       	eor	r24, r18
    1074:	93 27       	eor	r25, r19
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
					//
				//}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
    107a:	0f 5f       	subi	r16, 0xFF	; 255
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	00 31       	cpi	r16, 0x10	; 16
    1080:	11 05       	cpc	r17, r1
    1082:	09 f0       	breq	.+2      	; 0x1086 <update_step_board+0x174>
    1084:	a6 cf       	rjmp	.-180    	; 0xfd2 <update_step_board+0xc0>
    1086:	87 c0       	rjmp	.+270    	; 0x1196 <update_step_board+0x284>
    1088:	c0 e0       	ldi	r28, 0x00	; 0
    108a:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
						
						
						button[i].state ^= button[i].state;
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    108c:	0f 2e       	mov	r0, r31
    108e:	fe e4       	ldi	r31, 0x4E	; 78
    1090:	ef 2e       	mov	r14, r31
    1092:	f4 e0       	ldi	r31, 0x04	; 4
    1094:	ff 2e       	mov	r15, r31
    1096:	f0 2d       	mov	r31, r0
							toggle(i);
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    1098:	0f 2e       	mov	r0, r31
    109a:	f9 e4       	ldi	r31, 0x49	; 73
    109c:	6f 2e       	mov	r6, r31
    109e:	f4 e0       	ldi	r31, 0x04	; 4
    10a0:	7f 2e       	mov	r7, r31
    10a2:	f0 2d       	mov	r31, r0
    10a4:	0f 2e       	mov	r0, r31
    10a6:	f1 e5       	ldi	r31, 0x51	; 81
    10a8:	4f 2e       	mov	r4, r31
    10aa:	f4 e0       	ldi	r31, 0x04	; 4
    10ac:	5f 2e       	mov	r5, r31
    10ae:	f0 2d       	mov	r31, r0
    10b0:	0f 2e       	mov	r0, r31
    10b2:	f3 e3       	ldi	r31, 0x33	; 51
    10b4:	3f 2e       	mov	r3, r31
    10b6:	f0 2d       	mov	r31, r0
    10b8:	88 24       	eor	r8, r8
    10ba:	83 94       	inc	r8
    10bc:	91 2c       	mov	r9, r1
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
    10be:	fe 01       	movw	r30, r28
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	e8 5e       	subi	r30, 0xE8	; 232
    10c6:	fd 4f       	sbci	r31, 0xFD	; 253
    10c8:	80 81       	ld	r24, Z
    10ca:	86 ff       	sbrs	r24, 6
    10cc:	5f c0       	rjmp	.+190    	; 0x118c <update_step_board+0x27a>
						
						
						button[i].state ^= button[i].state;
    10ce:	fe 01       	movw	r30, r28
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	e8 5e       	subi	r30, 0xE8	; 232
    10d6:	fd 4f       	sbci	r31, 0xFD	; 253
    10d8:	8f 7b       	andi	r24, 0xBF	; 191
    10da:	80 83       	st	Z, r24
						if (i <= sequencer.step_num[sequencer.part_editing]) {
    10dc:	f7 01       	movw	r30, r14
    10de:	80 81       	ld	r24, Z
    10e0:	82 fb       	bst	r24, 2
    10e2:	00 27       	eor	r16, r16
    10e4:	00 f9       	bld	r16, 0
    10e6:	10 e0       	ldi	r17, 0x00	; 0
    10e8:	f8 01       	movw	r30, r16
    10ea:	e5 58       	subi	r30, 0x85	; 133
    10ec:	fc 4f       	sbci	r31, 0xFC	; 252
    10ee:	e0 53       	subi	r30, 0x30	; 48
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	8c 17       	cp	r24, r28
    10f8:	9d 07       	cpc	r25, r29
    10fa:	0c f4       	brge	.+2      	; 0x10fe <update_step_board+0x1ec>
    10fc:	47 c0       	rjmp	.+142    	; 0x118c <update_step_board+0x27a>
							toggle(i);
    10fe:	8c 2f       	mov	r24, r28
    1100:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
							sequencer.pattern[sequencer.variation].part[sequencer.part_editing][i] ^= 1<<sequencer.current_inst;
    1104:	d3 01       	movw	r26, r6
    1106:	8c 91       	ld	r24, X
    1108:	80 fb       	bst	r24, 0
    110a:	cc 24       	eor	r12, r12
    110c:	c0 f8       	bld	r12, 0
    110e:	d1 2c       	mov	r13, r1
    1110:	f7 01       	movw	r30, r14
    1112:	80 81       	ld	r24, Z
    1114:	82 fb       	bst	r24, 2
    1116:	aa 24       	eor	r10, r10
    1118:	a0 f8       	bld	r10, 0
    111a:	b1 2c       	mov	r11, r1
    111c:	d2 01       	movw	r26, r4
    111e:	6c 91       	ld	r22, X
    1120:	c5 01       	movw	r24, r10
    1122:	82 95       	swap	r24
    1124:	92 95       	swap	r25
    1126:	90 7f       	andi	r25, 0xF0	; 240
    1128:	98 27       	eor	r25, r24
    112a:	80 7f       	andi	r24, 0xF0	; 240
    112c:	98 27       	eor	r25, r24
    112e:	3c 9c       	mul	r3, r12
    1130:	90 01       	movw	r18, r0
    1132:	3d 9c       	mul	r3, r13
    1134:	30 0d       	add	r19, r0
    1136:	11 24       	eor	r1, r1
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	8c 0f       	add	r24, r28
    113e:	9d 1f       	adc	r25, r29
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	fc 01       	movw	r30, r24
    1146:	e3 58       	subi	r30, 0x83	; 131
    1148:	fc 4f       	sbci	r31, 0xFC	; 252
    114a:	c4 01       	movw	r24, r8
    114c:	06 2e       	mov	r0, r22
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <update_step_board+0x242>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <update_step_board+0x23e>
    1158:	40 81       	ld	r20, Z
    115a:	51 81       	ldd	r21, Z+1	; 0x01
    115c:	84 27       	eor	r24, r20
    115e:	95 27       	eor	r25, r21
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1164:	f9 01       	movw	r30, r18
    1166:	e6 0f       	add	r30, r22
    1168:	f1 1d       	adc	r31, r1
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	ef 53       	subi	r30, 0x3F	; 63
    1170:	fc 4f       	sbci	r31, 0xFC	; 252
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	94 01       	movw	r18, r8
    1178:	0c 2e       	mov	r0, r28
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <update_step_board+0x26e>
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <update_step_board+0x26a>
    1184:	82 27       	eor	r24, r18
    1186:	93 27       	eor	r25, r19
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
							}
						}
					}
					return;
				}
				for (int i = 0; i < NUM_STEPS; i++) { //button and led indices match for 0-15. How convenient.
    118c:	21 96       	adiw	r28, 0x01	; 1
    118e:	c0 31       	cpi	r28, 0x10	; 16
    1190:	d1 05       	cpc	r29, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <update_step_board+0x284>
    1194:	94 cf       	rjmp	.-216    	; 0x10be <update_step_board+0x1ac>
	} else {
		
		//handle what here? changing selected pattern or rhythm? 
		
	}
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	cf 90       	pop	r12
    11a6:	bf 90       	pop	r11
    11a8:	af 90       	pop	r10
    11aa:	9f 90       	pop	r9
    11ac:	8f 90       	pop	r8
    11ae:	7f 90       	pop	r7
    11b0:	6f 90       	pop	r6
    11b2:	5f 90       	pop	r5
    11b4:	4f 90       	pop	r4
    11b6:	3f 90       	pop	r3
    11b8:	2f 90       	pop	r2
    11ba:	08 95       	ret

000011bc <update_prescale>:
	
}

void update_prescale(void) {
	
	if (button[BASIC_VAR_A_SW].state && sequencer.SHIFT) {
    11bc:	80 91 54 02 	lds	r24, 0x0254
    11c0:	86 ff       	sbrs	r24, 6
    11c2:	29 c0       	rjmp	.+82     	; 0x1216 <update_prescale+0x5a>
    11c4:	80 91 7c 03 	lds	r24, 0x037C
    11c8:	80 ff       	sbrs	r24, 0
    11ca:	25 c0       	rjmp	.+74     	; 0x1216 <update_prescale+0x5a>
	
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle switch state
    11cc:	e4 e5       	ldi	r30, 0x54	; 84
    11ce:	f2 e0       	ldi	r31, 0x02	; 2
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	80 83       	st	Z, r24
		
		if (pre_scale_index-- == 0) { //decrement to go from 3 to 4 to 1 to 2 to 3...
    11d6:	80 91 17 02 	lds	r24, 0x0217
    11da:	88 23       	and	r24, r24
    11dc:	21 f0       	breq	.+8      	; 0x11e6 <update_prescale+0x2a>
    11de:	81 50       	subi	r24, 0x01	; 1
    11e0:	80 93 17 02 	sts	0x0217, r24
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <update_prescale+0x30>
			
			pre_scale_index = NUM_PRE_SCALES -1;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	80 93 17 02 	sts	0x0217, r24
					
		}
		flag.pre_scale_change = 1;
    11ec:	80 91 7a 03 	lds	r24, 0x037A
    11f0:	80 64       	ori	r24, 0x40	; 64
    11f2:	80 93 7a 03 	sts	0x037A, r24
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    11f6:	ed e6       	ldi	r30, 0x6D	; 109
    11f8:	f2 e0       	ldi	r31, 0x02	; 2
    11fa:	20 91 17 02 	lds	r18, 0x0217
    11fe:	2e 5f       	subi	r18, 0xFE	; 254
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <update_prescale+0x4e>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	2a 95       	dec	r18
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <update_prescale+0x4a>
			
			pre_scale_index = NUM_PRE_SCALES -1;
					
		}
		flag.pre_scale_change = 1;
		spi_data[5] &= PRE_SCALE_LED_MASK; //clear pre-scale LED bits
    120e:	95 81       	ldd	r25, Z+5	; 0x05
    1210:	93 7c       	andi	r25, 0xC3	; 195
		spi_data[5] |= (1<< (pre_scale_index +2)); //need 2 bit offset on latch 5 (pre-scale leds are bit 2-5)
    1212:	89 2b       	or	r24, r25
    1214:	85 83       	std	Z+5, r24	; 0x05
    1216:	08 95       	ret

00001218 <toggle_variation>:
	
}

void toggle_variation(void) {
	
	if (flag.variation_change == 1) {
    1218:	80 91 7a 03 	lds	r24, 0x037A
    121c:	82 ff       	sbrs	r24, 2
    121e:	16 c0       	rjmp	.+44     	; 0x124c <toggle_variation+0x34>
		flag.variation_change = 0;
    1220:	8b 7f       	andi	r24, 0xFB	; 251
    1222:	80 93 7a 03 	sts	0x037A, r24
		switch (sequencer.variation_mode) {
    1226:	80 91 4a 04 	lds	r24, 0x044A
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	49 f0       	breq	.+18     	; 0x1240 <toggle_variation+0x28>
    122e:	10 f0       	brcs	.+4      	; 0x1234 <toggle_variation+0x1c>
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	c1 f4       	brne	.+48     	; 0x1264 <toggle_variation+0x4c>
					
			case VAR_A: case VAR_AB:
			sequencer.variation = VAR_A;
    1234:	e9 e4       	ldi	r30, 0x49	; 73
    1236:	f4 e0       	ldi	r31, 0x04	; 4
    1238:	80 81       	ld	r24, Z
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	80 83       	st	Z, r24
			break;
    123e:	08 95       	ret
			case VAR_B:
			sequencer.variation = VAR_B;
    1240:	e9 e4       	ldi	r30, 0x49	; 73
    1242:	f4 e0       	ldi	r31, 0x04	; 4
    1244:	80 81       	ld	r24, Z
    1246:	81 60       	ori	r24, 0x01	; 1
    1248:	80 83       	st	Z, r24
			break;
    124a:	08 95       	ret
					
					
		}
				
		} else if (sequencer.variation_mode == VAR_AB) {
    124c:	80 91 4a 04 	lds	r24, 0x044A
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	41 f4       	brne	.+16     	; 0x1264 <toggle_variation+0x4c>
				
		sequencer.variation ^= 1<<0; //toggle state
    1254:	e9 e4       	ldi	r30, 0x49	; 73
    1256:	f4 e0       	ldi	r31, 0x04	; 4
    1258:	80 81       	ld	r24, Z
    125a:	98 2f       	mov	r25, r24
    125c:	90 95       	com	r25
    125e:	90 fb       	bst	r25, 0
    1260:	80 f9       	bld	r24, 0
    1262:	80 83       	st	Z, r24
    1264:	08 95       	ret

00001266 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    1266:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    126a:	ed ea       	ldi	r30, 0xAD	; 173
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	88 23       	and	r24, r24
    1272:	ec f7       	brge	.-6      	; 0x126e <spi_shift_byte+0x8>
	return SPDR1;
    1274:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    1278:	08 95       	ret

0000127a <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    127e:	cd e6       	ldi	r28, 0x6D	; 109
    1280:	d2 e0       	ldi	r29, 0x02	; 2
    1282:	88 81       	ld	r24, Y
    1284:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    12ac:	8f 81       	ldd	r24, Y+7	; 0x07
    12ae:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    12b2:	88 85       	ldd	r24, Y+8	; 0x08
    12b4:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    12b8:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    12ba:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <read_switches>:

void read_switches(void) { //reads switch data
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    12c6:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
    12ce:	c8 e6       	ldi	r28, 0x68	; 104
    12d0:	d2 e0       	ldi	r29, 0x02	; 2
    12d2:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
    12da:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
    12ea:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 33 09 	call	0x1266	; 0x1266 <spi_shift_byte>
    12f2:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    12f4:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    12f6:	28 81       	ld	r18, Y
    12f8:	92 2f       	mov	r25, r18
    12fa:	96 95       	lsr	r25
    12fc:	ec e7       	ldi	r30, 0x7C	; 124
    12fe:	f3 e0       	ldi	r31, 0x03	; 3
    1300:	30 81       	ld	r19, Z
    1302:	90 fb       	bst	r25, 0
    1304:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	49 2f       	mov	r20, r25
    130a:	42 95       	swap	r20
    130c:	4f 70       	andi	r20, 0x0F	; 15
    130e:	40 fb       	bst	r20, 0
    1310:	32 f9       	bld	r19, 2
    1312:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    1314:	e3 e6       	ldi	r30, 0x63	; 99
    1316:	f2 e0       	ldi	r31, 0x02	; 2
    1318:	30 81       	ld	r19, Z
    131a:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    131c:	32 27       	eor	r19, r18
    131e:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1320:	23 23       	and	r18, r19
    1322:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    1324:	31 81       	ldd	r19, Z+1	; 0x01
    1326:	29 81       	ldd	r18, Y+1	; 0x01
    1328:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    132a:	32 27       	eor	r19, r18
    132c:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    132e:	23 23       	and	r18, r19
    1330:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1332:	22 81       	ldd	r18, Z+2	; 0x02
    1334:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    1336:	29 27       	eor	r18, r25
    1338:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    133a:	92 23       	and	r25, r18
    133c:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    133e:	23 81       	ldd	r18, Z+3	; 0x03
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    1344:	29 27       	eor	r18, r25
    1346:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    1348:	92 23       	and	r25, r18
    134a:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    134c:	94 81       	ldd	r25, Z+4	; 0x04
    134e:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1350:	98 27       	eor	r25, r24
    1352:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    1354:	89 23       	and	r24, r25
    1356:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    1362:	da 01       	movw	r26, r20
    1364:	aa 0f       	add	r26, r26
    1366:	bb 1f       	adc	r27, r27
    1368:	a8 5e       	subi	r26, 0xE8	; 232
    136a:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    136c:	8c 91       	ld	r24, X
    136e:	e8 2f       	mov	r30, r24
    1370:	e6 95       	lsr	r30
    1372:	e6 95       	lsr	r30
    1374:	e6 95       	lsr	r30
    1376:	e7 70       	andi	r30, 0x07	; 7
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	e8 59       	subi	r30, 0x98	; 152
    137c:	fd 4f       	sbci	r31, 0xFD	; 253
    137e:	20 81       	ld	r18, Z
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	98 2f       	mov	r25, r24
    1384:	97 70       	andi	r25, 0x07	; 7
    1386:	02 c0       	rjmp	.+4      	; 0x138c <parse_switch_data+0x2e>
    1388:	35 95       	asr	r19
    138a:	27 95       	ror	r18
    138c:	9a 95       	dec	r25
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <parse_switch_data+0x2a>
    1390:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    1392:	86 fb       	bst	r24, 6
    1394:	99 27       	eor	r25, r25
    1396:	90 f9       	bld	r25, 0
    1398:	29 27       	eor	r18, r25
    139a:	20 fb       	bst	r18, 0
    139c:	86 f9       	bld	r24, 6
    139e:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    13a0:	4f 5f       	subi	r20, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	43 32       	cpi	r20, 0x23	; 35
    13a6:	51 05       	cpc	r21, r1
    13a8:	e1 f6       	brne	.-72     	; 0x1362 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    13aa:	08 95       	ret

000013ac <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    13ac:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    13ae:	80 91 76 02 	lds	r24, 0x0276
    13b2:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    13b4:	89 27       	eor	r24, r25
    13b6:	80 93 76 02 	sts	0x0276, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    13ba:	89 23       	and	r24, r25
    13bc:	80 93 77 02 	sts	0x0277, r24
	uint8_t start_state = sequencer.START;
    13c0:	ec e7       	ldi	r30, 0x7C	; 124
    13c2:	f3 e0       	ldi	r31, 0x03	; 3
    13c4:	90 81       	ld	r25, Z
    13c6:	91 fb       	bst	r25, 1
    13c8:	22 27       	eor	r18, r18
    13ca:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    13cc:	86 95       	lsr	r24
    13ce:	82 27       	eor	r24, r18
    13d0:	80 fb       	bst	r24, 0
    13d2:	91 f9       	bld	r25, 1
    13d4:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    13d6:	91 ff       	sbrs	r25, 1
    13d8:	54 c0       	rjmp	.+168    	; 0x1482 <check_start_stop_tap+0xd6>
    13da:	21 11       	cpse	r18, r1
    13dc:	40 c0       	rjmp	.+128    	; 0x145e <check_start_stop_tap+0xb2>
		
		sequencer.current_step = 0;
    13de:	ed e4       	ldi	r30, 0x4D	; 77
    13e0:	f4 e0       	ldi	r31, 0x04	; 4
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 71       	andi	r24, 0x1F	; 31
    13e6:	80 83       	st	Z, r24
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	8e 7f       	andi	r24, 0xFE	; 254
    13ec:	81 83       	std	Z+1, r24	; 0x01
		flag.next_step = 1;
    13ee:	80 91 7a 03 	lds	r24, 0x037A
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    13f2:	10 92 79 02 	sts	0x0279, r1
		
		flag.variation_change = 0;
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	8b 7f       	andi	r24, 0xFB	; 251
    13fa:	80 93 7a 03 	sts	0x037A, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    13fe:	80 91 4a 04 	lds	r24, 0x044A
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	31 f4       	brne	.+12     	; 0x1412 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    1406:	e9 e4       	ldi	r30, 0x49	; 73
    1408:	f4 e0       	ldi	r31, 0x04	; 4
    140a:	80 81       	ld	r24, Z
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	80 83       	st	Z, r24
    1410:	26 c0       	rjmp	.+76     	; 0x145e <check_start_stop_tap+0xb2>
		} else {
			
			sequencer.variation = VAR_B;
    1412:	e9 e4       	ldi	r30, 0x49	; 73
    1414:	f4 e0       	ldi	r31, 0x04	; 4
    1416:	80 81       	ld	r24, Z
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	80 83       	st	Z, r24
    141c:	20 c0       	rjmp	.+64     	; 0x145e <check_start_stop_tap+0xb2>
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		if (sequencer.part_playing == SECOND) { //reset part playing
    141e:	80 91 4e 04 	lds	r24, 0x044E
    1422:	81 ff       	sbrs	r24, 1
    1424:	0b c0       	rjmp	.+22     	; 0x143c <check_start_stop_tap+0x90>
			sequencer.part_playing = FIRST;
    1426:	ed e4       	ldi	r30, 0x4D	; 77
    1428:	f4 e0       	ldi	r31, 0x04	; 4
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	81 83       	std	Z+1, r24	; 0x01
			turn_off(SECOND_PART_LED);
    1430:	8b e2       	ldi	r24, 0x2B	; 43
    1432:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <turn_off>
			turn_on (FIRST_PART_LED);	
    1436:	8a e2       	ldi	r24, 0x2A	; 42
    1438:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
			
		}
		turn_off_all_inst_leds();
    143c:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1440:	80 91 51 04 	lds	r24, 0x0451
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	fc 01       	movw	r30, r24
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	e8 0f       	add	r30, r24
    144e:	f9 1f       	adc	r31, r25
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	e0 50       	subi	r30, 0x00	; 0
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	85 81       	ldd	r24, Z+5	; 0x05
    145a:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
		
	} 
	
	if ((sequencer.START && (current_start_stop_tap_state >> TAP) &1)) {
    145e:	80 91 7c 03 	lds	r24, 0x037C
    1462:	81 ff       	sbrs	r24, 1
    1464:	10 c0       	rjmp	.+32     	; 0x1486 <check_start_stop_tap+0xda>
    1466:	80 91 77 02 	lds	r24, 0x0277
    146a:	82 ff       	sbrs	r24, 2
    146c:	0c c0       	rjmp	.+24     	; 0x1486 <check_start_stop_tap+0xda>
		
		current_start_stop_tap_state ^= (1<<TAP); //toggle tap switch bit
    146e:	94 e0       	ldi	r25, 0x04	; 4
    1470:	89 27       	eor	r24, r25
    1472:	80 93 77 02 	sts	0x0277, r24
		flag.tap = 1;
    1476:	80 91 7a 03 	lds	r24, 0x037A
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	80 93 7a 03 	sts	0x037A, r24
    1480:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1482:	21 30       	cpi	r18, 0x01	; 1
    1484:	61 f2       	breq	.-104    	; 0x141e <check_start_stop_tap+0x72>
    1486:	08 95       	ret

00001488 <check_inst_switches>:
		
	}
	
}
	
void check_inst_switches(void) {
    1488:	3f 92       	push	r3
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	0f 2e       	mov	r0, r31
    14ac:	f5 e0       	ldi	r31, 0x05	; 5
    14ae:	ef 2e       	mov	r14, r31
    14b0:	f1 e0       	ldi	r31, 0x01	; 1
    14b2:	ff 2e       	mov	r15, r31
    14b4:	f0 2d       	mov	r31, r0
    14b6:	0f 2e       	mov	r0, r31
    14b8:	fb e3       	ldi	r31, 0x3B	; 59
    14ba:	8f 2e       	mov	r8, r31
    14bc:	f1 e0       	ldi	r31, 0x01	; 1
    14be:	9f 2e       	mov	r9, r31
    14c0:	f0 2d       	mov	r31, r0
    14c2:	02 e1       	ldi	r16, 0x12	; 18
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	c1 e1       	ldi	r28, 0x11	; 17
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
    14ca:	c1 2c       	mov	r12, r1
    14cc:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    14ce:	0f 2e       	mov	r0, r31
    14d0:	f1 e5       	ldi	r31, 0x51	; 81
    14d2:	af 2e       	mov	r10, r31
    14d4:	f4 e0       	ldi	r31, 0x04	; 4
    14d6:	bf 2e       	mov	r11, r31
    14d8:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    14da:	0f 2e       	mov	r0, r31
    14dc:	ff e5       	ldi	r31, 0x5F	; 95
    14de:	4f 2e       	mov	r4, r31
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	5f 2e       	mov	r5, r31
    14e4:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    14e6:	0f 2e       	mov	r0, r31
    14e8:	ff e0       	ldi	r31, 0x0F	; 15
    14ea:	3f 2e       	mov	r3, r31
    14ec:	f0 2d       	mov	r31, r0
    14ee:	0c c0       	rjmp	.+24     	; 0x1508 <check_inst_switches+0x80>
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	c8 1a       	sub	r12, r24
    14f4:	d8 0a       	sbc	r13, r24
    14f6:	21 96       	adiw	r28, 0x01	; 1
    14f8:	0f 5f       	subi	r16, 0xFF	; 255
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	a6 e0       	ldi	r26, 0x06	; 6
    14fe:	ea 0e       	add	r14, r26
    1500:	f1 1c       	adc	r15, r1
    1502:	b6 e0       	ldi	r27, 0x06	; 6
    1504:	8b 0e       	add	r8, r27
    1506:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    1508:	fe 01       	movw	r30, r28
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	e8 5e       	subi	r30, 0xE8	; 232
    1510:	fd 4f       	sbci	r31, 0xFD	; 253
    1512:	80 81       	ld	r24, Z
    1514:	86 ff       	sbrs	r24, 6
    1516:	37 c0       	rjmp	.+110    	; 0x1586 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1518:	fe 01       	movw	r30, r28
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	e8 5e       	subi	r30, 0xE8	; 232
    1520:	fd 4f       	sbci	r31, 0xFD	; 253
    1522:	8f 7b       	andi	r24, 0xBF	; 191
    1524:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    1526:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
    152a:	f7 01       	movw	r30, r14
    152c:	d7 01       	movw	r26, r14
    152e:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1530:	8c 91       	ld	r24, X
    1532:	8f 3f       	cpi	r24, 0xFF	; 255
    1534:	a9 f0       	breq	.+42     	; 0x1560 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1536:	d5 01       	movw	r26, r10
    1538:	8c 91       	ld	r24, X
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	c8 16       	cp	r12, r24
    153e:	d9 06       	cpc	r13, r25
    1540:	49 f4       	brne	.+18     	; 0x1554 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1542:	f4 01       	movw	r30, r8
    1544:	80 81       	ld	r24, Z
    1546:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
    154a:	89 e0       	ldi	r24, 0x09	; 9
    154c:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    154e:	d5 01       	movw	r26, r10
    1550:	8c 93       	st	X, r24
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1554:	80 81       	ld	r24, Z
    1556:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    155a:	f5 01       	movw	r30, r10
    155c:	c0 82       	st	Z, r12
    155e:	13 c0       	rjmp	.+38     	; 0x1586 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1560:	d5 01       	movw	r26, r10
    1562:	8c 91       	ld	r24, X
    1564:	86 30       	cpi	r24, 0x06	; 6
    1566:	51 f4       	brne	.+20     	; 0x157c <check_inst_switches+0xf4>
    1568:	c7 31       	cpi	r28, 0x17	; 23
    156a:	d1 05       	cpc	r29, r1
    156c:	39 f4       	brne	.+14     	; 0x157c <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    156e:	f2 01       	movw	r30, r4
    1570:	80 81       	ld	r24, Z
    1572:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					sequencer.current_inst = MA;
    1576:	d5 01       	movw	r26, r10
    1578:	3c 92       	st	X, r3
    157a:	ba cf       	rjmp	.-140    	; 0x14f0 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    157c:	80 81       	ld	r24, Z
    157e:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1582:	f5 01       	movw	r30, r10
    1584:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1586:	0c 31       	cpi	r16, 0x1C	; 28
    1588:	11 05       	cpc	r17, r1
    158a:	0c f4       	brge	.+2      	; 0x158e <check_inst_switches+0x106>
    158c:	b1 cf       	rjmp	.-158    	; 0x14f0 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    158e:	80 91 38 02 	lds	r24, 0x0238
    1592:	86 ff       	sbrs	r24, 6
    1594:	0c c0       	rjmp	.+24     	; 0x15ae <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1596:	e8 e3       	ldi	r30, 0x38	; 56
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	8f 7b       	andi	r24, 0xBF	; 191
    159c:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    159e:	0e 94 8d 04 	call	0x91a	; 0x91a <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    15a2:	84 e1       	ldi	r24, 0x14	; 20
    15a4:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
		sequencer.current_inst = AC;
    15a8:	80 e1       	ldi	r24, 0x10	; 16
    15aa:	80 93 51 04 	sts	0x0451, r24
	}
	
}	
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	ff 90       	pop	r15
    15b8:	ef 90       	pop	r14
    15ba:	df 90       	pop	r13
    15bc:	cf 90       	pop	r12
    15be:	bf 90       	pop	r11
    15c0:	af 90       	pop	r10
    15c2:	9f 90       	pop	r9
    15c4:	8f 90       	pop	r8
    15c6:	7f 90       	pop	r7
    15c8:	6f 90       	pop	r6
    15ca:	5f 90       	pop	r5
    15cc:	4f 90       	pop	r4
    15ce:	3f 90       	pop	r3
    15d0:	08 95       	ret

000015d2 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state && !sequencer.SHIFT) {
    15d2:	80 91 54 02 	lds	r24, 0x0254
    15d6:	86 ff       	sbrs	r24, 6
    15d8:	29 c0       	rjmp	.+82     	; 0x162c <check_variation_switches+0x5a>
    15da:	90 91 7c 03 	lds	r25, 0x037C
    15de:	90 fd       	sbrc	r25, 0
    15e0:	25 c0       	rjmp	.+74     	; 0x162c <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle  - this is not toggling. need to ^= 1<<0 to toggle a single bit state. hmmm.
    15e2:	e4 e5       	ldi	r30, 0x54	; 84
    15e4:	f2 e0       	ldi	r31, 0x02	; 2
    15e6:	8f 7b       	andi	r24, 0xBF	; 191
    15e8:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    15ea:	ea e4       	ldi	r30, 0x4A	; 74
    15ec:	f4 e0       	ldi	r31, 0x04	; 4
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	80 83       	st	Z, r24
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	29 f4       	brne	.+10     	; 0x1602 <check_variation_switches+0x30>
    15f8:	10 92 4a 04 	sts	0x044A, r1
		if (sequencer.START) {
    15fc:	91 ff       	sbrs	r25, 1
    15fe:	0b c0       	rjmp	.+22     	; 0x1616 <check_variation_switches+0x44>
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <check_variation_switches+0x34>
    1602:	91 ff       	sbrs	r25, 1
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    1606:	80 91 7a 03 	lds	r24, 0x037A
    160a:	84 60       	ori	r24, 0x04	; 4
    160c:	80 93 7a 03 	sts	0x037A, r24
    1610:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1612:	8d 7f       	andi	r24, 0xFD	; 253
    1614:	31 f4       	brne	.+12     	; 0x1622 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1616:	e9 e4       	ldi	r30, 0x49	; 73
    1618:	f4 e0       	ldi	r31, 0x04	; 4
    161a:	80 81       	ld	r24, Z
    161c:	8e 7f       	andi	r24, 0xFE	; 254
    161e:	80 83       	st	Z, r24
    1620:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1622:	e9 e4       	ldi	r30, 0x49	; 73
    1624:	f4 e0       	ldi	r31, 0x04	; 4
    1626:	80 81       	ld	r24, Z
    1628:	81 60       	ori	r24, 0x01	; 1
    162a:	80 83       	st	Z, r24
    162c:	08 95       	ret

0000162e <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    163a:	80 91 7c 03 	lds	r24, 0x037C
    163e:	86 70       	andi	r24, 0x06	; 6
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	09 f0       	breq	.+2      	; 0x1646 <check_clear_switch+0x18>
    1644:	43 c0       	rjmp	.+134    	; 0x16cc <check_clear_switch+0x9e>
		
		switch (sequencer.mode) {
    1646:	80 91 7b 03 	lds	r24, 0x037B
    164a:	81 11       	cpse	r24, r1
    164c:	46 c0       	rjmp	.+140    	; 0x16da <check_clear_switch+0xac>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    164e:	8c e1       	ldi	r24, 0x1C	; 28
    1650:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1654:	e9 e4       	ldi	r30, 0x49	; 73
    1656:	f4 e0       	ldi	r31, 0x04	; 4
    1658:	80 81       	ld	r24, Z
    165a:	80 fb       	bst	r24, 0
    165c:	ee 24       	eor	r14, r14
    165e:	e0 f8       	bld	r14, 0
    1660:	f1 2c       	mov	r15, r1
    1662:	26 e6       	ldi	r18, 0x66	; 102
    1664:	2e 9d       	mul	r18, r14
    1666:	d0 01       	movw	r26, r0
    1668:	2f 9d       	mul	r18, r15
    166a:	b0 0d       	add	r27, r0
    166c:	11 24       	eor	r1, r1
    166e:	a3 58       	subi	r26, 0x83	; 131
    1670:	bc 4f       	sbci	r27, 0xFC	; 252
    1672:	80 e4       	ldi	r24, 0x40	; 64
    1674:	ed 01       	movw	r28, r26
    1676:	19 92       	st	Y+, r1
    1678:	8a 95       	dec	r24
    167a:	e9 f7       	brne	.-6      	; 0x1676 <check_clear_switch+0x48>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    167c:	80 81       	ld	r24, Z
    167e:	08 2f       	mov	r16, r24
    1680:	01 70       	andi	r16, 0x01	; 1
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	20 9f       	mul	r18, r16
    1686:	d0 01       	movw	r26, r0
    1688:	21 9f       	mul	r18, r17
    168a:	b0 0d       	add	r27, r0
    168c:	11 24       	eor	r1, r1
    168e:	af 53       	subi	r26, 0x3F	; 63
    1690:	bc 4f       	sbci	r27, 0xFC	; 252
    1692:	82 e2       	ldi	r24, 0x22	; 34
    1694:	ed 01       	movw	r28, r26
    1696:	19 92       	st	Y+, r1
    1698:	8a 95       	dec	r24
    169a:	e9 f7       	brne	.-6      	; 0x1696 <check_clear_switch+0x68>
				sequencer.pattern[sequencer.variation].accent[FIRST] = 0;
    169c:	80 81       	ld	r24, Z
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	c8 2f       	mov	r28, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	d8 2f       	mov	r29, r24
    16a6:	2c 9f       	mul	r18, r28
    16a8:	c0 01       	movw	r24, r0
    16aa:	2d 9f       	mul	r18, r29
    16ac:	90 0d       	add	r25, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	85 58       	subi	r24, 0x85	; 133
    16b2:	9c 4f       	sbci	r25, 0xFC	; 252
    16b4:	fc 01       	movw	r30, r24
    16b6:	ee 5b       	subi	r30, 0xBE	; 190
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	11 82       	std	Z+1, r1	; 0x01
    16bc:	10 82       	st	Z, r1
				sequencer.pattern[sequencer.variation].accent[SECOND] = 0;
    16be:	32 96       	adiw	r30, 0x02	; 2
    16c0:	11 82       	std	Z+1, r1	; 0x01
    16c2:	10 82       	st	Z, r1
				sequencer.step_num[SECOND]	= NO_STEPS;	//reset second part to no steps		
    16c4:	80 e1       	ldi	r24, 0x10	; 16
    16c6:	80 93 4c 04 	sts	0x044C, r24
				break;
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <check_clear_switch+0xac>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    16cc:	80 91 7b 03 	lds	r24, 0x037B
    16d0:	81 11       	cpse	r24, r1
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <check_clear_switch+0xac>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    16d4:	8c e1       	ldi	r24, 0x1C	; 28
    16d6:	0e 94 3d 04 	call	0x87a	; 0x87a <turn_on>
		}
		
	}
	
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	08 95       	ret

000016e8 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    16e8:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    16ea:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    16ec:	74 83       	std	Z+4, r23	; 0x04
    16ee:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    16f0:	11 82       	std	Z+1, r1	; 0x01
    16f2:	10 82       	st	Z, r1
    16f4:	08 95       	ret

000016f6 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	ec 01       	movw	r28, r24
    1702:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1704:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <store_and_clear_interrupt>
    1708:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    170a:	f9 80       	ldd	r15, Y+1	; 0x01
    170c:	4f 2d       	mov	r20, r15
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	ca 01       	movw	r24, r20
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	2a 81       	ldd	r18, Y+2	; 0x02
    1716:	62 2f       	mov	r22, r18
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__divmodhi4>
    171e:	28 81       	ld	r18, Y
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	82 17       	cp	r24, r18
    1724:	93 07       	cpc	r25, r19
    1726:	29 f4       	brne	.+10     	; 0x1732 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1728:	81 2f       	mov	r24, r17
    172a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <restore_interrupt_setting>
      return false;
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	12 c0       	rjmp	.+36     	; 0x1756 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1732:	eb 81       	ldd	r30, Y+3	; 0x03
    1734:	fc 81       	ldd	r31, Y+4	; 0x04
    1736:	ef 0d       	add	r30, r15
    1738:	f1 1d       	adc	r31, r1
    173a:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	c9 01       	movw	r24, r18
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	6a 81       	ldd	r22, Y+2	; 0x02
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__divmodhi4>
    174c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    174e:	81 2f       	mov	r24, r17
    1750:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <restore_interrupt_setting>
      return true;
    1754:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	08 95       	ret

00001762 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1768:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    176c:	39 81       	ldd	r19, Y+1	; 0x01
    176e:	28 81       	ld	r18, Y
    1770:	32 17       	cp	r19, r18
    1772:	18 f0       	brcs	.+6      	; 0x177a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1774:	c3 2f       	mov	r28, r19
    1776:	c2 1b       	sub	r28, r18
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <bytequeue_length+0x20>
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	c3 2f       	mov	r28, r19
    177e:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1780:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1782:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <restore_interrupt_setting>
   return len;
}
    1786:	8c 2f       	mov	r24, r28
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    178e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1790:	80 81       	ld	r24, Z
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	9b 01       	movw	r18, r22
    1796:	28 0f       	add	r18, r24
    1798:	31 1d       	adc	r19, r1
    179a:	c9 01       	movw	r24, r18
    179c:	62 81       	ldd	r22, Z+2	; 0x02
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__divmodhi4>
    17a4:	03 80       	ldd	r0, Z+3	; 0x03
    17a6:	f4 81       	ldd	r31, Z+4	; 0x04
    17a8:	e0 2d       	mov	r30, r0
    17aa:	e8 0f       	add	r30, r24
    17ac:	f9 1f       	adc	r31, r25
}
    17ae:	80 81       	ld	r24, Z
    17b0:	08 95       	ret

000017b2 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
    17ba:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    17bc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <store_and_clear_interrupt>
    17c0:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    17c2:	88 81       	ld	r24, Y
    17c4:	21 2f       	mov	r18, r17
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	b9 01       	movw	r22, r18
    17ca:	68 0f       	add	r22, r24
    17cc:	71 1d       	adc	r23, r1
    17ce:	cb 01       	movw	r24, r22
    17d0:	6a 81       	ldd	r22, Y+2	; 0x02
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__divmodhi4>
    17d8:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    17da:	84 2f       	mov	r24, r20
    17dc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <restore_interrupt_setting>
}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	08 95       	ret

000017e8 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    17e8:	8f b7       	in	r24, 0x3f	; 63
   cli();
    17ea:	f8 94       	cli
   return sreg;
}
    17ec:	08 95       	ret

000017ee <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    17ee:	8f bf       	out	0x3f, r24	; 63
    17f0:	08 95       	ret

000017f2 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    17f2:	88 1f       	adc	r24, r24
    17f4:	88 27       	eor	r24, r24
    17f6:	88 1f       	adc	r24, r24
    17f8:	08 95       	ret

000017fa <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	88 3f       	cpi	r24, 0xF8	; 248
    17fe:	08 f4       	brcc	.+2      	; 0x1802 <midi_is_realtime+0x8>
    1800:	90 e0       	ldi	r25, 0x00	; 0
}
    1802:	89 2f       	mov	r24, r25
    1804:	08 95       	ret

00001806 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1806:	98 2f       	mov	r25, r24
    1808:	90 7f       	andi	r25, 0xF0	; 240
    180a:	90 3c       	cpi	r25, 0xC0	; 192
    180c:	b1 f0       	breq	.+44     	; 0x183a <midi_packet_length+0x34>
    180e:	58 f4       	brcc	.+22     	; 0x1826 <midi_packet_length+0x20>
    1810:	90 39       	cpi	r25, 0x90	; 144
    1812:	41 f1       	breq	.+80     	; 0x1864 <midi_packet_length+0x5e>
    1814:	18 f4       	brcc	.+6      	; 0x181c <midi_packet_length+0x16>
    1816:	90 38       	cpi	r25, 0x80	; 128
    1818:	19 f5       	brne	.+70     	; 0x1860 <midi_packet_length+0x5a>
    181a:	24 c0       	rjmp	.+72     	; 0x1864 <midi_packet_length+0x5e>
    181c:	90 3a       	cpi	r25, 0xA0	; 160
    181e:	11 f1       	breq	.+68     	; 0x1864 <midi_packet_length+0x5e>
    1820:	90 3b       	cpi	r25, 0xB0	; 176
    1822:	f1 f4       	brne	.+60     	; 0x1860 <midi_packet_length+0x5a>
    1824:	1f c0       	rjmp	.+62     	; 0x1864 <midi_packet_length+0x5e>
    1826:	90 3e       	cpi	r25, 0xE0	; 224
    1828:	e9 f0       	breq	.+58     	; 0x1864 <midi_packet_length+0x5e>
    182a:	18 f4       	brcc	.+6      	; 0x1832 <midi_packet_length+0x2c>
    182c:	90 3d       	cpi	r25, 0xD0	; 208
    182e:	29 f0       	breq	.+10     	; 0x183a <midi_packet_length+0x34>
    1830:	17 c0       	rjmp	.+46     	; 0x1860 <midi_packet_length+0x5a>
    1832:	90 3f       	cpi	r25, 0xF0	; 240
    1834:	21 f0       	breq	.+8      	; 0x183e <midi_packet_length+0x38>
    1836:	93 3f       	cpi	r25, 0xF3	; 243
    1838:	99 f4       	brne	.+38     	; 0x1860 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	08 95       	ret
      case 0xF0:
         switch(status) {
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	fc 01       	movw	r30, r24
    1842:	e1 5f       	subi	r30, 0xF1	; 241
    1844:	f1 09       	sbc	r31, r1
    1846:	ef 30       	cpi	r30, 0x0F	; 15
    1848:	f1 05       	cpc	r31, r1
    184a:	40 f4       	brcc	.+16     	; 0x185c <midi_packet_length+0x56>
    184c:	e6 5a       	subi	r30, 0xA6	; 166
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    186a:	08 95       	ret

0000186c <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    186c:	fc 01       	movw	r30, r24
    186e:	75 83       	std	Z+5, r23	; 0x05
    1870:	64 83       	std	Z+4, r22	; 0x04
    1872:	08 95       	ret

00001874 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1874:	fc 01       	movw	r30, r24
    1876:	77 83       	std	Z+7, r23	; 0x07
    1878:	66 83       	std	Z+6, r22	; 0x06
    187a:	08 95       	ret

0000187c <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    187c:	fc 01       	movw	r30, r24
    187e:	77 8b       	std	Z+23, r23	; 0x17
    1880:	66 8b       	std	Z+22, r22	; 0x16
    1882:	08 95       	ret

00001884 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    188a:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    188c:	1f a2       	std	Y+39, r1	; 0x27
    188e:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1890:	bc 01       	movw	r22, r24
    1892:	68 5d       	subi	r22, 0xD8	; 216
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	40 ec       	ldi	r20, 0xC0	; 192
    1898:	88 51       	subi	r24, 0x18	; 24
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    18a0:	1b 82       	std	Y+3, r1	; 0x03
    18a2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    18a4:	1d 82       	std	Y+5, r1	; 0x05
    18a6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    18a8:	1f 82       	std	Y+7, r1	; 0x07
    18aa:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    18ac:	19 86       	std	Y+9, r1	; 0x09
    18ae:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    18b0:	1b 86       	std	Y+11, r1	; 0x0b
    18b2:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    18b4:	1d 86       	std	Y+13, r1	; 0x0d
    18b6:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    18b8:	1f 86       	std	Y+15, r1	; 0x0f
    18ba:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    18bc:	19 8a       	std	Y+17, r1	; 0x11
    18be:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    18c0:	1b 8a       	std	Y+19, r1	; 0x13
    18c2:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    18c4:	1d 8a       	std	Y+21, r1	; 0x15
    18c6:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    18c8:	1f 8a       	std	Y+23, r1	; 0x17
    18ca:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    18cc:	19 8e       	std	Y+25, r1	; 0x19
    18ce:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    18d0:	1b 8e       	std	Y+27, r1	; 0x1b
    18d2:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    18d4:	1d 8e       	std	Y+29, r1	; 0x1d
    18d6:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    18d8:	1f 8e       	std	Y+31, r1	; 0x1f
    18da:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    18dc:	19 a2       	std	Y+33, r1	; 0x21
    18de:	18 a2       	std	Y+32, r1	; 0x20
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    18f2:	66 23       	and	r22, r22
    18f4:	99 f0       	breq	.+38     	; 0x191c <midi_device_input+0x36>
    18f6:	ea 01       	movw	r28, r20
    18f8:	61 50       	subi	r22, 0x01	; 1
    18fa:	06 2f       	mov	r16, r22
    18fc:	10 e0       	ldi	r17, 0x00	; 0
    18fe:	0f 5f       	subi	r16, 0xFF	; 255
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
    1902:	04 0f       	add	r16, r20
    1904:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1906:	7c 01       	movw	r14, r24
    1908:	28 ee       	ldi	r18, 0xE8	; 232
    190a:	e2 0e       	add	r14, r18
    190c:	f1 1c       	adc	r15, r1
    190e:	69 91       	ld	r22, Y+
    1910:	c7 01       	movw	r24, r14
    1912:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1916:	c0 17       	cp	r28, r16
    1918:	d1 07       	cpc	r29, r17
    191a:	c9 f7       	brne	.-14     	; 0x190e <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	08 95       	ret

0000192a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	00 d0       	rcall	.+0      	; 0x1940 <midi_input_callbacks+0x16>
    1940:	1f 92       	push	r1
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	7c 01       	movw	r14, r24
    1948:	6b 01       	movw	r12, r22
    194a:	14 2f       	mov	r17, r20
    194c:	b2 2e       	mov	r11, r18
    194e:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1950:	dc 01       	movw	r26, r24
    1952:	95 96       	adiw	r26, 0x25	; 37
    1954:	8c 91       	ld	r24, X
    1956:	95 97       	sbiw	r26, 0x25	; 37
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	11 f5       	brne	.+68     	; 0x19a0 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    195c:	5a 96       	adiw	r26, 0x1a	; 26
    195e:	ed 91       	ld	r30, X+
    1960:	fc 91       	ld	r31, X
    1962:	5b 97       	sbiw	r26, 0x1b	; 27
    1964:	30 97       	sbiw	r30, 0x00	; 0
    1966:	09 f4       	brne	.+2      	; 0x196a <midi_input_callbacks+0x40>
    1968:	cc c0       	rjmp	.+408    	; 0x1b02 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    196a:	9b 01       	movw	r18, r22
    196c:	21 50       	subi	r18, 0x01	; 1
    196e:	31 09       	sbc	r19, r1
    1970:	ab ea       	ldi	r26, 0xAB	; 171
    1972:	ba ea       	ldi	r27, 0xAA	; 170
    1974:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__umulhisi3>
    1978:	96 95       	lsr	r25
    197a:	87 95       	ror	r24
    197c:	9c 01       	movw	r18, r24
    197e:	22 0f       	add	r18, r18
    1980:	33 1f       	adc	r19, r19
    1982:	82 0f       	add	r24, r18
    1984:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1986:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1988:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    198a:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    198c:	4c 2d       	mov	r20, r12
    198e:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1990:	9e 01       	movw	r18, r28
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	68 2f       	mov	r22, r24
    1998:	79 2f       	mov	r23, r25
    199a:	c7 01       	movw	r24, r14
    199c:	09 95       	icall
    199e:	be c0       	rjmp	.+380    	; 0x1b1c <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    19a0:	62 30       	cpi	r22, 0x02	; 2
    19a2:	71 05       	cpc	r23, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <midi_input_callbacks+0x7e>
    19a6:	55 c0       	rjmp	.+170    	; 0x1a52 <midi_input_callbacks+0x128>
    19a8:	63 30       	cpi	r22, 0x03	; 3
    19aa:	71 05       	cpc	r23, r1
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <midi_input_callbacks+0x8e>
    19ae:	61 30       	cpi	r22, 0x01	; 1
    19b0:	71 05       	cpc	r23, r1
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <midi_input_callbacks+0x8c>
    19b4:	a1 c0       	rjmp	.+322    	; 0x1af8 <midi_input_callbacks+0x1ce>
    19b6:	88 c0       	rjmp	.+272    	; 0x1ac8 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    19b8:	84 2f       	mov	r24, r20
    19ba:	80 7f       	andi	r24, 0xF0	; 240
    19bc:	80 3a       	cpi	r24, 0xA0	; 160
    19be:	f1 f0       	breq	.+60     	; 0x19fc <midi_input_callbacks+0xd2>
    19c0:	28 f4       	brcc	.+10     	; 0x19cc <midi_input_callbacks+0xa2>
    19c2:	80 38       	cpi	r24, 0x80	; 128
    19c4:	a9 f0       	breq	.+42     	; 0x19f0 <midi_input_callbacks+0xc6>
    19c6:	80 39       	cpi	r24, 0x90	; 144
    19c8:	69 f0       	breq	.+26     	; 0x19e4 <midi_input_callbacks+0xba>
    19ca:	2f c0       	rjmp	.+94     	; 0x1a2a <midi_input_callbacks+0x100>
    19cc:	80 3e       	cpi	r24, 0xE0	; 224
    19ce:	e1 f0       	breq	.+56     	; 0x1a08 <midi_input_callbacks+0xde>
    19d0:	80 3f       	cpi	r24, 0xF0	; 240
    19d2:	01 f1       	breq	.+64     	; 0x1a14 <midi_input_callbacks+0xea>
    19d4:	80 3b       	cpi	r24, 0xB0	; 176
    19d6:	49 f5       	brne	.+82     	; 0x1a2a <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    19d8:	d7 01       	movw	r26, r14
    19da:	12 96       	adiw	r26, 0x02	; 2
    19dc:	ed 91       	ld	r30, X+
    19de:	fc 91       	ld	r31, X
    19e0:	13 97       	sbiw	r26, 0x03	; 3
              break;
    19e2:	25 c0       	rjmp	.+74     	; 0x1a2e <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    19e4:	d7 01       	movw	r26, r14
    19e6:	14 96       	adiw	r26, 0x04	; 4
    19e8:	ed 91       	ld	r30, X+
    19ea:	fc 91       	ld	r31, X
    19ec:	15 97       	sbiw	r26, 0x05	; 5
              break;
    19ee:	1f c0       	rjmp	.+62     	; 0x1a2e <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    19f0:	d7 01       	movw	r26, r14
    19f2:	16 96       	adiw	r26, 0x06	; 6
    19f4:	ed 91       	ld	r30, X+
    19f6:	fc 91       	ld	r31, X
    19f8:	17 97       	sbiw	r26, 0x07	; 7
              break;
    19fa:	19 c0       	rjmp	.+50     	; 0x1a2e <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    19fc:	d7 01       	movw	r26, r14
    19fe:	18 96       	adiw	r26, 0x08	; 8
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1a08:	d7 01       	movw	r26, r14
    1a0a:	1a 96       	adiw	r26, 0x0a	; 10
    1a0c:	ed 91       	ld	r30, X+
    1a0e:	fc 91       	ld	r31, X
    1a10:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1a12:	0d c0       	rjmp	.+26     	; 0x1a2e <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1a14:	42 3f       	cpi	r20, 0xF2	; 242
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <midi_input_callbacks+0xf0>
    1a18:	74 c0       	rjmp	.+232    	; 0x1b02 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1a1a:	d7 01       	movw	r26, r14
    1a1c:	1c 96       	adiw	r26, 0x0c	; 12
    1a1e:	ed 91       	ld	r30, X+
    1a20:	fc 91       	ld	r31, X
    1a22:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <midi_input_callbacks+0x10e>
    1a28:	6c c0       	rjmp	.+216    	; 0x1b02 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1a2a:	e0 e0       	ldi	r30, 0x00	; 0
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <midi_input_callbacks+0x10a>
    1a32:	67 c0       	rjmp	.+206    	; 0x1b02 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1a34:	12 3f       	cpi	r17, 0xF2	; 242
    1a36:	31 f4       	brne	.+12     	; 0x1a44 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1a38:	2a 2d       	mov	r18, r10
    1a3a:	4b 2d       	mov	r20, r11
    1a3c:	62 ef       	ldi	r22, 0xF2	; 242
    1a3e:	c7 01       	movw	r24, r14
    1a40:	09 95       	icall
    1a42:	6c c0       	rjmp	.+216    	; 0x1b1c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1a44:	2a 2d       	mov	r18, r10
    1a46:	4b 2d       	mov	r20, r11
    1a48:	61 2f       	mov	r22, r17
    1a4a:	6f 70       	andi	r22, 0x0F	; 15
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	09 95       	icall
    1a50:	65 c0       	rjmp	.+202    	; 0x1b1c <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1a52:	84 2f       	mov	r24, r20
    1a54:	80 7f       	andi	r24, 0xF0	; 240
    1a56:	80 3d       	cpi	r24, 0xD0	; 208
    1a58:	51 f0       	breq	.+20     	; 0x1a6e <midi_input_callbacks+0x144>
    1a5a:	80 3f       	cpi	r24, 0xF0	; 240
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <midi_input_callbacks+0x150>
    1a5e:	80 3c       	cpi	r24, 0xC0	; 192
    1a60:	01 f5       	brne	.+64     	; 0x1aa2 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1a62:	d7 01       	movw	r26, r14
    1a64:	1e 96       	adiw	r26, 0x0e	; 14
    1a66:	ed 91       	ld	r30, X+
    1a68:	fc 91       	ld	r31, X
    1a6a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1a6c:	1c c0       	rjmp	.+56     	; 0x1aa6 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1a6e:	d7 01       	movw	r26, r14
    1a70:	50 96       	adiw	r26, 0x10	; 16
    1a72:	ed 91       	ld	r30, X+
    1a74:	fc 91       	ld	r31, X
    1a76:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1a7a:	43 3f       	cpi	r20, 0xF3	; 243
    1a7c:	41 f4       	brne	.+16     	; 0x1a8e <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1a7e:	d7 01       	movw	r26, r14
    1a80:	52 96       	adiw	r26, 0x12	; 18
    1a82:	ed 91       	ld	r30, X+
    1a84:	fc 91       	ld	r31, X
    1a86:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a88:	30 97       	sbiw	r30, 0x00	; 0
    1a8a:	99 f4       	brne	.+38     	; 0x1ab2 <midi_input_callbacks+0x188>
    1a8c:	3a c0       	rjmp	.+116    	; 0x1b02 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1a8e:	41 3f       	cpi	r20, 0xF1	; 241
    1a90:	c1 f5       	brne	.+112    	; 0x1b02 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1a92:	d7 01       	movw	r26, r14
    1a94:	54 96       	adiw	r26, 0x14	; 20
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1a9c:	30 97       	sbiw	r30, 0x00	; 0
    1a9e:	49 f4       	brne	.+18     	; 0x1ab2 <midi_input_callbacks+0x188>
    1aa0:	30 c0       	rjmp	.+96     	; 0x1b02 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1aa2:	e0 e0       	ldi	r30, 0x00	; 0
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1aa6:	30 97       	sbiw	r30, 0x00	; 0
    1aa8:	61 f1       	breq	.+88     	; 0x1b02 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1aaa:	81 2f       	mov	r24, r17
    1aac:	8d 7f       	andi	r24, 0xFD	; 253
    1aae:	81 3f       	cpi	r24, 0xF1	; 241
    1ab0:	29 f4       	brne	.+10     	; 0x1abc <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1ab2:	4b 2d       	mov	r20, r11
    1ab4:	61 2f       	mov	r22, r17
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	09 95       	icall
    1aba:	30 c0       	rjmp	.+96     	; 0x1b1c <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1abc:	4b 2d       	mov	r20, r11
    1abe:	61 2f       	mov	r22, r17
    1ac0:	6f 70       	andi	r22, 0x0F	; 15
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	09 95       	icall
    1ac6:	2a c0       	rjmp	.+84     	; 0x1b1c <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1ac8:	84 2f       	mov	r24, r20
    1aca:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <midi_is_realtime>
    1ace:	88 23       	and	r24, r24
    1ad0:	31 f0       	breq	.+12     	; 0x1ade <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1ad2:	d7 01       	movw	r26, r14
    1ad4:	56 96       	adiw	r26, 0x16	; 22
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	57 97       	sbiw	r26, 0x17	; 23
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    1ade:	16 3f       	cpi	r17, 0xF6	; 246
    1ae0:	81 f4       	brne	.+32     	; 0x1b02 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1ae2:	d7 01       	movw	r26, r14
    1ae4:	58 96       	adiw	r26, 0x18	; 24
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1aec:	30 97       	sbiw	r30, 0x00	; 0
    1aee:	49 f0       	breq	.+18     	; 0x1b02 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    1af0:	61 2f       	mov	r22, r17
    1af2:	c7 01       	movw	r24, r14
    1af4:	09 95       	icall
    1af6:	12 c0       	rjmp	.+36     	; 0x1b1c <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1af8:	64 30       	cpi	r22, 0x04	; 4
    1afa:	71 05       	cpc	r23, r1
    1afc:	10 f0       	brcs	.+4      	; 0x1b02 <midi_input_callbacks+0x1d8>
          cnt = 0;
    1afe:	c1 2c       	mov	r12, r1
    1b00:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1b02:	d7 01       	movw	r26, r14
    1b04:	5c 96       	adiw	r26, 0x1c	; 28
    1b06:	ed 91       	ld	r30, X+
    1b08:	fc 91       	ld	r31, X
    1b0a:	5d 97       	sbiw	r26, 0x1d	; 29
    1b0c:	30 97       	sbiw	r30, 0x00	; 0
    1b0e:	31 f0       	breq	.+12     	; 0x1b1c <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1b10:	0a 2d       	mov	r16, r10
    1b12:	2b 2d       	mov	r18, r11
    1b14:	41 2f       	mov	r20, r17
    1b16:	b6 01       	movw	r22, r12
    1b18:	c7 01       	movw	r24, r14
    1b1a:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1b1c:	d7 01       	movw	r26, r14
    1b1e:	5e 96       	adiw	r26, 0x1e	; 30
    1b20:	ed 91       	ld	r30, X+
    1b22:	fc 91       	ld	r31, X
    1b24:	5f 97       	sbiw	r26, 0x1f	; 31
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	31 f0       	breq	.+12     	; 0x1b36 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1b2a:	0a 2d       	mov	r16, r10
    1b2c:	2b 2d       	mov	r18, r11
    1b2e:	41 2f       	mov	r20, r17
    1b30:	b6 01       	movw	r22, r12
    1b32:	c7 01       	movw	r24, r14
    1b34:	09 95       	icall
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	08 95       	ret

00001b52 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	ec 01       	movw	r28, r24
    1b5e:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1b60:	86 2f       	mov	r24, r22
    1b62:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <midi_is_realtime>
    1b66:	88 23       	and	r24, r24
    1b68:	69 f0       	breq	.+26     	; 0x1b84 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1b6a:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1b70:	00 e0       	ldi	r16, 0x00	; 0
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	41 2f       	mov	r20, r17
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	0e 94 95 0c 	call	0x192a	; 0x192a <midi_input_callbacks>
    device->input_state = state;
    1b80:	fd a2       	std	Y+37, r15	; 0x25
    1b82:	a4 c0       	rjmp	.+328    	; 0x1ccc <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1b84:	81 2f       	mov	r24, r17
    1b86:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <midi_is_statusbyte>
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <midi_process_byte+0x3e>
    1b8e:	5d c0       	rjmp	.+186    	; 0x1c4a <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1b90:	8d a1       	ldd	r24, Y+37	; 0x25
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1b96:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9f a3       	std	Y+39, r25	; 0x27
    1b9e:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1ba0:	81 2f       	mov	r24, r17
    1ba2:	0e 94 03 0c 	call	0x1806	; 0x1806 <midi_packet_length>
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <midi_process_byte+0x64>
    1baa:	b8 f0       	brcs	.+46     	; 0x1bda <midi_process_byte+0x88>
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	79 f0       	breq	.+30     	; 0x1bce <midi_process_byte+0x7c>
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <midi_process_byte+0x82>
    1bb4:	46 c0       	rjmp	.+140    	; 0x1c42 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1bba:	00 e0       	ldi	r16, 0x00	; 0
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	41 2f       	mov	r20, r17
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0e 94 95 0c 	call	0x192a	; 0x192a <midi_input_callbacks>
        device->input_state = IDLE;
    1bca:	1d a2       	std	Y+37, r1	; 0x25
        break;
    1bcc:	7f c0       	rjmp	.+254    	; 0x1ccc <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1bd2:	7c c0       	rjmp	.+248    	; 0x1ccc <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1bd8:	79 c0       	rjmp	.+242    	; 0x1ccc <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1bda:	10 3f       	cpi	r17, 0xF0	; 240
    1bdc:	19 f0       	breq	.+6      	; 0x1be4 <midi_process_byte+0x92>
    1bde:	17 3f       	cpi	r17, 0xF7	; 247
    1be0:	51 f0       	breq	.+20     	; 0x1bf6 <midi_process_byte+0xa4>
    1be2:	2b c0       	rjmp	.+86     	; 0x1c3a <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1be4:	84 e0       	ldi	r24, 0x04	; 4
    1be6:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1be8:	80 ef       	ldi	r24, 0xF0	; 240
    1bea:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9f a3       	std	Y+39, r25	; 0x27
    1bf2:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1bf4:	6b c0       	rjmp	.+214    	; 0x1ccc <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1bf6:	4e a1       	ldd	r20, Y+38	; 0x26
    1bf8:	5f a1       	ldd	r21, Y+39	; 0x27
    1bfa:	9a 01       	movw	r18, r20
    1bfc:	ab ea       	ldi	r26, 0xAB	; 171
    1bfe:	ba ea       	ldi	r27, 0xAA	; 170
    1c00:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__umulhisi3>
    1c04:	96 95       	lsr	r25
    1c06:	87 95       	ror	r24
    1c08:	9c 01       	movw	r18, r24
    1c0a:	22 0f       	add	r18, r18
    1c0c:	33 1f       	adc	r19, r19
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	fa 01       	movw	r30, r20
    1c14:	e8 1b       	sub	r30, r24
    1c16:	f9 0b       	sbc	r31, r25
    1c18:	ec 0f       	add	r30, r28
    1c1a:	fd 1f       	adc	r31, r29
    1c1c:	87 ef       	ldi	r24, 0xF7	; 247
    1c1e:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1c20:	ba 01       	movw	r22, r20
    1c22:	6f 5f       	subi	r22, 0xFF	; 255
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	7f a3       	std	Y+39, r23	; 0x27
    1c28:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1c2a:	0c a1       	ldd	r16, Y+36	; 0x24
    1c2c:	2b a1       	ldd	r18, Y+35	; 0x23
    1c2e:	4a a1       	ldd	r20, Y+34	; 0x22
    1c30:	ce 01       	movw	r24, r28
    1c32:	0e 94 95 0c 	call	0x192a	; 0x192a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1c36:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1c38:	49 c0       	rjmp	.+146    	; 0x1ccc <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1c3a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1c3c:	1f a2       	std	Y+39, r1	; 0x27
    1c3e:	1e a2       	std	Y+38, r1	; 0x26
    1c40:	45 c0       	rjmp	.+138    	; 0x1ccc <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1c42:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1c44:	1f a2       	std	Y+39, r1	; 0x27
    1c46:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1c48:	41 c0       	rjmp	.+130    	; 0x1ccc <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1c4a:	ed a1       	ldd	r30, Y+37	; 0x25
    1c4c:	ee 23       	and	r30, r30
    1c4e:	f1 f1       	breq	.+124    	; 0x1ccc <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1c50:	4e a1       	ldd	r20, Y+38	; 0x26
    1c52:	5f a1       	ldd	r21, Y+39	; 0x27
    1c54:	9a 01       	movw	r18, r20
    1c56:	ab ea       	ldi	r26, 0xAB	; 171
    1c58:	ba ea       	ldi	r27, 0xAA	; 170
    1c5a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__umulhisi3>
    1c5e:	96 95       	lsr	r25
    1c60:	87 95       	ror	r24
    1c62:	9c 01       	movw	r18, r24
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	82 0f       	add	r24, r18
    1c6a:	93 1f       	adc	r25, r19
    1c6c:	9a 01       	movw	r18, r20
    1c6e:	28 1b       	sub	r18, r24
    1c70:	39 0b       	sbc	r19, r25
    1c72:	de 01       	movw	r26, r28
    1c74:	a2 0f       	add	r26, r18
    1c76:	b3 1f       	adc	r27, r19
    1c78:	92 96       	adiw	r26, 0x22	; 34
    1c7a:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1c7c:	ba 01       	movw	r22, r20
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	7f a3       	std	Y+39, r23	; 0x27
    1c84:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1c86:	21 30       	cpi	r18, 0x01	; 1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	89 f0       	breq	.+34     	; 0x1cae <midi_process_byte+0x15c>
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	e9 f4       	brne	.+58     	; 0x1ccc <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1c92:	0c a1       	ldd	r16, Y+36	; 0x24
    1c94:	2b a1       	ldd	r18, Y+35	; 0x23
    1c96:	4a a1       	ldd	r20, Y+34	; 0x22
    1c98:	ce 01       	movw	r24, r28
    1c9a:	0e 94 95 0c 	call	0x192a	; 0x192a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca0:	84 30       	cpi	r24, 0x04	; 4
    1ca2:	a1 f0       	breq	.+40     	; 0x1ccc <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9f a3       	std	Y+39, r25	; 0x27
    1caa:	8e a3       	std	Y+38, r24	; 0x26
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1cae:	e2 30       	cpi	r30, 0x02	; 2
    1cb0:	69 f4       	brne	.+26     	; 0x1ccc <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1cb2:	00 e0       	ldi	r16, 0x00	; 0
    1cb4:	2b a1       	ldd	r18, Y+35	; 0x23
    1cb6:	4a a1       	ldd	r20, Y+34	; 0x22
    1cb8:	ce 01       	movw	r24, r28
    1cba:	0e 94 95 0c 	call	0x192a	; 0x192a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9f a3       	std	Y+39, r25	; 0x27
    1cca:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	08 95       	ret

00001cd8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1cea:	dc 01       	movw	r26, r24
    1cec:	90 96       	adiw	r26, 0x20	; 32
    1cee:	ed 91       	ld	r30, X+
    1cf0:	fc 91       	ld	r31, X
    1cf2:	91 97       	sbiw	r26, 0x21	; 33
    1cf4:	30 97       	sbiw	r30, 0x00	; 0
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1cf8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1cfa:	86 01       	movw	r16, r12
    1cfc:	08 51       	subi	r16, 0x18	; 24
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 b1 0b 	call	0x1762	; 0x1762 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1d06:	e8 2e       	mov	r14, r24
    1d08:	f1 2c       	mov	r15, r1
    1d0a:	e1 14       	cp	r14, r1
    1d0c:	f1 04       	cpc	r15, r1
    1d0e:	91 f0       	breq	.+36     	; 0x1d34 <midi_device_process+0x5c>
    1d10:	c0 e0       	ldi	r28, 0x00	; 0
    1d12:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	c8 01       	movw	r24, r16
    1d18:	0e 94 c7 0b 	call	0x178e	; 0x178e <bytequeue_get>
    1d1c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1d1e:	c6 01       	movw	r24, r12
    1d20:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	c8 01       	movw	r24, r16
    1d28:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1d2c:	21 96       	adiw	r28, 0x01	; 1
    1d2e:	ce 15       	cp	r28, r14
    1d30:	df 05       	cpc	r29, r15
    1d32:	81 f7       	brne	.-32     	; 0x1d14 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	ff 90       	pop	r15
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
    1d44:	08 95       	ret

00001d46 <__divmodhi4>:
    1d46:	97 fb       	bst	r25, 7
    1d48:	07 2e       	mov	r0, r23
    1d4a:	16 f4       	brtc	.+4      	; 0x1d50 <__divmodhi4+0xa>
    1d4c:	00 94       	com	r0
    1d4e:	07 d0       	rcall	.+14     	; 0x1d5e <__divmodhi4_neg1>
    1d50:	77 fd       	sbrc	r23, 7
    1d52:	09 d0       	rcall	.+18     	; 0x1d66 <__divmodhi4_neg2>
    1d54:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__udivmodhi4>
    1d58:	07 fc       	sbrc	r0, 7
    1d5a:	05 d0       	rcall	.+10     	; 0x1d66 <__divmodhi4_neg2>
    1d5c:	3e f4       	brtc	.+14     	; 0x1d6c <__divmodhi4_exit>

00001d5e <__divmodhi4_neg1>:
    1d5e:	90 95       	com	r25
    1d60:	81 95       	neg	r24
    1d62:	9f 4f       	sbci	r25, 0xFF	; 255
    1d64:	08 95       	ret

00001d66 <__divmodhi4_neg2>:
    1d66:	70 95       	com	r23
    1d68:	61 95       	neg	r22
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255

00001d6c <__divmodhi4_exit>:
    1d6c:	08 95       	ret

00001d6e <__tablejump2__>:
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	05 90       	lpm	r0, Z+
    1d74:	f4 91       	lpm	r31, Z
    1d76:	e0 2d       	mov	r30, r0
    1d78:	09 94       	ijmp

00001d7a <__umulhisi3>:
    1d7a:	a2 9f       	mul	r26, r18
    1d7c:	b0 01       	movw	r22, r0
    1d7e:	b3 9f       	mul	r27, r19
    1d80:	c0 01       	movw	r24, r0
    1d82:	a3 9f       	mul	r26, r19
    1d84:	70 0d       	add	r23, r0
    1d86:	81 1d       	adc	r24, r1
    1d88:	11 24       	eor	r1, r1
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	b2 9f       	mul	r27, r18
    1d8e:	70 0d       	add	r23, r0
    1d90:	81 1d       	adc	r24, r1
    1d92:	11 24       	eor	r1, r1
    1d94:	91 1d       	adc	r25, r1
    1d96:	08 95       	ret

00001d98 <__udivmodhi4>:
    1d98:	aa 1b       	sub	r26, r26
    1d9a:	bb 1b       	sub	r27, r27
    1d9c:	51 e1       	ldi	r21, 0x11	; 17
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <__udivmodhi4_ep>

00001da0 <__udivmodhi4_loop>:
    1da0:	aa 1f       	adc	r26, r26
    1da2:	bb 1f       	adc	r27, r27
    1da4:	a6 17       	cp	r26, r22
    1da6:	b7 07       	cpc	r27, r23
    1da8:	10 f0       	brcs	.+4      	; 0x1dae <__udivmodhi4_ep>
    1daa:	a6 1b       	sub	r26, r22
    1dac:	b7 0b       	sbc	r27, r23

00001dae <__udivmodhi4_ep>:
    1dae:	88 1f       	adc	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	5a 95       	dec	r21
    1db4:	a9 f7       	brne	.-22     	; 0x1da0 <__udivmodhi4_loop>
    1db6:	80 95       	com	r24
    1db8:	90 95       	com	r25
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	08 95       	ret

00001dc0 <_exit>:
    1dc0:	f8 94       	cli

00001dc2 <__stop_program>:
    1dc2:	ff cf       	rjmp	.-2      	; 0x1dc2 <__stop_program>
