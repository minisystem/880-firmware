
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00001352  000013e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000192  00800252  00800252  00001538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000467f  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001269  00000000  00000000  0000601f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001389  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  00008614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fab  00000000  00000000  00008fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3a  00000000  00000000  00009f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000bdad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	f3 06       	cpc	r15, r19
      b6:	f1 06       	cpc	r15, r17
      b8:	f3 06       	cpc	r15, r19
      ba:	f5 06       	cpc	r15, r21
      bc:	f5 06       	cpc	r15, r21
      be:	fb 06       	cpc	r15, r27
      c0:	f5 06       	cpc	r15, r21
      c2:	fb 06       	cpc	r15, r27
      c4:	fb 06       	cpc	r15, r27
      c6:	fb 06       	cpc	r15, r27
      c8:	fb 06       	cpc	r15, r27
      ca:	fb 06       	cpc	r15, r27
      cc:	f5 06       	cpc	r15, r21
      ce:	fb 06       	cpc	r15, r27
      d0:	fb 06       	cpc	r15, r27

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e2 e5       	ldi	r30, 0x52	; 82
      e6:	f3 e1       	ldi	r31, 0x13	; 19
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a2 35       	cpi	r26, 0x52	; 82
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	a2 e5       	ldi	r26, 0x52	; 82
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a4 3e       	cpi	r26, 0xE4	; 228
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 42 04 	call	0x884	; 0x884 <main>
     108:	0c 94 a7 09 	jmp	0x134e	; 0x134e <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     136:	8d e0       	ldi	r24, 0x0D	; 13
     138:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	80 93 6f 00 	sts	0x006F, r24
     142:	08 95       	ret

00000144 <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     144:	90 93 89 00 	sts	0x0089, r25
     148:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     14c:	20 91 84 00 	lds	r18, 0x0084
     150:	30 91 85 00 	lds	r19, 0x0085
     154:	82 17       	cp	r24, r18
     156:	93 07       	cpc	r25, r19
     158:	28 f4       	brcc	.+10     	; 0x164 <update_clock_rate+0x20>
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	90 93 85 00 	sts	0x0085, r25
     160:	80 93 84 00 	sts	0x0084, r24
     164:	08 95       	ret

00000166 <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, HC_LED},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, CL_LED},
	{15,7, 1<<MA_TRIG,255, 0, MA_LED}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     16e:	80 93 52 02 	sts	0x0252, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     172:	c8 2f       	mov	r28, r24
     174:	d0 e0       	ldi	r29, 0x00	; 0
     176:	fe 01       	movw	r30, r28
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	ec 0f       	add	r30, r28
     17e:	fd 1f       	adc	r31, r29
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	e0 50       	subi	r30, 0x00	; 0
     186:	ff 4f       	sbci	r31, 0xFF	; 255
     188:	a0 81       	ld	r26, Z
     18a:	9a 2f       	mov	r25, r26
     18c:	99 1f       	adc	r25, r25
     18e:	99 27       	eor	r25, r25
     190:	99 1f       	adc	r25, r25
     192:	a1 81       	ldd	r26, Z+1	; 0x01
     194:	a7 70       	andi	r26, 0x07	; 7
     196:	aa 0f       	add	r26, r26
     198:	a9 2b       	or	r26, r25
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	a2 5a       	subi	r26, 0xA2	; 162
     19e:	bd 4f       	sbci	r27, 0xFD	; 253
     1a0:	9c 91       	ld	r25, X
     1a2:	82 81       	ldd	r24, Z+2	; 0x02
     1a4:	89 2b       	or	r24, r25
     1a6:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1a8:	83 81       	ldd	r24, Z+3	; 0x03
     1aa:	8f 3f       	cpi	r24, 0xFF	; 255
     1ac:	09 f1       	breq	.+66     	; 0x1f0 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED);	
     1ae:	84 e1       	ldi	r24, 0x14	; 20
     1b0:	0e 94 26 02 	call	0x44c	; 0x44c <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1b4:	ae e5       	ldi	r26, 0x5E	; 94
     1b6:	b2 e0       	ldi	r27, 0x02	; 2
     1b8:	13 96       	adiw	r26, 0x03	; 3
     1ba:	2c 91       	ld	r18, X
     1bc:	13 97       	sbiw	r26, 0x03	; 3
     1be:	ae 01       	movw	r20, r28
     1c0:	44 0f       	add	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	fa 01       	movw	r30, r20
     1c6:	ec 0f       	add	r30, r28
     1c8:	fd 1f       	adc	r31, r29
     1ca:	ee 0f       	add	r30, r30
     1cc:	ff 1f       	adc	r31, r31
     1ce:	ec 5f       	subi	r30, 0xFC	; 252
     1d0:	fe 4f       	sbci	r31, 0xFE	; 254
     1d2:	90 81       	ld	r25, Z
     1d4:	91 70       	andi	r25, 0x01	; 1
     1d6:	91 95       	neg	r25
     1d8:	92 27       	eor	r25, r18
     1da:	c4 0f       	add	r28, r20
     1dc:	d5 1f       	adc	r29, r21
     1de:	cc 0f       	add	r28, r28
     1e0:	dd 1f       	adc	r29, r29
     1e2:	c0 50       	subi	r28, 0x00	; 0
     1e4:	df 4f       	sbci	r29, 0xFF	; 255
     1e6:	8b 81       	ldd	r24, Y+3	; 0x03
     1e8:	98 23       	and	r25, r24
     1ea:	29 27       	eor	r18, r25
     1ec:	13 96       	adiw	r26, 0x03	; 3
     1ee:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     1f0:	11 34       	cpi	r17, 0x41	; 65
     1f2:	28 f0       	brcs	.+10     	; 0x1fe <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     1f4:	ee e5       	ldi	r30, 0x5E	; 94
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	80 85       	ldd	r24, Z+8	; 0x08
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     1fe:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     200:	0e 94 e5 04 	call	0x9ca	; 0x9ca <update_spi>
			
		PORTD &= ~(1<<TRIG);
     204:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     206:	ee e6       	ldi	r30, 0x6E	; 110
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	82 60       	ori	r24, 0x02	; 2
     20e:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     210:	85 b5       	in	r24, 0x25	; 37
     212:	83 60       	ori	r24, 0x03	; 3
     214:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     216:	10 92 60 01 	sts	0x0160, r1
}
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     222:	ee e5       	ldi	r30, 0x5E	; 94
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     228:	86 81       	ldd	r24, Z+6	; 0x06
     22a:	80 7f       	andi	r24, 0xF0	; 240
     22c:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     22e:	87 81       	ldd	r24, Z+7	; 0x07
     230:	8f 7d       	andi	r24, 0xDF	; 223
     232:	87 83       	std	Z+7, r24	; 0x07
     234:	08 95       	ret

00000236 <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
	
	//while(trigger_finished == 0);
	//
	//spi_data[8] = sequencer.current_pattern.first_part[sequencer.current_step] << 1 //left shift by 1 bit because AC is handled separately - may want to eventually integrate accent into drum_hit array
	////spi_data[6]
	clear_all_trigs();
     23a:	0e 94 11 01 	call	0x222	; 0x222 <clear_all_trigs>
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.current_pattern.first_part[sequencer.current_step] >> i) &1) {
     23e:	e0 91 be 03 	lds	r30, 0x03BE
     242:	ef 70       	andi	r30, 0x0F	; 15
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	ee 0f       	add	r30, r30
     248:	ff 1f       	adc	r31, r31
     24a:	e3 59       	subi	r30, 0x93	; 147
     24c:	fc 4f       	sbci	r31, 0xFC	; 252
     24e:	40 81       	ld	r20, Z
     250:	51 81       	ldd	r21, Z+1	; 0x01
     252:	c3 e0       	ldi	r28, 0x03	; 3
     254:	d1 e0       	ldi	r29, 0x01	; 1
	//while(trigger_finished == 0);
	//
	//spi_data[8] = sequencer.current_pattern.first_part[sequencer.current_step] << 1 //left shift by 1 bit because AC is handled separately - may want to eventually integrate accent into drum_hit array
	////spi_data[6]
	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
		
		if ((sequencer.current_pattern.first_part[sequencer.current_step] >> i) &1) {
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     25a:	6e e5       	ldi	r22, 0x5E	; 94
     25c:	72 e0       	ldi	r23, 0x02	; 2
	//spi_data[8] = sequencer.current_pattern.first_part[sequencer.current_step] << 1 //left shift by 1 bit because AC is handled separately - may want to eventually integrate accent into drum_hit array
	////spi_data[6]
	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.current_pattern.first_part[sequencer.current_step] >> i) &1) {
     25e:	9a 01       	movw	r18, r20
     260:	08 2e       	mov	r0, r24
     262:	02 c0       	rjmp	.+4      	; 0x268 <trigger_step+0x32>
     264:	36 95       	lsr	r19
     266:	27 95       	ror	r18
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <trigger_step+0x2e>
     26c:	20 ff       	sbrs	r18, 0
     26e:	32 c0       	rjmp	.+100    	; 0x2d4 <trigger_step+0x9e>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     270:	dc 01       	movw	r26, r24
     272:	aa 0f       	add	r26, r26
     274:	bb 1f       	adc	r27, r27
     276:	a8 0f       	add	r26, r24
     278:	b9 1f       	adc	r27, r25
     27a:	aa 0f       	add	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	a0 50       	subi	r26, 0x00	; 0
     280:	bf 4f       	sbci	r27, 0xFF	; 255
     282:	ec 91       	ld	r30, X
     284:	2e 2f       	mov	r18, r30
     286:	22 1f       	adc	r18, r18
     288:	22 27       	eor	r18, r18
     28a:	22 1f       	adc	r18, r18
     28c:	11 96       	adiw	r26, 0x01	; 1
     28e:	ec 91       	ld	r30, X
     290:	e7 70       	andi	r30, 0x07	; 7
     292:	ee 0f       	add	r30, r30
     294:	e2 2b       	or	r30, r18
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	e2 5a       	subi	r30, 0xA2	; 162
     29a:	fd 4f       	sbci	r31, 0xFD	; 253
     29c:	de 01       	movw	r26, r28
     29e:	11 97       	sbiw	r26, 0x01	; 1
     2a0:	3c 91       	ld	r19, X
     2a2:	20 81       	ld	r18, Z
     2a4:	23 2b       	or	r18, r19
     2a6:	20 83       	st	Z, r18
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     2a8:	28 81       	ld	r18, Y
     2aa:	2f 3f       	cpi	r18, 0xFF	; 255
     2ac:	99 f0       	breq	.+38     	; 0x2d4 <trigger_step+0x9e>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2ae:	fb 01       	movw	r30, r22
     2b0:	a3 81       	ldd	r26, Z+3	; 0x03
     2b2:	fc 01       	movw	r30, r24
     2b4:	ee 0f       	add	r30, r30
     2b6:	ff 1f       	adc	r31, r31
     2b8:	e8 0f       	add	r30, r24
     2ba:	f9 1f       	adc	r31, r25
     2bc:	ee 0f       	add	r30, r30
     2be:	ff 1f       	adc	r31, r31
     2c0:	ec 5f       	subi	r30, 0xFC	; 252
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	30 81       	ld	r19, Z
     2c6:	31 70       	andi	r19, 0x01	; 1
     2c8:	31 95       	neg	r19
     2ca:	3a 27       	eor	r19, r26
     2cc:	23 23       	and	r18, r19
     2ce:	2a 27       	eor	r18, r26
     2d0:	fb 01       	movw	r30, r22
     2d2:	23 83       	std	Z+3, r18	; 0x03
	//while(trigger_finished == 0);
	//
	//spi_data[8] = sequencer.current_pattern.first_part[sequencer.current_step] << 1 //left shift by 1 bit because AC is handled separately - may want to eventually integrate accent into drum_hit array
	////spi_data[6]
	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	26 96       	adiw	r28, 0x06	; 6
     2d8:	80 31       	cpi	r24, 0x10	; 16
     2da:	91 05       	cpc	r25, r1
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <trigger_step+0xaa>
     2de:	bf cf       	rjmp	.-130    	; 0x25e <trigger_step+0x28>
	//start timer
	//TIMSK0 |= (1<<OCIE0A); //enable output compare match A
	//TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
	//trigger_finished = 0;
	
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <__vector_14>:
#include "clock.h"
#include "sequencer.h"



ISR (TIMER0_COMPA_vect) {
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	8f 93       	push	r24
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     2f6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     2f8:	ee e6       	ldi	r30, 0x6E	; 110
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	8d 7f       	andi	r24, 0xFD	; 253
     300:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     302:	ee eb       	ldi	r30, 0xBE	; 190
     304:	f3 e0       	ldi	r31, 0x03	; 3
     306:	80 81       	ld	r24, Z
     308:	80 62       	ori	r24, 0x20	; 32
     30a:	80 83       	st	Z, r24
	
}
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	8f 91       	pop	r24
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	2f 93       	push	r18
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	ef 93       	push	r30
     332:	ff 93       	push	r31
	
	
	if (sequencer.START) { 
     334:	80 91 6c 03 	lds	r24, 0x036C
     338:	81 ff       	sbrs	r24, 1
     33a:	15 c0       	rjmp	.+42     	; 0x366 <__vector_11+0x4a>
		
		if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of
     33c:	e9 e6       	ldi	r30, 0x69	; 105
     33e:	f2 e0       	ldi	r31, 0x02	; 2
     340:	80 81       	ld	r24, Z
     342:	86 95       	lsr	r24
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	98 13       	cpse	r25, r24
     348:	1b c0       	rjmp	.+54     	; 0x380 <__vector_11+0x64>
			
			spi_data[1] = sequencer.step_led_mask[sequencer.current_inst];
     34a:	e0 91 c1 03 	lds	r30, 0x03C1
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	ee 53       	subi	r30, 0x3E	; 62
     356:	fc 4f       	sbci	r31, 0xFC	; 252
     358:	90 81       	ld	r25, Z
     35a:	81 81       	ldd	r24, Z+1	; 0x01
     35c:	ee e5       	ldi	r30, 0x5E	; 94
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.step_led_mask[sequencer.current_inst] >> 8;
     362:	80 83       	st	Z, r24
     364:	0d c0       	rjmp	.+26     	; 0x380 <__vector_11+0x64>
		}

	} else if ((internal_clock.beat_counter == 2) && (internal_clock.divider >> 1)) { //1/4 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     366:	80 91 6b 02 	lds	r24, 0x026B
     36a:	83 70       	andi	r24, 0x03	; 3
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	41 f4       	brne	.+16     	; 0x380 <__vector_11+0x64>
     370:	80 91 69 02 	lds	r24, 0x0269
     374:	86 95       	lsr	r24
     376:	21 f0       	breq	.+8      	; 0x380 <__vector_11+0x64>
			spi_data[1] = 0;
     378:	ee e5       	ldi	r30, 0x5E	; 94
     37a:	f2 e0       	ldi	r31, 0x02	; 2
     37c:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     37e:	10 82       	st	Z, r1
		
	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     380:	e9 e6       	ldi	r30, 0x69	; 105
     382:	f2 e0       	ldi	r31, 0x02	; 2
     384:	81 81       	ldd	r24, Z+1	; 0x01
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	81 83       	std	Z+1, r24	; 0x01
     38a:	90 81       	ld	r25, Z
     38c:	89 13       	cpse	r24, r25
     38e:	15 c0       	rjmp	.+42     	; 0x3ba <__vector_11+0x9e>
	{
		sequencer.next_step_flag = 1;
     390:	ee eb       	ldi	r30, 0xBE	; 190
     392:	f3 e0       	ldi	r31, 0x03	; 3
     394:	80 81       	ld	r24, Z
     396:	80 61       	ori	r24, 0x10	; 16
		internal_clock.beat_counter++;
     398:	ab e6       	ldi	r26, 0x6B	; 107
     39a:	b2 e0       	ldi	r27, 0x02	; 2
     39c:	9c 91       	ld	r25, X
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	29 0f       	add	r18, r25
     3a2:	23 70       	andi	r18, 0x03	; 3
     3a4:	9c 7f       	andi	r25, 0xFC	; 252
     3a6:	92 2b       	or	r25, r18
     3a8:	9c 93       	st	X, r25
		internal_clock.ppqn_counter = 0;
     3aa:	10 92 6a 02 	sts	0x026A, r1
		sequencer.current_step++; //hopefully this will overflow from 15 to 0 - it does!
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	98 0f       	add	r25, r24
     3b2:	9f 70       	andi	r25, 0x0F	; 15
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	89 2b       	or	r24, r25
     3b8:	80 83       	st	Z, r24
	}
	
     3ba:	ff 91       	pop	r31
     3bc:	ef 91       	pop	r30
     3be:	bf 91       	pop	r27
     3c0:	af 91       	pop	r26
     3c2:	9f 91       	pop	r25
     3c4:	8f 91       	pop	r24
     3c6:	2f 91       	pop	r18
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9c 01       	movw	r18, r24
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	dc 01       	movw	r26, r24
     3e4:	ae 59       	subi	r26, 0x9E	; 158
     3e6:	be 4f       	sbci	r27, 0xFE	; 254
     3e8:	2c 91       	ld	r18, X
     3ea:	e2 2f       	mov	r30, r18
     3ec:	ef 70       	andi	r30, 0x0F	; 15
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	e2 5a       	subi	r30, 0xA2	; 162
     3f2:	fd 4f       	sbci	r31, 0xFD	; 253
     3f4:	ec 01       	movw	r28, r24
     3f6:	cf 59       	subi	r28, 0x9F	; 159
     3f8:	de 4f       	sbci	r29, 0xFE	; 254
     3fa:	30 81       	ld	r19, Z
     3fc:	88 81       	ld	r24, Y
     3fe:	83 2b       	or	r24, r19
     400:	80 83       	st	Z, r24
	led[led_index].state = 1;
     402:	82 2f       	mov	r24, r18
     404:	80 61       	ori	r24, 0x10	; 16
     406:	8c 93       	st	X, r24

}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <turn_off>:

void turn_off(uint8_t led_index) {
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9c 01       	movw	r18, r24
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	dc 01       	movw	r26, r24
     420:	ae 59       	subi	r26, 0x9E	; 158
     422:	be 4f       	sbci	r27, 0xFE	; 254
     424:	2c 91       	ld	r18, X
     426:	e2 2f       	mov	r30, r18
     428:	ef 70       	andi	r30, 0x0F	; 15
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	e2 5a       	subi	r30, 0xA2	; 162
     42e:	fd 4f       	sbci	r31, 0xFD	; 253
     430:	ec 01       	movw	r28, r24
     432:	cf 59       	subi	r28, 0x9F	; 159
     434:	de 4f       	sbci	r29, 0xFE	; 254
     436:	88 81       	ld	r24, Y
     438:	80 95       	com	r24
     43a:	90 81       	ld	r25, Z
     43c:	89 23       	and	r24, r25
     43e:	80 83       	st	Z, r24
	led[led_index].state = 0;
     440:	82 2f       	mov	r24, r18
     442:	8f 7e       	andi	r24, 0xEF	; 239
     444:	8c 93       	st	X, r24
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	f9 01       	movw	r30, r18
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	2e 0f       	add	r18, r30
     458:	3f 1f       	adc	r19, r31
     45a:	f9 01       	movw	r30, r18
     45c:	ee 59       	subi	r30, 0x9E	; 158
     45e:	fe 4f       	sbci	r31, 0xFE	; 254
     460:	90 81       	ld	r25, Z
     462:	94 ff       	sbrs	r25, 4
     464:	03 c0       	rjmp	.+6      	; 0x46c <toggle+0x20>
		
		turn_off(led_index);
     466:	0e 94 07 02 	call	0x40e	; 0x40e <turn_off>
     46a:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     46c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
     470:	08 95       	ret

00000472 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     472:	ee e5       	ldi	r30, 0x5E	; 94
     474:	f2 e0       	ldi	r31, 0x02	; 2
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     47c:	87 81       	ldd	r24, Z+7	; 0x07
     47e:	80 72       	andi	r24, 0x20	; 32
     480:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     482:	83 81       	ldd	r24, Z+3	; 0x03
     484:	8f 70       	andi	r24, 0x0F	; 15
     486:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     488:	86 81       	ldd	r24, Z+6	; 0x06
     48a:	8f 7c       	andi	r24, 0xCF	; 207
     48c:	86 83       	std	Z+6, r24	; 0x06
     48e:	08 95       	ret

00000490 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     490:	08 95       	ret

00000492 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     492:	08 95       	ret

00000494 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     494:	40 31       	cpi	r20, 0x10	; 16
     496:	20 f4       	brcc	.+8      	; 0x4a0 <note_on_event+0xc>
     498:	62 2f       	mov	r22, r18
     49a:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     49c:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
     4a0:	08 95       	ret

000004a2 <update_step_board>:
	
	internal_clock.previous_rate = internal_clock.rate;	
	
}

void update_step_board() {
     4a2:	bf 92       	push	r11
     4a4:	cf 92       	push	r12
     4a6:	df 92       	push	r13
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     4b4:	80 91 6c 03 	lds	r24, 0x036C
     4b8:	81 ff       	sbrs	r24, 1
     4ba:	9a c0       	rjmp	.+308    	; 0x5f0 <update_step_board+0x14e>
     4bc:	80 91 6b 03 	lds	r24, 0x036B
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <update_step_board+0x26>
     4c6:	94 c0       	rjmp	.+296    	; 0x5f0 <update_step_board+0x14e>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     4c8:	80 91 c1 03 	lds	r24, 0x03C1
     4cc:	80 31       	cpi	r24, 0x10	; 16
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <update_step_board+0x30>
     4d0:	45 c0       	rjmp	.+138    	; 0x55c <update_step_board+0xba>
     4d2:	0f 2e       	mov	r0, r31
     4d4:	fd ea       	ldi	r31, 0xAD	; 173
     4d6:	cf 2e       	mov	r12, r31
     4d8:	f3 e0       	ldi	r31, 0x03	; 3
     4da:	df 2e       	mov	r13, r31
     4dc:	f0 2d       	mov	r31, r0
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.current_pattern.accent[i] ^= 1<<0; //just toggle first bit
     4e2:	bb 24       	eor	r11, r11
     4e4:	b3 94       	inc	r11
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f1 ec       	ldi	r31, 0xC1	; 193
     4ea:	ef 2e       	mov	r14, r31
     4ec:	f3 e0       	ldi	r31, 0x03	; 3
     4ee:	ff 2e       	mov	r15, r31
     4f0:	f0 2d       	mov	r31, r0
     4f2:	01 e0       	ldi	r16, 0x01	; 1
     4f4:	10 e0       	ldi	r17, 0x00	; 0
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
							
				if (button[i].state) {
     4f6:	fe 01       	movw	r30, r28
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e4 5f       	subi	r30, 0xF4	; 244
     4fe:	fd 4f       	sbci	r31, 0xFD	; 253
     500:	80 81       	ld	r24, Z
     502:	86 ff       	sbrs	r24, 6
     504:	23 c0       	rjmp	.+70     	; 0x54c <update_step_board+0xaa>
								
					toggle(i);
     506:	8c 2f       	mov	r24, r28
     508:	0e 94 26 02 	call	0x44c	; 0x44c <toggle>
					button[i].state ^= button[i].state;
     50c:	fe 01       	movw	r30, r28
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e4 5f       	subi	r30, 0xF4	; 244
     514:	fd 4f       	sbci	r31, 0xFD	; 253
     516:	80 81       	ld	r24, Z
     518:	8f 7b       	andi	r24, 0xBF	; 191
     51a:	80 83       	st	Z, r24
					sequencer.current_pattern.accent[i] ^= 1<<0; //just toggle first bit
     51c:	d6 01       	movw	r26, r12
     51e:	8c 91       	ld	r24, X
     520:	8b 25       	eor	r24, r11
     522:	8c 93       	st	X, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     524:	d7 01       	movw	r26, r14
     526:	ec 91       	ld	r30, X
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ee 53       	subi	r30, 0x3E	; 62
     530:	fc 4f       	sbci	r31, 0xFC	; 252
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	98 01       	movw	r18, r16
     538:	0c 2e       	mov	r0, r28
     53a:	02 c0       	rjmp	.+4      	; 0x540 <update_step_board+0x9e>
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	0a 94       	dec	r0
     542:	e2 f7       	brpl	.-8      	; 0x53c <update_step_board+0x9a>
     544:	82 27       	eor	r24, r18
     546:	93 27       	eor	r25, r19
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     54c:	21 96       	adiw	r28, 0x01	; 1
     54e:	ef ef       	ldi	r30, 0xFF	; 255
     550:	ce 1a       	sub	r12, r30
     552:	de 0a       	sbc	r13, r30
     554:	c0 31       	cpi	r28, 0x10	; 16
     556:	d1 05       	cpc	r29, r1
     558:	71 f6       	brne	.-100    	; 0x4f6 <update_step_board+0x54>
     55a:	4a c0       	rjmp	.+148    	; 0x5f0 <update_step_board+0x14e>
     55c:	0d e6       	ldi	r16, 0x6D	; 109
     55e:	13 e0       	ldi	r17, 0x03	; 3

void update_step_board() {
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     560:	c0 e0       	ldi	r28, 0x00	; 0
     562:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     564:	0f 2e       	mov	r0, r31
     566:	f1 ec       	ldi	r31, 0xC1	; 193
     568:	ef 2e       	mov	r14, r31
     56a:	f3 e0       	ldi	r31, 0x03	; 3
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	cc 24       	eor	r12, r12
     572:	c3 94       	inc	r12
     574:	d1 2c       	mov	r13, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     576:	fe 01       	movw	r30, r28
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	e4 5f       	subi	r30, 0xF4	; 244
     57e:	fd 4f       	sbci	r31, 0xFD	; 253
     580:	80 81       	ld	r24, Z
     582:	86 ff       	sbrs	r24, 6
     584:	2f c0       	rjmp	.+94     	; 0x5e4 <update_step_board+0x142>
					
				toggle(i);
     586:	8c 2f       	mov	r24, r28
     588:	0e 94 26 02 	call	0x44c	; 0x44c <toggle>
				button[i].state ^= button[i].state;
     58c:	fe 01       	movw	r30, r28
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	e4 5f       	subi	r30, 0xF4	; 244
     594:	fd 4f       	sbci	r31, 0xFD	; 253
     596:	80 81       	ld	r24, Z
     598:	8f 7b       	andi	r24, 0xBF	; 191
     59a:	80 83       	st	Z, r24
				sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     59c:	d7 01       	movw	r26, r14
     59e:	8c 91       	ld	r24, X
     5a0:	e8 2f       	mov	r30, r24
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	96 01       	movw	r18, r12
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <update_step_board+0x10a>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	8a 95       	dec	r24
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <update_step_board+0x106>
     5b0:	c9 01       	movw	r24, r18
     5b2:	d8 01       	movw	r26, r16
     5b4:	2d 91       	ld	r18, X+
     5b6:	3c 91       	ld	r19, X
     5b8:	11 97       	sbiw	r26, 0x01	; 1
     5ba:	82 27       	eor	r24, r18
     5bc:	93 27       	eor	r25, r19
     5be:	8d 93       	st	X+, r24
     5c0:	9c 93       	st	X, r25
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	ee 53       	subi	r30, 0x3E	; 62
     5c8:	fc 4f       	sbci	r31, 0xFC	; 252
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	96 01       	movw	r18, r12
     5d0:	0c 2e       	mov	r0, r28
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <update_step_board+0x136>
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <update_step_board+0x132>
     5dc:	82 27       	eor	r24, r18
     5de:	93 27       	eor	r25, r19
     5e0:	91 83       	std	Z+1, r25	; 0x01
     5e2:	80 83       	st	Z, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     5e4:	21 96       	adiw	r28, 0x01	; 1
     5e6:	0e 5f       	subi	r16, 0xFE	; 254
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	c0 31       	cpi	r28, 0x10	; 16
     5ec:	d1 05       	cpc	r29, r1
     5ee:	19 f6       	brne	.-122    	; 0x576 <update_step_board+0xd4>
				sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	08 95       	ret

00000604 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     604:	80 91 2e 02 	lds	r24, 0x022E
     608:	86 ff       	sbrs	r24, 6
     60a:	08 c0       	rjmp	.+16     	; 0x61c <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     60c:	ee e2       	ldi	r30, 0x2E	; 46
     60e:	f2 e0       	ldi	r31, 0x02	; 2
     610:	8f 7b       	andi	r24, 0xBF	; 191
     612:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     61c:	80 91 30 02 	lds	r24, 0x0230
     620:	86 ff       	sbrs	r24, 6
     622:	08 c0       	rjmp	.+16     	; 0x634 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     624:	e0 e3       	ldi	r30, 0x30	; 48
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	8f 7b       	andi	r24, 0xBF	; 191
     62a:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     634:	80 91 32 02 	lds	r24, 0x0232
     638:	86 ff       	sbrs	r24, 6
     63a:	08 c0       	rjmp	.+16     	; 0x64c <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     63c:	e2 e3       	ldi	r30, 0x32	; 50
     63e:	f2 e0       	ldi	r31, 0x02	; 2
     640:	8f 7b       	andi	r24, 0xBF	; 191
     642:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     64c:	80 91 34 02 	lds	r24, 0x0234
     650:	86 ff       	sbrs	r24, 6
     652:	08 c0       	rjmp	.+16     	; 0x664 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     654:	e4 e3       	ldi	r30, 0x34	; 52
     656:	f2 e0       	ldi	r31, 0x02	; 2
     658:	8f 7b       	andi	r24, 0xBF	; 191
     65a:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     664:	80 91 36 02 	lds	r24, 0x0236
     668:	86 ff       	sbrs	r24, 6
     66a:	08 c0       	rjmp	.+16     	; 0x67c <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     66c:	e6 e3       	ldi	r30, 0x36	; 54
     66e:	f2 e0       	ldi	r31, 0x02	; 2
     670:	8f 7b       	andi	r24, 0xBF	; 191
     672:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     67c:	80 91 38 02 	lds	r24, 0x0238
     680:	86 ff       	sbrs	r24, 6
     682:	08 c0       	rjmp	.+16     	; 0x694 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     684:	e8 e3       	ldi	r30, 0x38	; 56
     686:	f2 e0       	ldi	r31, 0x02	; 2
     688:	8f 7b       	andi	r24, 0xBF	; 191
     68a:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     694:	80 91 3a 02 	lds	r24, 0x023A
     698:	86 ff       	sbrs	r24, 6
     69a:	08 c0       	rjmp	.+16     	; 0x6ac <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     69c:	ea e3       	ldi	r30, 0x3A	; 58
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	8f 7b       	andi	r24, 0xBF	; 191
     6a2:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     6ac:	80 91 3c 02 	lds	r24, 0x023C
     6b0:	86 ff       	sbrs	r24, 6
     6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     6b4:	ec e3       	ldi	r30, 0x3C	; 60
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	8f 7b       	andi	r24, 0xBF	; 191
     6ba:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	87 e0       	ldi	r24, 0x07	; 7
     6c0:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     6c4:	80 91 3e 02 	lds	r24, 0x023E
     6c8:	86 ff       	sbrs	r24, 6
     6ca:	08 c0       	rjmp	.+16     	; 0x6dc <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     6cc:	ee e3       	ldi	r30, 0x3E	; 62
     6ce:	f2 e0       	ldi	r31, 0x02	; 2
     6d0:	8f 7b       	andi	r24, 0xBF	; 191
     6d2:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	88 e0       	ldi	r24, 0x08	; 8
     6d8:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     6dc:	80 91 40 02 	lds	r24, 0x0240
     6e0:	86 ff       	sbrs	r24, 6
     6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     6e4:	e0 e4       	ldi	r30, 0x40	; 64
     6e6:	f2 e0       	ldi	r31, 0x02	; 2
     6e8:	8f 7b       	andi	r24, 0xBF	; 191
     6ea:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	89 e0       	ldi	r24, 0x09	; 9
     6f0:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     6f4:	80 91 42 02 	lds	r24, 0x0242
     6f8:	86 ff       	sbrs	r24, 6
     6fa:	08 c0       	rjmp	.+16     	; 0x70c <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     6fc:	e2 e4       	ldi	r30, 0x42	; 66
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	8f 7b       	andi	r24, 0xBF	; 191
     702:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
     70c:	08 95       	ret

0000070e <refresh>:
}




void refresh(void) {
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
	
	read_switches();
     712:	0e 94 09 05 	call	0xa12	; 0xa12 <read_switches>
	check_start_stop_tap();
     716:	0e 94 79 05 	call	0xaf2	; 0xaf2 <check_start_stop_tap>
	
	parse_switch_data();
     71a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     71e:	80 91 6b 03 	lds	r24, 0x036B
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	11 f4       	brne	.+4      	; 0x72a <refresh+0x1c>
     726:	0e 94 02 03 	call	0x604	; 0x604 <live_hits>
	update_mode();
     72a:	0e 94 a2 04 	call	0x944	; 0x944 <update_mode>
	check_inst_switches();
     72e:	0e 94 96 05 	call	0xb2c	; 0xb2c <check_inst_switches>
	update_step_board();
     732:	0e 94 51 02 	call	0x4a2	; 0x4a2 <update_step_board>
	if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     736:	80 91 6c 03 	lds	r24, 0x036C
     73a:	81 ff       	sbrs	r24, 1
     73c:	4b c0       	rjmp	.+150    	; 0x7d4 <refresh+0xc6>
		
		if (sequencer.next_step_flag) {
     73e:	80 91 be 03 	lds	r24, 0x03BE
     742:	84 ff       	sbrs	r24, 4
     744:	56 c0       	rjmp	.+172    	; 0x7f2 <refresh+0xe4>
			sequencer.next_step_flag = 0;
     746:	ee eb       	ldi	r30, 0xBE	; 190
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	8f 7e       	andi	r24, 0xEF	; 239
     74c:	80 83       	st	Z, r24
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     74e:	80 72       	andi	r24, 0x20	; 32
     750:	88 23       	and	r24, r24
     752:	f1 f3       	breq	.-4      	; 0x750 <refresh+0x42>
			PORTD |= (1<<TRIG);
     754:	5d 9a       	sbi	0x0b, 5	; 11
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
     756:	ce eb       	ldi	r28, 0xBE	; 190
     758:	d3 e0       	ldi	r29, 0x03	; 3
     75a:	88 81       	ld	r24, Y
     75c:	8f 70       	andi	r24, 0x0F	; 15
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <refresh+0x5a>
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	8a 95       	dec	r24
     76a:	e2 f7       	brpl	.-8      	; 0x764 <refresh+0x56>
     76c:	e0 91 c1 03 	lds	r30, 0x03C1
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 53       	subi	r30, 0x3E	; 62
     778:	fc 4f       	sbci	r31, 0xFC	; 252
     77a:	90 81       	ld	r25, Z
     77c:	81 81       	ldd	r24, Z+1	; 0x01
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     77e:	ee e5       	ldi	r30, 0x5E	; 94
     780:	f2 e0       	ldi	r31, 0x02	; 2
     782:	49 2f       	mov	r20, r25
     784:	42 23       	and	r20, r18
     786:	40 95       	com	r20
		
		if (sequencer.next_step_flag) {
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
     788:	92 2b       	or	r25, r18
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     78a:	94 23       	and	r25, r20
     78c:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     78e:	98 2f       	mov	r25, r24
     790:	93 23       	and	r25, r19
     792:	90 95       	com	r25
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
     794:	83 2b       	or	r24, r19
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     796:	89 23       	and	r24, r25
     798:	80 83       	st	Z, r24
			trigger_step(); 
     79a:	0e 94 1b 01 	call	0x236	; 0x236 <trigger_step>
			if (sequencer.current_pattern.accent[sequencer.current_step] &1) spi_data[8] |= 1<<ACCENT;
     79e:	e8 81       	ld	r30, Y
     7a0:	ef 70       	andi	r30, 0x0F	; 15
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	e3 55       	subi	r30, 0x53	; 83
     7a6:	fc 4f       	sbci	r31, 0xFC	; 252
     7a8:	80 81       	ld	r24, Z
     7aa:	80 ff       	sbrs	r24, 0
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <refresh+0xaa>
     7ae:	ee e5       	ldi	r30, 0x5E	; 94
     7b0:	f2 e0       	ldi	r31, 0x02	; 2
     7b2:	80 85       	ldd	r24, Z+8	; 0x08
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	80 87       	std	Z+8, r24	; 0x08
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     7b8:	ee e6       	ldi	r30, 0x6E	; 110
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	80 83       	st	Z, r24
			TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     7c2:	85 b5       	in	r24, 0x25	; 37
     7c4:	83 60       	ori	r24, 0x03	; 3
     7c6:	85 bd       	out	0x25, r24	; 37
			sequencer.trigger_finished = 0;
     7c8:	ee eb       	ldi	r30, 0xBE	; 190
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	80 81       	ld	r24, Z
     7ce:	8f 7d       	andi	r24, 0xDF	; 223
     7d0:	80 83       	st	Z, r24
     7d2:	0f c0       	rjmp	.+30     	; 0x7f2 <refresh+0xe4>
		} else {
			

			
		}		
	} else if (sequencer.next_step_flag){
     7d4:	80 91 be 03 	lds	r24, 0x03BE
     7d8:	84 ff       	sbrs	r24, 4
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <refresh+0xe4>
		
			sequencer.next_step_flag = 0;
     7dc:	ee eb       	ldi	r30, 0xBE	; 190
     7de:	f3 e0       	ldi	r31, 0x03	; 3
     7e0:	8f 7e       	andi	r24, 0xEF	; 239
     7e2:	80 83       	st	Z, r24
			spi_data[1] = 0;
     7e4:	ee e5       	ldi	r30, 0x5E	; 94
     7e6:	f2 e0       	ldi	r31, 0x02	; 2
     7e8:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     7ea:	10 82       	st	Z, r1
			turn_on(STEP_1_LED);
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
		
	}
	
	if (sequencer.trigger_finished) {
     7f2:	80 91 be 03 	lds	r24, 0x03BE
     7f6:	85 fd       	sbrc	r24, 5
		
		//sequencer.trigger_finished = 0;
		spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
     7f8:	10 92 66 02 	sts	0x0266, r1
	}
	
	update_spi();
     7fc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <update_spi>
	PORTD &= ~(1<<TRIG);
     800:	5d 98       	cbi	0x0b, 5	; 11
	//if (trigger_finished && sequencer.SHIFT) update_tempo(); //turning off SPI during pot read creates problem for trigger interrupt
	
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     808:	8f e1       	ldi	r24, 0x1F	; 31
     80a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     80e:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     812:	88 e9       	ldi	r24, 0x98	; 152
     814:	80 93 c1 00 	sts	0x00C1, r24
     818:	08 95       	ret

0000081a <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	1f 92       	push	r1
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     846:	80 91 c6 00 	lds	r24, 0x00C6
     84a:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     84c:	ae 01       	movw	r20, r28
     84e:	4f 5f       	subi	r20, 0xFF	; 255
     850:	5f 4f       	sbci	r21, 0xFF	; 255
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	8e e7       	ldi	r24, 0x7E	; 126
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 3a 07 	call	0xe74	; 0xe74 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	ff 91       	pop	r31
     864:	ef 91       	pop	r30
     866:	bf 91       	pop	r27
     868:	af 91       	pop	r26
     86a:	9f 91       	pop	r25
     86c:	8f 91       	pop	r24
     86e:	7f 91       	pop	r23
     870:	6f 91       	pop	r22
     872:	5f 91       	pop	r21
     874:	4f 91       	pop	r20
     876:	3f 91       	pop	r19
     878:	2f 91       	pop	r18
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	1f 90       	pop	r1
     882:	18 95       	reti

00000884 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     884:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     886:	8d b1       	in	r24, 0x0d	; 13
     888:	8c 60       	ori	r24, 0x0C	; 12
     88a:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     88c:	87 b1       	in	r24, 0x07	; 7
     88e:	8e 60       	ori	r24, 0x0E	; 14
     890:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     892:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     894:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     896:	88 b1       	in	r24, 0x08	; 8
     898:	81 7f       	andi	r24, 0xF1	; 241
     89a:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     89c:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     89e:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     8a0:	80 e5       	ldi	r24, 0x50	; 80
     8a2:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     8a6:	ed ea       	ldi	r30, 0xAD	; 173
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	81 60       	ori	r24, 0x01	; 1
     8ae:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     8b6:	8d e1       	ldi	r24, 0x1D	; 29
     8b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
	turn_on(FILL_MANUAL);
     8bc:	82 e2       	ldi	r24, 0x22	; 34
     8be:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
	
	update_spi();
     8c2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     8c6:	84 b5       	in	r24, 0x24	; 36
     8c8:	82 60       	ori	r24, 0x02	; 2
     8ca:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     8cc:	81 ee       	ldi	r24, 0xE1	; 225
     8ce:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     8d0:	8e e7       	ldi	r24, 0x7E	; 126
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 09 07 	call	0xe12	; 0xe12 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     8d8:	6a e4       	ldi	r22, 0x4A	; 74
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	8e e7       	ldi	r24, 0x7E	; 126
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     8e4:	68 e4       	ldi	r22, 0x48	; 72
     8e6:	72 e0       	ldi	r23, 0x02	; 2
     8e8:	8e e7       	ldi	r24, 0x7E	; 126
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 01 07 	call	0xe02	; 0xe02 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     8f0:	69 e4       	ldi	r22, 0x49	; 73
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	8e e7       	ldi	r24, 0x7E	; 126
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 05 07 	call	0xe0a	; 0xe0a <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     8fc:	0e 94 04 04 	call	0x808	; 0x808 <setup_midi_usart>
	
	setup_internal_clock();
     900:	0e 94 9b 00 	call	0x136	; 0x136 <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     904:	e9 e6       	ldi	r30, 0x69	; 105
     906:	f2 e0       	ldi	r31, 0x02	; 2
     908:	86 e0       	ldi	r24, 0x06	; 6
     90a:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	81 83       	std	Z+1, r24	; 0x01
	internal_clock.rate = 400; //use fixed rate to get clock working
     910:	80 e9       	ldi	r24, 0x90	; 144
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	94 83       	std	Z+4, r25	; 0x04
     916:	83 83       	std	Z+3, r24	; 0x03
	update_clock_rate(internal_clock.rate);
     918:	0e 94 a2 00 	call	0x144	; 0x144 <update_clock_rate>
	setup_adc();
     91c:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     920:	ee eb       	ldi	r30, 0xBE	; 190
     922:	f3 e0       	ldi	r31, 0x03	; 3
     924:	80 81       	ld	r24, Z
     926:	80 62       	ori	r24, 0x20	; 32
     928:	80 83       	st	Z, r24
	sequencer.START = 0;
     92a:	ec e6       	ldi	r30, 0x6C	; 108
     92c:	f3 e0       	ldi	r31, 0x03	; 3
     92e:	80 81       	ld	r24, Z
     930:	8d 7f       	andi	r24, 0xFD	; 253
     932:	80 83       	st	Z, r24
	//update_tempo();
	sei(); //enable global interrupts	
     934:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     936:	8e e7       	ldi	r24, 0x7E	; 126
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 33 09 	call	0x1266	; 0x1266 <midi_device_process>
	
	refresh();		
     93e:	0e 94 87 03 	call	0x70e	; 0x70e <refresh>

	
	}
     942:	f9 cf       	rjmp	.-14     	; 0x936 <__stack+0x37>

00000944 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     944:	80 91 4c 02 	lds	r24, 0x024C
     948:	86 ff       	sbrs	r24, 6
     94a:	34 c0       	rjmp	.+104    	; 0x9b4 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     94c:	ec e4       	ldi	r30, 0x4C	; 76
     94e:	f2 e0       	ldi	r31, 0x02	; 2
     950:	8f 7b       	andi	r24, 0xBF	; 191
     952:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     954:	80 91 6c 03 	lds	r24, 0x036C
     958:	80 ff       	sbrs	r24, 0
     95a:	0c c0       	rjmp	.+24     	; 0x974 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     95c:	80 91 53 02 	lds	r24, 0x0253
     960:	88 23       	and	r24, r24
     962:	21 f0       	breq	.+8      	; 0x96c <update_mode+0x28>
     964:	81 50       	subi	r24, 0x01	; 1
     966:	80 93 53 02 	sts	0x0253, r24
     96a:	0e c0       	rjmp	.+28     	; 0x988 <update_mode+0x44>
     96c:	85 e0       	ldi	r24, 0x05	; 5
     96e:	80 93 53 02 	sts	0x0253, r24
     972:	0a c0       	rjmp	.+20     	; 0x988 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     974:	80 91 53 02 	lds	r24, 0x0253
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	86 30       	cpi	r24, 0x06	; 6
     97c:	19 f0       	breq	.+6      	; 0x984 <update_mode+0x40>
     97e:	80 93 53 02 	sts	0x0253, r24
     982:	02 c0       	rjmp	.+4      	; 0x988 <update_mode+0x44>
     984:	10 92 53 02 	sts	0x0253, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     988:	20 91 53 02 	lds	r18, 0x0253
     98c:	e2 2f       	mov	r30, r18
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ea 5f       	subi	r30, 0xFA	; 250
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	80 81       	ld	r24, Z
     996:	80 93 6b 03 	sts	0x036B, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     99a:	ee e5       	ldi	r30, 0x5E	; 94
     99c:	f2 e0       	ldi	r31, 0x02	; 2
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <update_mode+0x64>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	2a 95       	dec	r18
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     9ac:	94 81       	ldd	r25, Z+4	; 0x04
     9ae:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     9b0:	89 2b       	or	r24, r25
     9b2:	84 83       	std	Z+4, r24	; 0x04
     9b4:	08 95       	ret

000009b6 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     9b6:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     9ba:	ed ea       	ldi	r30, 0xAD	; 173
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	88 23       	and	r24, r24
     9c2:	ec f7       	brge	.-6      	; 0x9be <spi_shift_byte+0x8>
	return SPDR1;
     9c4:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     9c8:	08 95       	ret

000009ca <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     9ce:	ce e5       	ldi	r28, 0x5E	; 94
     9d0:	d2 e0       	ldi	r29, 0x02	; 2
     9d2:	88 81       	ld	r24, Y
     9d4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
     9ec:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     9f0:	8d 81       	ldd	r24, Y+5	; 0x05
     9f2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     9fc:	8f 81       	ldd	r24, Y+7	; 0x07
     9fe:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     a02:	88 85       	ldd	r24, Y+8	; 0x08
     a04:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     a08:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     a0a:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <read_switches>:

void read_switches(void) { //reads switch data
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     a16:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
     a1e:	c9 e5       	ldi	r28, 0x59	; 89
     a20:	d2 e0       	ldi	r29, 0x02	; 2
     a22:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
     a2a:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
     a32:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
     a3a:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <spi_shift_byte>
     a42:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     a44:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     a46:	98 81       	ld	r25, Y
     a48:	39 2f       	mov	r19, r25
     a4a:	36 95       	lsr	r19
     a4c:	ec e6       	ldi	r30, 0x6C	; 108
     a4e:	f3 e0       	ldi	r31, 0x03	; 3
     a50:	20 81       	ld	r18, Z
     a52:	30 fb       	bst	r19, 0
     a54:	20 f9       	bld	r18, 0
     a56:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     a58:	e4 e5       	ldi	r30, 0x54	; 84
     a5a:	f2 e0       	ldi	r31, 0x02	; 2
     a5c:	20 81       	ld	r18, Z
     a5e:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     a60:	29 27       	eor	r18, r25
     a62:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     a64:	92 23       	and	r25, r18
     a66:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     a68:	21 81       	ldd	r18, Z+1	; 0x01
     a6a:	99 81       	ldd	r25, Y+1	; 0x01
     a6c:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     a6e:	29 27       	eor	r18, r25
     a70:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     a72:	92 23       	and	r25, r18
     a74:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     a76:	22 81       	ldd	r18, Z+2	; 0x02
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     a7c:	29 27       	eor	r18, r25
     a7e:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     a80:	92 23       	and	r25, r18
     a82:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     a84:	23 81       	ldd	r18, Z+3	; 0x03
     a86:	9b 81       	ldd	r25, Y+3	; 0x03
     a88:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     a8a:	29 27       	eor	r18, r25
     a8c:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     a8e:	92 23       	and	r25, r18
     a90:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     a92:	94 81       	ldd	r25, Z+4	; 0x04
     a94:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     a96:	98 27       	eor	r25, r24
     a98:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     a9a:	89 23       	and	r24, r25
     a9c:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     aa8:	da 01       	movw	r26, r20
     aaa:	aa 0f       	add	r26, r26
     aac:	bb 1f       	adc	r27, r27
     aae:	a4 5f       	subi	r26, 0xF4	; 244
     ab0:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     ab2:	8c 91       	ld	r24, X
     ab4:	e8 2f       	mov	r30, r24
     ab6:	e6 95       	lsr	r30
     ab8:	e6 95       	lsr	r30
     aba:	e6 95       	lsr	r30
     abc:	e7 70       	andi	r30, 0x07	; 7
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	e7 5a       	subi	r30, 0xA7	; 167
     ac2:	fd 4f       	sbci	r31, 0xFD	; 253
     ac4:	20 81       	ld	r18, Z
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	98 2f       	mov	r25, r24
     aca:	97 70       	andi	r25, 0x07	; 7
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <parse_switch_data+0x2e>
     ace:	35 95       	asr	r19
     ad0:	27 95       	ror	r18
     ad2:	9a 95       	dec	r25
     ad4:	e2 f7       	brpl	.-8      	; 0xace <parse_switch_data+0x2a>
     ad6:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     ad8:	86 fb       	bst	r24, 6
     ada:	99 27       	eor	r25, r25
     adc:	90 f9       	bld	r25, 0
     ade:	29 27       	eor	r18, r25
     ae0:	20 fb       	bst	r18, 0
     ae2:	86 f9       	bld	r24, 6
     ae4:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     ae6:	4f 5f       	subi	r20, 0xFF	; 255
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	43 32       	cpi	r20, 0x23	; 35
     aec:	51 05       	cpc	r21, r1
     aee:	e1 f6       	brne	.-72     	; 0xaa8 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     af0:	08 95       	ret

00000af2 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     af2:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     af4:	80 91 67 02 	lds	r24, 0x0267
     af8:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     afa:	89 27       	eor	r24, r25
     afc:	80 93 67 02 	sts	0x0267, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     b00:	89 23       	and	r24, r25
     b02:	80 93 68 02 	sts	0x0268, r24
	
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     b06:	86 95       	lsr	r24
     b08:	ec e6       	ldi	r30, 0x6C	; 108
     b0a:	f3 e0       	ldi	r31, 0x03	; 3
     b0c:	90 81       	ld	r25, Z
     b0e:	91 fb       	bst	r25, 1
     b10:	22 27       	eor	r18, r18
     b12:	20 f9       	bld	r18, 0
     b14:	82 27       	eor	r24, r18
     b16:	80 fb       	bst	r24, 0
     b18:	91 f9       	bld	r25, 1
     b1a:	90 83       	st	Z, r25
	if (!sequencer.START) {
     b1c:	91 fd       	sbrc	r25, 1
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <check_start_stop_tap+0x38>
		sequencer.current_step = 0;
     b20:	ee eb       	ldi	r30, 0xBE	; 190
     b22:	f3 e0       	ldi	r31, 0x03	; 3
     b24:	80 81       	ld	r24, Z
     b26:	80 7f       	andi	r24, 0xF0	; 240
     b28:	80 83       	st	Z, r24
     b2a:	08 95       	ret

00000b2c <check_inst_switches>:
		
	}
	
}
	
void check_inst_switches(void) {
     b2c:	3f 92       	push	r3
     b2e:	4f 92       	push	r4
     b30:	5f 92       	push	r5
     b32:	6f 92       	push	r6
     b34:	7f 92       	push	r7
     b36:	8f 92       	push	r8
     b38:	9f 92       	push	r9
     b3a:	af 92       	push	r10
     b3c:	bf 92       	push	r11
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	0f 2e       	mov	r0, r31
     b50:	f5 e0       	ldi	r31, 0x05	; 5
     b52:	ef 2e       	mov	r14, r31
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	ff 2e       	mov	r15, r31
     b58:	f0 2d       	mov	r31, r0
     b5a:	0f 2e       	mov	r0, r31
     b5c:	fb e3       	ldi	r31, 0x3B	; 59
     b5e:	8f 2e       	mov	r8, r31
     b60:	f1 e0       	ldi	r31, 0x01	; 1
     b62:	9f 2e       	mov	r9, r31
     b64:	f0 2d       	mov	r31, r0
     b66:	02 e1       	ldi	r16, 0x12	; 18
     b68:	10 e0       	ldi	r17, 0x00	; 0
     b6a:	c1 e1       	ldi	r28, 0x11	; 17
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
     b6e:	c1 2c       	mov	r12, r1
     b70:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     b72:	0f 2e       	mov	r0, r31
     b74:	f1 ec       	ldi	r31, 0xC1	; 193
     b76:	af 2e       	mov	r10, r31
     b78:	f3 e0       	ldi	r31, 0x03	; 3
     b7a:	bf 2e       	mov	r11, r31
     b7c:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     b7e:	0f 2e       	mov	r0, r31
     b80:	ff e5       	ldi	r31, 0x5F	; 95
     b82:	4f 2e       	mov	r4, r31
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	5f 2e       	mov	r5, r31
     b88:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     b8a:	0f 2e       	mov	r0, r31
     b8c:	ff e0       	ldi	r31, 0x0F	; 15
     b8e:	3f 2e       	mov	r3, r31
     b90:	f0 2d       	mov	r31, r0
     b92:	0c c0       	rjmp	.+24     	; 0xbac <check_inst_switches+0x80>
     b94:	8f ef       	ldi	r24, 0xFF	; 255
     b96:	c8 1a       	sub	r12, r24
     b98:	d8 0a       	sbc	r13, r24
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	0f 5f       	subi	r16, 0xFF	; 255
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	a6 e0       	ldi	r26, 0x06	; 6
     ba2:	ea 0e       	add	r14, r26
     ba4:	f1 1c       	adc	r15, r1
     ba6:	b6 e0       	ldi	r27, 0x06	; 6
     ba8:	8b 0e       	add	r8, r27
     baa:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     bac:	fe 01       	movw	r30, r28
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e4 5f       	subi	r30, 0xF4	; 244
     bb4:	fd 4f       	sbci	r31, 0xFD	; 253
     bb6:	80 81       	ld	r24, Z
     bb8:	86 ff       	sbrs	r24, 6
     bba:	37 c0       	rjmp	.+110    	; 0xc2a <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
     bbc:	fe 01       	movw	r30, r28
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	e4 5f       	subi	r30, 0xF4	; 244
     bc4:	fd 4f       	sbci	r31, 0xFD	; 253
     bc6:	8f 7b       	andi	r24, 0xBF	; 191
     bc8:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
     bca:	0e 94 39 02 	call	0x472	; 0x472 <turn_off_all_inst_leds>
     bce:	f7 01       	movw	r30, r14
     bd0:	d7 01       	movw	r26, r14
     bd2:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
     bd4:	8c 91       	ld	r24, X
     bd6:	8f 3f       	cpi	r24, 0xFF	; 255
     bd8:	a9 f0       	breq	.+42     	; 0xc04 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
     bda:	d5 01       	movw	r26, r10
     bdc:	8c 91       	ld	r24, X
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	c8 16       	cp	r12, r24
     be2:	d9 06       	cpc	r13, r25
     be4:	49 f4       	brne	.+18     	; 0xbf8 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
     be6:	f4 01       	movw	r30, r8
     be8:	80 81       	ld	r24, Z
     bea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
     bee:	89 e0       	ldi	r24, 0x09	; 9
     bf0:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
     bf2:	d5 01       	movw	r26, r10
     bf4:	8c 93       	st	X, r24
     bf6:	19 c0       	rjmp	.+50     	; 0xc2a <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
     bf8:	80 81       	ld	r24, Z
     bfa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
     bfe:	f5 01       	movw	r30, r10
     c00:	c0 82       	st	Z, r12
     c02:	13 c0       	rjmp	.+38     	; 0xc2a <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     c04:	d5 01       	movw	r26, r10
     c06:	8c 91       	ld	r24, X
     c08:	86 30       	cpi	r24, 0x06	; 6
     c0a:	51 f4       	brne	.+20     	; 0xc20 <check_inst_switches+0xf4>
     c0c:	c7 31       	cpi	r28, 0x17	; 23
     c0e:	d1 05       	cpc	r29, r1
     c10:	39 f4       	brne	.+14     	; 0xc20 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
     c12:	f2 01       	movw	r30, r4
     c14:	80 81       	ld	r24, Z
     c16:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
					sequencer.current_inst = MA;
     c1a:	d5 01       	movw	r26, r10
     c1c:	3c 92       	st	X, r3
     c1e:	ba cf       	rjmp	.-140    	; 0xb94 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
     c20:	80 81       	ld	r24, Z
     c22:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
     c26:	f5 01       	movw	r30, r10
     c28:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
     c2a:	0c 31       	cpi	r16, 0x1C	; 28
     c2c:	11 05       	cpc	r17, r1
     c2e:	0c f4       	brge	.+2      	; 0xc32 <check_inst_switches+0x106>
     c30:	b1 cf       	rjmp	.-158    	; 0xb94 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
     c32:	80 91 2c 02 	lds	r24, 0x022C
     c36:	86 ff       	sbrs	r24, 6
     c38:	0c c0       	rjmp	.+24     	; 0xc52 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
     c3a:	ec e2       	ldi	r30, 0x2C	; 44
     c3c:	f2 e0       	ldi	r31, 0x02	; 2
     c3e:	8f 7b       	andi	r24, 0xBF	; 191
     c40:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
     c42:	0e 94 39 02 	call	0x472	; 0x472 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
     c46:	84 e1       	ldi	r24, 0x14	; 20
     c48:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <turn_on>
		sequencer.current_inst = AC;
     c4c:	80 e1       	ldi	r24, 0x10	; 16
     c4e:	80 93 c1 03 	sts	0x03C1, r24
	}
	
}	
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	bf 90       	pop	r11
     c64:	af 90       	pop	r10
     c66:	9f 90       	pop	r9
     c68:	8f 90       	pop	r8
     c6a:	7f 90       	pop	r7
     c6c:	6f 90       	pop	r6
     c6e:	5f 90       	pop	r5
     c70:	4f 90       	pop	r4
     c72:	3f 90       	pop	r3
     c74:	08 95       	ret

00000c76 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     c76:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     c78:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     c7a:	74 83       	std	Z+4, r23	; 0x04
     c7c:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     c7e:	11 82       	std	Z+1, r1	; 0x01
     c80:	10 82       	st	Z, r1
     c82:	08 95       	ret

00000c84 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     c92:	0e 94 bb 06 	call	0xd76	; 0xd76 <store_and_clear_interrupt>
     c96:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     c98:	f9 80       	ldd	r15, Y+1	; 0x01
     c9a:	4f 2d       	mov	r20, r15
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	ca 01       	movw	r24, r20
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	2a 81       	ldd	r18, Y+2	; 0x02
     ca4:	62 2f       	mov	r22, r18
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divmodhi4>
     cac:	28 81       	ld	r18, Y
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	82 17       	cp	r24, r18
     cb2:	93 07       	cpc	r25, r19
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
     cb6:	81 2f       	mov	r24, r17
     cb8:	0e 94 be 06 	call	0xd7c	; 0xd7c <restore_interrupt_setting>
      return false;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	12 c0       	rjmp	.+36     	; 0xce4 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
     cc0:	eb 81       	ldd	r30, Y+3	; 0x03
     cc2:	fc 81       	ldd	r31, Y+4	; 0x04
     cc4:	ef 0d       	add	r30, r15
     cc6:	f1 1d       	adc	r31, r1
     cc8:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
     cca:	29 81       	ldd	r18, Y+1	; 0x01
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	c9 01       	movw	r24, r18
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	6a 81       	ldd	r22, Y+2	; 0x02
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divmodhi4>
     cda:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     cdc:	81 2f       	mov	r24, r17
     cde:	0e 94 be 06 	call	0xd7c	; 0xd7c <restore_interrupt_setting>
      return true;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	08 95       	ret

00000cf0 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     cf6:	0e 94 bb 06 	call	0xd76	; 0xd76 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     cfa:	39 81       	ldd	r19, Y+1	; 0x01
     cfc:	28 81       	ld	r18, Y
     cfe:	32 17       	cp	r19, r18
     d00:	18 f0       	brcs	.+6      	; 0xd08 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     d02:	c3 2f       	mov	r28, r19
     d04:	c2 1b       	sub	r28, r18
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <bytequeue_length+0x20>
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	c3 2f       	mov	r28, r19
     d0c:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
     d0e:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
     d10:	0e 94 be 06 	call	0xd7c	; 0xd7c <restore_interrupt_setting>
   return len;
}
     d14:	8c 2f       	mov	r24, r28
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     d1c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     d1e:	80 81       	ld	r24, Z
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	9b 01       	movw	r18, r22
     d24:	28 0f       	add	r18, r24
     d26:	31 1d       	adc	r19, r1
     d28:	c9 01       	movw	r24, r18
     d2a:	62 81       	ldd	r22, Z+2	; 0x02
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divmodhi4>
     d32:	03 80       	ldd	r0, Z+3	; 0x03
     d34:	f4 81       	ldd	r31, Z+4	; 0x04
     d36:	e0 2d       	mov	r30, r0
     d38:	e8 0f       	add	r30, r24
     d3a:	f9 1f       	adc	r31, r25
}
     d3c:	80 81       	ld	r24, Z
     d3e:	08 95       	ret

00000d40 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
     d48:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     d4a:	0e 94 bb 06 	call	0xd76	; 0xd76 <store_and_clear_interrupt>
     d4e:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     d50:	88 81       	ld	r24, Y
     d52:	21 2f       	mov	r18, r17
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	b9 01       	movw	r22, r18
     d58:	68 0f       	add	r22, r24
     d5a:	71 1d       	adc	r23, r1
     d5c:	cb 01       	movw	r24, r22
     d5e:	6a 81       	ldd	r22, Y+2	; 0x02
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divmodhi4>
     d66:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     d68:	84 2f       	mov	r24, r20
     d6a:	0e 94 be 06 	call	0xd7c	; 0xd7c <restore_interrupt_setting>
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	08 95       	ret

00000d76 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     d76:	8f b7       	in	r24, 0x3f	; 63
   cli();
     d78:	f8 94       	cli
   return sreg;
}
     d7a:	08 95       	ret

00000d7c <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     d7c:	8f bf       	out	0x3f, r24	; 63
     d7e:	08 95       	ret

00000d80 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     d80:	88 1f       	adc	r24, r24
     d82:	88 27       	eor	r24, r24
     d84:	88 1f       	adc	r24, r24
     d86:	08 95       	ret

00000d88 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	88 3f       	cpi	r24, 0xF8	; 248
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <midi_is_realtime+0x8>
     d8e:	90 e0       	ldi	r25, 0x00	; 0
}
     d90:	89 2f       	mov	r24, r25
     d92:	08 95       	ret

00000d94 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     d94:	98 2f       	mov	r25, r24
     d96:	90 7f       	andi	r25, 0xF0	; 240
     d98:	90 3c       	cpi	r25, 0xC0	; 192
     d9a:	b1 f0       	breq	.+44     	; 0xdc8 <midi_packet_length+0x34>
     d9c:	58 f4       	brcc	.+22     	; 0xdb4 <midi_packet_length+0x20>
     d9e:	90 39       	cpi	r25, 0x90	; 144
     da0:	41 f1       	breq	.+80     	; 0xdf2 <midi_packet_length+0x5e>
     da2:	18 f4       	brcc	.+6      	; 0xdaa <midi_packet_length+0x16>
     da4:	90 38       	cpi	r25, 0x80	; 128
     da6:	19 f5       	brne	.+70     	; 0xdee <midi_packet_length+0x5a>
     da8:	24 c0       	rjmp	.+72     	; 0xdf2 <midi_packet_length+0x5e>
     daa:	90 3a       	cpi	r25, 0xA0	; 160
     dac:	11 f1       	breq	.+68     	; 0xdf2 <midi_packet_length+0x5e>
     dae:	90 3b       	cpi	r25, 0xB0	; 176
     db0:	f1 f4       	brne	.+60     	; 0xdee <midi_packet_length+0x5a>
     db2:	1f c0       	rjmp	.+62     	; 0xdf2 <midi_packet_length+0x5e>
     db4:	90 3e       	cpi	r25, 0xE0	; 224
     db6:	e9 f0       	breq	.+58     	; 0xdf2 <midi_packet_length+0x5e>
     db8:	18 f4       	brcc	.+6      	; 0xdc0 <midi_packet_length+0x2c>
     dba:	90 3d       	cpi	r25, 0xD0	; 208
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <midi_packet_length+0x34>
     dbe:	17 c0       	rjmp	.+46     	; 0xdee <midi_packet_length+0x5a>
     dc0:	90 3f       	cpi	r25, 0xF0	; 240
     dc2:	21 f0       	breq	.+8      	; 0xdcc <midi_packet_length+0x38>
     dc4:	93 3f       	cpi	r25, 0xF3	; 243
     dc6:	99 f4       	brne	.+38     	; 0xdee <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	08 95       	ret
      case 0xF0:
         switch(status) {
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	e1 5f       	subi	r30, 0xF1	; 241
     dd2:	f1 09       	sbc	r31, r1
     dd4:	ef 30       	cpi	r30, 0x0F	; 15
     dd6:	f1 05       	cpc	r31, r1
     dd8:	40 f4       	brcc	.+16     	; 0xdea <midi_packet_length+0x56>
     dda:	e6 5a       	subi	r30, 0xA6	; 166
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	08 95       	ret
         }
      default:
         return UNDEFINED;
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     df8:	08 95       	ret

00000dfa <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     dfa:	fc 01       	movw	r30, r24
     dfc:	75 83       	std	Z+5, r23	; 0x05
     dfe:	64 83       	std	Z+4, r22	; 0x04
     e00:	08 95       	ret

00000e02 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     e02:	fc 01       	movw	r30, r24
     e04:	77 83       	std	Z+7, r23	; 0x07
     e06:	66 83       	std	Z+6, r22	; 0x06
     e08:	08 95       	ret

00000e0a <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     e0a:	fc 01       	movw	r30, r24
     e0c:	77 8b       	std	Z+23, r23	; 0x17
     e0e:	66 8b       	std	Z+22, r22	; 0x16
     e10:	08 95       	ret

00000e12 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     e18:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
     e1a:	1f a2       	std	Y+39, r1	; 0x27
     e1c:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     e1e:	bc 01       	movw	r22, r24
     e20:	68 5d       	subi	r22, 0xD8	; 216
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	40 ec       	ldi	r20, 0xC0	; 192
     e26:	88 51       	subi	r24, 0x18	; 24
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	0e 94 3b 06 	call	0xc76	; 0xc76 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     e2e:	1b 82       	std	Y+3, r1	; 0x03
     e30:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     e32:	1d 82       	std	Y+5, r1	; 0x05
     e34:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     e36:	1f 82       	std	Y+7, r1	; 0x07
     e38:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     e3a:	19 86       	std	Y+9, r1	; 0x09
     e3c:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     e3e:	1b 86       	std	Y+11, r1	; 0x0b
     e40:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     e42:	1d 86       	std	Y+13, r1	; 0x0d
     e44:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     e46:	1f 86       	std	Y+15, r1	; 0x0f
     e48:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     e4a:	19 8a       	std	Y+17, r1	; 0x11
     e4c:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     e4e:	1b 8a       	std	Y+19, r1	; 0x13
     e50:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     e52:	1d 8a       	std	Y+21, r1	; 0x15
     e54:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     e56:	1f 8a       	std	Y+23, r1	; 0x17
     e58:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     e5a:	19 8e       	std	Y+25, r1	; 0x19
     e5c:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     e5e:	1b 8e       	std	Y+27, r1	; 0x1b
     e60:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     e62:	1d 8e       	std	Y+29, r1	; 0x1d
     e64:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     e66:	1f 8e       	std	Y+31, r1	; 0x1f
     e68:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     e6a:	19 a2       	std	Y+33, r1	; 0x21
     e6c:	18 a2       	std	Y+32, r1	; 0x20
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
     e80:	66 23       	and	r22, r22
     e82:	99 f0       	breq	.+38     	; 0xeaa <midi_device_input+0x36>
     e84:	ea 01       	movw	r28, r20
     e86:	61 50       	subi	r22, 0x01	; 1
     e88:	06 2f       	mov	r16, r22
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	0f 5f       	subi	r16, 0xFF	; 255
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	04 0f       	add	r16, r20
     e92:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
     e94:	7c 01       	movw	r14, r24
     e96:	28 ee       	ldi	r18, 0xE8	; 232
     e98:	e2 0e       	add	r14, r18
     e9a:	f1 1c       	adc	r15, r1
     e9c:	69 91       	ld	r22, Y+
     e9e:	c7 01       	movw	r24, r14
     ea0:	0e 94 42 06 	call	0xc84	; 0xc84 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     ea4:	c0 17       	cp	r28, r16
     ea6:	d1 07       	cpc	r29, r17
     ea8:	c9 f7       	brne	.-14     	; 0xe9c <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	08 95       	ret

00000eb8 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	00 d0       	rcall	.+0      	; 0xece <midi_input_callbacks+0x16>
     ece:	1f 92       	push	r1
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	7c 01       	movw	r14, r24
     ed6:	6b 01       	movw	r12, r22
     ed8:	14 2f       	mov	r17, r20
     eda:	b2 2e       	mov	r11, r18
     edc:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     ede:	dc 01       	movw	r26, r24
     ee0:	95 96       	adiw	r26, 0x25	; 37
     ee2:	8c 91       	ld	r24, X
     ee4:	95 97       	sbiw	r26, 0x25	; 37
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	11 f5       	brne	.+68     	; 0xf2e <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
     eea:	5a 96       	adiw	r26, 0x1a	; 26
     eec:	ed 91       	ld	r30, X+
     eee:	fc 91       	ld	r31, X
     ef0:	5b 97       	sbiw	r26, 0x1b	; 27
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	09 f4       	brne	.+2      	; 0xef8 <midi_input_callbacks+0x40>
     ef6:	cc c0       	rjmp	.+408    	; 0x1090 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     ef8:	9b 01       	movw	r18, r22
     efa:	21 50       	subi	r18, 0x01	; 1
     efc:	31 09       	sbc	r19, r1
     efe:	ab ea       	ldi	r26, 0xAB	; 171
     f00:	ba ea       	ldi	r27, 0xAA	; 170
     f02:	0e 94 84 09 	call	0x1308	; 0x1308 <__umulhisi3>
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	9c 01       	movw	r18, r24
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     f14:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     f16:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
     f18:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     f1a:	4c 2d       	mov	r20, r12
     f1c:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     f1e:	9e 01       	movw	r18, r28
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	68 2f       	mov	r22, r24
     f26:	79 2f       	mov	r23, r25
     f28:	c7 01       	movw	r24, r14
     f2a:	09 95       	icall
     f2c:	be c0       	rjmp	.+380    	; 0x10aa <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
     f2e:	62 30       	cpi	r22, 0x02	; 2
     f30:	71 05       	cpc	r23, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <midi_input_callbacks+0x7e>
     f34:	55 c0       	rjmp	.+170    	; 0xfe0 <midi_input_callbacks+0x128>
     f36:	63 30       	cpi	r22, 0x03	; 3
     f38:	71 05       	cpc	r23, r1
     f3a:	29 f0       	breq	.+10     	; 0xf46 <midi_input_callbacks+0x8e>
     f3c:	61 30       	cpi	r22, 0x01	; 1
     f3e:	71 05       	cpc	r23, r1
     f40:	09 f0       	breq	.+2      	; 0xf44 <midi_input_callbacks+0x8c>
     f42:	a1 c0       	rjmp	.+322    	; 0x1086 <midi_input_callbacks+0x1ce>
     f44:	88 c0       	rjmp	.+272    	; 0x1056 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     f46:	84 2f       	mov	r24, r20
     f48:	80 7f       	andi	r24, 0xF0	; 240
     f4a:	80 3a       	cpi	r24, 0xA0	; 160
     f4c:	f1 f0       	breq	.+60     	; 0xf8a <midi_input_callbacks+0xd2>
     f4e:	28 f4       	brcc	.+10     	; 0xf5a <midi_input_callbacks+0xa2>
     f50:	80 38       	cpi	r24, 0x80	; 128
     f52:	a9 f0       	breq	.+42     	; 0xf7e <midi_input_callbacks+0xc6>
     f54:	80 39       	cpi	r24, 0x90	; 144
     f56:	69 f0       	breq	.+26     	; 0xf72 <midi_input_callbacks+0xba>
     f58:	2f c0       	rjmp	.+94     	; 0xfb8 <midi_input_callbacks+0x100>
     f5a:	80 3e       	cpi	r24, 0xE0	; 224
     f5c:	e1 f0       	breq	.+56     	; 0xf96 <midi_input_callbacks+0xde>
     f5e:	80 3f       	cpi	r24, 0xF0	; 240
     f60:	01 f1       	breq	.+64     	; 0xfa2 <midi_input_callbacks+0xea>
     f62:	80 3b       	cpi	r24, 0xB0	; 176
     f64:	49 f5       	brne	.+82     	; 0xfb8 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
     f66:	d7 01       	movw	r26, r14
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	ed 91       	ld	r30, X+
     f6c:	fc 91       	ld	r31, X
     f6e:	13 97       	sbiw	r26, 0x03	; 3
              break;
     f70:	25 c0       	rjmp	.+74     	; 0xfbc <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     f72:	d7 01       	movw	r26, r14
     f74:	14 96       	adiw	r26, 0x04	; 4
     f76:	ed 91       	ld	r30, X+
     f78:	fc 91       	ld	r31, X
     f7a:	15 97       	sbiw	r26, 0x05	; 5
              break;
     f7c:	1f c0       	rjmp	.+62     	; 0xfbc <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     f7e:	d7 01       	movw	r26, r14
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	17 97       	sbiw	r26, 0x07	; 7
              break;
     f88:	19 c0       	rjmp	.+50     	; 0xfbc <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     f8a:	d7 01       	movw	r26, r14
     f8c:	18 96       	adiw	r26, 0x08	; 8
     f8e:	ed 91       	ld	r30, X+
     f90:	fc 91       	ld	r31, X
     f92:	19 97       	sbiw	r26, 0x09	; 9
              break;
     f94:	13 c0       	rjmp	.+38     	; 0xfbc <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     f96:	d7 01       	movw	r26, r14
     f98:	1a 96       	adiw	r26, 0x0a	; 10
     f9a:	ed 91       	ld	r30, X+
     f9c:	fc 91       	ld	r31, X
     f9e:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     fa2:	42 3f       	cpi	r20, 0xF2	; 242
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <midi_input_callbacks+0xf0>
     fa6:	74 c0       	rjmp	.+232    	; 0x1090 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
     fa8:	d7 01       	movw	r26, r14
     faa:	1c 96       	adiw	r26, 0x0c	; 12
     fac:	ed 91       	ld	r30, X+
     fae:	fc 91       	ld	r31, X
     fb0:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
     fb2:	30 97       	sbiw	r30, 0x00	; 0
     fb4:	41 f4       	brne	.+16     	; 0xfc6 <midi_input_callbacks+0x10e>
     fb6:	6c c0       	rjmp	.+216    	; 0x1090 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     fb8:	e0 e0       	ldi	r30, 0x00	; 0
     fba:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
     fbc:	30 97       	sbiw	r30, 0x00	; 0
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <midi_input_callbacks+0x10a>
     fc0:	67 c0       	rjmp	.+206    	; 0x1090 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
     fc2:	12 3f       	cpi	r17, 0xF2	; 242
     fc4:	31 f4       	brne	.+12     	; 0xfd2 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
     fc6:	2a 2d       	mov	r18, r10
     fc8:	4b 2d       	mov	r20, r11
     fca:	62 ef       	ldi	r22, 0xF2	; 242
     fcc:	c7 01       	movw	r24, r14
     fce:	09 95       	icall
     fd0:	6c c0       	rjmp	.+216    	; 0x10aa <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
     fd2:	2a 2d       	mov	r18, r10
     fd4:	4b 2d       	mov	r20, r11
     fd6:	61 2f       	mov	r22, r17
     fd8:	6f 70       	andi	r22, 0x0F	; 15
     fda:	c7 01       	movw	r24, r14
     fdc:	09 95       	icall
     fde:	65 c0       	rjmp	.+202    	; 0x10aa <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     fe0:	84 2f       	mov	r24, r20
     fe2:	80 7f       	andi	r24, 0xF0	; 240
     fe4:	80 3d       	cpi	r24, 0xD0	; 208
     fe6:	51 f0       	breq	.+20     	; 0xffc <midi_input_callbacks+0x144>
     fe8:	80 3f       	cpi	r24, 0xF0	; 240
     fea:	71 f0       	breq	.+28     	; 0x1008 <midi_input_callbacks+0x150>
     fec:	80 3c       	cpi	r24, 0xC0	; 192
     fee:	01 f5       	brne	.+64     	; 0x1030 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
     ff0:	d7 01       	movw	r26, r14
     ff2:	1e 96       	adiw	r26, 0x0e	; 14
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
     ffa:	1c c0       	rjmp	.+56     	; 0x1034 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
     ffc:	d7 01       	movw	r26, r14
     ffe:	50 96       	adiw	r26, 0x10	; 16
    1000:	ed 91       	ld	r30, X+
    1002:	fc 91       	ld	r31, X
    1004:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1006:	16 c0       	rjmp	.+44     	; 0x1034 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1008:	43 3f       	cpi	r20, 0xF3	; 243
    100a:	41 f4       	brne	.+16     	; 0x101c <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    100c:	d7 01       	movw	r26, r14
    100e:	52 96       	adiw	r26, 0x12	; 18
    1010:	ed 91       	ld	r30, X+
    1012:	fc 91       	ld	r31, X
    1014:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1016:	30 97       	sbiw	r30, 0x00	; 0
    1018:	99 f4       	brne	.+38     	; 0x1040 <midi_input_callbacks+0x188>
    101a:	3a c0       	rjmp	.+116    	; 0x1090 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    101c:	41 3f       	cpi	r20, 0xF1	; 241
    101e:	c1 f5       	brne	.+112    	; 0x1090 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1020:	d7 01       	movw	r26, r14
    1022:	54 96       	adiw	r26, 0x14	; 20
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    102a:	30 97       	sbiw	r30, 0x00	; 0
    102c:	49 f4       	brne	.+18     	; 0x1040 <midi_input_callbacks+0x188>
    102e:	30 c0       	rjmp	.+96     	; 0x1090 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1030:	e0 e0       	ldi	r30, 0x00	; 0
    1032:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	61 f1       	breq	.+88     	; 0x1090 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1038:	81 2f       	mov	r24, r17
    103a:	8d 7f       	andi	r24, 0xFD	; 253
    103c:	81 3f       	cpi	r24, 0xF1	; 241
    103e:	29 f4       	brne	.+10     	; 0x104a <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1040:	4b 2d       	mov	r20, r11
    1042:	61 2f       	mov	r22, r17
    1044:	c7 01       	movw	r24, r14
    1046:	09 95       	icall
    1048:	30 c0       	rjmp	.+96     	; 0x10aa <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    104a:	4b 2d       	mov	r20, r11
    104c:	61 2f       	mov	r22, r17
    104e:	6f 70       	andi	r22, 0x0F	; 15
    1050:	c7 01       	movw	r24, r14
    1052:	09 95       	icall
    1054:	2a c0       	rjmp	.+84     	; 0x10aa <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1056:	84 2f       	mov	r24, r20
    1058:	0e 94 c4 06 	call	0xd88	; 0xd88 <midi_is_realtime>
    105c:	88 23       	and	r24, r24
    105e:	31 f0       	breq	.+12     	; 0x106c <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    1060:	d7 01       	movw	r26, r14
    1062:	56 96       	adiw	r26, 0x16	; 22
    1064:	ed 91       	ld	r30, X+
    1066:	fc 91       	ld	r31, X
    1068:	57 97       	sbiw	r26, 0x17	; 23
    106a:	07 c0       	rjmp	.+14     	; 0x107a <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    106c:	16 3f       	cpi	r17, 0xF6	; 246
    106e:	81 f4       	brne	.+32     	; 0x1090 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    1070:	d7 01       	movw	r26, r14
    1072:	58 96       	adiw	r26, 0x18	; 24
    1074:	ed 91       	ld	r30, X+
    1076:	fc 91       	ld	r31, X
    1078:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    107a:	30 97       	sbiw	r30, 0x00	; 0
    107c:	49 f0       	breq	.+18     	; 0x1090 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    107e:	61 2f       	mov	r22, r17
    1080:	c7 01       	movw	r24, r14
    1082:	09 95       	icall
    1084:	12 c0       	rjmp	.+36     	; 0x10aa <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1086:	64 30       	cpi	r22, 0x04	; 4
    1088:	71 05       	cpc	r23, r1
    108a:	10 f0       	brcs	.+4      	; 0x1090 <midi_input_callbacks+0x1d8>
          cnt = 0;
    108c:	c1 2c       	mov	r12, r1
    108e:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1090:	d7 01       	movw	r26, r14
    1092:	5c 96       	adiw	r26, 0x1c	; 28
    1094:	ed 91       	ld	r30, X+
    1096:	fc 91       	ld	r31, X
    1098:	5d 97       	sbiw	r26, 0x1d	; 29
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	31 f0       	breq	.+12     	; 0x10aa <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    109e:	0a 2d       	mov	r16, r10
    10a0:	2b 2d       	mov	r18, r11
    10a2:	41 2f       	mov	r20, r17
    10a4:	b6 01       	movw	r22, r12
    10a6:	c7 01       	movw	r24, r14
    10a8:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    10aa:	d7 01       	movw	r26, r14
    10ac:	5e 96       	adiw	r26, 0x1e	; 30
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	5f 97       	sbiw	r26, 0x1f	; 31
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    10b8:	0a 2d       	mov	r16, r10
    10ba:	2b 2d       	mov	r18, r11
    10bc:	41 2f       	mov	r20, r17
    10be:	b6 01       	movw	r22, r12
    10c0:	c7 01       	movw	r24, r14
    10c2:	09 95       	icall
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	08 95       	ret

000010e0 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    10ee:	86 2f       	mov	r24, r22
    10f0:	0e 94 c4 06 	call	0xd88	; 0xd88 <midi_is_realtime>
    10f4:	88 23       	and	r24, r24
    10f6:	69 f0       	breq	.+26     	; 0x1112 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    10f8:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    10fe:	00 e0       	ldi	r16, 0x00	; 0
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	41 2f       	mov	r20, r17
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <midi_input_callbacks>
    device->input_state = state;
    110e:	fd a2       	std	Y+37, r15	; 0x25
    1110:	a4 c0       	rjmp	.+328    	; 0x125a <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1112:	81 2f       	mov	r24, r17
    1114:	0e 94 c0 06 	call	0xd80	; 0xd80 <midi_is_statusbyte>
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <midi_process_byte+0x3e>
    111c:	5d c0       	rjmp	.+186    	; 0x11d8 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    111e:	8d a1       	ldd	r24, Y+37	; 0x25
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	29 f0       	breq	.+10     	; 0x112e <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1124:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9f a3       	std	Y+39, r25	; 0x27
    112c:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    112e:	81 2f       	mov	r24, r17
    1130:	0e 94 ca 06 	call	0xd94	; 0xd94 <midi_packet_length>
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	31 f0       	breq	.+12     	; 0x1144 <midi_process_byte+0x64>
    1138:	b8 f0       	brcs	.+46     	; 0x1168 <midi_process_byte+0x88>
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	79 f0       	breq	.+30     	; 0x115c <midi_process_byte+0x7c>
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	81 f0       	breq	.+32     	; 0x1162 <midi_process_byte+0x82>
    1142:	46 c0       	rjmp	.+140    	; 0x11d0 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1148:	00 e0       	ldi	r16, 0x00	; 0
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	41 2f       	mov	r20, r17
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <midi_input_callbacks>
        device->input_state = IDLE;
    1158:	1d a2       	std	Y+37, r1	; 0x25
        break;
    115a:	7f c0       	rjmp	.+254    	; 0x125a <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1160:	7c c0       	rjmp	.+248    	; 0x125a <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	8d a3       	std	Y+37, r24	; 0x25
        break;
    1166:	79 c0       	rjmp	.+242    	; 0x125a <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    1168:	10 3f       	cpi	r17, 0xF0	; 240
    116a:	19 f0       	breq	.+6      	; 0x1172 <midi_process_byte+0x92>
    116c:	17 3f       	cpi	r17, 0xF7	; 247
    116e:	51 f0       	breq	.+20     	; 0x1184 <midi_process_byte+0xa4>
    1170:	2b c0       	rjmp	.+86     	; 0x11c8 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1176:	80 ef       	ldi	r24, 0xF0	; 240
    1178:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9f a3       	std	Y+39, r25	; 0x27
    1180:	8e a3       	std	Y+38, r24	; 0x26
            break;
    1182:	6b c0       	rjmp	.+214    	; 0x125a <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1184:	4e a1       	ldd	r20, Y+38	; 0x26
    1186:	5f a1       	ldd	r21, Y+39	; 0x27
    1188:	9a 01       	movw	r18, r20
    118a:	ab ea       	ldi	r26, 0xAB	; 171
    118c:	ba ea       	ldi	r27, 0xAA	; 170
    118e:	0e 94 84 09 	call	0x1308	; 0x1308 <__umulhisi3>
    1192:	96 95       	lsr	r25
    1194:	87 95       	ror	r24
    1196:	9c 01       	movw	r18, r24
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	fa 01       	movw	r30, r20
    11a2:	e8 1b       	sub	r30, r24
    11a4:	f9 0b       	sbc	r31, r25
    11a6:	ec 0f       	add	r30, r28
    11a8:	fd 1f       	adc	r31, r29
    11aa:	87 ef       	ldi	r24, 0xF7	; 247
    11ac:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    11ae:	ba 01       	movw	r22, r20
    11b0:	6f 5f       	subi	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	7f a3       	std	Y+39, r23	; 0x27
    11b6:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    11b8:	0c a1       	ldd	r16, Y+36	; 0x24
    11ba:	2b a1       	ldd	r18, Y+35	; 0x23
    11bc:	4a a1       	ldd	r20, Y+34	; 0x22
    11be:	ce 01       	movw	r24, r28
    11c0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    11c4:	1d a2       	std	Y+37, r1	; 0x25
            break;
    11c6:	49 c0       	rjmp	.+146    	; 0x125a <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    11c8:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    11ca:	1f a2       	std	Y+39, r1	; 0x27
    11cc:	1e a2       	std	Y+38, r1	; 0x26
    11ce:	45 c0       	rjmp	.+138    	; 0x125a <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    11d0:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    11d2:	1f a2       	std	Y+39, r1	; 0x27
    11d4:	1e a2       	std	Y+38, r1	; 0x26
        break;
    11d6:	41 c0       	rjmp	.+130    	; 0x125a <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    11d8:	ed a1       	ldd	r30, Y+37	; 0x25
    11da:	ee 23       	and	r30, r30
    11dc:	f1 f1       	breq	.+124    	; 0x125a <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    11de:	4e a1       	ldd	r20, Y+38	; 0x26
    11e0:	5f a1       	ldd	r21, Y+39	; 0x27
    11e2:	9a 01       	movw	r18, r20
    11e4:	ab ea       	ldi	r26, 0xAB	; 171
    11e6:	ba ea       	ldi	r27, 0xAA	; 170
    11e8:	0e 94 84 09 	call	0x1308	; 0x1308 <__umulhisi3>
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	9c 01       	movw	r18, r24
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	82 0f       	add	r24, r18
    11f8:	93 1f       	adc	r25, r19
    11fa:	9a 01       	movw	r18, r20
    11fc:	28 1b       	sub	r18, r24
    11fe:	39 0b       	sbc	r19, r25
    1200:	de 01       	movw	r26, r28
    1202:	a2 0f       	add	r26, r18
    1204:	b3 1f       	adc	r27, r19
    1206:	92 96       	adiw	r26, 0x22	; 34
    1208:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    120a:	ba 01       	movw	r22, r20
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	7f a3       	std	Y+39, r23	; 0x27
    1212:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1214:	21 30       	cpi	r18, 0x01	; 1
    1216:	31 05       	cpc	r19, r1
    1218:	89 f0       	breq	.+34     	; 0x123c <midi_process_byte+0x15c>
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	e9 f4       	brne	.+58     	; 0x125a <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1220:	0c a1       	ldd	r16, Y+36	; 0x24
    1222:	2b a1       	ldd	r18, Y+35	; 0x23
    1224:	4a a1       	ldd	r20, Y+34	; 0x22
    1226:	ce 01       	movw	r24, r28
    1228:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    122c:	8d a1       	ldd	r24, Y+37	; 0x25
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	a1 f0       	breq	.+40     	; 0x125a <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9f a3       	std	Y+39, r25	; 0x27
    1238:	8e a3       	std	Y+38, r24	; 0x26
    123a:	0f c0       	rjmp	.+30     	; 0x125a <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    123c:	e2 30       	cpi	r30, 0x02	; 2
    123e:	69 f4       	brne	.+26     	; 0x125a <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1240:	00 e0       	ldi	r16, 0x00	; 0
    1242:	2b a1       	ldd	r18, Y+35	; 0x23
    1244:	4a a1       	ldd	r20, Y+34	; 0x22
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    124c:	8d a1       	ldd	r24, Y+37	; 0x25
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	21 f0       	breq	.+8      	; 0x125a <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9f a3       	std	Y+39, r25	; 0x27
    1258:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	08 95       	ret

00001266 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1278:	dc 01       	movw	r26, r24
    127a:	90 96       	adiw	r26, 0x20	; 32
    127c:	ed 91       	ld	r30, X+
    127e:	fc 91       	ld	r31, X
    1280:	91 97       	sbiw	r26, 0x21	; 33
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	09 f0       	breq	.+2      	; 0x1288 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1286:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1288:	86 01       	movw	r16, r12
    128a:	08 51       	subi	r16, 0x18	; 24
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	c8 01       	movw	r24, r16
    1290:	0e 94 78 06 	call	0xcf0	; 0xcf0 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1294:	e8 2e       	mov	r14, r24
    1296:	f1 2c       	mov	r15, r1
    1298:	e1 14       	cp	r14, r1
    129a:	f1 04       	cpc	r15, r1
    129c:	91 f0       	breq	.+36     	; 0x12c2 <midi_device_process+0x5c>
    129e:	c0 e0       	ldi	r28, 0x00	; 0
    12a0:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	c8 01       	movw	r24, r16
    12a6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <bytequeue_get>
    12aa:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    12ac:	c6 01       	movw	r24, r12
    12ae:	0e 94 70 08 	call	0x10e0	; 0x10e0 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	c8 01       	movw	r24, r16
    12b6:	0e 94 a0 06 	call	0xd40	; 0xd40 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    12ba:	21 96       	adiw	r28, 0x01	; 1
    12bc:	ce 15       	cp	r28, r14
    12be:	df 05       	cpc	r29, r15
    12c0:	81 f7       	brne	.-32     	; 0x12a2 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	08 95       	ret

000012d4 <__divmodhi4>:
    12d4:	97 fb       	bst	r25, 7
    12d6:	07 2e       	mov	r0, r23
    12d8:	16 f4       	brtc	.+4      	; 0x12de <__divmodhi4+0xa>
    12da:	00 94       	com	r0
    12dc:	07 d0       	rcall	.+14     	; 0x12ec <__divmodhi4_neg1>
    12de:	77 fd       	sbrc	r23, 7
    12e0:	09 d0       	rcall	.+18     	; 0x12f4 <__divmodhi4_neg2>
    12e2:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodhi4>
    12e6:	07 fc       	sbrc	r0, 7
    12e8:	05 d0       	rcall	.+10     	; 0x12f4 <__divmodhi4_neg2>
    12ea:	3e f4       	brtc	.+14     	; 0x12fa <__divmodhi4_exit>

000012ec <__divmodhi4_neg1>:
    12ec:	90 95       	com	r25
    12ee:	81 95       	neg	r24
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	08 95       	ret

000012f4 <__divmodhi4_neg2>:
    12f4:	70 95       	com	r23
    12f6:	61 95       	neg	r22
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255

000012fa <__divmodhi4_exit>:
    12fa:	08 95       	ret

000012fc <__tablejump2__>:
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	05 90       	lpm	r0, Z+
    1302:	f4 91       	lpm	r31, Z
    1304:	e0 2d       	mov	r30, r0
    1306:	09 94       	ijmp

00001308 <__umulhisi3>:
    1308:	a2 9f       	mul	r26, r18
    130a:	b0 01       	movw	r22, r0
    130c:	b3 9f       	mul	r27, r19
    130e:	c0 01       	movw	r24, r0
    1310:	a3 9f       	mul	r26, r19
    1312:	70 0d       	add	r23, r0
    1314:	81 1d       	adc	r24, r1
    1316:	11 24       	eor	r1, r1
    1318:	91 1d       	adc	r25, r1
    131a:	b2 9f       	mul	r27, r18
    131c:	70 0d       	add	r23, r0
    131e:	81 1d       	adc	r24, r1
    1320:	11 24       	eor	r1, r1
    1322:	91 1d       	adc	r25, r1
    1324:	08 95       	ret

00001326 <__udivmodhi4>:
    1326:	aa 1b       	sub	r26, r26
    1328:	bb 1b       	sub	r27, r27
    132a:	51 e1       	ldi	r21, 0x11	; 17
    132c:	07 c0       	rjmp	.+14     	; 0x133c <__udivmodhi4_ep>

0000132e <__udivmodhi4_loop>:
    132e:	aa 1f       	adc	r26, r26
    1330:	bb 1f       	adc	r27, r27
    1332:	a6 17       	cp	r26, r22
    1334:	b7 07       	cpc	r27, r23
    1336:	10 f0       	brcs	.+4      	; 0x133c <__udivmodhi4_ep>
    1338:	a6 1b       	sub	r26, r22
    133a:	b7 0b       	sbc	r27, r23

0000133c <__udivmodhi4_ep>:
    133c:	88 1f       	adc	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	5a 95       	dec	r21
    1342:	a9 f7       	brne	.-22     	; 0x132e <__udivmodhi4_loop>
    1344:	80 95       	com	r24
    1346:	90 95       	com	r25
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	08 95       	ret

0000134e <_exit>:
    134e:	f8 94       	cli

00001350 <__stop_program>:
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <__stop_program>
