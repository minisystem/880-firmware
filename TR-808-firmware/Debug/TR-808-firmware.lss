
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000a56  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  00800180  00800180  00000b6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028bc  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000845  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a70  00000000  00000000  00003f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  000049a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bbe  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f3  00000000  00000000  00005bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000074c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	75 02       	muls	r23, r21
  b6:	73 02       	muls	r23, r19
  b8:	75 02       	muls	r23, r21
  ba:	77 02       	muls	r23, r23
  bc:	77 02       	muls	r23, r23
  be:	7d 02       	muls	r23, r29
  c0:	77 02       	muls	r23, r23
  c2:	7d 02       	muls	r23, r29
  c4:	7d 02       	muls	r23, r29
  c6:	7d 02       	muls	r23, r29
  c8:	7d 02       	muls	r23, r29
  ca:	7d 02       	muls	r23, r29
  cc:	77 02       	muls	r23, r23
  ce:	7d 02       	muls	r23, r29
  d0:	7d 02       	muls	r23, r29

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	e6 e5       	ldi	r30, 0x56	; 86
  e6:	fa e0       	ldi	r31, 0x0A	; 10
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	a0 38       	cpi	r26, 0x80	; 128
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e8       	ldi	r26, 0x80	; 128
  f8:	b1 e0       	ldi	r27, 0x01	; 1
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 37       	cpi	r26, 0x76	; 118
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
 108:	0c 94 29 05 	jmp	0xa52	; 0xa52 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <note_off_event>:
	//PORTC &= ~(1<<SPI_LED_LATCH);
	//PORTC |= (1<<SPI_LED_LATCH);	
		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 110:	08 95       	ret

00000112 <real_time_event>:

	//spi_data.byte4 = 0;
	//spi_data.byte6 = 0;		
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 112:	08 95       	ret

00000114 <spi_shift_byte>:
	
	};	

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 114:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 118:	ed ea       	ldi	r30, 0xAD	; 173
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <spi_shift_byte+0x8>
	return SPDR1;
 122:	80 91 ae 00 	lds	r24, 0x00AE
	
}
 126:	08 95       	ret

00000128 <note_on_event>:
void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	
	
	if (note < 16) {
 130:	40 31       	cpi	r20, 0x10	; 16
 132:	08 f0       	brcs	.+2      	; 0x136 <note_on_event+0xe>
 134:	93 c0       	rjmp	.+294    	; 0x25c <note_on_event+0x134>
		
		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 136:	04 2f       	mov	r16, r20
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	f8 01       	movw	r30, r16
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	a2 81       	ldd	r26, Z+2	; 0x02
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	a0 58       	subi	r26, 0x80	; 128
 152:	be 4f       	sbci	r27, 0xFE	; 254
 154:	9c 91       	ld	r25, X
 156:	83 81       	ldd	r24, Z+3	; 0x03
 158:	89 2b       	or	r24, r25
 15a:	8c 93       	st	X, r24
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 15c:	a6 81       	ldd	r26, Z+6	; 0x06
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	a0 58       	subi	r26, 0x80	; 128
 162:	be 4f       	sbci	r27, 0xFE	; 254
 164:	9c 91       	ld	r25, X
 166:	87 81       	ldd	r24, Z+7	; 0x07
 168:	89 2b       	or	r24, r25
 16a:	8c 93       	st	X, r24
		
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
 16c:	94 81       	ldd	r25, Z+4	; 0x04
 16e:	9f 3f       	cpi	r25, 0xFF	; 255
 170:	b1 f0       	breq	.+44     	; 0x19e <note_on_event+0x76>
			
			
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 172:	a0 e8       	ldi	r26, 0x80	; 128
 174:	b1 e0       	ldi	r27, 0x01	; 1
 176:	13 96       	adiw	r26, 0x03	; 3
 178:	2c 91       	ld	r18, X
 17a:	13 97       	sbiw	r26, 0x03	; 3
 17c:	f8 01       	movw	r30, r16
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	eb 5f       	subi	r30, 0xFB	; 251
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	80 81       	ld	r24, Z
 190:	81 70       	andi	r24, 0x01	; 1
 192:	81 95       	neg	r24
 194:	82 27       	eor	r24, r18
 196:	89 23       	and	r24, r25
 198:	82 27       	eor	r24, r18
 19a:	13 96       	adiw	r26, 0x03	; 3
 19c:	8c 93       	st	X, r24
			
		}
		
		PORTD |= 1<<TRIG;
 19e:	5d 9a       	sbi	0x0b, 5	; 11
		
		spi_shift_byte(spi_data[0]);
 1a0:	c0 e8       	ldi	r28, 0x80	; 128
 1a2:	d1 e0       	ldi	r29, 0x01	; 1
 1a4:	88 81       	ld	r24, Y
 1a6:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 1bc:	8c 81       	ldd	r24, Y+4	; 0x04
 1be:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 1c2:	8d 81       	ldd	r24, Y+5	; 0x05
 1c4:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 1c8:	8e 81       	ldd	r24, Y+6	; 0x06
 1ca:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 1ce:	8f 81       	ldd	r24, Y+7	; 0x07
 1d0:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 1d4:	88 85       	ldd	r24, Y+8	; 0x08
 1d6:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 1da:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 1dc:	43 9a       	sbi	0x08, 3	; 8
		
		PORTD &= ~(1<<TRIG);
 1de:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	8f e0       	ldi	r24, 0x0F	; 15
 1e2:	9e e0       	ldi	r25, 0x0E	; 14
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <note_on_event+0xbc>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <note_on_event+0xc2>
 1ea:	00 00       	nop
		
		_delay_us(900);
		
		spi_data[drum_hit[note].spi_byte_num] &= ~(drum_hit[note].trig_bit);
 1ec:	f8 01       	movw	r30, r16
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	a2 81       	ldd	r26, Z+2	; 0x02
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	a0 58       	subi	r26, 0x80	; 128
 204:	be 4f       	sbci	r27, 0xFE	; 254
 206:	83 81       	ldd	r24, Z+3	; 0x03
 208:	80 95       	com	r24
 20a:	9c 91       	ld	r25, X
 20c:	89 23       	and	r24, r25
 20e:	8c 93       	st	X, r24
		spi_data[drum_hit[note].spi_led_byte_num] &= ~(drum_hit[note].led_bit);
 210:	a6 81       	ldd	r26, Z+6	; 0x06
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	a0 58       	subi	r26, 0x80	; 128
 216:	be 4f       	sbci	r27, 0xFE	; 254
 218:	87 81       	ldd	r24, Z+7	; 0x07
 21a:	80 95       	com	r24
 21c:	9c 91       	ld	r25, X
 21e:	89 23       	and	r24, r25
 220:	8c 93       	st	X, r24
		
		spi_shift_byte(spi_data[0]);
 222:	88 81       	ld	r24, Y
 224:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 23a:	8c 81       	ldd	r24, Y+4	; 0x04
 23c:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 246:	8e 81       	ldd	r24, Y+6	; 0x06
 248:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 24c:	8f 81       	ldd	r24, Y+7	; 0x07
 24e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);		
 252:	88 85       	ldd	r24, Y+8	; 0x08
 254:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 258:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 25a:	43 9a       	sbi	0x08, 3	; 8
	//spi_shift_byte(0x00);
	//spi_shift_byte(0x00);
	//PORTC &= ~(1<<SPI_LED_LATCH);
	//PORTC |= (1<<SPI_LED_LATCH);	
		
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 26c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 270:	88 e9       	ldi	r24, 0x98	; 152
 272:	80 93 c1 00 	sts	0x00C1, r24
 276:	08 95       	ret

00000278 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	1f 92       	push	r1
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 2a4:	80 91 c6 00 	lds	r24, 0x00C6
 2a8:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 2aa:	ae 01       	movw	r20, r28
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	89 e8       	ldi	r24, 0x89	; 137
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 bc 02 	call	0x578	; 0x578 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 2e2:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 2e4:	8d b1       	in	r24, 0x0d	; 13
 2e6:	8c 60       	ori	r24, 0x0C	; 12
 2e8:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 2ea:	87 b1       	in	r24, 0x07	; 7
 2ec:	8e 60       	ori	r24, 0x0E	; 14
 2ee:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 2f0:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 2f2:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	81 7f       	andi	r24, 0xF1	; 241
 2f8:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 2fa:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 2fc:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER	
 2fe:	80 e5       	ldi	r24, 0x50	; 80
 300:	80 93 ac 00 	sts	0x00AC, r24
	

	
	spi_shift_byte(0x00);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(1<<ACCENT_LED);
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(0x00);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	
	
	
	PORTC &= ~(1<<SPI_LED_LATCH);
 33a:	43 98       	cbi	0x08, 3	; 8
	PORTC |= (1<<SPI_LED_LATCH);
 33c:	43 9a       	sbi	0x08, 3	; 8
	
	//PORTB |= (1<<SPI_EN); //disable SPI for testing
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 33e:	89 e8       	ldi	r24, 0x89	; 137
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 8b 02 	call	0x516	; 0x516 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 346:	64 e9       	ldi	r22, 0x94	; 148
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	89 e8       	ldi	r24, 0x89	; 137
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 352:	68 e8       	ldi	r22, 0x88	; 136
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	89 e8       	ldi	r24, 0x89	; 137
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 83 02 	call	0x506	; 0x506 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 35e:	69 e8       	ldi	r22, 0x89	; 137
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	89 e8       	ldi	r24, 0x89	; 137
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 87 02 	call	0x50e	; 0x50e <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 36a:	0e 94 33 01 	call	0x266	; 0x266 <setup_midi_usart>
	
	sei(); //enable global interrupts	
 36e:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work		
 370:	89 e8       	ldi	r24, 0x89	; 137
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 b5 04 	call	0x96a	; 0x96a <midi_device_process>
	//PORTC &= ~(1<<SPI_LED_LATCH);
	//PORTC |= (1<<SPI_LED_LATCH);	
	//
	//_delay_ms(1000);	
    //}
	}
 378:	fb cf       	rjmp	.-10     	; 0x370 <main+0x8e>

0000037a <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 37a:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 37c:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 37e:	74 83       	std	Z+4, r23	; 0x04
 380:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 382:	11 82       	std	Z+1, r1	; 0x01
 384:	10 82       	st	Z, r1
 386:	08 95       	ret

00000388 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
 394:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 396:	0e 94 3d 02 	call	0x47a	; 0x47a <store_and_clear_interrupt>
 39a:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 39c:	f9 80       	ldd	r15, Y+1	; 0x01
 39e:	4f 2d       	mov	r20, r15
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	ca 01       	movw	r24, r20
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	2a 81       	ldd	r18, Y+2	; 0x02
 3a8:	62 2f       	mov	r22, r18
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 3b0:	28 81       	ld	r18, Y
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	82 17       	cp	r24, r18
 3b6:	93 07       	cpc	r25, r19
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 3ba:	81 2f       	mov	r24, r17
 3bc:	0e 94 40 02 	call	0x480	; 0x480 <restore_interrupt_setting>
      return false;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 3c4:	eb 81       	ldd	r30, Y+3	; 0x03
 3c6:	fc 81       	ldd	r31, Y+4	; 0x04
 3c8:	ef 0d       	add	r30, r15
 3ca:	f1 1d       	adc	r31, r1
 3cc:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	c9 01       	movw	r24, r18
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	6a 81       	ldd	r22, Y+2	; 0x02
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 3de:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 3e0:	81 2f       	mov	r24, r17
 3e2:	0e 94 40 02 	call	0x480	; 0x480 <restore_interrupt_setting>
      return true;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	08 95       	ret

000003f4 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 3fa:	0e 94 3d 02 	call	0x47a	; 0x47a <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 3fe:	39 81       	ldd	r19, Y+1	; 0x01
 400:	28 81       	ld	r18, Y
 402:	32 17       	cp	r19, r18
 404:	18 f0       	brcs	.+6      	; 0x40c <bytequeue_length+0x18>
      len = queue->end - queue->start;
 406:	c3 2f       	mov	r28, r19
 408:	c2 1b       	sub	r28, r18
 40a:	04 c0       	rjmp	.+8      	; 0x414 <bytequeue_length+0x20>
 40c:	9a 81       	ldd	r25, Y+2	; 0x02
 40e:	c3 2f       	mov	r28, r19
 410:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 412:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 414:	0e 94 40 02 	call	0x480	; 0x480 <restore_interrupt_setting>
   return len;
}
 418:	8c 2f       	mov	r24, r28
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 420:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 422:	80 81       	ld	r24, Z
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	9b 01       	movw	r18, r22
 428:	28 0f       	add	r18, r24
 42a:	31 1d       	adc	r19, r1
 42c:	c9 01       	movw	r24, r18
 42e:	62 81       	ldd	r22, Z+2	; 0x02
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 436:	03 80       	ldd	r0, Z+3	; 0x03
 438:	f4 81       	ldd	r31, Z+4	; 0x04
 43a:	e0 2d       	mov	r30, r0
 43c:	e8 0f       	add	r30, r24
 43e:	f9 1f       	adc	r31, r25
}
 440:	80 81       	ld	r24, Z
 442:	08 95       	ret

00000444 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
 44c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 44e:	0e 94 3d 02 	call	0x47a	; 0x47a <store_and_clear_interrupt>
 452:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 454:	88 81       	ld	r24, Y
 456:	21 2f       	mov	r18, r17
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	68 0f       	add	r22, r24
 45e:	71 1d       	adc	r23, r1
 460:	cb 01       	movw	r24, r22
 462:	6a 81       	ldd	r22, Y+2	; 0x02
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
 46a:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 46c:	84 2f       	mov	r24, r20
 46e:	0e 94 40 02 	call	0x480	; 0x480 <restore_interrupt_setting>
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	08 95       	ret

0000047a <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 47a:	8f b7       	in	r24, 0x3f	; 63
   cli();
 47c:	f8 94       	cli
   return sreg;
}
 47e:	08 95       	ret

00000480 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 480:	8f bf       	out	0x3f, r24	; 63
 482:	08 95       	ret

00000484 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 484:	88 1f       	adc	r24, r24
 486:	88 27       	eor	r24, r24
 488:	88 1f       	adc	r24, r24
 48a:	08 95       	ret

0000048c <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	88 3f       	cpi	r24, 0xF8	; 248
 490:	08 f4       	brcc	.+2      	; 0x494 <midi_is_realtime+0x8>
 492:	90 e0       	ldi	r25, 0x00	; 0
}
 494:	89 2f       	mov	r24, r25
 496:	08 95       	ret

00000498 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 498:	98 2f       	mov	r25, r24
 49a:	90 7f       	andi	r25, 0xF0	; 240
 49c:	90 3c       	cpi	r25, 0xC0	; 192
 49e:	b1 f0       	breq	.+44     	; 0x4cc <midi_packet_length+0x34>
 4a0:	58 f4       	brcc	.+22     	; 0x4b8 <midi_packet_length+0x20>
 4a2:	90 39       	cpi	r25, 0x90	; 144
 4a4:	41 f1       	breq	.+80     	; 0x4f6 <midi_packet_length+0x5e>
 4a6:	18 f4       	brcc	.+6      	; 0x4ae <midi_packet_length+0x16>
 4a8:	90 38       	cpi	r25, 0x80	; 128
 4aa:	19 f5       	brne	.+70     	; 0x4f2 <midi_packet_length+0x5a>
 4ac:	24 c0       	rjmp	.+72     	; 0x4f6 <midi_packet_length+0x5e>
 4ae:	90 3a       	cpi	r25, 0xA0	; 160
 4b0:	11 f1       	breq	.+68     	; 0x4f6 <midi_packet_length+0x5e>
 4b2:	90 3b       	cpi	r25, 0xB0	; 176
 4b4:	f1 f4       	brne	.+60     	; 0x4f2 <midi_packet_length+0x5a>
 4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <midi_packet_length+0x5e>
 4b8:	90 3e       	cpi	r25, 0xE0	; 224
 4ba:	e9 f0       	breq	.+58     	; 0x4f6 <midi_packet_length+0x5e>
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <midi_packet_length+0x2c>
 4be:	90 3d       	cpi	r25, 0xD0	; 208
 4c0:	29 f0       	breq	.+10     	; 0x4cc <midi_packet_length+0x34>
 4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <midi_packet_length+0x5a>
 4c4:	90 3f       	cpi	r25, 0xF0	; 240
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <midi_packet_length+0x38>
 4c8:	93 3f       	cpi	r25, 0xF3	; 243
 4ca:	99 f4       	brne	.+38     	; 0x4f2 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	08 95       	ret
      case 0xF0:
         switch(status) {
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	fc 01       	movw	r30, r24
 4d4:	e1 5f       	subi	r30, 0xF1	; 241
 4d6:	f1 09       	sbc	r31, r1
 4d8:	ef 30       	cpi	r30, 0x0F	; 15
 4da:	f1 05       	cpc	r31, r1
 4dc:	40 f4       	brcc	.+16     	; 0x4ee <midi_packet_length+0x56>
 4de:	e6 5a       	subi	r30, 0xA6	; 166
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	08 95       	ret
         }
      default:
         return UNDEFINED;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 4fc:	08 95       	ret

000004fe <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 4fe:	fc 01       	movw	r30, r24
 500:	75 83       	std	Z+5, r23	; 0x05
 502:	64 83       	std	Z+4, r22	; 0x04
 504:	08 95       	ret

00000506 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 506:	fc 01       	movw	r30, r24
 508:	77 83       	std	Z+7, r23	; 0x07
 50a:	66 83       	std	Z+6, r22	; 0x06
 50c:	08 95       	ret

0000050e <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 50e:	fc 01       	movw	r30, r24
 510:	77 8b       	std	Z+23, r23	; 0x17
 512:	66 8b       	std	Z+22, r22	; 0x16
 514:	08 95       	ret

00000516 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 51c:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 51e:	1f a2       	std	Y+39, r1	; 0x27
 520:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 522:	bc 01       	movw	r22, r24
 524:	68 5d       	subi	r22, 0xD8	; 216
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	40 ec       	ldi	r20, 0xC0	; 192
 52a:	88 51       	subi	r24, 0x18	; 24
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	0e 94 bd 01 	call	0x37a	; 0x37a <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 532:	1b 82       	std	Y+3, r1	; 0x03
 534:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 536:	1d 82       	std	Y+5, r1	; 0x05
 538:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 53a:	1f 82       	std	Y+7, r1	; 0x07
 53c:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 53e:	19 86       	std	Y+9, r1	; 0x09
 540:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 542:	1b 86       	std	Y+11, r1	; 0x0b
 544:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 546:	1d 86       	std	Y+13, r1	; 0x0d
 548:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 54a:	1f 86       	std	Y+15, r1	; 0x0f
 54c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 54e:	19 8a       	std	Y+17, r1	; 0x11
 550:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 552:	1b 8a       	std	Y+19, r1	; 0x13
 554:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 556:	1d 8a       	std	Y+21, r1	; 0x15
 558:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 55a:	1f 8a       	std	Y+23, r1	; 0x17
 55c:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 55e:	19 8e       	std	Y+25, r1	; 0x19
 560:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 562:	1b 8e       	std	Y+27, r1	; 0x1b
 564:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 566:	1d 8e       	std	Y+29, r1	; 0x1d
 568:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 56a:	1f 8e       	std	Y+31, r1	; 0x1f
 56c:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 56e:	19 a2       	std	Y+33, r1	; 0x21
 570:	18 a2       	std	Y+32, r1	; 0x20
}
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 584:	66 23       	and	r22, r22
 586:	99 f0       	breq	.+38     	; 0x5ae <midi_device_input+0x36>
 588:	ea 01       	movw	r28, r20
 58a:	61 50       	subi	r22, 0x01	; 1
 58c:	06 2f       	mov	r16, r22
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	0f 5f       	subi	r16, 0xFF	; 255
 592:	1f 4f       	sbci	r17, 0xFF	; 255
 594:	04 0f       	add	r16, r20
 596:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 598:	7c 01       	movw	r14, r24
 59a:	28 ee       	ldi	r18, 0xE8	; 232
 59c:	e2 0e       	add	r14, r18
 59e:	f1 1c       	adc	r15, r1
 5a0:	69 91       	ld	r22, Y+
 5a2:	c7 01       	movw	r24, r14
 5a4:	0e 94 c4 01 	call	0x388	; 0x388 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 5a8:	c0 17       	cp	r28, r16
 5aa:	d1 07       	cpc	r29, r17
 5ac:	c9 f7       	brne	.-14     	; 0x5a0 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	08 95       	ret

000005bc <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 5bc:	af 92       	push	r10
 5be:	bf 92       	push	r11
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <midi_input_callbacks+0x16>
 5d2:	1f 92       	push	r1
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	7c 01       	movw	r14, r24
 5da:	6b 01       	movw	r12, r22
 5dc:	14 2f       	mov	r17, r20
 5de:	b2 2e       	mov	r11, r18
 5e0:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 5e2:	dc 01       	movw	r26, r24
 5e4:	95 96       	adiw	r26, 0x25	; 37
 5e6:	8c 91       	ld	r24, X
 5e8:	95 97       	sbiw	r26, 0x25	; 37
 5ea:	84 30       	cpi	r24, 0x04	; 4
 5ec:	11 f5       	brne	.+68     	; 0x632 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 5ee:	5a 96       	adiw	r26, 0x1a	; 26
 5f0:	ed 91       	ld	r30, X+
 5f2:	fc 91       	ld	r31, X
 5f4:	5b 97       	sbiw	r26, 0x1b	; 27
 5f6:	30 97       	sbiw	r30, 0x00	; 0
 5f8:	09 f4       	brne	.+2      	; 0x5fc <midi_input_callbacks+0x40>
 5fa:	cc c0       	rjmp	.+408    	; 0x794 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 5fc:	9b 01       	movw	r18, r22
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	31 09       	sbc	r19, r1
 602:	ab ea       	ldi	r26, 0xAB	; 171
 604:	ba ea       	ldi	r27, 0xAA	; 170
 606:	0e 94 06 05 	call	0xa0c	; 0xa0c <__umulhisi3>
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	9c 01       	movw	r18, r24
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	82 0f       	add	r24, r18
 616:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 618:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 61a:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 61c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 61e:	4c 2d       	mov	r20, r12
 620:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 622:	9e 01       	movw	r18, r28
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	68 2f       	mov	r22, r24
 62a:	79 2f       	mov	r23, r25
 62c:	c7 01       	movw	r24, r14
 62e:	09 95       	icall
 630:	be c0       	rjmp	.+380    	; 0x7ae <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
 632:	62 30       	cpi	r22, 0x02	; 2
 634:	71 05       	cpc	r23, r1
 636:	09 f4       	brne	.+2      	; 0x63a <midi_input_callbacks+0x7e>
 638:	55 c0       	rjmp	.+170    	; 0x6e4 <midi_input_callbacks+0x128>
 63a:	63 30       	cpi	r22, 0x03	; 3
 63c:	71 05       	cpc	r23, r1
 63e:	29 f0       	breq	.+10     	; 0x64a <midi_input_callbacks+0x8e>
 640:	61 30       	cpi	r22, 0x01	; 1
 642:	71 05       	cpc	r23, r1
 644:	09 f0       	breq	.+2      	; 0x648 <midi_input_callbacks+0x8c>
 646:	a1 c0       	rjmp	.+322    	; 0x78a <midi_input_callbacks+0x1ce>
 648:	88 c0       	rjmp	.+272    	; 0x75a <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 64a:	84 2f       	mov	r24, r20
 64c:	80 7f       	andi	r24, 0xF0	; 240
 64e:	80 3a       	cpi	r24, 0xA0	; 160
 650:	f1 f0       	breq	.+60     	; 0x68e <midi_input_callbacks+0xd2>
 652:	28 f4       	brcc	.+10     	; 0x65e <midi_input_callbacks+0xa2>
 654:	80 38       	cpi	r24, 0x80	; 128
 656:	a9 f0       	breq	.+42     	; 0x682 <midi_input_callbacks+0xc6>
 658:	80 39       	cpi	r24, 0x90	; 144
 65a:	69 f0       	breq	.+26     	; 0x676 <midi_input_callbacks+0xba>
 65c:	2f c0       	rjmp	.+94     	; 0x6bc <midi_input_callbacks+0x100>
 65e:	80 3e       	cpi	r24, 0xE0	; 224
 660:	e1 f0       	breq	.+56     	; 0x69a <midi_input_callbacks+0xde>
 662:	80 3f       	cpi	r24, 0xF0	; 240
 664:	01 f1       	breq	.+64     	; 0x6a6 <midi_input_callbacks+0xea>
 666:	80 3b       	cpi	r24, 0xB0	; 176
 668:	49 f5       	brne	.+82     	; 0x6bc <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 66a:	d7 01       	movw	r26, r14
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	ed 91       	ld	r30, X+
 670:	fc 91       	ld	r31, X
 672:	13 97       	sbiw	r26, 0x03	; 3
              break;
 674:	25 c0       	rjmp	.+74     	; 0x6c0 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 676:	d7 01       	movw	r26, r14
 678:	14 96       	adiw	r26, 0x04	; 4
 67a:	ed 91       	ld	r30, X+
 67c:	fc 91       	ld	r31, X
 67e:	15 97       	sbiw	r26, 0x05	; 5
              break;
 680:	1f c0       	rjmp	.+62     	; 0x6c0 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 682:	d7 01       	movw	r26, r14
 684:	16 96       	adiw	r26, 0x06	; 6
 686:	ed 91       	ld	r30, X+
 688:	fc 91       	ld	r31, X
 68a:	17 97       	sbiw	r26, 0x07	; 7
              break;
 68c:	19 c0       	rjmp	.+50     	; 0x6c0 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 68e:	d7 01       	movw	r26, r14
 690:	18 96       	adiw	r26, 0x08	; 8
 692:	ed 91       	ld	r30, X+
 694:	fc 91       	ld	r31, X
 696:	19 97       	sbiw	r26, 0x09	; 9
              break;
 698:	13 c0       	rjmp	.+38     	; 0x6c0 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 69a:	d7 01       	movw	r26, r14
 69c:	1a 96       	adiw	r26, 0x0a	; 10
 69e:	ed 91       	ld	r30, X+
 6a0:	fc 91       	ld	r31, X
 6a2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 6a6:	42 3f       	cpi	r20, 0xF2	; 242
 6a8:	09 f0       	breq	.+2      	; 0x6ac <midi_input_callbacks+0xf0>
 6aa:	74 c0       	rjmp	.+232    	; 0x794 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
 6ac:	d7 01       	movw	r26, r14
 6ae:	1c 96       	adiw	r26, 0x0c	; 12
 6b0:	ed 91       	ld	r30, X+
 6b2:	fc 91       	ld	r31, X
 6b4:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 6b6:	30 97       	sbiw	r30, 0x00	; 0
 6b8:	41 f4       	brne	.+16     	; 0x6ca <midi_input_callbacks+0x10e>
 6ba:	6c c0       	rjmp	.+216    	; 0x794 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 6bc:	e0 e0       	ldi	r30, 0x00	; 0
 6be:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 6c0:	30 97       	sbiw	r30, 0x00	; 0
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <midi_input_callbacks+0x10a>
 6c4:	67 c0       	rjmp	.+206    	; 0x794 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 6c6:	12 3f       	cpi	r17, 0xF2	; 242
 6c8:	31 f4       	brne	.+12     	; 0x6d6 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 6ca:	2a 2d       	mov	r18, r10
 6cc:	4b 2d       	mov	r20, r11
 6ce:	62 ef       	ldi	r22, 0xF2	; 242
 6d0:	c7 01       	movw	r24, r14
 6d2:	09 95       	icall
 6d4:	6c c0       	rjmp	.+216    	; 0x7ae <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 6d6:	2a 2d       	mov	r18, r10
 6d8:	4b 2d       	mov	r20, r11
 6da:	61 2f       	mov	r22, r17
 6dc:	6f 70       	andi	r22, 0x0F	; 15
 6de:	c7 01       	movw	r24, r14
 6e0:	09 95       	icall
 6e2:	65 c0       	rjmp	.+202    	; 0x7ae <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 6e4:	84 2f       	mov	r24, r20
 6e6:	80 7f       	andi	r24, 0xF0	; 240
 6e8:	80 3d       	cpi	r24, 0xD0	; 208
 6ea:	51 f0       	breq	.+20     	; 0x700 <midi_input_callbacks+0x144>
 6ec:	80 3f       	cpi	r24, 0xF0	; 240
 6ee:	71 f0       	breq	.+28     	; 0x70c <midi_input_callbacks+0x150>
 6f0:	80 3c       	cpi	r24, 0xC0	; 192
 6f2:	01 f5       	brne	.+64     	; 0x734 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 6f4:	d7 01       	movw	r26, r14
 6f6:	1e 96       	adiw	r26, 0x0e	; 14
 6f8:	ed 91       	ld	r30, X+
 6fa:	fc 91       	ld	r31, X
 6fc:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 6fe:	1c c0       	rjmp	.+56     	; 0x738 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 700:	d7 01       	movw	r26, r14
 702:	50 96       	adiw	r26, 0x10	; 16
 704:	ed 91       	ld	r30, X+
 706:	fc 91       	ld	r31, X
 708:	51 97       	sbiw	r26, 0x11	; 17
              break;
 70a:	16 c0       	rjmp	.+44     	; 0x738 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 70c:	43 3f       	cpi	r20, 0xF3	; 243
 70e:	41 f4       	brne	.+16     	; 0x720 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
 710:	d7 01       	movw	r26, r14
 712:	52 96       	adiw	r26, 0x12	; 18
 714:	ed 91       	ld	r30, X+
 716:	fc 91       	ld	r31, X
 718:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 71a:	30 97       	sbiw	r30, 0x00	; 0
 71c:	99 f4       	brne	.+38     	; 0x744 <midi_input_callbacks+0x188>
 71e:	3a c0       	rjmp	.+116    	; 0x794 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 720:	41 3f       	cpi	r20, 0xF1	; 241
 722:	c1 f5       	brne	.+112    	; 0x794 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
 724:	d7 01       	movw	r26, r14
 726:	54 96       	adiw	r26, 0x14	; 20
 728:	ed 91       	ld	r30, X+
 72a:	fc 91       	ld	r31, X
 72c:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 72e:	30 97       	sbiw	r30, 0x00	; 0
 730:	49 f4       	brne	.+18     	; 0x744 <midi_input_callbacks+0x188>
 732:	30 c0       	rjmp	.+96     	; 0x794 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 734:	e0 e0       	ldi	r30, 0x00	; 0
 736:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 738:	30 97       	sbiw	r30, 0x00	; 0
 73a:	61 f1       	breq	.+88     	; 0x794 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 73c:	81 2f       	mov	r24, r17
 73e:	8d 7f       	andi	r24, 0xFD	; 253
 740:	81 3f       	cpi	r24, 0xF1	; 241
 742:	29 f4       	brne	.+10     	; 0x74e <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
 744:	4b 2d       	mov	r20, r11
 746:	61 2f       	mov	r22, r17
 748:	c7 01       	movw	r24, r14
 74a:	09 95       	icall
 74c:	30 c0       	rjmp	.+96     	; 0x7ae <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
 74e:	4b 2d       	mov	r20, r11
 750:	61 2f       	mov	r22, r17
 752:	6f 70       	andi	r22, 0x0F	; 15
 754:	c7 01       	movw	r24, r14
 756:	09 95       	icall
 758:	2a c0       	rjmp	.+84     	; 0x7ae <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 75a:	84 2f       	mov	r24, r20
 75c:	0e 94 46 02 	call	0x48c	; 0x48c <midi_is_realtime>
 760:	88 23       	and	r24, r24
 762:	31 f0       	breq	.+12     	; 0x770 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
 764:	d7 01       	movw	r26, r14
 766:	56 96       	adiw	r26, 0x16	; 22
 768:	ed 91       	ld	r30, X+
 76a:	fc 91       	ld	r31, X
 76c:	57 97       	sbiw	r26, 0x17	; 23
 76e:	07 c0       	rjmp	.+14     	; 0x77e <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
 770:	16 3f       	cpi	r17, 0xF6	; 246
 772:	81 f4       	brne	.+32     	; 0x794 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
 774:	d7 01       	movw	r26, r14
 776:	58 96       	adiw	r26, 0x18	; 24
 778:	ed 91       	ld	r30, X+
 77a:	fc 91       	ld	r31, X
 77c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 77e:	30 97       	sbiw	r30, 0x00	; 0
 780:	49 f0       	breq	.+18     	; 0x794 <midi_input_callbacks+0x1d8>
            func(device, byte0);
 782:	61 2f       	mov	r22, r17
 784:	c7 01       	movw	r24, r14
 786:	09 95       	icall
 788:	12 c0       	rjmp	.+36     	; 0x7ae <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 78a:	64 30       	cpi	r22, 0x04	; 4
 78c:	71 05       	cpc	r23, r1
 78e:	10 f0       	brcs	.+4      	; 0x794 <midi_input_callbacks+0x1d8>
          cnt = 0;
 790:	c1 2c       	mov	r12, r1
 792:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 794:	d7 01       	movw	r26, r14
 796:	5c 96       	adiw	r26, 0x1c	; 28
 798:	ed 91       	ld	r30, X+
 79a:	fc 91       	ld	r31, X
 79c:	5d 97       	sbiw	r26, 0x1d	; 29
 79e:	30 97       	sbiw	r30, 0x00	; 0
 7a0:	31 f0       	breq	.+12     	; 0x7ae <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 7a2:	0a 2d       	mov	r16, r10
 7a4:	2b 2d       	mov	r18, r11
 7a6:	41 2f       	mov	r20, r17
 7a8:	b6 01       	movw	r22, r12
 7aa:	c7 01       	movw	r24, r14
 7ac:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 7ae:	d7 01       	movw	r26, r14
 7b0:	5e 96       	adiw	r26, 0x1e	; 30
 7b2:	ed 91       	ld	r30, X+
 7b4:	fc 91       	ld	r31, X
 7b6:	5f 97       	sbiw	r26, 0x1f	; 31
 7b8:	30 97       	sbiw	r30, 0x00	; 0
 7ba:	31 f0       	breq	.+12     	; 0x7c8 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 7bc:	0a 2d       	mov	r16, r10
 7be:	2b 2d       	mov	r18, r11
 7c0:	41 2f       	mov	r20, r17
 7c2:	b6 01       	movw	r22, r12
 7c4:	c7 01       	movw	r24, r14
 7c6:	09 95       	icall
}
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	df 90       	pop	r13
 7dc:	cf 90       	pop	r12
 7de:	bf 90       	pop	r11
 7e0:	af 90       	pop	r10
 7e2:	08 95       	ret

000007e4 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 7e4:	ff 92       	push	r15
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	ec 01       	movw	r28, r24
 7f0:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 7f2:	86 2f       	mov	r24, r22
 7f4:	0e 94 46 02 	call	0x48c	; 0x48c <midi_is_realtime>
 7f8:	88 23       	and	r24, r24
 7fa:	69 f0       	breq	.+26     	; 0x816 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 7fc:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 802:	00 e0       	ldi	r16, 0x00	; 0
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	41 2f       	mov	r20, r17
 808:	61 e0       	ldi	r22, 0x01	; 1
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 de 02 	call	0x5bc	; 0x5bc <midi_input_callbacks>
    device->input_state = state;
 812:	fd a2       	std	Y+37, r15	; 0x25
 814:	a4 c0       	rjmp	.+328    	; 0x95e <__stack+0x5f>
  } else if (midi_is_statusbyte(input)) {
 816:	81 2f       	mov	r24, r17
 818:	0e 94 42 02 	call	0x484	; 0x484 <midi_is_statusbyte>
 81c:	88 23       	and	r24, r24
 81e:	09 f4       	brne	.+2      	; 0x822 <midi_process_byte+0x3e>
 820:	5d c0       	rjmp	.+186    	; 0x8dc <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 822:	8d a1       	ldd	r24, Y+37	; 0x25
 824:	84 30       	cpi	r24, 0x04	; 4
 826:	29 f0       	breq	.+10     	; 0x832 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
 828:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	9f a3       	std	Y+39, r25	; 0x27
 830:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 832:	81 2f       	mov	r24, r17
 834:	0e 94 4c 02 	call	0x498	; 0x498 <midi_packet_length>
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	31 f0       	breq	.+12     	; 0x848 <midi_process_byte+0x64>
 83c:	b8 f0       	brcs	.+46     	; 0x86c <midi_process_byte+0x88>
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	79 f0       	breq	.+30     	; 0x860 <midi_process_byte+0x7c>
 842:	83 30       	cpi	r24, 0x03	; 3
 844:	81 f0       	breq	.+32     	; 0x866 <midi_process_byte+0x82>
 846:	46 c0       	rjmp	.+140    	; 0x8d4 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 84c:	00 e0       	ldi	r16, 0x00	; 0
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	41 2f       	mov	r20, r17
 852:	61 e0       	ldi	r22, 0x01	; 1
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	ce 01       	movw	r24, r28
 858:	0e 94 de 02 	call	0x5bc	; 0x5bc <midi_input_callbacks>
        device->input_state = IDLE;
 85c:	1d a2       	std	Y+37, r1	; 0x25
        break;
 85e:	7f c0       	rjmp	.+254    	; 0x95e <__stack+0x5f>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	8d a3       	std	Y+37, r24	; 0x25
        break;
 864:	7c c0       	rjmp	.+248    	; 0x95e <__stack+0x5f>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	8d a3       	std	Y+37, r24	; 0x25
        break;
 86a:	79 c0       	rjmp	.+242    	; 0x95e <__stack+0x5f>
      case UNDEFINED:
        switch(input) {
 86c:	10 3f       	cpi	r17, 0xF0	; 240
 86e:	19 f0       	breq	.+6      	; 0x876 <midi_process_byte+0x92>
 870:	17 3f       	cpi	r17, 0xF7	; 247
 872:	51 f0       	breq	.+20     	; 0x888 <midi_process_byte+0xa4>
 874:	2b c0       	rjmp	.+86     	; 0x8cc <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 876:	84 e0       	ldi	r24, 0x04	; 4
 878:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 87a:	80 ef       	ldi	r24, 0xF0	; 240
 87c:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	9f a3       	std	Y+39, r25	; 0x27
 884:	8e a3       	std	Y+38, r24	; 0x26
            break;
 886:	6b c0       	rjmp	.+214    	; 0x95e <__stack+0x5f>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 888:	4e a1       	ldd	r20, Y+38	; 0x26
 88a:	5f a1       	ldd	r21, Y+39	; 0x27
 88c:	9a 01       	movw	r18, r20
 88e:	ab ea       	ldi	r26, 0xAB	; 171
 890:	ba ea       	ldi	r27, 0xAA	; 170
 892:	0e 94 06 05 	call	0xa0c	; 0xa0c <__umulhisi3>
 896:	96 95       	lsr	r25
 898:	87 95       	ror	r24
 89a:	9c 01       	movw	r18, r24
 89c:	22 0f       	add	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	82 0f       	add	r24, r18
 8a2:	93 1f       	adc	r25, r19
 8a4:	fa 01       	movw	r30, r20
 8a6:	e8 1b       	sub	r30, r24
 8a8:	f9 0b       	sbc	r31, r25
 8aa:	ec 0f       	add	r30, r28
 8ac:	fd 1f       	adc	r31, r29
 8ae:	87 ef       	ldi	r24, 0xF7	; 247
 8b0:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 8b2:	ba 01       	movw	r22, r20
 8b4:	6f 5f       	subi	r22, 0xFF	; 255
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	7f a3       	std	Y+39, r23	; 0x27
 8ba:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 8bc:	0c a1       	ldd	r16, Y+36	; 0x24
 8be:	2b a1       	ldd	r18, Y+35	; 0x23
 8c0:	4a a1       	ldd	r20, Y+34	; 0x22
 8c2:	ce 01       	movw	r24, r28
 8c4:	0e 94 de 02 	call	0x5bc	; 0x5bc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 8c8:	1d a2       	std	Y+37, r1	; 0x25
            break;
 8ca:	49 c0       	rjmp	.+146    	; 0x95e <__stack+0x5f>
          default:
            device->input_state = IDLE;
 8cc:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 8ce:	1f a2       	std	Y+39, r1	; 0x27
 8d0:	1e a2       	std	Y+38, r1	; 0x26
 8d2:	45 c0       	rjmp	.+138    	; 0x95e <__stack+0x5f>
        }

        break;
      default:
        device->input_state = IDLE;
 8d4:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 8d6:	1f a2       	std	Y+39, r1	; 0x27
 8d8:	1e a2       	std	Y+38, r1	; 0x26
        break;
 8da:	41 c0       	rjmp	.+130    	; 0x95e <__stack+0x5f>
    }
  } else {
    if (device->input_state != IDLE) {
 8dc:	ed a1       	ldd	r30, Y+37	; 0x25
 8de:	ee 23       	and	r30, r30
 8e0:	f1 f1       	breq	.+124    	; 0x95e <__stack+0x5f>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 8e2:	4e a1       	ldd	r20, Y+38	; 0x26
 8e4:	5f a1       	ldd	r21, Y+39	; 0x27
 8e6:	9a 01       	movw	r18, r20
 8e8:	ab ea       	ldi	r26, 0xAB	; 171
 8ea:	ba ea       	ldi	r27, 0xAA	; 170
 8ec:	0e 94 06 05 	call	0xa0c	; 0xa0c <__umulhisi3>
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	9c 01       	movw	r18, r24
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	82 0f       	add	r24, r18
 8fc:	93 1f       	adc	r25, r19
 8fe:	9a 01       	movw	r18, r20
 900:	28 1b       	sub	r18, r24
 902:	39 0b       	sbc	r19, r25
 904:	de 01       	movw	r26, r28
 906:	a2 0f       	add	r26, r18
 908:	b3 1f       	adc	r27, r19
 90a:	92 96       	adiw	r26, 0x22	; 34
 90c:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 90e:	ba 01       	movw	r22, r20
 910:	6f 5f       	subi	r22, 0xFF	; 255
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	7f a3       	std	Y+39, r23	; 0x27
 916:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 918:	21 30       	cpi	r18, 0x01	; 1
 91a:	31 05       	cpc	r19, r1
 91c:	89 f0       	breq	.+34     	; 0x940 <__stack+0x41>
 91e:	22 30       	cpi	r18, 0x02	; 2
 920:	31 05       	cpc	r19, r1
 922:	e9 f4       	brne	.+58     	; 0x95e <__stack+0x5f>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 924:	0c a1       	ldd	r16, Y+36	; 0x24
 926:	2b a1       	ldd	r18, Y+35	; 0x23
 928:	4a a1       	ldd	r20, Y+34	; 0x22
 92a:	ce 01       	movw	r24, r28
 92c:	0e 94 de 02 	call	0x5bc	; 0x5bc <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 930:	8d a1       	ldd	r24, Y+37	; 0x25
 932:	84 30       	cpi	r24, 0x04	; 4
 934:	a1 f0       	breq	.+40     	; 0x95e <__stack+0x5f>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	9f a3       	std	Y+39, r25	; 0x27
 93c:	8e a3       	std	Y+38, r24	; 0x26
 93e:	0f c0       	rjmp	.+30     	; 0x95e <__stack+0x5f>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 940:	e2 30       	cpi	r30, 0x02	; 2
 942:	69 f4       	brne	.+26     	; 0x95e <__stack+0x5f>
            //call callback
            midi_input_callbacks(device, device->input_count,
 944:	00 e0       	ldi	r16, 0x00	; 0
 946:	2b a1       	ldd	r18, Y+35	; 0x23
 948:	4a a1       	ldd	r20, Y+34	; 0x22
 94a:	ce 01       	movw	r24, r28
 94c:	0e 94 de 02 	call	0x5bc	; 0x5bc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 950:	8d a1       	ldd	r24, Y+37	; 0x25
 952:	84 30       	cpi	r24, 0x04	; 4
 954:	21 f0       	breq	.+8      	; 0x95e <__stack+0x5f>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	9f a3       	std	Y+39, r25	; 0x27
 95c:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	1f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	ff 90       	pop	r15
 968:	08 95       	ret

0000096a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 97c:	dc 01       	movw	r26, r24
 97e:	90 96       	adiw	r26, 0x20	; 32
 980:	ed 91       	ld	r30, X+
 982:	fc 91       	ld	r31, X
 984:	91 97       	sbiw	r26, 0x21	; 33
 986:	30 97       	sbiw	r30, 0x00	; 0
 988:	09 f0       	breq	.+2      	; 0x98c <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 98a:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 98c:	86 01       	movw	r16, r12
 98e:	08 51       	subi	r16, 0x18	; 24
 990:	1f 4f       	sbci	r17, 0xFF	; 255
 992:	c8 01       	movw	r24, r16
 994:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 998:	e8 2e       	mov	r14, r24
 99a:	f1 2c       	mov	r15, r1
 99c:	e1 14       	cp	r14, r1
 99e:	f1 04       	cpc	r15, r1
 9a0:	91 f0       	breq	.+36     	; 0x9c6 <midi_device_process+0x5c>
 9a2:	c0 e0       	ldi	r28, 0x00	; 0
 9a4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	c8 01       	movw	r24, r16
 9aa:	0e 94 10 02 	call	0x420	; 0x420 <bytequeue_get>
 9ae:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 9b0:	c6 01       	movw	r24, r12
 9b2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 9b6:	61 e0       	ldi	r22, 0x01	; 1
 9b8:	c8 01       	movw	r24, r16
 9ba:	0e 94 22 02 	call	0x444	; 0x444 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 9be:	21 96       	adiw	r28, 0x01	; 1
 9c0:	ce 15       	cp	r28, r14
 9c2:	df 05       	cpc	r29, r15
 9c4:	81 f7       	brne	.-32     	; 0x9a6 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	ff 90       	pop	r15
 9d0:	ef 90       	pop	r14
 9d2:	df 90       	pop	r13
 9d4:	cf 90       	pop	r12
 9d6:	08 95       	ret

000009d8 <__divmodhi4>:
 9d8:	97 fb       	bst	r25, 7
 9da:	07 2e       	mov	r0, r23
 9dc:	16 f4       	brtc	.+4      	; 0x9e2 <__divmodhi4+0xa>
 9de:	00 94       	com	r0
 9e0:	07 d0       	rcall	.+14     	; 0x9f0 <__divmodhi4_neg1>
 9e2:	77 fd       	sbrc	r23, 7
 9e4:	09 d0       	rcall	.+18     	; 0x9f8 <__divmodhi4_neg2>
 9e6:	0e 94 15 05 	call	0xa2a	; 0xa2a <__udivmodhi4>
 9ea:	07 fc       	sbrc	r0, 7
 9ec:	05 d0       	rcall	.+10     	; 0x9f8 <__divmodhi4_neg2>
 9ee:	3e f4       	brtc	.+14     	; 0x9fe <__divmodhi4_exit>

000009f0 <__divmodhi4_neg1>:
 9f0:	90 95       	com	r25
 9f2:	81 95       	neg	r24
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	08 95       	ret

000009f8 <__divmodhi4_neg2>:
 9f8:	70 95       	com	r23
 9fa:	61 95       	neg	r22
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255

000009fe <__divmodhi4_exit>:
 9fe:	08 95       	ret

00000a00 <__tablejump2__>:
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	05 90       	lpm	r0, Z+
 a06:	f4 91       	lpm	r31, Z
 a08:	e0 2d       	mov	r30, r0
 a0a:	09 94       	ijmp

00000a0c <__umulhisi3>:
 a0c:	a2 9f       	mul	r26, r18
 a0e:	b0 01       	movw	r22, r0
 a10:	b3 9f       	mul	r27, r19
 a12:	c0 01       	movw	r24, r0
 a14:	a3 9f       	mul	r26, r19
 a16:	70 0d       	add	r23, r0
 a18:	81 1d       	adc	r24, r1
 a1a:	11 24       	eor	r1, r1
 a1c:	91 1d       	adc	r25, r1
 a1e:	b2 9f       	mul	r27, r18
 a20:	70 0d       	add	r23, r0
 a22:	81 1d       	adc	r24, r1
 a24:	11 24       	eor	r1, r1
 a26:	91 1d       	adc	r25, r1
 a28:	08 95       	ret

00000a2a <__udivmodhi4>:
 a2a:	aa 1b       	sub	r26, r26
 a2c:	bb 1b       	sub	r27, r27
 a2e:	51 e1       	ldi	r21, 0x11	; 17
 a30:	07 c0       	rjmp	.+14     	; 0xa40 <__udivmodhi4_ep>

00000a32 <__udivmodhi4_loop>:
 a32:	aa 1f       	adc	r26, r26
 a34:	bb 1f       	adc	r27, r27
 a36:	a6 17       	cp	r26, r22
 a38:	b7 07       	cpc	r27, r23
 a3a:	10 f0       	brcs	.+4      	; 0xa40 <__udivmodhi4_ep>
 a3c:	a6 1b       	sub	r26, r22
 a3e:	b7 0b       	sbc	r27, r23

00000a40 <__udivmodhi4_ep>:
 a40:	88 1f       	adc	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	5a 95       	dec	r21
 a46:	a9 f7       	brne	.-22     	; 0xa32 <__udivmodhi4_loop>
 a48:	80 95       	com	r24
 a4a:	90 95       	com	r25
 a4c:	bc 01       	movw	r22, r24
 a4e:	cd 01       	movw	r24, r26
 a50:	08 95       	ret

00000a52 <_exit>:
 a52:	f8 94       	cli

00000a54 <__stop_program>:
 a54:	ff cf       	rjmp	.-2      	; 0xa54 <__stop_program>
