
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001bc2  00001c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  00800258  00800258  00001dae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005300  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001498  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001552  00000000  00000000  000089e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b58  00000000  00000000  00009f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000107f  00000000  00000000  0000aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000227b  00000000  00000000  0000bb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000dd86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	2b 0b       	sbc	r18, r27
      b6:	29 0b       	sbc	r18, r25
      b8:	2b 0b       	sbc	r18, r27
      ba:	2d 0b       	sbc	r18, r29
      bc:	2d 0b       	sbc	r18, r29
      be:	33 0b       	sbc	r19, r19
      c0:	2d 0b       	sbc	r18, r29
      c2:	33 0b       	sbc	r19, r19
      c4:	33 0b       	sbc	r19, r19
      c6:	33 0b       	sbc	r19, r19
      c8:	33 0b       	sbc	r19, r19
      ca:	33 0b       	sbc	r19, r19
      cc:	2d 0b       	sbc	r18, r29
      ce:	33 0b       	sbc	r19, r19
      d0:	33 0b       	sbc	r19, r19

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e2 ec       	ldi	r30, 0xC2	; 194
      e6:	fb e1       	ldi	r31, 0x1B	; 27
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ae 34       	cpi	r26, 0x4E	; 78
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 9a 05 	call	0xb34	; 0xb34 <main>
     108:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 38 04 	call	0x870	; 0x870 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 66 08 	call	0x10cc	; 0x10cc <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	7f 92       	push	r7
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29

	clear_all_trigs();
     288:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     28c:	05 e0       	ldi	r16, 0x05	; 5
     28e:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     290:	c0 e0       	ldi	r28, 0x00	; 0
     292:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     294:	0f 2e       	mov	r0, r31
     296:	f8 e4       	ldi	r31, 0x48	; 72
     298:	8f 2e       	mov	r8, r31
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	9f 2e       	mov	r9, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	0f 2e       	mov	r0, r31
     2a2:	f9 e4       	ldi	r31, 0x49	; 73
     2a4:	cf 2e       	mov	r12, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	df 2e       	mov	r13, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f5 e4       	ldi	r31, 0x45	; 69
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f7 e6       	ldi	r31, 0x67	; 103
     2bc:	7f 2e       	mov	r7, r31
     2be:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f8 e6       	ldi	r31, 0x68	; 104
     2c4:	af 2e       	mov	r10, r31
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2cc:	d4 01       	movw	r26, r8
     2ce:	ec 91       	ld	r30, X
     2d0:	8e 2f       	mov	r24, r30
     2d2:	82 95       	swap	r24
     2d4:	86 95       	lsr	r24
     2d6:	87 70       	andi	r24, 0x07	; 7
     2d8:	d6 01       	movw	r26, r12
     2da:	ec 91       	ld	r30, X
     2dc:	e3 70       	andi	r30, 0x03	; 3
     2de:	ee 0f       	add	r30, r30
     2e0:	ee 0f       	add	r30, r30
     2e2:	ee 0f       	add	r30, r30
     2e4:	e8 2b       	or	r30, r24
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	d7 01       	movw	r26, r14
     2ea:	8c 91       	ld	r24, X
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	81 70       	andi	r24, 0x01	; 1
     2f2:	78 9e       	mul	r7, r24
     2f4:	e0 0d       	add	r30, r0
     2f6:	f1 1d       	adc	r31, r1
     2f8:	11 24       	eor	r1, r1
     2fa:	eb 58       	subi	r30, 0x8B	; 139
     2fc:	fc 4f       	sbci	r31, 0xFC	; 252
     2fe:	82 81       	ldd	r24, Z+2	; 0x02
     300:	93 81       	ldd	r25, Z+3	; 0x03
     302:	0c 2e       	mov	r0, r28
     304:	02 c0       	rjmp	.+4      	; 0x30a <trigger_step+0x9c>
     306:	96 95       	lsr	r25
     308:	87 95       	ror	r24
     30a:	0a 94       	dec	r0
     30c:	e2 f7       	brpl	.-8      	; 0x306 <trigger_step+0x98>
     30e:	80 ff       	sbrs	r24, 0
     310:	3a c0       	rjmp	.+116    	; 0x386 <trigger_step+0x118>
			turn_on(drum_hit[i].led_index);
     312:	f8 01       	movw	r30, r16
     314:	80 81       	ld	r24, Z
     316:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     31a:	de 01       	movw	r26, r28
     31c:	aa 0f       	add	r26, r26
     31e:	bb 1f       	adc	r27, r27
     320:	ac 0f       	add	r26, r28
     322:	bd 1f       	adc	r27, r29
     324:	aa 0f       	add	r26, r26
     326:	bb 1f       	adc	r27, r27
     328:	a0 50       	subi	r26, 0x00	; 0
     32a:	bf 4f       	sbci	r27, 0xFF	; 255
     32c:	ec 91       	ld	r30, X
     32e:	8e 2f       	mov	r24, r30
     330:	88 1f       	adc	r24, r24
     332:	88 27       	eor	r24, r24
     334:	88 1f       	adc	r24, r24
     336:	11 96       	adiw	r26, 0x01	; 1
     338:	ec 91       	ld	r30, X
     33a:	e7 70       	andi	r30, 0x07	; 7
     33c:	ee 0f       	add	r30, r30
     33e:	e8 2b       	or	r30, r24
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	e8 59       	subi	r30, 0x98	; 152
     344:	fd 4f       	sbci	r31, 0xFD	; 253
     346:	d8 01       	movw	r26, r16
     348:	13 97       	sbiw	r26, 0x03	; 3
     34a:	9c 91       	ld	r25, X
     34c:	80 81       	ld	r24, Z
     34e:	89 2b       	or	r24, r25
     350:	80 83       	st	Z, r24
     352:	f8 01       	movw	r30, r16
     354:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     356:	80 81       	ld	r24, Z
     358:	8f 3f       	cpi	r24, 0xFF	; 255
     35a:	a9 f0       	breq	.+42     	; 0x386 <trigger_step+0x118>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     35c:	d5 01       	movw	r26, r10
     35e:	13 96       	adiw	r26, 0x03	; 3
     360:	2c 91       	ld	r18, X
     362:	13 97       	sbiw	r26, 0x03	; 3
     364:	fe 01       	movw	r30, r28
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ec 0f       	add	r30, r28
     36c:	fd 1f       	adc	r31, r29
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	ec 5f       	subi	r30, 0xFC	; 252
     374:	fe 4f       	sbci	r31, 0xFE	; 254
     376:	90 81       	ld	r25, Z
     378:	91 70       	andi	r25, 0x01	; 1
     37a:	91 95       	neg	r25
     37c:	92 27       	eor	r25, r18
     37e:	89 23       	and	r24, r25
     380:	82 27       	eor	r24, r18
     382:	13 96       	adiw	r26, 0x03	; 3
     384:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     386:	21 96       	adiw	r28, 0x01	; 1
     388:	0a 5f       	subi	r16, 0xFA	; 250
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
     38c:	c0 31       	cpi	r28, 0x10	; 16
     38e:	d1 05       	cpc	r29, r1
     390:	09 f0       	breq	.+2      	; 0x394 <trigger_step+0x126>
     392:	9c cf       	rjmp	.-200    	; 0x2cc <trigger_step+0x5e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	08 95       	ret

000003b0 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     3b0:	80 91 34 02 	lds	r24, 0x0234
     3b4:	86 ff       	sbrs	r24, 6
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3b8:	e4 e3       	ldi	r30, 0x34	; 52
     3ba:	f2 e0       	ldi	r31, 0x02	; 2
     3bc:	8f 7b       	andi	r24, 0xBF	; 191
     3be:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3c8:	80 91 36 02 	lds	r24, 0x0236
     3cc:	86 ff       	sbrs	r24, 6
     3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3d0:	e6 e3       	ldi	r30, 0x36	; 54
     3d2:	f2 e0       	ldi	r31, 0x02	; 2
     3d4:	8f 7b       	andi	r24, 0xBF	; 191
     3d6:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     3e0:	80 91 38 02 	lds	r24, 0x0238
     3e4:	86 ff       	sbrs	r24, 6
     3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     3e8:	e8 e3       	ldi	r30, 0x38	; 56
     3ea:	f2 e0       	ldi	r31, 0x02	; 2
     3ec:	8f 7b       	andi	r24, 0xBF	; 191
     3ee:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     3f8:	80 91 3a 02 	lds	r24, 0x023A
     3fc:	86 ff       	sbrs	r24, 6
     3fe:	08 c0       	rjmp	.+16     	; 0x410 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     400:	ea e3       	ldi	r30, 0x3A	; 58
     402:	f2 e0       	ldi	r31, 0x02	; 2
     404:	8f 7b       	andi	r24, 0xBF	; 191
     406:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	83 e0       	ldi	r24, 0x03	; 3
     40c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     410:	80 91 3c 02 	lds	r24, 0x023C
     414:	86 ff       	sbrs	r24, 6
     416:	08 c0       	rjmp	.+16     	; 0x428 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     418:	ec e3       	ldi	r30, 0x3C	; 60
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	8f 7b       	andi	r24, 0xBF	; 191
     41e:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     428:	80 91 3e 02 	lds	r24, 0x023E
     42c:	86 ff       	sbrs	r24, 6
     42e:	08 c0       	rjmp	.+16     	; 0x440 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     430:	ee e3       	ldi	r30, 0x3E	; 62
     432:	f2 e0       	ldi	r31, 0x02	; 2
     434:	8f 7b       	andi	r24, 0xBF	; 191
     436:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	85 e0       	ldi	r24, 0x05	; 5
     43c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     440:	80 91 40 02 	lds	r24, 0x0240
     444:	86 ff       	sbrs	r24, 6
     446:	08 c0       	rjmp	.+16     	; 0x458 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     448:	e0 e4       	ldi	r30, 0x40	; 64
     44a:	f2 e0       	ldi	r31, 0x02	; 2
     44c:	8f 7b       	andi	r24, 0xBF	; 191
     44e:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     458:	80 91 42 02 	lds	r24, 0x0242
     45c:	86 ff       	sbrs	r24, 6
     45e:	08 c0       	rjmp	.+16     	; 0x470 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     460:	e2 e4       	ldi	r30, 0x42	; 66
     462:	f2 e0       	ldi	r31, 0x02	; 2
     464:	8f 7b       	andi	r24, 0xBF	; 191
     466:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     470:	80 91 44 02 	lds	r24, 0x0244
     474:	86 ff       	sbrs	r24, 6
     476:	08 c0       	rjmp	.+16     	; 0x488 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     478:	e4 e4       	ldi	r30, 0x44	; 68
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	8f 7b       	andi	r24, 0xBF	; 191
     47e:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	88 e0       	ldi	r24, 0x08	; 8
     484:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     488:	80 91 46 02 	lds	r24, 0x0246
     48c:	86 ff       	sbrs	r24, 6
     48e:	08 c0       	rjmp	.+16     	; 0x4a0 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     490:	e6 e4       	ldi	r30, 0x46	; 70
     492:	f2 e0       	ldi	r31, 0x02	; 2
     494:	8f 7b       	andi	r24, 0xBF	; 191
     496:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	89 e0       	ldi	r24, 0x09	; 9
     49c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     4a0:	80 91 48 02 	lds	r24, 0x0248
     4a4:	86 ff       	sbrs	r24, 6
     4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4a8:	e8 e4       	ldi	r30, 0x48	; 72
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	8f 7b       	andi	r24, 0xBF	; 191
     4ae:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	8a e0       	ldi	r24, 0x0A	; 10
     4b4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4b8:	08 95       	ret

000004ba <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4ba:	1f 92       	push	r1
     4bc:	0f 92       	push	r0
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
     4c4:	8f 93       	push	r24
     4c6:	ef 93       	push	r30
     4c8:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4ca:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4cc:	ee e6       	ldi	r30, 0x6E	; 110
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	8d 7f       	andi	r24, 0xFD	; 253
     4d4:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     4d6:	e7 e4       	ldi	r30, 0x47	; 71
     4d8:	f4 e0       	ldi	r31, 0x04	; 4
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	80 61       	ori	r24, 0x10	; 16
     4de:	82 83       	std	Z+2, r24	; 0x02
	
}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	8f 91       	pop	r24
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	4f 93       	push	r20
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     516:	e3 e7       	ldi	r30, 0x73	; 115
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	81 81       	ldd	r24, Z+1	; 0x01
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	81 83       	std	Z+1, r24	; 0x01
     520:	90 81       	ld	r25, Z
     522:	89 13       	cpse	r24, r25
     524:	76 c0       	rjmp	.+236    	; 0x612 <__vector_11+0x122>
	{
		sequencer.next_step_flag = 1;
     526:	e7 e4       	ldi	r30, 0x47	; 71
     528:	f4 e0       	ldi	r31, 0x04	; 4
     52a:	92 81       	ldd	r25, Z+2	; 0x02
     52c:	94 60       	ori	r25, 0x04	; 4
		internal_clock.beat_counter++; //overflows every 4 beats
     52e:	a5 e7       	ldi	r26, 0x75	; 117
     530:	b2 e0       	ldi	r27, 0x02	; 2
     532:	8c 91       	ld	r24, X
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	28 0f       	add	r18, r24
     538:	23 70       	andi	r18, 0x03	; 3
     53a:	8c 7f       	andi	r24, 0xFC	; 252
     53c:	82 2b       	or	r24, r18
     53e:	8c 93       	st	X, r24
		internal_clock.ppqn_counter = 0;
     540:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == (sequencer.step_num_first + sequencer.step_num_second)) { //end of measure - bah. determining end of measure is dependent on mode - editing first part vs second part plus what happens in rhythm mode?
     544:	20 91 48 04 	lds	r18, 0x0448
     548:	82 2f       	mov	r24, r18
     54a:	82 95       	swap	r24
     54c:	86 95       	lsr	r24
     54e:	87 70       	andi	r24, 0x07	; 7
     550:	29 2f       	mov	r18, r25
     552:	23 70       	andi	r18, 0x03	; 3
     554:	22 0f       	add	r18, r18
     556:	22 0f       	add	r18, r18
     558:	22 0f       	add	r18, r18
     55a:	28 2b       	or	r18, r24
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	82 0f       	add	r24, r18
     560:	38 2f       	mov	r19, r24
     562:	3f 71       	andi	r19, 0x1F	; 31
     564:	82 95       	swap	r24
     566:	88 0f       	add	r24, r24
     568:	80 7e       	andi	r24, 0xE0	; 224
     56a:	41 81       	ldd	r20, Z+1	; 0x01
     56c:	4f 71       	andi	r20, 0x1F	; 31
     56e:	84 2b       	or	r24, r20
     570:	81 83       	std	Z+1, r24	; 0x01
     572:	36 95       	lsr	r19
     574:	36 95       	lsr	r19
     576:	36 95       	lsr	r19
     578:	9c 7f       	andi	r25, 0xFC	; 252
     57a:	93 2b       	or	r25, r19
     57c:	92 83       	std	Z+2, r25	; 0x02
     57e:	90 81       	ld	r25, Z
     580:	49 2f       	mov	r20, r25
     582:	46 95       	lsr	r20
     584:	4f 70       	andi	r20, 0x0F	; 15
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	92 95       	swap	r25
     58a:	96 95       	lsr	r25
     58c:	97 70       	andi	r25, 0x07	; 7
     58e:	81 70       	andi	r24, 0x01	; 1
     590:	88 0f       	add	r24, r24
     592:	88 0f       	add	r24, r24
     594:	88 0f       	add	r24, r24
     596:	89 2b       	or	r24, r25
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	84 0f       	add	r24, r20
     59c:	91 1d       	adc	r25, r1
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	b9 f5       	brne	.+110    	; 0x612 <__vector_11+0x122>
			//no, actuallys seems OK - 808 plays both parts and just shows LEDs for the ones you are editing	
			sequencer.current_step = 0;
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	8f 71       	andi	r24, 0x1F	; 31
     5a8:	81 83       	std	Z+1, r24	; 0x01
     5aa:	92 81       	ldd	r25, Z+2	; 0x02
     5ac:	9c 7f       	andi	r25, 0xFC	; 252
     5ae:	92 83       	std	Z+2, r25	; 0x02
			//update step number
			uint8_t old_step_num = sequencer.step_num_first;
			sequencer.step_num_first = sequencer.step_num_new; //temp test, will need to accommodate first and second part
     5b0:	86 95       	lsr	r24
     5b2:	28 2f       	mov	r18, r24
     5b4:	22 0f       	add	r18, r18
     5b6:	90 81       	ld	r25, Z
     5b8:	91 7e       	andi	r25, 0xE1	; 225
     5ba:	92 2b       	or	r25, r18
     5bc:	90 83       	st	Z, r25
			if (old_step_num != sequencer.step_num_first) update_step_led_mask();
     5be:	48 13       	cpse	r20, r24
     5c0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <update_step_led_mask>
			if (sequencer.var_change == 1) {
     5c4:	80 91 47 04 	lds	r24, 0x0447
     5c8:	80 ff       	sbrs	r24, 0
     5ca:	17 c0       	rjmp	.+46     	; 0x5fa <__vector_11+0x10a>
				sequencer.var_change = 0;
     5cc:	e7 e4       	ldi	r30, 0x47	; 71
     5ce:	f4 e0       	ldi	r31, 0x04	; 4
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	80 83       	st	Z, r24
				switch (sequencer.variation_mode) {
     5d4:	80 91 46 04 	lds	r24, 0x0446
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	49 f0       	breq	.+18     	; 0x5ee <__vector_11+0xfe>
     5dc:	10 f0       	brcs	.+4      	; 0x5e2 <__vector_11+0xf2>
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	c1 f4       	brne	.+48     	; 0x612 <__vector_11+0x122>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     5e2:	e5 e4       	ldi	r30, 0x45	; 69
     5e4:	f4 e0       	ldi	r31, 0x04	; 4
     5e6:	80 81       	ld	r24, Z
     5e8:	8e 7f       	andi	r24, 0xFE	; 254
     5ea:	80 83       	st	Z, r24
					break;
     5ec:	12 c0       	rjmp	.+36     	; 0x612 <__vector_11+0x122>
				case VAR_B:
					sequencer.variation = VAR_B;
     5ee:	e5 e4       	ldi	r30, 0x45	; 69
     5f0:	f4 e0       	ldi	r31, 0x04	; 4
     5f2:	80 81       	ld	r24, Z
     5f4:	81 60       	ori	r24, 0x01	; 1
     5f6:	80 83       	st	Z, r24
					break;	
     5f8:	0c c0       	rjmp	.+24     	; 0x612 <__vector_11+0x122>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     5fa:	80 91 46 04 	lds	r24, 0x0446
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	41 f4       	brne	.+16     	; 0x612 <__vector_11+0x122>
					
				sequencer.variation ^= 1<<0; //toggle state
     602:	e5 e4       	ldi	r30, 0x45	; 69
     604:	f4 e0       	ldi	r31, 0x04	; 4
     606:	80 81       	ld	r24, Z
     608:	98 2f       	mov	r25, r24
     60a:	90 95       	com	r25
     60c:	90 fb       	bst	r25, 0
     60e:	80 f9       	bld	r24, 0
     610:	80 83       	st	Z, r24
			}
			//sequencer.current_measure++;
		}
	} //should make the else if so second condition doesn't need to be tested
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     612:	e3 e7       	ldi	r30, 0x73	; 115
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	80 81       	ld	r24, Z
     618:	86 95       	lsr	r24
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	98 13       	cpse	r25, r24
     61e:	d8 c0       	rjmp	.+432    	; 0x7d0 <__vector_11+0x2e0>
		
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     620:	40 91 d3 01 	lds	r20, 0x01D3
     624:	30 91 d6 01 	lds	r19, 0x01D6
     628:	e8 e6       	ldi	r30, 0x68	; 104
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	83 2f       	mov	r24, r19
     62e:	84 2b       	or	r24, r20
     630:	80 95       	com	r24
     632:	95 81       	ldd	r25, Z+5	; 0x05
     634:	89 23       	and	r24, r25
     636:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     638:	80 91 76 03 	lds	r24, 0x0376
     63c:	81 ff       	sbrs	r24, 1
     63e:	9a c0       	rjmp	.+308    	; 0x774 <__vector_11+0x284>
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     640:	cc e4       	ldi	r28, 0x4C	; 76
     642:	d4 e0       	ldi	r29, 0x04	; 4
     644:	e8 81       	ld	r30, Y
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	b2 96       	adiw	r30, 0x22	; 34
     64a:	80 91 45 04 	lds	r24, 0x0445
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	81 70       	andi	r24, 0x01	; 1
     654:	97 e6       	ldi	r25, 0x67	; 103
     656:	89 9f       	mul	r24, r25
     658:	e0 0d       	add	r30, r0
     65a:	f1 1d       	adc	r31, r1
     65c:	11 24       	eor	r1, r1
     65e:	eb 58       	subi	r30, 0x8B	; 139
     660:	fc 4f       	sbci	r31, 0xFC	; 252
     662:	92 81       	ldd	r25, Z+2	; 0x02
     664:	83 81       	ldd	r24, Z+3	; 0x03
     666:	e8 e6       	ldi	r30, 0x68	; 104
     668:	f2 e0       	ldi	r31, 0x02	; 2
     66a:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     66c:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     66e:	0e 94 4b 04 	call	0x896	; 0x896 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     672:	88 81       	ld	r24, Y
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	fc 01       	movw	r30, r24
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e8 0f       	add	r30, r24
     67e:	f9 1f       	adc	r31, r25
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e0 50       	subi	r30, 0x00	; 0
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	85 81       	ldd	r24, Z+5	; 0x05
     68a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
								
			switch (sequencer.variation_mode) {
     68e:	20 91 46 04 	lds	r18, 0x0446
     692:	21 30       	cpi	r18, 0x01	; 1
     694:	49 f0       	breq	.+18     	; 0x6a8 <__vector_11+0x1b8>
     696:	18 f0       	brcs	.+6      	; 0x69e <__vector_11+0x1ae>
     698:	22 30       	cpi	r18, 0x02	; 2
     69a:	a1 f0       	breq	.+40     	; 0x6c4 <__vector_11+0x1d4>
     69c:	20 c0       	rjmp	.+64     	; 0x6de <__vector_11+0x1ee>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     69e:	80 91 d3 01 	lds	r24, 0x01D3
     6a2:	80 93 4d 04 	sts	0x044D, r24
					break;					
     6a6:	1b c0       	rjmp	.+54     	; 0x6de <__vector_11+0x1ee>
				case VAR_B:
					if (sequencer.var_change == 1) {
     6a8:	80 91 47 04 	lds	r24, 0x0447
     6ac:	80 ff       	sbrs	r24, 0
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <__vector_11+0x1ca>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     6b0:	80 91 d3 01 	lds	r24, 0x01D3
     6b4:	80 93 4d 04 	sts	0x044D, r24
     6b8:	12 c0       	rjmp	.+36     	; 0x6de <__vector_11+0x1ee>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     6ba:	80 91 d6 01 	lds	r24, 0x01D6
     6be:	80 93 4d 04 	sts	0x044D, r24
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <__vector_11+0x1ee>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     6c4:	80 91 45 04 	lds	r24, 0x0445
     6c8:	80 fd       	sbrc	r24, 0
     6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <__vector_11+0x1e6>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     6cc:	80 91 d3 01 	lds	r24, 0x01D3
     6d0:	80 93 4d 04 	sts	0x044D, r24
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__vector_11+0x1ee>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     6d6:	80 91 d6 01 	lds	r24, 0x01D6
     6da:	80 93 4d 04 	sts	0x044D, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     6de:	80 91 75 02 	lds	r24, 0x0275
     6e2:	83 70       	andi	r24, 0x03	; 3
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	02 97       	sbiw	r24, 0x02	; 2
     6e8:	0c f0       	brlt	.+2      	; 0x6ec <__vector_11+0x1fc>
     6ea:	6b c0       	rjmp	.+214    	; 0x7c2 <__vector_11+0x2d2>
				
				if (sequencer.var_change == 1) {
     6ec:	80 91 47 04 	lds	r24, 0x0447
     6f0:	80 ff       	sbrs	r24, 0
     6f2:	2a c0       	rjmp	.+84     	; 0x748 <__vector_11+0x258>
					
					switch (sequencer.variation_mode) {
     6f4:	21 30       	cpi	r18, 0x01	; 1
     6f6:	61 f0       	breq	.+24     	; 0x710 <__vector_11+0x220>
     6f8:	18 f0       	brcs	.+6      	; 0x700 <__vector_11+0x210>
     6fa:	22 30       	cpi	r18, 0x02	; 2
     6fc:	89 f0       	breq	.+34     	; 0x720 <__vector_11+0x230>
     6fe:	24 c0       	rjmp	.+72     	; 0x748 <__vector_11+0x258>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     700:	ed e4       	ldi	r30, 0x4D	; 77
     702:	f4 e0       	ldi	r31, 0x04	; 4
     704:	90 91 d6 01 	lds	r25, 0x01D6
     708:	80 81       	ld	r24, Z
     70a:	89 2b       	or	r24, r25
     70c:	80 83       	st	Z, r24
							break;
     70e:	59 c0       	rjmp	.+178    	; 0x7c2 <__vector_11+0x2d2>
						case VAR_B:
							if (sequencer.var_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     710:	ed e4       	ldi	r30, 0x4D	; 77
     712:	f4 e0       	ldi	r31, 0x04	; 4
     714:	90 91 d6 01 	lds	r25, 0x01D6
     718:	80 81       	ld	r24, Z
     71a:	89 2b       	or	r24, r25
     71c:	80 83       	st	Z, r24
     71e:	51 c0       	rjmp	.+162    	; 0x7c2 <__vector_11+0x2d2>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     720:	80 91 45 04 	lds	r24, 0x0445
     724:	80 fd       	sbrc	r24, 0
     726:	08 c0       	rjmp	.+16     	; 0x738 <__vector_11+0x248>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     728:	ed e4       	ldi	r30, 0x4D	; 77
     72a:	f4 e0       	ldi	r31, 0x04	; 4
     72c:	90 91 d6 01 	lds	r25, 0x01D6
     730:	80 81       	ld	r24, Z
     732:	89 2b       	or	r24, r25
     734:	80 83       	st	Z, r24
     736:	0a c0       	rjmp	.+20     	; 0x74c <__vector_11+0x25c>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     738:	ed e4       	ldi	r30, 0x4D	; 77
     73a:	f4 e0       	ldi	r31, 0x04	; 4
     73c:	90 91 d3 01 	lds	r25, 0x01D3
     740:	80 81       	ld	r24, Z
     742:	89 2b       	or	r24, r25
     744:	80 83       	st	Z, r24
     746:	02 c0       	rjmp	.+4      	; 0x74c <__vector_11+0x25c>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     748:	22 30       	cpi	r18, 0x02	; 2
     74a:	d9 f5       	brne	.+118    	; 0x7c2 <__vector_11+0x2d2>
						if (sequencer.variation == VAR_A) {
     74c:	80 91 45 04 	lds	r24, 0x0445
     750:	80 fd       	sbrc	r24, 0
     752:	08 c0       	rjmp	.+16     	; 0x764 <__vector_11+0x274>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     754:	ed e4       	ldi	r30, 0x4D	; 77
     756:	f4 e0       	ldi	r31, 0x04	; 4
     758:	90 91 d6 01 	lds	r25, 0x01D6
     75c:	80 81       	ld	r24, Z
     75e:	89 2b       	or	r24, r25
     760:	80 83       	st	Z, r24
     762:	2f c0       	rjmp	.+94     	; 0x7c2 <__vector_11+0x2d2>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     764:	ed e4       	ldi	r30, 0x4D	; 77
     766:	f4 e0       	ldi	r31, 0x04	; 4
     768:	90 91 d3 01 	lds	r25, 0x01D3
     76c:	80 81       	ld	r24, Z
     76e:	89 2b       	or	r24, r25
     770:	80 83       	st	Z, r24
     772:	27 c0       	rjmp	.+78     	; 0x7c2 <__vector_11+0x2d2>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     774:	e8 e6       	ldi	r30, 0x68	; 104
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     77a:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     77c:	20 91 46 04 	lds	r18, 0x0446
     780:	21 30       	cpi	r18, 0x01	; 1
     782:	31 f0       	breq	.+12     	; 0x790 <__vector_11+0x2a0>
     784:	10 f0       	brcs	.+4      	; 0x78a <__vector_11+0x29a>
     786:	22 30       	cpi	r18, 0x02	; 2
     788:	61 f4       	brne	.+24     	; 0x7a2 <__vector_11+0x2b2>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     78a:	40 93 4d 04 	sts	0x044D, r20
				break;
     78e:	09 c0       	rjmp	.+18     	; 0x7a2 <__vector_11+0x2b2>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     790:	30 93 4d 04 	sts	0x044D, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     794:	80 91 75 02 	lds	r24, 0x0275
     798:	83 70       	andi	r24, 0x03	; 3
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 97       	sbiw	r24, 0x02	; 2
     79e:	8c f4       	brge	.+34     	; 0x7c2 <__vector_11+0x2d2>
     7a0:	0d c0       	rjmp	.+26     	; 0x7bc <__vector_11+0x2cc>
     7a2:	80 91 75 02 	lds	r24, 0x0275
     7a6:	83 70       	andi	r24, 0x03	; 3
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	02 97       	sbiw	r24, 0x02	; 2
     7ac:	54 f4       	brge	.+20     	; 0x7c2 <__vector_11+0x2d2>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     7ae:	22 30       	cpi	r18, 0x02	; 2
     7b0:	29 f4       	brne	.+10     	; 0x7bc <__vector_11+0x2cc>
     7b2:	ed e4       	ldi	r30, 0x4D	; 77
     7b4:	f4 e0       	ldi	r31, 0x04	; 4
     7b6:	80 81       	ld	r24, Z
     7b8:	38 2b       	or	r19, r24
     7ba:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     7c2:	e8 e6       	ldi	r30, 0x68	; 104
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	90 91 4d 04 	lds	r25, 0x044D
     7ca:	85 81       	ldd	r24, Z+5	; 0x05
     7cc:	89 2b       	or	r24, r25
     7ce:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	bf 91       	pop	r27
     7da:	af 91       	pop	r26
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	7f 91       	pop	r23
     7e2:	6f 91       	pop	r22
     7e4:	5f 91       	pop	r21
     7e6:	4f 91       	pop	r20
     7e8:	3f 91       	pop	r19
     7ea:	2f 91       	pop	r18
     7ec:	0f 90       	pop	r0
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	0f 90       	pop	r0
     7f2:	1f 90       	pop	r1
     7f4:	18 95       	reti

000007f6 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9c 01       	movw	r18, r24
     7fe:	22 0f       	add	r18, r18
     800:	33 1f       	adc	r19, r19
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	dc 01       	movw	r26, r24
     808:	a8 59       	subi	r26, 0x98	; 152
     80a:	be 4f       	sbci	r27, 0xFE	; 254
     80c:	2c 91       	ld	r18, X
     80e:	e2 2f       	mov	r30, r18
     810:	ef 70       	andi	r30, 0x0F	; 15
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	e8 59       	subi	r30, 0x98	; 152
     816:	fd 4f       	sbci	r31, 0xFD	; 253
     818:	ec 01       	movw	r28, r24
     81a:	c9 59       	subi	r28, 0x99	; 153
     81c:	de 4f       	sbci	r29, 0xFE	; 254
     81e:	30 81       	ld	r19, Z
     820:	88 81       	ld	r24, Y
     822:	83 2b       	or	r24, r19
     824:	80 83       	st	Z, r24
	led[led_index].state = 1;
     826:	82 2f       	mov	r24, r18
     828:	80 61       	ori	r24, 0x10	; 16
     82a:	8c 93       	st	X, r24

}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <turn_off>:

void turn_off(uint8_t led_index) {
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9c 01       	movw	r18, r24
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
     83e:	82 0f       	add	r24, r18
     840:	93 1f       	adc	r25, r19
     842:	dc 01       	movw	r26, r24
     844:	a8 59       	subi	r26, 0x98	; 152
     846:	be 4f       	sbci	r27, 0xFE	; 254
     848:	2c 91       	ld	r18, X
     84a:	e2 2f       	mov	r30, r18
     84c:	ef 70       	andi	r30, 0x0F	; 15
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	e8 59       	subi	r30, 0x98	; 152
     852:	fd 4f       	sbci	r31, 0xFD	; 253
     854:	ec 01       	movw	r28, r24
     856:	c9 59       	subi	r28, 0x99	; 153
     858:	de 4f       	sbci	r29, 0xFE	; 254
     85a:	88 81       	ld	r24, Y
     85c:	80 95       	com	r24
     85e:	90 81       	ld	r25, Z
     860:	89 23       	and	r24, r25
     862:	80 83       	st	Z, r24
	led[led_index].state = 0;
     864:	82 2f       	mov	r24, r18
     866:	8f 7e       	andi	r24, 0xEF	; 239
     868:	8c 93       	st	X, r24
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	2e 0f       	add	r18, r30
     87c:	3f 1f       	adc	r19, r31
     87e:	f9 01       	movw	r30, r18
     880:	e8 59       	subi	r30, 0x98	; 152
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	90 81       	ld	r25, Z
     886:	94 ff       	sbrs	r25, 4
     888:	03 c0       	rjmp	.+6      	; 0x890 <toggle+0x20>
		
		turn_off(led_index);
     88a:	0e 94 19 04 	call	0x832	; 0x832 <turn_off>
     88e:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     890:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
     894:	08 95       	ret

00000896 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     896:	e8 e6       	ldi	r30, 0x68	; 104
     898:	f2 e0       	ldi	r31, 0x02	; 2
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     8a0:	87 81       	ldd	r24, Z+7	; 0x07
     8a2:	80 72       	andi	r24, 0x20	; 32
     8a4:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     8a6:	83 81       	ldd	r24, Z+3	; 0x03
     8a8:	8f 70       	andi	r24, 0x0F	; 15
     8aa:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     8ac:	86 81       	ldd	r24, Z+6	; 0x06
     8ae:	8f 7c       	andi	r24, 0xCF	; 207
     8b0:	86 83       	std	Z+6, r24	; 0x06
     8b2:	08 95       	ret

000008b4 <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     8b4:	2f 92       	push	r2
     8b6:	3f 92       	push	r3
     8b8:	4f 92       	push	r4
     8ba:	5f 92       	push	r5
     8bc:	6f 92       	push	r6
     8be:	7f 92       	push	r7
     8c0:	8f 92       	push	r8
     8c2:	9f 92       	push	r9
     8c4:	af 92       	push	r10
     8c6:	bf 92       	push	r11
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	00 d0       	rcall	.+0      	; 0x8da <update_step_led_mask+0x26>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <update_step_led_mask+0x28>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     8e0:	82 e2       	ldi	r24, 0x22	; 34
     8e2:	eb eb       	ldi	r30, 0xBB	; 187
     8e4:	f3 e0       	ldi	r31, 0x03	; 3
     8e6:	df 01       	movw	r26, r30
     8e8:	98 2f       	mov	r25, r24
     8ea:	1d 92       	st	X+, r1
     8ec:	9a 95       	dec	r25
     8ee:	e9 f7       	brne	.-6      	; 0x8ea <update_step_led_mask+0x36>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     8f0:	e2 e2       	ldi	r30, 0x22	; 34
     8f2:	f4 e0       	ldi	r31, 0x04	; 4
     8f4:	df 01       	movw	r26, r30
     8f6:	1d 92       	st	X+, r1
     8f8:	8a 95       	dec	r24
     8fa:	e9 f7       	brne	.-6      	; 0x8f6 <update_step_led_mask+0x42>
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
     8fc:	80 91 47 04 	lds	r24, 0x0447
     900:	86 95       	lsr	r24
     902:	8f 70       	andi	r24, 0x0F	; 15
     904:	68 2e       	mov	r6, r24
     906:	71 2c       	mov	r7, r1
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     908:	c0 90 b7 03 	lds	r12, 0x03B7
     90c:	d0 90 b8 03 	lds	r13, 0x03B8
     910:	e0 90 b9 03 	lds	r14, 0x03B9
     914:	f0 90 ba 03 	lds	r15, 0x03BA
		if ((sequencer.pattern[VAR_B].accent >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     918:	80 90 1e 04 	lds	r8, 0x041E
     91c:	90 90 1f 04 	lds	r9, 0x041F
     920:	a0 90 20 04 	lds	r10, 0x0420
     924:	b0 90 21 04 	lds	r11, 0x0421
     928:	e7 e7       	ldi	r30, 0x77	; 119
     92a:	f3 e0       	ldi	r31, 0x03	; 3
     92c:	fa 83       	std	Y+2, r31	; 0x02
     92e:	e9 83       	std	Y+1, r30	; 0x01
     930:	0f 2e       	mov	r0, r31
     932:	fe ed       	ldi	r31, 0xDE	; 222
     934:	4f 2e       	mov	r4, r31
     936:	f3 e0       	ldi	r31, 0x03	; 3
     938:	5f 2e       	mov	r5, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     940:	22 24       	eor	r2, r2
     942:	23 94       	inc	r2
     944:	31 2c       	mov	r3, r1
     946:	55 c0       	rjmp	.+170    	; 0x9f2 <__stack+0xf3>
     948:	2b 81       	ldd	r18, Y+3	; 0x03
     94a:	3c 81       	ldd	r19, Y+4	; 0x04
     94c:	08 2e       	mov	r0, r24
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
     950:	36 95       	lsr	r19
     952:	27 95       	ror	r18
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <__stack+0x51>
     958:	20 ff       	sbrs	r18, 0
     95a:	06 c0       	rjmp	.+12     	; 0x968 <__stack+0x69>
     95c:	20 81       	ld	r18, Z
     95e:	31 81       	ldd	r19, Z+1	; 0x01
     960:	24 2b       	or	r18, r20
     962:	35 2b       	or	r19, r21
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     968:	9b 01       	movw	r18, r22
     96a:	08 2e       	mov	r0, r24
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x73>
     96e:	36 95       	lsr	r19
     970:	27 95       	ror	r18
     972:	0a 94       	dec	r0
     974:	e2 f7       	brpl	.-8      	; 0x96e <__stack+0x6f>
     976:	20 ff       	sbrs	r18, 0
     978:	08 c0       	rjmp	.+16     	; 0x98a <__stack+0x8b>
     97a:	2d 91       	ld	r18, X+
     97c:	3c 91       	ld	r19, X
     97e:	11 97       	sbiw	r26, 0x01	; 1
     980:	24 2b       	or	r18, r20
     982:	35 2b       	or	r19, r21
     984:	11 96       	adiw	r26, 0x01	; 1
     986:	3c 93       	st	X, r19
     988:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	12 96       	adiw	r26, 0x02	; 2
     98e:	32 96       	adiw	r30, 0x02	; 2
     990:	80 31       	cpi	r24, 0x10	; 16
     992:	91 05       	cpc	r25, r1
     994:	c9 f6       	brne	.-78     	; 0x948 <__stack+0x49>
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     996:	d7 01       	movw	r26, r14
     998:	c6 01       	movw	r24, r12
     99a:	00 2e       	mov	r0, r16
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0xa7>
     99e:	b6 95       	lsr	r27
     9a0:	a7 95       	ror	r26
     9a2:	97 95       	ror	r25
     9a4:	87 95       	ror	r24
     9a6:	0a 94       	dec	r0
     9a8:	d2 f7       	brpl	.-12     	; 0x99e <__stack+0x9f>
     9aa:	80 ff       	sbrs	r24, 0
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__stack+0xc1>
     9ae:	ab ed       	ldi	r26, 0xDB	; 219
     9b0:	b3 e0       	ldi	r27, 0x03	; 3
     9b2:	8d 91       	ld	r24, X+
     9b4:	9c 91       	ld	r25, X
     9b6:	11 97       	sbiw	r26, 0x01	; 1
     9b8:	84 2b       	or	r24, r20
     9ba:	95 2b       	or	r25, r21
     9bc:	8d 93       	st	X+, r24
     9be:	9c 93       	st	X, r25
		if ((sequencer.pattern[VAR_B].accent >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     9c0:	d5 01       	movw	r26, r10
     9c2:	c4 01       	movw	r24, r8
     9c4:	00 2e       	mov	r0, r16
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__stack+0xd1>
     9c8:	b6 95       	lsr	r27
     9ca:	a7 95       	ror	r26
     9cc:	97 95       	ror	r25
     9ce:	87 95       	ror	r24
     9d0:	0a 94       	dec	r0
     9d2:	d2 f7       	brpl	.-12     	; 0x9c8 <__stack+0xc9>
     9d4:	80 ff       	sbrs	r24, 0
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <__stack+0xe9>
     9d8:	e2 e4       	ldi	r30, 0x42	; 66
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	48 2b       	or	r20, r24
     9e2:	59 2b       	or	r21, r25
     9e4:	51 83       	std	Z+1, r21	; 0x01
     9e6:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
     9e8:	0f 5f       	subi	r16, 0xFF	; 255
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	60 16       	cp	r6, r16
     9ee:	71 06       	cpc	r7, r17
     9f0:	d4 f0       	brlt	.+52     	; 0xa26 <__stack+0x127>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9f2:	a9 81       	ldd	r26, Y+1	; 0x01
     9f4:	ba 81       	ldd	r27, Y+2	; 0x02
     9f6:	2d 91       	ld	r18, X+
     9f8:	3d 91       	ld	r19, X+
     9fa:	ba 83       	std	Y+2, r27	; 0x02
     9fc:	a9 83       	std	Y+1, r26	; 0x01
     9fe:	a1 01       	movw	r20, r2
     a00:	00 2e       	mov	r0, r16
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x109>
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <__stack+0x105>
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a0c:	f2 01       	movw	r30, r4
     a0e:	61 91       	ld	r22, Z+
     a10:	71 91       	ld	r23, Z+
     a12:	2f 01       	movw	r4, r30
     a14:	a2 e2       	ldi	r26, 0x22	; 34
     a16:	b4 e0       	ldi	r27, 0x04	; 4
     a18:	eb eb       	ldi	r30, 0xBB	; 187
     a1a:	f3 e0       	ldi	r31, 0x03	; 3
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	3c 83       	std	Y+4, r19	; 0x04
     a22:	2b 83       	std	Y+3, r18	; 0x03
     a24:	91 cf       	rjmp	.-222    	; 0x948 <__stack+0x49>
		//
		//
	//}
	
	
}	//^^^^^^This all seems very inefficient. Would it be easier to directly manipulate spi_data step bytes only for the current instrument? not sure.
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	bf 90       	pop	r11
     a40:	af 90       	pop	r10
     a42:	9f 90       	pop	r9
     a44:	8f 90       	pop	r8
     a46:	7f 90       	pop	r7
     a48:	6f 90       	pop	r6
     a4a:	5f 90       	pop	r5
     a4c:	4f 90       	pop	r4
     a4e:	3f 90       	pop	r3
     a50:	2f 90       	pop	r2
     a52:	08 95       	ret

00000a54 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     a54:	08 95       	ret

00000a56 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     a56:	08 95       	ret

00000a58 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     a58:	40 31       	cpi	r20, 0x10	; 16
     a5a:	20 f4       	brcc	.+8      	; 0xa64 <note_on_event+0xc>
     a5c:	62 2f       	mov	r22, r18
     a5e:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     a60:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     a64:	08 95       	ret

00000a66 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     a66:	0e 94 40 06 	call	0xc80	; 0xc80 <update_tempo>
	read_switches();
     a6a:	0e 94 8a 08 	call	0x1114	; 0x1114 <read_switches>
	check_start_stop_tap();
     a6e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <check_start_stop_tap>
	
	parse_switch_data();
     a72:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     a76:	80 91 75 03 	lds	r24, 0x0375
     a7a:	83 30       	cpi	r24, 0x03	; 3
     a7c:	11 f4       	brne	.+4      	; 0xa82 <refresh+0x1c>
     a7e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <live_hits>
	update_mode();
     a82:	0e 94 07 06 	call	0xc0e	; 0xc0e <update_mode>
	check_clear_switch();
     a86:	0e 94 1e 0a 	call	0x143c	; 0x143c <check_clear_switch>
	check_variation_switches();
     a8a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <check_variation_switches>
	check_inst_switches();	
     a8e:	0e 94 4b 09 	call	0x1296	; 0x1296 <check_inst_switches>
	update_step_board();
     a92:	0e 94 28 07 	call	0xe50	; 0xe50 <update_step_board>
	//update_step_led_mask();
	process_step();
     a96:	0e 94 6e 06 	call	0xcdc	; 0xcdc <process_step>
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     a9a:	0e 94 66 08 	call	0x10cc	; 0x10cc <update_spi>
	PORTD &= ~(1<<TRIG);
     a9e:	5d 98       	cbi	0x0b, 5	; 11
     aa0:	08 95       	ret

00000aa2 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     aa2:	8f e1       	ldi	r24, 0x1F	; 31
     aa4:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     aa8:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     aac:	88 ed       	ldi	r24, 0xD8	; 216
     aae:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     ab2:	51 9a       	sbi	0x0a, 1	; 10
     ab4:	08 95       	ret

00000ab6 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	1f 92       	push	r1
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     ae2:	80 91 c6 00 	lds	r24, 0x00C6
     ae6:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     ae8:	ae 01       	movw	r20, r28
     aea:	4f 5f       	subi	r20, 0xFF	; 255
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	88 e8       	ldi	r24, 0x88	; 136
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     af8:	0f 90       	pop	r0
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_20>:

ISR (USART0_TX_vect) {
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1


	
}
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     b34:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     b36:	8d b1       	in	r24, 0x0d	; 13
     b38:	8c 60       	ori	r24, 0x0C	; 12
     b3a:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     b3c:	87 b1       	in	r24, 0x07	; 7
     b3e:	8e 60       	ori	r24, 0x0E	; 14
     b40:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     b42:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     b44:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     b46:	88 b1       	in	r24, 0x08	; 8
     b48:	81 7f       	andi	r24, 0xF1	; 241
     b4a:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     b4c:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     b4e:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     b50:	80 e5       	ldi	r24, 0x50	; 80
     b52:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     b56:	ed ea       	ldi	r30, 0xAD	; 173
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	81 60       	ori	r24, 0x01	; 1
     b5e:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     b66:	8d e1       	ldi	r24, 0x1D	; 29
     b68:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
	turn_on(FILL_MANUAL);
     b6c:	82 e2       	ldi	r24, 0x22	; 34
     b6e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
	
	update_spi();
     b72:	0e 94 66 08 	call	0x10cc	; 0x10cc <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     b76:	84 b5       	in	r24, 0x24	; 36
     b78:	82 60       	ori	r24, 0x02	; 2
     b7a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     b7c:	81 ee       	ldi	r24, 0xE1	; 225
     b7e:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     b80:	88 e8       	ldi	r24, 0x88	; 136
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 41 0b 	call	0x1682	; 0x1682 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     b88:	6c e2       	ldi	r22, 0x2C	; 44
     b8a:	75 e0       	ldi	r23, 0x05	; 5
     b8c:	88 e8       	ldi	r24, 0x88	; 136
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 35 0b 	call	0x166a	; 0x166a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     b94:	6a e2       	ldi	r22, 0x2A	; 42
     b96:	75 e0       	ldi	r23, 0x05	; 5
     b98:	88 e8       	ldi	r24, 0x88	; 136
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 39 0b 	call	0x1672	; 0x1672 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     ba0:	6b e2       	ldi	r22, 0x2B	; 43
     ba2:	75 e0       	ldi	r23, 0x05	; 5
     ba4:	88 e8       	ldi	r24, 0x88	; 136
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	0e 94 3d 0b 	call	0x167a	; 0x167a <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     bac:	0e 94 51 05 	call	0xaa2	; 0xaa2 <setup_midi_usart>
	
	setup_internal_clock();
     bb0:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     bb4:	e3 e7       	ldi	r30, 0x73	; 115
     bb6:	f2 e0       	ldi	r31, 0x02	; 2
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     bbc:	c1 e0       	ldi	r28, 0x01	; 1
     bbe:	c1 83       	std	Z+1, r28	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     bc0:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     bc4:	e7 e4       	ldi	r30, 0x47	; 71
     bc6:	f4 e0       	ldi	r31, 0x04	; 4
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	80 61       	ori	r24, 0x10	; 16
     bcc:	82 83       	std	Z+2, r24	; 0x02
	sequencer.START = 0;
     bce:	a6 e7       	ldi	r26, 0x76	; 118
     bd0:	b3 e0       	ldi	r27, 0x03	; 3
     bd2:	8c 91       	ld	r24, X
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	8c 93       	st	X, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num_first = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     bd8:	80 81       	ld	r24, Z
     bda:	8e 61       	ori	r24, 0x1E	; 30
     bdc:	80 83       	st	Z, r24
	sequencer.step_num_new = 15;
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	8e 61       	ori	r24, 0x1E	; 30
     be2:	81 83       	std	Z+1, r24	; 0x01
	sequencer.variation_mode = VAR_A;
     be4:	10 92 46 04 	sts	0x0446, r1
	turn_on(BASIC_VAR_A_LED);
     be8:	84 e2       	ldi	r24, 0x24	; 36
     bea:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
	sequencer.mode = PATTERN_FIRST;
     bee:	c0 93 75 03 	sts	0x0375, r28
	turn_on(FIRST_PART_LED);
     bf2:	8a e2       	ldi	r24, 0x2A	; 42
     bf4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
	turn_on(SCALE_3_LED);
     bf8:	87 e2       	ldi	r24, 0x27	; 39
     bfa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
	sei(); //enable global interrupts	
     bfe:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     c00:	88 e8       	ldi	r24, 0x88	; 136
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <midi_device_process>
	
	refresh();		
     c08:	0e 94 33 05 	call	0xa66	; 0xa66 <refresh>

	
	}
     c0c:	f9 cf       	rjmp	.-14     	; 0xc00 <main+0xcc>

00000c0e <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     c0e:	80 91 52 02 	lds	r24, 0x0252
     c12:	86 ff       	sbrs	r24, 6
     c14:	34 c0       	rjmp	.+104    	; 0xc7e <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     c16:	e2 e5       	ldi	r30, 0x52	; 82
     c18:	f2 e0       	ldi	r31, 0x02	; 2
     c1a:	8f 7b       	andi	r24, 0xBF	; 191
     c1c:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     c1e:	80 91 76 03 	lds	r24, 0x0376
     c22:	80 ff       	sbrs	r24, 0
     c24:	0c c0       	rjmp	.+24     	; 0xc3e <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     c26:	80 91 59 02 	lds	r24, 0x0259
     c2a:	88 23       	and	r24, r24
     c2c:	21 f0       	breq	.+8      	; 0xc36 <update_mode+0x28>
     c2e:	81 50       	subi	r24, 0x01	; 1
     c30:	80 93 59 02 	sts	0x0259, r24
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <update_mode+0x44>
     c36:	85 e0       	ldi	r24, 0x05	; 5
     c38:	80 93 59 02 	sts	0x0259, r24
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c3e:	80 91 59 02 	lds	r24, 0x0259
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	86 30       	cpi	r24, 0x06	; 6
     c46:	19 f0       	breq	.+6      	; 0xc4e <update_mode+0x40>
     c48:	80 93 59 02 	sts	0x0259, r24
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <update_mode+0x44>
     c4e:	10 92 59 02 	sts	0x0259, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c52:	20 91 59 02 	lds	r18, 0x0259
     c56:	e2 2f       	mov	r30, r18
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	e4 5f       	subi	r30, 0xF4	; 244
     c5c:	fd 4f       	sbci	r31, 0xFD	; 253
     c5e:	80 81       	ld	r24, Z
     c60:	80 93 75 03 	sts	0x0375, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     c64:	e8 e6       	ldi	r30, 0x68	; 104
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <update_mode+0x64>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	2a 95       	dec	r18
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     c76:	94 81       	ldd	r25, Z+4	; 0x04
     c78:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     c7a:	89 2b       	or	r24, r25
     c7c:	84 83       	std	Z+4, r24	; 0x04
     c7e:	08 95       	ret

00000c80 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     c80:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     c84:	90 93 5d 02 	sts	0x025D, r25
     c88:	80 93 5c 02 	sts	0x025C, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     c8c:	20 91 5a 02 	lds	r18, 0x025A
     c90:	30 91 5b 02 	lds	r19, 0x025B
     c94:	82 1b       	sub	r24, r18
     c96:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     c98:	95 95       	asr	r25
     c9a:	87 95       	ror	r24
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	82 0f       	add	r24, r18
     ca2:	93 1f       	adc	r25, r19
     ca4:	90 93 5b 02 	sts	0x025B, r25
     ca8:	80 93 5a 02 	sts	0x025A, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     cac:	23 e6       	ldi	r18, 0x63	; 99
     cae:	34 e0       	ldi	r19, 0x04	; 4
     cb0:	a9 01       	movw	r20, r18
     cb2:	48 1b       	sub	r20, r24
     cb4:	59 0b       	sbc	r21, r25
     cb6:	ca 01       	movw	r24, r20
     cb8:	e3 e7       	ldi	r30, 0x73	; 115
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	54 83       	std	Z+4, r21	; 0x04
     cbe:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     cc0:	25 81       	ldd	r18, Z+5	; 0x05
     cc2:	36 81       	ldd	r19, Z+6	; 0x06
     cc4:	42 17       	cp	r20, r18
     cc6:	53 07       	cpc	r21, r19
     cc8:	11 f0       	breq	.+4      	; 0xcce <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     cca:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     cce:	e3 e7       	ldi	r30, 0x73	; 115
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	94 81       	ldd	r25, Z+4	; 0x04
     cd6:	96 83       	std	Z+6, r25	; 0x06
     cd8:	85 83       	std	Z+5, r24	; 0x05
     cda:	08 95       	ret

00000cdc <process_step>:
	}
	
	return step_mask;
}

void process_step(void) {
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     cee:	80 91 76 03 	lds	r24, 0x0376
     cf2:	81 ff       	sbrs	r24, 1
     cf4:	9a c0       	rjmp	.+308    	; 0xe2a <process_step+0x14e>
			
			if (sequencer.mode == PATTERN_FIRST) {	
     cf6:	80 91 75 03 	lds	r24, 0x0375
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	09 f0       	breq	.+2      	; 0xd00 <process_step+0x24>
     cfe:	9e c0       	rjmp	.+316    	; 0xe3c <process_step+0x160>
				if (sequencer.next_step_flag) {
     d00:	80 91 49 04 	lds	r24, 0x0449
     d04:	82 ff       	sbrs	r24, 2
     d06:	9a c0       	rjmp	.+308    	; 0xe3c <process_step+0x160>
					sequencer.next_step_flag = 0;
     d08:	e7 e4       	ldi	r30, 0x47	; 71
     d0a:	f4 e0       	ldi	r31, 0x04	; 4
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	8b 7f       	andi	r24, 0xFB	; 251
     d10:	82 83       	std	Z+2, r24	; 0x02
					while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     d12:	80 71       	andi	r24, 0x10	; 16
     d14:	88 23       	and	r24, r24
     d16:	f1 f3       	breq	.-4      	; 0xd14 <process_step+0x38>
					PORTD |= (1<<TRIG);
     d18:	5d 9a       	sbi	0x0b, 5	; 11
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f8 e4       	ldi	r31, 0x48	; 72
     d1e:	ef 2e       	mov	r14, r31
     d20:	f4 e0       	ldi	r31, 0x04	; 4
     d22:	ff 2e       	mov	r15, r31
     d24:	f0 2d       	mov	r31, r0
     d26:	d7 01       	movw	r26, r14
     d28:	9c 91       	ld	r25, X
     d2a:	89 2f       	mov	r24, r25
     d2c:	82 95       	swap	r24
     d2e:	86 95       	lsr	r24
     d30:	87 70       	andi	r24, 0x07	; 7
     d32:	09 e4       	ldi	r16, 0x49	; 73
     d34:	14 e0       	ldi	r17, 0x04	; 4
     d36:	f8 01       	movw	r30, r16
     d38:	90 81       	ld	r25, Z
     d3a:	93 70       	andi	r25, 0x03	; 3
     d3c:	99 0f       	add	r25, r25
     d3e:	99 0f       	add	r25, r25
     d40:	99 0f       	add	r25, r25
     d42:	98 2b       	or	r25, r24
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	a9 01       	movw	r20, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <process_step+0x74>
     d4c:	44 0f       	add	r20, r20
     d4e:	55 1f       	adc	r21, r21
     d50:	9a 95       	dec	r25
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <process_step+0x70>
     d54:	ca 01       	movw	r24, r20
     d56:	e0 91 4c 04 	lds	r30, 0x044C
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	b2 96       	adiw	r30, 0x22	; 34
     d5e:	0f 2e       	mov	r0, r31
     d60:	f5 e4       	ldi	r31, 0x45	; 69
     d62:	cf 2e       	mov	r12, r31
     d64:	f4 e0       	ldi	r31, 0x04	; 4
     d66:	df 2e       	mov	r13, r31
     d68:	f0 2d       	mov	r31, r0
     d6a:	d6 01       	movw	r26, r12
     d6c:	2c 91       	ld	r18, X
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	0f 2e       	mov	r0, r31
     d74:	f7 e6       	ldi	r31, 0x67	; 103
     d76:	bf 2e       	mov	r11, r31
     d78:	f0 2d       	mov	r31, r0
     d7a:	21 70       	andi	r18, 0x01	; 1
     d7c:	b2 9e       	mul	r11, r18
     d7e:	e0 0d       	add	r30, r0
     d80:	f1 1d       	adc	r31, r1
     d82:	11 24       	eor	r1, r1
     d84:	eb 58       	subi	r30, 0x8B	; 139
     d86:	fc 4f       	sbci	r31, 0xFC	; 252
     d88:	32 81       	ldd	r19, Z+2	; 0x02
     d8a:	23 81       	ldd	r18, Z+3	; 0x03
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     d8c:	e8 e6       	ldi	r30, 0x68	; 104
     d8e:	f2 e0       	ldi	r31, 0x02	; 2
     d90:	43 2f       	mov	r20, r19
     d92:	48 23       	and	r20, r24
     d94:	40 95       	com	r20
			if (sequencer.mode == PATTERN_FIRST) {	
				if (sequencer.next_step_flag) {
					sequencer.next_step_flag = 0;
					while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d96:	38 2b       	or	r19, r24
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     d98:	34 23       	and	r19, r20
     d9a:	31 83       	std	Z+1, r19	; 0x01
					//if (sequencer.step_num_first < 8) spi_data[1] &= 255 >> (7-sequencer.step_num_first);//mask instrument LEDs above step number
					spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
					spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d9c:	82 2f       	mov	r24, r18
     d9e:	89 23       	and	r24, r25
     da0:	80 95       	com	r24
					while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
					//if (sequencer.step_num_first < 8) spi_data[1] &= 255 >> (7-sequencer.step_num_first);//mask instrument LEDs above step number
					spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     da2:	29 2b       	or	r18, r25
					spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     da4:	28 23       	and	r18, r24
     da6:	20 83       	st	Z, r18
					//spi_data[0] &= (0xFF << (15 - sequencer.step_num_first)) >> 8;
					trigger_step();
     da8:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     dac:	f6 01       	movw	r30, r12
     dae:	80 81       	ld	r24, Z
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	c8 2f       	mov	r28, r24
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	df 2f       	mov	r29, r31
     db8:	bc 9e       	mul	r11, r28
     dba:	f0 01       	movw	r30, r0
     dbc:	bd 9e       	mul	r11, r29
     dbe:	f0 0d       	add	r31, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	e9 54       	subi	r30, 0x49	; 73
     dc4:	fc 4f       	sbci	r31, 0xFC	; 252
     dc6:	d7 01       	movw	r26, r14
     dc8:	8c 91       	ld	r24, X
     dca:	98 2f       	mov	r25, r24
     dcc:	92 95       	swap	r25
     dce:	96 95       	lsr	r25
     dd0:	97 70       	andi	r25, 0x07	; 7
     dd2:	d8 01       	movw	r26, r16
     dd4:	8c 91       	ld	r24, X
     dd6:	83 70       	andi	r24, 0x03	; 3
     dd8:	88 0f       	add	r24, r24
     dda:	88 0f       	add	r24, r24
     ddc:	88 0f       	add	r24, r24
     dde:	89 2b       	or	r24, r25
     de0:	40 81       	ld	r20, Z
     de2:	51 81       	ldd	r21, Z+1	; 0x01
     de4:	62 81       	ldd	r22, Z+2	; 0x02
     de6:	73 81       	ldd	r23, Z+3	; 0x03
     de8:	8a 01       	movw	r16, r20
     dea:	9b 01       	movw	r18, r22
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <process_step+0x11a>
     dee:	36 95       	lsr	r19
     df0:	27 95       	ror	r18
     df2:	17 95       	ror	r17
     df4:	07 95       	ror	r16
     df6:	8a 95       	dec	r24
     df8:	d2 f7       	brpl	.-12     	; 0xdee <process_step+0x112>
     dfa:	00 ff       	sbrs	r16, 0
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <process_step+0x132>
						spi_data[8] |= 1<<ACCENT;
     dfe:	e8 e6       	ldi	r30, 0x68	; 104
     e00:	f2 e0       	ldi	r31, 0x02	; 2
     e02:	80 85       	ldd	r24, Z+8	; 0x08
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     e08:	84 e1       	ldi	r24, 0x14	; 20
     e0a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     e0e:	ee e6       	ldi	r30, 0x6E	; 110
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	82 60       	ori	r24, 0x02	; 2
     e16:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     e18:	85 b5       	in	r24, 0x25	; 37
     e1a:	83 60       	ori	r24, 0x03	; 3
     e1c:	85 bd       	out	0x25, r24	; 37
					sequencer.trigger_finished = 0;
     e1e:	e7 e4       	ldi	r30, 0x47	; 71
     e20:	f4 e0       	ldi	r31, 0x04	; 4
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	8f 7e       	andi	r24, 0xEF	; 239
     e26:	82 83       	std	Z+2, r24	; 0x02
     e28:	09 c0       	rjmp	.+18     	; 0xe3c <process_step+0x160>
				
				//handle patterns >16 steps here
				
			}
				
		} else if (sequencer.next_step_flag){
     e2a:	80 91 49 04 	lds	r24, 0x0449
     e2e:	82 ff       	sbrs	r24, 2
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <process_step+0x160>
			
			sequencer.next_step_flag = 0;
     e32:	e7 e4       	ldi	r30, 0x47	; 71
     e34:	f4 e0       	ldi	r31, 0x04	; 4
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	8b 7f       	andi	r24, 0xFB	; 251
     e3a:	82 83       	std	Z+2, r24	; 0x02
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	bf 90       	pop	r11
     e4e:	08 95       	ret

00000e50 <update_step_board>:

void update_step_board() {
     e50:	3f 92       	push	r3
     e52:	4f 92       	push	r4
     e54:	5f 92       	push	r5
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
	
	if (sequencer.START) {
     e72:	80 91 76 03 	lds	r24, 0x0376
     e76:	81 ff       	sbrs	r24, 1
     e78:	0d c1       	rjmp	.+538    	; 0x1094 <update_step_board+0x244>
		
			switch (sequencer.mode) {		
     e7a:	90 91 75 03 	lds	r25, 0x0375
     e7e:	91 30       	cpi	r25, 0x01	; 1
     e80:	09 f0       	breq	.+2      	; 0xe84 <update_step_board+0x34>
     e82:	08 c1       	rjmp	.+528    	; 0x1094 <update_step_board+0x244>
			
			case PATTERN_FIRST:
			
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e84:	82 ff       	sbrs	r24, 2
     e86:	27 c0       	rjmp	.+78     	; 0xed6 <update_step_board+0x86>
					
					for (int i = 0; i < 16; i++) {
						
							if (button[i].state) {
     e88:	80 91 12 02 	lds	r24, 0x0212
     e8c:	86 fd       	sbrc	r24, 6
     e8e:	0b c0       	rjmp	.+22     	; 0xea6 <update_step_board+0x56>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	fc 01       	movw	r30, r24
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	ee 5e       	subi	r30, 0xEE	; 238
     e9c:	fd 4f       	sbci	r31, 0xFD	; 253
     e9e:	20 81       	ld	r18, Z
     ea0:	26 ff       	sbrs	r18, 6
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <update_step_board+0x7c>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <update_step_board+0x5a>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     eaa:	fc 01       	movw	r30, r24
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	ee 5e       	subi	r30, 0xEE	; 238
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	90 81       	ld	r25, Z
     eb6:	9f 7b       	andi	r25, 0xBF	; 191
     eb8:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     eba:	e7 e4       	ldi	r30, 0x47	; 71
     ebc:	f4 e0       	ldi	r31, 0x04	; 4
     ebe:	8f 70       	andi	r24, 0x0F	; 15
     ec0:	88 0f       	add	r24, r24
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	91 7e       	andi	r25, 0xE1	; 225
     ec6:	89 2b       	or	r24, r25
     ec8:	81 83       	std	Z+1, r24	; 0x01
								//if (sequencer.current_step > sequencer.step_num_first)
								break;// - should we break out of here? multiple presses will mess things up, right?
     eca:	e4 c0       	rjmp	.+456    	; 0x1094 <update_step_board+0x244>
			
			case PATTERN_FIRST:
			
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < 16; i++) {
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	80 31       	cpi	r24, 0x10	; 16
     ed0:	91 05       	cpc	r25, r1
     ed2:	01 f7       	brne	.-64     	; 0xe94 <update_step_board+0x44>
     ed4:	df c0       	rjmp	.+446    	; 0x1094 <update_step_board+0x244>
						
					}
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     ed6:	80 91 4c 04 	lds	r24, 0x044C
     eda:	80 31       	cpi	r24, 0x10	; 16
     edc:	c1 f0       	breq	.+48     	; 0xf0e <update_step_board+0xbe>
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
     ede:	c0 e0       	ldi	r28, 0x00	; 0
     ee0:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
				
						toggle(i);
						button[i].state ^= button[i].state;
						sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now
     ee2:	0f 2e       	mov	r0, r31
     ee4:	f5 e4       	ldi	r31, 0x45	; 69
     ee6:	cf 2e       	mov	r12, r31
     ee8:	f4 e0       	ldi	r31, 0x04	; 4
     eea:	df 2e       	mov	r13, r31
     eec:	f0 2d       	mov	r31, r0
     eee:	0f 2e       	mov	r0, r31
     ef0:	fc e4       	ldi	r31, 0x4C	; 76
     ef2:	8f 2e       	mov	r8, r31
     ef4:	f4 e0       	ldi	r31, 0x04	; 4
     ef6:	9f 2e       	mov	r9, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	0f 2e       	mov	r0, r31
     efc:	f7 e6       	ldi	r31, 0x67	; 103
     efe:	7f 2e       	mov	r7, r31
     f00:	f0 2d       	mov	r31, r0
     f02:	aa 24       	eor	r10, r10
     f04:	a3 94       	inc	r10
     f06:	b1 2c       	mov	r11, r1
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
     f08:	07 e4       	ldi	r16, 0x47	; 71
     f0a:	14 e0       	ldi	r17, 0x04	; 4
     f0c:	6f c0       	rjmp	.+222    	; 0xfec <update_step_board+0x19c>
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     f0e:	c0 e0       	ldi	r28, 0x00	; 0
     f10:	d0 e0       	ldi	r29, 0x00	; 0
				
						if (button[i].state) {
					
							toggle(i);
							button[i].state ^= button[i].state;
							sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     f12:	0f 2e       	mov	r0, r31
     f14:	f5 e4       	ldi	r31, 0x45	; 69
     f16:	af 2e       	mov	r10, r31
     f18:	f4 e0       	ldi	r31, 0x04	; 4
     f1a:	bf 2e       	mov	r11, r31
     f1c:	f0 2d       	mov	r31, r0
     f1e:	cc 24       	eor	r12, r12
     f20:	c3 94       	inc	r12
     f22:	d1 2c       	mov	r13, r1
     f24:	0f 2e       	mov	r0, r31
     f26:	f7 e6       	ldi	r31, 0x67	; 103
     f28:	3f 2e       	mov	r3, r31
     f2a:	f0 2d       	mov	r31, r0
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f2c:	0f 2e       	mov	r0, r31
     f2e:	fc e4       	ldi	r31, 0x4C	; 76
     f30:	ef 2e       	mov	r14, r31
     f32:	f4 e0       	ldi	r31, 0x04	; 4
     f34:	ff 2e       	mov	r15, r31
     f36:	f0 2d       	mov	r31, r0
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     f38:	0f 2e       	mov	r0, r31
     f3a:	f7 e4       	ldi	r31, 0x47	; 71
     f3c:	8f 2e       	mov	r8, r31
     f3e:	f4 e0       	ldi	r31, 0x04	; 4
     f40:	9f 2e       	mov	r9, r31
     f42:	f0 2d       	mov	r31, r0
				
						if (button[i].state) {
     f44:	fe 01       	movw	r30, r28
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 5e       	subi	r30, 0xEE	; 238
     f4c:	fd 4f       	sbci	r31, 0xFD	; 253
     f4e:	80 81       	ld	r24, Z
     f50:	86 ff       	sbrs	r24, 6
     f52:	41 c0       	rjmp	.+130    	; 0xfd6 <update_step_board+0x186>
					
							toggle(i);
     f54:	8c 2f       	mov	r24, r28
     f56:	0e 94 38 04 	call	0x870	; 0x870 <toggle>
							button[i].state ^= button[i].state;
     f5a:	fe 01       	movw	r30, r28
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 5e       	subi	r30, 0xEE	; 238
     f62:	fd 4f       	sbci	r31, 0xFD	; 253
     f64:	80 81       	ld	r24, Z
     f66:	8f 7b       	andi	r24, 0xBF	; 191
     f68:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     f6a:	d5 01       	movw	r26, r10
     f6c:	8c 91       	ld	r24, X
     f6e:	08 2f       	mov	r16, r24
     f70:	01 70       	andi	r16, 0x01	; 1
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	30 9e       	mul	r3, r16
     f76:	c0 01       	movw	r24, r0
     f78:	31 9e       	mul	r3, r17
     f7a:	90 0d       	add	r25, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	fc 01       	movw	r30, r24
     f80:	e9 54       	subi	r30, 0x49	; 73
     f82:	fc 4f       	sbci	r31, 0xFC	; 252
     f84:	96 01       	movw	r18, r12
     f86:	0c 2e       	mov	r0, r28
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <update_step_board+0x13e>
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <update_step_board+0x13a>
     f92:	29 01       	movw	r4, r18
     f94:	03 2e       	mov	r0, r19
     f96:	00 0c       	add	r0, r0
     f98:	66 08       	sbc	r6, r6
     f9a:	77 08       	sbc	r7, r7
     f9c:	40 81       	ld	r20, Z
     f9e:	51 81       	ldd	r21, Z+1	; 0x01
     fa0:	62 81       	ldd	r22, Z+2	; 0x02
     fa2:	73 81       	ldd	r23, Z+3	; 0x03
     fa4:	44 25       	eor	r20, r4
     fa6:	55 25       	eor	r21, r5
     fa8:	66 25       	eor	r22, r6
     faa:	77 25       	eor	r23, r7
     fac:	40 83       	st	Z, r20
     fae:	51 83       	std	Z+1, r21	; 0x01
     fb0:	62 83       	std	Z+2, r22	; 0x02
     fb2:	73 83       	std	Z+3, r23	; 0x03
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     fb4:	d7 01       	movw	r26, r14
     fb6:	ec 91       	ld	r30, X
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	b2 96       	adiw	r30, 0x22	; 34
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	8e 0f       	add	r24, r30
     fc2:	9f 1f       	adc	r25, r31
     fc4:	fc 01       	movw	r30, r24
     fc6:	eb 58       	subi	r30, 0x8B	; 139
     fc8:	fc 4f       	sbci	r31, 0xFC	; 252
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	28 27       	eor	r18, r24
     fd0:	39 27       	eor	r19, r25
     fd2:	33 83       	std	Z+3, r19	; 0x03
     fd4:	22 83       	std	Z+2, r18	; 0x02
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     fd6:	21 96       	adiw	r28, 0x01	; 1
     fd8:	f4 01       	movw	r30, r8
     fda:	80 81       	ld	r24, Z
     fdc:	86 95       	lsr	r24
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	8c 17       	cp	r24, r28
     fe4:	9d 07       	cpc	r25, r29
     fe6:	0c f0       	brlt	.+2      	; 0xfea <update_step_board+0x19a>
     fe8:	ad cf       	rjmp	.-166    	; 0xf44 <update_step_board+0xf4>
     fea:	54 c0       	rjmp	.+168    	; 0x1094 <update_step_board+0x244>
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
     fec:	fe 01       	movw	r30, r28
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	ee 5e       	subi	r30, 0xEE	; 238
     ff4:	fd 4f       	sbci	r31, 0xFD	; 253
     ff6:	80 81       	ld	r24, Z
     ff8:	86 ff       	sbrs	r24, 6
     ffa:	42 c0       	rjmp	.+132    	; 0x1080 <update_step_board+0x230>
				
						toggle(i);
     ffc:	8c 2f       	mov	r24, r28
     ffe:	0e 94 38 04 	call	0x870	; 0x870 <toggle>
						button[i].state ^= button[i].state;
    1002:	fe 01       	movw	r30, r28
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	df 01       	movw	r26, r30
    100a:	ae 5e       	subi	r26, 0xEE	; 238
    100c:	bd 4f       	sbci	r27, 0xFD	; 253
    100e:	8c 91       	ld	r24, X
    1010:	8f 7b       	andi	r24, 0xBF	; 191
    1012:	8c 93       	st	X, r24
						sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now
    1014:	d6 01       	movw	r26, r12
    1016:	8c 91       	ld	r24, X
    1018:	80 fb       	bst	r24, 0
    101a:	ee 24       	eor	r14, r14
    101c:	e0 f8       	bld	r14, 0
    101e:	f1 2c       	mov	r15, r1
    1020:	d4 01       	movw	r26, r8
    1022:	4c 91       	ld	r20, X
    1024:	24 2f       	mov	r18, r20
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	7e 9c       	mul	r7, r14
    102a:	c0 01       	movw	r24, r0
    102c:	7f 9c       	mul	r7, r15
    102e:	90 0d       	add	r25, r0
    1030:	11 24       	eor	r1, r1
    1032:	e8 0f       	add	r30, r24
    1034:	f9 1f       	adc	r31, r25
    1036:	eb 58       	subi	r30, 0x8B	; 139
    1038:	fc 4f       	sbci	r31, 0xFC	; 252
    103a:	b5 01       	movw	r22, r10
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <update_step_board+0x1f2>
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	4a 95       	dec	r20
    1044:	e2 f7       	brpl	.-8      	; 0x103e <update_step_board+0x1ee>
    1046:	ab 01       	movw	r20, r22
    1048:	62 81       	ldd	r22, Z+2	; 0x02
    104a:	73 81       	ldd	r23, Z+3	; 0x03
    104c:	46 27       	eor	r20, r22
    104e:	57 27       	eor	r21, r23
    1050:	53 83       	std	Z+3, r21	; 0x03
    1052:	42 83       	std	Z+2, r20	; 0x02
						sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    1054:	f9 01       	movw	r30, r18
    1056:	b2 96       	adiw	r30, 0x22	; 34
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	8e 0f       	add	r24, r30
    105e:	9f 1f       	adc	r25, r31
    1060:	fc 01       	movw	r30, r24
    1062:	eb 58       	subi	r30, 0x8B	; 139
    1064:	fc 4f       	sbci	r31, 0xFC	; 252
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	95 01       	movw	r18, r10
    106c:	0c 2e       	mov	r0, r28
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <update_step_board+0x224>
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <update_step_board+0x220>
    1078:	82 27       	eor	r24, r18
    107a:	93 27       	eor	r25, r19
    107c:	93 83       	std	Z+3, r25	; 0x03
    107e:	82 83       	std	Z+2, r24	; 0x02
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
    1080:	21 96       	adiw	r28, 0x01	; 1
    1082:	d8 01       	movw	r26, r16
    1084:	8c 91       	ld	r24, X
    1086:	86 95       	lsr	r24
    1088:	8f 70       	andi	r24, 0x0F	; 15
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	8c 17       	cp	r24, r28
    108e:	9d 07       	cpc	r25, r29
    1090:	0c f0       	brlt	.+2      	; 0x1094 <update_step_board+0x244>
    1092:	ac cf       	rjmp	.-168    	; 0xfec <update_step_board+0x19c>
	} else {
		
		//handle what here? changing selected pattern or rhythm? 
		
	}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	df 90       	pop	r13
    10a2:	cf 90       	pop	r12
    10a4:	bf 90       	pop	r11
    10a6:	af 90       	pop	r10
    10a8:	9f 90       	pop	r9
    10aa:	8f 90       	pop	r8
    10ac:	7f 90       	pop	r7
    10ae:	6f 90       	pop	r6
    10b0:	5f 90       	pop	r5
    10b2:	4f 90       	pop	r4
    10b4:	3f 90       	pop	r3
    10b6:	08 95       	ret

000010b8 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    10b8:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    10bc:	ed ea       	ldi	r30, 0xAD	; 173
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 23       	and	r24, r24
    10c4:	ec f7       	brge	.-6      	; 0x10c0 <spi_shift_byte+0x8>
	return SPDR1;
    10c6:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    10ca:	08 95       	ret

000010cc <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    10d0:	c8 e6       	ldi	r28, 0x68	; 104
    10d2:	d2 e0       	ldi	r29, 0x02	; 2
    10d4:	88 81       	ld	r24, Y
    10d6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    1104:	88 85       	ldd	r24, Y+8	; 0x08
    1106:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    110a:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    110c:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <read_switches>:

void read_switches(void) { //reads switch data
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    1118:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
    1120:	c3 e6       	ldi	r28, 0x63	; 99
    1122:	d2 e0       	ldi	r29, 0x02	; 2
    1124:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
    112c:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
    1134:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
    113c:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <spi_shift_byte>
    1144:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    1146:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    1148:	28 81       	ld	r18, Y
    114a:	92 2f       	mov	r25, r18
    114c:	96 95       	lsr	r25
    114e:	e6 e7       	ldi	r30, 0x76	; 118
    1150:	f3 e0       	ldi	r31, 0x03	; 3
    1152:	30 81       	ld	r19, Z
    1154:	90 fb       	bst	r25, 0
    1156:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	49 2f       	mov	r20, r25
    115c:	42 95       	swap	r20
    115e:	4f 70       	andi	r20, 0x0F	; 15
    1160:	40 fb       	bst	r20, 0
    1162:	32 f9       	bld	r19, 2
    1164:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    1166:	ee e5       	ldi	r30, 0x5E	; 94
    1168:	f2 e0       	ldi	r31, 0x02	; 2
    116a:	30 81       	ld	r19, Z
    116c:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    116e:	32 27       	eor	r19, r18
    1170:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1172:	23 23       	and	r18, r19
    1174:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    1176:	31 81       	ldd	r19, Z+1	; 0x01
    1178:	29 81       	ldd	r18, Y+1	; 0x01
    117a:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    117c:	32 27       	eor	r19, r18
    117e:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    1180:	23 23       	and	r18, r19
    1182:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1184:	22 81       	ldd	r18, Z+2	; 0x02
    1186:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    1188:	29 27       	eor	r18, r25
    118a:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    118c:	92 23       	and	r25, r18
    118e:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    1190:	23 81       	ldd	r18, Z+3	; 0x03
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    1196:	29 27       	eor	r18, r25
    1198:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    119a:	92 23       	and	r25, r18
    119c:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    119e:	94 81       	ldd	r25, Z+4	; 0x04
    11a0:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    11a2:	98 27       	eor	r25, r24
    11a4:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    11a6:	89 23       	and	r24, r25
    11a8:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    11b4:	da 01       	movw	r26, r20
    11b6:	aa 0f       	add	r26, r26
    11b8:	bb 1f       	adc	r27, r27
    11ba:	ae 5e       	subi	r26, 0xEE	; 238
    11bc:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    11be:	8c 91       	ld	r24, X
    11c0:	e8 2f       	mov	r30, r24
    11c2:	e6 95       	lsr	r30
    11c4:	e6 95       	lsr	r30
    11c6:	e6 95       	lsr	r30
    11c8:	e7 70       	andi	r30, 0x07	; 7
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ed 59       	subi	r30, 0x9D	; 157
    11ce:	fd 4f       	sbci	r31, 0xFD	; 253
    11d0:	20 81       	ld	r18, Z
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	98 2f       	mov	r25, r24
    11d6:	97 70       	andi	r25, 0x07	; 7
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <parse_switch_data+0x2e>
    11da:	35 95       	asr	r19
    11dc:	27 95       	ror	r18
    11de:	9a 95       	dec	r25
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <parse_switch_data+0x2a>
    11e2:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    11e4:	86 fb       	bst	r24, 6
    11e6:	99 27       	eor	r25, r25
    11e8:	90 f9       	bld	r25, 0
    11ea:	29 27       	eor	r18, r25
    11ec:	20 fb       	bst	r18, 0
    11ee:	86 f9       	bld	r24, 6
    11f0:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    11f2:	4f 5f       	subi	r20, 0xFF	; 255
    11f4:	5f 4f       	sbci	r21, 0xFF	; 255
    11f6:	43 32       	cpi	r20, 0x23	; 35
    11f8:	51 05       	cpc	r21, r1
    11fa:	e1 f6       	brne	.-72     	; 0x11b4 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    11fc:	08 95       	ret

000011fe <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    11fe:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    1200:	80 91 71 02 	lds	r24, 0x0271
    1204:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    1206:	89 27       	eor	r24, r25
    1208:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    120c:	89 23       	and	r24, r25
    120e:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
    1212:	e6 e7       	ldi	r30, 0x76	; 118
    1214:	f3 e0       	ldi	r31, 0x03	; 3
    1216:	90 81       	ld	r25, Z
    1218:	91 fb       	bst	r25, 1
    121a:	22 27       	eor	r18, r18
    121c:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    121e:	86 95       	lsr	r24
    1220:	82 27       	eor	r24, r18
    1222:	80 fb       	bst	r24, 0
    1224:	91 f9       	bld	r25, 1
    1226:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    1228:	91 ff       	sbrs	r25, 1
    122a:	32 c0       	rjmp	.+100    	; 0x1290 <check_start_stop_tap+0x92>
    122c:	21 11       	cpse	r18, r1
    122e:	32 c0       	rjmp	.+100    	; 0x1294 <check_start_stop_tap+0x96>
		
		sequencer.current_step = 0;
    1230:	e7 e4       	ldi	r30, 0x47	; 71
    1232:	f4 e0       	ldi	r31, 0x04	; 4
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	8f 71       	andi	r24, 0x1F	; 31
    1238:	81 83       	std	Z+1, r24	; 0x01
    123a:	82 81       	ldd	r24, Z+2	; 0x02
		sequencer.next_step_flag = 1;
    123c:	8c 7f       	andi	r24, 0xFC	; 252
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	82 83       	std	Z+2, r24	; 0x02
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1242:	10 92 74 02 	sts	0x0274, r1
		sequencer.var_change = 0;
    1246:	80 81       	ld	r24, Z
    1248:	8e 7f       	andi	r24, 0xFE	; 254
    124a:	80 83       	st	Z, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    124c:	80 91 46 04 	lds	r24, 0x0446
    1250:	8d 7f       	andi	r24, 0xFD	; 253
    1252:	31 f4       	brne	.+12     	; 0x1260 <check_start_stop_tap+0x62>
			
			sequencer.variation = VAR_A; //start on variation A
    1254:	e5 e4       	ldi	r30, 0x45	; 69
    1256:	f4 e0       	ldi	r31, 0x04	; 4
    1258:	80 81       	ld	r24, Z
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	80 83       	st	Z, r24
    125e:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
    1260:	e5 e4       	ldi	r30, 0x45	; 69
    1262:	f4 e0       	ldi	r31, 0x04	; 4
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    126a:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
    126c:	0e 94 4b 04 	call	0x896	; 0x896 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1270:	80 91 4c 04 	lds	r24, 0x044C
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	e8 0f       	add	r30, r24
    127e:	f9 1f       	adc	r31, r25
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	e0 50       	subi	r30, 0x00	; 0
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	85 81       	ldd	r24, Z+5	; 0x05
    128a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
    128e:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1290:	21 30       	cpi	r18, 0x01	; 1
    1292:	61 f3       	breq	.-40     	; 0x126c <check_start_stop_tap+0x6e>
    1294:	08 95       	ret

00001296 <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
    1296:	3f 92       	push	r3
    1298:	4f 92       	push	r4
    129a:	5f 92       	push	r5
    129c:	6f 92       	push	r6
    129e:	7f 92       	push	r7
    12a0:	8f 92       	push	r8
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	0f 2e       	mov	r0, r31
    12ba:	f5 e0       	ldi	r31, 0x05	; 5
    12bc:	ef 2e       	mov	r14, r31
    12be:	f1 e0       	ldi	r31, 0x01	; 1
    12c0:	ff 2e       	mov	r15, r31
    12c2:	f0 2d       	mov	r31, r0
    12c4:	0f 2e       	mov	r0, r31
    12c6:	fb e3       	ldi	r31, 0x3B	; 59
    12c8:	8f 2e       	mov	r8, r31
    12ca:	f1 e0       	ldi	r31, 0x01	; 1
    12cc:	9f 2e       	mov	r9, r31
    12ce:	f0 2d       	mov	r31, r0
    12d0:	02 e1       	ldi	r16, 0x12	; 18
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    12d4:	c1 e1       	ldi	r28, 0x11	; 17
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	c1 2c       	mov	r12, r1
    12da:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    12dc:	0f 2e       	mov	r0, r31
    12de:	fc e4       	ldi	r31, 0x4C	; 76
    12e0:	af 2e       	mov	r10, r31
    12e2:	f4 e0       	ldi	r31, 0x04	; 4
    12e4:	bf 2e       	mov	r11, r31
    12e6:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    12e8:	0f 2e       	mov	r0, r31
    12ea:	ff e5       	ldi	r31, 0x5F	; 95
    12ec:	4f 2e       	mov	r4, r31
    12ee:	f1 e0       	ldi	r31, 0x01	; 1
    12f0:	5f 2e       	mov	r5, r31
    12f2:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    12f4:	0f 2e       	mov	r0, r31
    12f6:	ff e0       	ldi	r31, 0x0F	; 15
    12f8:	3f 2e       	mov	r3, r31
    12fa:	f0 2d       	mov	r31, r0
    12fc:	0c c0       	rjmp	.+24     	; 0x1316 <check_inst_switches+0x80>
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	c8 1a       	sub	r12, r24
    1302:	d8 0a       	sbc	r13, r24
    1304:	21 96       	adiw	r28, 0x01	; 1
    1306:	0f 5f       	subi	r16, 0xFF	; 255
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	a6 e0       	ldi	r26, 0x06	; 6
    130c:	ea 0e       	add	r14, r26
    130e:	f1 1c       	adc	r15, r1
    1310:	b6 e0       	ldi	r27, 0x06	; 6
    1312:	8b 0e       	add	r8, r27
    1314:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    1316:	fe 01       	movw	r30, r28
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	ee 5e       	subi	r30, 0xEE	; 238
    131e:	fd 4f       	sbci	r31, 0xFD	; 253
    1320:	80 81       	ld	r24, Z
    1322:	86 ff       	sbrs	r24, 6
    1324:	37 c0       	rjmp	.+110    	; 0x1394 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1326:	fe 01       	movw	r30, r28
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	ee 5e       	subi	r30, 0xEE	; 238
    132e:	fd 4f       	sbci	r31, 0xFD	; 253
    1330:	8f 7b       	andi	r24, 0xBF	; 191
    1332:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    1334:	0e 94 4b 04 	call	0x896	; 0x896 <turn_off_all_inst_leds>
    1338:	f7 01       	movw	r30, r14
    133a:	d7 01       	movw	r26, r14
    133c:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    133e:	8c 91       	ld	r24, X
    1340:	8f 3f       	cpi	r24, 0xFF	; 255
    1342:	a9 f0       	breq	.+42     	; 0x136e <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1344:	d5 01       	movw	r26, r10
    1346:	8c 91       	ld	r24, X
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	c8 16       	cp	r12, r24
    134c:	d9 06       	cpc	r13, r25
    134e:	49 f4       	brne	.+18     	; 0x1362 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1350:	f4 01       	movw	r30, r8
    1352:	80 81       	ld	r24, Z
    1354:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
    1358:	89 e0       	ldi	r24, 0x09	; 9
    135a:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    135c:	d5 01       	movw	r26, r10
    135e:	8c 93       	st	X, r24
    1360:	19 c0       	rjmp	.+50     	; 0x1394 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1362:	80 81       	ld	r24, Z
    1364:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    1368:	f5 01       	movw	r30, r10
    136a:	c0 82       	st	Z, r12
    136c:	13 c0       	rjmp	.+38     	; 0x1394 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    136e:	d5 01       	movw	r26, r10
    1370:	8c 91       	ld	r24, X
    1372:	86 30       	cpi	r24, 0x06	; 6
    1374:	51 f4       	brne	.+20     	; 0x138a <check_inst_switches+0xf4>
    1376:	c7 31       	cpi	r28, 0x17	; 23
    1378:	d1 05       	cpc	r29, r1
    137a:	39 f4       	brne	.+14     	; 0x138a <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    137c:	f2 01       	movw	r30, r4
    137e:	80 81       	ld	r24, Z
    1380:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
					sequencer.current_inst = MA;
    1384:	d5 01       	movw	r26, r10
    1386:	3c 92       	st	X, r3
    1388:	ba cf       	rjmp	.-140    	; 0x12fe <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    138a:	80 81       	ld	r24, Z
    138c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1390:	f5 01       	movw	r30, r10
    1392:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1394:	0c 31       	cpi	r16, 0x1C	; 28
    1396:	11 05       	cpc	r17, r1
    1398:	0c f4       	brge	.+2      	; 0x139c <check_inst_switches+0x106>
    139a:	b1 cf       	rjmp	.-158    	; 0x12fe <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    139c:	80 91 32 02 	lds	r24, 0x0232
    13a0:	86 ff       	sbrs	r24, 6
    13a2:	0c c0       	rjmp	.+24     	; 0x13bc <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    13a4:	e2 e3       	ldi	r30, 0x32	; 50
    13a6:	f2 e0       	ldi	r31, 0x02	; 2
    13a8:	8f 7b       	andi	r24, 0xBF	; 191
    13aa:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    13ac:	0e 94 4b 04 	call	0x896	; 0x896 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    13b0:	84 e1       	ldi	r24, 0x14	; 20
    13b2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
		sequencer.current_inst = AC;
    13b6:	80 e1       	ldi	r24, 0x10	; 16
    13b8:	80 93 4c 04 	sts	0x044C, r24
	}
	
}	
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	9f 90       	pop	r9
    13d2:	8f 90       	pop	r8
    13d4:	7f 90       	pop	r7
    13d6:	6f 90       	pop	r6
    13d8:	5f 90       	pop	r5
    13da:	4f 90       	pop	r4
    13dc:	3f 90       	pop	r3
    13de:	08 95       	ret

000013e0 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    13e0:	80 91 4e 02 	lds	r24, 0x024E
    13e4:	86 ff       	sbrs	r24, 6
    13e6:	29 c0       	rjmp	.+82     	; 0x143a <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f2 e0       	ldi	r31, 0x02	; 2
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    13f0:	e6 e4       	ldi	r30, 0x46	; 70
    13f2:	f4 e0       	ldi	r31, 0x04	; 4
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 5f       	subi	r24, 0xFF	; 255
    13f8:	80 83       	st	Z, r24
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	39 f4       	brne	.+14     	; 0x140c <check_variation_switches+0x2c>
    13fe:	10 92 46 04 	sts	0x0446, r1
		if (sequencer.START) {
    1402:	80 91 76 03 	lds	r24, 0x0376
    1406:	81 ff       	sbrs	r24, 1
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <check_variation_switches+0x44>
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <check_variation_switches+0x34>
    140c:	90 91 76 03 	lds	r25, 0x0376
    1410:	91 ff       	sbrs	r25, 1
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <check_variation_switches+0x40>
			
			 sequencer.var_change = 1; //set change flag to be handled when new measure starts
    1414:	e7 e4       	ldi	r30, 0x47	; 71
    1416:	f4 e0       	ldi	r31, 0x04	; 4
    1418:	80 81       	ld	r24, Z
    141a:	81 60       	ori	r24, 0x01	; 1
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1420:	8d 7f       	andi	r24, 0xFD	; 253
    1422:	31 f4       	brne	.+12     	; 0x1430 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1424:	e5 e4       	ldi	r30, 0x45	; 69
    1426:	f4 e0       	ldi	r31, 0x04	; 4
    1428:	80 81       	ld	r24, Z
    142a:	8e 7f       	andi	r24, 0xFE	; 254
    142c:	80 83       	st	Z, r24
    142e:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1430:	e5 e4       	ldi	r30, 0x45	; 69
    1432:	f4 e0       	ldi	r31, 0x04	; 4
    1434:	80 81       	ld	r24, Z
    1436:	81 60       	ori	r24, 0x01	; 1
    1438:	80 83       	st	Z, r24
    143a:	08 95       	ret

0000143c <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1448:	80 91 76 03 	lds	r24, 0x0376
    144c:	86 70       	andi	r24, 0x06	; 6
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	e1 f5       	brne	.+120    	; 0x14ca <check_clear_switch+0x8e>
		
		switch (sequencer.mode) {
    1452:	80 91 75 03 	lds	r24, 0x0375
    1456:	81 11       	cpse	r24, r1
    1458:	3f c0       	rjmp	.+126    	; 0x14d8 <check_clear_switch+0x9c>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    145a:	8c e1       	ldi	r24, 0x1C	; 28
    145c:	0e 94 38 04 	call	0x870	; 0x870 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1460:	e5 e4       	ldi	r30, 0x45	; 69
    1462:	f4 e0       	ldi	r31, 0x04	; 4
    1464:	80 81       	ld	r24, Z
    1466:	80 fb       	bst	r24, 0
    1468:	ee 24       	eor	r14, r14
    146a:	e0 f8       	bld	r14, 0
    146c:	f1 2c       	mov	r15, r1
    146e:	87 e6       	ldi	r24, 0x67	; 103
    1470:	8e 9d       	mul	r24, r14
    1472:	d0 01       	movw	r26, r0
    1474:	8f 9d       	mul	r24, r15
    1476:	b0 0d       	add	r27, r0
    1478:	11 24       	eor	r1, r1
    147a:	a9 58       	subi	r26, 0x89	; 137
    147c:	bc 4f       	sbci	r27, 0xFC	; 252
    147e:	90 e4       	ldi	r25, 0x40	; 64
    1480:	ed 01       	movw	r28, r26
    1482:	19 92       	st	Y+, r1
    1484:	9a 95       	dec	r25
    1486:	e9 f7       	brne	.-6      	; 0x1482 <check_clear_switch+0x46>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    1488:	90 81       	ld	r25, Z
    148a:	09 2f       	mov	r16, r25
    148c:	01 70       	andi	r16, 0x01	; 1
    148e:	10 e0       	ldi	r17, 0x00	; 0
    1490:	80 9f       	mul	r24, r16
    1492:	d0 01       	movw	r26, r0
    1494:	81 9f       	mul	r24, r17
    1496:	b0 0d       	add	r27, r0
    1498:	11 24       	eor	r1, r1
    149a:	a5 54       	subi	r26, 0x45	; 69
    149c:	bc 4f       	sbci	r27, 0xFC	; 252
    149e:	92 e2       	ldi	r25, 0x22	; 34
    14a0:	ed 01       	movw	r28, r26
    14a2:	19 92       	st	Y+, r1
    14a4:	9a 95       	dec	r25
    14a6:	e9 f7       	brne	.-6      	; 0x14a2 <check_clear_switch+0x66>
				sequencer.pattern[sequencer.variation].accent = 0;				
    14a8:	90 81       	ld	r25, Z
    14aa:	91 70       	andi	r25, 0x01	; 1
    14ac:	c9 2f       	mov	r28, r25
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	d9 2f       	mov	r29, r25
    14b2:	8c 9f       	mul	r24, r28
    14b4:	f0 01       	movw	r30, r0
    14b6:	8d 9f       	mul	r24, r29
    14b8:	f0 0d       	add	r31, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	e9 54       	subi	r30, 0x49	; 73
    14be:	fc 4f       	sbci	r31, 0xFC	; 252
    14c0:	10 82       	st	Z, r1
    14c2:	11 82       	std	Z+1, r1	; 0x01
    14c4:	12 82       	std	Z+2, r1	; 0x02
    14c6:	13 82       	std	Z+3, r1	; 0x03
				break;
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <check_clear_switch+0x9c>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    14ca:	80 91 75 03 	lds	r24, 0x0375
    14ce:	81 11       	cpse	r24, r1
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <check_clear_switch+0x9c>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    14d2:	8c e1       	ldi	r24, 0x1C	; 28
    14d4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <turn_on>
		}
		
	}
	
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	08 95       	ret

000014e6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    14e6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    14e8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    14ea:	74 83       	std	Z+4, r23	; 0x04
    14ec:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    14ee:	11 82       	std	Z+1, r1	; 0x01
    14f0:	10 82       	st	Z, r1
    14f2:	08 95       	ret

000014f4 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1502:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <store_and_clear_interrupt>
    1506:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1508:	f9 80       	ldd	r15, Y+1	; 0x01
    150a:	4f 2d       	mov	r20, r15
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	ca 01       	movw	r24, r20
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	2a 81       	ldd	r18, Y+2	; 0x02
    1514:	62 2f       	mov	r22, r18
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divmodhi4>
    151c:	28 81       	ld	r18, Y
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	82 17       	cp	r24, r18
    1522:	93 07       	cpc	r25, r19
    1524:	29 f4       	brne	.+10     	; 0x1530 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1526:	81 2f       	mov	r24, r17
    1528:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <restore_interrupt_setting>
      return false;
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	12 c0       	rjmp	.+36     	; 0x1554 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1530:	eb 81       	ldd	r30, Y+3	; 0x03
    1532:	fc 81       	ldd	r31, Y+4	; 0x04
    1534:	ef 0d       	add	r30, r15
    1536:	f1 1d       	adc	r31, r1
    1538:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    153a:	29 81       	ldd	r18, Y+1	; 0x01
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	c9 01       	movw	r24, r18
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	6a 81       	ldd	r22, Y+2	; 0x02
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divmodhi4>
    154a:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    154c:	81 2f       	mov	r24, r17
    154e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <restore_interrupt_setting>
      return true;
    1552:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	08 95       	ret

00001560 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1566:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    156a:	39 81       	ldd	r19, Y+1	; 0x01
    156c:	28 81       	ld	r18, Y
    156e:	32 17       	cp	r19, r18
    1570:	18 f0       	brcs	.+6      	; 0x1578 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1572:	c3 2f       	mov	r28, r19
    1574:	c2 1b       	sub	r28, r18
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <bytequeue_length+0x20>
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	c3 2f       	mov	r28, r19
    157c:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    157e:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1580:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <restore_interrupt_setting>
   return len;
}
    1584:	8c 2f       	mov	r24, r28
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    158c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    158e:	80 81       	ld	r24, Z
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	9b 01       	movw	r18, r22
    1594:	28 0f       	add	r18, r24
    1596:	31 1d       	adc	r19, r1
    1598:	c9 01       	movw	r24, r18
    159a:	62 81       	ldd	r22, Z+2	; 0x02
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divmodhi4>
    15a2:	03 80       	ldd	r0, Z+3	; 0x03
    15a4:	f4 81       	ldd	r31, Z+4	; 0x04
    15a6:	e0 2d       	mov	r30, r0
    15a8:	e8 0f       	add	r30, r24
    15aa:	f9 1f       	adc	r31, r25
}
    15ac:	80 81       	ld	r24, Z
    15ae:	08 95       	ret

000015b0 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	ec 01       	movw	r28, r24
    15b8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    15ba:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <store_and_clear_interrupt>
    15be:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    15c0:	88 81       	ld	r24, Y
    15c2:	21 2f       	mov	r18, r17
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	b9 01       	movw	r22, r18
    15c8:	68 0f       	add	r22, r24
    15ca:	71 1d       	adc	r23, r1
    15cc:	cb 01       	movw	r24, r22
    15ce:	6a 81       	ldd	r22, Y+2	; 0x02
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divmodhi4>
    15d6:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    15d8:	84 2f       	mov	r24, r20
    15da:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <restore_interrupt_setting>
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	08 95       	ret

000015e6 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    15e6:	8f b7       	in	r24, 0x3f	; 63
   cli();
    15e8:	f8 94       	cli
   return sreg;
}
    15ea:	08 95       	ret

000015ec <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    15ec:	8f bf       	out	0x3f, r24	; 63
    15ee:	08 95       	ret

000015f0 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    15f0:	88 1f       	adc	r24, r24
    15f2:	88 27       	eor	r24, r24
    15f4:	88 1f       	adc	r24, r24
    15f6:	08 95       	ret

000015f8 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	88 3f       	cpi	r24, 0xF8	; 248
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <midi_is_realtime+0x8>
    15fe:	90 e0       	ldi	r25, 0x00	; 0
}
    1600:	89 2f       	mov	r24, r25
    1602:	08 95       	ret

00001604 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1604:	98 2f       	mov	r25, r24
    1606:	90 7f       	andi	r25, 0xF0	; 240
    1608:	90 3c       	cpi	r25, 0xC0	; 192
    160a:	b1 f0       	breq	.+44     	; 0x1638 <midi_packet_length+0x34>
    160c:	58 f4       	brcc	.+22     	; 0x1624 <midi_packet_length+0x20>
    160e:	90 39       	cpi	r25, 0x90	; 144
    1610:	41 f1       	breq	.+80     	; 0x1662 <midi_packet_length+0x5e>
    1612:	18 f4       	brcc	.+6      	; 0x161a <midi_packet_length+0x16>
    1614:	90 38       	cpi	r25, 0x80	; 128
    1616:	19 f5       	brne	.+70     	; 0x165e <midi_packet_length+0x5a>
    1618:	24 c0       	rjmp	.+72     	; 0x1662 <midi_packet_length+0x5e>
    161a:	90 3a       	cpi	r25, 0xA0	; 160
    161c:	11 f1       	breq	.+68     	; 0x1662 <midi_packet_length+0x5e>
    161e:	90 3b       	cpi	r25, 0xB0	; 176
    1620:	f1 f4       	brne	.+60     	; 0x165e <midi_packet_length+0x5a>
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <midi_packet_length+0x5e>
    1624:	90 3e       	cpi	r25, 0xE0	; 224
    1626:	e9 f0       	breq	.+58     	; 0x1662 <midi_packet_length+0x5e>
    1628:	18 f4       	brcc	.+6      	; 0x1630 <midi_packet_length+0x2c>
    162a:	90 3d       	cpi	r25, 0xD0	; 208
    162c:	29 f0       	breq	.+10     	; 0x1638 <midi_packet_length+0x34>
    162e:	17 c0       	rjmp	.+46     	; 0x165e <midi_packet_length+0x5a>
    1630:	90 3f       	cpi	r25, 0xF0	; 240
    1632:	21 f0       	breq	.+8      	; 0x163c <midi_packet_length+0x38>
    1634:	93 3f       	cpi	r25, 0xF3	; 243
    1636:	99 f4       	brne	.+38     	; 0x165e <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	08 95       	ret
      case 0xF0:
         switch(status) {
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	fc 01       	movw	r30, r24
    1640:	e1 5f       	subi	r30, 0xF1	; 241
    1642:	f1 09       	sbc	r31, r1
    1644:	ef 30       	cpi	r30, 0x0F	; 15
    1646:	f1 05       	cpc	r31, r1
    1648:	40 f4       	brcc	.+16     	; 0x165a <midi_packet_length+0x56>
    164a:	e6 5a       	subi	r30, 0xA6	; 166
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 95       	ret
         }
      default:
         return UNDEFINED;
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1668:	08 95       	ret

0000166a <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    166a:	fc 01       	movw	r30, r24
    166c:	75 83       	std	Z+5, r23	; 0x05
    166e:	64 83       	std	Z+4, r22	; 0x04
    1670:	08 95       	ret

00001672 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1672:	fc 01       	movw	r30, r24
    1674:	77 83       	std	Z+7, r23	; 0x07
    1676:	66 83       	std	Z+6, r22	; 0x06
    1678:	08 95       	ret

0000167a <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    167a:	fc 01       	movw	r30, r24
    167c:	77 8b       	std	Z+23, r23	; 0x17
    167e:	66 8b       	std	Z+22, r22	; 0x16
    1680:	08 95       	ret

00001682 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1688:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    168a:	1f a2       	std	Y+39, r1	; 0x27
    168c:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    168e:	bc 01       	movw	r22, r24
    1690:	68 5d       	subi	r22, 0xD8	; 216
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	40 ec       	ldi	r20, 0xC0	; 192
    1696:	88 51       	subi	r24, 0x18	; 24
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    169e:	1b 82       	std	Y+3, r1	; 0x03
    16a0:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    16a2:	1d 82       	std	Y+5, r1	; 0x05
    16a4:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    16a6:	1f 82       	std	Y+7, r1	; 0x07
    16a8:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    16aa:	19 86       	std	Y+9, r1	; 0x09
    16ac:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    16ae:	1b 86       	std	Y+11, r1	; 0x0b
    16b0:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    16b2:	1d 86       	std	Y+13, r1	; 0x0d
    16b4:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    16b6:	1f 86       	std	Y+15, r1	; 0x0f
    16b8:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    16ba:	19 8a       	std	Y+17, r1	; 0x11
    16bc:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    16be:	1b 8a       	std	Y+19, r1	; 0x13
    16c0:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    16c2:	1d 8a       	std	Y+21, r1	; 0x15
    16c4:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    16c6:	1f 8a       	std	Y+23, r1	; 0x17
    16c8:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    16ca:	19 8e       	std	Y+25, r1	; 0x19
    16cc:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    16ce:	1b 8e       	std	Y+27, r1	; 0x1b
    16d0:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    16d2:	1d 8e       	std	Y+29, r1	; 0x1d
    16d4:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    16d6:	1f 8e       	std	Y+31, r1	; 0x1f
    16d8:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    16da:	19 a2       	std	Y+33, r1	; 0x21
    16dc:	18 a2       	std	Y+32, r1	; 0x20
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    16f0:	66 23       	and	r22, r22
    16f2:	99 f0       	breq	.+38     	; 0x171a <midi_device_input+0x36>
    16f4:	ea 01       	movw	r28, r20
    16f6:	61 50       	subi	r22, 0x01	; 1
    16f8:	06 2f       	mov	r16, r22
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	0f 5f       	subi	r16, 0xFF	; 255
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	04 0f       	add	r16, r20
    1702:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    1704:	7c 01       	movw	r14, r24
    1706:	28 ee       	ldi	r18, 0xE8	; 232
    1708:	e2 0e       	add	r14, r18
    170a:	f1 1c       	adc	r15, r1
    170c:	69 91       	ld	r22, Y+
    170e:	c7 01       	movw	r24, r14
    1710:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1714:	c0 17       	cp	r28, r16
    1716:	d1 07       	cpc	r29, r17
    1718:	c9 f7       	brne	.-14     	; 0x170c <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	08 95       	ret

00001728 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	00 d0       	rcall	.+0      	; 0x173e <midi_input_callbacks+0x16>
    173e:	1f 92       	push	r1
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	7c 01       	movw	r14, r24
    1746:	6b 01       	movw	r12, r22
    1748:	14 2f       	mov	r17, r20
    174a:	b2 2e       	mov	r11, r18
    174c:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    174e:	dc 01       	movw	r26, r24
    1750:	95 96       	adiw	r26, 0x25	; 37
    1752:	8c 91       	ld	r24, X
    1754:	95 97       	sbiw	r26, 0x25	; 37
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	11 f5       	brne	.+68     	; 0x179e <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    175a:	5a 96       	adiw	r26, 0x1a	; 26
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	5b 97       	sbiw	r26, 0x1b	; 27
    1762:	30 97       	sbiw	r30, 0x00	; 0
    1764:	09 f4       	brne	.+2      	; 0x1768 <midi_input_callbacks+0x40>
    1766:	cc c0       	rjmp	.+408    	; 0x1900 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1768:	9b 01       	movw	r18, r22
    176a:	21 50       	subi	r18, 0x01	; 1
    176c:	31 09       	sbc	r19, r1
    176e:	ab ea       	ldi	r26, 0xAB	; 171
    1770:	ba ea       	ldi	r27, 0xAA	; 170
    1772:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__umulhisi3>
    1776:	96 95       	lsr	r25
    1778:	87 95       	ror	r24
    177a:	9c 01       	movw	r18, r24
    177c:	22 0f       	add	r18, r18
    177e:	33 1f       	adc	r19, r19
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1784:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1786:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1788:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    178a:	4c 2d       	mov	r20, r12
    178c:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    178e:	9e 01       	movw	r18, r28
    1790:	2f 5f       	subi	r18, 0xFF	; 255
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	68 2f       	mov	r22, r24
    1796:	79 2f       	mov	r23, r25
    1798:	c7 01       	movw	r24, r14
    179a:	09 95       	icall
    179c:	be c0       	rjmp	.+380    	; 0x191a <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    179e:	62 30       	cpi	r22, 0x02	; 2
    17a0:	71 05       	cpc	r23, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <midi_input_callbacks+0x7e>
    17a4:	55 c0       	rjmp	.+170    	; 0x1850 <midi_input_callbacks+0x128>
    17a6:	63 30       	cpi	r22, 0x03	; 3
    17a8:	71 05       	cpc	r23, r1
    17aa:	29 f0       	breq	.+10     	; 0x17b6 <midi_input_callbacks+0x8e>
    17ac:	61 30       	cpi	r22, 0x01	; 1
    17ae:	71 05       	cpc	r23, r1
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <midi_input_callbacks+0x8c>
    17b2:	a1 c0       	rjmp	.+322    	; 0x18f6 <midi_input_callbacks+0x1ce>
    17b4:	88 c0       	rjmp	.+272    	; 0x18c6 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    17b6:	84 2f       	mov	r24, r20
    17b8:	80 7f       	andi	r24, 0xF0	; 240
    17ba:	80 3a       	cpi	r24, 0xA0	; 160
    17bc:	f1 f0       	breq	.+60     	; 0x17fa <midi_input_callbacks+0xd2>
    17be:	28 f4       	brcc	.+10     	; 0x17ca <midi_input_callbacks+0xa2>
    17c0:	80 38       	cpi	r24, 0x80	; 128
    17c2:	a9 f0       	breq	.+42     	; 0x17ee <midi_input_callbacks+0xc6>
    17c4:	80 39       	cpi	r24, 0x90	; 144
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <midi_input_callbacks+0xba>
    17c8:	2f c0       	rjmp	.+94     	; 0x1828 <midi_input_callbacks+0x100>
    17ca:	80 3e       	cpi	r24, 0xE0	; 224
    17cc:	e1 f0       	breq	.+56     	; 0x1806 <midi_input_callbacks+0xde>
    17ce:	80 3f       	cpi	r24, 0xF0	; 240
    17d0:	01 f1       	breq	.+64     	; 0x1812 <midi_input_callbacks+0xea>
    17d2:	80 3b       	cpi	r24, 0xB0	; 176
    17d4:	49 f5       	brne	.+82     	; 0x1828 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    17d6:	d7 01       	movw	r26, r14
    17d8:	12 96       	adiw	r26, 0x02	; 2
    17da:	ed 91       	ld	r30, X+
    17dc:	fc 91       	ld	r31, X
    17de:	13 97       	sbiw	r26, 0x03	; 3
              break;
    17e0:	25 c0       	rjmp	.+74     	; 0x182c <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    17e2:	d7 01       	movw	r26, r14
    17e4:	14 96       	adiw	r26, 0x04	; 4
    17e6:	ed 91       	ld	r30, X+
    17e8:	fc 91       	ld	r31, X
    17ea:	15 97       	sbiw	r26, 0x05	; 5
              break;
    17ec:	1f c0       	rjmp	.+62     	; 0x182c <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    17ee:	d7 01       	movw	r26, r14
    17f0:	16 96       	adiw	r26, 0x06	; 6
    17f2:	ed 91       	ld	r30, X+
    17f4:	fc 91       	ld	r31, X
    17f6:	17 97       	sbiw	r26, 0x07	; 7
              break;
    17f8:	19 c0       	rjmp	.+50     	; 0x182c <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    17fa:	d7 01       	movw	r26, r14
    17fc:	18 96       	adiw	r26, 0x08	; 8
    17fe:	ed 91       	ld	r30, X+
    1800:	fc 91       	ld	r31, X
    1802:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1804:	13 c0       	rjmp	.+38     	; 0x182c <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1806:	d7 01       	movw	r26, r14
    1808:	1a 96       	adiw	r26, 0x0a	; 10
    180a:	ed 91       	ld	r30, X+
    180c:	fc 91       	ld	r31, X
    180e:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1810:	0d c0       	rjmp	.+26     	; 0x182c <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1812:	42 3f       	cpi	r20, 0xF2	; 242
    1814:	09 f0       	breq	.+2      	; 0x1818 <midi_input_callbacks+0xf0>
    1816:	74 c0       	rjmp	.+232    	; 0x1900 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1818:	d7 01       	movw	r26, r14
    181a:	1c 96       	adiw	r26, 0x0c	; 12
    181c:	ed 91       	ld	r30, X+
    181e:	fc 91       	ld	r31, X
    1820:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	41 f4       	brne	.+16     	; 0x1836 <midi_input_callbacks+0x10e>
    1826:	6c c0       	rjmp	.+216    	; 0x1900 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1828:	e0 e0       	ldi	r30, 0x00	; 0
    182a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    182c:	30 97       	sbiw	r30, 0x00	; 0
    182e:	09 f4       	brne	.+2      	; 0x1832 <midi_input_callbacks+0x10a>
    1830:	67 c0       	rjmp	.+206    	; 0x1900 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1832:	12 3f       	cpi	r17, 0xF2	; 242
    1834:	31 f4       	brne	.+12     	; 0x1842 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1836:	2a 2d       	mov	r18, r10
    1838:	4b 2d       	mov	r20, r11
    183a:	62 ef       	ldi	r22, 0xF2	; 242
    183c:	c7 01       	movw	r24, r14
    183e:	09 95       	icall
    1840:	6c c0       	rjmp	.+216    	; 0x191a <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1842:	2a 2d       	mov	r18, r10
    1844:	4b 2d       	mov	r20, r11
    1846:	61 2f       	mov	r22, r17
    1848:	6f 70       	andi	r22, 0x0F	; 15
    184a:	c7 01       	movw	r24, r14
    184c:	09 95       	icall
    184e:	65 c0       	rjmp	.+202    	; 0x191a <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1850:	84 2f       	mov	r24, r20
    1852:	80 7f       	andi	r24, 0xF0	; 240
    1854:	80 3d       	cpi	r24, 0xD0	; 208
    1856:	51 f0       	breq	.+20     	; 0x186c <midi_input_callbacks+0x144>
    1858:	80 3f       	cpi	r24, 0xF0	; 240
    185a:	71 f0       	breq	.+28     	; 0x1878 <midi_input_callbacks+0x150>
    185c:	80 3c       	cpi	r24, 0xC0	; 192
    185e:	01 f5       	brne	.+64     	; 0x18a0 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1860:	d7 01       	movw	r26, r14
    1862:	1e 96       	adiw	r26, 0x0e	; 14
    1864:	ed 91       	ld	r30, X+
    1866:	fc 91       	ld	r31, X
    1868:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    186a:	1c c0       	rjmp	.+56     	; 0x18a4 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    186c:	d7 01       	movw	r26, r14
    186e:	50 96       	adiw	r26, 0x10	; 16
    1870:	ed 91       	ld	r30, X+
    1872:	fc 91       	ld	r31, X
    1874:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1876:	16 c0       	rjmp	.+44     	; 0x18a4 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1878:	43 3f       	cpi	r20, 0xF3	; 243
    187a:	41 f4       	brne	.+16     	; 0x188c <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    187c:	d7 01       	movw	r26, r14
    187e:	52 96       	adiw	r26, 0x12	; 18
    1880:	ed 91       	ld	r30, X+
    1882:	fc 91       	ld	r31, X
    1884:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1886:	30 97       	sbiw	r30, 0x00	; 0
    1888:	99 f4       	brne	.+38     	; 0x18b0 <midi_input_callbacks+0x188>
    188a:	3a c0       	rjmp	.+116    	; 0x1900 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    188c:	41 3f       	cpi	r20, 0xF1	; 241
    188e:	c1 f5       	brne	.+112    	; 0x1900 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1890:	d7 01       	movw	r26, r14
    1892:	54 96       	adiw	r26, 0x14	; 20
    1894:	ed 91       	ld	r30, X+
    1896:	fc 91       	ld	r31, X
    1898:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    189a:	30 97       	sbiw	r30, 0x00	; 0
    189c:	49 f4       	brne	.+18     	; 0x18b0 <midi_input_callbacks+0x188>
    189e:	30 c0       	rjmp	.+96     	; 0x1900 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    18a0:	e0 e0       	ldi	r30, 0x00	; 0
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    18a4:	30 97       	sbiw	r30, 0x00	; 0
    18a6:	61 f1       	breq	.+88     	; 0x1900 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    18a8:	81 2f       	mov	r24, r17
    18aa:	8d 7f       	andi	r24, 0xFD	; 253
    18ac:	81 3f       	cpi	r24, 0xF1	; 241
    18ae:	29 f4       	brne	.+10     	; 0x18ba <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    18b0:	4b 2d       	mov	r20, r11
    18b2:	61 2f       	mov	r22, r17
    18b4:	c7 01       	movw	r24, r14
    18b6:	09 95       	icall
    18b8:	30 c0       	rjmp	.+96     	; 0x191a <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    18ba:	4b 2d       	mov	r20, r11
    18bc:	61 2f       	mov	r22, r17
    18be:	6f 70       	andi	r22, 0x0F	; 15
    18c0:	c7 01       	movw	r24, r14
    18c2:	09 95       	icall
    18c4:	2a c0       	rjmp	.+84     	; 0x191a <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    18c6:	84 2f       	mov	r24, r20
    18c8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <midi_is_realtime>
    18cc:	88 23       	and	r24, r24
    18ce:	31 f0       	breq	.+12     	; 0x18dc <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    18d0:	d7 01       	movw	r26, r14
    18d2:	56 96       	adiw	r26, 0x16	; 22
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	57 97       	sbiw	r26, 0x17	; 23
    18da:	07 c0       	rjmp	.+14     	; 0x18ea <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    18dc:	16 3f       	cpi	r17, 0xF6	; 246
    18de:	81 f4       	brne	.+32     	; 0x1900 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    18e0:	d7 01       	movw	r26, r14
    18e2:	58 96       	adiw	r26, 0x18	; 24
    18e4:	ed 91       	ld	r30, X+
    18e6:	fc 91       	ld	r31, X
    18e8:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    18ea:	30 97       	sbiw	r30, 0x00	; 0
    18ec:	49 f0       	breq	.+18     	; 0x1900 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    18ee:	61 2f       	mov	r22, r17
    18f0:	c7 01       	movw	r24, r14
    18f2:	09 95       	icall
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    18f6:	64 30       	cpi	r22, 0x04	; 4
    18f8:	71 05       	cpc	r23, r1
    18fa:	10 f0       	brcs	.+4      	; 0x1900 <midi_input_callbacks+0x1d8>
          cnt = 0;
    18fc:	c1 2c       	mov	r12, r1
    18fe:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1900:	d7 01       	movw	r26, r14
    1902:	5c 96       	adiw	r26, 0x1c	; 28
    1904:	ed 91       	ld	r30, X+
    1906:	fc 91       	ld	r31, X
    1908:	5d 97       	sbiw	r26, 0x1d	; 29
    190a:	30 97       	sbiw	r30, 0x00	; 0
    190c:	31 f0       	breq	.+12     	; 0x191a <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    190e:	0a 2d       	mov	r16, r10
    1910:	2b 2d       	mov	r18, r11
    1912:	41 2f       	mov	r20, r17
    1914:	b6 01       	movw	r22, r12
    1916:	c7 01       	movw	r24, r14
    1918:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    191a:	d7 01       	movw	r26, r14
    191c:	5e 96       	adiw	r26, 0x1e	; 30
    191e:	ed 91       	ld	r30, X+
    1920:	fc 91       	ld	r31, X
    1922:	5f 97       	sbiw	r26, 0x1f	; 31
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	31 f0       	breq	.+12     	; 0x1934 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1928:	0a 2d       	mov	r16, r10
    192a:	2b 2d       	mov	r18, r11
    192c:	41 2f       	mov	r20, r17
    192e:	b6 01       	movw	r22, r12
    1930:	c7 01       	movw	r24, r14
    1932:	09 95       	icall
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	08 95       	ret

00001950 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ec 01       	movw	r28, r24
    195c:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    195e:	86 2f       	mov	r24, r22
    1960:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <midi_is_realtime>
    1964:	88 23       	and	r24, r24
    1966:	69 f0       	breq	.+26     	; 0x1982 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1968:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	41 2f       	mov	r20, r17
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 94 0b 	call	0x1728	; 0x1728 <midi_input_callbacks>
    device->input_state = state;
    197e:	fd a2       	std	Y+37, r15	; 0x25
    1980:	a4 c0       	rjmp	.+328    	; 0x1aca <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1982:	81 2f       	mov	r24, r17
    1984:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <midi_is_statusbyte>
    1988:	88 23       	and	r24, r24
    198a:	09 f4       	brne	.+2      	; 0x198e <midi_process_byte+0x3e>
    198c:	5d c0       	rjmp	.+186    	; 0x1a48 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	29 f0       	breq	.+10     	; 0x199e <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1994:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9f a3       	std	Y+39, r25	; 0x27
    199c:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    199e:	81 2f       	mov	r24, r17
    19a0:	0e 94 02 0b 	call	0x1604	; 0x1604 <midi_packet_length>
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <midi_process_byte+0x64>
    19a8:	b8 f0       	brcs	.+46     	; 0x19d8 <midi_process_byte+0x88>
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	79 f0       	breq	.+30     	; 0x19cc <midi_process_byte+0x7c>
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	81 f0       	breq	.+32     	; 0x19d2 <midi_process_byte+0x82>
    19b2:	46 c0       	rjmp	.+140    	; 0x1a40 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    19b8:	00 e0       	ldi	r16, 0x00	; 0
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	41 2f       	mov	r20, r17
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	ce 01       	movw	r24, r28
    19c4:	0e 94 94 0b 	call	0x1728	; 0x1728 <midi_input_callbacks>
        device->input_state = IDLE;
    19c8:	1d a2       	std	Y+37, r1	; 0x25
        break;
    19ca:	7f c0       	rjmp	.+254    	; 0x1aca <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	8d a3       	std	Y+37, r24	; 0x25
        break;
    19d0:	7c c0       	rjmp	.+248    	; 0x1aca <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	8d a3       	std	Y+37, r24	; 0x25
        break;
    19d6:	79 c0       	rjmp	.+242    	; 0x1aca <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    19d8:	10 3f       	cpi	r17, 0xF0	; 240
    19da:	19 f0       	breq	.+6      	; 0x19e2 <midi_process_byte+0x92>
    19dc:	17 3f       	cpi	r17, 0xF7	; 247
    19de:	51 f0       	breq	.+20     	; 0x19f4 <midi_process_byte+0xa4>
    19e0:	2b c0       	rjmp	.+86     	; 0x1a38 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    19e2:	84 e0       	ldi	r24, 0x04	; 4
    19e4:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    19e6:	80 ef       	ldi	r24, 0xF0	; 240
    19e8:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9f a3       	std	Y+39, r25	; 0x27
    19f0:	8e a3       	std	Y+38, r24	; 0x26
            break;
    19f2:	6b c0       	rjmp	.+214    	; 0x1aca <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    19f4:	4e a1       	ldd	r20, Y+38	; 0x26
    19f6:	5f a1       	ldd	r21, Y+39	; 0x27
    19f8:	9a 01       	movw	r18, r20
    19fa:	ab ea       	ldi	r26, 0xAB	; 171
    19fc:	ba ea       	ldi	r27, 0xAA	; 170
    19fe:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__umulhisi3>
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	9c 01       	movw	r18, r24
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	82 0f       	add	r24, r18
    1a0e:	93 1f       	adc	r25, r19
    1a10:	fa 01       	movw	r30, r20
    1a12:	e8 1b       	sub	r30, r24
    1a14:	f9 0b       	sbc	r31, r25
    1a16:	ec 0f       	add	r30, r28
    1a18:	fd 1f       	adc	r31, r29
    1a1a:	87 ef       	ldi	r24, 0xF7	; 247
    1a1c:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1a1e:	ba 01       	movw	r22, r20
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	7f a3       	std	Y+39, r23	; 0x27
    1a26:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1a28:	0c a1       	ldd	r16, Y+36	; 0x24
    1a2a:	2b a1       	ldd	r18, Y+35	; 0x23
    1a2c:	4a a1       	ldd	r20, Y+34	; 0x22
    1a2e:	ce 01       	movw	r24, r28
    1a30:	0e 94 94 0b 	call	0x1728	; 0x1728 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1a34:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1a36:	49 c0       	rjmp	.+146    	; 0x1aca <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1a38:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1a3a:	1f a2       	std	Y+39, r1	; 0x27
    1a3c:	1e a2       	std	Y+38, r1	; 0x26
    1a3e:	45 c0       	rjmp	.+138    	; 0x1aca <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1a40:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1a42:	1f a2       	std	Y+39, r1	; 0x27
    1a44:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1a46:	41 c0       	rjmp	.+130    	; 0x1aca <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1a48:	ed a1       	ldd	r30, Y+37	; 0x25
    1a4a:	ee 23       	and	r30, r30
    1a4c:	f1 f1       	breq	.+124    	; 0x1aca <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1a4e:	4e a1       	ldd	r20, Y+38	; 0x26
    1a50:	5f a1       	ldd	r21, Y+39	; 0x27
    1a52:	9a 01       	movw	r18, r20
    1a54:	ab ea       	ldi	r26, 0xAB	; 171
    1a56:	ba ea       	ldi	r27, 0xAA	; 170
    1a58:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__umulhisi3>
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	9c 01       	movw	r18, r24
    1a62:	22 0f       	add	r18, r18
    1a64:	33 1f       	adc	r19, r19
    1a66:	82 0f       	add	r24, r18
    1a68:	93 1f       	adc	r25, r19
    1a6a:	9a 01       	movw	r18, r20
    1a6c:	28 1b       	sub	r18, r24
    1a6e:	39 0b       	sbc	r19, r25
    1a70:	de 01       	movw	r26, r28
    1a72:	a2 0f       	add	r26, r18
    1a74:	b3 1f       	adc	r27, r19
    1a76:	92 96       	adiw	r26, 0x22	; 34
    1a78:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1a7a:	ba 01       	movw	r22, r20
    1a7c:	6f 5f       	subi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	7f a3       	std	Y+39, r23	; 0x27
    1a82:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1a84:	21 30       	cpi	r18, 0x01	; 1
    1a86:	31 05       	cpc	r19, r1
    1a88:	89 f0       	breq	.+34     	; 0x1aac <midi_process_byte+0x15c>
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	e9 f4       	brne	.+58     	; 0x1aca <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1a90:	0c a1       	ldd	r16, Y+36	; 0x24
    1a92:	2b a1       	ldd	r18, Y+35	; 0x23
    1a94:	4a a1       	ldd	r20, Y+34	; 0x22
    1a96:	ce 01       	movw	r24, r28
    1a98:	0e 94 94 0b 	call	0x1728	; 0x1728 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	a1 f0       	breq	.+40     	; 0x1aca <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9f a3       	std	Y+39, r25	; 0x27
    1aa8:	8e a3       	std	Y+38, r24	; 0x26
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1aac:	e2 30       	cpi	r30, 0x02	; 2
    1aae:	69 f4       	brne	.+26     	; 0x1aca <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	2b a1       	ldd	r18, Y+35	; 0x23
    1ab4:	4a a1       	ldd	r20, Y+34	; 0x22
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	0e 94 94 0b 	call	0x1728	; 0x1728 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	21 f0       	breq	.+8      	; 0x1aca <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9f a3       	std	Y+39, r25	; 0x27
    1ac8:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	08 95       	ret

00001ad6 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1ae8:	dc 01       	movw	r26, r24
    1aea:	90 96       	adiw	r26, 0x20	; 32
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	91 97       	sbiw	r26, 0x21	; 33
    1af2:	30 97       	sbiw	r30, 0x00	; 0
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1af6:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1af8:	86 01       	movw	r16, r12
    1afa:	08 51       	subi	r16, 0x18	; 24
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	c8 01       	movw	r24, r16
    1b00:	0e 94 b0 0a 	call	0x1560	; 0x1560 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1b04:	e8 2e       	mov	r14, r24
    1b06:	f1 2c       	mov	r15, r1
    1b08:	e1 14       	cp	r14, r1
    1b0a:	f1 04       	cpc	r15, r1
    1b0c:	91 f0       	breq	.+36     	; 0x1b32 <midi_device_process+0x5c>
    1b0e:	c0 e0       	ldi	r28, 0x00	; 0
    1b10:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 c6 0a 	call	0x158c	; 0x158c <bytequeue_get>
    1b1a:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1b1c:	c6 01       	movw	r24, r12
    1b1e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	c8 01       	movw	r24, r16
    1b26:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1b2a:	21 96       	adiw	r28, 0x01	; 1
    1b2c:	ce 15       	cp	r28, r14
    1b2e:	df 05       	cpc	r29, r15
    1b30:	81 f7       	brne	.-32     	; 0x1b12 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	cf 90       	pop	r12
    1b42:	08 95       	ret

00001b44 <__divmodhi4>:
    1b44:	97 fb       	bst	r25, 7
    1b46:	07 2e       	mov	r0, r23
    1b48:	16 f4       	brtc	.+4      	; 0x1b4e <__divmodhi4+0xa>
    1b4a:	00 94       	com	r0
    1b4c:	07 d0       	rcall	.+14     	; 0x1b5c <__divmodhi4_neg1>
    1b4e:	77 fd       	sbrc	r23, 7
    1b50:	09 d0       	rcall	.+18     	; 0x1b64 <__divmodhi4_neg2>
    1b52:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__udivmodhi4>
    1b56:	07 fc       	sbrc	r0, 7
    1b58:	05 d0       	rcall	.+10     	; 0x1b64 <__divmodhi4_neg2>
    1b5a:	3e f4       	brtc	.+14     	; 0x1b6a <__divmodhi4_exit>

00001b5c <__divmodhi4_neg1>:
    1b5c:	90 95       	com	r25
    1b5e:	81 95       	neg	r24
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	08 95       	ret

00001b64 <__divmodhi4_neg2>:
    1b64:	70 95       	com	r23
    1b66:	61 95       	neg	r22
    1b68:	7f 4f       	sbci	r23, 0xFF	; 255

00001b6a <__divmodhi4_exit>:
    1b6a:	08 95       	ret

00001b6c <__tablejump2__>:
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	05 90       	lpm	r0, Z+
    1b72:	f4 91       	lpm	r31, Z
    1b74:	e0 2d       	mov	r30, r0
    1b76:	09 94       	ijmp

00001b78 <__umulhisi3>:
    1b78:	a2 9f       	mul	r26, r18
    1b7a:	b0 01       	movw	r22, r0
    1b7c:	b3 9f       	mul	r27, r19
    1b7e:	c0 01       	movw	r24, r0
    1b80:	a3 9f       	mul	r26, r19
    1b82:	70 0d       	add	r23, r0
    1b84:	81 1d       	adc	r24, r1
    1b86:	11 24       	eor	r1, r1
    1b88:	91 1d       	adc	r25, r1
    1b8a:	b2 9f       	mul	r27, r18
    1b8c:	70 0d       	add	r23, r0
    1b8e:	81 1d       	adc	r24, r1
    1b90:	11 24       	eor	r1, r1
    1b92:	91 1d       	adc	r25, r1
    1b94:	08 95       	ret

00001b96 <__udivmodhi4>:
    1b96:	aa 1b       	sub	r26, r26
    1b98:	bb 1b       	sub	r27, r27
    1b9a:	51 e1       	ldi	r21, 0x11	; 17
    1b9c:	07 c0       	rjmp	.+14     	; 0x1bac <__udivmodhi4_ep>

00001b9e <__udivmodhi4_loop>:
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	a6 17       	cp	r26, r22
    1ba4:	b7 07       	cpc	r27, r23
    1ba6:	10 f0       	brcs	.+4      	; 0x1bac <__udivmodhi4_ep>
    1ba8:	a6 1b       	sub	r26, r22
    1baa:	b7 0b       	sbc	r27, r23

00001bac <__udivmodhi4_ep>:
    1bac:	88 1f       	adc	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	5a 95       	dec	r21
    1bb2:	a9 f7       	brne	.-22     	; 0x1b9e <__udivmodhi4_loop>
    1bb4:	80 95       	com	r24
    1bb6:	90 95       	com	r25
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	08 95       	ret

00001bbe <_exit>:
    1bbe:	f8 94       	cli

00001bc0 <__stop_program>:
    1bc0:	ff cf       	rjmp	.-2      	; 0x1bc0 <__stop_program>
