
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00000dde  00000e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  0080024c  0080024c  00000fbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003204  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3e  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ecd  00000000  00000000  000052a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000830  00000000  00000000  00006170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d22  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c10  00000000  00000000  000076c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  000092d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_14>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	39 04       	cpc	r3, r9
  b6:	37 04       	cpc	r3, r7
  b8:	39 04       	cpc	r3, r9
  ba:	3b 04       	cpc	r3, r11
  bc:	3b 04       	cpc	r3, r11
  be:	41 04       	cpc	r4, r1
  c0:	3b 04       	cpc	r3, r11
  c2:	41 04       	cpc	r4, r1
  c4:	41 04       	cpc	r4, r1
  c6:	41 04       	cpc	r4, r1
  c8:	41 04       	cpc	r4, r1
  ca:	41 04       	cpc	r4, r1
  cc:	3b 04       	cpc	r3, r11
  ce:	41 04       	cpc	r4, r1
  d0:	41 04       	cpc	r4, r1

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ee ed       	ldi	r30, 0xDE	; 222
  e6:	fd e0       	ldi	r31, 0x0D	; 13
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	ac 34       	cpi	r26, 0x4C	; 76
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	ac e4       	ldi	r26, 0x4C	; 76
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ad 34       	cpi	r26, 0x4D	; 77
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
 108:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, 3, 1<<HC_LED_BIT},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, 3, 1<<CL_LED_BIT},
	{15,7, 1<<MA_TRIG,-1, 0, 7, 1<<MA_LED_BIT}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	f8 2e       	mov	r15, r24
	
		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	df 01       	movw	r26, r30
 128:	a2 0f       	add	r26, r18
 12a:	b3 1f       	adc	r27, r19
 12c:	aa 0f       	add	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	af 5f       	subi	r26, 0xFF	; 255
 132:	be 4f       	sbci	r27, 0xFE	; 254
 134:	ac 91       	ld	r26, X
 136:	af 70       	andi	r26, 0x0F	; 15
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	47 e5       	ldi	r20, 0x57	; 87
 13c:	52 e0       	ldi	r21, 0x02	; 2
 13e:	a9 5a       	subi	r26, 0xA9	; 169
 140:	bd 4f       	sbci	r27, 0xFD	; 253
 142:	8f 01       	movw	r16, r30
 144:	02 0f       	add	r16, r18
 146:	13 1f       	adc	r17, r19
 148:	00 0f       	add	r16, r16
 14a:	11 1f       	adc	r17, r17
 14c:	00 50       	subi	r16, 0x00	; 0
 14e:	1f 4f       	sbci	r17, 0xFF	; 255
 150:	9c 91       	ld	r25, X
 152:	e8 01       	movw	r28, r16
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	89 2b       	or	r24, r25
 158:	8c 93       	st	X, r24
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 15a:	df 01       	movw	r26, r30
 15c:	a2 0f       	add	r26, r18
 15e:	b3 1f       	adc	r27, r19
 160:	aa 0f       	add	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	ac 5f       	subi	r26, 0xFC	; 252
 166:	be 4f       	sbci	r27, 0xFE	; 254
 168:	9c 91       	ld	r25, X
 16a:	a9 2f       	mov	r26, r25
 16c:	a6 95       	lsr	r26
 16e:	af 70       	andi	r26, 0x0F	; 15
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	a9 5a       	subi	r26, 0xA9	; 169
 174:	bd 4f       	sbci	r27, 0xFD	; 253
 176:	7c 91       	ld	r23, X
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	87 2b       	or	r24, r23
 17c:	8c 93       	st	X, r24
			
		if (drum_hit[note].switch_bit != -1) {//need to set instrument switch
				
				
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 17e:	da 01       	movw	r26, r20
 180:	13 96       	adiw	r26, 0x03	; 3
 182:	8c 91       	ld	r24, X
 184:	13 97       	sbiw	r26, 0x03	; 3
 186:	91 70       	andi	r25, 0x01	; 1
 188:	91 95       	neg	r25
 18a:	98 27       	eor	r25, r24
 18c:	2b 81       	ldd	r18, Y+3	; 0x03
 18e:	92 23       	and	r25, r18
 190:	89 27       	eor	r24, r25
 192:	13 96       	adiw	r26, 0x03	; 3
 194:	8c 93       	st	X, r24
				
		}
			
		if (velocity > 64) {
 196:	61 34       	cpi	r22, 0x41	; 65
 198:	38 f0       	brcs	.+14     	; 0x1a8 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
 19a:	fa 01       	movw	r30, r20
 19c:	80 85       	ldd	r24, Z+8	; 0x08
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	80 87       	std	Z+8, r24	; 0x08
			turn_on(ACCENT_1_LED);
 1a2:	84 e1       	ldi	r24, 0x14	; 20
 1a4:	0e 94 38 01 	call	0x270	; 0x270 <turn_on>
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
 1a8:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
 1aa:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_spi>
			
		PORTD &= ~(1<<TRIG);
 1ae:	5d 98       	cbi	0x0b, 5	; 11
		
		current_drum_hit = note;
 1b0:	f0 92 4c 02 	sts	0x024C, r15
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
 1b4:	ee e6       	ldi	r30, 0x6E	; 110
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
 1be:	85 b5       	in	r24, 0x25	; 37
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	85 bd       	out	0x25, r24	; 37
	
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	08 95       	ret

000001d0 <__vector_14>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "drums.h"
#include "spi.h"

ISR (TIMER0_COMPA_vect) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
 1f6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
 1f8:	ee e6       	ldi	r30, 0x6E	; 110
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8d 7f       	andi	r24, 0xFD	; 253
 200:	80 83       	st	Z, r24
	
	spi_data[drum_hit[current_drum_hit].spi_byte_num] &= ~(drum_hit[current_drum_hit].trig_bit);
 202:	80 91 4c 02 	lds	r24, 0x024C
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	df 01       	movw	r26, r30
 210:	a8 0f       	add	r26, r24
 212:	b9 1f       	adc	r27, r25
 214:	aa 0f       	add	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	af 5f       	subi	r26, 0xFF	; 255
 21a:	be 4f       	sbci	r27, 0xFE	; 254
 21c:	ac 91       	ld	r26, X
 21e:	af 70       	andi	r26, 0x0F	; 15
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	c7 e5       	ldi	r28, 0x57	; 87
 224:	d2 e0       	ldi	r29, 0x02	; 2
 226:	a9 5a       	subi	r26, 0xA9	; 169
 228:	bd 4f       	sbci	r27, 0xFD	; 253
 22a:	e8 0f       	add	r30, r24
 22c:	f9 1f       	adc	r31, r25
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	e0 50       	subi	r30, 0x00	; 0
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	82 81       	ldd	r24, Z+2	; 0x02
 238:	80 95       	com	r24
 23a:	9c 91       	ld	r25, X
 23c:	89 23       	and	r24, r25
 23e:	8c 93       	st	X, r24
	//spi_data[drum_hit[note].spi_led_byte_num] &= ~(drum_hit[note].led_bit);
	spi_data[8] &= ~(1<<ACCENT);
 240:	88 85       	ldd	r24, Y+8	; 0x08
 242:	8e 7f       	andi	r24, 0xFE	; 254
 244:	88 87       	std	Y+8, r24	; 0x08
	update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
 246:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_spi>
	
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9c 01       	movw	r18, r24
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	82 0f       	add	r24, r18
 27e:	93 1f       	adc	r25, r19
 280:	dc 01       	movw	r26, r24
 282:	af 59       	subi	r26, 0x9F	; 159
 284:	be 4f       	sbci	r27, 0xFE	; 254
 286:	2c 91       	ld	r18, X
 288:	e2 2f       	mov	r30, r18
 28a:	ef 70       	andi	r30, 0x0F	; 15
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e9 5a       	subi	r30, 0xA9	; 169
 290:	fd 4f       	sbci	r31, 0xFD	; 253
 292:	ec 01       	movw	r28, r24
 294:	c0 5a       	subi	r28, 0xA0	; 160
 296:	de 4f       	sbci	r29, 0xFE	; 254
 298:	30 81       	ld	r19, Z
 29a:	88 81       	ld	r24, Y
 29c:	83 2b       	or	r24, r19
 29e:	80 83       	st	Z, r24
	led[led_index].state = 1;
 2a0:	82 2f       	mov	r24, r18
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	8c 93       	st	X, r24

}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <turn_off>:

void turn_off(uint8_t led_index) {
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	9c 01       	movw	r18, r24
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	82 0f       	add	r24, r18
 2ba:	93 1f       	adc	r25, r19
 2bc:	dc 01       	movw	r26, r24
 2be:	af 59       	subi	r26, 0x9F	; 159
 2c0:	be 4f       	sbci	r27, 0xFE	; 254
 2c2:	2c 91       	ld	r18, X
 2c4:	e2 2f       	mov	r30, r18
 2c6:	ef 70       	andi	r30, 0x0F	; 15
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e9 5a       	subi	r30, 0xA9	; 169
 2cc:	fd 4f       	sbci	r31, 0xFD	; 253
 2ce:	ec 01       	movw	r28, r24
 2d0:	c0 5a       	subi	r28, 0xA0	; 160
 2d2:	de 4f       	sbci	r29, 0xFE	; 254
 2d4:	88 81       	ld	r24, Y
 2d6:	80 95       	com	r24
 2d8:	90 81       	ld	r25, Z
 2da:	89 23       	and	r24, r25
 2dc:	80 83       	st	Z, r24
	led[led_index].state = 0;
 2de:	82 2f       	mov	r24, r18
 2e0:	8f 7e       	andi	r24, 0xEF	; 239
 2e2:	8c 93       	st	X, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	2e 0f       	add	r18, r30
 2f6:	3f 1f       	adc	r19, r31
 2f8:	f9 01       	movw	r30, r18
 2fa:	ef 59       	subi	r30, 0x9F	; 159
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	90 81       	ld	r25, Z
 300:	94 ff       	sbrs	r25, 4
 302:	03 c0       	rjmp	.+6      	; 0x30a <toggle+0x20>
		
		turn_off(led_index);
 304:	0e 94 56 01 	call	0x2ac	; 0x2ac <turn_off>
 308:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
 30a:	0e 94 38 01 	call	0x270	; 0x270 <turn_on>
 30e:	08 95       	ret

00000310 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
 310:	08 95       	ret

00000312 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 312:	08 95       	ret

00000314 <note_on_event>:

	
}


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
	
	//spi_data[1] = 1<<step_number;
	//spi_data[0] = (1<<step_number)>>8;
	//if (step_number++ == 15) step_number = 0;
	if (note < 16) {
 318:	40 31       	cpi	r20, 0x10	; 16
 31a:	08 f0       	brcs	.+2      	; 0x31e <note_on_event+0xa>
 31c:	93 c0       	rjmp	.+294    	; 0x444 <note_on_event+0x130>
		
		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 31e:	c4 2f       	mov	r28, r20
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	ce 01       	movw	r24, r28
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	fc 01       	movw	r30, r24
 32a:	ec 0f       	add	r30, r28
 32c:	fd 1f       	adc	r31, r29
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ef 5f       	subi	r30, 0xFF	; 255
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	e0 81       	ld	r30, Z
 338:	ef 70       	andi	r30, 0x0F	; 15
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	47 e5       	ldi	r20, 0x57	; 87
 33e:	52 e0       	ldi	r21, 0x02	; 2
 340:	e9 5a       	subi	r30, 0xA9	; 169
 342:	fd 4f       	sbci	r31, 0xFD	; 253
 344:	dc 01       	movw	r26, r24
 346:	ac 0f       	add	r26, r28
 348:	bd 1f       	adc	r27, r29
 34a:	aa 0f       	add	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	a0 50       	subi	r26, 0x00	; 0
 350:	bf 4f       	sbci	r27, 0xFF	; 255
 352:	60 81       	ld	r22, Z
 354:	12 96       	adiw	r26, 0x02	; 2
 356:	3c 91       	ld	r19, X
 358:	12 97       	sbiw	r26, 0x02	; 2
 35a:	36 2b       	or	r19, r22
 35c:	30 83       	st	Z, r19
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 35e:	fc 01       	movw	r30, r24
 360:	ec 0f       	add	r30, r28
 362:	fd 1f       	adc	r31, r29
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ec 5f       	subi	r30, 0xFC	; 252
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	80 81       	ld	r24, Z
 36e:	e8 2f       	mov	r30, r24
 370:	e6 95       	lsr	r30
 372:	ef 70       	andi	r30, 0x0F	; 15
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	e9 5a       	subi	r30, 0xA9	; 169
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	30 81       	ld	r19, Z
 37c:	15 96       	adiw	r26, 0x05	; 5
 37e:	9c 91       	ld	r25, X
 380:	15 97       	sbiw	r26, 0x05	; 5
 382:	93 2b       	or	r25, r19
 384:	90 83       	st	Z, r25
		
		if (drum_hit[note].switch_bit != -1) {//need to set instrument switch
			
			
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 386:	fa 01       	movw	r30, r20
 388:	93 81       	ldd	r25, Z+3	; 0x03
 38a:	81 70       	andi	r24, 0x01	; 1
 38c:	81 95       	neg	r24
 38e:	89 27       	eor	r24, r25
 390:	13 96       	adiw	r26, 0x03	; 3
 392:	3c 91       	ld	r19, X
 394:	83 23       	and	r24, r19
 396:	98 27       	eor	r25, r24
 398:	93 83       	std	Z+3, r25	; 0x03
			
		}
	
	if (velocity > 64) {
 39a:	21 34       	cpi	r18, 0x41	; 65
 39c:	30 f0       	brcs	.+12     	; 0x3aa <note_on_event+0x96>
		spi_data[8] |= (1<<ACCENT);
 39e:	80 85       	ldd	r24, Z+8	; 0x08
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	80 87       	std	Z+8, r24	; 0x08
		turn_on(ACCENT_1_LED);
 3a4:	84 e1       	ldi	r24, 0x14	; 20
 3a6:	0e 94 38 01 	call	0x270	; 0x270 <turn_on>
	}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
 3aa:	5d 9a       	sbi	0x0b, 5	; 11
		
		update_spi();
 3ac:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_spi>
		

		
		PORTD &= ~(1<<TRIG);
 3b0:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	9e e0       	ldi	r25, 0x0E	; 14
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <note_on_event+0xa2>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <note_on_event+0xa8>
 3bc:	00 00       	nop
		
		_delay_us(900); //deal with this bullshit
		
		spi_data[drum_hit[note].spi_byte_num] &= ~(drum_hit[note].trig_bit);
 3be:	ae 01       	movw	r20, r28
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	fa 01       	movw	r30, r20
 3c6:	ec 0f       	add	r30, r28
 3c8:	fd 1f       	adc	r31, r29
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ef 5f       	subi	r30, 0xFF	; 255
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	e0 81       	ld	r30, Z
 3d4:	ef 70       	andi	r30, 0x0F	; 15
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	a7 e5       	ldi	r26, 0x57	; 87
 3da:	b2 e0       	ldi	r27, 0x02	; 2
 3dc:	9f 01       	movw	r18, r30
 3de:	29 5a       	subi	r18, 0xA9	; 169
 3e0:	3d 4f       	sbci	r19, 0xFD	; 253
 3e2:	ca 01       	movw	r24, r20
 3e4:	8c 0f       	add	r24, r28
 3e6:	9d 1f       	adc	r25, r29
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	80 50       	subi	r24, 0x00	; 0
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	fc 01       	movw	r30, r24
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	80 95       	com	r24
 3f6:	f9 01       	movw	r30, r18
 3f8:	90 81       	ld	r25, Z
 3fa:	89 23       	and	r24, r25
 3fc:	80 83       	st	Z, r24
		spi_data[drum_hit[note].spi_led_byte_num] &= ~(drum_hit[note].led_bit);
 3fe:	fa 01       	movw	r30, r20
 400:	ec 0f       	add	r30, r28
 402:	fd 1f       	adc	r31, r29
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	ec 5f       	subi	r30, 0xFC	; 252
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	e0 81       	ld	r30, Z
 40e:	e6 95       	lsr	r30
 410:	ef 70       	andi	r30, 0x0F	; 15
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	e9 5a       	subi	r30, 0xA9	; 169
 416:	fd 4f       	sbci	r31, 0xFD	; 253
 418:	c4 0f       	add	r28, r20
 41a:	d5 1f       	adc	r29, r21
 41c:	cc 0f       	add	r28, r28
 41e:	dd 1f       	adc	r29, r29
 420:	c0 50       	subi	r28, 0x00	; 0
 422:	df 4f       	sbci	r29, 0xFF	; 255
 424:	8d 81       	ldd	r24, Y+5	; 0x05
 426:	80 95       	com	r24
 428:	90 81       	ld	r25, Z
 42a:	89 23       	and	r24, r25
 42c:	80 83       	st	Z, r24
		spi_data[8] &= ~(1<<ACCENT);
 42e:	18 96       	adiw	r26, 0x08	; 8
 430:	8c 91       	ld	r24, X
 432:	18 97       	sbiw	r26, 0x08	; 8
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	18 96       	adiw	r26, 0x08	; 8
 438:	8c 93       	st	X, r24
		turn_off(ACCENT_1_LED);
 43a:	84 e1       	ldi	r24, 0x14	; 20
 43c:	0e 94 56 01 	call	0x2ac	; 0x2ac <turn_off>
		
		update_spi();
 440:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_spi>
		
		
	}

		
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <update_step_board>:
//step[0].button = &button[STEP_1_SW];

	
uint8_t step_number = 0;	

void update_step_board() {
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (button[i].state) {
 452:	fe 01       	movw	r30, r28
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	eb 5f       	subi	r30, 0xFB	; 251
 45a:	fd 4f       	sbci	r31, 0xFD	; 253
 45c:	80 81       	ld	r24, Z
 45e:	86 ff       	sbrs	r24, 6
 460:	0b c0       	rjmp	.+22     	; 0x478 <update_step_board+0x2e>
			
			toggle(i);
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 75 01 	call	0x2ea	; 0x2ea <toggle>
			button[i].state ^= button[i].state;
 468:	fe 01       	movw	r30, r28
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	eb 5f       	subi	r30, 0xFB	; 251
 470:	fd 4f       	sbci	r31, 0xFD	; 253
 472:	80 81       	ld	r24, Z
 474:	8f 7b       	andi	r24, 0xBF	; 191
 476:	80 83       	st	Z, r24
	
uint8_t step_number = 0;	

void update_step_board() {
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 478:	21 96       	adiw	r28, 0x01	; 1
 47a:	c0 31       	cpi	r28, 0x10	; 16
 47c:	d1 05       	cpc	r29, r1
 47e:	49 f7       	brne	.-46     	; 0x452 <update_step_board+0x8>
		}
		
	}

	
	update_spi();
 480:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_spi>
	
	
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
 48a:	80 91 27 02 	lds	r24, 0x0227
 48e:	86 ff       	sbrs	r24, 6
 490:	08 c0       	rjmp	.+16     	; 0x4a2 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
 492:	e7 e2       	ldi	r30, 0x27	; 39
 494:	f2 e0       	ldi	r31, 0x02	; 2
 496:	8f 7b       	andi	r24, 0xBF	; 191
 498:	80 83       	st	Z, r24
				//
		//_delay_us(900); //deal with this bullshit
				//
		//spi_data[drum_hit[BD].spi_byte_num] &= ~(drum_hit[BD].trig_bit);
		//update_spi();
		trigger_drum(BD, 0);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
 4a2:	80 91 29 02 	lds	r24, 0x0229
 4a6:	86 ff       	sbrs	r24, 6
 4a8:	08 c0       	rjmp	.+16     	; 0x4ba <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
 4aa:	e9 e2       	ldi	r30, 0x29	; 41
 4ac:	f2 e0       	ldi	r31, 0x02	; 2
 4ae:	8f 7b       	andi	r24, 0xBF	; 191
 4b0:	80 83       	st	Z, r24
		trigger_drum(SD,0);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
 4ba:	08 95       	ret

000004bc <refresh>:



void refresh(void) {
	
	read_switches();
 4bc:	0e 94 19 03 	call	0x632	; 0x632 <read_switches>
	parse_switch_data();
 4c0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <parse_switch_data>
	live_hits();
 4c4:	0e 94 45 02 	call	0x48a	; 0x48a <live_hits>
	update_step_board();
 4c8:	0e 94 25 02 	call	0x44a	; 0x44a <update_step_board>
 4cc:	08 95       	ret

000004ce <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 4ce:	8f e1       	ldi	r24, 0x1F	; 31
 4d0:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 4d4:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 4d8:	88 e9       	ldi	r24, 0x98	; 152
 4da:	80 93 c1 00 	sts	0x00C1, r24
 4de:	08 95       	ret

000004e0 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	1f 92       	push	r1
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 50c:	80 91 c6 00 	lds	r24, 0x00C6
 510:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 512:	ae 01       	movw	r20, r28
 514:	4f 5f       	subi	r20, 0xFF	; 255
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	80 e6       	ldi	r24, 0x60	; 96
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	0e 94 80 04 	call	0x900	; 0x900 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 522:	0f 90       	pop	r0
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 54a:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 54c:	8d b1       	in	r24, 0x0d	; 13
 54e:	8c 60       	ori	r24, 0x0C	; 12
 550:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 552:	87 b1       	in	r24, 0x07	; 7
 554:	8e 60       	ori	r24, 0x0E	; 14
 556:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 558:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 55a:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 55c:	88 b1       	in	r24, 0x08	; 8
 55e:	81 7f       	andi	r24, 0xF1	; 241
 560:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 562:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 564:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
 566:	80 e5       	ldi	r24, 0x50	; 80
 568:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
 56c:	ed ea       	ldi	r30, 0xAD	; 173
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	81 60       	ori	r24, 0x01	; 1
 574:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 38 01 	call	0x270	; 0x270 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
 57c:	8d e1       	ldi	r24, 0x1D	; 29
 57e:	0e 94 38 01 	call	0x270	; 0x270 <turn_on>
	turn_on(FILL_MANUAL);
 582:	82 e2       	ldi	r24, 0x22	; 34
 584:	0e 94 38 01 	call	0x270	; 0x270 <turn_on>
	
	update_spi();
 588:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
 58c:	84 b5       	in	r24, 0x24	; 36
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
 592:	81 ee       	ldi	r24, 0xE1	; 225
 594:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 596:	80 e6       	ldi	r24, 0x60	; 96
 598:	92 e0       	ldi	r25, 0x02	; 2
 59a:	0e 94 4f 04 	call	0x89e	; 0x89e <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 59e:	6a e8       	ldi	r22, 0x8A	; 138
 5a0:	71 e0       	ldi	r23, 0x01	; 1
 5a2:	80 e6       	ldi	r24, 0x60	; 96
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	0e 94 43 04 	call	0x886	; 0x886 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 5aa:	68 e8       	ldi	r22, 0x88	; 136
 5ac:	71 e0       	ldi	r23, 0x01	; 1
 5ae:	80 e6       	ldi	r24, 0x60	; 96
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	0e 94 47 04 	call	0x88e	; 0x88e <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 5b6:	69 e8       	ldi	r22, 0x89	; 137
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	0e 94 4b 04 	call	0x896	; 0x896 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 5c2:	0e 94 67 02 	call	0x4ce	; 0x4ce <setup_midi_usart>
	
	sei(); //enable global interrupts	
 5c6:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
 5c8:	80 e6       	ldi	r24, 0x60	; 96
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <midi_device_process>
	refresh();		
 5d0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <refresh>

	
	}
 5d4:	f9 cf       	rjmp	.-14     	; 0x5c8 <main+0x7e>

000005d6 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 5d6:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 5da:	ed ea       	ldi	r30, 0xAD	; 173
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	88 23       	and	r24, r24
 5e2:	ec f7       	brge	.-6      	; 0x5de <spi_shift_byte+0x8>
	return SPDR1;
 5e4:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
 5e8:	08 95       	ret

000005ea <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
 5ee:	c7 e5       	ldi	r28, 0x57	; 87
 5f0:	d2 e0       	ldi	r29, 0x02	; 2
 5f2:	88 81       	ld	r24, Y
 5f4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 5fe:	8a 81       	ldd	r24, Y+2	; 0x02
 600:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 60a:	8c 81       	ldd	r24, Y+4	; 0x04
 60c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 610:	8d 81       	ldd	r24, Y+5	; 0x05
 612:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 616:	8e 81       	ldd	r24, Y+6	; 0x06
 618:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 61c:	8f 81       	ldd	r24, Y+7	; 0x07
 61e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 622:	88 85       	ldd	r24, Y+8	; 0x08
 624:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 628:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 62a:	43 9a       	sbi	0x08, 3	; 8
	
	
};
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <read_switches>:

void read_switches(void) { //reads switch data
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
 636:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
 63e:	c2 e5       	ldi	r28, 0x52	; 82
 640:	d2 e0       	ldi	r29, 0x02	; 2
 642:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
 64a:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
 652:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
 65a:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <spi_shift_byte>
 662:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
 664:	42 98       	cbi	0x08, 2	; 8
	
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
 666:	ed e4       	ldi	r30, 0x4D	; 77
 668:	f2 e0       	ldi	r31, 0x02	; 2
 66a:	20 81       	ld	r18, Z
 66c:	98 81       	ld	r25, Y
 66e:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
 670:	29 27       	eor	r18, r25
 672:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
 674:	92 23       	and	r25, r18
 676:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
 678:	21 81       	ldd	r18, Z+1	; 0x01
 67a:	99 81       	ldd	r25, Y+1	; 0x01
 67c:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
 67e:	29 27       	eor	r18, r25
 680:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
 682:	92 23       	and	r25, r18
 684:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
 686:	22 81       	ldd	r18, Z+2	; 0x02
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
 68c:	29 27       	eor	r18, r25
 68e:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
 690:	92 23       	and	r25, r18
 692:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
 694:	23 81       	ldd	r18, Z+3	; 0x03
 696:	9b 81       	ldd	r25, Y+3	; 0x03
 698:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
 69a:	29 27       	eor	r18, r25
 69c:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
 69e:	92 23       	and	r25, r18
 6a0:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
 6a2:	94 81       	ldd	r25, Z+4	; 0x04
 6a4:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
 6a6:	98 27       	eor	r25, r24
 6a8:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
 6aa:	89 23       	and	r24, r25
 6ac:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	
	
	
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <parse_switch_data>:
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
 6b8:	da 01       	movw	r26, r20
 6ba:	aa 0f       	add	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	ab 5f       	subi	r26, 0xFB	; 251
 6c0:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
 6c2:	8c 91       	ld	r24, X
 6c4:	e8 2f       	mov	r30, r24
 6c6:	e6 95       	lsr	r30
 6c8:	e6 95       	lsr	r30
 6ca:	e6 95       	lsr	r30
 6cc:	e7 70       	andi	r30, 0x07	; 7
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	ee 5a       	subi	r30, 0xAE	; 174
 6d2:	fd 4f       	sbci	r31, 0xFD	; 253
 6d4:	20 81       	ld	r18, Z
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	98 2f       	mov	r25, r24
 6da:	97 70       	andi	r25, 0x07	; 7
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <parse_switch_data+0x2e>
 6de:	35 95       	asr	r19
 6e0:	27 95       	ror	r18
 6e2:	9a 95       	dec	r25
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <parse_switch_data+0x2a>
 6e6:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
 6e8:	86 fb       	bst	r24, 6
 6ea:	99 27       	eor	r25, r25
 6ec:	90 f9       	bld	r25, 0
 6ee:	29 27       	eor	r18, r25
 6f0:	20 fb       	bst	r18, 0
 6f2:	86 f9       	bld	r24, 6
 6f4:	8c 93       	st	X, r24
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 6f6:	4f 5f       	subi	r20, 0xFF	; 255
 6f8:	5f 4f       	sbci	r21, 0xFF	; 255
 6fa:	43 32       	cpi	r20, 0x23	; 35
 6fc:	51 05       	cpc	r21, r1
 6fe:	e1 f6       	brne	.-72     	; 0x6b8 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
 700:	08 95       	ret

00000702 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 702:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 704:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 706:	74 83       	std	Z+4, r23	; 0x04
 708:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 70a:	11 82       	std	Z+1, r1	; 0x01
 70c:	10 82       	st	Z, r1
 70e:	08 95       	ret

00000710 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 710:	ff 92       	push	r15
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	ec 01       	movw	r28, r24
 71c:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 71e:	0e 94 01 04 	call	0x802	; 0x802 <store_and_clear_interrupt>
 722:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 724:	f9 80       	ldd	r15, Y+1	; 0x01
 726:	4f 2d       	mov	r20, r15
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	ca 01       	movw	r24, r20
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	2a 81       	ldd	r18, Y+2	; 0x02
 730:	62 2f       	mov	r22, r18
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divmodhi4>
 738:	28 81       	ld	r18, Y
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	82 17       	cp	r24, r18
 73e:	93 07       	cpc	r25, r19
 740:	29 f4       	brne	.+10     	; 0x74c <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 742:	81 2f       	mov	r24, r17
 744:	0e 94 04 04 	call	0x808	; 0x808 <restore_interrupt_setting>
      return false;
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	12 c0       	rjmp	.+36     	; 0x770 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 74c:	eb 81       	ldd	r30, Y+3	; 0x03
 74e:	fc 81       	ldd	r31, Y+4	; 0x04
 750:	ef 0d       	add	r30, r15
 752:	f1 1d       	adc	r31, r1
 754:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 756:	29 81       	ldd	r18, Y+1	; 0x01
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	c9 01       	movw	r24, r18
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	6a 81       	ldd	r22, Y+2	; 0x02
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divmodhi4>
 766:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 768:	81 2f       	mov	r24, r17
 76a:	0e 94 04 04 	call	0x808	; 0x808 <restore_interrupt_setting>
      return true;
 76e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	ff 90       	pop	r15
 77a:	08 95       	ret

0000077c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 782:	0e 94 01 04 	call	0x802	; 0x802 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 786:	39 81       	ldd	r19, Y+1	; 0x01
 788:	28 81       	ld	r18, Y
 78a:	32 17       	cp	r19, r18
 78c:	18 f0       	brcs	.+6      	; 0x794 <bytequeue_length+0x18>
      len = queue->end - queue->start;
 78e:	c3 2f       	mov	r28, r19
 790:	c2 1b       	sub	r28, r18
 792:	04 c0       	rjmp	.+8      	; 0x79c <bytequeue_length+0x20>
 794:	9a 81       	ldd	r25, Y+2	; 0x02
 796:	c3 2f       	mov	r28, r19
 798:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 79a:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 79c:	0e 94 04 04 	call	0x808	; 0x808 <restore_interrupt_setting>
   return len;
}
 7a0:	8c 2f       	mov	r24, r28
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 7a8:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 7aa:	80 81       	ld	r24, Z
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	9b 01       	movw	r18, r22
 7b0:	28 0f       	add	r18, r24
 7b2:	31 1d       	adc	r19, r1
 7b4:	c9 01       	movw	r24, r18
 7b6:	62 81       	ldd	r22, Z+2	; 0x02
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divmodhi4>
 7be:	03 80       	ldd	r0, Z+3	; 0x03
 7c0:	f4 81       	ldd	r31, Z+4	; 0x04
 7c2:	e0 2d       	mov	r30, r0
 7c4:	e8 0f       	add	r30, r24
 7c6:	f9 1f       	adc	r31, r25
}
 7c8:	80 81       	ld	r24, Z
 7ca:	08 95       	ret

000007cc <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	ec 01       	movw	r28, r24
 7d4:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 7d6:	0e 94 01 04 	call	0x802	; 0x802 <store_and_clear_interrupt>
 7da:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 7dc:	88 81       	ld	r24, Y
 7de:	21 2f       	mov	r18, r17
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	b9 01       	movw	r22, r18
 7e4:	68 0f       	add	r22, r24
 7e6:	71 1d       	adc	r23, r1
 7e8:	cb 01       	movw	r24, r22
 7ea:	6a 81       	ldd	r22, Y+2	; 0x02
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divmodhi4>
 7f2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 7f4:	84 2f       	mov	r24, r20
 7f6:	0e 94 04 04 	call	0x808	; 0x808 <restore_interrupt_setting>
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	08 95       	ret

00000802 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 802:	8f b7       	in	r24, 0x3f	; 63
   cli();
 804:	f8 94       	cli
   return sreg;
}
 806:	08 95       	ret

00000808 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 808:	8f bf       	out	0x3f, r24	; 63
 80a:	08 95       	ret

0000080c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 80c:	88 1f       	adc	r24, r24
 80e:	88 27       	eor	r24, r24
 810:	88 1f       	adc	r24, r24
 812:	08 95       	ret

00000814 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	88 3f       	cpi	r24, 0xF8	; 248
 818:	08 f4       	brcc	.+2      	; 0x81c <midi_is_realtime+0x8>
 81a:	90 e0       	ldi	r25, 0x00	; 0
}
 81c:	89 2f       	mov	r24, r25
 81e:	08 95       	ret

00000820 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 820:	98 2f       	mov	r25, r24
 822:	90 7f       	andi	r25, 0xF0	; 240
 824:	90 3c       	cpi	r25, 0xC0	; 192
 826:	b1 f0       	breq	.+44     	; 0x854 <midi_packet_length+0x34>
 828:	58 f4       	brcc	.+22     	; 0x840 <midi_packet_length+0x20>
 82a:	90 39       	cpi	r25, 0x90	; 144
 82c:	41 f1       	breq	.+80     	; 0x87e <midi_packet_length+0x5e>
 82e:	18 f4       	brcc	.+6      	; 0x836 <midi_packet_length+0x16>
 830:	90 38       	cpi	r25, 0x80	; 128
 832:	19 f5       	brne	.+70     	; 0x87a <midi_packet_length+0x5a>
 834:	24 c0       	rjmp	.+72     	; 0x87e <midi_packet_length+0x5e>
 836:	90 3a       	cpi	r25, 0xA0	; 160
 838:	11 f1       	breq	.+68     	; 0x87e <midi_packet_length+0x5e>
 83a:	90 3b       	cpi	r25, 0xB0	; 176
 83c:	f1 f4       	brne	.+60     	; 0x87a <midi_packet_length+0x5a>
 83e:	1f c0       	rjmp	.+62     	; 0x87e <midi_packet_length+0x5e>
 840:	90 3e       	cpi	r25, 0xE0	; 224
 842:	e9 f0       	breq	.+58     	; 0x87e <midi_packet_length+0x5e>
 844:	18 f4       	brcc	.+6      	; 0x84c <midi_packet_length+0x2c>
 846:	90 3d       	cpi	r25, 0xD0	; 208
 848:	29 f0       	breq	.+10     	; 0x854 <midi_packet_length+0x34>
 84a:	17 c0       	rjmp	.+46     	; 0x87a <midi_packet_length+0x5a>
 84c:	90 3f       	cpi	r25, 0xF0	; 240
 84e:	21 f0       	breq	.+8      	; 0x858 <midi_packet_length+0x38>
 850:	93 3f       	cpi	r25, 0xF3	; 243
 852:	99 f4       	brne	.+38     	; 0x87a <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	08 95       	ret
      case 0xF0:
         switch(status) {
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	fc 01       	movw	r30, r24
 85c:	e1 5f       	subi	r30, 0xF1	; 241
 85e:	f1 09       	sbc	r31, r1
 860:	ef 30       	cpi	r30, 0x0F	; 15
 862:	f1 05       	cpc	r31, r1
 864:	40 f4       	brcc	.+16     	; 0x876 <midi_packet_length+0x56>
 866:	e6 5a       	subi	r30, 0xA6	; 166
 868:	ff 4f       	sbci	r31, 0xFF	; 255
 86a:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret
         }
      default:
         return UNDEFINED;
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 87e:	83 e0       	ldi	r24, 0x03	; 3
 880:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 882:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 884:	08 95       	ret

00000886 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 886:	fc 01       	movw	r30, r24
 888:	75 83       	std	Z+5, r23	; 0x05
 88a:	64 83       	std	Z+4, r22	; 0x04
 88c:	08 95       	ret

0000088e <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 88e:	fc 01       	movw	r30, r24
 890:	77 83       	std	Z+7, r23	; 0x07
 892:	66 83       	std	Z+6, r22	; 0x06
 894:	08 95       	ret

00000896 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 896:	fc 01       	movw	r30, r24
 898:	77 8b       	std	Z+23, r23	; 0x17
 89a:	66 8b       	std	Z+22, r22	; 0x16
 89c:	08 95       	ret

0000089e <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 8a4:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 8a6:	1f a2       	std	Y+39, r1	; 0x27
 8a8:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 8aa:	bc 01       	movw	r22, r24
 8ac:	68 5d       	subi	r22, 0xD8	; 216
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	40 ec       	ldi	r20, 0xC0	; 192
 8b2:	88 51       	subi	r24, 0x18	; 24
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	0e 94 81 03 	call	0x702	; 0x702 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 8ba:	1b 82       	std	Y+3, r1	; 0x03
 8bc:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 8be:	1d 82       	std	Y+5, r1	; 0x05
 8c0:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 8c2:	1f 82       	std	Y+7, r1	; 0x07
 8c4:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 8c6:	19 86       	std	Y+9, r1	; 0x09
 8c8:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 8ca:	1b 86       	std	Y+11, r1	; 0x0b
 8cc:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 8ce:	1d 86       	std	Y+13, r1	; 0x0d
 8d0:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 8d2:	1f 86       	std	Y+15, r1	; 0x0f
 8d4:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 8d6:	19 8a       	std	Y+17, r1	; 0x11
 8d8:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 8da:	1b 8a       	std	Y+19, r1	; 0x13
 8dc:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 8de:	1d 8a       	std	Y+21, r1	; 0x15
 8e0:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 8e2:	1f 8a       	std	Y+23, r1	; 0x17
 8e4:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 8e6:	19 8e       	std	Y+25, r1	; 0x19
 8e8:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 8ea:	1b 8e       	std	Y+27, r1	; 0x1b
 8ec:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 8ee:	1d 8e       	std	Y+29, r1	; 0x1d
 8f0:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 8f2:	1f 8e       	std	Y+31, r1	; 0x1f
 8f4:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 8f6:	19 a2       	std	Y+33, r1	; 0x21
 8f8:	18 a2       	std	Y+32, r1	; 0x20
}
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	08 95       	ret

00000900 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 900:	ef 92       	push	r14
 902:	ff 92       	push	r15
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 90c:	66 23       	and	r22, r22
 90e:	99 f0       	breq	.+38     	; 0x936 <midi_device_input+0x36>
 910:	ea 01       	movw	r28, r20
 912:	61 50       	subi	r22, 0x01	; 1
 914:	06 2f       	mov	r16, r22
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	0f 5f       	subi	r16, 0xFF	; 255
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	04 0f       	add	r16, r20
 91e:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 920:	7c 01       	movw	r14, r24
 922:	28 ee       	ldi	r18, 0xE8	; 232
 924:	e2 0e       	add	r14, r18
 926:	f1 1c       	adc	r15, r1
 928:	69 91       	ld	r22, Y+
 92a:	c7 01       	movw	r24, r14
 92c:	0e 94 88 03 	call	0x710	; 0x710 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 930:	c0 17       	cp	r28, r16
 932:	d1 07       	cpc	r29, r17
 934:	c9 f7       	brne	.-14     	; 0x928 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	1f 91       	pop	r17
 93c:	0f 91       	pop	r16
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	08 95       	ret

00000944 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	00 d0       	rcall	.+0      	; 0x95a <midi_input_callbacks+0x16>
 95a:	1f 92       	push	r1
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	7c 01       	movw	r14, r24
 962:	6b 01       	movw	r12, r22
 964:	14 2f       	mov	r17, r20
 966:	b2 2e       	mov	r11, r18
 968:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 96a:	dc 01       	movw	r26, r24
 96c:	95 96       	adiw	r26, 0x25	; 37
 96e:	8c 91       	ld	r24, X
 970:	95 97       	sbiw	r26, 0x25	; 37
 972:	84 30       	cpi	r24, 0x04	; 4
 974:	11 f5       	brne	.+68     	; 0x9ba <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 976:	5a 96       	adiw	r26, 0x1a	; 26
 978:	ed 91       	ld	r30, X+
 97a:	fc 91       	ld	r31, X
 97c:	5b 97       	sbiw	r26, 0x1b	; 27
 97e:	30 97       	sbiw	r30, 0x00	; 0
 980:	09 f4       	brne	.+2      	; 0x984 <midi_input_callbacks+0x40>
 982:	cc c0       	rjmp	.+408    	; 0xb1c <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 984:	9b 01       	movw	r18, r22
 986:	21 50       	subi	r18, 0x01	; 1
 988:	31 09       	sbc	r19, r1
 98a:	ab ea       	ldi	r26, 0xAB	; 171
 98c:	ba ea       	ldi	r27, 0xAA	; 170
 98e:	0e 94 ca 06 	call	0xd94	; 0xd94 <__umulhisi3>
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	9c 01       	movw	r18, r24
 998:	22 0f       	add	r18, r18
 99a:	33 1f       	adc	r19, r19
 99c:	82 0f       	add	r24, r18
 99e:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 9a0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 9a2:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 9a4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 9a6:	4c 2d       	mov	r20, r12
 9a8:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 9aa:	9e 01       	movw	r18, r28
 9ac:	2f 5f       	subi	r18, 0xFF	; 255
 9ae:	3f 4f       	sbci	r19, 0xFF	; 255
 9b0:	68 2f       	mov	r22, r24
 9b2:	79 2f       	mov	r23, r25
 9b4:	c7 01       	movw	r24, r14
 9b6:	09 95       	icall
 9b8:	be c0       	rjmp	.+380    	; 0xb36 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
 9ba:	62 30       	cpi	r22, 0x02	; 2
 9bc:	71 05       	cpc	r23, r1
 9be:	09 f4       	brne	.+2      	; 0x9c2 <midi_input_callbacks+0x7e>
 9c0:	55 c0       	rjmp	.+170    	; 0xa6c <midi_input_callbacks+0x128>
 9c2:	63 30       	cpi	r22, 0x03	; 3
 9c4:	71 05       	cpc	r23, r1
 9c6:	29 f0       	breq	.+10     	; 0x9d2 <midi_input_callbacks+0x8e>
 9c8:	61 30       	cpi	r22, 0x01	; 1
 9ca:	71 05       	cpc	r23, r1
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <midi_input_callbacks+0x8c>
 9ce:	a1 c0       	rjmp	.+322    	; 0xb12 <midi_input_callbacks+0x1ce>
 9d0:	88 c0       	rjmp	.+272    	; 0xae2 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 9d2:	84 2f       	mov	r24, r20
 9d4:	80 7f       	andi	r24, 0xF0	; 240
 9d6:	80 3a       	cpi	r24, 0xA0	; 160
 9d8:	f1 f0       	breq	.+60     	; 0xa16 <midi_input_callbacks+0xd2>
 9da:	28 f4       	brcc	.+10     	; 0x9e6 <midi_input_callbacks+0xa2>
 9dc:	80 38       	cpi	r24, 0x80	; 128
 9de:	a9 f0       	breq	.+42     	; 0xa0a <midi_input_callbacks+0xc6>
 9e0:	80 39       	cpi	r24, 0x90	; 144
 9e2:	69 f0       	breq	.+26     	; 0x9fe <midi_input_callbacks+0xba>
 9e4:	2f c0       	rjmp	.+94     	; 0xa44 <midi_input_callbacks+0x100>
 9e6:	80 3e       	cpi	r24, 0xE0	; 224
 9e8:	e1 f0       	breq	.+56     	; 0xa22 <midi_input_callbacks+0xde>
 9ea:	80 3f       	cpi	r24, 0xF0	; 240
 9ec:	01 f1       	breq	.+64     	; 0xa2e <midi_input_callbacks+0xea>
 9ee:	80 3b       	cpi	r24, 0xB0	; 176
 9f0:	49 f5       	brne	.+82     	; 0xa44 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 9f2:	d7 01       	movw	r26, r14
 9f4:	12 96       	adiw	r26, 0x02	; 2
 9f6:	ed 91       	ld	r30, X+
 9f8:	fc 91       	ld	r31, X
 9fa:	13 97       	sbiw	r26, 0x03	; 3
              break;
 9fc:	25 c0       	rjmp	.+74     	; 0xa48 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 9fe:	d7 01       	movw	r26, r14
 a00:	14 96       	adiw	r26, 0x04	; 4
 a02:	ed 91       	ld	r30, X+
 a04:	fc 91       	ld	r31, X
 a06:	15 97       	sbiw	r26, 0x05	; 5
              break;
 a08:	1f c0       	rjmp	.+62     	; 0xa48 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 a0a:	d7 01       	movw	r26, r14
 a0c:	16 96       	adiw	r26, 0x06	; 6
 a0e:	ed 91       	ld	r30, X+
 a10:	fc 91       	ld	r31, X
 a12:	17 97       	sbiw	r26, 0x07	; 7
              break;
 a14:	19 c0       	rjmp	.+50     	; 0xa48 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 a16:	d7 01       	movw	r26, r14
 a18:	18 96       	adiw	r26, 0x08	; 8
 a1a:	ed 91       	ld	r30, X+
 a1c:	fc 91       	ld	r31, X
 a1e:	19 97       	sbiw	r26, 0x09	; 9
              break;
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 a22:	d7 01       	movw	r26, r14
 a24:	1a 96       	adiw	r26, 0x0a	; 10
 a26:	ed 91       	ld	r30, X+
 a28:	fc 91       	ld	r31, X
 a2a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 a2e:	42 3f       	cpi	r20, 0xF2	; 242
 a30:	09 f0       	breq	.+2      	; 0xa34 <midi_input_callbacks+0xf0>
 a32:	74 c0       	rjmp	.+232    	; 0xb1c <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
 a34:	d7 01       	movw	r26, r14
 a36:	1c 96       	adiw	r26, 0x0c	; 12
 a38:	ed 91       	ld	r30, X+
 a3a:	fc 91       	ld	r31, X
 a3c:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 a3e:	30 97       	sbiw	r30, 0x00	; 0
 a40:	41 f4       	brne	.+16     	; 0xa52 <midi_input_callbacks+0x10e>
 a42:	6c c0       	rjmp	.+216    	; 0xb1c <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 a44:	e0 e0       	ldi	r30, 0x00	; 0
 a46:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 a48:	30 97       	sbiw	r30, 0x00	; 0
 a4a:	09 f4       	brne	.+2      	; 0xa4e <midi_input_callbacks+0x10a>
 a4c:	67 c0       	rjmp	.+206    	; 0xb1c <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 a4e:	12 3f       	cpi	r17, 0xF2	; 242
 a50:	31 f4       	brne	.+12     	; 0xa5e <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 a52:	2a 2d       	mov	r18, r10
 a54:	4b 2d       	mov	r20, r11
 a56:	62 ef       	ldi	r22, 0xF2	; 242
 a58:	c7 01       	movw	r24, r14
 a5a:	09 95       	icall
 a5c:	6c c0       	rjmp	.+216    	; 0xb36 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 a5e:	2a 2d       	mov	r18, r10
 a60:	4b 2d       	mov	r20, r11
 a62:	61 2f       	mov	r22, r17
 a64:	6f 70       	andi	r22, 0x0F	; 15
 a66:	c7 01       	movw	r24, r14
 a68:	09 95       	icall
 a6a:	65 c0       	rjmp	.+202    	; 0xb36 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 a6c:	84 2f       	mov	r24, r20
 a6e:	80 7f       	andi	r24, 0xF0	; 240
 a70:	80 3d       	cpi	r24, 0xD0	; 208
 a72:	51 f0       	breq	.+20     	; 0xa88 <midi_input_callbacks+0x144>
 a74:	80 3f       	cpi	r24, 0xF0	; 240
 a76:	71 f0       	breq	.+28     	; 0xa94 <midi_input_callbacks+0x150>
 a78:	80 3c       	cpi	r24, 0xC0	; 192
 a7a:	01 f5       	brne	.+64     	; 0xabc <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 a7c:	d7 01       	movw	r26, r14
 a7e:	1e 96       	adiw	r26, 0x0e	; 14
 a80:	ed 91       	ld	r30, X+
 a82:	fc 91       	ld	r31, X
 a84:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 a86:	1c c0       	rjmp	.+56     	; 0xac0 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 a88:	d7 01       	movw	r26, r14
 a8a:	50 96       	adiw	r26, 0x10	; 16
 a8c:	ed 91       	ld	r30, X+
 a8e:	fc 91       	ld	r31, X
 a90:	51 97       	sbiw	r26, 0x11	; 17
              break;
 a92:	16 c0       	rjmp	.+44     	; 0xac0 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 a94:	43 3f       	cpi	r20, 0xF3	; 243
 a96:	41 f4       	brne	.+16     	; 0xaa8 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
 a98:	d7 01       	movw	r26, r14
 a9a:	52 96       	adiw	r26, 0x12	; 18
 a9c:	ed 91       	ld	r30, X+
 a9e:	fc 91       	ld	r31, X
 aa0:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 aa2:	30 97       	sbiw	r30, 0x00	; 0
 aa4:	99 f4       	brne	.+38     	; 0xacc <midi_input_callbacks+0x188>
 aa6:	3a c0       	rjmp	.+116    	; 0xb1c <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 aa8:	41 3f       	cpi	r20, 0xF1	; 241
 aaa:	c1 f5       	brne	.+112    	; 0xb1c <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
 aac:	d7 01       	movw	r26, r14
 aae:	54 96       	adiw	r26, 0x14	; 20
 ab0:	ed 91       	ld	r30, X+
 ab2:	fc 91       	ld	r31, X
 ab4:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 ab6:	30 97       	sbiw	r30, 0x00	; 0
 ab8:	49 f4       	brne	.+18     	; 0xacc <midi_input_callbacks+0x188>
 aba:	30 c0       	rjmp	.+96     	; 0xb1c <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 abc:	e0 e0       	ldi	r30, 0x00	; 0
 abe:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 ac0:	30 97       	sbiw	r30, 0x00	; 0
 ac2:	61 f1       	breq	.+88     	; 0xb1c <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 ac4:	81 2f       	mov	r24, r17
 ac6:	8d 7f       	andi	r24, 0xFD	; 253
 ac8:	81 3f       	cpi	r24, 0xF1	; 241
 aca:	29 f4       	brne	.+10     	; 0xad6 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
 acc:	4b 2d       	mov	r20, r11
 ace:	61 2f       	mov	r22, r17
 ad0:	c7 01       	movw	r24, r14
 ad2:	09 95       	icall
 ad4:	30 c0       	rjmp	.+96     	; 0xb36 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
 ad6:	4b 2d       	mov	r20, r11
 ad8:	61 2f       	mov	r22, r17
 ada:	6f 70       	andi	r22, 0x0F	; 15
 adc:	c7 01       	movw	r24, r14
 ade:	09 95       	icall
 ae0:	2a c0       	rjmp	.+84     	; 0xb36 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 ae2:	84 2f       	mov	r24, r20
 ae4:	0e 94 0a 04 	call	0x814	; 0x814 <midi_is_realtime>
 ae8:	88 23       	and	r24, r24
 aea:	31 f0       	breq	.+12     	; 0xaf8 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
 aec:	d7 01       	movw	r26, r14
 aee:	56 96       	adiw	r26, 0x16	; 22
 af0:	ed 91       	ld	r30, X+
 af2:	fc 91       	ld	r31, X
 af4:	57 97       	sbiw	r26, 0x17	; 23
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
 af8:	16 3f       	cpi	r17, 0xF6	; 246
 afa:	81 f4       	brne	.+32     	; 0xb1c <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
 afc:	d7 01       	movw	r26, r14
 afe:	58 96       	adiw	r26, 0x18	; 24
 b00:	ed 91       	ld	r30, X+
 b02:	fc 91       	ld	r31, X
 b04:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 b06:	30 97       	sbiw	r30, 0x00	; 0
 b08:	49 f0       	breq	.+18     	; 0xb1c <midi_input_callbacks+0x1d8>
            func(device, byte0);
 b0a:	61 2f       	mov	r22, r17
 b0c:	c7 01       	movw	r24, r14
 b0e:	09 95       	icall
 b10:	12 c0       	rjmp	.+36     	; 0xb36 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 b12:	64 30       	cpi	r22, 0x04	; 4
 b14:	71 05       	cpc	r23, r1
 b16:	10 f0       	brcs	.+4      	; 0xb1c <midi_input_callbacks+0x1d8>
          cnt = 0;
 b18:	c1 2c       	mov	r12, r1
 b1a:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 b1c:	d7 01       	movw	r26, r14
 b1e:	5c 96       	adiw	r26, 0x1c	; 28
 b20:	ed 91       	ld	r30, X+
 b22:	fc 91       	ld	r31, X
 b24:	5d 97       	sbiw	r26, 0x1d	; 29
 b26:	30 97       	sbiw	r30, 0x00	; 0
 b28:	31 f0       	breq	.+12     	; 0xb36 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 b2a:	0a 2d       	mov	r16, r10
 b2c:	2b 2d       	mov	r18, r11
 b2e:	41 2f       	mov	r20, r17
 b30:	b6 01       	movw	r22, r12
 b32:	c7 01       	movw	r24, r14
 b34:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 b36:	d7 01       	movw	r26, r14
 b38:	5e 96       	adiw	r26, 0x1e	; 30
 b3a:	ed 91       	ld	r30, X+
 b3c:	fc 91       	ld	r31, X
 b3e:	5f 97       	sbiw	r26, 0x1f	; 31
 b40:	30 97       	sbiw	r30, 0x00	; 0
 b42:	31 f0       	breq	.+12     	; 0xb50 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 b44:	0a 2d       	mov	r16, r10
 b46:	2b 2d       	mov	r18, r11
 b48:	41 2f       	mov	r20, r17
 b4a:	b6 01       	movw	r22, r12
 b4c:	c7 01       	movw	r24, r14
 b4e:	09 95       	icall
}
 b50:	0f 90       	pop	r0
 b52:	0f 90       	pop	r0
 b54:	0f 90       	pop	r0
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	1f 91       	pop	r17
 b5c:	0f 91       	pop	r16
 b5e:	ff 90       	pop	r15
 b60:	ef 90       	pop	r14
 b62:	df 90       	pop	r13
 b64:	cf 90       	pop	r12
 b66:	bf 90       	pop	r11
 b68:	af 90       	pop	r10
 b6a:	08 95       	ret

00000b6c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 b6c:	ff 92       	push	r15
 b6e:	0f 93       	push	r16
 b70:	1f 93       	push	r17
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	ec 01       	movw	r28, r24
 b78:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 b7a:	86 2f       	mov	r24, r22
 b7c:	0e 94 0a 04 	call	0x814	; 0x814 <midi_is_realtime>
 b80:	88 23       	and	r24, r24
 b82:	69 f0       	breq	.+26     	; 0xb9e <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 b84:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 b8a:	00 e0       	ldi	r16, 0x00	; 0
 b8c:	20 e0       	ldi	r18, 0x00	; 0
 b8e:	41 2f       	mov	r20, r17
 b90:	61 e0       	ldi	r22, 0x01	; 1
 b92:	70 e0       	ldi	r23, 0x00	; 0
 b94:	ce 01       	movw	r24, r28
 b96:	0e 94 a2 04 	call	0x944	; 0x944 <midi_input_callbacks>
    device->input_state = state;
 b9a:	fd a2       	std	Y+37, r15	; 0x25
 b9c:	a4 c0       	rjmp	.+328    	; 0xce6 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
 b9e:	81 2f       	mov	r24, r17
 ba0:	0e 94 06 04 	call	0x80c	; 0x80c <midi_is_statusbyte>
 ba4:	88 23       	and	r24, r24
 ba6:	09 f4       	brne	.+2      	; 0xbaa <midi_process_byte+0x3e>
 ba8:	5d c0       	rjmp	.+186    	; 0xc64 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 baa:	8d a1       	ldd	r24, Y+37	; 0x25
 bac:	84 30       	cpi	r24, 0x04	; 4
 bae:	29 f0       	breq	.+10     	; 0xbba <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
 bb0:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	9f a3       	std	Y+39, r25	; 0x27
 bb8:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 bba:	81 2f       	mov	r24, r17
 bbc:	0e 94 10 04 	call	0x820	; 0x820 <midi_packet_length>
 bc0:	81 30       	cpi	r24, 0x01	; 1
 bc2:	31 f0       	breq	.+12     	; 0xbd0 <midi_process_byte+0x64>
 bc4:	b8 f0       	brcs	.+46     	; 0xbf4 <midi_process_byte+0x88>
 bc6:	82 30       	cpi	r24, 0x02	; 2
 bc8:	79 f0       	breq	.+30     	; 0xbe8 <midi_process_byte+0x7c>
 bca:	83 30       	cpi	r24, 0x03	; 3
 bcc:	81 f0       	breq	.+32     	; 0xbee <midi_process_byte+0x82>
 bce:	46 c0       	rjmp	.+140    	; 0xc5c <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 bd4:	00 e0       	ldi	r16, 0x00	; 0
 bd6:	20 e0       	ldi	r18, 0x00	; 0
 bd8:	41 2f       	mov	r20, r17
 bda:	61 e0       	ldi	r22, 0x01	; 1
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	ce 01       	movw	r24, r28
 be0:	0e 94 a2 04 	call	0x944	; 0x944 <midi_input_callbacks>
        device->input_state = IDLE;
 be4:	1d a2       	std	Y+37, r1	; 0x25
        break;
 be6:	7f c0       	rjmp	.+254    	; 0xce6 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 be8:	82 e0       	ldi	r24, 0x02	; 2
 bea:	8d a3       	std	Y+37, r24	; 0x25
        break;
 bec:	7c c0       	rjmp	.+248    	; 0xce6 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 bee:	83 e0       	ldi	r24, 0x03	; 3
 bf0:	8d a3       	std	Y+37, r24	; 0x25
        break;
 bf2:	79 c0       	rjmp	.+242    	; 0xce6 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
 bf4:	10 3f       	cpi	r17, 0xF0	; 240
 bf6:	19 f0       	breq	.+6      	; 0xbfe <midi_process_byte+0x92>
 bf8:	17 3f       	cpi	r17, 0xF7	; 247
 bfa:	51 f0       	breq	.+20     	; 0xc10 <midi_process_byte+0xa4>
 bfc:	2b c0       	rjmp	.+86     	; 0xc54 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 bfe:	84 e0       	ldi	r24, 0x04	; 4
 c00:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 c02:	80 ef       	ldi	r24, 0xF0	; 240
 c04:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	9f a3       	std	Y+39, r25	; 0x27
 c0c:	8e a3       	std	Y+38, r24	; 0x26
            break;
 c0e:	6b c0       	rjmp	.+214    	; 0xce6 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 c10:	4e a1       	ldd	r20, Y+38	; 0x26
 c12:	5f a1       	ldd	r21, Y+39	; 0x27
 c14:	9a 01       	movw	r18, r20
 c16:	ab ea       	ldi	r26, 0xAB	; 171
 c18:	ba ea       	ldi	r27, 0xAA	; 170
 c1a:	0e 94 ca 06 	call	0xd94	; 0xd94 <__umulhisi3>
 c1e:	96 95       	lsr	r25
 c20:	87 95       	ror	r24
 c22:	9c 01       	movw	r18, r24
 c24:	22 0f       	add	r18, r18
 c26:	33 1f       	adc	r19, r19
 c28:	82 0f       	add	r24, r18
 c2a:	93 1f       	adc	r25, r19
 c2c:	fa 01       	movw	r30, r20
 c2e:	e8 1b       	sub	r30, r24
 c30:	f9 0b       	sbc	r31, r25
 c32:	ec 0f       	add	r30, r28
 c34:	fd 1f       	adc	r31, r29
 c36:	87 ef       	ldi	r24, 0xF7	; 247
 c38:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 c3a:	ba 01       	movw	r22, r20
 c3c:	6f 5f       	subi	r22, 0xFF	; 255
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	7f a3       	std	Y+39, r23	; 0x27
 c42:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 c44:	0c a1       	ldd	r16, Y+36	; 0x24
 c46:	2b a1       	ldd	r18, Y+35	; 0x23
 c48:	4a a1       	ldd	r20, Y+34	; 0x22
 c4a:	ce 01       	movw	r24, r28
 c4c:	0e 94 a2 04 	call	0x944	; 0x944 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 c50:	1d a2       	std	Y+37, r1	; 0x25
            break;
 c52:	49 c0       	rjmp	.+146    	; 0xce6 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
 c54:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 c56:	1f a2       	std	Y+39, r1	; 0x27
 c58:	1e a2       	std	Y+38, r1	; 0x26
 c5a:	45 c0       	rjmp	.+138    	; 0xce6 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
 c5c:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 c5e:	1f a2       	std	Y+39, r1	; 0x27
 c60:	1e a2       	std	Y+38, r1	; 0x26
        break;
 c62:	41 c0       	rjmp	.+130    	; 0xce6 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
 c64:	ed a1       	ldd	r30, Y+37	; 0x25
 c66:	ee 23       	and	r30, r30
 c68:	f1 f1       	breq	.+124    	; 0xce6 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 c6a:	4e a1       	ldd	r20, Y+38	; 0x26
 c6c:	5f a1       	ldd	r21, Y+39	; 0x27
 c6e:	9a 01       	movw	r18, r20
 c70:	ab ea       	ldi	r26, 0xAB	; 171
 c72:	ba ea       	ldi	r27, 0xAA	; 170
 c74:	0e 94 ca 06 	call	0xd94	; 0xd94 <__umulhisi3>
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	9c 01       	movw	r18, r24
 c7e:	22 0f       	add	r18, r18
 c80:	33 1f       	adc	r19, r19
 c82:	82 0f       	add	r24, r18
 c84:	93 1f       	adc	r25, r19
 c86:	9a 01       	movw	r18, r20
 c88:	28 1b       	sub	r18, r24
 c8a:	39 0b       	sbc	r19, r25
 c8c:	de 01       	movw	r26, r28
 c8e:	a2 0f       	add	r26, r18
 c90:	b3 1f       	adc	r27, r19
 c92:	92 96       	adiw	r26, 0x22	; 34
 c94:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 c96:	ba 01       	movw	r22, r20
 c98:	6f 5f       	subi	r22, 0xFF	; 255
 c9a:	7f 4f       	sbci	r23, 0xFF	; 255
 c9c:	7f a3       	std	Y+39, r23	; 0x27
 c9e:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 ca0:	21 30       	cpi	r18, 0x01	; 1
 ca2:	31 05       	cpc	r19, r1
 ca4:	89 f0       	breq	.+34     	; 0xcc8 <midi_process_byte+0x15c>
 ca6:	22 30       	cpi	r18, 0x02	; 2
 ca8:	31 05       	cpc	r19, r1
 caa:	e9 f4       	brne	.+58     	; 0xce6 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 cac:	0c a1       	ldd	r16, Y+36	; 0x24
 cae:	2b a1       	ldd	r18, Y+35	; 0x23
 cb0:	4a a1       	ldd	r20, Y+34	; 0x22
 cb2:	ce 01       	movw	r24, r28
 cb4:	0e 94 a2 04 	call	0x944	; 0x944 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 cb8:	8d a1       	ldd	r24, Y+37	; 0x25
 cba:	84 30       	cpi	r24, 0x04	; 4
 cbc:	a1 f0       	breq	.+40     	; 0xce6 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 cbe:	81 e0       	ldi	r24, 0x01	; 1
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	9f a3       	std	Y+39, r25	; 0x27
 cc4:	8e a3       	std	Y+38, r24	; 0x26
 cc6:	0f c0       	rjmp	.+30     	; 0xce6 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 cc8:	e2 30       	cpi	r30, 0x02	; 2
 cca:	69 f4       	brne	.+26     	; 0xce6 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
 ccc:	00 e0       	ldi	r16, 0x00	; 0
 cce:	2b a1       	ldd	r18, Y+35	; 0x23
 cd0:	4a a1       	ldd	r20, Y+34	; 0x22
 cd2:	ce 01       	movw	r24, r28
 cd4:	0e 94 a2 04 	call	0x944	; 0x944 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 cd8:	8d a1       	ldd	r24, Y+37	; 0x25
 cda:	84 30       	cpi	r24, 0x04	; 4
 cdc:	21 f0       	breq	.+8      	; 0xce6 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 cde:	81 e0       	ldi	r24, 0x01	; 1
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	9f a3       	std	Y+39, r25	; 0x27
 ce4:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 ce6:	df 91       	pop	r29
 ce8:	cf 91       	pop	r28
 cea:	1f 91       	pop	r17
 cec:	0f 91       	pop	r16
 cee:	ff 90       	pop	r15
 cf0:	08 95       	ret

00000cf2 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 cf2:	cf 92       	push	r12
 cf4:	df 92       	push	r13
 cf6:	ef 92       	push	r14
 cf8:	ff 92       	push	r15
 cfa:	0f 93       	push	r16
 cfc:	1f 93       	push	r17
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 d04:	dc 01       	movw	r26, r24
 d06:	90 96       	adiw	r26, 0x20	; 32
 d08:	ed 91       	ld	r30, X+
 d0a:	fc 91       	ld	r31, X
 d0c:	91 97       	sbiw	r26, 0x21	; 33
 d0e:	30 97       	sbiw	r30, 0x00	; 0
 d10:	09 f0       	breq	.+2      	; 0xd14 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 d12:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 d14:	86 01       	movw	r16, r12
 d16:	08 51       	subi	r16, 0x18	; 24
 d18:	1f 4f       	sbci	r17, 0xFF	; 255
 d1a:	c8 01       	movw	r24, r16
 d1c:	0e 94 be 03 	call	0x77c	; 0x77c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 d20:	e8 2e       	mov	r14, r24
 d22:	f1 2c       	mov	r15, r1
 d24:	e1 14       	cp	r14, r1
 d26:	f1 04       	cpc	r15, r1
 d28:	91 f0       	breq	.+36     	; 0xd4e <midi_device_process+0x5c>
 d2a:	c0 e0       	ldi	r28, 0x00	; 0
 d2c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 d2e:	60 e0       	ldi	r22, 0x00	; 0
 d30:	c8 01       	movw	r24, r16
 d32:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <bytequeue_get>
 d36:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 d38:	c6 01       	movw	r24, r12
 d3a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 d3e:	61 e0       	ldi	r22, 0x01	; 1
 d40:	c8 01       	movw	r24, r16
 d42:	0e 94 e6 03 	call	0x7cc	; 0x7cc <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 d46:	21 96       	adiw	r28, 0x01	; 1
 d48:	ce 15       	cp	r28, r14
 d4a:	df 05       	cpc	r29, r15
 d4c:	81 f7       	brne	.-32     	; 0xd2e <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 d4e:	df 91       	pop	r29
 d50:	cf 91       	pop	r28
 d52:	1f 91       	pop	r17
 d54:	0f 91       	pop	r16
 d56:	ff 90       	pop	r15
 d58:	ef 90       	pop	r14
 d5a:	df 90       	pop	r13
 d5c:	cf 90       	pop	r12
 d5e:	08 95       	ret

00000d60 <__divmodhi4>:
 d60:	97 fb       	bst	r25, 7
 d62:	07 2e       	mov	r0, r23
 d64:	16 f4       	brtc	.+4      	; 0xd6a <__divmodhi4+0xa>
 d66:	00 94       	com	r0
 d68:	07 d0       	rcall	.+14     	; 0xd78 <__divmodhi4_neg1>
 d6a:	77 fd       	sbrc	r23, 7
 d6c:	09 d0       	rcall	.+18     	; 0xd80 <__divmodhi4_neg2>
 d6e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__udivmodhi4>
 d72:	07 fc       	sbrc	r0, 7
 d74:	05 d0       	rcall	.+10     	; 0xd80 <__divmodhi4_neg2>
 d76:	3e f4       	brtc	.+14     	; 0xd86 <__divmodhi4_exit>

00000d78 <__divmodhi4_neg1>:
 d78:	90 95       	com	r25
 d7a:	81 95       	neg	r24
 d7c:	9f 4f       	sbci	r25, 0xFF	; 255
 d7e:	08 95       	ret

00000d80 <__divmodhi4_neg2>:
 d80:	70 95       	com	r23
 d82:	61 95       	neg	r22
 d84:	7f 4f       	sbci	r23, 0xFF	; 255

00000d86 <__divmodhi4_exit>:
 d86:	08 95       	ret

00000d88 <__tablejump2__>:
 d88:	ee 0f       	add	r30, r30
 d8a:	ff 1f       	adc	r31, r31
 d8c:	05 90       	lpm	r0, Z+
 d8e:	f4 91       	lpm	r31, Z
 d90:	e0 2d       	mov	r30, r0
 d92:	09 94       	ijmp

00000d94 <__umulhisi3>:
 d94:	a2 9f       	mul	r26, r18
 d96:	b0 01       	movw	r22, r0
 d98:	b3 9f       	mul	r27, r19
 d9a:	c0 01       	movw	r24, r0
 d9c:	a3 9f       	mul	r26, r19
 d9e:	70 0d       	add	r23, r0
 da0:	81 1d       	adc	r24, r1
 da2:	11 24       	eor	r1, r1
 da4:	91 1d       	adc	r25, r1
 da6:	b2 9f       	mul	r27, r18
 da8:	70 0d       	add	r23, r0
 daa:	81 1d       	adc	r24, r1
 dac:	11 24       	eor	r1, r1
 dae:	91 1d       	adc	r25, r1
 db0:	08 95       	ret

00000db2 <__udivmodhi4>:
 db2:	aa 1b       	sub	r26, r26
 db4:	bb 1b       	sub	r27, r27
 db6:	51 e1       	ldi	r21, 0x11	; 17
 db8:	07 c0       	rjmp	.+14     	; 0xdc8 <__udivmodhi4_ep>

00000dba <__udivmodhi4_loop>:
 dba:	aa 1f       	adc	r26, r26
 dbc:	bb 1f       	adc	r27, r27
 dbe:	a6 17       	cp	r26, r22
 dc0:	b7 07       	cpc	r27, r23
 dc2:	10 f0       	brcs	.+4      	; 0xdc8 <__udivmodhi4_ep>
 dc4:	a6 1b       	sub	r26, r22
 dc6:	b7 0b       	sbc	r27, r23

00000dc8 <__udivmodhi4_ep>:
 dc8:	88 1f       	adc	r24, r24
 dca:	99 1f       	adc	r25, r25
 dcc:	5a 95       	dec	r21
 dce:	a9 f7       	brne	.-22     	; 0xdba <__udivmodhi4_loop>
 dd0:	80 95       	com	r24
 dd2:	90 95       	com	r25
 dd4:	bc 01       	movw	r22, r24
 dd6:	cd 01       	movw	r24, r26
 dd8:	08 95       	ret

00000dda <_exit>:
 dda:	f8 94       	cli

00000ddc <__stop_program>:
 ddc:	ff cf       	rjmp	.-2      	; 0xddc <__stop_program>
