
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000b2e  00000bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  00800206  00800206  00000cc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028b3  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000849  00000000  00000000  00003843  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a85  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  00004b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd5  00000000  00000000  00005180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f3  00000000  00000000  00005d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00007648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	e1 02       	muls	r30, r17
  b6:	df 02       	muls	r29, r31
  b8:	e1 02       	muls	r30, r17
  ba:	e3 02       	muls	r30, r19
  bc:	e3 02       	muls	r30, r19
  be:	e9 02       	muls	r30, r25
  c0:	e3 02       	muls	r30, r19
  c2:	e9 02       	muls	r30, r25
  c4:	e9 02       	muls	r30, r25
  c6:	e9 02       	muls	r30, r25
  c8:	e9 02       	muls	r30, r25
  ca:	e9 02       	muls	r30, r25
  cc:	e3 02       	muls	r30, r19
  ce:	e9 02       	muls	r30, r25
  d0:	e9 02       	muls	r30, r25

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ee e2       	ldi	r30, 0x2E	; 46
  e6:	fb e0       	ldi	r31, 0x0B	; 11
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	a6 30       	cpi	r26, 0x06	; 6
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a6 e0       	ldi	r26, 0x06	; 6
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ad 3f       	cpi	r26, 0xFD	; 253
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 ba 01 	call	0x374	; 0x374 <main>
 108:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 110:	08 95       	ret

00000112 <real_time_event>:
	

}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 112:	08 95       	ret

00000114 <spi_shift_byte>:



uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 114:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 118:	ed ea       	ldi	r30, 0xAD	; 173
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <spi_shift_byte+0x8>
	return SPDR1;
 122:	80 91 ae 00 	lds	r24, 0x00AE
	
}
 126:	08 95       	ret

00000128 <note_on_event>:
void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	
	spi_data[1] = 1<<step_number;
 130:	80 91 06 02 	lds	r24, 0x0206
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	08 2e       	mov	r0, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <note_on_event+0x18>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <note_on_event+0x14>
 144:	e7 e0       	ldi	r30, 0x07	; 7
 146:	f2 e0       	ldi	r31, 0x02	; 2
 148:	61 83       	std	Z+1, r22	; 0x01
	spi_data[0] = (1<<step_number)>>8;
 14a:	70 83       	st	Z, r23
	if (step_number++ == 15) step_number = 0;
 14c:	8f 30       	cpi	r24, 0x0F	; 15
 14e:	21 f0       	breq	.+8      	; 0x158 <note_on_event+0x30>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 06 02 	sts	0x0206, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <note_on_event+0x34>
 158:	10 92 06 02 	sts	0x0206, r1
	if (note < 16) {
 15c:	40 31       	cpi	r20, 0x10	; 16
 15e:	08 f0       	brcs	.+2      	; 0x162 <note_on_event+0x3a>
 160:	c6 c0       	rjmp	.+396    	; 0x2ee <note_on_event+0x1c6>
		
		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 162:	04 2f       	mov	r16, r20
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	c8 01       	movw	r24, r16
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	fc 01       	movw	r30, r24
 16e:	e0 0f       	add	r30, r16
 170:	f1 1f       	adc	r31, r17
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ef 5f       	subi	r30, 0xFF	; 255
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	e0 81       	ld	r30, Z
 17c:	ef 70       	andi	r30, 0x0F	; 15
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	c7 e0       	ldi	r28, 0x07	; 7
 182:	d2 e0       	ldi	r29, 0x02	; 2
 184:	e9 5f       	subi	r30, 0xF9	; 249
 186:	fd 4f       	sbci	r31, 0xFD	; 253
 188:	dc 01       	movw	r26, r24
 18a:	a0 0f       	add	r26, r16
 18c:	b1 1f       	adc	r27, r17
 18e:	aa 0f       	add	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	a0 50       	subi	r26, 0x00	; 0
 194:	bf 4f       	sbci	r27, 0xFF	; 255
 196:	40 81       	ld	r20, Z
 198:	12 96       	adiw	r26, 0x02	; 2
 19a:	3c 91       	ld	r19, X
 19c:	12 97       	sbiw	r26, 0x02	; 2
 19e:	34 2b       	or	r19, r20
 1a0:	30 83       	st	Z, r19
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 1a2:	fc 01       	movw	r30, r24
 1a4:	e0 0f       	add	r30, r16
 1a6:	f1 1f       	adc	r31, r17
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ec 5f       	subi	r30, 0xFC	; 252
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	80 81       	ld	r24, Z
 1b2:	e8 2f       	mov	r30, r24
 1b4:	e6 95       	lsr	r30
 1b6:	ef 70       	andi	r30, 0x0F	; 15
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	e9 5f       	subi	r30, 0xF9	; 249
 1bc:	fd 4f       	sbci	r31, 0xFD	; 253
 1be:	30 81       	ld	r19, Z
 1c0:	15 96       	adiw	r26, 0x05	; 5
 1c2:	9c 91       	ld	r25, X
 1c4:	15 97       	sbiw	r26, 0x05	; 5
 1c6:	93 2b       	or	r25, r19
 1c8:	90 83       	st	Z, r25
		
		if (drum_hit[note].switch_bit != -1) {//need to set instrument switch
			
			
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 1ca:	9b 81       	ldd	r25, Y+3	; 0x03
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	81 95       	neg	r24
 1d0:	89 27       	eor	r24, r25
 1d2:	13 96       	adiw	r26, 0x03	; 3
 1d4:	3c 91       	ld	r19, X
 1d6:	83 23       	and	r24, r19
 1d8:	98 27       	eor	r25, r24
 1da:	9b 83       	std	Y+3, r25	; 0x03
			
		}
	
	if (velocity > 64) {
 1dc:	21 34       	cpi	r18, 0x41	; 65
 1de:	30 f0       	brcs	.+12     	; 0x1ec <note_on_event+0xc4>
		spi_data[8] |= (1<<ACCENT);
 1e0:	88 85       	ldd	r24, Y+8	; 0x08
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	88 87       	std	Y+8, r24	; 0x08
		spi_data[2] |= (1<<ACCENT_LED);
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	8a 83       	std	Y+2, r24	; 0x02
	}
		PORTD |= 1<<TRIG;
 1ec:	5d 9a       	sbi	0x0b, 5	; 11
		
		spi_shift_byte(spi_data[0]);
 1ee:	c7 e0       	ldi	r28, 0x07	; 7
 1f0:	d2 e0       	ldi	r29, 0x02	; 2
 1f2:	88 81       	ld	r24, Y
 1f4:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 20a:	8c 81       	ldd	r24, Y+4	; 0x04
 20c:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 210:	8d 81       	ldd	r24, Y+5	; 0x05
 212:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 216:	8e 81       	ldd	r24, Y+6	; 0x06
 218:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 21c:	8f 81       	ldd	r24, Y+7	; 0x07
 21e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 222:	88 85       	ldd	r24, Y+8	; 0x08
 224:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 228:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 22a:	43 9a       	sbi	0x08, 3	; 8
		
		PORTD &= ~(1<<TRIG);
 22c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	9e e0       	ldi	r25, 0x0E	; 14
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <note_on_event+0x10a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <note_on_event+0x110>
 238:	00 00       	nop
		
		_delay_us(900); //deal with this bullshit
		
		spi_data[drum_hit[note].spi_byte_num] &= ~(drum_hit[note].trig_bit);
 23a:	f8 01       	movw	r30, r16
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	df 01       	movw	r26, r30
 242:	a0 0f       	add	r26, r16
 244:	b1 1f       	adc	r27, r17
 246:	aa 0f       	add	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	af 5f       	subi	r26, 0xFF	; 255
 24c:	be 4f       	sbci	r27, 0xFE	; 254
 24e:	ac 91       	ld	r26, X
 250:	af 70       	andi	r26, 0x0F	; 15
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	9d 01       	movw	r18, r26
 256:	29 5f       	subi	r18, 0xF9	; 249
 258:	3d 4f       	sbci	r19, 0xFD	; 253
 25a:	cf 01       	movw	r24, r30
 25c:	80 0f       	add	r24, r16
 25e:	91 1f       	adc	r25, r17
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	80 50       	subi	r24, 0x00	; 0
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	dc 01       	movw	r26, r24
 26a:	12 96       	adiw	r26, 0x02	; 2
 26c:	8c 91       	ld	r24, X
 26e:	80 95       	com	r24
 270:	d9 01       	movw	r26, r18
 272:	9c 91       	ld	r25, X
 274:	89 23       	and	r24, r25
 276:	8c 93       	st	X, r24
		spi_data[drum_hit[note].spi_led_byte_num] &= ~(drum_hit[note].led_bit);
 278:	df 01       	movw	r26, r30
 27a:	a0 0f       	add	r26, r16
 27c:	b1 1f       	adc	r27, r17
 27e:	aa 0f       	add	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	ac 5f       	subi	r26, 0xFC	; 252
 284:	be 4f       	sbci	r27, 0xFE	; 254
 286:	ac 91       	ld	r26, X
 288:	a6 95       	lsr	r26
 28a:	af 70       	andi	r26, 0x0F	; 15
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	a9 5f       	subi	r26, 0xF9	; 249
 290:	bd 4f       	sbci	r27, 0xFD	; 253
 292:	e0 0f       	add	r30, r16
 294:	f1 1f       	adc	r31, r17
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	85 81       	ldd	r24, Z+5	; 0x05
 2a0:	80 95       	com	r24
 2a2:	9c 91       	ld	r25, X
 2a4:	89 23       	and	r24, r25
 2a6:	8c 93       	st	X, r24
		spi_data[8] &= ~(1<<ACCENT);
 2a8:	88 85       	ldd	r24, Y+8	; 0x08
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	88 87       	std	Y+8, r24	; 0x08
		spi_data[2] &= ~(1<<ACCENT_LED);
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	8f 7e       	andi	r24, 0xEF	; 239
 2b2:	8a 83       	std	Y+2, r24	; 0x02
		
		spi_shift_byte(spi_data[0]);
 2b4:	88 81       	ld	r24, Y
 2b6:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 2d8:	8e 81       	ldd	r24, Y+6	; 0x06
 2da:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 2de:	8f 81       	ldd	r24, Y+7	; 0x07
 2e0:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);		
 2e4:	88 85       	ldd	r24, Y+8	; 0x08
 2e6:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 2ea:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 2ec:	43 9a       	sbi	0x08, 3	; 8
		
		
	}

		
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 2f8:	8f e1       	ldi	r24, 0x1F	; 31
 2fa:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 2fe:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 302:	88 e9       	ldi	r24, 0x98	; 152
 304:	80 93 c1 00 	sts	0x00C1, r24
 308:	08 95       	ret

0000030a <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	1f 92       	push	r1
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 336:	80 91 c6 00 	lds	r24, 0x00C6
 33a:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 33c:	ae 01       	movw	r20, r28
 33e:	4f 5f       	subi	r20, 0xFF	; 255
 340:	5f 4f       	sbci	r21, 0xFF	; 255
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	0e 94 28 03 	call	0x650	; 0x650 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 34c:	0f 90       	pop	r0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 374:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 376:	8d b1       	in	r24, 0x0d	; 13
 378:	8c 60       	ori	r24, 0x0C	; 12
 37a:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 37c:	87 b1       	in	r24, 0x07	; 7
 37e:	8e 60       	ori	r24, 0x0E	; 14
 380:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 382:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 384:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 386:	88 b1       	in	r24, 0x08	; 8
 388:	81 7f       	andi	r24, 0xF1	; 241
 38a:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 38c:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 38e:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER	
 390:	80 e5       	ldi	r24, 0x50	; 80
 392:	80 93 ac 00 	sts	0x00AC, r24
	
	spi_data[led[STEP_1_LED].spi_byte] |= led[STEP_1_LED].bit;
 396:	e0 91 61 01 	lds	r30, 0x0161
 39a:	ef 70       	andi	r30, 0x0F	; 15
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	c7 e0       	ldi	r28, 0x07	; 7
 3a0:	d2 e0       	ldi	r29, 0x02	; 2
 3a2:	e9 5f       	subi	r30, 0xF9	; 249
 3a4:	fd 4f       	sbci	r31, 0xFD	; 253
 3a6:	90 81       	ld	r25, Z
 3a8:	80 91 60 01 	lds	r24, 0x0160
 3ac:	89 2b       	or	r24, r25
 3ae:	80 83       	st	Z, r24
	spi_data[led[MODE_1_PATTERN_CLEAR].spi_byte] |= led[MODE_1_PATTERN_CLEAR].bit;
 3b0:	e0 91 b5 01 	lds	r30, 0x01B5
 3b4:	ef 70       	andi	r30, 0x0F	; 15
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	e9 5f       	subi	r30, 0xF9	; 249
 3ba:	fd 4f       	sbci	r31, 0xFD	; 253
 3bc:	90 81       	ld	r25, Z
 3be:	80 91 b4 01 	lds	r24, 0x01B4
 3c2:	89 2b       	or	r24, r25
 3c4:	80 83       	st	Z, r24
	spi_data[led[FILL_MANUAL].spi_byte] |= led[FILL_MANUAL].bit;
 3c6:	e0 91 c7 01 	lds	r30, 0x01C7
 3ca:	ef 70       	andi	r30, 0x0F	; 15
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	e9 5f       	subi	r30, 0xF9	; 249
 3d0:	fd 4f       	sbci	r31, 0xFD	; 253
 3d2:	90 81       	ld	r25, Z
 3d4:	80 91 c6 01 	lds	r24, 0x01C6
 3d8:	89 2b       	or	r24, r25
 3da:	80 83       	st	Z, r24
	
	spi_shift_byte(spi_data[0]);
 3dc:	88 81       	ld	r24, Y
 3de:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[1]);
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[2]);
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[3]);
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[4]);
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[5]);
 3fa:	8d 81       	ldd	r24, Y+5	; 0x05
 3fc:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[6]);
 400:	8e 81       	ldd	r24, Y+6	; 0x06
 402:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[7]);
 406:	8f 81       	ldd	r24, Y+7	; 0x07
 408:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	spi_shift_byte(spi_data[8]);
 40c:	88 85       	ldd	r24, Y+8	; 0x08
 40e:	0e 94 8a 00 	call	0x114	; 0x114 <spi_shift_byte>
	
	
	
	PORTC &= ~(1<<SPI_LED_LATCH);
 412:	43 98       	cbi	0x08, 3	; 8
	PORTC |= (1<<SPI_LED_LATCH);
 414:	43 9a       	sbi	0x08, 3	; 8
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	92 e0       	ldi	r25, 0x02	; 2
 41a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 41e:	64 e9       	ldi	r22, 0x94	; 148
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e1       	ldi	r24, 0x10	; 16
 424:	92 e0       	ldi	r25, 0x02	; 2
 426:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 42a:	68 e8       	ldi	r22, 0x88	; 136
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	80 e1       	ldi	r24, 0x10	; 16
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	0e 94 ef 02 	call	0x5de	; 0x5de <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 436:	69 e8       	ldi	r22, 0x89	; 137
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	80 e1       	ldi	r24, 0x10	; 16
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 442:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <setup_midi_usart>
	
	sei(); //enable global interrupts	
 446:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work		
 448:	80 e1       	ldi	r24, 0x10	; 16
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	0e 94 21 05 	call	0xa42	; 0xa42 <midi_device_process>

	}
 450:	fb cf       	rjmp	.-10     	; 0x448 <main+0xd4>

00000452 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 452:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 454:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 456:	74 83       	std	Z+4, r23	; 0x04
 458:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 45a:	11 82       	std	Z+1, r1	; 0x01
 45c:	10 82       	st	Z, r1
 45e:	08 95       	ret

00000460 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	ec 01       	movw	r28, r24
 46c:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 46e:	0e 94 a9 02 	call	0x552	; 0x552 <store_and_clear_interrupt>
 472:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 474:	f9 80       	ldd	r15, Y+1	; 0x01
 476:	4f 2d       	mov	r20, r15
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	ca 01       	movw	r24, r20
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	2a 81       	ldd	r18, Y+2	; 0x02
 480:	62 2f       	mov	r22, r18
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	0e 94 58 05 	call	0xab0	; 0xab0 <__divmodhi4>
 488:	28 81       	ld	r18, Y
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	82 17       	cp	r24, r18
 48e:	93 07       	cpc	r25, r19
 490:	29 f4       	brne	.+10     	; 0x49c <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 492:	81 2f       	mov	r24, r17
 494:	0e 94 ac 02 	call	0x558	; 0x558 <restore_interrupt_setting>
      return false;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	12 c0       	rjmp	.+36     	; 0x4c0 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 49c:	eb 81       	ldd	r30, Y+3	; 0x03
 49e:	fc 81       	ldd	r31, Y+4	; 0x04
 4a0:	ef 0d       	add	r30, r15
 4a2:	f1 1d       	adc	r31, r1
 4a4:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 4a6:	29 81       	ldd	r18, Y+1	; 0x01
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	c9 01       	movw	r24, r18
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	6a 81       	ldd	r22, Y+2	; 0x02
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	0e 94 58 05 	call	0xab0	; 0xab0 <__divmodhi4>
 4b6:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 4b8:	81 2f       	mov	r24, r17
 4ba:	0e 94 ac 02 	call	0x558	; 0x558 <restore_interrupt_setting>
      return true;
 4be:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	08 95       	ret

000004cc <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 4d2:	0e 94 a9 02 	call	0x552	; 0x552 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 4d6:	39 81       	ldd	r19, Y+1	; 0x01
 4d8:	28 81       	ld	r18, Y
 4da:	32 17       	cp	r19, r18
 4dc:	18 f0       	brcs	.+6      	; 0x4e4 <bytequeue_length+0x18>
      len = queue->end - queue->start;
 4de:	c3 2f       	mov	r28, r19
 4e0:	c2 1b       	sub	r28, r18
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <bytequeue_length+0x20>
 4e4:	9a 81       	ldd	r25, Y+2	; 0x02
 4e6:	c3 2f       	mov	r28, r19
 4e8:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 4ea:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 4ec:	0e 94 ac 02 	call	0x558	; 0x558 <restore_interrupt_setting>
   return len;
}
 4f0:	8c 2f       	mov	r24, r28
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 4f8:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 4fa:	80 81       	ld	r24, Z
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	9b 01       	movw	r18, r22
 500:	28 0f       	add	r18, r24
 502:	31 1d       	adc	r19, r1
 504:	c9 01       	movw	r24, r18
 506:	62 81       	ldd	r22, Z+2	; 0x02
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	0e 94 58 05 	call	0xab0	; 0xab0 <__divmodhi4>
 50e:	03 80       	ldd	r0, Z+3	; 0x03
 510:	f4 81       	ldd	r31, Z+4	; 0x04
 512:	e0 2d       	mov	r30, r0
 514:	e8 0f       	add	r30, r24
 516:	f9 1f       	adc	r31, r25
}
 518:	80 81       	ld	r24, Z
 51a:	08 95       	ret

0000051c <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	ec 01       	movw	r28, r24
 524:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 526:	0e 94 a9 02 	call	0x552	; 0x552 <store_and_clear_interrupt>
 52a:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 52c:	88 81       	ld	r24, Y
 52e:	21 2f       	mov	r18, r17
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	b9 01       	movw	r22, r18
 534:	68 0f       	add	r22, r24
 536:	71 1d       	adc	r23, r1
 538:	cb 01       	movw	r24, r22
 53a:	6a 81       	ldd	r22, Y+2	; 0x02
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	0e 94 58 05 	call	0xab0	; 0xab0 <__divmodhi4>
 542:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 544:	84 2f       	mov	r24, r20
 546:	0e 94 ac 02 	call	0x558	; 0x558 <restore_interrupt_setting>
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	08 95       	ret

00000552 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 552:	8f b7       	in	r24, 0x3f	; 63
   cli();
 554:	f8 94       	cli
   return sreg;
}
 556:	08 95       	ret

00000558 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 558:	8f bf       	out	0x3f, r24	; 63
 55a:	08 95       	ret

0000055c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 55c:	88 1f       	adc	r24, r24
 55e:	88 27       	eor	r24, r24
 560:	88 1f       	adc	r24, r24
 562:	08 95       	ret

00000564 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	88 3f       	cpi	r24, 0xF8	; 248
 568:	08 f4       	brcc	.+2      	; 0x56c <midi_is_realtime+0x8>
 56a:	90 e0       	ldi	r25, 0x00	; 0
}
 56c:	89 2f       	mov	r24, r25
 56e:	08 95       	ret

00000570 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 570:	98 2f       	mov	r25, r24
 572:	90 7f       	andi	r25, 0xF0	; 240
 574:	90 3c       	cpi	r25, 0xC0	; 192
 576:	b1 f0       	breq	.+44     	; 0x5a4 <midi_packet_length+0x34>
 578:	58 f4       	brcc	.+22     	; 0x590 <midi_packet_length+0x20>
 57a:	90 39       	cpi	r25, 0x90	; 144
 57c:	41 f1       	breq	.+80     	; 0x5ce <midi_packet_length+0x5e>
 57e:	18 f4       	brcc	.+6      	; 0x586 <midi_packet_length+0x16>
 580:	90 38       	cpi	r25, 0x80	; 128
 582:	19 f5       	brne	.+70     	; 0x5ca <midi_packet_length+0x5a>
 584:	24 c0       	rjmp	.+72     	; 0x5ce <midi_packet_length+0x5e>
 586:	90 3a       	cpi	r25, 0xA0	; 160
 588:	11 f1       	breq	.+68     	; 0x5ce <midi_packet_length+0x5e>
 58a:	90 3b       	cpi	r25, 0xB0	; 176
 58c:	f1 f4       	brne	.+60     	; 0x5ca <midi_packet_length+0x5a>
 58e:	1f c0       	rjmp	.+62     	; 0x5ce <midi_packet_length+0x5e>
 590:	90 3e       	cpi	r25, 0xE0	; 224
 592:	e9 f0       	breq	.+58     	; 0x5ce <midi_packet_length+0x5e>
 594:	18 f4       	brcc	.+6      	; 0x59c <midi_packet_length+0x2c>
 596:	90 3d       	cpi	r25, 0xD0	; 208
 598:	29 f0       	breq	.+10     	; 0x5a4 <midi_packet_length+0x34>
 59a:	17 c0       	rjmp	.+46     	; 0x5ca <midi_packet_length+0x5a>
 59c:	90 3f       	cpi	r25, 0xF0	; 240
 59e:	21 f0       	breq	.+8      	; 0x5a8 <midi_packet_length+0x38>
 5a0:	93 3f       	cpi	r25, 0xF3	; 243
 5a2:	99 f4       	brne	.+38     	; 0x5ca <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	08 95       	ret
      case 0xF0:
         switch(status) {
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	fc 01       	movw	r30, r24
 5ac:	e1 5f       	subi	r30, 0xF1	; 241
 5ae:	f1 09       	sbc	r31, r1
 5b0:	ef 30       	cpi	r30, 0x0F	; 15
 5b2:	f1 05       	cpc	r31, r1
 5b4:	40 f4       	brcc	.+16     	; 0x5c6 <midi_packet_length+0x56>
 5b6:	e6 5a       	subi	r30, 0xA6	; 166
 5b8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	08 95       	ret
         }
      default:
         return UNDEFINED;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 5d4:	08 95       	ret

000005d6 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 5d6:	fc 01       	movw	r30, r24
 5d8:	75 83       	std	Z+5, r23	; 0x05
 5da:	64 83       	std	Z+4, r22	; 0x04
 5dc:	08 95       	ret

000005de <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 5de:	fc 01       	movw	r30, r24
 5e0:	77 83       	std	Z+7, r23	; 0x07
 5e2:	66 83       	std	Z+6, r22	; 0x06
 5e4:	08 95       	ret

000005e6 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 5e6:	fc 01       	movw	r30, r24
 5e8:	77 8b       	std	Z+23, r23	; 0x17
 5ea:	66 8b       	std	Z+22, r22	; 0x16
 5ec:	08 95       	ret

000005ee <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 5f4:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 5f6:	1f a2       	std	Y+39, r1	; 0x27
 5f8:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 5fa:	bc 01       	movw	r22, r24
 5fc:	68 5d       	subi	r22, 0xD8	; 216
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	40 ec       	ldi	r20, 0xC0	; 192
 602:	88 51       	subi	r24, 0x18	; 24
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	0e 94 29 02 	call	0x452	; 0x452 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 60a:	1b 82       	std	Y+3, r1	; 0x03
 60c:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 60e:	1d 82       	std	Y+5, r1	; 0x05
 610:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 612:	1f 82       	std	Y+7, r1	; 0x07
 614:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 616:	19 86       	std	Y+9, r1	; 0x09
 618:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 61a:	1b 86       	std	Y+11, r1	; 0x0b
 61c:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 61e:	1d 86       	std	Y+13, r1	; 0x0d
 620:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 622:	1f 86       	std	Y+15, r1	; 0x0f
 624:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 626:	19 8a       	std	Y+17, r1	; 0x11
 628:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 62a:	1b 8a       	std	Y+19, r1	; 0x13
 62c:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 62e:	1d 8a       	std	Y+21, r1	; 0x15
 630:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 632:	1f 8a       	std	Y+23, r1	; 0x17
 634:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 636:	19 8e       	std	Y+25, r1	; 0x19
 638:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 63a:	1b 8e       	std	Y+27, r1	; 0x1b
 63c:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 63e:	1d 8e       	std	Y+29, r1	; 0x1d
 640:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 642:	1f 8e       	std	Y+31, r1	; 0x1f
 644:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 646:	19 a2       	std	Y+33, r1	; 0x21
 648:	18 a2       	std	Y+32, r1	; 0x20
}
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 65c:	66 23       	and	r22, r22
 65e:	99 f0       	breq	.+38     	; 0x686 <midi_device_input+0x36>
 660:	ea 01       	movw	r28, r20
 662:	61 50       	subi	r22, 0x01	; 1
 664:	06 2f       	mov	r16, r22
 666:	10 e0       	ldi	r17, 0x00	; 0
 668:	0f 5f       	subi	r16, 0xFF	; 255
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	04 0f       	add	r16, r20
 66e:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 670:	7c 01       	movw	r14, r24
 672:	28 ee       	ldi	r18, 0xE8	; 232
 674:	e2 0e       	add	r14, r18
 676:	f1 1c       	adc	r15, r1
 678:	69 91       	ld	r22, Y+
 67a:	c7 01       	movw	r24, r14
 67c:	0e 94 30 02 	call	0x460	; 0x460 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 680:	c0 17       	cp	r28, r16
 682:	d1 07       	cpc	r29, r17
 684:	c9 f7       	brne	.-14     	; 0x678 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	08 95       	ret

00000694 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 694:	af 92       	push	r10
 696:	bf 92       	push	r11
 698:	cf 92       	push	r12
 69a:	df 92       	push	r13
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <midi_input_callbacks+0x16>
 6aa:	1f 92       	push	r1
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	7c 01       	movw	r14, r24
 6b2:	6b 01       	movw	r12, r22
 6b4:	14 2f       	mov	r17, r20
 6b6:	b2 2e       	mov	r11, r18
 6b8:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 6ba:	dc 01       	movw	r26, r24
 6bc:	95 96       	adiw	r26, 0x25	; 37
 6be:	8c 91       	ld	r24, X
 6c0:	95 97       	sbiw	r26, 0x25	; 37
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	11 f5       	brne	.+68     	; 0x70a <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 6c6:	5a 96       	adiw	r26, 0x1a	; 26
 6c8:	ed 91       	ld	r30, X+
 6ca:	fc 91       	ld	r31, X
 6cc:	5b 97       	sbiw	r26, 0x1b	; 27
 6ce:	30 97       	sbiw	r30, 0x00	; 0
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <midi_input_callbacks+0x40>
 6d2:	cc c0       	rjmp	.+408    	; 0x86c <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 6d4:	9b 01       	movw	r18, r22
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	31 09       	sbc	r19, r1
 6da:	ab ea       	ldi	r26, 0xAB	; 171
 6dc:	ba ea       	ldi	r27, 0xAA	; 170
 6de:	0e 94 72 05 	call	0xae4	; 0xae4 <__umulhisi3>
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	9c 01       	movw	r18, r24
 6e8:	22 0f       	add	r18, r18
 6ea:	33 1f       	adc	r19, r19
 6ec:	82 0f       	add	r24, r18
 6ee:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 6f0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 6f2:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 6f4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 6f6:	4c 2d       	mov	r20, r12
 6f8:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 6fa:	9e 01       	movw	r18, r28
 6fc:	2f 5f       	subi	r18, 0xFF	; 255
 6fe:	3f 4f       	sbci	r19, 0xFF	; 255
 700:	68 2f       	mov	r22, r24
 702:	79 2f       	mov	r23, r25
 704:	c7 01       	movw	r24, r14
 706:	09 95       	icall
 708:	be c0       	rjmp	.+380    	; 0x886 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
 70a:	62 30       	cpi	r22, 0x02	; 2
 70c:	71 05       	cpc	r23, r1
 70e:	09 f4       	brne	.+2      	; 0x712 <midi_input_callbacks+0x7e>
 710:	55 c0       	rjmp	.+170    	; 0x7bc <midi_input_callbacks+0x128>
 712:	63 30       	cpi	r22, 0x03	; 3
 714:	71 05       	cpc	r23, r1
 716:	29 f0       	breq	.+10     	; 0x722 <midi_input_callbacks+0x8e>
 718:	61 30       	cpi	r22, 0x01	; 1
 71a:	71 05       	cpc	r23, r1
 71c:	09 f0       	breq	.+2      	; 0x720 <midi_input_callbacks+0x8c>
 71e:	a1 c0       	rjmp	.+322    	; 0x862 <midi_input_callbacks+0x1ce>
 720:	88 c0       	rjmp	.+272    	; 0x832 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 722:	84 2f       	mov	r24, r20
 724:	80 7f       	andi	r24, 0xF0	; 240
 726:	80 3a       	cpi	r24, 0xA0	; 160
 728:	f1 f0       	breq	.+60     	; 0x766 <midi_input_callbacks+0xd2>
 72a:	28 f4       	brcc	.+10     	; 0x736 <midi_input_callbacks+0xa2>
 72c:	80 38       	cpi	r24, 0x80	; 128
 72e:	a9 f0       	breq	.+42     	; 0x75a <midi_input_callbacks+0xc6>
 730:	80 39       	cpi	r24, 0x90	; 144
 732:	69 f0       	breq	.+26     	; 0x74e <midi_input_callbacks+0xba>
 734:	2f c0       	rjmp	.+94     	; 0x794 <midi_input_callbacks+0x100>
 736:	80 3e       	cpi	r24, 0xE0	; 224
 738:	e1 f0       	breq	.+56     	; 0x772 <midi_input_callbacks+0xde>
 73a:	80 3f       	cpi	r24, 0xF0	; 240
 73c:	01 f1       	breq	.+64     	; 0x77e <midi_input_callbacks+0xea>
 73e:	80 3b       	cpi	r24, 0xB0	; 176
 740:	49 f5       	brne	.+82     	; 0x794 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 742:	d7 01       	movw	r26, r14
 744:	12 96       	adiw	r26, 0x02	; 2
 746:	ed 91       	ld	r30, X+
 748:	fc 91       	ld	r31, X
 74a:	13 97       	sbiw	r26, 0x03	; 3
              break;
 74c:	25 c0       	rjmp	.+74     	; 0x798 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 74e:	d7 01       	movw	r26, r14
 750:	14 96       	adiw	r26, 0x04	; 4
 752:	ed 91       	ld	r30, X+
 754:	fc 91       	ld	r31, X
 756:	15 97       	sbiw	r26, 0x05	; 5
              break;
 758:	1f c0       	rjmp	.+62     	; 0x798 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 75a:	d7 01       	movw	r26, r14
 75c:	16 96       	adiw	r26, 0x06	; 6
 75e:	ed 91       	ld	r30, X+
 760:	fc 91       	ld	r31, X
 762:	17 97       	sbiw	r26, 0x07	; 7
              break;
 764:	19 c0       	rjmp	.+50     	; 0x798 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 766:	d7 01       	movw	r26, r14
 768:	18 96       	adiw	r26, 0x08	; 8
 76a:	ed 91       	ld	r30, X+
 76c:	fc 91       	ld	r31, X
 76e:	19 97       	sbiw	r26, 0x09	; 9
              break;
 770:	13 c0       	rjmp	.+38     	; 0x798 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 772:	d7 01       	movw	r26, r14
 774:	1a 96       	adiw	r26, 0x0a	; 10
 776:	ed 91       	ld	r30, X+
 778:	fc 91       	ld	r31, X
 77a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 77c:	0d c0       	rjmp	.+26     	; 0x798 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 77e:	42 3f       	cpi	r20, 0xF2	; 242
 780:	09 f0       	breq	.+2      	; 0x784 <midi_input_callbacks+0xf0>
 782:	74 c0       	rjmp	.+232    	; 0x86c <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
 784:	d7 01       	movw	r26, r14
 786:	1c 96       	adiw	r26, 0x0c	; 12
 788:	ed 91       	ld	r30, X+
 78a:	fc 91       	ld	r31, X
 78c:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 78e:	30 97       	sbiw	r30, 0x00	; 0
 790:	41 f4       	brne	.+16     	; 0x7a2 <midi_input_callbacks+0x10e>
 792:	6c c0       	rjmp	.+216    	; 0x86c <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 794:	e0 e0       	ldi	r30, 0x00	; 0
 796:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 798:	30 97       	sbiw	r30, 0x00	; 0
 79a:	09 f4       	brne	.+2      	; 0x79e <midi_input_callbacks+0x10a>
 79c:	67 c0       	rjmp	.+206    	; 0x86c <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 79e:	12 3f       	cpi	r17, 0xF2	; 242
 7a0:	31 f4       	brne	.+12     	; 0x7ae <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 7a2:	2a 2d       	mov	r18, r10
 7a4:	4b 2d       	mov	r20, r11
 7a6:	62 ef       	ldi	r22, 0xF2	; 242
 7a8:	c7 01       	movw	r24, r14
 7aa:	09 95       	icall
 7ac:	6c c0       	rjmp	.+216    	; 0x886 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 7ae:	2a 2d       	mov	r18, r10
 7b0:	4b 2d       	mov	r20, r11
 7b2:	61 2f       	mov	r22, r17
 7b4:	6f 70       	andi	r22, 0x0F	; 15
 7b6:	c7 01       	movw	r24, r14
 7b8:	09 95       	icall
 7ba:	65 c0       	rjmp	.+202    	; 0x886 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 7bc:	84 2f       	mov	r24, r20
 7be:	80 7f       	andi	r24, 0xF0	; 240
 7c0:	80 3d       	cpi	r24, 0xD0	; 208
 7c2:	51 f0       	breq	.+20     	; 0x7d8 <midi_input_callbacks+0x144>
 7c4:	80 3f       	cpi	r24, 0xF0	; 240
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <midi_input_callbacks+0x150>
 7c8:	80 3c       	cpi	r24, 0xC0	; 192
 7ca:	01 f5       	brne	.+64     	; 0x80c <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 7cc:	d7 01       	movw	r26, r14
 7ce:	1e 96       	adiw	r26, 0x0e	; 14
 7d0:	ed 91       	ld	r30, X+
 7d2:	fc 91       	ld	r31, X
 7d4:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 7d6:	1c c0       	rjmp	.+56     	; 0x810 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 7d8:	d7 01       	movw	r26, r14
 7da:	50 96       	adiw	r26, 0x10	; 16
 7dc:	ed 91       	ld	r30, X+
 7de:	fc 91       	ld	r31, X
 7e0:	51 97       	sbiw	r26, 0x11	; 17
              break;
 7e2:	16 c0       	rjmp	.+44     	; 0x810 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 7e4:	43 3f       	cpi	r20, 0xF3	; 243
 7e6:	41 f4       	brne	.+16     	; 0x7f8 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
 7e8:	d7 01       	movw	r26, r14
 7ea:	52 96       	adiw	r26, 0x12	; 18
 7ec:	ed 91       	ld	r30, X+
 7ee:	fc 91       	ld	r31, X
 7f0:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 7f2:	30 97       	sbiw	r30, 0x00	; 0
 7f4:	99 f4       	brne	.+38     	; 0x81c <midi_input_callbacks+0x188>
 7f6:	3a c0       	rjmp	.+116    	; 0x86c <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 7f8:	41 3f       	cpi	r20, 0xF1	; 241
 7fa:	c1 f5       	brne	.+112    	; 0x86c <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
 7fc:	d7 01       	movw	r26, r14
 7fe:	54 96       	adiw	r26, 0x14	; 20
 800:	ed 91       	ld	r30, X+
 802:	fc 91       	ld	r31, X
 804:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 806:	30 97       	sbiw	r30, 0x00	; 0
 808:	49 f4       	brne	.+18     	; 0x81c <midi_input_callbacks+0x188>
 80a:	30 c0       	rjmp	.+96     	; 0x86c <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 80c:	e0 e0       	ldi	r30, 0x00	; 0
 80e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 810:	30 97       	sbiw	r30, 0x00	; 0
 812:	61 f1       	breq	.+88     	; 0x86c <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 814:	81 2f       	mov	r24, r17
 816:	8d 7f       	andi	r24, 0xFD	; 253
 818:	81 3f       	cpi	r24, 0xF1	; 241
 81a:	29 f4       	brne	.+10     	; 0x826 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
 81c:	4b 2d       	mov	r20, r11
 81e:	61 2f       	mov	r22, r17
 820:	c7 01       	movw	r24, r14
 822:	09 95       	icall
 824:	30 c0       	rjmp	.+96     	; 0x886 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
 826:	4b 2d       	mov	r20, r11
 828:	61 2f       	mov	r22, r17
 82a:	6f 70       	andi	r22, 0x0F	; 15
 82c:	c7 01       	movw	r24, r14
 82e:	09 95       	icall
 830:	2a c0       	rjmp	.+84     	; 0x886 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 832:	84 2f       	mov	r24, r20
 834:	0e 94 b2 02 	call	0x564	; 0x564 <midi_is_realtime>
 838:	88 23       	and	r24, r24
 83a:	31 f0       	breq	.+12     	; 0x848 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
 83c:	d7 01       	movw	r26, r14
 83e:	56 96       	adiw	r26, 0x16	; 22
 840:	ed 91       	ld	r30, X+
 842:	fc 91       	ld	r31, X
 844:	57 97       	sbiw	r26, 0x17	; 23
 846:	07 c0       	rjmp	.+14     	; 0x856 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
 848:	16 3f       	cpi	r17, 0xF6	; 246
 84a:	81 f4       	brne	.+32     	; 0x86c <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
 84c:	d7 01       	movw	r26, r14
 84e:	58 96       	adiw	r26, 0x18	; 24
 850:	ed 91       	ld	r30, X+
 852:	fc 91       	ld	r31, X
 854:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 856:	30 97       	sbiw	r30, 0x00	; 0
 858:	49 f0       	breq	.+18     	; 0x86c <midi_input_callbacks+0x1d8>
            func(device, byte0);
 85a:	61 2f       	mov	r22, r17
 85c:	c7 01       	movw	r24, r14
 85e:	09 95       	icall
 860:	12 c0       	rjmp	.+36     	; 0x886 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 862:	64 30       	cpi	r22, 0x04	; 4
 864:	71 05       	cpc	r23, r1
 866:	10 f0       	brcs	.+4      	; 0x86c <midi_input_callbacks+0x1d8>
          cnt = 0;
 868:	c1 2c       	mov	r12, r1
 86a:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 86c:	d7 01       	movw	r26, r14
 86e:	5c 96       	adiw	r26, 0x1c	; 28
 870:	ed 91       	ld	r30, X+
 872:	fc 91       	ld	r31, X
 874:	5d 97       	sbiw	r26, 0x1d	; 29
 876:	30 97       	sbiw	r30, 0x00	; 0
 878:	31 f0       	breq	.+12     	; 0x886 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 87a:	0a 2d       	mov	r16, r10
 87c:	2b 2d       	mov	r18, r11
 87e:	41 2f       	mov	r20, r17
 880:	b6 01       	movw	r22, r12
 882:	c7 01       	movw	r24, r14
 884:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 886:	d7 01       	movw	r26, r14
 888:	5e 96       	adiw	r26, 0x1e	; 30
 88a:	ed 91       	ld	r30, X+
 88c:	fc 91       	ld	r31, X
 88e:	5f 97       	sbiw	r26, 0x1f	; 31
 890:	30 97       	sbiw	r30, 0x00	; 0
 892:	31 f0       	breq	.+12     	; 0x8a0 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 894:	0a 2d       	mov	r16, r10
 896:	2b 2d       	mov	r18, r11
 898:	41 2f       	mov	r20, r17
 89a:	b6 01       	movw	r22, r12
 89c:	c7 01       	movw	r24, r14
 89e:	09 95       	icall
}
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	ff 90       	pop	r15
 8b0:	ef 90       	pop	r14
 8b2:	df 90       	pop	r13
 8b4:	cf 90       	pop	r12
 8b6:	bf 90       	pop	r11
 8b8:	af 90       	pop	r10
 8ba:	08 95       	ret

000008bc <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 8bc:	ff 92       	push	r15
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	ec 01       	movw	r28, r24
 8c8:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 8ca:	86 2f       	mov	r24, r22
 8cc:	0e 94 b2 02 	call	0x564	; 0x564 <midi_is_realtime>
 8d0:	88 23       	and	r24, r24
 8d2:	69 f0       	breq	.+26     	; 0x8ee <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 8d4:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 8da:	00 e0       	ldi	r16, 0x00	; 0
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	41 2f       	mov	r20, r17
 8e0:	61 e0       	ldi	r22, 0x01	; 1
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	ce 01       	movw	r24, r28
 8e6:	0e 94 4a 03 	call	0x694	; 0x694 <midi_input_callbacks>
    device->input_state = state;
 8ea:	fd a2       	std	Y+37, r15	; 0x25
 8ec:	a4 c0       	rjmp	.+328    	; 0xa36 <__stack+0x137>
  } else if (midi_is_statusbyte(input)) {
 8ee:	81 2f       	mov	r24, r17
 8f0:	0e 94 ae 02 	call	0x55c	; 0x55c <midi_is_statusbyte>
 8f4:	88 23       	and	r24, r24
 8f6:	09 f4       	brne	.+2      	; 0x8fa <midi_process_byte+0x3e>
 8f8:	5d c0       	rjmp	.+186    	; 0x9b4 <__stack+0xb5>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 8fa:	8d a1       	ldd	r24, Y+37	; 0x25
 8fc:	84 30       	cpi	r24, 0x04	; 4
 8fe:	29 f0       	breq	.+10     	; 0x90a <__stack+0xb>
      device->input_buffer[0] = input;
 900:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	9f a3       	std	Y+39, r25	; 0x27
 908:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 90a:	81 2f       	mov	r24, r17
 90c:	0e 94 b8 02 	call	0x570	; 0x570 <midi_packet_length>
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	31 f0       	breq	.+12     	; 0x920 <__stack+0x21>
 914:	b8 f0       	brcs	.+46     	; 0x944 <__stack+0x45>
 916:	82 30       	cpi	r24, 0x02	; 2
 918:	79 f0       	breq	.+30     	; 0x938 <__stack+0x39>
 91a:	83 30       	cpi	r24, 0x03	; 3
 91c:	81 f0       	breq	.+32     	; 0x93e <__stack+0x3f>
 91e:	46 c0       	rjmp	.+140    	; 0x9ac <__stack+0xad>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 924:	00 e0       	ldi	r16, 0x00	; 0
 926:	20 e0       	ldi	r18, 0x00	; 0
 928:	41 2f       	mov	r20, r17
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	ce 01       	movw	r24, r28
 930:	0e 94 4a 03 	call	0x694	; 0x694 <midi_input_callbacks>
        device->input_state = IDLE;
 934:	1d a2       	std	Y+37, r1	; 0x25
        break;
 936:	7f c0       	rjmp	.+254    	; 0xa36 <__stack+0x137>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	8d a3       	std	Y+37, r24	; 0x25
        break;
 93c:	7c c0       	rjmp	.+248    	; 0xa36 <__stack+0x137>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 93e:	83 e0       	ldi	r24, 0x03	; 3
 940:	8d a3       	std	Y+37, r24	; 0x25
        break;
 942:	79 c0       	rjmp	.+242    	; 0xa36 <__stack+0x137>
      case UNDEFINED:
        switch(input) {
 944:	10 3f       	cpi	r17, 0xF0	; 240
 946:	19 f0       	breq	.+6      	; 0x94e <__stack+0x4f>
 948:	17 3f       	cpi	r17, 0xF7	; 247
 94a:	51 f0       	breq	.+20     	; 0x960 <__stack+0x61>
 94c:	2b c0       	rjmp	.+86     	; 0x9a4 <__stack+0xa5>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 94e:	84 e0       	ldi	r24, 0x04	; 4
 950:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 952:	80 ef       	ldi	r24, 0xF0	; 240
 954:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	9f a3       	std	Y+39, r25	; 0x27
 95c:	8e a3       	std	Y+38, r24	; 0x26
            break;
 95e:	6b c0       	rjmp	.+214    	; 0xa36 <__stack+0x137>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 960:	4e a1       	ldd	r20, Y+38	; 0x26
 962:	5f a1       	ldd	r21, Y+39	; 0x27
 964:	9a 01       	movw	r18, r20
 966:	ab ea       	ldi	r26, 0xAB	; 171
 968:	ba ea       	ldi	r27, 0xAA	; 170
 96a:	0e 94 72 05 	call	0xae4	; 0xae4 <__umulhisi3>
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	9c 01       	movw	r18, r24
 974:	22 0f       	add	r18, r18
 976:	33 1f       	adc	r19, r19
 978:	82 0f       	add	r24, r18
 97a:	93 1f       	adc	r25, r19
 97c:	fa 01       	movw	r30, r20
 97e:	e8 1b       	sub	r30, r24
 980:	f9 0b       	sbc	r31, r25
 982:	ec 0f       	add	r30, r28
 984:	fd 1f       	adc	r31, r29
 986:	87 ef       	ldi	r24, 0xF7	; 247
 988:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 98a:	ba 01       	movw	r22, r20
 98c:	6f 5f       	subi	r22, 0xFF	; 255
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	7f a3       	std	Y+39, r23	; 0x27
 992:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 994:	0c a1       	ldd	r16, Y+36	; 0x24
 996:	2b a1       	ldd	r18, Y+35	; 0x23
 998:	4a a1       	ldd	r20, Y+34	; 0x22
 99a:	ce 01       	movw	r24, r28
 99c:	0e 94 4a 03 	call	0x694	; 0x694 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 9a0:	1d a2       	std	Y+37, r1	; 0x25
            break;
 9a2:	49 c0       	rjmp	.+146    	; 0xa36 <__stack+0x137>
          default:
            device->input_state = IDLE;
 9a4:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 9a6:	1f a2       	std	Y+39, r1	; 0x27
 9a8:	1e a2       	std	Y+38, r1	; 0x26
 9aa:	45 c0       	rjmp	.+138    	; 0xa36 <__stack+0x137>
        }

        break;
      default:
        device->input_state = IDLE;
 9ac:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 9ae:	1f a2       	std	Y+39, r1	; 0x27
 9b0:	1e a2       	std	Y+38, r1	; 0x26
        break;
 9b2:	41 c0       	rjmp	.+130    	; 0xa36 <__stack+0x137>
    }
  } else {
    if (device->input_state != IDLE) {
 9b4:	ed a1       	ldd	r30, Y+37	; 0x25
 9b6:	ee 23       	and	r30, r30
 9b8:	f1 f1       	breq	.+124    	; 0xa36 <__stack+0x137>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 9ba:	4e a1       	ldd	r20, Y+38	; 0x26
 9bc:	5f a1       	ldd	r21, Y+39	; 0x27
 9be:	9a 01       	movw	r18, r20
 9c0:	ab ea       	ldi	r26, 0xAB	; 171
 9c2:	ba ea       	ldi	r27, 0xAA	; 170
 9c4:	0e 94 72 05 	call	0xae4	; 0xae4 <__umulhisi3>
 9c8:	96 95       	lsr	r25
 9ca:	87 95       	ror	r24
 9cc:	9c 01       	movw	r18, r24
 9ce:	22 0f       	add	r18, r18
 9d0:	33 1f       	adc	r19, r19
 9d2:	82 0f       	add	r24, r18
 9d4:	93 1f       	adc	r25, r19
 9d6:	9a 01       	movw	r18, r20
 9d8:	28 1b       	sub	r18, r24
 9da:	39 0b       	sbc	r19, r25
 9dc:	de 01       	movw	r26, r28
 9de:	a2 0f       	add	r26, r18
 9e0:	b3 1f       	adc	r27, r19
 9e2:	92 96       	adiw	r26, 0x22	; 34
 9e4:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 9e6:	ba 01       	movw	r22, r20
 9e8:	6f 5f       	subi	r22, 0xFF	; 255
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	7f a3       	std	Y+39, r23	; 0x27
 9ee:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 9f0:	21 30       	cpi	r18, 0x01	; 1
 9f2:	31 05       	cpc	r19, r1
 9f4:	89 f0       	breq	.+34     	; 0xa18 <__stack+0x119>
 9f6:	22 30       	cpi	r18, 0x02	; 2
 9f8:	31 05       	cpc	r19, r1
 9fa:	e9 f4       	brne	.+58     	; 0xa36 <__stack+0x137>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 9fc:	0c a1       	ldd	r16, Y+36	; 0x24
 9fe:	2b a1       	ldd	r18, Y+35	; 0x23
 a00:	4a a1       	ldd	r20, Y+34	; 0x22
 a02:	ce 01       	movw	r24, r28
 a04:	0e 94 4a 03 	call	0x694	; 0x694 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 a08:	8d a1       	ldd	r24, Y+37	; 0x25
 a0a:	84 30       	cpi	r24, 0x04	; 4
 a0c:	a1 f0       	breq	.+40     	; 0xa36 <__stack+0x137>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	9f a3       	std	Y+39, r25	; 0x27
 a14:	8e a3       	std	Y+38, r24	; 0x26
 a16:	0f c0       	rjmp	.+30     	; 0xa36 <__stack+0x137>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 a18:	e2 30       	cpi	r30, 0x02	; 2
 a1a:	69 f4       	brne	.+26     	; 0xa36 <__stack+0x137>
            //call callback
            midi_input_callbacks(device, device->input_count,
 a1c:	00 e0       	ldi	r16, 0x00	; 0
 a1e:	2b a1       	ldd	r18, Y+35	; 0x23
 a20:	4a a1       	ldd	r20, Y+34	; 0x22
 a22:	ce 01       	movw	r24, r28
 a24:	0e 94 4a 03 	call	0x694	; 0x694 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 a28:	8d a1       	ldd	r24, Y+37	; 0x25
 a2a:	84 30       	cpi	r24, 0x04	; 4
 a2c:	21 f0       	breq	.+8      	; 0xa36 <__stack+0x137>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	9f a3       	std	Y+39, r25	; 0x27
 a34:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	1f 91       	pop	r17
 a3c:	0f 91       	pop	r16
 a3e:	ff 90       	pop	r15
 a40:	08 95       	ret

00000a42 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 a42:	cf 92       	push	r12
 a44:	df 92       	push	r13
 a46:	ef 92       	push	r14
 a48:	ff 92       	push	r15
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 a54:	dc 01       	movw	r26, r24
 a56:	90 96       	adiw	r26, 0x20	; 32
 a58:	ed 91       	ld	r30, X+
 a5a:	fc 91       	ld	r31, X
 a5c:	91 97       	sbiw	r26, 0x21	; 33
 a5e:	30 97       	sbiw	r30, 0x00	; 0
 a60:	09 f0       	breq	.+2      	; 0xa64 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 a62:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 a64:	86 01       	movw	r16, r12
 a66:	08 51       	subi	r16, 0x18	; 24
 a68:	1f 4f       	sbci	r17, 0xFF	; 255
 a6a:	c8 01       	movw	r24, r16
 a6c:	0e 94 66 02 	call	0x4cc	; 0x4cc <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 a70:	e8 2e       	mov	r14, r24
 a72:	f1 2c       	mov	r15, r1
 a74:	e1 14       	cp	r14, r1
 a76:	f1 04       	cpc	r15, r1
 a78:	91 f0       	breq	.+36     	; 0xa9e <midi_device_process+0x5c>
 a7a:	c0 e0       	ldi	r28, 0x00	; 0
 a7c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	c8 01       	movw	r24, r16
 a82:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <bytequeue_get>
 a86:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 a88:	c6 01       	movw	r24, r12
 a8a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 a8e:	61 e0       	ldi	r22, 0x01	; 1
 a90:	c8 01       	movw	r24, r16
 a92:	0e 94 8e 02 	call	0x51c	; 0x51c <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 a96:	21 96       	adiw	r28, 0x01	; 1
 a98:	ce 15       	cp	r28, r14
 a9a:	df 05       	cpc	r29, r15
 a9c:	81 f7       	brne	.-32     	; 0xa7e <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	1f 91       	pop	r17
 aa4:	0f 91       	pop	r16
 aa6:	ff 90       	pop	r15
 aa8:	ef 90       	pop	r14
 aaa:	df 90       	pop	r13
 aac:	cf 90       	pop	r12
 aae:	08 95       	ret

00000ab0 <__divmodhi4>:
 ab0:	97 fb       	bst	r25, 7
 ab2:	07 2e       	mov	r0, r23
 ab4:	16 f4       	brtc	.+4      	; 0xaba <__divmodhi4+0xa>
 ab6:	00 94       	com	r0
 ab8:	07 d0       	rcall	.+14     	; 0xac8 <__divmodhi4_neg1>
 aba:	77 fd       	sbrc	r23, 7
 abc:	09 d0       	rcall	.+18     	; 0xad0 <__divmodhi4_neg2>
 abe:	0e 94 81 05 	call	0xb02	; 0xb02 <__udivmodhi4>
 ac2:	07 fc       	sbrc	r0, 7
 ac4:	05 d0       	rcall	.+10     	; 0xad0 <__divmodhi4_neg2>
 ac6:	3e f4       	brtc	.+14     	; 0xad6 <__divmodhi4_exit>

00000ac8 <__divmodhi4_neg1>:
 ac8:	90 95       	com	r25
 aca:	81 95       	neg	r24
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	08 95       	ret

00000ad0 <__divmodhi4_neg2>:
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ad6 <__divmodhi4_exit>:
 ad6:	08 95       	ret

00000ad8 <__tablejump2__>:
 ad8:	ee 0f       	add	r30, r30
 ada:	ff 1f       	adc	r31, r31
 adc:	05 90       	lpm	r0, Z+
 ade:	f4 91       	lpm	r31, Z
 ae0:	e0 2d       	mov	r30, r0
 ae2:	09 94       	ijmp

00000ae4 <__umulhisi3>:
 ae4:	a2 9f       	mul	r26, r18
 ae6:	b0 01       	movw	r22, r0
 ae8:	b3 9f       	mul	r27, r19
 aea:	c0 01       	movw	r24, r0
 aec:	a3 9f       	mul	r26, r19
 aee:	70 0d       	add	r23, r0
 af0:	81 1d       	adc	r24, r1
 af2:	11 24       	eor	r1, r1
 af4:	91 1d       	adc	r25, r1
 af6:	b2 9f       	mul	r27, r18
 af8:	70 0d       	add	r23, r0
 afa:	81 1d       	adc	r24, r1
 afc:	11 24       	eor	r1, r1
 afe:	91 1d       	adc	r25, r1
 b00:	08 95       	ret

00000b02 <__udivmodhi4>:
 b02:	aa 1b       	sub	r26, r26
 b04:	bb 1b       	sub	r27, r27
 b06:	51 e1       	ldi	r21, 0x11	; 17
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <__udivmodhi4_ep>

00000b0a <__udivmodhi4_loop>:
 b0a:	aa 1f       	adc	r26, r26
 b0c:	bb 1f       	adc	r27, r27
 b0e:	a6 17       	cp	r26, r22
 b10:	b7 07       	cpc	r27, r23
 b12:	10 f0       	brcs	.+4      	; 0xb18 <__udivmodhi4_ep>
 b14:	a6 1b       	sub	r26, r22
 b16:	b7 0b       	sbc	r27, r23

00000b18 <__udivmodhi4_ep>:
 b18:	88 1f       	adc	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	5a 95       	dec	r21
 b1e:	a9 f7       	brne	.-22     	; 0xb0a <__udivmodhi4_loop>
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	bc 01       	movw	r22, r24
 b26:	cd 01       	movw	r24, r26
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
