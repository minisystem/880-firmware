
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  000013de  00001472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000196  00800252  00800252  000015c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046e1  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001237  00000000  00000000  0000610d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000139d  00000000  00000000  00007344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  000086e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb7  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3a  00000000  00000000  0000a04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000be89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	39 07       	cpc	r19, r25
      b6:	37 07       	cpc	r19, r23
      b8:	39 07       	cpc	r19, r25
      ba:	3b 07       	cpc	r19, r27
      bc:	3b 07       	cpc	r19, r27
      be:	41 07       	cpc	r20, r17
      c0:	3b 07       	cpc	r19, r27
      c2:	41 07       	cpc	r20, r17
      c4:	41 07       	cpc	r20, r17
      c6:	41 07       	cpc	r20, r17
      c8:	41 07       	cpc	r20, r17
      ca:	41 07       	cpc	r20, r17
      cc:	3b 07       	cpc	r19, r27
      ce:	41 07       	cpc	r20, r17
      d0:	41 07       	cpc	r20, r17

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ee ed       	ldi	r30, 0xDE	; 222
      e6:	f3 e1       	ldi	r31, 0x13	; 19
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a2 35       	cpi	r26, 0x52	; 82
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	a2 e5       	ldi	r26, 0x52	; 82
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a8 3e       	cpi	r26, 0xE8	; 232
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 89 04 	call	0x912	; 0x912 <main>
     108:	0c 94 ed 09 	jmp	0x13da	; 0x13da <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, HC_LED},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, CL_LED},
	{15,7, 1<<MA_TRIG,255, 0, MA_LED}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 52 02 	sts	0x0252, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	ae 59       	subi	r26, 0x9E	; 158
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED);	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 42 02 	call	0x484	; 0x484 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a2 e6       	ldi	r26, 0x62	; 98
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e2 e6       	ldi	r30, 0x62	; 98
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     238:	0e 94 26 05 	call	0xa4c	; 0xa4c <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 60 01 	sts	0x0160, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e2 e6       	ldi	r30, 0x62	; 98
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29

	clear_all_trigs();
     272:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.current_pattern.first_part[sequencer.current_step] >> i) &1) {
     276:	e0 91 c2 03 	lds	r30, 0x03C2
     27a:	ef 70       	andi	r30, 0x0F	; 15
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ee 0f       	add	r30, r30
     280:	ff 1f       	adc	r31, r31
     282:	ef 58       	subi	r30, 0x8F	; 143
     284:	fc 4f       	sbci	r31, 0xFC	; 252
     286:	40 81       	ld	r20, Z
     288:	51 81       	ldd	r21, Z+1	; 0x01
     28a:	c3 e0       	ldi	r28, 0x03	; 3
     28c:	d1 e0       	ldi	r29, 0x01	; 1
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
		
		if ((sequencer.current_pattern.first_part[sequencer.current_step] >> i) &1) {
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     292:	62 e6       	ldi	r22, 0x62	; 98
     294:	72 e0       	ldi	r23, 0x02	; 2
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.current_pattern.first_part[sequencer.current_step] >> i) &1) {
     296:	9a 01       	movw	r18, r20
     298:	08 2e       	mov	r0, r24
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <trigger_step+0x32>
     29c:	36 95       	lsr	r19
     29e:	27 95       	ror	r18
     2a0:	0a 94       	dec	r0
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <trigger_step+0x2e>
     2a4:	20 ff       	sbrs	r18, 0
     2a6:	32 c0       	rjmp	.+100    	; 0x30c <trigger_step+0x9e>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     2a8:	dc 01       	movw	r26, r24
     2aa:	aa 0f       	add	r26, r26
     2ac:	bb 1f       	adc	r27, r27
     2ae:	a8 0f       	add	r26, r24
     2b0:	b9 1f       	adc	r27, r25
     2b2:	aa 0f       	add	r26, r26
     2b4:	bb 1f       	adc	r27, r27
     2b6:	a0 50       	subi	r26, 0x00	; 0
     2b8:	bf 4f       	sbci	r27, 0xFF	; 255
     2ba:	ec 91       	ld	r30, X
     2bc:	2e 2f       	mov	r18, r30
     2be:	22 1f       	adc	r18, r18
     2c0:	22 27       	eor	r18, r18
     2c2:	22 1f       	adc	r18, r18
     2c4:	11 96       	adiw	r26, 0x01	; 1
     2c6:	ec 91       	ld	r30, X
     2c8:	e7 70       	andi	r30, 0x07	; 7
     2ca:	ee 0f       	add	r30, r30
     2cc:	e2 2b       	or	r30, r18
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	ee 59       	subi	r30, 0x9E	; 158
     2d2:	fd 4f       	sbci	r31, 0xFD	; 253
     2d4:	de 01       	movw	r26, r28
     2d6:	11 97       	sbiw	r26, 0x01	; 1
     2d8:	3c 91       	ld	r19, X
     2da:	20 81       	ld	r18, Z
     2dc:	23 2b       	or	r18, r19
     2de:	20 83       	st	Z, r18
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     2e0:	28 81       	ld	r18, Y
     2e2:	2f 3f       	cpi	r18, 0xFF	; 255
     2e4:	99 f0       	breq	.+38     	; 0x30c <trigger_step+0x9e>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2e6:	fb 01       	movw	r30, r22
     2e8:	a3 81       	ldd	r26, Z+3	; 0x03
     2ea:	fc 01       	movw	r30, r24
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	e8 0f       	add	r30, r24
     2f2:	f9 1f       	adc	r31, r25
     2f4:	ee 0f       	add	r30, r30
     2f6:	ff 1f       	adc	r31, r31
     2f8:	ec 5f       	subi	r30, 0xFC	; 252
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	30 81       	ld	r19, Z
     2fe:	31 70       	andi	r19, 0x01	; 1
     300:	31 95       	neg	r19
     302:	3a 27       	eor	r19, r26
     304:	23 23       	and	r18, r19
     306:	2a 27       	eor	r18, r26
     308:	fb 01       	movw	r30, r22
     30a:	23 83       	std	Z+3, r18	; 0x03
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	26 96       	adiw	r28, 0x06	; 6
     310:	80 31       	cpi	r24, 0x10	; 16
     312:	91 05       	cpc	r25, r1
     314:	09 f0       	breq	.+2      	; 0x318 <trigger_step+0xaa>
     316:	bf cf       	rjmp	.-130    	; 0x296 <trigger_step+0x28>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <__vector_14>:
#include "clock.h"
#include "sequencer.h"



ISR (TIMER0_COMPA_vect) {
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	8f 93       	push	r24
     32a:	ef 93       	push	r30
     32c:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     32e:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     330:	ee e6       	ldi	r30, 0x6E	; 110
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8d 7f       	andi	r24, 0xFD	; 253
     338:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     33a:	e2 ec       	ldi	r30, 0xC2	; 194
     33c:	f3 e0       	ldi	r31, 0x03	; 3
     33e:	80 81       	ld	r24, Z
     340:	80 62       	ori	r24, 0x20	; 32
     342:	80 83       	st	Z, r24
	
}
     344:	ff 91       	pop	r31
     346:	ef 91       	pop	r30
     348:	8f 91       	pop	r24
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     354:	1f 92       	push	r1
     356:	0f 92       	push	r0
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	2f 93       	push	r18
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
	
	
	if (sequencer.START) { 
     36c:	80 91 70 03 	lds	r24, 0x0370
     370:	81 ff       	sbrs	r24, 1
     372:	15 c0       	rjmp	.+42     	; 0x39e <__vector_11+0x4a>
		
		if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of
     374:	ed e6       	ldi	r30, 0x6D	; 109
     376:	f2 e0       	ldi	r31, 0x02	; 2
     378:	80 81       	ld	r24, Z
     37a:	86 95       	lsr	r24
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	98 13       	cpse	r25, r24
     380:	1b c0       	rjmp	.+54     	; 0x3b8 <__vector_11+0x64>
			
			spi_data[1] = sequencer.step_led_mask[sequencer.current_inst];
     382:	e0 91 c5 03 	lds	r30, 0x03C5
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ea 53       	subi	r30, 0x3A	; 58
     38e:	fc 4f       	sbci	r31, 0xFC	; 252
     390:	90 81       	ld	r25, Z
     392:	81 81       	ldd	r24, Z+1	; 0x01
     394:	e2 e6       	ldi	r30, 0x62	; 98
     396:	f2 e0       	ldi	r31, 0x02	; 2
     398:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.step_led_mask[sequencer.current_inst] >> 8;
     39a:	80 83       	st	Z, r24
     39c:	0d c0       	rjmp	.+26     	; 0x3b8 <__vector_11+0x64>
		}

	} else if ((internal_clock.beat_counter == 2) && (internal_clock.divider >> 1)) { //1/4 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     39e:	80 91 6f 02 	lds	r24, 0x026F
     3a2:	83 70       	andi	r24, 0x03	; 3
     3a4:	82 30       	cpi	r24, 0x02	; 2
     3a6:	41 f4       	brne	.+16     	; 0x3b8 <__vector_11+0x64>
     3a8:	80 91 6d 02 	lds	r24, 0x026D
     3ac:	86 95       	lsr	r24
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <__vector_11+0x64>
			spi_data[1] = 0;
     3b0:	e2 e6       	ldi	r30, 0x62	; 98
     3b2:	f2 e0       	ldi	r31, 0x02	; 2
     3b4:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     3b6:	10 82       	st	Z, r1
		
	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     3b8:	ed e6       	ldi	r30, 0x6D	; 109
     3ba:	f2 e0       	ldi	r31, 0x02	; 2
     3bc:	81 81       	ldd	r24, Z+1	; 0x01
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	81 83       	std	Z+1, r24	; 0x01
     3c2:	90 81       	ld	r25, Z
     3c4:	89 13       	cpse	r24, r25
     3c6:	15 c0       	rjmp	.+42     	; 0x3f2 <__vector_11+0x9e>
	{
		sequencer.next_step_flag = 1;
     3c8:	e2 ec       	ldi	r30, 0xC2	; 194
     3ca:	f3 e0       	ldi	r31, 0x03	; 3
     3cc:	80 81       	ld	r24, Z
     3ce:	80 61       	ori	r24, 0x10	; 16
		internal_clock.beat_counter++;
     3d0:	af e6       	ldi	r26, 0x6F	; 111
     3d2:	b2 e0       	ldi	r27, 0x02	; 2
     3d4:	9c 91       	ld	r25, X
     3d6:	21 e0       	ldi	r18, 0x01	; 1
     3d8:	29 0f       	add	r18, r25
     3da:	23 70       	andi	r18, 0x03	; 3
     3dc:	9c 7f       	andi	r25, 0xFC	; 252
     3de:	92 2b       	or	r25, r18
     3e0:	9c 93       	st	X, r25
		internal_clock.ppqn_counter = 0;
     3e2:	10 92 6e 02 	sts	0x026E, r1
		sequencer.current_step++; //hopefully this will overflow from 15 to 0 - it does!
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	98 0f       	add	r25, r24
     3ea:	9f 70       	andi	r25, 0x0F	; 15
     3ec:	80 7f       	andi	r24, 0xF0	; 240
     3ee:	89 2b       	or	r24, r25
     3f0:	80 83       	st	Z, r24
	}
	
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9c 01       	movw	r18, r24
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	dc 01       	movw	r26, r24
     41c:	ae 59       	subi	r26, 0x9E	; 158
     41e:	be 4f       	sbci	r27, 0xFE	; 254
     420:	2c 91       	ld	r18, X
     422:	e2 2f       	mov	r30, r18
     424:	ef 70       	andi	r30, 0x0F	; 15
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ee 59       	subi	r30, 0x9E	; 158
     42a:	fd 4f       	sbci	r31, 0xFD	; 253
     42c:	ec 01       	movw	r28, r24
     42e:	cf 59       	subi	r28, 0x9F	; 159
     430:	de 4f       	sbci	r29, 0xFE	; 254
     432:	30 81       	ld	r19, Z
     434:	88 81       	ld	r24, Y
     436:	83 2b       	or	r24, r19
     438:	80 83       	st	Z, r24
	led[led_index].state = 1;
     43a:	82 2f       	mov	r24, r18
     43c:	80 61       	ori	r24, 0x10	; 16
     43e:	8c 93       	st	X, r24

}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <turn_off>:

void turn_off(uint8_t led_index) {
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9c 01       	movw	r18, r24
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	dc 01       	movw	r26, r24
     458:	ae 59       	subi	r26, 0x9E	; 158
     45a:	be 4f       	sbci	r27, 0xFE	; 254
     45c:	2c 91       	ld	r18, X
     45e:	e2 2f       	mov	r30, r18
     460:	ef 70       	andi	r30, 0x0F	; 15
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 59       	subi	r30, 0x9E	; 158
     466:	fd 4f       	sbci	r31, 0xFD	; 253
     468:	ec 01       	movw	r28, r24
     46a:	cf 59       	subi	r28, 0x9F	; 159
     46c:	de 4f       	sbci	r29, 0xFE	; 254
     46e:	88 81       	ld	r24, Y
     470:	80 95       	com	r24
     472:	90 81       	ld	r25, Z
     474:	89 23       	and	r24, r25
     476:	80 83       	st	Z, r24
	led[led_index].state = 0;
     478:	82 2f       	mov	r24, r18
     47a:	8f 7e       	andi	r24, 0xEF	; 239
     47c:	8c 93       	st	X, r24
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	2e 0f       	add	r18, r30
     490:	3f 1f       	adc	r19, r31
     492:	f9 01       	movw	r30, r18
     494:	ee 59       	subi	r30, 0x9E	; 158
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	90 81       	ld	r25, Z
     49a:	94 ff       	sbrs	r25, 4
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <toggle+0x20>
		
		turn_off(led_index);
     49e:	0e 94 23 02 	call	0x446	; 0x446 <turn_off>
     4a2:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     4a4:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
     4a8:	08 95       	ret

000004aa <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     4aa:	e2 e6       	ldi	r30, 0x62	; 98
     4ac:	f2 e0       	ldi	r31, 0x02	; 2
     4ae:	82 81       	ldd	r24, Z+2	; 0x02
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     4b4:	87 81       	ldd	r24, Z+7	; 0x07
     4b6:	80 72       	andi	r24, 0x20	; 32
     4b8:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     4ba:	83 81       	ldd	r24, Z+3	; 0x03
     4bc:	8f 70       	andi	r24, 0x0F	; 15
     4be:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     4c0:	86 81       	ldd	r24, Z+6	; 0x06
     4c2:	8f 7c       	andi	r24, 0xCF	; 207
     4c4:	86 83       	std	Z+6, r24	; 0x06
     4c6:	08 95       	ret

000004c8 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     4c8:	08 95       	ret

000004ca <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     4ca:	08 95       	ret

000004cc <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     4cc:	40 31       	cpi	r20, 0x10	; 16
     4ce:	20 f4       	brcc	.+8      	; 0x4d8 <note_on_event+0xc>
     4d0:	62 2f       	mov	r22, r18
     4d2:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     4d4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4d8:	08 95       	ret

000004da <update_tempo>:
}

void update_tempo() {
	
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     4da:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     4de:	90 93 56 02 	sts	0x0256, r25
     4e2:	80 93 55 02 	sts	0x0255, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     4e6:	20 91 53 02 	lds	r18, 0x0253
     4ea:	30 91 54 02 	lds	r19, 0x0254
     4ee:	82 1b       	sub	r24, r18
     4f0:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     4f2:	95 95       	asr	r25
     4f4:	87 95       	ror	r24
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	90 93 54 02 	sts	0x0254, r25
     502:	80 93 53 02 	sts	0x0253, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     506:	23 e6       	ldi	r18, 0x63	; 99
     508:	34 e0       	ldi	r19, 0x04	; 4
     50a:	a9 01       	movw	r20, r18
     50c:	48 1b       	sub	r20, r24
     50e:	59 0b       	sbc	r21, r25
     510:	ca 01       	movw	r24, r20
     512:	ed e6       	ldi	r30, 0x6D	; 109
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	54 83       	std	Z+4, r21	; 0x04
     518:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     51a:	25 81       	ldd	r18, Z+5	; 0x05
     51c:	36 81       	ldd	r19, Z+6	; 0x06
     51e:	42 17       	cp	r20, r18
     520:	53 07       	cpc	r21, r19
     522:	11 f0       	breq	.+4      	; 0x528 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     524:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;	
     528:	ed e6       	ldi	r30, 0x6D	; 109
     52a:	f2 e0       	ldi	r31, 0x02	; 2
     52c:	83 81       	ldd	r24, Z+3	; 0x03
     52e:	94 81       	ldd	r25, Z+4	; 0x04
     530:	96 83       	std	Z+6, r25	; 0x06
     532:	85 83       	std	Z+5, r24	; 0x05
     534:	08 95       	ret

00000536 <update_step_board>:
	
}

void update_step_board() {
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     548:	80 91 70 03 	lds	r24, 0x0370
     54c:	81 ff       	sbrs	r24, 1
     54e:	9a c0       	rjmp	.+308    	; 0x684 <update_step_board+0x14e>
     550:	80 91 6f 03 	lds	r24, 0x036F
     554:	81 50       	subi	r24, 0x01	; 1
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	08 f0       	brcs	.+2      	; 0x55c <update_step_board+0x26>
     55a:	94 c0       	rjmp	.+296    	; 0x684 <update_step_board+0x14e>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     55c:	80 91 c5 03 	lds	r24, 0x03C5
     560:	80 31       	cpi	r24, 0x10	; 16
     562:	09 f0       	breq	.+2      	; 0x566 <update_step_board+0x30>
     564:	45 c0       	rjmp	.+138    	; 0x5f0 <update_step_board+0xba>
     566:	0f 2e       	mov	r0, r31
     568:	f1 eb       	ldi	r31, 0xB1	; 177
     56a:	cf 2e       	mov	r12, r31
     56c:	f3 e0       	ldi	r31, 0x03	; 3
     56e:	df 2e       	mov	r13, r31
     570:	f0 2d       	mov	r31, r0
     572:	c0 e0       	ldi	r28, 0x00	; 0
     574:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.current_pattern.accent[i] ^= 1<<0; //just toggle first bit
     576:	bb 24       	eor	r11, r11
     578:	b3 94       	inc	r11
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     57a:	0f 2e       	mov	r0, r31
     57c:	f5 ec       	ldi	r31, 0xC5	; 197
     57e:	ef 2e       	mov	r14, r31
     580:	f3 e0       	ldi	r31, 0x03	; 3
     582:	ff 2e       	mov	r15, r31
     584:	f0 2d       	mov	r31, r0
     586:	01 e0       	ldi	r16, 0x01	; 1
     588:	10 e0       	ldi	r17, 0x00	; 0
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
							
				if (button[i].state) {
     58a:	fe 01       	movw	r30, r28
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e4 5f       	subi	r30, 0xF4	; 244
     592:	fd 4f       	sbci	r31, 0xFD	; 253
     594:	80 81       	ld	r24, Z
     596:	86 ff       	sbrs	r24, 6
     598:	23 c0       	rjmp	.+70     	; 0x5e0 <update_step_board+0xaa>
								
					toggle(i);
     59a:	8c 2f       	mov	r24, r28
     59c:	0e 94 42 02 	call	0x484	; 0x484 <toggle>
					button[i].state ^= button[i].state;
     5a0:	fe 01       	movw	r30, r28
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	e4 5f       	subi	r30, 0xF4	; 244
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253
     5aa:	80 81       	ld	r24, Z
     5ac:	8f 7b       	andi	r24, 0xBF	; 191
     5ae:	80 83       	st	Z, r24
					sequencer.current_pattern.accent[i] ^= 1<<0; //just toggle first bit
     5b0:	d6 01       	movw	r26, r12
     5b2:	8c 91       	ld	r24, X
     5b4:	8b 25       	eor	r24, r11
     5b6:	8c 93       	st	X, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     5b8:	d7 01       	movw	r26, r14
     5ba:	ec 91       	ld	r30, X
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ea 53       	subi	r30, 0x3A	; 58
     5c4:	fc 4f       	sbci	r31, 0xFC	; 252
     5c6:	80 81       	ld	r24, Z
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	98 01       	movw	r18, r16
     5cc:	0c 2e       	mov	r0, r28
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <update_step_board+0x9e>
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	0a 94       	dec	r0
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <update_step_board+0x9a>
     5d8:	82 27       	eor	r24, r18
     5da:	93 27       	eor	r25, r19
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     5e0:	21 96       	adiw	r28, 0x01	; 1
     5e2:	ef ef       	ldi	r30, 0xFF	; 255
     5e4:	ce 1a       	sub	r12, r30
     5e6:	de 0a       	sbc	r13, r30
     5e8:	c0 31       	cpi	r28, 0x10	; 16
     5ea:	d1 05       	cpc	r29, r1
     5ec:	71 f6       	brne	.-100    	; 0x58a <update_step_board+0x54>
     5ee:	4a c0       	rjmp	.+148    	; 0x684 <update_step_board+0x14e>
     5f0:	01 e7       	ldi	r16, 0x71	; 113
     5f2:	13 e0       	ldi	r17, 0x03	; 3

void update_step_board() {
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     5f4:	c0 e0       	ldi	r28, 0x00	; 0
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f5 ec       	ldi	r31, 0xC5	; 197
     5fc:	ef 2e       	mov	r14, r31
     5fe:	f3 e0       	ldi	r31, 0x03	; 3
     600:	ff 2e       	mov	r15, r31
     602:	f0 2d       	mov	r31, r0
     604:	cc 24       	eor	r12, r12
     606:	c3 94       	inc	r12
     608:	d1 2c       	mov	r13, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     60a:	fe 01       	movw	r30, r28
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	e4 5f       	subi	r30, 0xF4	; 244
     612:	fd 4f       	sbci	r31, 0xFD	; 253
     614:	80 81       	ld	r24, Z
     616:	86 ff       	sbrs	r24, 6
     618:	2f c0       	rjmp	.+94     	; 0x678 <update_step_board+0x142>
					
				toggle(i);
     61a:	8c 2f       	mov	r24, r28
     61c:	0e 94 42 02 	call	0x484	; 0x484 <toggle>
				button[i].state ^= button[i].state;
     620:	fe 01       	movw	r30, r28
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e4 5f       	subi	r30, 0xF4	; 244
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	80 81       	ld	r24, Z
     62c:	8f 7b       	andi	r24, 0xBF	; 191
     62e:	80 83       	st	Z, r24
				sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     630:	d7 01       	movw	r26, r14
     632:	8c 91       	ld	r24, X
     634:	e8 2f       	mov	r30, r24
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	96 01       	movw	r18, r12
     63a:	02 c0       	rjmp	.+4      	; 0x640 <update_step_board+0x10a>
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	8a 95       	dec	r24
     642:	e2 f7       	brpl	.-8      	; 0x63c <update_step_board+0x106>
     644:	c9 01       	movw	r24, r18
     646:	d8 01       	movw	r26, r16
     648:	2d 91       	ld	r18, X+
     64a:	3c 91       	ld	r19, X
     64c:	11 97       	sbiw	r26, 0x01	; 1
     64e:	82 27       	eor	r24, r18
     650:	93 27       	eor	r25, r19
     652:	8d 93       	st	X+, r24
     654:	9c 93       	st	X, r25
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	ea 53       	subi	r30, 0x3A	; 58
     65c:	fc 4f       	sbci	r31, 0xFC	; 252
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	96 01       	movw	r18, r12
     664:	0c 2e       	mov	r0, r28
     666:	02 c0       	rjmp	.+4      	; 0x66c <update_step_board+0x136>
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	0a 94       	dec	r0
     66e:	e2 f7       	brpl	.-8      	; 0x668 <update_step_board+0x132>
     670:	82 27       	eor	r24, r18
     672:	93 27       	eor	r25, r19
     674:	91 83       	std	Z+1, r25	; 0x01
     676:	80 83       	st	Z, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	0e 5f       	subi	r16, 0xFE	; 254
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	c0 31       	cpi	r28, 0x10	; 16
     680:	d1 05       	cpc	r29, r1
     682:	19 f6       	brne	.-122    	; 0x60a <update_step_board+0xd4>
				sequencer.current_pattern.first_part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	08 95       	ret

00000698 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     698:	80 91 2e 02 	lds	r24, 0x022E
     69c:	86 ff       	sbrs	r24, 6
     69e:	08 c0       	rjmp	.+16     	; 0x6b0 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     6a0:	ee e2       	ldi	r30, 0x2E	; 46
     6a2:	f2 e0       	ldi	r31, 0x02	; 2
     6a4:	8f 7b       	andi	r24, 0xBF	; 191
     6a6:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     6b0:	80 91 30 02 	lds	r24, 0x0230
     6b4:	86 ff       	sbrs	r24, 6
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     6b8:	e0 e3       	ldi	r30, 0x30	; 48
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	8f 7b       	andi	r24, 0xBF	; 191
     6be:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     6c8:	80 91 32 02 	lds	r24, 0x0232
     6cc:	86 ff       	sbrs	r24, 6
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     6d0:	e2 e3       	ldi	r30, 0x32	; 50
     6d2:	f2 e0       	ldi	r31, 0x02	; 2
     6d4:	8f 7b       	andi	r24, 0xBF	; 191
     6d6:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     6e0:	80 91 34 02 	lds	r24, 0x0234
     6e4:	86 ff       	sbrs	r24, 6
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     6e8:	e4 e3       	ldi	r30, 0x34	; 52
     6ea:	f2 e0       	ldi	r31, 0x02	; 2
     6ec:	8f 7b       	andi	r24, 0xBF	; 191
     6ee:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     6f8:	80 91 36 02 	lds	r24, 0x0236
     6fc:	86 ff       	sbrs	r24, 6
     6fe:	08 c0       	rjmp	.+16     	; 0x710 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     700:	e6 e3       	ldi	r30, 0x36	; 54
     702:	f2 e0       	ldi	r31, 0x02	; 2
     704:	8f 7b       	andi	r24, 0xBF	; 191
     706:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     710:	80 91 38 02 	lds	r24, 0x0238
     714:	86 ff       	sbrs	r24, 6
     716:	08 c0       	rjmp	.+16     	; 0x728 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     718:	e8 e3       	ldi	r30, 0x38	; 56
     71a:	f2 e0       	ldi	r31, 0x02	; 2
     71c:	8f 7b       	andi	r24, 0xBF	; 191
     71e:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	85 e0       	ldi	r24, 0x05	; 5
     724:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     728:	80 91 3a 02 	lds	r24, 0x023A
     72c:	86 ff       	sbrs	r24, 6
     72e:	08 c0       	rjmp	.+16     	; 0x740 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     730:	ea e3       	ldi	r30, 0x3A	; 58
     732:	f2 e0       	ldi	r31, 0x02	; 2
     734:	8f 7b       	andi	r24, 0xBF	; 191
     736:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	86 e0       	ldi	r24, 0x06	; 6
     73c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     740:	80 91 3c 02 	lds	r24, 0x023C
     744:	86 ff       	sbrs	r24, 6
     746:	08 c0       	rjmp	.+16     	; 0x758 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     748:	ec e3       	ldi	r30, 0x3C	; 60
     74a:	f2 e0       	ldi	r31, 0x02	; 2
     74c:	8f 7b       	andi	r24, 0xBF	; 191
     74e:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	87 e0       	ldi	r24, 0x07	; 7
     754:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     758:	80 91 3e 02 	lds	r24, 0x023E
     75c:	86 ff       	sbrs	r24, 6
     75e:	08 c0       	rjmp	.+16     	; 0x770 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     760:	ee e3       	ldi	r30, 0x3E	; 62
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	8f 7b       	andi	r24, 0xBF	; 191
     766:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     770:	80 91 40 02 	lds	r24, 0x0240
     774:	86 ff       	sbrs	r24, 6
     776:	08 c0       	rjmp	.+16     	; 0x788 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     778:	e0 e4       	ldi	r30, 0x40	; 64
     77a:	f2 e0       	ldi	r31, 0x02	; 2
     77c:	8f 7b       	andi	r24, 0xBF	; 191
     77e:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	89 e0       	ldi	r24, 0x09	; 9
     784:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     788:	80 91 42 02 	lds	r24, 0x0242
     78c:	86 ff       	sbrs	r24, 6
     78e:	08 c0       	rjmp	.+16     	; 0x7a0 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     790:	e2 e4       	ldi	r30, 0x42	; 66
     792:	f2 e0       	ldi	r31, 0x02	; 2
     794:	8f 7b       	andi	r24, 0xBF	; 191
     796:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	8a e0       	ldi	r24, 0x0A	; 10
     79c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     7a0:	08 95       	ret

000007a2 <refresh>:
}




void refresh(void) {
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
	update_tempo();
     7a6:	0e 94 6d 02 	call	0x4da	; 0x4da <update_tempo>
	read_switches();
     7aa:	0e 94 4a 05 	call	0xa94	; 0xa94 <read_switches>
	check_start_stop_tap();
     7ae:	0e 94 ba 05 	call	0xb74	; 0xb74 <check_start_stop_tap>
	
	parse_switch_data();
     7b2:	0e 94 93 05 	call	0xb26	; 0xb26 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     7b6:	80 91 6f 03 	lds	r24, 0x036F
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	11 f4       	brne	.+4      	; 0x7c2 <refresh+0x20>
     7be:	0e 94 4c 03 	call	0x698	; 0x698 <live_hits>
	update_mode();
     7c2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <update_mode>
	check_inst_switches();
     7c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <check_inst_switches>
	update_step_board();
     7ca:	0e 94 9b 02 	call	0x536	; 0x536 <update_step_board>
	if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     7ce:	80 91 70 03 	lds	r24, 0x0370
     7d2:	81 ff       	sbrs	r24, 1
     7d4:	4b c0       	rjmp	.+150    	; 0x86c <refresh+0xca>
		
		if (sequencer.next_step_flag) {
     7d6:	80 91 c2 03 	lds	r24, 0x03C2
     7da:	84 ff       	sbrs	r24, 4
     7dc:	56 c0       	rjmp	.+172    	; 0x88a <refresh+0xe8>
			sequencer.next_step_flag = 0;
     7de:	e2 ec       	ldi	r30, 0xC2	; 194
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	8f 7e       	andi	r24, 0xEF	; 239
     7e4:	80 83       	st	Z, r24
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     7e6:	80 72       	andi	r24, 0x20	; 32
     7e8:	88 23       	and	r24, r24
     7ea:	f1 f3       	breq	.-4      	; 0x7e8 <refresh+0x46>
			PORTD |= (1<<TRIG);
     7ec:	5d 9a       	sbi	0x0b, 5	; 11
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
     7ee:	c2 ec       	ldi	r28, 0xC2	; 194
     7f0:	d3 e0       	ldi	r29, 0x03	; 3
     7f2:	88 81       	ld	r24, Y
     7f4:	8f 70       	andi	r24, 0x0F	; 15
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <refresh+0x5e>
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	8a 95       	dec	r24
     802:	e2 f7       	brpl	.-8      	; 0x7fc <refresh+0x5a>
     804:	e0 91 c5 03 	lds	r30, 0x03C5
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ea 53       	subi	r30, 0x3A	; 58
     810:	fc 4f       	sbci	r31, 0xFC	; 252
     812:	90 81       	ld	r25, Z
     814:	81 81       	ldd	r24, Z+1	; 0x01
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     816:	e2 e6       	ldi	r30, 0x62	; 98
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	49 2f       	mov	r20, r25
     81c:	42 23       	and	r20, r18
     81e:	40 95       	com	r20
		
		if (sequencer.next_step_flag) {
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
     820:	92 2b       	or	r25, r18
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     822:	94 23       	and	r25, r20
     824:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     826:	98 2f       	mov	r25, r24
     828:	93 23       	and	r25, r19
     82a:	90 95       	com	r25
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.current_pattern.first_part[sequencer.current_inst];
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
     82c:	83 2b       	or	r24, r19
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     82e:	89 23       	and	r24, r25
     830:	80 83       	st	Z, r24
			trigger_step(); 
     832:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
			if (sequencer.current_pattern.accent[sequencer.current_step] &1) spi_data[8] |= 1<<ACCENT;
     836:	e8 81       	ld	r30, Y
     838:	ef 70       	andi	r30, 0x0F	; 15
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ef 54       	subi	r30, 0x4F	; 79
     83e:	fc 4f       	sbci	r31, 0xFC	; 252
     840:	80 81       	ld	r24, Z
     842:	80 ff       	sbrs	r24, 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <refresh+0xae>
     846:	e2 e6       	ldi	r30, 0x62	; 98
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	80 85       	ldd	r24, Z+8	; 0x08
     84c:	81 60       	ori	r24, 0x01	; 1
     84e:	80 87       	std	Z+8, r24	; 0x08
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     850:	ee e6       	ldi	r30, 0x6E	; 110
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	82 60       	ori	r24, 0x02	; 2
     858:	80 83       	st	Z, r24
			TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     85a:	85 b5       	in	r24, 0x25	; 37
     85c:	83 60       	ori	r24, 0x03	; 3
     85e:	85 bd       	out	0x25, r24	; 37
			sequencer.trigger_finished = 0;
     860:	e2 ec       	ldi	r30, 0xC2	; 194
     862:	f3 e0       	ldi	r31, 0x03	; 3
     864:	80 81       	ld	r24, Z
     866:	8f 7d       	andi	r24, 0xDF	; 223
     868:	80 83       	st	Z, r24
     86a:	0f c0       	rjmp	.+30     	; 0x88a <refresh+0xe8>
		} else {
			

			
		}		
	} else if (sequencer.next_step_flag){
     86c:	80 91 c2 03 	lds	r24, 0x03C2
     870:	84 ff       	sbrs	r24, 4
     872:	0b c0       	rjmp	.+22     	; 0x88a <refresh+0xe8>
		
			sequencer.next_step_flag = 0;
     874:	e2 ec       	ldi	r30, 0xC2	; 194
     876:	f3 e0       	ldi	r31, 0x03	; 3
     878:	8f 7e       	andi	r24, 0xEF	; 239
     87a:	80 83       	st	Z, r24
			spi_data[1] = 0;
     87c:	e2 e6       	ldi	r30, 0x62	; 98
     87e:	f2 e0       	ldi	r31, 0x02	; 2
     880:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     882:	10 82       	st	Z, r1
			turn_on(STEP_1_LED);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     88a:	0e 94 26 05 	call	0xa4c	; 0xa4c <update_spi>
	PORTD &= ~(1<<TRIG);
     88e:	5d 98       	cbi	0x0b, 5	; 11
	//if (trigger_finished && sequencer.SHIFT) update_tempo(); //turning off SPI during pot read creates problem for trigger interrupt
	
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     896:	8f e1       	ldi	r24, 0x1F	; 31
     898:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     89c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     8a0:	88 e9       	ldi	r24, 0x98	; 152
     8a2:	80 93 c1 00 	sts	0x00C1, r24
     8a6:	08 95       	ret

000008a8 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     8d4:	80 91 c6 00 	lds	r24, 0x00C6
     8d8:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     8da:	ae 01       	movw	r20, r28
     8dc:	4f 5f       	subi	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	82 e8       	ldi	r24, 0x82	; 130
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	0e 94 80 07 	call	0xf00	; 0xf00 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     912:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     914:	8d b1       	in	r24, 0x0d	; 13
     916:	8c 60       	ori	r24, 0x0C	; 12
     918:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     91a:	87 b1       	in	r24, 0x07	; 7
     91c:	8e 60       	ori	r24, 0x0E	; 14
     91e:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     920:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     922:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     924:	88 b1       	in	r24, 0x08	; 8
     926:	81 7f       	andi	r24, 0xF1	; 241
     928:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     92a:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     92c:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     92e:	80 e5       	ldi	r24, 0x50	; 80
     930:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     934:	ed ea       	ldi	r30, 0xAD	; 173
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	81 60       	ori	r24, 0x01	; 1
     93c:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     944:	8d e1       	ldi	r24, 0x1D	; 29
     946:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
	turn_on(FILL_MANUAL);
     94a:	82 e2       	ldi	r24, 0x22	; 34
     94c:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
	
	update_spi();
     950:	0e 94 26 05 	call	0xa4c	; 0xa4c <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     954:	84 b5       	in	r24, 0x24	; 36
     956:	82 60       	ori	r24, 0x02	; 2
     958:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     95a:	81 ee       	ldi	r24, 0xE1	; 225
     95c:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     95e:	82 e8       	ldi	r24, 0x82	; 130
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 4f 07 	call	0xe9e	; 0xe9e <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     966:	66 e6       	ldi	r22, 0x66	; 102
     968:	72 e0       	ldi	r23, 0x02	; 2
     96a:	82 e8       	ldi	r24, 0x82	; 130
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	0e 94 43 07 	call	0xe86	; 0xe86 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     972:	64 e6       	ldi	r22, 0x64	; 100
     974:	72 e0       	ldi	r23, 0x02	; 2
     976:	82 e8       	ldi	r24, 0x82	; 130
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 47 07 	call	0xe8e	; 0xe8e <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     97e:	65 e6       	ldi	r22, 0x65	; 101
     980:	72 e0       	ldi	r23, 0x02	; 2
     982:	82 e8       	ldi	r24, 0x82	; 130
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 4b 07 	call	0xe96	; 0xe96 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     98a:	0e 94 4b 04 	call	0x896	; 0x896 <setup_midi_usart>
	
	setup_internal_clock();
     98e:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     992:	ed e6       	ldi	r30, 0x6D	; 109
     994:	f2 e0       	ldi	r31, 0x02	; 2
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	81 83       	std	Z+1, r24	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     99e:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     9a2:	e2 ec       	ldi	r30, 0xC2	; 194
     9a4:	f3 e0       	ldi	r31, 0x03	; 3
     9a6:	80 81       	ld	r24, Z
     9a8:	80 62       	ori	r24, 0x20	; 32
     9aa:	80 83       	st	Z, r24
	sequencer.START = 0;
     9ac:	e0 e7       	ldi	r30, 0x70	; 112
     9ae:	f3 e0       	ldi	r31, 0x03	; 3
     9b0:	80 81       	ld	r24, Z
     9b2:	8d 7f       	andi	r24, 0xFD	; 253
     9b4:	80 83       	st	Z, r24
	//update_tempo();
	sei(); //enable global interrupts	
     9b6:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     9b8:	82 e8       	ldi	r24, 0x82	; 130
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <midi_device_process>
	
	refresh();		
     9c0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <refresh>

	
	}
     9c4:	f9 cf       	rjmp	.-14     	; 0x9b8 <main+0xa6>

000009c6 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     9c6:	80 91 4c 02 	lds	r24, 0x024C
     9ca:	86 ff       	sbrs	r24, 6
     9cc:	34 c0       	rjmp	.+104    	; 0xa36 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     9ce:	ec e4       	ldi	r30, 0x4C	; 76
     9d0:	f2 e0       	ldi	r31, 0x02	; 2
     9d2:	8f 7b       	andi	r24, 0xBF	; 191
     9d4:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     9d6:	80 91 70 03 	lds	r24, 0x0370
     9da:	80 ff       	sbrs	r24, 0
     9dc:	0c c0       	rjmp	.+24     	; 0x9f6 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     9de:	80 91 57 02 	lds	r24, 0x0257
     9e2:	88 23       	and	r24, r24
     9e4:	21 f0       	breq	.+8      	; 0x9ee <update_mode+0x28>
     9e6:	81 50       	subi	r24, 0x01	; 1
     9e8:	80 93 57 02 	sts	0x0257, r24
     9ec:	0e c0       	rjmp	.+28     	; 0xa0a <update_mode+0x44>
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	80 93 57 02 	sts	0x0257, r24
     9f4:	0a c0       	rjmp	.+20     	; 0xa0a <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     9f6:	80 91 57 02 	lds	r24, 0x0257
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	86 30       	cpi	r24, 0x06	; 6
     9fe:	19 f0       	breq	.+6      	; 0xa06 <update_mode+0x40>
     a00:	80 93 57 02 	sts	0x0257, r24
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <update_mode+0x44>
     a06:	10 92 57 02 	sts	0x0257, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     a0a:	20 91 57 02 	lds	r18, 0x0257
     a0e:	e2 2f       	mov	r30, r18
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	ea 5f       	subi	r30, 0xFA	; 250
     a14:	fd 4f       	sbci	r31, 0xFD	; 253
     a16:	80 81       	ld	r24, Z
     a18:	80 93 6f 03 	sts	0x036F, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     a1c:	e2 e6       	ldi	r30, 0x62	; 98
     a1e:	f2 e0       	ldi	r31, 0x02	; 2
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <update_mode+0x64>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	2a 95       	dec	r18
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     a2e:	94 81       	ldd	r25, Z+4	; 0x04
     a30:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     a32:	89 2b       	or	r24, r25
     a34:	84 83       	std	Z+4, r24	; 0x04
     a36:	08 95       	ret

00000a38 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     a38:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     a3c:	ed ea       	ldi	r30, 0xAD	; 173
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	88 23       	and	r24, r24
     a44:	ec f7       	brge	.-6      	; 0xa40 <spi_shift_byte+0x8>
	return SPDR1;
     a46:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     a4a:	08 95       	ret

00000a4c <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     a50:	c2 e6       	ldi	r28, 0x62	; 98
     a52:	d2 e0       	ldi	r29, 0x02	; 2
     a54:	88 81       	ld	r24, Y
     a56:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     a6c:	8c 81       	ldd	r24, Y+4	; 0x04
     a6e:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     a78:	8e 81       	ldd	r24, Y+6	; 0x06
     a7a:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     a7e:	8f 81       	ldd	r24, Y+7	; 0x07
     a80:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     a84:	88 85       	ldd	r24, Y+8	; 0x08
     a86:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     a8a:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     a8c:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <read_switches>:

void read_switches(void) { //reads switch data
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     a98:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
     aa0:	cd e5       	ldi	r28, 0x5D	; 93
     aa2:	d2 e0       	ldi	r29, 0x02	; 2
     aa4:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
     aac:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
     ab4:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
     abc:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 1c 05 	call	0xa38	; 0xa38 <spi_shift_byte>
     ac4:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     ac6:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     ac8:	98 81       	ld	r25, Y
     aca:	39 2f       	mov	r19, r25
     acc:	36 95       	lsr	r19
     ace:	e0 e7       	ldi	r30, 0x70	; 112
     ad0:	f3 e0       	ldi	r31, 0x03	; 3
     ad2:	20 81       	ld	r18, Z
     ad4:	30 fb       	bst	r19, 0
     ad6:	20 f9       	bld	r18, 0
     ad8:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     ada:	e8 e5       	ldi	r30, 0x58	; 88
     adc:	f2 e0       	ldi	r31, 0x02	; 2
     ade:	20 81       	ld	r18, Z
     ae0:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     ae2:	29 27       	eor	r18, r25
     ae4:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     ae6:	92 23       	and	r25, r18
     ae8:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     aea:	21 81       	ldd	r18, Z+1	; 0x01
     aec:	99 81       	ldd	r25, Y+1	; 0x01
     aee:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     af0:	29 27       	eor	r18, r25
     af2:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     af4:	92 23       	and	r25, r18
     af6:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     af8:	22 81       	ldd	r18, Z+2	; 0x02
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     afe:	29 27       	eor	r18, r25
     b00:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     b02:	92 23       	and	r25, r18
     b04:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     b06:	23 81       	ldd	r18, Z+3	; 0x03
     b08:	9b 81       	ldd	r25, Y+3	; 0x03
     b0a:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     b0c:	29 27       	eor	r18, r25
     b0e:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     b10:	92 23       	and	r25, r18
     b12:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     b14:	94 81       	ldd	r25, Z+4	; 0x04
     b16:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     b18:	98 27       	eor	r25, r24
     b1a:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     b1c:	89 23       	and	r24, r25
     b1e:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     b2a:	da 01       	movw	r26, r20
     b2c:	aa 0f       	add	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	a4 5f       	subi	r26, 0xF4	; 244
     b32:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     b34:	8c 91       	ld	r24, X
     b36:	e8 2f       	mov	r30, r24
     b38:	e6 95       	lsr	r30
     b3a:	e6 95       	lsr	r30
     b3c:	e6 95       	lsr	r30
     b3e:	e7 70       	andi	r30, 0x07	; 7
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	e3 5a       	subi	r30, 0xA3	; 163
     b44:	fd 4f       	sbci	r31, 0xFD	; 253
     b46:	20 81       	ld	r18, Z
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	98 2f       	mov	r25, r24
     b4c:	97 70       	andi	r25, 0x07	; 7
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <parse_switch_data+0x2e>
     b50:	35 95       	asr	r19
     b52:	27 95       	ror	r18
     b54:	9a 95       	dec	r25
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <parse_switch_data+0x2a>
     b58:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     b5a:	86 fb       	bst	r24, 6
     b5c:	99 27       	eor	r25, r25
     b5e:	90 f9       	bld	r25, 0
     b60:	29 27       	eor	r18, r25
     b62:	20 fb       	bst	r18, 0
     b64:	86 f9       	bld	r24, 6
     b66:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     b68:	4f 5f       	subi	r20, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	43 32       	cpi	r20, 0x23	; 35
     b6e:	51 05       	cpc	r21, r1
     b70:	e1 f6       	brne	.-72     	; 0xb2a <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     b72:	08 95       	ret

00000b74 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     b74:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     b76:	80 91 6b 02 	lds	r24, 0x026B
     b7a:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     b7c:	89 27       	eor	r24, r25
     b7e:	80 93 6b 02 	sts	0x026B, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     b82:	89 23       	and	r24, r25
     b84:	80 93 6c 02 	sts	0x026C, r24
	uint8_t start_state = sequencer.START;
     b88:	e0 e7       	ldi	r30, 0x70	; 112
     b8a:	f3 e0       	ldi	r31, 0x03	; 3
     b8c:	90 81       	ld	r25, Z
     b8e:	91 fb       	bst	r25, 1
     b90:	22 27       	eor	r18, r18
     b92:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     b94:	86 95       	lsr	r24
     b96:	82 27       	eor	r24, r18
     b98:	80 fb       	bst	r24, 0
     b9a:	91 f9       	bld	r25, 1
     b9c:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) {
     b9e:	91 ff       	sbrs	r25, 1
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <check_start_stop_tap+0x42>
     ba2:	21 11       	cpse	r18, r1
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <check_start_stop_tap+0x42>
		
		sequencer.current_step = 0;
     ba6:	e2 ec       	ldi	r30, 0xC2	; 194
     ba8:	f3 e0       	ldi	r31, 0x03	; 3
     baa:	80 81       	ld	r24, Z
		sequencer.next_step_flag = 1;
     bac:	80 7f       	andi	r24, 0xF0	; 240
     bae:	80 61       	ori	r24, 0x10	; 16
     bb0:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
     bb2:	10 92 6e 02 	sts	0x026E, r1
     bb6:	08 95       	ret

00000bb8 <check_inst_switches>:
		//
	//}
	
}
	
void check_inst_switches(void) {
     bb8:	3f 92       	push	r3
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	0f 2e       	mov	r0, r31
     bdc:	f5 e0       	ldi	r31, 0x05	; 5
     bde:	ef 2e       	mov	r14, r31
     be0:	f1 e0       	ldi	r31, 0x01	; 1
     be2:	ff 2e       	mov	r15, r31
     be4:	f0 2d       	mov	r31, r0
     be6:	0f 2e       	mov	r0, r31
     be8:	fb e3       	ldi	r31, 0x3B	; 59
     bea:	8f 2e       	mov	r8, r31
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	9f 2e       	mov	r9, r31
     bf0:	f0 2d       	mov	r31, r0
     bf2:	02 e1       	ldi	r16, 0x12	; 18
     bf4:	10 e0       	ldi	r17, 0x00	; 0
     bf6:	c1 e1       	ldi	r28, 0x11	; 17
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	c1 2c       	mov	r12, r1
     bfc:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     bfe:	0f 2e       	mov	r0, r31
     c00:	f5 ec       	ldi	r31, 0xC5	; 197
     c02:	af 2e       	mov	r10, r31
     c04:	f3 e0       	ldi	r31, 0x03	; 3
     c06:	bf 2e       	mov	r11, r31
     c08:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     c0a:	0f 2e       	mov	r0, r31
     c0c:	ff e5       	ldi	r31, 0x5F	; 95
     c0e:	4f 2e       	mov	r4, r31
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	5f 2e       	mov	r5, r31
     c14:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     c16:	0f 2e       	mov	r0, r31
     c18:	ff e0       	ldi	r31, 0x0F	; 15
     c1a:	3f 2e       	mov	r3, r31
     c1c:	f0 2d       	mov	r31, r0
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <check_inst_switches+0x80>
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	c8 1a       	sub	r12, r24
     c24:	d8 0a       	sbc	r13, r24
     c26:	21 96       	adiw	r28, 0x01	; 1
     c28:	0f 5f       	subi	r16, 0xFF	; 255
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	a6 e0       	ldi	r26, 0x06	; 6
     c2e:	ea 0e       	add	r14, r26
     c30:	f1 1c       	adc	r15, r1
     c32:	b6 e0       	ldi	r27, 0x06	; 6
     c34:	8b 0e       	add	r8, r27
     c36:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     c38:	fe 01       	movw	r30, r28
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	e4 5f       	subi	r30, 0xF4	; 244
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	80 81       	ld	r24, Z
     c44:	86 ff       	sbrs	r24, 6
     c46:	37 c0       	rjmp	.+110    	; 0xcb6 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
     c48:	fe 01       	movw	r30, r28
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	e4 5f       	subi	r30, 0xF4	; 244
     c50:	fd 4f       	sbci	r31, 0xFD	; 253
     c52:	8f 7b       	andi	r24, 0xBF	; 191
     c54:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
     c56:	0e 94 55 02 	call	0x4aa	; 0x4aa <turn_off_all_inst_leds>
     c5a:	f7 01       	movw	r30, r14
     c5c:	d7 01       	movw	r26, r14
     c5e:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
     c60:	8c 91       	ld	r24, X
     c62:	8f 3f       	cpi	r24, 0xFF	; 255
     c64:	a9 f0       	breq	.+42     	; 0xc90 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
     c66:	d5 01       	movw	r26, r10
     c68:	8c 91       	ld	r24, X
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	c8 16       	cp	r12, r24
     c6e:	d9 06       	cpc	r13, r25
     c70:	49 f4       	brne	.+18     	; 0xc84 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
     c72:	f4 01       	movw	r30, r8
     c74:	80 81       	ld	r24, Z
     c76:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
     c7e:	d5 01       	movw	r26, r10
     c80:	8c 93       	st	X, r24
     c82:	19 c0       	rjmp	.+50     	; 0xcb6 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
     c84:	80 81       	ld	r24, Z
     c86:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
     c8a:	f5 01       	movw	r30, r10
     c8c:	c0 82       	st	Z, r12
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     c90:	d5 01       	movw	r26, r10
     c92:	8c 91       	ld	r24, X
     c94:	86 30       	cpi	r24, 0x06	; 6
     c96:	51 f4       	brne	.+20     	; 0xcac <check_inst_switches+0xf4>
     c98:	c7 31       	cpi	r28, 0x17	; 23
     c9a:	d1 05       	cpc	r29, r1
     c9c:	39 f4       	brne	.+14     	; 0xcac <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
     c9e:	f2 01       	movw	r30, r4
     ca0:	80 81       	ld	r24, Z
     ca2:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
					sequencer.current_inst = MA;
     ca6:	d5 01       	movw	r26, r10
     ca8:	3c 92       	st	X, r3
     caa:	ba cf       	rjmp	.-140    	; 0xc20 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
     cac:	80 81       	ld	r24, Z
     cae:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
     cb2:	f5 01       	movw	r30, r10
     cb4:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
     cb6:	0c 31       	cpi	r16, 0x1C	; 28
     cb8:	11 05       	cpc	r17, r1
     cba:	0c f4       	brge	.+2      	; 0xcbe <check_inst_switches+0x106>
     cbc:	b1 cf       	rjmp	.-158    	; 0xc20 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
     cbe:	80 91 2c 02 	lds	r24, 0x022C
     cc2:	86 ff       	sbrs	r24, 6
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
     cc6:	ec e2       	ldi	r30, 0x2C	; 44
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	8f 7b       	andi	r24, 0xBF	; 191
     ccc:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
     cce:	0e 94 55 02 	call	0x4aa	; 0x4aa <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
     cd2:	84 e1       	ldi	r24, 0x14	; 20
     cd4:	0e 94 05 02 	call	0x40a	; 0x40a <turn_on>
		sequencer.current_inst = AC;
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	80 93 c5 03 	sts	0x03C5, r24
	}
	
}	
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	3f 90       	pop	r3
     d00:	08 95       	ret

00000d02 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     d02:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     d04:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     d06:	74 83       	std	Z+4, r23	; 0x04
     d08:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     d0a:	11 82       	std	Z+1, r1	; 0x01
     d0c:	10 82       	st	Z, r1
     d0e:	08 95       	ret

00000d10 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ec 01       	movw	r28, r24
     d1c:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     d1e:	0e 94 01 07 	call	0xe02	; 0xe02 <store_and_clear_interrupt>
     d22:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     d24:	f9 80       	ldd	r15, Y+1	; 0x01
     d26:	4f 2d       	mov	r20, r15
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	ca 01       	movw	r24, r20
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	2a 81       	ldd	r18, Y+2	; 0x02
     d30:	62 2f       	mov	r22, r18
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 b0 09 	call	0x1360	; 0x1360 <__divmodhi4>
     d38:	28 81       	ld	r18, Y
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	82 17       	cp	r24, r18
     d3e:	93 07       	cpc	r25, r19
     d40:	29 f4       	brne	.+10     	; 0xd4c <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
     d42:	81 2f       	mov	r24, r17
     d44:	0e 94 04 07 	call	0xe08	; 0xe08 <restore_interrupt_setting>
      return false;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	12 c0       	rjmp	.+36     	; 0xd70 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
     d4c:	eb 81       	ldd	r30, Y+3	; 0x03
     d4e:	fc 81       	ldd	r31, Y+4	; 0x04
     d50:	ef 0d       	add	r30, r15
     d52:	f1 1d       	adc	r31, r1
     d54:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
     d56:	29 81       	ldd	r18, Y+1	; 0x01
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	c9 01       	movw	r24, r18
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	6a 81       	ldd	r22, Y+2	; 0x02
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 b0 09 	call	0x1360	; 0x1360 <__divmodhi4>
     d66:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     d68:	81 2f       	mov	r24, r17
     d6a:	0e 94 04 07 	call	0xe08	; 0xe08 <restore_interrupt_setting>
      return true;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	08 95       	ret

00000d7c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     d82:	0e 94 01 07 	call	0xe02	; 0xe02 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     d86:	39 81       	ldd	r19, Y+1	; 0x01
     d88:	28 81       	ld	r18, Y
     d8a:	32 17       	cp	r19, r18
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     d8e:	c3 2f       	mov	r28, r19
     d90:	c2 1b       	sub	r28, r18
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <bytequeue_length+0x20>
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	c3 2f       	mov	r28, r19
     d98:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
     d9a:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
     d9c:	0e 94 04 07 	call	0xe08	; 0xe08 <restore_interrupt_setting>
   return len;
}
     da0:	8c 2f       	mov	r24, r28
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     da8:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     daa:	80 81       	ld	r24, Z
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	9b 01       	movw	r18, r22
     db0:	28 0f       	add	r18, r24
     db2:	31 1d       	adc	r19, r1
     db4:	c9 01       	movw	r24, r18
     db6:	62 81       	ldd	r22, Z+2	; 0x02
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	0e 94 b0 09 	call	0x1360	; 0x1360 <__divmodhi4>
     dbe:	03 80       	ldd	r0, Z+3	; 0x03
     dc0:	f4 81       	ldd	r31, Z+4	; 0x04
     dc2:	e0 2d       	mov	r30, r0
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
}
     dc8:	80 81       	ld	r24, Z
     dca:	08 95       	ret

00000dcc <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
     dd4:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     dd6:	0e 94 01 07 	call	0xe02	; 0xe02 <store_and_clear_interrupt>
     dda:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     ddc:	88 81       	ld	r24, Y
     dde:	21 2f       	mov	r18, r17
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	b9 01       	movw	r22, r18
     de4:	68 0f       	add	r22, r24
     de6:	71 1d       	adc	r23, r1
     de8:	cb 01       	movw	r24, r22
     dea:	6a 81       	ldd	r22, Y+2	; 0x02
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	0e 94 b0 09 	call	0x1360	; 0x1360 <__divmodhi4>
     df2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     df4:	84 2f       	mov	r24, r20
     df6:	0e 94 04 07 	call	0xe08	; 0xe08 <restore_interrupt_setting>
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	08 95       	ret

00000e02 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     e02:	8f b7       	in	r24, 0x3f	; 63
   cli();
     e04:	f8 94       	cli
   return sreg;
}
     e06:	08 95       	ret

00000e08 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     e08:	8f bf       	out	0x3f, r24	; 63
     e0a:	08 95       	ret

00000e0c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     e0c:	88 1f       	adc	r24, r24
     e0e:	88 27       	eor	r24, r24
     e10:	88 1f       	adc	r24, r24
     e12:	08 95       	ret

00000e14 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	88 3f       	cpi	r24, 0xF8	; 248
     e18:	08 f4       	brcc	.+2      	; 0xe1c <midi_is_realtime+0x8>
     e1a:	90 e0       	ldi	r25, 0x00	; 0
}
     e1c:	89 2f       	mov	r24, r25
     e1e:	08 95       	ret

00000e20 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     e20:	98 2f       	mov	r25, r24
     e22:	90 7f       	andi	r25, 0xF0	; 240
     e24:	90 3c       	cpi	r25, 0xC0	; 192
     e26:	b1 f0       	breq	.+44     	; 0xe54 <midi_packet_length+0x34>
     e28:	58 f4       	brcc	.+22     	; 0xe40 <midi_packet_length+0x20>
     e2a:	90 39       	cpi	r25, 0x90	; 144
     e2c:	41 f1       	breq	.+80     	; 0xe7e <midi_packet_length+0x5e>
     e2e:	18 f4       	brcc	.+6      	; 0xe36 <midi_packet_length+0x16>
     e30:	90 38       	cpi	r25, 0x80	; 128
     e32:	19 f5       	brne	.+70     	; 0xe7a <midi_packet_length+0x5a>
     e34:	24 c0       	rjmp	.+72     	; 0xe7e <midi_packet_length+0x5e>
     e36:	90 3a       	cpi	r25, 0xA0	; 160
     e38:	11 f1       	breq	.+68     	; 0xe7e <midi_packet_length+0x5e>
     e3a:	90 3b       	cpi	r25, 0xB0	; 176
     e3c:	f1 f4       	brne	.+60     	; 0xe7a <midi_packet_length+0x5a>
     e3e:	1f c0       	rjmp	.+62     	; 0xe7e <midi_packet_length+0x5e>
     e40:	90 3e       	cpi	r25, 0xE0	; 224
     e42:	e9 f0       	breq	.+58     	; 0xe7e <midi_packet_length+0x5e>
     e44:	18 f4       	brcc	.+6      	; 0xe4c <midi_packet_length+0x2c>
     e46:	90 3d       	cpi	r25, 0xD0	; 208
     e48:	29 f0       	breq	.+10     	; 0xe54 <midi_packet_length+0x34>
     e4a:	17 c0       	rjmp	.+46     	; 0xe7a <midi_packet_length+0x5a>
     e4c:	90 3f       	cpi	r25, 0xF0	; 240
     e4e:	21 f0       	breq	.+8      	; 0xe58 <midi_packet_length+0x38>
     e50:	93 3f       	cpi	r25, 0xF3	; 243
     e52:	99 f4       	brne	.+38     	; 0xe7a <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	08 95       	ret
      case 0xF0:
         switch(status) {
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	fc 01       	movw	r30, r24
     e5c:	e1 5f       	subi	r30, 0xF1	; 241
     e5e:	f1 09       	sbc	r31, r1
     e60:	ef 30       	cpi	r30, 0x0F	; 15
     e62:	f1 05       	cpc	r31, r1
     e64:	40 f4       	brcc	.+16     	; 0xe76 <midi_packet_length+0x56>
     e66:	e6 5a       	subi	r30, 0xA6	; 166
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret
         }
      default:
         return UNDEFINED;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     e84:	08 95       	ret

00000e86 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     e86:	fc 01       	movw	r30, r24
     e88:	75 83       	std	Z+5, r23	; 0x05
     e8a:	64 83       	std	Z+4, r22	; 0x04
     e8c:	08 95       	ret

00000e8e <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     e8e:	fc 01       	movw	r30, r24
     e90:	77 83       	std	Z+7, r23	; 0x07
     e92:	66 83       	std	Z+6, r22	; 0x06
     e94:	08 95       	ret

00000e96 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     e96:	fc 01       	movw	r30, r24
     e98:	77 8b       	std	Z+23, r23	; 0x17
     e9a:	66 8b       	std	Z+22, r22	; 0x16
     e9c:	08 95       	ret

00000e9e <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     ea4:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
     ea6:	1f a2       	std	Y+39, r1	; 0x27
     ea8:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     eaa:	bc 01       	movw	r22, r24
     eac:	68 5d       	subi	r22, 0xD8	; 216
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	40 ec       	ldi	r20, 0xC0	; 192
     eb2:	88 51       	subi	r24, 0x18	; 24
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	0e 94 81 06 	call	0xd02	; 0xd02 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     eba:	1b 82       	std	Y+3, r1	; 0x03
     ebc:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     ebe:	1d 82       	std	Y+5, r1	; 0x05
     ec0:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     ec2:	1f 82       	std	Y+7, r1	; 0x07
     ec4:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     ec6:	19 86       	std	Y+9, r1	; 0x09
     ec8:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     eca:	1b 86       	std	Y+11, r1	; 0x0b
     ecc:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     ece:	1d 86       	std	Y+13, r1	; 0x0d
     ed0:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     ed2:	1f 86       	std	Y+15, r1	; 0x0f
     ed4:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     ed6:	19 8a       	std	Y+17, r1	; 0x11
     ed8:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     eda:	1b 8a       	std	Y+19, r1	; 0x13
     edc:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     ede:	1d 8a       	std	Y+21, r1	; 0x15
     ee0:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     ee2:	1f 8a       	std	Y+23, r1	; 0x17
     ee4:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     ee6:	19 8e       	std	Y+25, r1	; 0x19
     ee8:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     eea:	1b 8e       	std	Y+27, r1	; 0x1b
     eec:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     eee:	1d 8e       	std	Y+29, r1	; 0x1d
     ef0:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     ef2:	1f 8e       	std	Y+31, r1	; 0x1f
     ef4:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     ef6:	19 a2       	std	Y+33, r1	; 0x21
     ef8:	18 a2       	std	Y+32, r1	; 0x20
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
     f0c:	66 23       	and	r22, r22
     f0e:	99 f0       	breq	.+38     	; 0xf36 <midi_device_input+0x36>
     f10:	ea 01       	movw	r28, r20
     f12:	61 50       	subi	r22, 0x01	; 1
     f14:	06 2f       	mov	r16, r22
     f16:	10 e0       	ldi	r17, 0x00	; 0
     f18:	0f 5f       	subi	r16, 0xFF	; 255
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	04 0f       	add	r16, r20
     f1e:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
     f20:	7c 01       	movw	r14, r24
     f22:	28 ee       	ldi	r18, 0xE8	; 232
     f24:	e2 0e       	add	r14, r18
     f26:	f1 1c       	adc	r15, r1
     f28:	69 91       	ld	r22, Y+
     f2a:	c7 01       	movw	r24, r14
     f2c:	0e 94 88 06 	call	0xd10	; 0xd10 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     f30:	c0 17       	cp	r28, r16
     f32:	d1 07       	cpc	r29, r17
     f34:	c9 f7       	brne	.-14     	; 0xf28 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	08 95       	ret

00000f44 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	00 d0       	rcall	.+0      	; 0xf5a <midi_input_callbacks+0x16>
     f5a:	1f 92       	push	r1
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	7c 01       	movw	r14, r24
     f62:	6b 01       	movw	r12, r22
     f64:	14 2f       	mov	r17, r20
     f66:	b2 2e       	mov	r11, r18
     f68:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     f6a:	dc 01       	movw	r26, r24
     f6c:	95 96       	adiw	r26, 0x25	; 37
     f6e:	8c 91       	ld	r24, X
     f70:	95 97       	sbiw	r26, 0x25	; 37
     f72:	84 30       	cpi	r24, 0x04	; 4
     f74:	11 f5       	brne	.+68     	; 0xfba <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
     f76:	5a 96       	adiw	r26, 0x1a	; 26
     f78:	ed 91       	ld	r30, X+
     f7a:	fc 91       	ld	r31, X
     f7c:	5b 97       	sbiw	r26, 0x1b	; 27
     f7e:	30 97       	sbiw	r30, 0x00	; 0
     f80:	09 f4       	brne	.+2      	; 0xf84 <midi_input_callbacks+0x40>
     f82:	cc c0       	rjmp	.+408    	; 0x111c <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     f84:	9b 01       	movw	r18, r22
     f86:	21 50       	subi	r18, 0x01	; 1
     f88:	31 09       	sbc	r19, r1
     f8a:	ab ea       	ldi	r26, 0xAB	; 171
     f8c:	ba ea       	ldi	r27, 0xAA	; 170
     f8e:	0e 94 ca 09 	call	0x1394	; 0x1394 <__umulhisi3>
     f92:	96 95       	lsr	r25
     f94:	87 95       	ror	r24
     f96:	9c 01       	movw	r18, r24
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     fa0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     fa2:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
     fa4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     fa6:	4c 2d       	mov	r20, r12
     fa8:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     faa:	9e 01       	movw	r18, r28
     fac:	2f 5f       	subi	r18, 0xFF	; 255
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	68 2f       	mov	r22, r24
     fb2:	79 2f       	mov	r23, r25
     fb4:	c7 01       	movw	r24, r14
     fb6:	09 95       	icall
     fb8:	be c0       	rjmp	.+380    	; 0x1136 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
     fba:	62 30       	cpi	r22, 0x02	; 2
     fbc:	71 05       	cpc	r23, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <midi_input_callbacks+0x7e>
     fc0:	55 c0       	rjmp	.+170    	; 0x106c <midi_input_callbacks+0x128>
     fc2:	63 30       	cpi	r22, 0x03	; 3
     fc4:	71 05       	cpc	r23, r1
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <midi_input_callbacks+0x8e>
     fc8:	61 30       	cpi	r22, 0x01	; 1
     fca:	71 05       	cpc	r23, r1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <midi_input_callbacks+0x8c>
     fce:	a1 c0       	rjmp	.+322    	; 0x1112 <midi_input_callbacks+0x1ce>
     fd0:	88 c0       	rjmp	.+272    	; 0x10e2 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     fd2:	84 2f       	mov	r24, r20
     fd4:	80 7f       	andi	r24, 0xF0	; 240
     fd6:	80 3a       	cpi	r24, 0xA0	; 160
     fd8:	f1 f0       	breq	.+60     	; 0x1016 <midi_input_callbacks+0xd2>
     fda:	28 f4       	brcc	.+10     	; 0xfe6 <midi_input_callbacks+0xa2>
     fdc:	80 38       	cpi	r24, 0x80	; 128
     fde:	a9 f0       	breq	.+42     	; 0x100a <midi_input_callbacks+0xc6>
     fe0:	80 39       	cpi	r24, 0x90	; 144
     fe2:	69 f0       	breq	.+26     	; 0xffe <midi_input_callbacks+0xba>
     fe4:	2f c0       	rjmp	.+94     	; 0x1044 <midi_input_callbacks+0x100>
     fe6:	80 3e       	cpi	r24, 0xE0	; 224
     fe8:	e1 f0       	breq	.+56     	; 0x1022 <midi_input_callbacks+0xde>
     fea:	80 3f       	cpi	r24, 0xF0	; 240
     fec:	01 f1       	breq	.+64     	; 0x102e <midi_input_callbacks+0xea>
     fee:	80 3b       	cpi	r24, 0xB0	; 176
     ff0:	49 f5       	brne	.+82     	; 0x1044 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
     ff2:	d7 01       	movw	r26, r14
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	ed 91       	ld	r30, X+
     ff8:	fc 91       	ld	r31, X
     ffa:	13 97       	sbiw	r26, 0x03	; 3
              break;
     ffc:	25 c0       	rjmp	.+74     	; 0x1048 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     ffe:	d7 01       	movw	r26, r14
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	ed 91       	ld	r30, X+
    1004:	fc 91       	ld	r31, X
    1006:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1008:	1f c0       	rjmp	.+62     	; 0x1048 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    100a:	d7 01       	movw	r26, r14
    100c:	16 96       	adiw	r26, 0x06	; 6
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1014:	19 c0       	rjmp	.+50     	; 0x1048 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1016:	d7 01       	movw	r26, r14
    1018:	18 96       	adiw	r26, 0x08	; 8
    101a:	ed 91       	ld	r30, X+
    101c:	fc 91       	ld	r31, X
    101e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1020:	13 c0       	rjmp	.+38     	; 0x1048 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1022:	d7 01       	movw	r26, r14
    1024:	1a 96       	adiw	r26, 0x0a	; 10
    1026:	ed 91       	ld	r30, X+
    1028:	fc 91       	ld	r31, X
    102a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    102e:	42 3f       	cpi	r20, 0xF2	; 242
    1030:	09 f0       	breq	.+2      	; 0x1034 <midi_input_callbacks+0xf0>
    1032:	74 c0       	rjmp	.+232    	; 0x111c <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1034:	d7 01       	movw	r26, r14
    1036:	1c 96       	adiw	r26, 0x0c	; 12
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	41 f4       	brne	.+16     	; 0x1052 <midi_input_callbacks+0x10e>
    1042:	6c c0       	rjmp	.+216    	; 0x111c <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1044:	e0 e0       	ldi	r30, 0x00	; 0
    1046:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	09 f4       	brne	.+2      	; 0x104e <midi_input_callbacks+0x10a>
    104c:	67 c0       	rjmp	.+206    	; 0x111c <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    104e:	12 3f       	cpi	r17, 0xF2	; 242
    1050:	31 f4       	brne	.+12     	; 0x105e <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1052:	2a 2d       	mov	r18, r10
    1054:	4b 2d       	mov	r20, r11
    1056:	62 ef       	ldi	r22, 0xF2	; 242
    1058:	c7 01       	movw	r24, r14
    105a:	09 95       	icall
    105c:	6c c0       	rjmp	.+216    	; 0x1136 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    105e:	2a 2d       	mov	r18, r10
    1060:	4b 2d       	mov	r20, r11
    1062:	61 2f       	mov	r22, r17
    1064:	6f 70       	andi	r22, 0x0F	; 15
    1066:	c7 01       	movw	r24, r14
    1068:	09 95       	icall
    106a:	65 c0       	rjmp	.+202    	; 0x1136 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    106c:	84 2f       	mov	r24, r20
    106e:	80 7f       	andi	r24, 0xF0	; 240
    1070:	80 3d       	cpi	r24, 0xD0	; 208
    1072:	51 f0       	breq	.+20     	; 0x1088 <midi_input_callbacks+0x144>
    1074:	80 3f       	cpi	r24, 0xF0	; 240
    1076:	71 f0       	breq	.+28     	; 0x1094 <midi_input_callbacks+0x150>
    1078:	80 3c       	cpi	r24, 0xC0	; 192
    107a:	01 f5       	brne	.+64     	; 0x10bc <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    107c:	d7 01       	movw	r26, r14
    107e:	1e 96       	adiw	r26, 0x0e	; 14
    1080:	ed 91       	ld	r30, X+
    1082:	fc 91       	ld	r31, X
    1084:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1086:	1c c0       	rjmp	.+56     	; 0x10c0 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1088:	d7 01       	movw	r26, r14
    108a:	50 96       	adiw	r26, 0x10	; 16
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1092:	16 c0       	rjmp	.+44     	; 0x10c0 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1094:	43 3f       	cpi	r20, 0xF3	; 243
    1096:	41 f4       	brne	.+16     	; 0x10a8 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1098:	d7 01       	movw	r26, r14
    109a:	52 96       	adiw	r26, 0x12	; 18
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    10a2:	30 97       	sbiw	r30, 0x00	; 0
    10a4:	99 f4       	brne	.+38     	; 0x10cc <midi_input_callbacks+0x188>
    10a6:	3a c0       	rjmp	.+116    	; 0x111c <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    10a8:	41 3f       	cpi	r20, 0xF1	; 241
    10aa:	c1 f5       	brne	.+112    	; 0x111c <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    10ac:	d7 01       	movw	r26, r14
    10ae:	54 96       	adiw	r26, 0x14	; 20
    10b0:	ed 91       	ld	r30, X+
    10b2:	fc 91       	ld	r31, X
    10b4:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	49 f4       	brne	.+18     	; 0x10cc <midi_input_callbacks+0x188>
    10ba:	30 c0       	rjmp	.+96     	; 0x111c <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    10bc:	e0 e0       	ldi	r30, 0x00	; 0
    10be:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    10c0:	30 97       	sbiw	r30, 0x00	; 0
    10c2:	61 f1       	breq	.+88     	; 0x111c <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    10c4:	81 2f       	mov	r24, r17
    10c6:	8d 7f       	andi	r24, 0xFD	; 253
    10c8:	81 3f       	cpi	r24, 0xF1	; 241
    10ca:	29 f4       	brne	.+10     	; 0x10d6 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    10cc:	4b 2d       	mov	r20, r11
    10ce:	61 2f       	mov	r22, r17
    10d0:	c7 01       	movw	r24, r14
    10d2:	09 95       	icall
    10d4:	30 c0       	rjmp	.+96     	; 0x1136 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    10d6:	4b 2d       	mov	r20, r11
    10d8:	61 2f       	mov	r22, r17
    10da:	6f 70       	andi	r22, 0x0F	; 15
    10dc:	c7 01       	movw	r24, r14
    10de:	09 95       	icall
    10e0:	2a c0       	rjmp	.+84     	; 0x1136 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    10e2:	84 2f       	mov	r24, r20
    10e4:	0e 94 0a 07 	call	0xe14	; 0xe14 <midi_is_realtime>
    10e8:	88 23       	and	r24, r24
    10ea:	31 f0       	breq	.+12     	; 0x10f8 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    10ec:	d7 01       	movw	r26, r14
    10ee:	56 96       	adiw	r26, 0x16	; 22
    10f0:	ed 91       	ld	r30, X+
    10f2:	fc 91       	ld	r31, X
    10f4:	57 97       	sbiw	r26, 0x17	; 23
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    10f8:	16 3f       	cpi	r17, 0xF6	; 246
    10fa:	81 f4       	brne	.+32     	; 0x111c <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    10fc:	d7 01       	movw	r26, r14
    10fe:	58 96       	adiw	r26, 0x18	; 24
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	49 f0       	breq	.+18     	; 0x111c <midi_input_callbacks+0x1d8>
            func(device, byte0);
    110a:	61 2f       	mov	r22, r17
    110c:	c7 01       	movw	r24, r14
    110e:	09 95       	icall
    1110:	12 c0       	rjmp	.+36     	; 0x1136 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1112:	64 30       	cpi	r22, 0x04	; 4
    1114:	71 05       	cpc	r23, r1
    1116:	10 f0       	brcs	.+4      	; 0x111c <midi_input_callbacks+0x1d8>
          cnt = 0;
    1118:	c1 2c       	mov	r12, r1
    111a:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    111c:	d7 01       	movw	r26, r14
    111e:	5c 96       	adiw	r26, 0x1c	; 28
    1120:	ed 91       	ld	r30, X+
    1122:	fc 91       	ld	r31, X
    1124:	5d 97       	sbiw	r26, 0x1d	; 29
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	31 f0       	breq	.+12     	; 0x1136 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    112a:	0a 2d       	mov	r16, r10
    112c:	2b 2d       	mov	r18, r11
    112e:	41 2f       	mov	r20, r17
    1130:	b6 01       	movw	r22, r12
    1132:	c7 01       	movw	r24, r14
    1134:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1136:	d7 01       	movw	r26, r14
    1138:	5e 96       	adiw	r26, 0x1e	; 30
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	5f 97       	sbiw	r26, 0x1f	; 31
    1140:	30 97       	sbiw	r30, 0x00	; 0
    1142:	31 f0       	breq	.+12     	; 0x1150 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1144:	0a 2d       	mov	r16, r10
    1146:	2b 2d       	mov	r18, r11
    1148:	41 2f       	mov	r20, r17
    114a:	b6 01       	movw	r22, r12
    114c:	c7 01       	movw	r24, r14
    114e:	09 95       	icall
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	08 95       	ret

0000116c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    117a:	86 2f       	mov	r24, r22
    117c:	0e 94 0a 07 	call	0xe14	; 0xe14 <midi_is_realtime>
    1180:	88 23       	and	r24, r24
    1182:	69 f0       	breq	.+26     	; 0x119e <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1184:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    118a:	00 e0       	ldi	r16, 0x00	; 0
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	41 2f       	mov	r20, r17
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 a2 07 	call	0xf44	; 0xf44 <midi_input_callbacks>
    device->input_state = state;
    119a:	fd a2       	std	Y+37, r15	; 0x25
    119c:	a4 c0       	rjmp	.+328    	; 0x12e6 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    119e:	81 2f       	mov	r24, r17
    11a0:	0e 94 06 07 	call	0xe0c	; 0xe0c <midi_is_statusbyte>
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <midi_process_byte+0x3e>
    11a8:	5d c0       	rjmp	.+186    	; 0x1264 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    11aa:	8d a1       	ldd	r24, Y+37	; 0x25
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	29 f0       	breq	.+10     	; 0x11ba <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    11b0:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9f a3       	std	Y+39, r25	; 0x27
    11b8:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    11ba:	81 2f       	mov	r24, r17
    11bc:	0e 94 10 07 	call	0xe20	; 0xe20 <midi_packet_length>
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <midi_process_byte+0x64>
    11c4:	b8 f0       	brcs	.+46     	; 0x11f4 <midi_process_byte+0x88>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	79 f0       	breq	.+30     	; 0x11e8 <midi_process_byte+0x7c>
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	81 f0       	breq	.+32     	; 0x11ee <midi_process_byte+0x82>
    11ce:	46 c0       	rjmp	.+140    	; 0x125c <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    11d4:	00 e0       	ldi	r16, 0x00	; 0
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	41 2f       	mov	r20, r17
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	ce 01       	movw	r24, r28
    11e0:	0e 94 a2 07 	call	0xf44	; 0xf44 <midi_input_callbacks>
        device->input_state = IDLE;
    11e4:	1d a2       	std	Y+37, r1	; 0x25
        break;
    11e6:	7f c0       	rjmp	.+254    	; 0x12e6 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	8d a3       	std	Y+37, r24	; 0x25
        break;
    11ec:	7c c0       	rjmp	.+248    	; 0x12e6 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	8d a3       	std	Y+37, r24	; 0x25
        break;
    11f2:	79 c0       	rjmp	.+242    	; 0x12e6 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    11f4:	10 3f       	cpi	r17, 0xF0	; 240
    11f6:	19 f0       	breq	.+6      	; 0x11fe <midi_process_byte+0x92>
    11f8:	17 3f       	cpi	r17, 0xF7	; 247
    11fa:	51 f0       	breq	.+20     	; 0x1210 <midi_process_byte+0xa4>
    11fc:	2b c0       	rjmp	.+86     	; 0x1254 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    1202:	80 ef       	ldi	r24, 0xF0	; 240
    1204:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9f a3       	std	Y+39, r25	; 0x27
    120c:	8e a3       	std	Y+38, r24	; 0x26
            break;
    120e:	6b c0       	rjmp	.+214    	; 0x12e6 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1210:	4e a1       	ldd	r20, Y+38	; 0x26
    1212:	5f a1       	ldd	r21, Y+39	; 0x27
    1214:	9a 01       	movw	r18, r20
    1216:	ab ea       	ldi	r26, 0xAB	; 171
    1218:	ba ea       	ldi	r27, 0xAA	; 170
    121a:	0e 94 ca 09 	call	0x1394	; 0x1394 <__umulhisi3>
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	9c 01       	movw	r18, r24
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	fa 01       	movw	r30, r20
    122e:	e8 1b       	sub	r30, r24
    1230:	f9 0b       	sbc	r31, r25
    1232:	ec 0f       	add	r30, r28
    1234:	fd 1f       	adc	r31, r29
    1236:	87 ef       	ldi	r24, 0xF7	; 247
    1238:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    123a:	ba 01       	movw	r22, r20
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	7f a3       	std	Y+39, r23	; 0x27
    1242:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1244:	0c a1       	ldd	r16, Y+36	; 0x24
    1246:	2b a1       	ldd	r18, Y+35	; 0x23
    1248:	4a a1       	ldd	r20, Y+34	; 0x22
    124a:	ce 01       	movw	r24, r28
    124c:	0e 94 a2 07 	call	0xf44	; 0xf44 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1250:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1252:	49 c0       	rjmp	.+146    	; 0x12e6 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1254:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1256:	1f a2       	std	Y+39, r1	; 0x27
    1258:	1e a2       	std	Y+38, r1	; 0x26
    125a:	45 c0       	rjmp	.+138    	; 0x12e6 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    125c:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    125e:	1f a2       	std	Y+39, r1	; 0x27
    1260:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1262:	41 c0       	rjmp	.+130    	; 0x12e6 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1264:	ed a1       	ldd	r30, Y+37	; 0x25
    1266:	ee 23       	and	r30, r30
    1268:	f1 f1       	breq	.+124    	; 0x12e6 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    126a:	4e a1       	ldd	r20, Y+38	; 0x26
    126c:	5f a1       	ldd	r21, Y+39	; 0x27
    126e:	9a 01       	movw	r18, r20
    1270:	ab ea       	ldi	r26, 0xAB	; 171
    1272:	ba ea       	ldi	r27, 0xAA	; 170
    1274:	0e 94 ca 09 	call	0x1394	; 0x1394 <__umulhisi3>
    1278:	96 95       	lsr	r25
    127a:	87 95       	ror	r24
    127c:	9c 01       	movw	r18, r24
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	82 0f       	add	r24, r18
    1284:	93 1f       	adc	r25, r19
    1286:	9a 01       	movw	r18, r20
    1288:	28 1b       	sub	r18, r24
    128a:	39 0b       	sbc	r19, r25
    128c:	de 01       	movw	r26, r28
    128e:	a2 0f       	add	r26, r18
    1290:	b3 1f       	adc	r27, r19
    1292:	92 96       	adiw	r26, 0x22	; 34
    1294:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1296:	ba 01       	movw	r22, r20
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	7f a3       	std	Y+39, r23	; 0x27
    129e:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    12a0:	21 30       	cpi	r18, 0x01	; 1
    12a2:	31 05       	cpc	r19, r1
    12a4:	89 f0       	breq	.+34     	; 0x12c8 <midi_process_byte+0x15c>
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	e9 f4       	brne	.+58     	; 0x12e6 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    12ac:	0c a1       	ldd	r16, Y+36	; 0x24
    12ae:	2b a1       	ldd	r18, Y+35	; 0x23
    12b0:	4a a1       	ldd	r20, Y+34	; 0x22
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 a2 07 	call	0xf44	; 0xf44 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    12b8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	a1 f0       	breq	.+40     	; 0x12e6 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9f a3       	std	Y+39, r25	; 0x27
    12c4:	8e a3       	std	Y+38, r24	; 0x26
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    12c8:	e2 30       	cpi	r30, 0x02	; 2
    12ca:	69 f4       	brne	.+26     	; 0x12e6 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    12cc:	00 e0       	ldi	r16, 0x00	; 0
    12ce:	2b a1       	ldd	r18, Y+35	; 0x23
    12d0:	4a a1       	ldd	r20, Y+34	; 0x22
    12d2:	ce 01       	movw	r24, r28
    12d4:	0e 94 a2 07 	call	0xf44	; 0xf44 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    12d8:	8d a1       	ldd	r24, Y+37	; 0x25
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9f a3       	std	Y+39, r25	; 0x27
    12e4:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	08 95       	ret

000012f2 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1304:	dc 01       	movw	r26, r24
    1306:	90 96       	adiw	r26, 0x20	; 32
    1308:	ed 91       	ld	r30, X+
    130a:	fc 91       	ld	r31, X
    130c:	91 97       	sbiw	r26, 0x21	; 33
    130e:	30 97       	sbiw	r30, 0x00	; 0
    1310:	09 f0       	breq	.+2      	; 0x1314 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1312:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1314:	86 01       	movw	r16, r12
    1316:	08 51       	subi	r16, 0x18	; 24
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	c8 01       	movw	r24, r16
    131c:	0e 94 be 06 	call	0xd7c	; 0xd7c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1320:	e8 2e       	mov	r14, r24
    1322:	f1 2c       	mov	r15, r1
    1324:	e1 14       	cp	r14, r1
    1326:	f1 04       	cpc	r15, r1
    1328:	91 f0       	breq	.+36     	; 0x134e <midi_device_process+0x5c>
    132a:	c0 e0       	ldi	r28, 0x00	; 0
    132c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	c8 01       	movw	r24, r16
    1332:	0e 94 d4 06 	call	0xda8	; 0xda8 <bytequeue_get>
    1336:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1338:	c6 01       	movw	r24, r12
    133a:	0e 94 b6 08 	call	0x116c	; 0x116c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	c8 01       	movw	r24, r16
    1342:	0e 94 e6 06 	call	0xdcc	; 0xdcc <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1346:	21 96       	adiw	r28, 0x01	; 1
    1348:	ce 15       	cp	r28, r14
    134a:	df 05       	cpc	r29, r15
    134c:	81 f7       	brne	.-32     	; 0x132e <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	08 95       	ret

00001360 <__divmodhi4>:
    1360:	97 fb       	bst	r25, 7
    1362:	07 2e       	mov	r0, r23
    1364:	16 f4       	brtc	.+4      	; 0x136a <__divmodhi4+0xa>
    1366:	00 94       	com	r0
    1368:	07 d0       	rcall	.+14     	; 0x1378 <__divmodhi4_neg1>
    136a:	77 fd       	sbrc	r23, 7
    136c:	09 d0       	rcall	.+18     	; 0x1380 <__divmodhi4_neg2>
    136e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__udivmodhi4>
    1372:	07 fc       	sbrc	r0, 7
    1374:	05 d0       	rcall	.+10     	; 0x1380 <__divmodhi4_neg2>
    1376:	3e f4       	brtc	.+14     	; 0x1386 <__divmodhi4_exit>

00001378 <__divmodhi4_neg1>:
    1378:	90 95       	com	r25
    137a:	81 95       	neg	r24
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	08 95       	ret

00001380 <__divmodhi4_neg2>:
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255

00001386 <__divmodhi4_exit>:
    1386:	08 95       	ret

00001388 <__tablejump2__>:
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	05 90       	lpm	r0, Z+
    138e:	f4 91       	lpm	r31, Z
    1390:	e0 2d       	mov	r30, r0
    1392:	09 94       	ijmp

00001394 <__umulhisi3>:
    1394:	a2 9f       	mul	r26, r18
    1396:	b0 01       	movw	r22, r0
    1398:	b3 9f       	mul	r27, r19
    139a:	c0 01       	movw	r24, r0
    139c:	a3 9f       	mul	r26, r19
    139e:	70 0d       	add	r23, r0
    13a0:	81 1d       	adc	r24, r1
    13a2:	11 24       	eor	r1, r1
    13a4:	91 1d       	adc	r25, r1
    13a6:	b2 9f       	mul	r27, r18
    13a8:	70 0d       	add	r23, r0
    13aa:	81 1d       	adc	r24, r1
    13ac:	11 24       	eor	r1, r1
    13ae:	91 1d       	adc	r25, r1
    13b0:	08 95       	ret

000013b2 <__udivmodhi4>:
    13b2:	aa 1b       	sub	r26, r26
    13b4:	bb 1b       	sub	r27, r27
    13b6:	51 e1       	ldi	r21, 0x11	; 17
    13b8:	07 c0       	rjmp	.+14     	; 0x13c8 <__udivmodhi4_ep>

000013ba <__udivmodhi4_loop>:
    13ba:	aa 1f       	adc	r26, r26
    13bc:	bb 1f       	adc	r27, r27
    13be:	a6 17       	cp	r26, r22
    13c0:	b7 07       	cpc	r27, r23
    13c2:	10 f0       	brcs	.+4      	; 0x13c8 <__udivmodhi4_ep>
    13c4:	a6 1b       	sub	r26, r22
    13c6:	b7 0b       	sbc	r27, r23

000013c8 <__udivmodhi4_ep>:
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	5a 95       	dec	r21
    13ce:	a9 f7       	brne	.-22     	; 0x13ba <__udivmodhi4_loop>
    13d0:	80 95       	com	r24
    13d2:	90 95       	com	r25
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	08 95       	ret

000013da <_exit>:
    13da:	f8 94       	cli

000013dc <__stop_program>:
    13dc:	ff cf       	rjmp	.-2      	; 0x13dc <__stop_program>
