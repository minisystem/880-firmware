
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  000015cc  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e9  00800258  00800258  000017b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ac0  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131b  00000000  00000000  000066e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cf  00000000  00000000  00007a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  00008dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fdf  00000000  00000000  000097f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f4f  00000000  00000000  0000a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000c71e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	30 08       	sbc	r3, r0
      b6:	2e 08       	sbc	r2, r14
      b8:	30 08       	sbc	r3, r0
      ba:	32 08       	sbc	r3, r2
      bc:	32 08       	sbc	r3, r2
      be:	38 08       	sbc	r3, r8
      c0:	32 08       	sbc	r3, r2
      c2:	38 08       	sbc	r3, r8
      c4:	38 08       	sbc	r3, r8
      c6:	38 08       	sbc	r3, r8
      c8:	38 08       	sbc	r3, r8
      ca:	38 08       	sbc	r3, r8
      cc:	32 08       	sbc	r3, r2
      ce:	38 08       	sbc	r3, r8
      d0:	38 08       	sbc	r3, r8

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ec ec       	ldi	r30, 0xCC	; 204
      e6:	f5 e1       	ldi	r31, 0x15	; 21
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a1 34       	cpi	r26, 0x41	; 65
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 48 05 	call	0xa90	; 0xa90 <main>
     108:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     238:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29

	clear_all_trigs();
     284:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     288:	05 e0       	ldi	r16, 0x05	; 5
     28a:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     290:	0f 2e       	mov	r0, r31
     292:	fa e1       	ldi	r31, 0x1A	; 26
     294:	af 2e       	mov	r10, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	bf 2e       	mov	r11, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	0f 2e       	mov	r0, r31
     29e:	f9 e1       	ldi	r31, 0x19	; 25
     2a0:	ef 2e       	mov	r14, r31
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	ff 2e       	mov	r15, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f1 e5       	ldi	r31, 0x51	; 81
     2ac:	9f 2e       	mov	r9, r31
     2ae:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f8 e6       	ldi	r31, 0x68	; 104
     2b4:	cf 2e       	mov	r12, r31
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	df 2e       	mov	r13, r31
     2ba:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2bc:	d5 01       	movw	r26, r10
     2be:	ec 91       	ld	r30, X
     2c0:	e6 95       	lsr	r30
     2c2:	ef 70       	andi	r30, 0x0F	; 15
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	d7 01       	movw	r26, r14
     2c8:	8c 91       	ld	r24, X
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	98 9e       	mul	r9, r24
     2d2:	e0 0d       	add	r30, r0
     2d4:	f1 1d       	adc	r31, r1
     2d6:	11 24       	eor	r1, r1
     2d8:	eb 58       	subi	r30, 0x8B	; 139
     2da:	fc 4f       	sbci	r31, 0xFC	; 252
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	93 81       	ldd	r25, Z+3	; 0x03
     2e0:	0c 2e       	mov	r0, r28
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <trigger_step+0x7a>
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <trigger_step+0x76>
     2ec:	80 ff       	sbrs	r24, 0
     2ee:	3a c0       	rjmp	.+116    	; 0x364 <trigger_step+0xf6>
			turn_on(drum_hit[i].led_index);
     2f0:	f8 01       	movw	r30, r16
     2f2:	80 81       	ld	r24, Z
     2f4:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     2f8:	de 01       	movw	r26, r28
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	ac 0f       	add	r26, r28
     300:	bd 1f       	adc	r27, r29
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	a0 50       	subi	r26, 0x00	; 0
     308:	bf 4f       	sbci	r27, 0xFF	; 255
     30a:	ec 91       	ld	r30, X
     30c:	8e 2f       	mov	r24, r30
     30e:	88 1f       	adc	r24, r24
     310:	88 27       	eor	r24, r24
     312:	88 1f       	adc	r24, r24
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	ec 91       	ld	r30, X
     318:	e7 70       	andi	r30, 0x07	; 7
     31a:	ee 0f       	add	r30, r30
     31c:	e8 2b       	or	r30, r24
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e8 59       	subi	r30, 0x98	; 152
     322:	fd 4f       	sbci	r31, 0xFD	; 253
     324:	d8 01       	movw	r26, r16
     326:	13 97       	sbiw	r26, 0x03	; 3
     328:	9c 91       	ld	r25, X
     32a:	80 81       	ld	r24, Z
     32c:	89 2b       	or	r24, r25
     32e:	80 83       	st	Z, r24
     330:	f8 01       	movw	r30, r16
     332:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     334:	80 81       	ld	r24, Z
     336:	8f 3f       	cpi	r24, 0xFF	; 255
     338:	a9 f0       	breq	.+42     	; 0x364 <trigger_step+0xf6>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     33a:	d6 01       	movw	r26, r12
     33c:	13 96       	adiw	r26, 0x03	; 3
     33e:	2c 91       	ld	r18, X
     340:	13 97       	sbiw	r26, 0x03	; 3
     342:	fe 01       	movw	r30, r28
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	ec 0f       	add	r30, r28
     34a:	fd 1f       	adc	r31, r29
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 5f       	subi	r30, 0xFC	; 252
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	90 81       	ld	r25, Z
     356:	91 70       	andi	r25, 0x01	; 1
     358:	91 95       	neg	r25
     35a:	92 27       	eor	r25, r18
     35c:	89 23       	and	r24, r25
     35e:	82 27       	eor	r24, r18
     360:	13 96       	adiw	r26, 0x03	; 3
     362:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     364:	21 96       	adiw	r28, 0x01	; 1
     366:	0a 5f       	subi	r16, 0xFA	; 250
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	c0 31       	cpi	r28, 0x10	; 16
     36c:	d1 05       	cpc	r29, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <trigger_step+0x104>
     370:	a5 cf       	rjmp	.-182    	; 0x2bc <trigger_step+0x4e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	08 95       	ret

0000038a <__vector_14>:
#include "clock.h"
#include "sequencer.h"



ISR (TIMER0_COMPA_vect) {
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	8f 93       	push	r24
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     39a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     39c:	ee e6       	ldi	r30, 0x6E	; 110
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	8d 7f       	andi	r24, 0xFD	; 253
     3a4:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	sequencer.trigger_finished = 1;
     3a6:	e9 e1       	ldi	r30, 0x19	; 25
     3a8:	f4 e0       	ldi	r31, 0x04	; 4
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	80 64       	ori	r24, 0x40	; 64
     3ae:	81 83       	std	Z+1, r24	; 0x01
	
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	8f 91       	pop	r24
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
	
	
	if (sequencer.START) { 
     3e6:	80 91 76 03 	lds	r24, 0x0376
     3ea:	81 ff       	sbrs	r24, 1
     3ec:	32 c0       	rjmp	.+100    	; 0x452 <__vector_11+0x92>
		
		if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     3ee:	e3 e7       	ldi	r30, 0x73	; 115
     3f0:	f2 e0       	ldi	r31, 0x02	; 2
     3f2:	80 81       	ld	r24, Z
     3f4:	86 95       	lsr	r24
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	98 13       	cpse	r25, r24
     3fa:	65 c0       	rjmp	.+202    	; 0x4c6 <__vector_11+0x106>
			
			spi_data[1] = sequencer.step_led_mask[sequencer.current_inst];
     3fc:	cd e1       	ldi	r28, 0x1D	; 29
     3fe:	d4 e0       	ldi	r29, 0x04	; 4
     400:	e8 81       	ld	r30, Y
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	e2 5e       	subi	r30, 0xE2	; 226
     40a:	fb 4f       	sbci	r31, 0xFB	; 251
     40c:	90 81       	ld	r25, Z
     40e:	81 81       	ldd	r24, Z+1	; 0x01
     410:	e8 e6       	ldi	r30, 0x68	; 104
     412:	f2 e0       	ldi	r31, 0x02	; 2
     414:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.step_led_mask[sequencer.current_inst] >> 8;
     416:	80 83       	st	Z, r24
			spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     418:	90 91 d6 01 	lds	r25, 0x01D6
     41c:	80 91 d3 01 	lds	r24, 0x01D3
     420:	89 2b       	or	r24, r25
     422:	80 95       	com	r24
     424:	95 81       	ldd	r25, Z+5	; 0x05
     426:	89 23       	and	r24, r25
			spi_data[5] |= sequencer.var_led_mask; 
     428:	90 91 40 04 	lds	r25, 0x0440
     42c:	89 2b       	or	r24, r25
     42e:	85 83       	std	Z+5, r24	; 0x05
			turn_off_all_inst_leds();
     430:	0e 94 e5 02 	call	0x5ca	; 0x5ca <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     434:	88 81       	ld	r24, Y
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	e8 0f       	add	r30, r24
     440:	f9 1f       	adc	r31, r25
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	e0 50       	subi	r30, 0x00	; 0
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	85 81       	ldd	r24, Z+5	; 0x05
     44c:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
     450:	3a c0       	rjmp	.+116    	; 0x4c6 <__vector_11+0x106>
		}

	} else {
		spi_data[1] = 0;
     452:	e8 e6       	ldi	r30, 0x68	; 104
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	11 82       	std	Z+1, r1	; 0x01
		spi_data[0] = 0;
     458:	10 82       	st	Z, r1
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     45a:	30 91 d3 01 	lds	r19, 0x01D3
     45e:	20 91 d6 01 	lds	r18, 0x01D6
     462:	82 2f       	mov	r24, r18
     464:	83 2b       	or	r24, r19
     466:	80 95       	com	r24
     468:	95 81       	ldd	r25, Z+5	; 0x05
     46a:	89 23       	and	r24, r25
     46c:	85 83       	std	Z+5, r24	; 0x05
		switch (sequencer.variation_mode) {
     46e:	80 91 19 04 	lds	r24, 0x0419
     472:	86 95       	lsr	r24
     474:	83 70       	andi	r24, 0x03	; 3
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	91 05       	cpc	r25, r1
     47c:	41 f0       	breq	.+16     	; 0x48e <__vector_11+0xce>
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	91 05       	cpc	r25, r1
     482:	11 f0       	breq	.+4      	; 0x488 <__vector_11+0xc8>
     484:	89 2b       	or	r24, r25
     486:	29 f4       	brne	.+10     	; 0x492 <__vector_11+0xd2>
					
			case VAR_A: case VAR_AB:
			sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     488:	30 93 40 04 	sts	0x0440, r19
			break;
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__vector_11+0xd2>
					
			case VAR_B:
			sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     48e:	20 93 40 04 	sts	0x0440, r18
			break;
					
		}
		if (internal_clock.beat_counter <2) { //1/4 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     492:	80 91 75 02 	lds	r24, 0x0275
     496:	83 70       	andi	r24, 0x03	; 3
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	02 97       	sbiw	r24, 0x02	; 2
     49c:	6c f4       	brge	.+26     	; 0x4b8 <__vector_11+0xf8>
			

			if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	
     49e:	80 91 19 04 	lds	r24, 0x0419
     4a2:	86 70       	andi	r24, 0x06	; 6
     4a4:	84 30       	cpi	r24, 0x04	; 4
     4a6:	29 f4       	brne	.+10     	; 0x4b2 <__vector_11+0xf2>
     4a8:	e0 e4       	ldi	r30, 0x40	; 64
     4aa:	f4 e0       	ldi	r31, 0x04	; 4
     4ac:	80 81       	ld	r24, Z
     4ae:	28 2b       	or	r18, r24
     4b0:	20 83       	st	Z, r18
					

			
			turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
		}
		spi_data[5] |= sequencer.var_led_mask;
     4b8:	e8 e6       	ldi	r30, 0x68	; 104
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	90 91 40 04 	lds	r25, 0x0440
     4c0:	85 81       	ldd	r24, Z+5	; 0x05
     4c2:	89 2b       	or	r24, r25
     4c4:	85 83       	std	Z+5, r24	; 0x05
		
	} 
	
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     4c6:	e3 e7       	ldi	r30, 0x73	; 115
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
     4ca:	81 81       	ldd	r24, Z+1	; 0x01
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	81 83       	std	Z+1, r24	; 0x01
     4d0:	90 81       	ld	r25, Z
     4d2:	89 13       	cpse	r24, r25
     4d4:	17 c0       	rjmp	.+46     	; 0x504 <__vector_11+0x144>
	{
		sequencer.next_step_flag = 1;
     4d6:	e9 e1       	ldi	r30, 0x19	; 25
     4d8:	f4 e0       	ldi	r31, 0x04	; 4
     4da:	81 81       	ldd	r24, Z+1	; 0x01
     4dc:	80 62       	ori	r24, 0x20	; 32
		internal_clock.beat_counter++;
     4de:	a5 e7       	ldi	r26, 0x75	; 117
     4e0:	b2 e0       	ldi	r27, 0x02	; 2
     4e2:	9c 91       	ld	r25, X
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	29 0f       	add	r18, r25
     4e8:	23 70       	andi	r18, 0x03	; 3
     4ea:	9c 7f       	andi	r25, 0xFC	; 252
     4ec:	92 2b       	or	r25, r18
     4ee:	9c 93       	st	X, r25
		internal_clock.ppqn_counter = 0;
     4f0:	10 92 74 02 	sts	0x0274, r1
		sequencer.current_step++; //hopefully this will overflow from 15 to 0 - it does!
     4f4:	98 2f       	mov	r25, r24
     4f6:	96 95       	lsr	r25
     4f8:	9f 5f       	subi	r25, 0xFF	; 255
     4fa:	9f 70       	andi	r25, 0x0F	; 15
     4fc:	99 0f       	add	r25, r25
     4fe:	81 7e       	andi	r24, 0xE1	; 225
     500:	89 2b       	or	r24, r25
     502:	81 83       	std	Z+1, r24	; 0x01
	}
	
     504:	ff 91       	pop	r31
     506:	ef 91       	pop	r30
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	bf 91       	pop	r27
     50e:	af 91       	pop	r26
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	7f 91       	pop	r23
     516:	6f 91       	pop	r22
     518:	5f 91       	pop	r21
     51a:	4f 91       	pop	r20
     51c:	3f 91       	pop	r19
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	9c 01       	movw	r18, r24
     532:	22 0f       	add	r18, r18
     534:	33 1f       	adc	r19, r19
     536:	82 0f       	add	r24, r18
     538:	93 1f       	adc	r25, r19
     53a:	dc 01       	movw	r26, r24
     53c:	a8 59       	subi	r26, 0x98	; 152
     53e:	be 4f       	sbci	r27, 0xFE	; 254
     540:	2c 91       	ld	r18, X
     542:	e2 2f       	mov	r30, r18
     544:	ef 70       	andi	r30, 0x0F	; 15
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	e8 59       	subi	r30, 0x98	; 152
     54a:	fd 4f       	sbci	r31, 0xFD	; 253
     54c:	ec 01       	movw	r28, r24
     54e:	c9 59       	subi	r28, 0x99	; 153
     550:	de 4f       	sbci	r29, 0xFE	; 254
     552:	30 81       	ld	r19, Z
     554:	88 81       	ld	r24, Y
     556:	83 2b       	or	r24, r19
     558:	80 83       	st	Z, r24
	led[led_index].state = 1;
     55a:	82 2f       	mov	r24, r18
     55c:	80 61       	ori	r24, 0x10	; 16
     55e:	8c 93       	st	X, r24

}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <turn_off>:

void turn_off(uint8_t led_index) {
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9c 01       	movw	r18, r24
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	82 0f       	add	r24, r18
     574:	93 1f       	adc	r25, r19
     576:	dc 01       	movw	r26, r24
     578:	a8 59       	subi	r26, 0x98	; 152
     57a:	be 4f       	sbci	r27, 0xFE	; 254
     57c:	2c 91       	ld	r18, X
     57e:	e2 2f       	mov	r30, r18
     580:	ef 70       	andi	r30, 0x0F	; 15
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	e8 59       	subi	r30, 0x98	; 152
     586:	fd 4f       	sbci	r31, 0xFD	; 253
     588:	ec 01       	movw	r28, r24
     58a:	c9 59       	subi	r28, 0x99	; 153
     58c:	de 4f       	sbci	r29, 0xFE	; 254
     58e:	88 81       	ld	r24, Y
     590:	80 95       	com	r24
     592:	90 81       	ld	r25, Z
     594:	89 23       	and	r24, r25
     596:	80 83       	st	Z, r24
	led[led_index].state = 0;
     598:	82 2f       	mov	r24, r18
     59a:	8f 7e       	andi	r24, 0xEF	; 239
     59c:	8c 93       	st	X, r24
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	f9 01       	movw	r30, r18
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	2e 0f       	add	r18, r30
     5b0:	3f 1f       	adc	r19, r31
     5b2:	f9 01       	movw	r30, r18
     5b4:	e8 59       	subi	r30, 0x98	; 152
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	90 81       	ld	r25, Z
     5ba:	94 ff       	sbrs	r25, 4
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <toggle+0x20>
		
		turn_off(led_index);
     5be:	0e 94 b3 02 	call	0x566	; 0x566 <turn_off>
     5c2:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     5c4:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
     5c8:	08 95       	ret

000005ca <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     5ca:	e8 e6       	ldi	r30, 0x68	; 104
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	8f 70       	andi	r24, 0x0F	; 15
     5d2:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     5d4:	87 81       	ldd	r24, Z+7	; 0x07
     5d6:	80 72       	andi	r24, 0x20	; 32
     5d8:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     5da:	83 81       	ldd	r24, Z+3	; 0x03
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     5e0:	86 81       	ldd	r24, Z+6	; 0x06
     5e2:	8f 7c       	andi	r24, 0xCF	; 207
     5e4:	86 83       	std	Z+6, r24	; 0x06
     5e6:	08 95       	ret

000005e8 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     5e8:	08 95       	ret

000005ea <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     5ea:	08 95       	ret

000005ec <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     5ec:	40 31       	cpi	r20, 0x10	; 16
     5ee:	20 f4       	brcc	.+8      	; 0x5f8 <note_on_event+0xc>
     5f0:	62 2f       	mov	r22, r18
     5f2:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     5f4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     5f8:	08 95       	ret

000005fa <update_tempo>:
}

void update_tempo() {
	
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     5fa:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     5fe:	90 93 5c 02 	sts	0x025C, r25
     602:	80 93 5b 02 	sts	0x025B, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     606:	20 91 59 02 	lds	r18, 0x0259
     60a:	30 91 5a 02 	lds	r19, 0x025A
     60e:	82 1b       	sub	r24, r18
     610:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     612:	95 95       	asr	r25
     614:	87 95       	ror	r24
     616:	95 95       	asr	r25
     618:	87 95       	ror	r24
     61a:	82 0f       	add	r24, r18
     61c:	93 1f       	adc	r25, r19
     61e:	90 93 5a 02 	sts	0x025A, r25
     622:	80 93 59 02 	sts	0x0259, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     626:	23 e6       	ldi	r18, 0x63	; 99
     628:	34 e0       	ldi	r19, 0x04	; 4
     62a:	a9 01       	movw	r20, r18
     62c:	48 1b       	sub	r20, r24
     62e:	59 0b       	sbc	r21, r25
     630:	ca 01       	movw	r24, r20
     632:	e3 e7       	ldi	r30, 0x73	; 115
     634:	f2 e0       	ldi	r31, 0x02	; 2
     636:	54 83       	std	Z+4, r21	; 0x04
     638:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     63a:	25 81       	ldd	r18, Z+5	; 0x05
     63c:	36 81       	ldd	r19, Z+6	; 0x06
     63e:	42 17       	cp	r20, r18
     640:	53 07       	cpc	r21, r19
     642:	11 f0       	breq	.+4      	; 0x648 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     644:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;	
     648:	e3 e7       	ldi	r30, 0x73	; 115
     64a:	f2 e0       	ldi	r31, 0x02	; 2
     64c:	83 81       	ldd	r24, Z+3	; 0x03
     64e:	94 81       	ldd	r25, Z+4	; 0x04
     650:	96 83       	std	Z+6, r25	; 0x06
     652:	85 83       	std	Z+5, r24	; 0x05
     654:	08 95       	ret

00000656 <update_step_board>:
	
}

void update_step_board() {
     656:	af 92       	push	r10
     658:	bf 92       	push	r11
     65a:	cf 92       	push	r12
     65c:	df 92       	push	r13
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
     66a:	80 91 76 03 	lds	r24, 0x0376
     66e:	81 ff       	sbrs	r24, 1
     670:	b0 c0       	rjmp	.+352    	; 0x7d2 <update_step_board+0x17c>
     672:	80 91 75 03 	lds	r24, 0x0375
     676:	81 50       	subi	r24, 0x01	; 1
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	08 f0       	brcs	.+2      	; 0x67e <update_step_board+0x28>
     67c:	aa c0       	rjmp	.+340    	; 0x7d2 <update_step_board+0x17c>
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     67e:	80 91 1d 04 	lds	r24, 0x041D
     682:	80 31       	cpi	r24, 0x10	; 16
     684:	09 f0       	breq	.+2      	; 0x688 <update_step_board+0x32>
     686:	4f c0       	rjmp	.+158    	; 0x726 <update_step_board+0xd0>
     688:	c0 e0       	ldi	r28, 0x00	; 0
     68a:	d0 e0       	ldi	r29, 0x00	; 0
							
				if (button[i].state) {
								
					toggle(i);
					button[i].state ^= button[i].state;
					sequencer.pattern[sequencer.variation].accent[i] ^= 1<<0; //just toggle first bit
     68c:	0f 2e       	mov	r0, r31
     68e:	f9 e1       	ldi	r31, 0x19	; 25
     690:	cf 2e       	mov	r12, r31
     692:	f4 e0       	ldi	r31, 0x04	; 4
     694:	df 2e       	mov	r13, r31
     696:	f0 2d       	mov	r31, r0
     698:	0f 2e       	mov	r0, r31
     69a:	f1 e5       	ldi	r31, 0x51	; 81
     69c:	af 2e       	mov	r10, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	bb 24       	eor	r11, r11
     6a2:	b3 94       	inc	r11
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     6a4:	0f 2e       	mov	r0, r31
     6a6:	fd e1       	ldi	r31, 0x1D	; 29
     6a8:	ef 2e       	mov	r14, r31
     6aa:	f4 e0       	ldi	r31, 0x04	; 4
     6ac:	ff 2e       	mov	r15, r31
     6ae:	f0 2d       	mov	r31, r0
     6b0:	01 e0       	ldi	r16, 0x01	; 1
     6b2:	10 e0       	ldi	r17, 0x00	; 0
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
							
				if (button[i].state) {
     6b4:	fe 01       	movw	r30, r28
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ee 5e       	subi	r30, 0xEE	; 238
     6bc:	fd 4f       	sbci	r31, 0xFD	; 253
     6be:	80 81       	ld	r24, Z
     6c0:	86 ff       	sbrs	r24, 6
     6c2:	2c c0       	rjmp	.+88     	; 0x71c <update_step_board+0xc6>
								
					toggle(i);
     6c4:	8c 2f       	mov	r24, r28
     6c6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <toggle>
					button[i].state ^= button[i].state;
     6ca:	fe 01       	movw	r30, r28
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 5e       	subi	r30, 0xEE	; 238
     6d2:	fd 4f       	sbci	r31, 0xFD	; 253
     6d4:	80 81       	ld	r24, Z
     6d6:	8f 7b       	andi	r24, 0xBF	; 191
     6d8:	80 83       	st	Z, r24
					sequencer.pattern[sequencer.variation].accent[i] ^= 1<<0; //just toggle first bit
     6da:	d6 01       	movw	r26, r12
     6dc:	8c 91       	ld	r24, X
     6de:	81 70       	andi	r24, 0x01	; 1
     6e0:	fe 01       	movw	r30, r28
     6e2:	a8 9e       	mul	r10, r24
     6e4:	e0 0d       	add	r30, r0
     6e6:	f1 1d       	adc	r31, r1
     6e8:	11 24       	eor	r1, r1
     6ea:	e9 54       	subi	r30, 0x49	; 73
     6ec:	fc 4f       	sbci	r31, 0xFC	; 252
     6ee:	80 81       	ld	r24, Z
     6f0:	8b 25       	eor	r24, r11
     6f2:	80 83       	st	Z, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
     6f4:	d7 01       	movw	r26, r14
     6f6:	ec 91       	ld	r30, X
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	e2 5e       	subi	r30, 0xE2	; 226
     700:	fb 4f       	sbci	r31, 0xFB	; 251
     702:	80 81       	ld	r24, Z
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	98 01       	movw	r18, r16
     708:	0c 2e       	mov	r0, r28
     70a:	02 c0       	rjmp	.+4      	; 0x710 <update_step_board+0xba>
     70c:	22 0f       	add	r18, r18
     70e:	33 1f       	adc	r19, r19
     710:	0a 94       	dec	r0
     712:	e2 f7       	brpl	.-8      	; 0x70c <update_step_board+0xb6>
     714:	82 27       	eor	r24, r18
     716:	93 27       	eor	r25, r19
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	80 83       	st	Z, r24
	
	if (sequencer.START && (sequencer.mode == PATTERN_FIRST || sequencer.mode == PATTERN_SECOND)) {
		
		if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
				
			for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     71c:	21 96       	adiw	r28, 0x01	; 1
     71e:	c0 31       	cpi	r28, 0x10	; 16
     720:	d1 05       	cpc	r29, r1
     722:	41 f6       	brne	.-112    	; 0x6b4 <update_step_board+0x5e>
     724:	56 c0       	rjmp	.+172    	; 0x7d2 <update_step_board+0x17c>
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	d0 e0       	ldi	r29, 0x00	; 0
				
			if (button[i].state) {
					
				toggle(i);
				button[i].state ^= button[i].state;
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     72a:	0f 2e       	mov	r0, r31
     72c:	f9 e1       	ldi	r31, 0x19	; 25
     72e:	ef 2e       	mov	r14, r31
     730:	f4 e0       	ldi	r31, 0x04	; 4
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	0d e1       	ldi	r16, 0x1D	; 29
     738:	14 e0       	ldi	r17, 0x04	; 4
     73a:	0f 2e       	mov	r0, r31
     73c:	f1 e5       	ldi	r31, 0x51	; 81
     73e:	bf 2e       	mov	r11, r31
     740:	f0 2d       	mov	r31, r0
     742:	cc 24       	eor	r12, r12
     744:	c3 94       	inc	r12
     746:	d1 2c       	mov	r13, r1
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
				
			if (button[i].state) {
     748:	fe 01       	movw	r30, r28
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ee 5e       	subi	r30, 0xEE	; 238
     750:	fd 4f       	sbci	r31, 0xFD	; 253
     752:	80 81       	ld	r24, Z
     754:	86 ff       	sbrs	r24, 6
     756:	38 c0       	rjmp	.+112    	; 0x7c8 <update_step_board+0x172>
					
				toggle(i);
     758:	8c 2f       	mov	r24, r28
     75a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <toggle>
				button[i].state ^= button[i].state;
     75e:	fe 01       	movw	r30, r28
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	df 01       	movw	r26, r30
     766:	ae 5e       	subi	r26, 0xEE	; 238
     768:	bd 4f       	sbci	r27, 0xFD	; 253
     76a:	8c 91       	ld	r24, X
     76c:	8f 7b       	andi	r24, 0xBF	; 191
     76e:	8c 93       	st	X, r24
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
     770:	d7 01       	movw	r26, r14
     772:	2c 91       	ld	r18, X
     774:	d8 01       	movw	r26, r16
     776:	3c 91       	ld	r19, X
     778:	83 2f       	mov	r24, r19
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	21 70       	andi	r18, 0x01	; 1
     77e:	b2 9e       	mul	r11, r18
     780:	e0 0d       	add	r30, r0
     782:	f1 1d       	adc	r31, r1
     784:	11 24       	eor	r1, r1
     786:	eb 58       	subi	r30, 0x8B	; 139
     788:	fc 4f       	sbci	r31, 0xFC	; 252
     78a:	a6 01       	movw	r20, r12
     78c:	02 c0       	rjmp	.+4      	; 0x792 <update_step_board+0x13c>
     78e:	44 0f       	add	r20, r20
     790:	55 1f       	adc	r21, r21
     792:	3a 95       	dec	r19
     794:	e2 f7       	brpl	.-8      	; 0x78e <update_step_board+0x138>
     796:	9a 01       	movw	r18, r20
     798:	42 81       	ldd	r20, Z+2	; 0x02
     79a:	53 81       	ldd	r21, Z+3	; 0x03
     79c:	24 27       	eor	r18, r20
     79e:	35 27       	eor	r19, r21
     7a0:	33 83       	std	Z+3, r19	; 0x03
     7a2:	22 83       	std	Z+2, r18	; 0x02
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
     7a4:	fc 01       	movw	r30, r24
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	e2 5e       	subi	r30, 0xE2	; 226
     7ac:	fb 4f       	sbci	r31, 0xFB	; 251
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	96 01       	movw	r18, r12
     7b4:	0c 2e       	mov	r0, r28
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <update_step_board+0x166>
     7b8:	22 0f       	add	r18, r18
     7ba:	33 1f       	adc	r19, r19
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <update_step_board+0x162>
     7c0:	82 27       	eor	r24, r18
     7c2:	93 27       	eor	r25, r19
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
					sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i; //this creates array out of bound issue, because AC = 16. Why no compile errors or warnings?
				}
			}
			return;		
		}
		for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     7c8:	21 96       	adiw	r28, 0x01	; 1
     7ca:	c0 31       	cpi	r28, 0x10	; 16
     7cc:	d1 05       	cpc	r29, r1
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <update_step_board+0x17c>
     7d0:	bb cf       	rjmp	.-138    	; 0x748 <update_step_board+0xf2>
				sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now				
				sequencer.step_led_mask[sequencer.current_inst] ^= 1<<i;				
			}			
		}
	}
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	08 95       	ret

000007e8 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     7e8:	80 91 34 02 	lds	r24, 0x0234
     7ec:	86 ff       	sbrs	r24, 6
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     7f0:	e4 e3       	ldi	r30, 0x34	; 52
     7f2:	f2 e0       	ldi	r31, 0x02	; 2
     7f4:	8f 7b       	andi	r24, 0xBF	; 191
     7f6:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     800:	80 91 36 02 	lds	r24, 0x0236
     804:	86 ff       	sbrs	r24, 6
     806:	08 c0       	rjmp	.+16     	; 0x818 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     808:	e6 e3       	ldi	r30, 0x36	; 54
     80a:	f2 e0       	ldi	r31, 0x02	; 2
     80c:	8f 7b       	andi	r24, 0xBF	; 191
     80e:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     818:	80 91 38 02 	lds	r24, 0x0238
     81c:	86 ff       	sbrs	r24, 6
     81e:	08 c0       	rjmp	.+16     	; 0x830 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     820:	e8 e3       	ldi	r30, 0x38	; 56
     822:	f2 e0       	ldi	r31, 0x02	; 2
     824:	8f 7b       	andi	r24, 0xBF	; 191
     826:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     830:	80 91 3a 02 	lds	r24, 0x023A
     834:	86 ff       	sbrs	r24, 6
     836:	08 c0       	rjmp	.+16     	; 0x848 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     838:	ea e3       	ldi	r30, 0x3A	; 58
     83a:	f2 e0       	ldi	r31, 0x02	; 2
     83c:	8f 7b       	andi	r24, 0xBF	; 191
     83e:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     848:	80 91 3c 02 	lds	r24, 0x023C
     84c:	86 ff       	sbrs	r24, 6
     84e:	08 c0       	rjmp	.+16     	; 0x860 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     850:	ec e3       	ldi	r30, 0x3C	; 60
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	8f 7b       	andi	r24, 0xBF	; 191
     856:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     860:	80 91 3e 02 	lds	r24, 0x023E
     864:	86 ff       	sbrs	r24, 6
     866:	08 c0       	rjmp	.+16     	; 0x878 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     868:	ee e3       	ldi	r30, 0x3E	; 62
     86a:	f2 e0       	ldi	r31, 0x02	; 2
     86c:	8f 7b       	andi	r24, 0xBF	; 191
     86e:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     878:	80 91 40 02 	lds	r24, 0x0240
     87c:	86 ff       	sbrs	r24, 6
     87e:	08 c0       	rjmp	.+16     	; 0x890 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     880:	e0 e4       	ldi	r30, 0x40	; 64
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	8f 7b       	andi	r24, 0xBF	; 191
     886:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     890:	80 91 42 02 	lds	r24, 0x0242
     894:	86 ff       	sbrs	r24, 6
     896:	08 c0       	rjmp	.+16     	; 0x8a8 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     898:	e2 e4       	ldi	r30, 0x42	; 66
     89a:	f2 e0       	ldi	r31, 0x02	; 2
     89c:	8f 7b       	andi	r24, 0xBF	; 191
     89e:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	87 e0       	ldi	r24, 0x07	; 7
     8a4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     8a8:	80 91 44 02 	lds	r24, 0x0244
     8ac:	86 ff       	sbrs	r24, 6
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     8b0:	e4 e4       	ldi	r30, 0x44	; 68
     8b2:	f2 e0       	ldi	r31, 0x02	; 2
     8b4:	8f 7b       	andi	r24, 0xBF	; 191
     8b6:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	88 e0       	ldi	r24, 0x08	; 8
     8bc:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     8c0:	80 91 46 02 	lds	r24, 0x0246
     8c4:	86 ff       	sbrs	r24, 6
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     8c8:	e6 e4       	ldi	r30, 0x46	; 70
     8ca:	f2 e0       	ldi	r31, 0x02	; 2
     8cc:	8f 7b       	andi	r24, 0xBF	; 191
     8ce:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	89 e0       	ldi	r24, 0x09	; 9
     8d4:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     8d8:	80 91 48 02 	lds	r24, 0x0248
     8dc:	86 ff       	sbrs	r24, 6
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     8e0:	e8 e4       	ldi	r30, 0x48	; 72
     8e2:	f2 e0       	ldi	r31, 0x02	; 2
     8e4:	8f 7b       	andi	r24, 0xBF	; 191
     8e6:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     8f0:	08 95       	ret

000008f2 <refresh>:
}




void refresh(void) {
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     8fa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <update_tempo>
	read_switches();
     8fe:	0e 94 0f 06 	call	0xc1e	; 0xc1e <read_switches>
	check_start_stop_tap();
     902:	0e 94 7f 06 	call	0xcfe	; 0xcfe <check_start_stop_tap>
	
	parse_switch_data();
     906:	0e 94 58 06 	call	0xcb0	; 0xcb0 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     90a:	80 91 75 03 	lds	r24, 0x0375
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	11 f4       	brne	.+4      	; 0x916 <__stack+0x17>
     912:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <live_hits>
	update_mode();
     916:	0e 94 a8 05 	call	0xb50	; 0xb50 <update_mode>
	check_variation_switches();
     91a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <check_variation_switches>
	check_inst_switches();
     91e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <check_inst_switches>
	update_step_board();
     922:	0e 94 2b 03 	call	0x656	; 0x656 <update_step_board>
	if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     926:	80 91 76 03 	lds	r24, 0x0376
     92a:	81 ff       	sbrs	r24, 1
     92c:	62 c0       	rjmp	.+196    	; 0x9f2 <__stack+0xf3>
		
		if (sequencer.next_step_flag) {
     92e:	80 91 1a 04 	lds	r24, 0x041A
     932:	85 ff       	sbrs	r24, 5
     934:	67 c0       	rjmp	.+206    	; 0xa04 <__stack+0x105>
			sequencer.next_step_flag = 0;
     936:	e9 e1       	ldi	r30, 0x19	; 25
     938:	f4 e0       	ldi	r31, 0x04	; 4
     93a:	81 81       	ldd	r24, Z+1	; 0x01
     93c:	8f 7d       	andi	r24, 0xDF	; 223
     93e:	81 83       	std	Z+1, r24	; 0x01
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     940:	80 74       	andi	r24, 0x40	; 64
     942:	88 23       	and	r24, r24
     944:	f1 f3       	breq	.-4      	; 0x942 <__stack+0x43>
			PORTD |= (1<<TRIG);
     946:	5d 9a       	sbi	0x0b, 5	; 11
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.pattern[sequencer.variation].first_part[sequencer.current_inst];
     948:	0a e1       	ldi	r16, 0x1A	; 26
     94a:	14 e0       	ldi	r17, 0x04	; 4
     94c:	f8 01       	movw	r30, r16
     94e:	80 81       	ld	r24, Z
     950:	86 95       	lsr	r24
     952:	8f 70       	andi	r24, 0x0F	; 15
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
     95a:	22 0f       	add	r18, r18
     95c:	33 1f       	adc	r19, r19
     95e:	8a 95       	dec	r24
     960:	e2 f7       	brpl	.-8      	; 0x95a <__stack+0x5b>
     962:	e0 91 1d 04 	lds	r30, 0x041D
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	e2 5e       	subi	r30, 0xE2	; 226
     96e:	fb 4f       	sbci	r31, 0xFB	; 251
     970:	90 81       	ld	r25, Z
     972:	81 81       	ldd	r24, Z+1	; 0x01
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     974:	e8 e6       	ldi	r30, 0x68	; 104
     976:	f2 e0       	ldi	r31, 0x02	; 2
     978:	49 2f       	mov	r20, r25
     97a:	42 23       	and	r20, r18
     97c:	40 95       	com	r20
		
		if (sequencer.next_step_flag) {
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.pattern[sequencer.variation].first_part[sequencer.current_inst];
     97e:	92 2b       	or	r25, r18
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     980:	94 23       	and	r25, r20
     982:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.pattern[sequencer.variation].first_part[sequencer.current_inst] >> 8);
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     984:	98 2f       	mov	r25, r24
     986:	93 23       	and	r25, r19
     988:	90 95       	com	r25
			sequencer.next_step_flag = 0;
			while(sequencer.trigger_finished == 0); //make sure previous instrument trigger is finished before initiating next one
			PORTD |= (1<<TRIG);
			spi_data[1] = (1 << sequencer.current_step) | sequencer.step_led_mask[sequencer.current_inst];// | sequencer.pattern[sequencer.variation].first_part[sequencer.current_inst];
			spi_data[1] &= ~(sequencer.step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
			spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.step_led_mask[sequencer.current_inst] >> 8);// | (sequencer.pattern[sequencer.variation].first_part[sequencer.current_inst] >> 8);
     98a:	83 2b       	or	r24, r19
			spi_data[0] &= ~((sequencer.step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     98c:	89 23       	and	r24, r25
     98e:	80 83       	st	Z, r24
			trigger_step(); 
     990:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
			if (sequencer.pattern[sequencer.variation].accent[sequencer.current_step] &1) {
     994:	80 91 19 04 	lds	r24, 0x0419
     998:	81 70       	andi	r24, 0x01	; 1
     99a:	c8 2f       	mov	r28, r24
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	df 2f       	mov	r29, r31
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 81       	ld	r24, Z
     9a4:	86 95       	lsr	r24
     9a6:	8f 70       	andi	r24, 0x0F	; 15
     9a8:	91 e5       	ldi	r25, 0x51	; 81
     9aa:	9c 9f       	mul	r25, r28
     9ac:	f0 01       	movw	r30, r0
     9ae:	9d 9f       	mul	r25, r29
     9b0:	f0 0d       	add	r31, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	eb 58       	subi	r30, 0x8B	; 139
     9b6:	fc 4f       	sbci	r31, 0xFC	; 252
     9b8:	e8 0f       	add	r30, r24
     9ba:	f1 1d       	adc	r31, r1
     9bc:	ee 5b       	subi	r30, 0xBE	; 190
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	80 81       	ld	r24, Z
     9c2:	80 ff       	sbrs	r24, 0
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <__stack+0xd7>
				spi_data[8] |= 1<<ACCENT;
     9c6:	e8 e6       	ldi	r30, 0x68	; 104
     9c8:	f2 e0       	ldi	r31, 0x02	; 2
     9ca:	80 85       	ldd	r24, Z+8	; 0x08
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	80 87       	std	Z+8, r24	; 0x08
				turn_on(ACCENT_1_LED);
     9d0:	84 e1       	ldi	r24, 0x14	; 20
     9d2:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
			}
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     9d6:	ee e6       	ldi	r30, 0x6E	; 110
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	82 60       	ori	r24, 0x02	; 2
     9de:	80 83       	st	Z, r24
			TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     9e0:	85 b5       	in	r24, 0x25	; 37
     9e2:	83 60       	ori	r24, 0x03	; 3
     9e4:	85 bd       	out	0x25, r24	; 37
			sequencer.trigger_finished = 0;
     9e6:	e9 e1       	ldi	r30, 0x19	; 25
     9e8:	f4 e0       	ldi	r31, 0x04	; 4
     9ea:	81 81       	ldd	r24, Z+1	; 0x01
     9ec:	8f 7b       	andi	r24, 0xBF	; 191
     9ee:	81 83       	std	Z+1, r24	; 0x01
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__stack+0x105>
		} else {
			

			
		}		
	} else if (sequencer.next_step_flag){
     9f2:	80 91 1a 04 	lds	r24, 0x041A
     9f6:	85 ff       	sbrs	r24, 5
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__stack+0x105>
		
			sequencer.next_step_flag = 0;
     9fa:	e9 e1       	ldi	r30, 0x19	; 25
     9fc:	f4 e0       	ldi	r31, 0x04	; 4
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	8f 7d       	andi	r24, 0xDF	; 223
     a02:	81 83       	std	Z+1, r24	; 0x01
		//sequencer.trigger_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     a04:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <update_spi>
	PORTD &= ~(1<<TRIG);
     a08:	5d 98       	cbi	0x0b, 5	; 11
	//if (trigger_finished && sequencer.SHIFT) update_tempo(); //turning off SPI during pot read creates problem for trigger interrupt
	
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     a14:	8f e1       	ldi	r24, 0x1F	; 31
     a16:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     a1a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     a1e:	88 e9       	ldi	r24, 0x98	; 152
     a20:	80 93 c1 00 	sts	0x00C1, r24
     a24:	08 95       	ret

00000a26 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	ef 93       	push	r30
     a46:	ff 93       	push	r31
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     a52:	80 91 c6 00 	lds	r24, 0x00C6
     a56:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     a58:	ae 01       	movw	r20, r28
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	88 e8       	ldi	r24, 0x88	; 136
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 77 08 	call	0x10ee	; 0x10ee <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     a68:	0f 90       	pop	r0
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     a90:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     a92:	8d b1       	in	r24, 0x0d	; 13
     a94:	8c 60       	ori	r24, 0x0C	; 12
     a96:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     a98:	87 b1       	in	r24, 0x07	; 7
     a9a:	8e 60       	ori	r24, 0x0E	; 14
     a9c:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     a9e:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     aa0:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     aa2:	88 b1       	in	r24, 0x08	; 8
     aa4:	81 7f       	andi	r24, 0xF1	; 241
     aa6:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     aa8:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     aaa:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     aac:	80 e5       	ldi	r24, 0x50	; 80
     aae:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     ab2:	ed ea       	ldi	r30, 0xAD	; 173
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     ac2:	8d e1       	ldi	r24, 0x1D	; 29
     ac4:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
	turn_on(FILL_MANUAL);
     ac8:	82 e2       	ldi	r24, 0x22	; 34
     aca:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
	
	update_spi();
     ace:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     ad2:	84 b5       	in	r24, 0x24	; 36
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     ad8:	81 ee       	ldi	r24, 0xE1	; 225
     ada:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     adc:	88 e8       	ldi	r24, 0x88	; 136
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 46 08 	call	0x108c	; 0x108c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     ae4:	66 ef       	ldi	r22, 0xF6	; 246
     ae6:	72 e0       	ldi	r23, 0x02	; 2
     ae8:	88 e8       	ldi	r24, 0x88	; 136
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 3a 08 	call	0x1074	; 0x1074 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     af0:	64 ef       	ldi	r22, 0xF4	; 244
     af2:	72 e0       	ldi	r23, 0x02	; 2
     af4:	88 e8       	ldi	r24, 0x88	; 136
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 3e 08 	call	0x107c	; 0x107c <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     afc:	65 ef       	ldi	r22, 0xF5	; 245
     afe:	72 e0       	ldi	r23, 0x02	; 2
     b00:	88 e8       	ldi	r24, 0x88	; 136
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 42 08 	call	0x1084	; 0x1084 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     b08:	0e 94 0a 05 	call	0xa14	; 0xa14 <setup_midi_usart>
	
	setup_internal_clock();
     b0c:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     b10:	e3 e7       	ldi	r30, 0x73	; 115
     b12:	f2 e0       	ldi	r31, 0x02	; 2
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	81 83       	std	Z+1, r24	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     b1c:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	sequencer.trigger_finished = 1;
     b20:	e9 e1       	ldi	r30, 0x19	; 25
     b22:	f4 e0       	ldi	r31, 0x04	; 4
     b24:	81 81       	ldd	r24, Z+1	; 0x01
     b26:	80 64       	ori	r24, 0x40	; 64
     b28:	81 83       	std	Z+1, r24	; 0x01
	sequencer.START = 0;
     b2a:	a6 e7       	ldi	r26, 0x76	; 118
     b2c:	b3 e0       	ldi	r27, 0x03	; 3
     b2e:	8c 91       	ld	r24, X
     b30:	8d 7f       	andi	r24, 0xFD	; 253
     b32:	8c 93       	st	X, r24
	//update_tempo();
	sequencer.variation_mode = 0;
     b34:	80 81       	ld	r24, Z
     b36:	89 7f       	andi	r24, 0xF9	; 249
     b38:	80 83       	st	Z, r24
	turn_on(BASIC_VAR_A_LED);
     b3a:	84 e2       	ldi	r24, 0x24	; 36
     b3c:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
	sei(); //enable global interrupts	
     b40:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     b42:	88 e8       	ldi	r24, 0x88	; 136
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <midi_device_process>
	
	refresh();		
     b4a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <refresh>

	
	}
     b4e:	f9 cf       	rjmp	.-14     	; 0xb42 <main+0xb2>

00000b50 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     b50:	80 91 52 02 	lds	r24, 0x0252
     b54:	86 ff       	sbrs	r24, 6
     b56:	34 c0       	rjmp	.+104    	; 0xbc0 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     b58:	e2 e5       	ldi	r30, 0x52	; 82
     b5a:	f2 e0       	ldi	r31, 0x02	; 2
     b5c:	8f 7b       	andi	r24, 0xBF	; 191
     b5e:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     b60:	80 91 76 03 	lds	r24, 0x0376
     b64:	80 ff       	sbrs	r24, 0
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     b68:	80 91 5d 02 	lds	r24, 0x025D
     b6c:	88 23       	and	r24, r24
     b6e:	21 f0       	breq	.+8      	; 0xb78 <update_mode+0x28>
     b70:	81 50       	subi	r24, 0x01	; 1
     b72:	80 93 5d 02 	sts	0x025D, r24
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <update_mode+0x44>
     b78:	85 e0       	ldi	r24, 0x05	; 5
     b7a:	80 93 5d 02 	sts	0x025D, r24
     b7e:	0a c0       	rjmp	.+20     	; 0xb94 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     b80:	80 91 5d 02 	lds	r24, 0x025D
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	86 30       	cpi	r24, 0x06	; 6
     b88:	19 f0       	breq	.+6      	; 0xb90 <update_mode+0x40>
     b8a:	80 93 5d 02 	sts	0x025D, r24
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <update_mode+0x44>
     b90:	10 92 5d 02 	sts	0x025D, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     b94:	20 91 5d 02 	lds	r18, 0x025D
     b98:	e2 2f       	mov	r30, r18
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e4 5f       	subi	r30, 0xF4	; 244
     b9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ba0:	80 81       	ld	r24, Z
     ba2:	80 93 75 03 	sts	0x0375, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     ba6:	e8 e6       	ldi	r30, 0x68	; 104
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <update_mode+0x64>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	2a 95       	dec	r18
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     bb8:	94 81       	ldd	r25, Z+4	; 0x04
     bba:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     bbc:	89 2b       	or	r24, r25
     bbe:	84 83       	std	Z+4, r24	; 0x04
     bc0:	08 95       	ret

00000bc2 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     bc2:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     bc6:	ed ea       	ldi	r30, 0xAD	; 173
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	88 23       	and	r24, r24
     bce:	ec f7       	brge	.-6      	; 0xbca <spi_shift_byte+0x8>
	return SPDR1;
     bd0:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     bd4:	08 95       	ret

00000bd6 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     bda:	c8 e6       	ldi	r28, 0x68	; 104
     bdc:	d2 e0       	ldi	r29, 0x02	; 2
     bde:	88 81       	ld	r24, Y
     be0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     c08:	8f 81       	ldd	r24, Y+7	; 0x07
     c0a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     c0e:	88 85       	ldd	r24, Y+8	; 0x08
     c10:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     c14:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     c16:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <read_switches>:

void read_switches(void) { //reads switch data
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     c22:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
     c2a:	c3 e6       	ldi	r28, 0x63	; 99
     c2c:	d2 e0       	ldi	r29, 0x02	; 2
     c2e:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
     c36:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
     c3e:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
     c46:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <spi_shift_byte>
     c4e:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     c50:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     c52:	98 81       	ld	r25, Y
     c54:	39 2f       	mov	r19, r25
     c56:	36 95       	lsr	r19
     c58:	e6 e7       	ldi	r30, 0x76	; 118
     c5a:	f3 e0       	ldi	r31, 0x03	; 3
     c5c:	20 81       	ld	r18, Z
     c5e:	30 fb       	bst	r19, 0
     c60:	20 f9       	bld	r18, 0
     c62:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     c64:	ee e5       	ldi	r30, 0x5E	; 94
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	20 81       	ld	r18, Z
     c6a:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     c6c:	29 27       	eor	r18, r25
     c6e:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     c70:	92 23       	and	r25, r18
     c72:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     c74:	21 81       	ldd	r18, Z+1	; 0x01
     c76:	99 81       	ldd	r25, Y+1	; 0x01
     c78:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     c7a:	29 27       	eor	r18, r25
     c7c:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     c7e:	92 23       	and	r25, r18
     c80:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     c82:	22 81       	ldd	r18, Z+2	; 0x02
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     c88:	29 27       	eor	r18, r25
     c8a:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     c8c:	92 23       	and	r25, r18
     c8e:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     c90:	23 81       	ldd	r18, Z+3	; 0x03
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     c96:	29 27       	eor	r18, r25
     c98:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     c9a:	92 23       	and	r25, r18
     c9c:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     c9e:	94 81       	ldd	r25, Z+4	; 0x04
     ca0:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     ca2:	98 27       	eor	r25, r24
     ca4:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     ca6:	89 23       	and	r24, r25
     ca8:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     cb4:	da 01       	movw	r26, r20
     cb6:	aa 0f       	add	r26, r26
     cb8:	bb 1f       	adc	r27, r27
     cba:	ae 5e       	subi	r26, 0xEE	; 238
     cbc:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     cbe:	8c 91       	ld	r24, X
     cc0:	e8 2f       	mov	r30, r24
     cc2:	e6 95       	lsr	r30
     cc4:	e6 95       	lsr	r30
     cc6:	e6 95       	lsr	r30
     cc8:	e7 70       	andi	r30, 0x07	; 7
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	ed 59       	subi	r30, 0x9D	; 157
     cce:	fd 4f       	sbci	r31, 0xFD	; 253
     cd0:	20 81       	ld	r18, Z
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	98 2f       	mov	r25, r24
     cd6:	97 70       	andi	r25, 0x07	; 7
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <parse_switch_data+0x2e>
     cda:	35 95       	asr	r19
     cdc:	27 95       	ror	r18
     cde:	9a 95       	dec	r25
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <parse_switch_data+0x2a>
     ce2:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     ce4:	86 fb       	bst	r24, 6
     ce6:	99 27       	eor	r25, r25
     ce8:	90 f9       	bld	r25, 0
     cea:	29 27       	eor	r18, r25
     cec:	20 fb       	bst	r18, 0
     cee:	86 f9       	bld	r24, 6
     cf0:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     cf2:	4f 5f       	subi	r20, 0xFF	; 255
     cf4:	5f 4f       	sbci	r21, 0xFF	; 255
     cf6:	43 32       	cpi	r20, 0x23	; 35
     cf8:	51 05       	cpc	r21, r1
     cfa:	e1 f6       	brne	.-72     	; 0xcb4 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     cfc:	08 95       	ret

00000cfe <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     cfe:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     d00:	80 91 71 02 	lds	r24, 0x0271
     d04:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     d06:	89 27       	eor	r24, r25
     d08:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     d0c:	89 23       	and	r24, r25
     d0e:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
     d12:	e6 e7       	ldi	r30, 0x76	; 118
     d14:	f3 e0       	ldi	r31, 0x03	; 3
     d16:	90 81       	ld	r25, Z
     d18:	91 fb       	bst	r25, 1
     d1a:	22 27       	eor	r18, r18
     d1c:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     d1e:	86 95       	lsr	r24
     d20:	82 27       	eor	r24, r18
     d22:	80 fb       	bst	r24, 0
     d24:	91 f9       	bld	r25, 1
     d26:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
     d28:	91 ff       	sbrs	r25, 1
     d2a:	1d c0       	rjmp	.+58     	; 0xd66 <check_start_stop_tap+0x68>
     d2c:	21 11       	cpse	r18, r1
     d2e:	1d c0       	rjmp	.+58     	; 0xd6a <check_start_stop_tap+0x6c>
		
		sequencer.current_step = 0;
     d30:	e9 e1       	ldi	r30, 0x19	; 25
     d32:	f4 e0       	ldi	r31, 0x04	; 4
     d34:	81 81       	ldd	r24, Z+1	; 0x01
		sequencer.next_step_flag = 1;
     d36:	81 7e       	andi	r24, 0xE1	; 225
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	81 83       	std	Z+1, r24	; 0x01
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
     d3c:	10 92 74 02 	sts	0x0274, r1
     d40:	08 95       	ret
		
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
     d42:	0e 94 e5 02 	call	0x5ca	; 0x5ca <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
     d46:	80 91 1d 04 	lds	r24, 0x041D
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	fc 01       	movw	r30, r24
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	e8 0f       	add	r30, r24
     d54:	f9 1f       	adc	r31, r25
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	e0 50       	subi	r30, 0x00	; 0
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	85 81       	ldd	r24, Z+5	; 0x05
     d60:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
     d64:	08 95       	ret
		sequencer.next_step_flag = 1;
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
		
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	61 f3       	breq	.-40     	; 0xd42 <check_start_stop_tap+0x44>
     d6a:	08 95       	ret

00000d6c <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
     d6c:	3f 92       	push	r3
     d6e:	4f 92       	push	r4
     d70:	5f 92       	push	r5
     d72:	6f 92       	push	r6
     d74:	7f 92       	push	r7
     d76:	8f 92       	push	r8
     d78:	9f 92       	push	r9
     d7a:	af 92       	push	r10
     d7c:	bf 92       	push	r11
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	0f 2e       	mov	r0, r31
     d90:	f5 e0       	ldi	r31, 0x05	; 5
     d92:	ef 2e       	mov	r14, r31
     d94:	f1 e0       	ldi	r31, 0x01	; 1
     d96:	ff 2e       	mov	r15, r31
     d98:	f0 2d       	mov	r31, r0
     d9a:	0f 2e       	mov	r0, r31
     d9c:	fb e3       	ldi	r31, 0x3B	; 59
     d9e:	8f 2e       	mov	r8, r31
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	9f 2e       	mov	r9, r31
     da4:	f0 2d       	mov	r31, r0
     da6:	02 e1       	ldi	r16, 0x12	; 18
     da8:	10 e0       	ldi	r17, 0x00	; 0
     daa:	c1 e1       	ldi	r28, 0x11	; 17
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	c1 2c       	mov	r12, r1
     db0:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     db2:	0f 2e       	mov	r0, r31
     db4:	fd e1       	ldi	r31, 0x1D	; 29
     db6:	af 2e       	mov	r10, r31
     db8:	f4 e0       	ldi	r31, 0x04	; 4
     dba:	bf 2e       	mov	r11, r31
     dbc:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     dbe:	0f 2e       	mov	r0, r31
     dc0:	ff e5       	ldi	r31, 0x5F	; 95
     dc2:	4f 2e       	mov	r4, r31
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	5f 2e       	mov	r5, r31
     dc8:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     dca:	0f 2e       	mov	r0, r31
     dcc:	ff e0       	ldi	r31, 0x0F	; 15
     dce:	3f 2e       	mov	r3, r31
     dd0:	f0 2d       	mov	r31, r0
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <check_inst_switches+0x80>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	c8 1a       	sub	r12, r24
     dd8:	d8 0a       	sbc	r13, r24
     dda:	21 96       	adiw	r28, 0x01	; 1
     ddc:	0f 5f       	subi	r16, 0xFF	; 255
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	a6 e0       	ldi	r26, 0x06	; 6
     de2:	ea 0e       	add	r14, r26
     de4:	f1 1c       	adc	r15, r1
     de6:	b6 e0       	ldi	r27, 0x06	; 6
     de8:	8b 0e       	add	r8, r27
     dea:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     dec:	fe 01       	movw	r30, r28
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 5e       	subi	r30, 0xEE	; 238
     df4:	fd 4f       	sbci	r31, 0xFD	; 253
     df6:	80 81       	ld	r24, Z
     df8:	86 ff       	sbrs	r24, 6
     dfa:	37 c0       	rjmp	.+110    	; 0xe6a <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
     dfc:	fe 01       	movw	r30, r28
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	ee 5e       	subi	r30, 0xEE	; 238
     e04:	fd 4f       	sbci	r31, 0xFD	; 253
     e06:	8f 7b       	andi	r24, 0xBF	; 191
     e08:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
     e0a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <turn_off_all_inst_leds>
     e0e:	f7 01       	movw	r30, r14
     e10:	d7 01       	movw	r26, r14
     e12:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
     e14:	8c 91       	ld	r24, X
     e16:	8f 3f       	cpi	r24, 0xFF	; 255
     e18:	a9 f0       	breq	.+42     	; 0xe44 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
     e1a:	d5 01       	movw	r26, r10
     e1c:	8c 91       	ld	r24, X
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	c8 16       	cp	r12, r24
     e22:	d9 06       	cpc	r13, r25
     e24:	49 f4       	brne	.+18     	; 0xe38 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
     e26:	f4 01       	movw	r30, r8
     e28:	80 81       	ld	r24, Z
     e2a:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
     e2e:	89 e0       	ldi	r24, 0x09	; 9
     e30:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
     e32:	d5 01       	movw	r26, r10
     e34:	8c 93       	st	X, r24
     e36:	19 c0       	rjmp	.+50     	; 0xe6a <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
     e38:	80 81       	ld	r24, Z
     e3a:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
     e3e:	f5 01       	movw	r30, r10
     e40:	c0 82       	st	Z, r12
     e42:	13 c0       	rjmp	.+38     	; 0xe6a <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
     e44:	d5 01       	movw	r26, r10
     e46:	8c 91       	ld	r24, X
     e48:	86 30       	cpi	r24, 0x06	; 6
     e4a:	51 f4       	brne	.+20     	; 0xe60 <check_inst_switches+0xf4>
     e4c:	c7 31       	cpi	r28, 0x17	; 23
     e4e:	d1 05       	cpc	r29, r1
     e50:	39 f4       	brne	.+14     	; 0xe60 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
     e52:	f2 01       	movw	r30, r4
     e54:	80 81       	ld	r24, Z
     e56:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
					sequencer.current_inst = MA;
     e5a:	d5 01       	movw	r26, r10
     e5c:	3c 92       	st	X, r3
     e5e:	ba cf       	rjmp	.-140    	; 0xdd4 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
     e60:	80 81       	ld	r24, Z
     e62:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
     e66:	f5 01       	movw	r30, r10
     e68:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
     e6a:	0c 31       	cpi	r16, 0x1C	; 28
     e6c:	11 05       	cpc	r17, r1
     e6e:	0c f4       	brge	.+2      	; 0xe72 <check_inst_switches+0x106>
     e70:	b1 cf       	rjmp	.-158    	; 0xdd4 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
     e72:	80 91 32 02 	lds	r24, 0x0232
     e76:	86 ff       	sbrs	r24, 6
     e78:	0c c0       	rjmp	.+24     	; 0xe92 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f2 e0       	ldi	r31, 0x02	; 2
     e7e:	8f 7b       	andi	r24, 0xBF	; 191
     e80:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
     e82:	0e 94 e5 02 	call	0x5ca	; 0x5ca <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
     e86:	84 e1       	ldi	r24, 0x14	; 20
     e88:	0e 94 95 02 	call	0x52a	; 0x52a <turn_on>
		sequencer.current_inst = AC;
     e8c:	80 e1       	ldi	r24, 0x10	; 16
     e8e:	80 93 1d 04 	sts	0x041D, r24
	}
	
}	
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	7f 90       	pop	r7
     eac:	6f 90       	pop	r6
     eae:	5f 90       	pop	r5
     eb0:	4f 90       	pop	r4
     eb2:	3f 90       	pop	r3
     eb4:	08 95       	ret

00000eb6 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
     eb6:	80 91 4e 02 	lds	r24, 0x024E
     eba:	86 ff       	sbrs	r24, 6
     ebc:	18 c0       	rjmp	.+48     	; 0xeee <check_variation_switches+0x38>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
     ebe:	ee e4       	ldi	r30, 0x4E	; 78
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	8f 7b       	andi	r24, 0xBF	; 191
     ec4:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
     ec6:	80 91 19 04 	lds	r24, 0x0419
     eca:	86 95       	lsr	r24
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	83 70       	andi	r24, 0x03	; 3
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	41 f0       	breq	.+16     	; 0xee4 <check_variation_switches+0x2e>
     ed4:	e9 e1       	ldi	r30, 0x19	; 25
     ed6:	f4 e0       	ldi	r31, 0x04	; 4
     ed8:	88 0f       	add	r24, r24
     eda:	90 81       	ld	r25, Z
     edc:	99 7f       	andi	r25, 0xF9	; 249
     ede:	89 2b       	or	r24, r25
     ee0:	80 83       	st	Z, r24
     ee2:	08 95       	ret
     ee4:	e9 e1       	ldi	r30, 0x19	; 25
     ee6:	f4 e0       	ldi	r31, 0x04	; 4
     ee8:	80 81       	ld	r24, Z
     eea:	89 7f       	andi	r24, 0xF9	; 249
     eec:	80 83       	st	Z, r24
     eee:	08 95       	ret

00000ef0 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     ef0:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     ef2:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     ef4:	74 83       	std	Z+4, r23	; 0x04
     ef6:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	10 82       	st	Z, r1
     efc:	08 95       	ret

00000efe <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     f0c:	0e 94 f8 07 	call	0xff0	; 0xff0 <store_and_clear_interrupt>
     f10:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     f12:	f9 80       	ldd	r15, Y+1	; 0x01
     f14:	4f 2d       	mov	r20, r15
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	ca 01       	movw	r24, r20
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	2a 81       	ldd	r18, Y+2	; 0x02
     f1e:	62 2f       	mov	r22, r18
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	0e 94 a7 0a 	call	0x154e	; 0x154e <__divmodhi4>
     f26:	28 81       	ld	r18, Y
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	82 17       	cp	r24, r18
     f2c:	93 07       	cpc	r25, r19
     f2e:	29 f4       	brne	.+10     	; 0xf3a <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
     f30:	81 2f       	mov	r24, r17
     f32:	0e 94 fb 07 	call	0xff6	; 0xff6 <restore_interrupt_setting>
      return false;
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
     f3a:	eb 81       	ldd	r30, Y+3	; 0x03
     f3c:	fc 81       	ldd	r31, Y+4	; 0x04
     f3e:	ef 0d       	add	r30, r15
     f40:	f1 1d       	adc	r31, r1
     f42:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
     f44:	29 81       	ldd	r18, Y+1	; 0x01
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	c9 01       	movw	r24, r18
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	6a 81       	ldd	r22, Y+2	; 0x02
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 a7 0a 	call	0x154e	; 0x154e <__divmodhi4>
     f54:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     f56:	81 2f       	mov	r24, r17
     f58:	0e 94 fb 07 	call	0xff6	; 0xff6 <restore_interrupt_setting>
      return true;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	08 95       	ret

00000f6a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     f70:	0e 94 f8 07 	call	0xff0	; 0xff0 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     f74:	39 81       	ldd	r19, Y+1	; 0x01
     f76:	28 81       	ld	r18, Y
     f78:	32 17       	cp	r19, r18
     f7a:	18 f0       	brcs	.+6      	; 0xf82 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     f7c:	c3 2f       	mov	r28, r19
     f7e:	c2 1b       	sub	r28, r18
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <bytequeue_length+0x20>
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	c3 2f       	mov	r28, r19
     f86:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
     f88:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
     f8a:	0e 94 fb 07 	call	0xff6	; 0xff6 <restore_interrupt_setting>
   return len;
}
     f8e:	8c 2f       	mov	r24, r28
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     f96:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     f98:	80 81       	ld	r24, Z
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	9b 01       	movw	r18, r22
     f9e:	28 0f       	add	r18, r24
     fa0:	31 1d       	adc	r19, r1
     fa2:	c9 01       	movw	r24, r18
     fa4:	62 81       	ldd	r22, Z+2	; 0x02
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	0e 94 a7 0a 	call	0x154e	; 0x154e <__divmodhi4>
     fac:	03 80       	ldd	r0, Z+3	; 0x03
     fae:	f4 81       	ldd	r31, Z+4	; 0x04
     fb0:	e0 2d       	mov	r30, r0
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
}
     fb6:	80 81       	ld	r24, Z
     fb8:	08 95       	ret

00000fba <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
     fc2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     fc4:	0e 94 f8 07 	call	0xff0	; 0xff0 <store_and_clear_interrupt>
     fc8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     fca:	88 81       	ld	r24, Y
     fcc:	21 2f       	mov	r18, r17
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	68 0f       	add	r22, r24
     fd4:	71 1d       	adc	r23, r1
     fd6:	cb 01       	movw	r24, r22
     fd8:	6a 81       	ldd	r22, Y+2	; 0x02
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	0e 94 a7 0a 	call	0x154e	; 0x154e <__divmodhi4>
     fe0:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     fe2:	84 2f       	mov	r24, r20
     fe4:	0e 94 fb 07 	call	0xff6	; 0xff6 <restore_interrupt_setting>
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	08 95       	ret

00000ff0 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     ff0:	8f b7       	in	r24, 0x3f	; 63
   cli();
     ff2:	f8 94       	cli
   return sreg;
}
     ff4:	08 95       	ret

00000ff6 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     ff6:	8f bf       	out	0x3f, r24	; 63
     ff8:	08 95       	ret

00000ffa <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     ffa:	88 1f       	adc	r24, r24
     ffc:	88 27       	eor	r24, r24
     ffe:	88 1f       	adc	r24, r24
    1000:	08 95       	ret

00001002 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	88 3f       	cpi	r24, 0xF8	; 248
    1006:	08 f4       	brcc	.+2      	; 0x100a <midi_is_realtime+0x8>
    1008:	90 e0       	ldi	r25, 0x00	; 0
}
    100a:	89 2f       	mov	r24, r25
    100c:	08 95       	ret

0000100e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    100e:	98 2f       	mov	r25, r24
    1010:	90 7f       	andi	r25, 0xF0	; 240
    1012:	90 3c       	cpi	r25, 0xC0	; 192
    1014:	b1 f0       	breq	.+44     	; 0x1042 <midi_packet_length+0x34>
    1016:	58 f4       	brcc	.+22     	; 0x102e <midi_packet_length+0x20>
    1018:	90 39       	cpi	r25, 0x90	; 144
    101a:	41 f1       	breq	.+80     	; 0x106c <midi_packet_length+0x5e>
    101c:	18 f4       	brcc	.+6      	; 0x1024 <midi_packet_length+0x16>
    101e:	90 38       	cpi	r25, 0x80	; 128
    1020:	19 f5       	brne	.+70     	; 0x1068 <midi_packet_length+0x5a>
    1022:	24 c0       	rjmp	.+72     	; 0x106c <midi_packet_length+0x5e>
    1024:	90 3a       	cpi	r25, 0xA0	; 160
    1026:	11 f1       	breq	.+68     	; 0x106c <midi_packet_length+0x5e>
    1028:	90 3b       	cpi	r25, 0xB0	; 176
    102a:	f1 f4       	brne	.+60     	; 0x1068 <midi_packet_length+0x5a>
    102c:	1f c0       	rjmp	.+62     	; 0x106c <midi_packet_length+0x5e>
    102e:	90 3e       	cpi	r25, 0xE0	; 224
    1030:	e9 f0       	breq	.+58     	; 0x106c <midi_packet_length+0x5e>
    1032:	18 f4       	brcc	.+6      	; 0x103a <midi_packet_length+0x2c>
    1034:	90 3d       	cpi	r25, 0xD0	; 208
    1036:	29 f0       	breq	.+10     	; 0x1042 <midi_packet_length+0x34>
    1038:	17 c0       	rjmp	.+46     	; 0x1068 <midi_packet_length+0x5a>
    103a:	90 3f       	cpi	r25, 0xF0	; 240
    103c:	21 f0       	breq	.+8      	; 0x1046 <midi_packet_length+0x38>
    103e:	93 3f       	cpi	r25, 0xF3	; 243
    1040:	99 f4       	brne	.+38     	; 0x1068 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	08 95       	ret
      case 0xF0:
         switch(status) {
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	fc 01       	movw	r30, r24
    104a:	e1 5f       	subi	r30, 0xF1	; 241
    104c:	f1 09       	sbc	r31, r1
    104e:	ef 30       	cpi	r30, 0x0F	; 15
    1050:	f1 05       	cpc	r31, r1
    1052:	40 f4       	brcc	.+16     	; 0x1064 <midi_packet_length+0x56>
    1054:	e6 5a       	subi	r30, 0xA6	; 166
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1072:	08 95       	ret

00001074 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1074:	fc 01       	movw	r30, r24
    1076:	75 83       	std	Z+5, r23	; 0x05
    1078:	64 83       	std	Z+4, r22	; 0x04
    107a:	08 95       	ret

0000107c <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    107c:	fc 01       	movw	r30, r24
    107e:	77 83       	std	Z+7, r23	; 0x07
    1080:	66 83       	std	Z+6, r22	; 0x06
    1082:	08 95       	ret

00001084 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1084:	fc 01       	movw	r30, r24
    1086:	77 8b       	std	Z+23, r23	; 0x17
    1088:	66 8b       	std	Z+22, r22	; 0x16
    108a:	08 95       	ret

0000108c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1092:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1094:	1f a2       	std	Y+39, r1	; 0x27
    1096:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1098:	bc 01       	movw	r22, r24
    109a:	68 5d       	subi	r22, 0xD8	; 216
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	40 ec       	ldi	r20, 0xC0	; 192
    10a0:	88 51       	subi	r24, 0x18	; 24
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	0e 94 78 07 	call	0xef0	; 0xef0 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    10a8:	1b 82       	std	Y+3, r1	; 0x03
    10aa:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    10ac:	1d 82       	std	Y+5, r1	; 0x05
    10ae:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    10b0:	1f 82       	std	Y+7, r1	; 0x07
    10b2:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    10b4:	19 86       	std	Y+9, r1	; 0x09
    10b6:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    10b8:	1b 86       	std	Y+11, r1	; 0x0b
    10ba:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    10bc:	1d 86       	std	Y+13, r1	; 0x0d
    10be:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    10c0:	1f 86       	std	Y+15, r1	; 0x0f
    10c2:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    10c4:	19 8a       	std	Y+17, r1	; 0x11
    10c6:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    10c8:	1b 8a       	std	Y+19, r1	; 0x13
    10ca:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    10cc:	1d 8a       	std	Y+21, r1	; 0x15
    10ce:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    10d0:	1f 8a       	std	Y+23, r1	; 0x17
    10d2:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    10d4:	19 8e       	std	Y+25, r1	; 0x19
    10d6:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    10d8:	1b 8e       	std	Y+27, r1	; 0x1b
    10da:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    10dc:	1d 8e       	std	Y+29, r1	; 0x1d
    10de:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    10e0:	1f 8e       	std	Y+31, r1	; 0x1f
    10e2:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    10e4:	19 a2       	std	Y+33, r1	; 0x21
    10e6:	18 a2       	std	Y+32, r1	; 0x20
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    10fa:	66 23       	and	r22, r22
    10fc:	99 f0       	breq	.+38     	; 0x1124 <midi_device_input+0x36>
    10fe:	ea 01       	movw	r28, r20
    1100:	61 50       	subi	r22, 0x01	; 1
    1102:	06 2f       	mov	r16, r22
    1104:	10 e0       	ldi	r17, 0x00	; 0
    1106:	0f 5f       	subi	r16, 0xFF	; 255
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	04 0f       	add	r16, r20
    110c:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    110e:	7c 01       	movw	r14, r24
    1110:	28 ee       	ldi	r18, 0xE8	; 232
    1112:	e2 0e       	add	r14, r18
    1114:	f1 1c       	adc	r15, r1
    1116:	69 91       	ld	r22, Y+
    1118:	c7 01       	movw	r24, r14
    111a:	0e 94 7f 07 	call	0xefe	; 0xefe <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    111e:	c0 17       	cp	r28, r16
    1120:	d1 07       	cpc	r29, r17
    1122:	c9 f7       	brne	.-14     	; 0x1116 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 d0       	rcall	.+0      	; 0x1148 <midi_input_callbacks+0x16>
    1148:	1f 92       	push	r1
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	7c 01       	movw	r14, r24
    1150:	6b 01       	movw	r12, r22
    1152:	14 2f       	mov	r17, r20
    1154:	b2 2e       	mov	r11, r18
    1156:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1158:	dc 01       	movw	r26, r24
    115a:	95 96       	adiw	r26, 0x25	; 37
    115c:	8c 91       	ld	r24, X
    115e:	95 97       	sbiw	r26, 0x25	; 37
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	11 f5       	brne	.+68     	; 0x11a8 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1164:	5a 96       	adiw	r26, 0x1a	; 26
    1166:	ed 91       	ld	r30, X+
    1168:	fc 91       	ld	r31, X
    116a:	5b 97       	sbiw	r26, 0x1b	; 27
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	09 f4       	brne	.+2      	; 0x1172 <midi_input_callbacks+0x40>
    1170:	cc c0       	rjmp	.+408    	; 0x130a <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1172:	9b 01       	movw	r18, r22
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	31 09       	sbc	r19, r1
    1178:	ab ea       	ldi	r26, 0xAB	; 171
    117a:	ba ea       	ldi	r27, 0xAA	; 170
    117c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__umulhisi3>
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	9c 01       	movw	r18, r24
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    118e:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1190:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1192:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1194:	4c 2d       	mov	r20, r12
    1196:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1198:	9e 01       	movw	r18, r28
    119a:	2f 5f       	subi	r18, 0xFF	; 255
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	68 2f       	mov	r22, r24
    11a0:	79 2f       	mov	r23, r25
    11a2:	c7 01       	movw	r24, r14
    11a4:	09 95       	icall
    11a6:	be c0       	rjmp	.+380    	; 0x1324 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    11a8:	62 30       	cpi	r22, 0x02	; 2
    11aa:	71 05       	cpc	r23, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <midi_input_callbacks+0x7e>
    11ae:	55 c0       	rjmp	.+170    	; 0x125a <midi_input_callbacks+0x128>
    11b0:	63 30       	cpi	r22, 0x03	; 3
    11b2:	71 05       	cpc	r23, r1
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <midi_input_callbacks+0x8e>
    11b6:	61 30       	cpi	r22, 0x01	; 1
    11b8:	71 05       	cpc	r23, r1
    11ba:	09 f0       	breq	.+2      	; 0x11be <midi_input_callbacks+0x8c>
    11bc:	a1 c0       	rjmp	.+322    	; 0x1300 <midi_input_callbacks+0x1ce>
    11be:	88 c0       	rjmp	.+272    	; 0x12d0 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    11c0:	84 2f       	mov	r24, r20
    11c2:	80 7f       	andi	r24, 0xF0	; 240
    11c4:	80 3a       	cpi	r24, 0xA0	; 160
    11c6:	f1 f0       	breq	.+60     	; 0x1204 <midi_input_callbacks+0xd2>
    11c8:	28 f4       	brcc	.+10     	; 0x11d4 <midi_input_callbacks+0xa2>
    11ca:	80 38       	cpi	r24, 0x80	; 128
    11cc:	a9 f0       	breq	.+42     	; 0x11f8 <midi_input_callbacks+0xc6>
    11ce:	80 39       	cpi	r24, 0x90	; 144
    11d0:	69 f0       	breq	.+26     	; 0x11ec <midi_input_callbacks+0xba>
    11d2:	2f c0       	rjmp	.+94     	; 0x1232 <midi_input_callbacks+0x100>
    11d4:	80 3e       	cpi	r24, 0xE0	; 224
    11d6:	e1 f0       	breq	.+56     	; 0x1210 <midi_input_callbacks+0xde>
    11d8:	80 3f       	cpi	r24, 0xF0	; 240
    11da:	01 f1       	breq	.+64     	; 0x121c <midi_input_callbacks+0xea>
    11dc:	80 3b       	cpi	r24, 0xB0	; 176
    11de:	49 f5       	brne	.+82     	; 0x1232 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    11e0:	d7 01       	movw	r26, r14
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	ed 91       	ld	r30, X+
    11e6:	fc 91       	ld	r31, X
    11e8:	13 97       	sbiw	r26, 0x03	; 3
              break;
    11ea:	25 c0       	rjmp	.+74     	; 0x1236 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    11ec:	d7 01       	movw	r26, r14
    11ee:	14 96       	adiw	r26, 0x04	; 4
    11f0:	ed 91       	ld	r30, X+
    11f2:	fc 91       	ld	r31, X
    11f4:	15 97       	sbiw	r26, 0x05	; 5
              break;
    11f6:	1f c0       	rjmp	.+62     	; 0x1236 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    11f8:	d7 01       	movw	r26, r14
    11fa:	16 96       	adiw	r26, 0x06	; 6
    11fc:	ed 91       	ld	r30, X+
    11fe:	fc 91       	ld	r31, X
    1200:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1202:	19 c0       	rjmp	.+50     	; 0x1236 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1204:	d7 01       	movw	r26, r14
    1206:	18 96       	adiw	r26, 0x08	; 8
    1208:	ed 91       	ld	r30, X+
    120a:	fc 91       	ld	r31, X
    120c:	19 97       	sbiw	r26, 0x09	; 9
              break;
    120e:	13 c0       	rjmp	.+38     	; 0x1236 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1210:	d7 01       	movw	r26, r14
    1212:	1a 96       	adiw	r26, 0x0a	; 10
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    121c:	42 3f       	cpi	r20, 0xF2	; 242
    121e:	09 f0       	breq	.+2      	; 0x1222 <midi_input_callbacks+0xf0>
    1220:	74 c0       	rjmp	.+232    	; 0x130a <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    1222:	d7 01       	movw	r26, r14
    1224:	1c 96       	adiw	r26, 0x0c	; 12
    1226:	ed 91       	ld	r30, X+
    1228:	fc 91       	ld	r31, X
    122a:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    122c:	30 97       	sbiw	r30, 0x00	; 0
    122e:	41 f4       	brne	.+16     	; 0x1240 <midi_input_callbacks+0x10e>
    1230:	6c c0       	rjmp	.+216    	; 0x130a <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1232:	e0 e0       	ldi	r30, 0x00	; 0
    1234:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1236:	30 97       	sbiw	r30, 0x00	; 0
    1238:	09 f4       	brne	.+2      	; 0x123c <midi_input_callbacks+0x10a>
    123a:	67 c0       	rjmp	.+206    	; 0x130a <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    123c:	12 3f       	cpi	r17, 0xF2	; 242
    123e:	31 f4       	brne	.+12     	; 0x124c <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1240:	2a 2d       	mov	r18, r10
    1242:	4b 2d       	mov	r20, r11
    1244:	62 ef       	ldi	r22, 0xF2	; 242
    1246:	c7 01       	movw	r24, r14
    1248:	09 95       	icall
    124a:	6c c0       	rjmp	.+216    	; 0x1324 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    124c:	2a 2d       	mov	r18, r10
    124e:	4b 2d       	mov	r20, r11
    1250:	61 2f       	mov	r22, r17
    1252:	6f 70       	andi	r22, 0x0F	; 15
    1254:	c7 01       	movw	r24, r14
    1256:	09 95       	icall
    1258:	65 c0       	rjmp	.+202    	; 0x1324 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    125a:	84 2f       	mov	r24, r20
    125c:	80 7f       	andi	r24, 0xF0	; 240
    125e:	80 3d       	cpi	r24, 0xD0	; 208
    1260:	51 f0       	breq	.+20     	; 0x1276 <midi_input_callbacks+0x144>
    1262:	80 3f       	cpi	r24, 0xF0	; 240
    1264:	71 f0       	breq	.+28     	; 0x1282 <midi_input_callbacks+0x150>
    1266:	80 3c       	cpi	r24, 0xC0	; 192
    1268:	01 f5       	brne	.+64     	; 0x12aa <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    126a:	d7 01       	movw	r26, r14
    126c:	1e 96       	adiw	r26, 0x0e	; 14
    126e:	ed 91       	ld	r30, X+
    1270:	fc 91       	ld	r31, X
    1272:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1274:	1c c0       	rjmp	.+56     	; 0x12ae <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1276:	d7 01       	movw	r26, r14
    1278:	50 96       	adiw	r26, 0x10	; 16
    127a:	ed 91       	ld	r30, X+
    127c:	fc 91       	ld	r31, X
    127e:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1280:	16 c0       	rjmp	.+44     	; 0x12ae <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1282:	43 3f       	cpi	r20, 0xF3	; 243
    1284:	41 f4       	brne	.+16     	; 0x1296 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1286:	d7 01       	movw	r26, r14
    1288:	52 96       	adiw	r26, 0x12	; 18
    128a:	ed 91       	ld	r30, X+
    128c:	fc 91       	ld	r31, X
    128e:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1290:	30 97       	sbiw	r30, 0x00	; 0
    1292:	99 f4       	brne	.+38     	; 0x12ba <midi_input_callbacks+0x188>
    1294:	3a c0       	rjmp	.+116    	; 0x130a <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1296:	41 3f       	cpi	r20, 0xF1	; 241
    1298:	c1 f5       	brne	.+112    	; 0x130a <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    129a:	d7 01       	movw	r26, r14
    129c:	54 96       	adiw	r26, 0x14	; 20
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    12a4:	30 97       	sbiw	r30, 0x00	; 0
    12a6:	49 f4       	brne	.+18     	; 0x12ba <midi_input_callbacks+0x188>
    12a8:	30 c0       	rjmp	.+96     	; 0x130a <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    12aa:	e0 e0       	ldi	r30, 0x00	; 0
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	61 f1       	breq	.+88     	; 0x130a <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    12b2:	81 2f       	mov	r24, r17
    12b4:	8d 7f       	andi	r24, 0xFD	; 253
    12b6:	81 3f       	cpi	r24, 0xF1	; 241
    12b8:	29 f4       	brne	.+10     	; 0x12c4 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    12ba:	4b 2d       	mov	r20, r11
    12bc:	61 2f       	mov	r22, r17
    12be:	c7 01       	movw	r24, r14
    12c0:	09 95       	icall
    12c2:	30 c0       	rjmp	.+96     	; 0x1324 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    12c4:	4b 2d       	mov	r20, r11
    12c6:	61 2f       	mov	r22, r17
    12c8:	6f 70       	andi	r22, 0x0F	; 15
    12ca:	c7 01       	movw	r24, r14
    12cc:	09 95       	icall
    12ce:	2a c0       	rjmp	.+84     	; 0x1324 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    12d0:	84 2f       	mov	r24, r20
    12d2:	0e 94 01 08 	call	0x1002	; 0x1002 <midi_is_realtime>
    12d6:	88 23       	and	r24, r24
    12d8:	31 f0       	breq	.+12     	; 0x12e6 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    12da:	d7 01       	movw	r26, r14
    12dc:	56 96       	adiw	r26, 0x16	; 22
    12de:	ed 91       	ld	r30, X+
    12e0:	fc 91       	ld	r31, X
    12e2:	57 97       	sbiw	r26, 0x17	; 23
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    12e6:	16 3f       	cpi	r17, 0xF6	; 246
    12e8:	81 f4       	brne	.+32     	; 0x130a <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    12ea:	d7 01       	movw	r26, r14
    12ec:	58 96       	adiw	r26, 0x18	; 24
    12ee:	ed 91       	ld	r30, X+
    12f0:	fc 91       	ld	r31, X
    12f2:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    12f4:	30 97       	sbiw	r30, 0x00	; 0
    12f6:	49 f0       	breq	.+18     	; 0x130a <midi_input_callbacks+0x1d8>
            func(device, byte0);
    12f8:	61 2f       	mov	r22, r17
    12fa:	c7 01       	movw	r24, r14
    12fc:	09 95       	icall
    12fe:	12 c0       	rjmp	.+36     	; 0x1324 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1300:	64 30       	cpi	r22, 0x04	; 4
    1302:	71 05       	cpc	r23, r1
    1304:	10 f0       	brcs	.+4      	; 0x130a <midi_input_callbacks+0x1d8>
          cnt = 0;
    1306:	c1 2c       	mov	r12, r1
    1308:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    130a:	d7 01       	movw	r26, r14
    130c:	5c 96       	adiw	r26, 0x1c	; 28
    130e:	ed 91       	ld	r30, X+
    1310:	fc 91       	ld	r31, X
    1312:	5d 97       	sbiw	r26, 0x1d	; 29
    1314:	30 97       	sbiw	r30, 0x00	; 0
    1316:	31 f0       	breq	.+12     	; 0x1324 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1318:	0a 2d       	mov	r16, r10
    131a:	2b 2d       	mov	r18, r11
    131c:	41 2f       	mov	r20, r17
    131e:	b6 01       	movw	r22, r12
    1320:	c7 01       	movw	r24, r14
    1322:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1324:	d7 01       	movw	r26, r14
    1326:	5e 96       	adiw	r26, 0x1e	; 30
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	5f 97       	sbiw	r26, 0x1f	; 31
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	31 f0       	breq	.+12     	; 0x133e <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1332:	0a 2d       	mov	r16, r10
    1334:	2b 2d       	mov	r18, r11
    1336:	41 2f       	mov	r20, r17
    1338:	b6 01       	movw	r22, r12
    133a:	c7 01       	movw	r24, r14
    133c:	09 95       	icall
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	08 95       	ret

0000135a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
    1366:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1368:	86 2f       	mov	r24, r22
    136a:	0e 94 01 08 	call	0x1002	; 0x1002 <midi_is_realtime>
    136e:	88 23       	and	r24, r24
    1370:	69 f0       	breq	.+26     	; 0x138c <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1372:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	41 2f       	mov	r20, r17
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 99 08 	call	0x1132	; 0x1132 <midi_input_callbacks>
    device->input_state = state;
    1388:	fd a2       	std	Y+37, r15	; 0x25
    138a:	a4 c0       	rjmp	.+328    	; 0x14d4 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    138c:	81 2f       	mov	r24, r17
    138e:	0e 94 fd 07 	call	0xffa	; 0xffa <midi_is_statusbyte>
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <midi_process_byte+0x3e>
    1396:	5d c0       	rjmp	.+186    	; 0x1452 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1398:	8d a1       	ldd	r24, Y+37	; 0x25
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	29 f0       	breq	.+10     	; 0x13a8 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    139e:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9f a3       	std	Y+39, r25	; 0x27
    13a6:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    13a8:	81 2f       	mov	r24, r17
    13aa:	0e 94 07 08 	call	0x100e	; 0x100e <midi_packet_length>
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	31 f0       	breq	.+12     	; 0x13be <midi_process_byte+0x64>
    13b2:	b8 f0       	brcs	.+46     	; 0x13e2 <midi_process_byte+0x88>
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	79 f0       	breq	.+30     	; 0x13d6 <midi_process_byte+0x7c>
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	81 f0       	breq	.+32     	; 0x13dc <midi_process_byte+0x82>
    13bc:	46 c0       	rjmp	.+140    	; 0x144a <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	41 2f       	mov	r20, r17
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	ce 01       	movw	r24, r28
    13ce:	0e 94 99 08 	call	0x1132	; 0x1132 <midi_input_callbacks>
        device->input_state = IDLE;
    13d2:	1d a2       	std	Y+37, r1	; 0x25
        break;
    13d4:	7f c0       	rjmp	.+254    	; 0x14d4 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	8d a3       	std	Y+37, r24	; 0x25
        break;
    13da:	7c c0       	rjmp	.+248    	; 0x14d4 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	8d a3       	std	Y+37, r24	; 0x25
        break;
    13e0:	79 c0       	rjmp	.+242    	; 0x14d4 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    13e2:	10 3f       	cpi	r17, 0xF0	; 240
    13e4:	19 f0       	breq	.+6      	; 0x13ec <midi_process_byte+0x92>
    13e6:	17 3f       	cpi	r17, 0xF7	; 247
    13e8:	51 f0       	breq	.+20     	; 0x13fe <midi_process_byte+0xa4>
    13ea:	2b c0       	rjmp	.+86     	; 0x1442 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    13ec:	84 e0       	ldi	r24, 0x04	; 4
    13ee:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    13f0:	80 ef       	ldi	r24, 0xF0	; 240
    13f2:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9f a3       	std	Y+39, r25	; 0x27
    13fa:	8e a3       	std	Y+38, r24	; 0x26
            break;
    13fc:	6b c0       	rjmp	.+214    	; 0x14d4 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    13fe:	4e a1       	ldd	r20, Y+38	; 0x26
    1400:	5f a1       	ldd	r21, Y+39	; 0x27
    1402:	9a 01       	movw	r18, r20
    1404:	ab ea       	ldi	r26, 0xAB	; 171
    1406:	ba ea       	ldi	r27, 0xAA	; 170
    1408:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__umulhisi3>
    140c:	96 95       	lsr	r25
    140e:	87 95       	ror	r24
    1410:	9c 01       	movw	r18, r24
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
    141a:	fa 01       	movw	r30, r20
    141c:	e8 1b       	sub	r30, r24
    141e:	f9 0b       	sbc	r31, r25
    1420:	ec 0f       	add	r30, r28
    1422:	fd 1f       	adc	r31, r29
    1424:	87 ef       	ldi	r24, 0xF7	; 247
    1426:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1428:	ba 01       	movw	r22, r20
    142a:	6f 5f       	subi	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	7f a3       	std	Y+39, r23	; 0x27
    1430:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1432:	0c a1       	ldd	r16, Y+36	; 0x24
    1434:	2b a1       	ldd	r18, Y+35	; 0x23
    1436:	4a a1       	ldd	r20, Y+34	; 0x22
    1438:	ce 01       	movw	r24, r28
    143a:	0e 94 99 08 	call	0x1132	; 0x1132 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    143e:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1440:	49 c0       	rjmp	.+146    	; 0x14d4 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1442:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1444:	1f a2       	std	Y+39, r1	; 0x27
    1446:	1e a2       	std	Y+38, r1	; 0x26
    1448:	45 c0       	rjmp	.+138    	; 0x14d4 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    144a:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    144c:	1f a2       	std	Y+39, r1	; 0x27
    144e:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1450:	41 c0       	rjmp	.+130    	; 0x14d4 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1452:	ed a1       	ldd	r30, Y+37	; 0x25
    1454:	ee 23       	and	r30, r30
    1456:	f1 f1       	breq	.+124    	; 0x14d4 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1458:	4e a1       	ldd	r20, Y+38	; 0x26
    145a:	5f a1       	ldd	r21, Y+39	; 0x27
    145c:	9a 01       	movw	r18, r20
    145e:	ab ea       	ldi	r26, 0xAB	; 171
    1460:	ba ea       	ldi	r27, 0xAA	; 170
    1462:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__umulhisi3>
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	9c 01       	movw	r18, r24
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	9a 01       	movw	r18, r20
    1476:	28 1b       	sub	r18, r24
    1478:	39 0b       	sbc	r19, r25
    147a:	de 01       	movw	r26, r28
    147c:	a2 0f       	add	r26, r18
    147e:	b3 1f       	adc	r27, r19
    1480:	92 96       	adiw	r26, 0x22	; 34
    1482:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1484:	ba 01       	movw	r22, r20
    1486:	6f 5f       	subi	r22, 0xFF	; 255
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	7f a3       	std	Y+39, r23	; 0x27
    148c:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    148e:	21 30       	cpi	r18, 0x01	; 1
    1490:	31 05       	cpc	r19, r1
    1492:	89 f0       	breq	.+34     	; 0x14b6 <midi_process_byte+0x15c>
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	e9 f4       	brne	.+58     	; 0x14d4 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    149a:	0c a1       	ldd	r16, Y+36	; 0x24
    149c:	2b a1       	ldd	r18, Y+35	; 0x23
    149e:	4a a1       	ldd	r20, Y+34	; 0x22
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 94 99 08 	call	0x1132	; 0x1132 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    14a6:	8d a1       	ldd	r24, Y+37	; 0x25
    14a8:	84 30       	cpi	r24, 0x04	; 4
    14aa:	a1 f0       	breq	.+40     	; 0x14d4 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9f a3       	std	Y+39, r25	; 0x27
    14b2:	8e a3       	std	Y+38, r24	; 0x26
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    14b6:	e2 30       	cpi	r30, 0x02	; 2
    14b8:	69 f4       	brne	.+26     	; 0x14d4 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    14ba:	00 e0       	ldi	r16, 0x00	; 0
    14bc:	2b a1       	ldd	r18, Y+35	; 0x23
    14be:	4a a1       	ldd	r20, Y+34	; 0x22
    14c0:	ce 01       	movw	r24, r28
    14c2:	0e 94 99 08 	call	0x1132	; 0x1132 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    14c6:	8d a1       	ldd	r24, Y+37	; 0x25
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9f a3       	std	Y+39, r25	; 0x27
    14d2:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	08 95       	ret

000014e0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    14f2:	dc 01       	movw	r26, r24
    14f4:	90 96       	adiw	r26, 0x20	; 32
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	91 97       	sbiw	r26, 0x21	; 33
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	09 f0       	breq	.+2      	; 0x1502 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1500:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1502:	86 01       	movw	r16, r12
    1504:	08 51       	subi	r16, 0x18	; 24
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	c8 01       	movw	r24, r16
    150a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    150e:	e8 2e       	mov	r14, r24
    1510:	f1 2c       	mov	r15, r1
    1512:	e1 14       	cp	r14, r1
    1514:	f1 04       	cpc	r15, r1
    1516:	91 f0       	breq	.+36     	; 0x153c <midi_device_process+0x5c>
    1518:	c0 e0       	ldi	r28, 0x00	; 0
    151a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	c8 01       	movw	r24, r16
    1520:	0e 94 cb 07 	call	0xf96	; 0xf96 <bytequeue_get>
    1524:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1526:	c6 01       	movw	r24, r12
    1528:	0e 94 ad 09 	call	0x135a	; 0x135a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	c8 01       	movw	r24, r16
    1530:	0e 94 dd 07 	call	0xfba	; 0xfba <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1534:	21 96       	adiw	r28, 0x01	; 1
    1536:	ce 15       	cp	r28, r14
    1538:	df 05       	cpc	r29, r15
    153a:	81 f7       	brne	.-32     	; 0x151c <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	08 95       	ret

0000154e <__divmodhi4>:
    154e:	97 fb       	bst	r25, 7
    1550:	07 2e       	mov	r0, r23
    1552:	16 f4       	brtc	.+4      	; 0x1558 <__divmodhi4+0xa>
    1554:	00 94       	com	r0
    1556:	07 d0       	rcall	.+14     	; 0x1566 <__divmodhi4_neg1>
    1558:	77 fd       	sbrc	r23, 7
    155a:	09 d0       	rcall	.+18     	; 0x156e <__divmodhi4_neg2>
    155c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__udivmodhi4>
    1560:	07 fc       	sbrc	r0, 7
    1562:	05 d0       	rcall	.+10     	; 0x156e <__divmodhi4_neg2>
    1564:	3e f4       	brtc	.+14     	; 0x1574 <__divmodhi4_exit>

00001566 <__divmodhi4_neg1>:
    1566:	90 95       	com	r25
    1568:	81 95       	neg	r24
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	08 95       	ret

0000156e <__divmodhi4_neg2>:
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255

00001574 <__divmodhi4_exit>:
    1574:	08 95       	ret

00001576 <__tablejump2__>:
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	05 90       	lpm	r0, Z+
    157c:	f4 91       	lpm	r31, Z
    157e:	e0 2d       	mov	r30, r0
    1580:	09 94       	ijmp

00001582 <__umulhisi3>:
    1582:	a2 9f       	mul	r26, r18
    1584:	b0 01       	movw	r22, r0
    1586:	b3 9f       	mul	r27, r19
    1588:	c0 01       	movw	r24, r0
    158a:	a3 9f       	mul	r26, r19
    158c:	70 0d       	add	r23, r0
    158e:	81 1d       	adc	r24, r1
    1590:	11 24       	eor	r1, r1
    1592:	91 1d       	adc	r25, r1
    1594:	b2 9f       	mul	r27, r18
    1596:	70 0d       	add	r23, r0
    1598:	81 1d       	adc	r24, r1
    159a:	11 24       	eor	r1, r1
    159c:	91 1d       	adc	r25, r1
    159e:	08 95       	ret

000015a0 <__udivmodhi4>:
    15a0:	aa 1b       	sub	r26, r26
    15a2:	bb 1b       	sub	r27, r27
    15a4:	51 e1       	ldi	r21, 0x11	; 17
    15a6:	07 c0       	rjmp	.+14     	; 0x15b6 <__udivmodhi4_ep>

000015a8 <__udivmodhi4_loop>:
    15a8:	aa 1f       	adc	r26, r26
    15aa:	bb 1f       	adc	r27, r27
    15ac:	a6 17       	cp	r26, r22
    15ae:	b7 07       	cpc	r27, r23
    15b0:	10 f0       	brcs	.+4      	; 0x15b6 <__udivmodhi4_ep>
    15b2:	a6 1b       	sub	r26, r22
    15b4:	b7 0b       	sbc	r27, r23

000015b6 <__udivmodhi4_ep>:
    15b6:	88 1f       	adc	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	5a 95       	dec	r21
    15bc:	a9 f7       	brne	.-22     	; 0x15a8 <__udivmodhi4_loop>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	08 95       	ret

000015c8 <_exit>:
    15c8:	f8 94       	cli

000015ca <__stop_program>:
    15ca:	ff cf       	rjmp	.-2      	; 0x15ca <__stop_program>
