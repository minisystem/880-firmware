
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001b9a  00001c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  00800258  00800258  00001d86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000523d  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001498  00000000  00000000  0000745d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001551  00000000  00000000  000088f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b58  00000000  00000000  00009e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000108e  00000000  00000000  0000a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000227b  00000000  00000000  0000ba2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000dca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	17 0b       	sbc	r17, r23
      b6:	15 0b       	sbc	r17, r21
      b8:	17 0b       	sbc	r17, r23
      ba:	19 0b       	sbc	r17, r25
      bc:	19 0b       	sbc	r17, r25
      be:	1f 0b       	sbc	r17, r31
      c0:	19 0b       	sbc	r17, r25
      c2:	1f 0b       	sbc	r17, r31
      c4:	1f 0b       	sbc	r17, r31
      c6:	1f 0b       	sbc	r17, r31
      c8:	1f 0b       	sbc	r17, r31
      ca:	1f 0b       	sbc	r17, r31
      cc:	19 0b       	sbc	r17, r25
      ce:	1f 0b       	sbc	r17, r31
      d0:	1f 0b       	sbc	r17, r31

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ea e9       	ldi	r30, 0x9A	; 154
      e6:	fb e1       	ldi	r31, 0x1B	; 27
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ae 34       	cpi	r26, 0x4E	; 78
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 8d 05 	call	0xb1a	; 0xb1a <main>
     108:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 2c 04 	call	0x858	; 0x858 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 50 08 	call	0x10a0	; 0x10a0 <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	7f 92       	push	r7
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29

	clear_all_trigs();
     288:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     28c:	05 e0       	ldi	r16, 0x05	; 5
     28e:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     290:	c0 e0       	ldi	r28, 0x00	; 0
     292:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     294:	0f 2e       	mov	r0, r31
     296:	f9 e4       	ldi	r31, 0x49	; 73
     298:	8f 2e       	mov	r8, r31
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	9f 2e       	mov	r9, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fa e4       	ldi	r31, 0x4A	; 74
     2a4:	cf 2e       	mov	r12, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	df 2e       	mov	r13, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f6 e4       	ldi	r31, 0x46	; 70
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f7 e6       	ldi	r31, 0x67	; 103
     2bc:	7f 2e       	mov	r7, r31
     2be:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f8 e6       	ldi	r31, 0x68	; 104
     2c4:	af 2e       	mov	r10, r31
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2cc:	d4 01       	movw	r26, r8
     2ce:	ec 91       	ld	r30, X
     2d0:	8e 2f       	mov	r24, r30
     2d2:	82 95       	swap	r24
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	d6 01       	movw	r26, r12
     2d8:	ec 91       	ld	r30, X
     2da:	e1 70       	andi	r30, 0x01	; 1
     2dc:	e2 95       	swap	r30
     2de:	e0 7f       	andi	r30, 0xF0	; 240
     2e0:	e8 2b       	or	r30, r24
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	d7 01       	movw	r26, r14
     2e6:	8c 91       	ld	r24, X
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	81 70       	andi	r24, 0x01	; 1
     2ee:	78 9e       	mul	r7, r24
     2f0:	e0 0d       	add	r30, r0
     2f2:	f1 1d       	adc	r31, r1
     2f4:	11 24       	eor	r1, r1
     2f6:	ea 58       	subi	r30, 0x8A	; 138
     2f8:	fc 4f       	sbci	r31, 0xFC	; 252
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	0c 2e       	mov	r0, r28
     300:	02 c0       	rjmp	.+4      	; 0x306 <trigger_step+0x98>
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	0a 94       	dec	r0
     308:	e2 f7       	brpl	.-8      	; 0x302 <trigger_step+0x94>
     30a:	80 ff       	sbrs	r24, 0
     30c:	3a c0       	rjmp	.+116    	; 0x382 <trigger_step+0x114>
			turn_on(drum_hit[i].led_index);
     30e:	f8 01       	movw	r30, r16
     310:	80 81       	ld	r24, Z
     312:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     316:	de 01       	movw	r26, r28
     318:	aa 0f       	add	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	ac 0f       	add	r26, r28
     31e:	bd 1f       	adc	r27, r29
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	a0 50       	subi	r26, 0x00	; 0
     326:	bf 4f       	sbci	r27, 0xFF	; 255
     328:	ec 91       	ld	r30, X
     32a:	8e 2f       	mov	r24, r30
     32c:	88 1f       	adc	r24, r24
     32e:	88 27       	eor	r24, r24
     330:	88 1f       	adc	r24, r24
     332:	11 96       	adiw	r26, 0x01	; 1
     334:	ec 91       	ld	r30, X
     336:	e7 70       	andi	r30, 0x07	; 7
     338:	ee 0f       	add	r30, r30
     33a:	e8 2b       	or	r30, r24
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	e8 59       	subi	r30, 0x98	; 152
     340:	fd 4f       	sbci	r31, 0xFD	; 253
     342:	d8 01       	movw	r26, r16
     344:	13 97       	sbiw	r26, 0x03	; 3
     346:	9c 91       	ld	r25, X
     348:	80 81       	ld	r24, Z
     34a:	89 2b       	or	r24, r25
     34c:	80 83       	st	Z, r24
     34e:	f8 01       	movw	r30, r16
     350:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     352:	80 81       	ld	r24, Z
     354:	8f 3f       	cpi	r24, 0xFF	; 255
     356:	a9 f0       	breq	.+42     	; 0x382 <trigger_step+0x114>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     358:	d5 01       	movw	r26, r10
     35a:	13 96       	adiw	r26, 0x03	; 3
     35c:	2c 91       	ld	r18, X
     35e:	13 97       	sbiw	r26, 0x03	; 3
     360:	fe 01       	movw	r30, r28
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ec 0f       	add	r30, r28
     368:	fd 1f       	adc	r31, r29
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ec 5f       	subi	r30, 0xFC	; 252
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	90 81       	ld	r25, Z
     374:	91 70       	andi	r25, 0x01	; 1
     376:	91 95       	neg	r25
     378:	92 27       	eor	r25, r18
     37a:	89 23       	and	r24, r25
     37c:	82 27       	eor	r24, r18
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	0a 5f       	subi	r16, 0xFA	; 250
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	c0 31       	cpi	r28, 0x10	; 16
     38a:	d1 05       	cpc	r29, r1
     38c:	09 f0       	breq	.+2      	; 0x390 <trigger_step+0x122>
     38e:	9e cf       	rjmp	.-196    	; 0x2cc <trigger_step+0x5e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	08 95       	ret

000003ac <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     3ac:	80 91 34 02 	lds	r24, 0x0234
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3b4:	e4 e3       	ldi	r30, 0x34	; 52
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	8f 7b       	andi	r24, 0xBF	; 191
     3ba:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3c4:	80 91 36 02 	lds	r24, 0x0236
     3c8:	86 ff       	sbrs	r24, 6
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3cc:	e6 e3       	ldi	r30, 0x36	; 54
     3ce:	f2 e0       	ldi	r31, 0x02	; 2
     3d0:	8f 7b       	andi	r24, 0xBF	; 191
     3d2:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     3dc:	80 91 38 02 	lds	r24, 0x0238
     3e0:	86 ff       	sbrs	r24, 6
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     3e4:	e8 e3       	ldi	r30, 0x38	; 56
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     3f4:	80 91 3a 02 	lds	r24, 0x023A
     3f8:	86 ff       	sbrs	r24, 6
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     3fc:	ea e3       	ldi	r30, 0x3A	; 58
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	8f 7b       	andi	r24, 0xBF	; 191
     402:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     40c:	80 91 3c 02 	lds	r24, 0x023C
     410:	86 ff       	sbrs	r24, 6
     412:	08 c0       	rjmp	.+16     	; 0x424 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     414:	ec e3       	ldi	r30, 0x3C	; 60
     416:	f2 e0       	ldi	r31, 0x02	; 2
     418:	8f 7b       	andi	r24, 0xBF	; 191
     41a:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     424:	80 91 3e 02 	lds	r24, 0x023E
     428:	86 ff       	sbrs	r24, 6
     42a:	08 c0       	rjmp	.+16     	; 0x43c <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     42c:	ee e3       	ldi	r30, 0x3E	; 62
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	8f 7b       	andi	r24, 0xBF	; 191
     432:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     43c:	80 91 40 02 	lds	r24, 0x0240
     440:	86 ff       	sbrs	r24, 6
     442:	08 c0       	rjmp	.+16     	; 0x454 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     444:	e0 e4       	ldi	r30, 0x40	; 64
     446:	f2 e0       	ldi	r31, 0x02	; 2
     448:	8f 7b       	andi	r24, 0xBF	; 191
     44a:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     454:	80 91 42 02 	lds	r24, 0x0242
     458:	86 ff       	sbrs	r24, 6
     45a:	08 c0       	rjmp	.+16     	; 0x46c <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     45c:	e2 e4       	ldi	r30, 0x42	; 66
     45e:	f2 e0       	ldi	r31, 0x02	; 2
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     46c:	80 91 44 02 	lds	r24, 0x0244
     470:	86 ff       	sbrs	r24, 6
     472:	08 c0       	rjmp	.+16     	; 0x484 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     474:	e4 e4       	ldi	r30, 0x44	; 68
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	8f 7b       	andi	r24, 0xBF	; 191
     47a:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     484:	80 91 46 02 	lds	r24, 0x0246
     488:	86 ff       	sbrs	r24, 6
     48a:	08 c0       	rjmp	.+16     	; 0x49c <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     48c:	e6 e4       	ldi	r30, 0x46	; 70
     48e:	f2 e0       	ldi	r31, 0x02	; 2
     490:	8f 7b       	andi	r24, 0xBF	; 191
     492:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	89 e0       	ldi	r24, 0x09	; 9
     498:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     49c:	80 91 48 02 	lds	r24, 0x0248
     4a0:	86 ff       	sbrs	r24, 6
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4a4:	e8 e4       	ldi	r30, 0x48	; 72
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	8f 7b       	andi	r24, 0xBF	; 191
     4aa:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	8a e0       	ldi	r24, 0x0A	; 10
     4b0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4b4:	08 95       	ret

000004b6 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4c6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4c8:	ee e6       	ldi	r30, 0x6E	; 110
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8d 7f       	andi	r24, 0xFD	; 253
     4d0:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     4d2:	80 91 75 03 	lds	r24, 0x0375
     4d6:	88 60       	ori	r24, 0x08	; 8
     4d8:	80 93 75 03 	sts	0x0375, r24
	
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	8f 91       	pop	r24
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     512:	e3 e7       	ldi	r30, 0x73	; 115
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	81 83       	std	Z+1, r24	; 0x01
     51c:	90 81       	ld	r25, Z
     51e:	89 13       	cpse	r24, r25
     520:	6c c0       	rjmp	.+216    	; 0x5fa <__vector_11+0x10e>
	{
		flag.next_step = 1;
     522:	80 91 75 03 	lds	r24, 0x0375
     526:	81 60       	ori	r24, 0x01	; 1
     528:	80 93 75 03 	sts	0x0375, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     52c:	e5 e7       	ldi	r30, 0x75	; 117
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	80 81       	ld	r24, Z
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	98 0f       	add	r25, r24
     536:	93 70       	andi	r25, 0x03	; 3
     538:	8c 7f       	andi	r24, 0xFC	; 252
     53a:	89 2b       	or	r24, r25
     53c:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     53e:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == (sequencer.step_num_first + sequencer.step_num_second)) { //end of measure - bah. determining end of measure is dependent on mode - editing first part vs second part plus what happens in rhythm mode?
     542:	20 91 49 04 	lds	r18, 0x0449
     546:	82 2f       	mov	r24, r18
     548:	82 95       	swap	r24
     54a:	8f 70       	andi	r24, 0x0F	; 15
     54c:	20 91 4a 04 	lds	r18, 0x044A
     550:	21 70       	andi	r18, 0x01	; 1
     552:	22 95       	swap	r18
     554:	20 7f       	andi	r18, 0xF0	; 240
     556:	28 2b       	or	r18, r24
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	82 0f       	add	r24, r18
     55c:	e8 e4       	ldi	r30, 0x48	; 72
     55e:	f4 e0       	ldi	r31, 0x04	; 4
     560:	38 2f       	mov	r19, r24
     562:	32 95       	swap	r19
     564:	30 7f       	andi	r19, 0xF0	; 240
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	93 2b       	or	r25, r19
     56c:	91 83       	std	Z+1, r25	; 0x01
     56e:	84 fb       	bst	r24, 4
     570:	99 27       	eor	r25, r25
     572:	90 f9       	bld	r25, 0
     574:	82 81       	ldd	r24, Z+2	; 0x02
     576:	8e 7f       	andi	r24, 0xFE	; 254
     578:	89 2b       	or	r24, r25
     57a:	82 83       	std	Z+2, r24	; 0x02
     57c:	80 81       	ld	r24, Z
     57e:	48 2f       	mov	r20, r24
     580:	4f 70       	andi	r20, 0x0F	; 15
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	82 95       	swap	r24
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	84 0f       	add	r24, r20
     58c:	91 1d       	adc	r25, r1
     58e:	28 17       	cp	r18, r24
     590:	39 07       	cpc	r19, r25
     592:	99 f5       	brne	.+102    	; 0x5fa <__vector_11+0x10e>
			//no, actuallys seems OK - 808 plays both parts and just shows LEDs for the ones you are editing	
			sequencer.current_step = 0;
     594:	81 81       	ldd	r24, Z+1	; 0x01
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	81 83       	std	Z+1, r24	; 0x01
     59a:	92 81       	ldd	r25, Z+2	; 0x02
     59c:	9e 7f       	andi	r25, 0xFE	; 254
     59e:	92 83       	std	Z+2, r25	; 0x02
			//update step number
			uint8_t old_step_num = sequencer.step_num_first;
			sequencer.step_num_first = sequencer.step_num_new; //temp test, will need to accommodate first and second part
     5a0:	90 81       	ld	r25, Z
     5a2:	90 7f       	andi	r25, 0xF0	; 240
     5a4:	98 2b       	or	r25, r24
     5a6:	90 83       	st	Z, r25
			if (old_step_num != sequencer.step_num_first) update_step_led_mask();
     5a8:	48 13       	cpse	r20, r24
     5aa:	0e 94 4e 04 	call	0x89c	; 0x89c <update_step_led_mask>
			if (flag.variation_change == 1) {
     5ae:	80 91 75 03 	lds	r24, 0x0375
     5b2:	82 ff       	sbrs	r24, 2
     5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <__vector_11+0xf6>
				flag.variation_change = 0;
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
     5b8:	80 93 75 03 	sts	0x0375, r24
				switch (sequencer.variation_mode) {
     5bc:	80 91 47 04 	lds	r24, 0x0447
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	49 f0       	breq	.+18     	; 0x5d6 <__vector_11+0xea>
     5c4:	10 f0       	brcs	.+4      	; 0x5ca <__vector_11+0xde>
     5c6:	82 30       	cpi	r24, 0x02	; 2
     5c8:	c1 f4       	brne	.+48     	; 0x5fa <__vector_11+0x10e>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     5ca:	e6 e4       	ldi	r30, 0x46	; 70
     5cc:	f4 e0       	ldi	r31, 0x04	; 4
     5ce:	80 81       	ld	r24, Z
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	80 83       	st	Z, r24
					break;
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <__vector_11+0x10e>
				case VAR_B:
					sequencer.variation = VAR_B;
     5d6:	e6 e4       	ldi	r30, 0x46	; 70
     5d8:	f4 e0       	ldi	r31, 0x04	; 4
     5da:	80 81       	ld	r24, Z
     5dc:	81 60       	ori	r24, 0x01	; 1
     5de:	80 83       	st	Z, r24
					break;	
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <__vector_11+0x10e>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     5e2:	80 91 47 04 	lds	r24, 0x0447
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	41 f4       	brne	.+16     	; 0x5fa <__vector_11+0x10e>
					
				sequencer.variation ^= 1<<0; //toggle state
     5ea:	e6 e4       	ldi	r30, 0x46	; 70
     5ec:	f4 e0       	ldi	r31, 0x04	; 4
     5ee:	80 81       	ld	r24, Z
     5f0:	98 2f       	mov	r25, r24
     5f2:	90 95       	com	r25
     5f4:	90 fb       	bst	r25, 0
     5f6:	80 f9       	bld	r24, 0
     5f8:	80 83       	st	Z, r24
			}
			//sequencer.current_measure++;
		}
	} //should make the else if so second condition doesn't need to be tested
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     5fa:	e3 e7       	ldi	r30, 0x73	; 115
     5fc:	f2 e0       	ldi	r31, 0x02	; 2
     5fe:	80 81       	ld	r24, Z
     600:	86 95       	lsr	r24
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	98 13       	cpse	r25, r24
     606:	d8 c0       	rjmp	.+432    	; 0x7b8 <__vector_11+0x2cc>
		
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     608:	40 91 d3 01 	lds	r20, 0x01D3
     60c:	30 91 d6 01 	lds	r19, 0x01D6
     610:	e8 e6       	ldi	r30, 0x68	; 104
     612:	f2 e0       	ldi	r31, 0x02	; 2
     614:	83 2f       	mov	r24, r19
     616:	84 2b       	or	r24, r20
     618:	80 95       	com	r24
     61a:	95 81       	ldd	r25, Z+5	; 0x05
     61c:	89 23       	and	r24, r25
     61e:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     620:	80 91 77 03 	lds	r24, 0x0377
     624:	81 ff       	sbrs	r24, 1
     626:	9a c0       	rjmp	.+308    	; 0x75c <__vector_11+0x270>
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     628:	cc e4       	ldi	r28, 0x4C	; 76
     62a:	d4 e0       	ldi	r29, 0x04	; 4
     62c:	e8 81       	ld	r30, Y
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	b2 96       	adiw	r30, 0x22	; 34
     632:	80 91 46 04 	lds	r24, 0x0446
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	81 70       	andi	r24, 0x01	; 1
     63c:	97 e6       	ldi	r25, 0x67	; 103
     63e:	89 9f       	mul	r24, r25
     640:	e0 0d       	add	r30, r0
     642:	f1 1d       	adc	r31, r1
     644:	11 24       	eor	r1, r1
     646:	ea 58       	subi	r30, 0x8A	; 138
     648:	fc 4f       	sbci	r31, 0xFC	; 252
     64a:	92 81       	ldd	r25, Z+2	; 0x02
     64c:	83 81       	ldd	r24, Z+3	; 0x03
     64e:	e8 e6       	ldi	r30, 0x68	; 104
     650:	f2 e0       	ldi	r31, 0x02	; 2
     652:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     654:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     656:	0e 94 3f 04 	call	0x87e	; 0x87e <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     65a:	88 81       	ld	r24, Y
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	e8 0f       	add	r30, r24
     666:	f9 1f       	adc	r31, r25
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	e0 50       	subi	r30, 0x00	; 0
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	85 81       	ldd	r24, Z+5	; 0x05
     672:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
								
			switch (sequencer.variation_mode) {
     676:	20 91 47 04 	lds	r18, 0x0447
     67a:	21 30       	cpi	r18, 0x01	; 1
     67c:	49 f0       	breq	.+18     	; 0x690 <__vector_11+0x1a4>
     67e:	18 f0       	brcs	.+6      	; 0x686 <__vector_11+0x19a>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	a1 f0       	breq	.+40     	; 0x6ac <__vector_11+0x1c0>
     684:	20 c0       	rjmp	.+64     	; 0x6c6 <__vector_11+0x1da>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     686:	80 91 d3 01 	lds	r24, 0x01D3
     68a:	80 93 4d 04 	sts	0x044D, r24
					break;					
     68e:	1b c0       	rjmp	.+54     	; 0x6c6 <__vector_11+0x1da>
				case VAR_B:
					if (flag.variation_change == 1) {
     690:	80 91 75 03 	lds	r24, 0x0375
     694:	82 ff       	sbrs	r24, 2
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <__vector_11+0x1b6>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     698:	80 91 d3 01 	lds	r24, 0x01D3
     69c:	80 93 4d 04 	sts	0x044D, r24
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <__vector_11+0x1da>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     6a2:	80 91 d6 01 	lds	r24, 0x01D6
     6a6:	80 93 4d 04 	sts	0x044D, r24
     6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <__vector_11+0x1da>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     6ac:	80 91 46 04 	lds	r24, 0x0446
     6b0:	80 fd       	sbrc	r24, 0
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <__vector_11+0x1d2>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     6b4:	80 91 d3 01 	lds	r24, 0x01D3
     6b8:	80 93 4d 04 	sts	0x044D, r24
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <__vector_11+0x1da>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     6be:	80 91 d6 01 	lds	r24, 0x01D6
     6c2:	80 93 4d 04 	sts	0x044D, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     6c6:	80 91 75 02 	lds	r24, 0x0275
     6ca:	83 70       	andi	r24, 0x03	; 3
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	02 97       	sbiw	r24, 0x02	; 2
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <__vector_11+0x1e8>
     6d2:	6b c0       	rjmp	.+214    	; 0x7aa <__vector_11+0x2be>
				
				if (flag.variation_change == 1) {
     6d4:	80 91 75 03 	lds	r24, 0x0375
     6d8:	82 ff       	sbrs	r24, 2
     6da:	2a c0       	rjmp	.+84     	; 0x730 <__vector_11+0x244>
					
					switch (sequencer.variation_mode) {
     6dc:	21 30       	cpi	r18, 0x01	; 1
     6de:	61 f0       	breq	.+24     	; 0x6f8 <__vector_11+0x20c>
     6e0:	18 f0       	brcs	.+6      	; 0x6e8 <__vector_11+0x1fc>
     6e2:	22 30       	cpi	r18, 0x02	; 2
     6e4:	89 f0       	breq	.+34     	; 0x708 <__vector_11+0x21c>
     6e6:	24 c0       	rjmp	.+72     	; 0x730 <__vector_11+0x244>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6e8:	ed e4       	ldi	r30, 0x4D	; 77
     6ea:	f4 e0       	ldi	r31, 0x04	; 4
     6ec:	90 91 d6 01 	lds	r25, 0x01D6
     6f0:	80 81       	ld	r24, Z
     6f2:	89 2b       	or	r24, r25
     6f4:	80 83       	st	Z, r24
							break;
     6f6:	59 c0       	rjmp	.+178    	; 0x7aa <__vector_11+0x2be>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6f8:	ed e4       	ldi	r30, 0x4D	; 77
     6fa:	f4 e0       	ldi	r31, 0x04	; 4
     6fc:	90 91 d6 01 	lds	r25, 0x01D6
     700:	80 81       	ld	r24, Z
     702:	89 2b       	or	r24, r25
     704:	80 83       	st	Z, r24
     706:	51 c0       	rjmp	.+162    	; 0x7aa <__vector_11+0x2be>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     708:	80 91 46 04 	lds	r24, 0x0446
     70c:	80 fd       	sbrc	r24, 0
     70e:	08 c0       	rjmp	.+16     	; 0x720 <__vector_11+0x234>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     710:	ed e4       	ldi	r30, 0x4D	; 77
     712:	f4 e0       	ldi	r31, 0x04	; 4
     714:	90 91 d6 01 	lds	r25, 0x01D6
     718:	80 81       	ld	r24, Z
     71a:	89 2b       	or	r24, r25
     71c:	80 83       	st	Z, r24
     71e:	0a c0       	rjmp	.+20     	; 0x734 <__vector_11+0x248>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     720:	ed e4       	ldi	r30, 0x4D	; 77
     722:	f4 e0       	ldi	r31, 0x04	; 4
     724:	90 91 d3 01 	lds	r25, 0x01D3
     728:	80 81       	ld	r24, Z
     72a:	89 2b       	or	r24, r25
     72c:	80 83       	st	Z, r24
     72e:	02 c0       	rjmp	.+4      	; 0x734 <__vector_11+0x248>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     730:	22 30       	cpi	r18, 0x02	; 2
     732:	d9 f5       	brne	.+118    	; 0x7aa <__vector_11+0x2be>
						if (sequencer.variation == VAR_A) {
     734:	80 91 46 04 	lds	r24, 0x0446
     738:	80 fd       	sbrc	r24, 0
     73a:	08 c0       	rjmp	.+16     	; 0x74c <__vector_11+0x260>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     73c:	ed e4       	ldi	r30, 0x4D	; 77
     73e:	f4 e0       	ldi	r31, 0x04	; 4
     740:	90 91 d6 01 	lds	r25, 0x01D6
     744:	80 81       	ld	r24, Z
     746:	89 2b       	or	r24, r25
     748:	80 83       	st	Z, r24
     74a:	2f c0       	rjmp	.+94     	; 0x7aa <__vector_11+0x2be>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     74c:	ed e4       	ldi	r30, 0x4D	; 77
     74e:	f4 e0       	ldi	r31, 0x04	; 4
     750:	90 91 d3 01 	lds	r25, 0x01D3
     754:	80 81       	ld	r24, Z
     756:	89 2b       	or	r24, r25
     758:	80 83       	st	Z, r24
     75a:	27 c0       	rjmp	.+78     	; 0x7aa <__vector_11+0x2be>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     75c:	e8 e6       	ldi	r30, 0x68	; 104
     75e:	f2 e0       	ldi	r31, 0x02	; 2
     760:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     762:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     764:	20 91 47 04 	lds	r18, 0x0447
     768:	21 30       	cpi	r18, 0x01	; 1
     76a:	31 f0       	breq	.+12     	; 0x778 <__vector_11+0x28c>
     76c:	10 f0       	brcs	.+4      	; 0x772 <__vector_11+0x286>
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	61 f4       	brne	.+24     	; 0x78a <__vector_11+0x29e>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     772:	40 93 4d 04 	sts	0x044D, r20
				break;
     776:	09 c0       	rjmp	.+18     	; 0x78a <__vector_11+0x29e>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     778:	30 93 4d 04 	sts	0x044D, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     77c:	80 91 75 02 	lds	r24, 0x0275
     780:	83 70       	andi	r24, 0x03	; 3
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	02 97       	sbiw	r24, 0x02	; 2
     786:	8c f4       	brge	.+34     	; 0x7aa <__vector_11+0x2be>
     788:	0d c0       	rjmp	.+26     	; 0x7a4 <__vector_11+0x2b8>
     78a:	80 91 75 02 	lds	r24, 0x0275
     78e:	83 70       	andi	r24, 0x03	; 3
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	02 97       	sbiw	r24, 0x02	; 2
     794:	54 f4       	brge	.+20     	; 0x7aa <__vector_11+0x2be>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     796:	22 30       	cpi	r18, 0x02	; 2
     798:	29 f4       	brne	.+10     	; 0x7a4 <__vector_11+0x2b8>
     79a:	ed e4       	ldi	r30, 0x4D	; 77
     79c:	f4 e0       	ldi	r31, 0x04	; 4
     79e:	80 81       	ld	r24, Z
     7a0:	38 2b       	or	r19, r24
     7a2:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     7aa:	e8 e6       	ldi	r30, 0x68	; 104
     7ac:	f2 e0       	ldi	r31, 0x02	; 2
     7ae:	90 91 4d 04 	lds	r25, 0x044D
     7b2:	85 81       	ldd	r24, Z+5	; 0x05
     7b4:	89 2b       	or	r24, r25
     7b6:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9c 01       	movw	r18, r24
     7e6:	22 0f       	add	r18, r18
     7e8:	33 1f       	adc	r19, r19
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	dc 01       	movw	r26, r24
     7f0:	a8 59       	subi	r26, 0x98	; 152
     7f2:	be 4f       	sbci	r27, 0xFE	; 254
     7f4:	2c 91       	ld	r18, X
     7f6:	e2 2f       	mov	r30, r18
     7f8:	ef 70       	andi	r30, 0x0F	; 15
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	e8 59       	subi	r30, 0x98	; 152
     7fe:	fd 4f       	sbci	r31, 0xFD	; 253
     800:	ec 01       	movw	r28, r24
     802:	c9 59       	subi	r28, 0x99	; 153
     804:	de 4f       	sbci	r29, 0xFE	; 254
     806:	30 81       	ld	r19, Z
     808:	88 81       	ld	r24, Y
     80a:	83 2b       	or	r24, r19
     80c:	80 83       	st	Z, r24
	led[led_index].state = 1;
     80e:	82 2f       	mov	r24, r18
     810:	80 61       	ori	r24, 0x10	; 16
     812:	8c 93       	st	X, r24

}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <turn_off>:

void turn_off(uint8_t led_index) {
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	9c 01       	movw	r18, r24
     822:	22 0f       	add	r18, r18
     824:	33 1f       	adc	r19, r19
     826:	82 0f       	add	r24, r18
     828:	93 1f       	adc	r25, r19
     82a:	dc 01       	movw	r26, r24
     82c:	a8 59       	subi	r26, 0x98	; 152
     82e:	be 4f       	sbci	r27, 0xFE	; 254
     830:	2c 91       	ld	r18, X
     832:	e2 2f       	mov	r30, r18
     834:	ef 70       	andi	r30, 0x0F	; 15
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	e8 59       	subi	r30, 0x98	; 152
     83a:	fd 4f       	sbci	r31, 0xFD	; 253
     83c:	ec 01       	movw	r28, r24
     83e:	c9 59       	subi	r28, 0x99	; 153
     840:	de 4f       	sbci	r29, 0xFE	; 254
     842:	88 81       	ld	r24, Y
     844:	80 95       	com	r24
     846:	90 81       	ld	r25, Z
     848:	89 23       	and	r24, r25
     84a:	80 83       	st	Z, r24
	led[led_index].state = 0;
     84c:	82 2f       	mov	r24, r18
     84e:	8f 7e       	andi	r24, 0xEF	; 239
     850:	8c 93       	st	X, r24
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     858:	28 2f       	mov	r18, r24
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	f9 01       	movw	r30, r18
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	2e 0f       	add	r18, r30
     864:	3f 1f       	adc	r19, r31
     866:	f9 01       	movw	r30, r18
     868:	e8 59       	subi	r30, 0x98	; 152
     86a:	fe 4f       	sbci	r31, 0xFE	; 254
     86c:	90 81       	ld	r25, Z
     86e:	94 ff       	sbrs	r25, 4
     870:	03 c0       	rjmp	.+6      	; 0x878 <toggle+0x20>
		
		turn_off(led_index);
     872:	0e 94 0d 04 	call	0x81a	; 0x81a <turn_off>
     876:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     878:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
     87c:	08 95       	ret

0000087e <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     87e:	e8 e6       	ldi	r30, 0x68	; 104
     880:	f2 e0       	ldi	r31, 0x02	; 2
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	8f 70       	andi	r24, 0x0F	; 15
     886:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     888:	87 81       	ldd	r24, Z+7	; 0x07
     88a:	80 72       	andi	r24, 0x20	; 32
     88c:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     88e:	83 81       	ldd	r24, Z+3	; 0x03
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     894:	86 81       	ldd	r24, Z+6	; 0x06
     896:	8f 7c       	andi	r24, 0xCF	; 207
     898:	86 83       	std	Z+6, r24	; 0x06
     89a:	08 95       	ret

0000089c <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     89c:	2f 92       	push	r2
     89e:	3f 92       	push	r3
     8a0:	4f 92       	push	r4
     8a2:	5f 92       	push	r5
     8a4:	6f 92       	push	r6
     8a6:	7f 92       	push	r7
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <update_step_led_mask+0x26>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <update_step_led_mask+0x28>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     8c8:	82 e2       	ldi	r24, 0x22	; 34
     8ca:	ec eb       	ldi	r30, 0xBC	; 188
     8cc:	f3 e0       	ldi	r31, 0x03	; 3
     8ce:	df 01       	movw	r26, r30
     8d0:	98 2f       	mov	r25, r24
     8d2:	1d 92       	st	X+, r1
     8d4:	9a 95       	dec	r25
     8d6:	e9 f7       	brne	.-6      	; 0x8d2 <update_step_led_mask+0x36>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     8d8:	e3 e2       	ldi	r30, 0x23	; 35
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	df 01       	movw	r26, r30
     8de:	1d 92       	st	X+, r1
     8e0:	8a 95       	dec	r24
     8e2:	e9 f7       	brne	.-6      	; 0x8de <update_step_led_mask+0x42>
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
     8e4:	80 91 48 04 	lds	r24, 0x0448
     8e8:	8f 70       	andi	r24, 0x0F	; 15
     8ea:	68 2e       	mov	r6, r24
     8ec:	71 2c       	mov	r7, r1
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     8ee:	c0 90 b8 03 	lds	r12, 0x03B8
     8f2:	d0 90 b9 03 	lds	r13, 0x03B9
     8f6:	e0 90 ba 03 	lds	r14, 0x03BA
     8fa:	f0 90 bb 03 	lds	r15, 0x03BB
		if ((sequencer.pattern[VAR_B].accent >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     8fe:	80 90 1f 04 	lds	r8, 0x041F
     902:	90 90 20 04 	lds	r9, 0x0420
     906:	a0 90 21 04 	lds	r10, 0x0421
     90a:	b0 90 22 04 	lds	r11, 0x0422
     90e:	e8 e7       	ldi	r30, 0x78	; 120
     910:	f3 e0       	ldi	r31, 0x03	; 3
     912:	fa 83       	std	Y+2, r31	; 0x02
     914:	e9 83       	std	Y+1, r30	; 0x01
     916:	0f 2e       	mov	r0, r31
     918:	ff ed       	ldi	r31, 0xDF	; 223
     91a:	4f 2e       	mov	r4, r31
     91c:	f3 e0       	ldi	r31, 0x03	; 3
     91e:	5f 2e       	mov	r5, r31
     920:	f0 2d       	mov	r31, r0
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     926:	22 24       	eor	r2, r2
     928:	23 94       	inc	r2
     92a:	31 2c       	mov	r3, r1
     92c:	55 c0       	rjmp	.+170    	; 0x9d8 <__stack+0xd9>
     92e:	2b 81       	ldd	r18, Y+3	; 0x03
     930:	3c 81       	ldd	r19, Y+4	; 0x04
     932:	08 2e       	mov	r0, r24
     934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0x3b>
     936:	36 95       	lsr	r19
     938:	27 95       	ror	r18
     93a:	0a 94       	dec	r0
     93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0x37>
     93e:	20 ff       	sbrs	r18, 0
     940:	06 c0       	rjmp	.+12     	; 0x94e <__stack+0x4f>
     942:	20 81       	ld	r18, Z
     944:	31 81       	ldd	r19, Z+1	; 0x01
     946:	24 2b       	or	r18, r20
     948:	35 2b       	or	r19, r21
     94a:	31 83       	std	Z+1, r19	; 0x01
     94c:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     94e:	9b 01       	movw	r18, r22
     950:	08 2e       	mov	r0, r24
     952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
     954:	36 95       	lsr	r19
     956:	27 95       	ror	r18
     958:	0a 94       	dec	r0
     95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0x55>
     95c:	20 ff       	sbrs	r18, 0
     95e:	08 c0       	rjmp	.+16     	; 0x970 <__stack+0x71>
     960:	2d 91       	ld	r18, X+
     962:	3c 91       	ld	r19, X
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	24 2b       	or	r18, r20
     968:	35 2b       	or	r19, r21
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	3c 93       	st	X, r19
     96e:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	12 96       	adiw	r26, 0x02	; 2
     974:	32 96       	adiw	r30, 0x02	; 2
     976:	80 31       	cpi	r24, 0x10	; 16
     978:	91 05       	cpc	r25, r1
     97a:	c9 f6       	brne	.-78     	; 0x92e <__stack+0x2f>
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     97c:	d7 01       	movw	r26, r14
     97e:	c6 01       	movw	r24, r12
     980:	00 2e       	mov	r0, r16
     982:	04 c0       	rjmp	.+8      	; 0x98c <__stack+0x8d>
     984:	b6 95       	lsr	r27
     986:	a7 95       	ror	r26
     988:	97 95       	ror	r25
     98a:	87 95       	ror	r24
     98c:	0a 94       	dec	r0
     98e:	d2 f7       	brpl	.-12     	; 0x984 <__stack+0x85>
     990:	80 ff       	sbrs	r24, 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__stack+0xa7>
     994:	ac ed       	ldi	r26, 0xDC	; 220
     996:	b3 e0       	ldi	r27, 0x03	; 3
     998:	8d 91       	ld	r24, X+
     99a:	9c 91       	ld	r25, X
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	84 2b       	or	r24, r20
     9a0:	95 2b       	or	r25, r21
     9a2:	8d 93       	st	X+, r24
     9a4:	9c 93       	st	X, r25
		if ((sequencer.pattern[VAR_B].accent >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     9a6:	d5 01       	movw	r26, r10
     9a8:	c4 01       	movw	r24, r8
     9aa:	00 2e       	mov	r0, r16
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__stack+0xb7>
     9ae:	b6 95       	lsr	r27
     9b0:	a7 95       	ror	r26
     9b2:	97 95       	ror	r25
     9b4:	87 95       	ror	r24
     9b6:	0a 94       	dec	r0
     9b8:	d2 f7       	brpl	.-12     	; 0x9ae <__stack+0xaf>
     9ba:	80 ff       	sbrs	r24, 0
     9bc:	08 c0       	rjmp	.+16     	; 0x9ce <__stack+0xcf>
     9be:	e3 e4       	ldi	r30, 0x43	; 67
     9c0:	f4 e0       	ldi	r31, 0x04	; 4
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	48 2b       	or	r20, r24
     9c8:	59 2b       	or	r21, r25
     9ca:	51 83       	std	Z+1, r21	; 0x01
     9cc:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	60 16       	cp	r6, r16
     9d4:	71 06       	cpc	r7, r17
     9d6:	d4 f0       	brlt	.+52     	; 0xa0c <__stack+0x10d>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9d8:	a9 81       	ldd	r26, Y+1	; 0x01
     9da:	ba 81       	ldd	r27, Y+2	; 0x02
     9dc:	2d 91       	ld	r18, X+
     9de:	3d 91       	ld	r19, X+
     9e0:	ba 83       	std	Y+2, r27	; 0x02
     9e2:	a9 83       	std	Y+1, r26	; 0x01
     9e4:	a1 01       	movw	r20, r2
     9e6:	00 2e       	mov	r0, r16
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__stack+0xef>
     9ea:	44 0f       	add	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	0a 94       	dec	r0
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <__stack+0xeb>
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     9f2:	f2 01       	movw	r30, r4
     9f4:	61 91       	ld	r22, Z+
     9f6:	71 91       	ld	r23, Z+
     9f8:	2f 01       	movw	r4, r30
     9fa:	a3 e2       	ldi	r26, 0x23	; 35
     9fc:	b4 e0       	ldi	r27, 0x04	; 4
     9fe:	ec eb       	ldi	r30, 0xBC	; 188
     a00:	f3 e0       	ldi	r31, 0x03	; 3
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	3c 83       	std	Y+4, r19	; 0x04
     a08:	2b 83       	std	Y+3, r18	; 0x03
     a0a:	91 cf       	rjmp	.-222    	; 0x92e <__stack+0x2f>
		//
		//
	//}
	
	
}	
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	3f 90       	pop	r3
     a36:	2f 90       	pop	r2
     a38:	08 95       	ret

00000a3a <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     a3a:	08 95       	ret

00000a3c <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     a3c:	08 95       	ret

00000a3e <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     a3e:	40 31       	cpi	r20, 0x10	; 16
     a40:	20 f4       	brcc	.+8      	; 0xa4a <note_on_event+0xc>
     a42:	62 2f       	mov	r22, r18
     a44:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     a46:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     a4a:	08 95       	ret

00000a4c <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     a4c:	0e 94 35 06 	call	0xc6a	; 0xc6a <update_tempo>
	read_switches();
     a50:	0e 94 74 08 	call	0x10e8	; 0x10e8 <read_switches>
	check_start_stop_tap();
     a54:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <check_start_stop_tap>
	
	parse_switch_data();
     a58:	0e 94 c2 08 	call	0x1184	; 0x1184 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     a5c:	80 91 76 03 	lds	r24, 0x0376
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	11 f4       	brne	.+4      	; 0xa68 <refresh+0x1c>
     a64:	0e 94 d6 01 	call	0x3ac	; 0x3ac <live_hits>
	update_mode();
     a68:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <update_mode>
	check_clear_switch();
     a6c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <check_clear_switch>
	check_variation_switches();
     a70:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <check_variation_switches>
	check_inst_switches();	
     a74:	0e 94 37 09 	call	0x126e	; 0x126e <check_inst_switches>
	update_step_board();
     a78:	0e 94 15 07 	call	0xe2a	; 0xe2a <update_step_board>
	//update_step_led_mask();
	process_step();
     a7c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     a80:	0e 94 50 08 	call	0x10a0	; 0x10a0 <update_spi>
	PORTD &= ~(1<<TRIG);
     a84:	5d 98       	cbi	0x0b, 5	; 11
     a86:	08 95       	ret

00000a88 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     a88:	8f e1       	ldi	r24, 0x1F	; 31
     a8a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     a8e:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     a92:	88 ed       	ldi	r24, 0xD8	; 216
     a94:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     a98:	51 9a       	sbi	0x0a, 1	; 10
     a9a:	08 95       	ret

00000a9c <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	1f 92       	push	r1
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     ac8:	80 91 c6 00 	lds	r24, 0x00C6
     acc:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     ace:	ae 01       	movw	r20, r28
     ad0:	4f 5f       	subi	r20, 0xFF	; 255
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	88 e8       	ldi	r24, 0x88	; 136
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     ade:	0f 90       	pop	r0
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_20>:

ISR (USART0_TX_vect) {
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1


	
}
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     b1a:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     b1c:	8d b1       	in	r24, 0x0d	; 13
     b1e:	8c 60       	ori	r24, 0x0C	; 12
     b20:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     b22:	87 b1       	in	r24, 0x07	; 7
     b24:	8e 60       	ori	r24, 0x0E	; 14
     b26:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     b28:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     b2a:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     b2c:	88 b1       	in	r24, 0x08	; 8
     b2e:	81 7f       	andi	r24, 0xF1	; 241
     b30:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     b32:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     b34:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     b36:	80 e5       	ldi	r24, 0x50	; 80
     b38:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     b3c:	ed ea       	ldi	r30, 0xAD	; 173
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     b4c:	8d e1       	ldi	r24, 0x1D	; 29
     b4e:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
	turn_on(FILL_MANUAL);
     b52:	82 e2       	ldi	r24, 0x22	; 34
     b54:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
	
	update_spi();
     b58:	0e 94 50 08 	call	0x10a0	; 0x10a0 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     b5c:	84 b5       	in	r24, 0x24	; 36
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     b62:	81 ee       	ldi	r24, 0xE1	; 225
     b64:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     b66:	88 e8       	ldi	r24, 0x88	; 136
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 2d 0b 	call	0x165a	; 0x165a <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     b6e:	6f e1       	ldi	r22, 0x1F	; 31
     b70:	75 e0       	ldi	r23, 0x05	; 5
     b72:	88 e8       	ldi	r24, 0x88	; 136
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 21 0b 	call	0x1642	; 0x1642 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     b7a:	6d e1       	ldi	r22, 0x1D	; 29
     b7c:	75 e0       	ldi	r23, 0x05	; 5
     b7e:	88 e8       	ldi	r24, 0x88	; 136
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 25 0b 	call	0x164a	; 0x164a <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     b86:	6e e1       	ldi	r22, 0x1E	; 30
     b88:	75 e0       	ldi	r23, 0x05	; 5
     b8a:	88 e8       	ldi	r24, 0x88	; 136
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 29 0b 	call	0x1652	; 0x1652 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     b92:	0e 94 44 05 	call	0xa88	; 0xa88 <setup_midi_usart>
	
	setup_internal_clock();
     b96:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     b9a:	e3 e7       	ldi	r30, 0x73	; 115
     b9c:	f2 e0       	ldi	r31, 0x02	; 2
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	c1 83       	std	Z+1, r28	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     ba6:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     baa:	80 91 75 03 	lds	r24, 0x0375
     bae:	88 60       	ori	r24, 0x08	; 8
     bb0:	80 93 75 03 	sts	0x0375, r24
	sequencer.START = 0;
     bb4:	e7 e7       	ldi	r30, 0x77	; 119
     bb6:	f3 e0       	ldi	r31, 0x03	; 3
     bb8:	80 81       	ld	r24, Z
     bba:	8d 7f       	andi	r24, 0xFD	; 253
     bbc:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num_first = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     bbe:	e8 e4       	ldi	r30, 0x48	; 72
     bc0:	f4 e0       	ldi	r31, 0x04	; 4
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 60       	ori	r24, 0x0F	; 15
     bc6:	80 83       	st	Z, r24
	sequencer.step_num_new = 15;
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	8f 60       	ori	r24, 0x0F	; 15
     bcc:	81 83       	std	Z+1, r24	; 0x01
	sequencer.variation_mode = VAR_A;
     bce:	10 92 47 04 	sts	0x0447, r1
	turn_on(BASIC_VAR_A_LED);
     bd2:	84 e2       	ldi	r24, 0x24	; 36
     bd4:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
	sequencer.mode = PATTERN_FIRST;
     bd8:	c0 93 76 03 	sts	0x0376, r28
	turn_on(FIRST_PART_LED);
     bdc:	8a e2       	ldi	r24, 0x2A	; 42
     bde:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
	turn_on(SCALE_3_LED);
     be2:	87 e2       	ldi	r24, 0x27	; 39
     be4:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
	sei(); //enable global interrupts	
     be8:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     bea:	88 e8       	ldi	r24, 0x88	; 136
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	0e 94 57 0d 	call	0x1aae	; 0x1aae <midi_device_process>
	
	refresh();		
     bf2:	0e 94 26 05 	call	0xa4c	; 0xa4c <refresh>

	
	}
     bf6:	f9 cf       	rjmp	.-14     	; 0xbea <main+0xd0>

00000bf8 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     bf8:	80 91 52 02 	lds	r24, 0x0252
     bfc:	86 ff       	sbrs	r24, 6
     bfe:	34 c0       	rjmp	.+104    	; 0xc68 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     c00:	e2 e5       	ldi	r30, 0x52	; 82
     c02:	f2 e0       	ldi	r31, 0x02	; 2
     c04:	8f 7b       	andi	r24, 0xBF	; 191
     c06:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     c08:	80 91 77 03 	lds	r24, 0x0377
     c0c:	80 ff       	sbrs	r24, 0
     c0e:	0c c0       	rjmp	.+24     	; 0xc28 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     c10:	80 91 59 02 	lds	r24, 0x0259
     c14:	88 23       	and	r24, r24
     c16:	21 f0       	breq	.+8      	; 0xc20 <update_mode+0x28>
     c18:	81 50       	subi	r24, 0x01	; 1
     c1a:	80 93 59 02 	sts	0x0259, r24
     c1e:	0e c0       	rjmp	.+28     	; 0xc3c <update_mode+0x44>
     c20:	85 e0       	ldi	r24, 0x05	; 5
     c22:	80 93 59 02 	sts	0x0259, r24
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c28:	80 91 59 02 	lds	r24, 0x0259
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	86 30       	cpi	r24, 0x06	; 6
     c30:	19 f0       	breq	.+6      	; 0xc38 <update_mode+0x40>
     c32:	80 93 59 02 	sts	0x0259, r24
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <update_mode+0x44>
     c38:	10 92 59 02 	sts	0x0259, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c3c:	20 91 59 02 	lds	r18, 0x0259
     c40:	e2 2f       	mov	r30, r18
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	e4 5f       	subi	r30, 0xF4	; 244
     c46:	fd 4f       	sbci	r31, 0xFD	; 253
     c48:	80 81       	ld	r24, Z
     c4a:	80 93 76 03 	sts	0x0376, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     c4e:	e8 e6       	ldi	r30, 0x68	; 104
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <update_mode+0x64>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	2a 95       	dec	r18
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     c60:	94 81       	ldd	r25, Z+4	; 0x04
     c62:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     c64:	89 2b       	or	r24, r25
     c66:	84 83       	std	Z+4, r24	; 0x04
     c68:	08 95       	ret

00000c6a <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     c6a:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     c6e:	90 93 5d 02 	sts	0x025D, r25
     c72:	80 93 5c 02 	sts	0x025C, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     c76:	20 91 5a 02 	lds	r18, 0x025A
     c7a:	30 91 5b 02 	lds	r19, 0x025B
     c7e:	82 1b       	sub	r24, r18
     c80:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     c82:	95 95       	asr	r25
     c84:	87 95       	ror	r24
     c86:	95 95       	asr	r25
     c88:	87 95       	ror	r24
     c8a:	82 0f       	add	r24, r18
     c8c:	93 1f       	adc	r25, r19
     c8e:	90 93 5b 02 	sts	0x025B, r25
     c92:	80 93 5a 02 	sts	0x025A, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     c96:	23 e6       	ldi	r18, 0x63	; 99
     c98:	34 e0       	ldi	r19, 0x04	; 4
     c9a:	a9 01       	movw	r20, r18
     c9c:	48 1b       	sub	r20, r24
     c9e:	59 0b       	sbc	r21, r25
     ca0:	ca 01       	movw	r24, r20
     ca2:	e3 e7       	ldi	r30, 0x73	; 115
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	54 83       	std	Z+4, r21	; 0x04
     ca8:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     caa:	25 81       	ldd	r18, Z+5	; 0x05
     cac:	36 81       	ldd	r19, Z+6	; 0x06
     cae:	42 17       	cp	r20, r18
     cb0:	53 07       	cpc	r21, r19
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     cb4:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     cb8:	e3 e7       	ldi	r30, 0x73	; 115
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	83 81       	ldd	r24, Z+3	; 0x03
     cbe:	94 81       	ldd	r25, Z+4	; 0x04
     cc0:	96 83       	std	Z+6, r25	; 0x06
     cc2:	85 83       	std	Z+5, r24	; 0x05
     cc4:	08 95       	ret

00000cc6 <process_step>:
	}
	
	return step_mask;
}

void process_step(void) {
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     cd8:	80 91 77 03 	lds	r24, 0x0377
     cdc:	81 ff       	sbrs	r24, 1
     cde:	94 c0       	rjmp	.+296    	; 0xe08 <process_step+0x142>
			
			if (sequencer.mode == PATTERN_FIRST) {	
     ce0:	80 91 76 03 	lds	r24, 0x0376
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	09 f0       	breq	.+2      	; 0xcea <process_step+0x24>
     ce8:	96 c0       	rjmp	.+300    	; 0xe16 <process_step+0x150>
				if (flag.next_step) {
     cea:	80 91 75 03 	lds	r24, 0x0375
     cee:	80 ff       	sbrs	r24, 0
     cf0:	92 c0       	rjmp	.+292    	; 0xe16 <process_step+0x150>
					flag.next_step = 0;
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	80 93 75 03 	sts	0x0375, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     cf8:	88 70       	andi	r24, 0x08	; 8
     cfa:	88 23       	and	r24, r24
     cfc:	f1 f3       	breq	.-4      	; 0xcfa <process_step+0x34>
					PORTD |= (1<<TRIG);
     cfe:	5d 9a       	sbi	0x0b, 5	; 11
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d00:	0f 2e       	mov	r0, r31
     d02:	f9 e4       	ldi	r31, 0x49	; 73
     d04:	ef 2e       	mov	r14, r31
     d06:	f4 e0       	ldi	r31, 0x04	; 4
     d08:	ff 2e       	mov	r15, r31
     d0a:	f0 2d       	mov	r31, r0
     d0c:	d7 01       	movw	r26, r14
     d0e:	9c 91       	ld	r25, X
     d10:	89 2f       	mov	r24, r25
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	0a e4       	ldi	r16, 0x4A	; 74
     d18:	14 e0       	ldi	r17, 0x04	; 4
     d1a:	f8 01       	movw	r30, r16
     d1c:	90 81       	ld	r25, Z
     d1e:	91 70       	andi	r25, 0x01	; 1
     d20:	92 95       	swap	r25
     d22:	90 7f       	andi	r25, 0xF0	; 240
     d24:	98 2b       	or	r25, r24
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a9 01       	movw	r20, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <process_step+0x6c>
     d2e:	44 0f       	add	r20, r20
     d30:	55 1f       	adc	r21, r21
     d32:	9a 95       	dec	r25
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <process_step+0x68>
     d36:	ca 01       	movw	r24, r20
     d38:	e0 91 4c 04 	lds	r30, 0x044C
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	b2 96       	adiw	r30, 0x22	; 34
     d40:	0f 2e       	mov	r0, r31
     d42:	f6 e4       	ldi	r31, 0x46	; 70
     d44:	cf 2e       	mov	r12, r31
     d46:	f4 e0       	ldi	r31, 0x04	; 4
     d48:	df 2e       	mov	r13, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	d6 01       	movw	r26, r12
     d4e:	2c 91       	ld	r18, X
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	0f 2e       	mov	r0, r31
     d56:	f7 e6       	ldi	r31, 0x67	; 103
     d58:	bf 2e       	mov	r11, r31
     d5a:	f0 2d       	mov	r31, r0
     d5c:	21 70       	andi	r18, 0x01	; 1
     d5e:	b2 9e       	mul	r11, r18
     d60:	e0 0d       	add	r30, r0
     d62:	f1 1d       	adc	r31, r1
     d64:	11 24       	eor	r1, r1
     d66:	ea 58       	subi	r30, 0x8A	; 138
     d68:	fc 4f       	sbci	r31, 0xFC	; 252
     d6a:	32 81       	ldd	r19, Z+2	; 0x02
     d6c:	23 81       	ldd	r18, Z+3	; 0x03
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     d6e:	e8 e6       	ldi	r30, 0x68	; 104
     d70:	f2 e0       	ldi	r31, 0x02	; 2
     d72:	43 2f       	mov	r20, r19
     d74:	48 23       	and	r20, r24
     d76:	40 95       	com	r20
			if (sequencer.mode == PATTERN_FIRST) {	
				if (flag.next_step) {
					flag.next_step = 0;
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d78:	38 2b       	or	r19, r24
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
     d7a:	34 23       	and	r19, r20
     d7c:	31 83       	std	Z+1, r19	; 0x01
					//if (sequencer.step_num_first < 8) spi_data[1] &= 255 >> (7-sequencer.step_num_first);//mask instrument LEDs above step number
					spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
					spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d7e:	82 2f       	mov	r24, r18
     d80:	89 23       	and	r24, r25
     d82:	80 95       	com	r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
					spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));
					//if (sequencer.step_num_first < 8) spi_data[1] &= 255 >> (7-sequencer.step_num_first);//mask instrument LEDs above step number
					spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     d84:	29 2b       	or	r18, r25
					spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d86:	28 23       	and	r18, r24
     d88:	20 83       	st	Z, r18
					//spi_data[0] &= (0xFF << (15 - sequencer.step_num_first)) >> 8;
					trigger_step();
     d8a:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     d8e:	f6 01       	movw	r30, r12
     d90:	80 81       	ld	r24, Z
     d92:	81 70       	andi	r24, 0x01	; 1
     d94:	c8 2f       	mov	r28, r24
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	df 2f       	mov	r29, r31
     d9a:	bc 9e       	mul	r11, r28
     d9c:	f0 01       	movw	r30, r0
     d9e:	bd 9e       	mul	r11, r29
     da0:	f0 0d       	add	r31, r0
     da2:	11 24       	eor	r1, r1
     da4:	e8 54       	subi	r30, 0x48	; 72
     da6:	fc 4f       	sbci	r31, 0xFC	; 252
     da8:	d7 01       	movw	r26, r14
     daa:	8c 91       	ld	r24, X
     dac:	98 2f       	mov	r25, r24
     dae:	92 95       	swap	r25
     db0:	9f 70       	andi	r25, 0x0F	; 15
     db2:	d8 01       	movw	r26, r16
     db4:	8c 91       	ld	r24, X
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	82 95       	swap	r24
     dba:	80 7f       	andi	r24, 0xF0	; 240
     dbc:	89 2b       	or	r24, r25
     dbe:	40 81       	ld	r20, Z
     dc0:	51 81       	ldd	r21, Z+1	; 0x01
     dc2:	62 81       	ldd	r22, Z+2	; 0x02
     dc4:	73 81       	ldd	r23, Z+3	; 0x03
     dc6:	8a 01       	movw	r16, r20
     dc8:	9b 01       	movw	r18, r22
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <process_step+0x10e>
     dcc:	36 95       	lsr	r19
     dce:	27 95       	ror	r18
     dd0:	17 95       	ror	r17
     dd2:	07 95       	ror	r16
     dd4:	8a 95       	dec	r24
     dd6:	d2 f7       	brpl	.-12     	; 0xdcc <process_step+0x106>
     dd8:	00 ff       	sbrs	r16, 0
     dda:	08 c0       	rjmp	.+16     	; 0xdec <process_step+0x126>
						spi_data[8] |= 1<<ACCENT;
     ddc:	e8 e6       	ldi	r30, 0x68	; 104
     dde:	f2 e0       	ldi	r31, 0x02	; 2
     de0:	80 85       	ldd	r24, Z+8	; 0x08
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     de6:	84 e1       	ldi	r24, 0x14	; 20
     de8:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     dec:	ee e6       	ldi	r30, 0x6E	; 110
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     df6:	85 b5       	in	r24, 0x25	; 37
     df8:	83 60       	ori	r24, 0x03	; 3
     dfa:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
     dfc:	80 91 75 03 	lds	r24, 0x0375
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	80 93 75 03 	sts	0x0375, r24
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <process_step+0x150>
				
				//handle patterns >16 steps here
				
			}
				
		} else if (flag.next_step){
     e08:	80 91 75 03 	lds	r24, 0x0375
     e0c:	80 ff       	sbrs	r24, 0
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <process_step+0x150>
			
			flag.next_step = 0;
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	80 93 75 03 	sts	0x0375, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	08 95       	ret

00000e2a <update_step_board>:

void update_step_board() {
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
	
	if (sequencer.START) {
     e4c:	80 91 77 03 	lds	r24, 0x0377
     e50:	81 ff       	sbrs	r24, 1
     e52:	0a c1       	rjmp	.+532    	; 0x1068 <update_step_board+0x23e>
		
			switch (sequencer.mode) {		
     e54:	90 91 76 03 	lds	r25, 0x0376
     e58:	91 30       	cpi	r25, 0x01	; 1
     e5a:	09 f0       	breq	.+2      	; 0xe5e <update_step_board+0x34>
     e5c:	05 c1       	rjmp	.+522    	; 0x1068 <update_step_board+0x23e>
			
			case PATTERN_FIRST:
			
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e5e:	82 ff       	sbrs	r24, 2
     e60:	26 c0       	rjmp	.+76     	; 0xeae <update_step_board+0x84>
					
					for (int i = 0; i < 16; i++) {
						
							if (button[i].state) {
     e62:	80 91 12 02 	lds	r24, 0x0212
     e66:	86 fd       	sbrc	r24, 6
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <update_step_board+0x56>
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ee 5e       	subi	r30, 0xEE	; 238
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	20 81       	ld	r18, Z
     e7a:	26 ff       	sbrs	r18, 6
     e7c:	13 c0       	rjmp	.+38     	; 0xea4 <update_step_board+0x7a>
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <update_step_board+0x5a>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     e84:	fc 01       	movw	r30, r24
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	ee 5e       	subi	r30, 0xEE	; 238
     e8c:	fd 4f       	sbci	r31, 0xFD	; 253
     e8e:	90 81       	ld	r25, Z
     e90:	9f 7b       	andi	r25, 0xBF	; 191
     e92:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     e94:	e8 e4       	ldi	r30, 0x48	; 72
     e96:	f4 e0       	ldi	r31, 0x04	; 4
     e98:	8f 70       	andi	r24, 0x0F	; 15
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	90 7f       	andi	r25, 0xF0	; 240
     e9e:	89 2b       	or	r24, r25
     ea0:	81 83       	std	Z+1, r24	; 0x01
								//if (sequencer.current_step > sequencer.step_num_first)
								break;// - should we break out of here? multiple presses will mess things up, right?
     ea2:	e2 c0       	rjmp	.+452    	; 0x1068 <update_step_board+0x23e>
			
			case PATTERN_FIRST:
			
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < 16; i++) {
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	80 31       	cpi	r24, 0x10	; 16
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f7       	brne	.-62     	; 0xe6e <update_step_board+0x44>
     eac:	dd c0       	rjmp	.+442    	; 0x1068 <update_step_board+0x23e>
						
					}
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     eae:	80 91 4c 04 	lds	r24, 0x044C
     eb2:	80 31       	cpi	r24, 0x10	; 16
     eb4:	c1 f0       	breq	.+48     	; 0xee6 <update_step_board+0xbc>
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
				
						toggle(i);
						button[i].state ^= button[i].state;
						sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now
     eba:	0f 2e       	mov	r0, r31
     ebc:	f6 e4       	ldi	r31, 0x46	; 70
     ebe:	cf 2e       	mov	r12, r31
     ec0:	f4 e0       	ldi	r31, 0x04	; 4
     ec2:	df 2e       	mov	r13, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	0f 2e       	mov	r0, r31
     ec8:	fc e4       	ldi	r31, 0x4C	; 76
     eca:	8f 2e       	mov	r8, r31
     ecc:	f4 e0       	ldi	r31, 0x04	; 4
     ece:	9f 2e       	mov	r9, r31
     ed0:	f0 2d       	mov	r31, r0
     ed2:	0f 2e       	mov	r0, r31
     ed4:	f7 e6       	ldi	r31, 0x67	; 103
     ed6:	7f 2e       	mov	r7, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	aa 24       	eor	r10, r10
     edc:	a3 94       	inc	r10
     ede:	b1 2c       	mov	r11, r1
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
     ee0:	08 e4       	ldi	r16, 0x48	; 72
     ee2:	14 e0       	ldi	r17, 0x04	; 4
     ee4:	6e c0       	rjmp	.+220    	; 0xfc2 <update_step_board+0x198>
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     ee6:	c0 e0       	ldi	r28, 0x00	; 0
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
				
						if (button[i].state) {
					
							toggle(i);
							button[i].state ^= button[i].state;
							sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     eea:	0f 2e       	mov	r0, r31
     eec:	f6 e4       	ldi	r31, 0x46	; 70
     eee:	af 2e       	mov	r10, r31
     ef0:	f4 e0       	ldi	r31, 0x04	; 4
     ef2:	bf 2e       	mov	r11, r31
     ef4:	f0 2d       	mov	r31, r0
     ef6:	cc 24       	eor	r12, r12
     ef8:	c3 94       	inc	r12
     efa:	d1 2c       	mov	r13, r1
     efc:	0f 2e       	mov	r0, r31
     efe:	f7 e6       	ldi	r31, 0x67	; 103
     f00:	3f 2e       	mov	r3, r31
     f02:	f0 2d       	mov	r31, r0
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f04:	0f 2e       	mov	r0, r31
     f06:	fc e4       	ldi	r31, 0x4C	; 76
     f08:	ef 2e       	mov	r14, r31
     f0a:	f4 e0       	ldi	r31, 0x04	; 4
     f0c:	ff 2e       	mov	r15, r31
     f0e:	f0 2d       	mov	r31, r0
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     f10:	0f 2e       	mov	r0, r31
     f12:	f8 e4       	ldi	r31, 0x48	; 72
     f14:	8f 2e       	mov	r8, r31
     f16:	f4 e0       	ldi	r31, 0x04	; 4
     f18:	9f 2e       	mov	r9, r31
     f1a:	f0 2d       	mov	r31, r0
				
						if (button[i].state) {
     f1c:	fe 01       	movw	r30, r28
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 5e       	subi	r30, 0xEE	; 238
     f24:	fd 4f       	sbci	r31, 0xFD	; 253
     f26:	80 81       	ld	r24, Z
     f28:	86 ff       	sbrs	r24, 6
     f2a:	41 c0       	rjmp	.+130    	; 0xfae <update_step_board+0x184>
					
							toggle(i);
     f2c:	8c 2f       	mov	r24, r28
     f2e:	0e 94 2c 04 	call	0x858	; 0x858 <toggle>
							button[i].state ^= button[i].state;
     f32:	fe 01       	movw	r30, r28
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ee 5e       	subi	r30, 0xEE	; 238
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7b       	andi	r24, 0xBF	; 191
     f40:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].accent ^= 1<<i; //just toggle first bit
     f42:	d5 01       	movw	r26, r10
     f44:	8c 91       	ld	r24, X
     f46:	08 2f       	mov	r16, r24
     f48:	01 70       	andi	r16, 0x01	; 1
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	30 9e       	mul	r3, r16
     f4e:	c0 01       	movw	r24, r0
     f50:	31 9e       	mul	r3, r17
     f52:	90 0d       	add	r25, r0
     f54:	11 24       	eor	r1, r1
     f56:	fc 01       	movw	r30, r24
     f58:	e8 54       	subi	r30, 0x48	; 72
     f5a:	fc 4f       	sbci	r31, 0xFC	; 252
     f5c:	96 01       	movw	r18, r12
     f5e:	0c 2e       	mov	r0, r28
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <update_step_board+0x13c>
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <update_step_board+0x138>
     f6a:	29 01       	movw	r4, r18
     f6c:	03 2e       	mov	r0, r19
     f6e:	00 0c       	add	r0, r0
     f70:	66 08       	sbc	r6, r6
     f72:	77 08       	sbc	r7, r7
     f74:	40 81       	ld	r20, Z
     f76:	51 81       	ldd	r21, Z+1	; 0x01
     f78:	62 81       	ldd	r22, Z+2	; 0x02
     f7a:	73 81       	ldd	r23, Z+3	; 0x03
     f7c:	44 25       	eor	r20, r4
     f7e:	55 25       	eor	r21, r5
     f80:	66 25       	eor	r22, r6
     f82:	77 25       	eor	r23, r7
     f84:	40 83       	st	Z, r20
     f86:	51 83       	std	Z+1, r21	; 0x01
     f88:	62 83       	std	Z+2, r22	; 0x02
     f8a:	73 83       	std	Z+3, r23	; 0x03
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f8c:	d7 01       	movw	r26, r14
     f8e:	ec 91       	ld	r30, X
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	b2 96       	adiw	r30, 0x22	; 34
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	8e 0f       	add	r24, r30
     f9a:	9f 1f       	adc	r25, r31
     f9c:	fc 01       	movw	r30, r24
     f9e:	ea 58       	subi	r30, 0x8A	; 138
     fa0:	fc 4f       	sbci	r31, 0xFC	; 252
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	28 27       	eor	r18, r24
     fa8:	39 27       	eor	r19, r25
     faa:	33 83       	std	Z+3, r19	; 0x03
     fac:	22 83       	std	Z+2, r18	; 0x02
					
					break;
				}
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of PATTERN_SECOND
     fae:	21 96       	adiw	r28, 0x01	; 1
     fb0:	f4 01       	movw	r30, r8
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 70       	andi	r24, 0x0F	; 15
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	8c 17       	cp	r24, r28
     fba:	9d 07       	cpc	r25, r29
     fbc:	0c f0       	brlt	.+2      	; 0xfc0 <update_step_board+0x196>
     fbe:	ae cf       	rjmp	.-164    	; 0xf1c <update_step_board+0xf2>
     fc0:	53 c0       	rjmp	.+166    	; 0x1068 <update_step_board+0x23e>
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
     fc2:	fe 01       	movw	r30, r28
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	ee 5e       	subi	r30, 0xEE	; 238
     fca:	fd 4f       	sbci	r31, 0xFD	; 253
     fcc:	80 81       	ld	r24, Z
     fce:	86 ff       	sbrs	r24, 6
     fd0:	42 c0       	rjmp	.+132    	; 0x1056 <update_step_board+0x22c>
				
						toggle(i);
     fd2:	8c 2f       	mov	r24, r28
     fd4:	0e 94 2c 04 	call	0x858	; 0x858 <toggle>
						button[i].state ^= button[i].state;
     fd8:	fe 01       	movw	r30, r28
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	df 01       	movw	r26, r30
     fe0:	ae 5e       	subi	r26, 0xEE	; 238
     fe2:	bd 4f       	sbci	r27, 0xFD	; 253
     fe4:	8c 91       	ld	r24, X
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
						sequencer.pattern[sequencer.variation].part[i] ^= 1<<sequencer.current_inst; //just work with first part of pattern and only 16 steps for now
     fea:	d6 01       	movw	r26, r12
     fec:	8c 91       	ld	r24, X
     fee:	80 fb       	bst	r24, 0
     ff0:	ee 24       	eor	r14, r14
     ff2:	e0 f8       	bld	r14, 0
     ff4:	f1 2c       	mov	r15, r1
     ff6:	d4 01       	movw	r26, r8
     ff8:	4c 91       	ld	r20, X
     ffa:	24 2f       	mov	r18, r20
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	7e 9c       	mul	r7, r14
    1000:	c0 01       	movw	r24, r0
    1002:	7f 9c       	mul	r7, r15
    1004:	90 0d       	add	r25, r0
    1006:	11 24       	eor	r1, r1
    1008:	e8 0f       	add	r30, r24
    100a:	f9 1f       	adc	r31, r25
    100c:	ea 58       	subi	r30, 0x8A	; 138
    100e:	fc 4f       	sbci	r31, 0xFC	; 252
    1010:	b5 01       	movw	r22, r10
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <update_step_board+0x1ee>
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	4a 95       	dec	r20
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <update_step_board+0x1ea>
    101c:	ab 01       	movw	r20, r22
    101e:	62 81       	ldd	r22, Z+2	; 0x02
    1020:	73 81       	ldd	r23, Z+3	; 0x03
    1022:	46 27       	eor	r20, r22
    1024:	57 27       	eor	r21, r23
    1026:	53 83       	std	Z+3, r21	; 0x03
    1028:	42 83       	std	Z+2, r20	; 0x02
						sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    102a:	f9 01       	movw	r30, r18
    102c:	b2 96       	adiw	r30, 0x22	; 34
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	8e 0f       	add	r24, r30
    1034:	9f 1f       	adc	r25, r31
    1036:	fc 01       	movw	r30, r24
    1038:	ea 58       	subi	r30, 0x8A	; 138
    103a:	fc 4f       	sbci	r31, 0xFC	; 252
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	95 01       	movw	r18, r10
    1042:	0c 2e       	mov	r0, r28
    1044:	02 c0       	rjmp	.+4      	; 0x104a <update_step_board+0x220>
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <update_step_board+0x21c>
    104e:	82 27       	eor	r24, r18
    1050:	93 27       	eor	r25, r19
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= sequencer.step_num_first; i++) { //button and led indices match for 0-15. How convenient.
    1056:	21 96       	adiw	r28, 0x01	; 1
    1058:	d8 01       	movw	r26, r16
    105a:	8c 91       	ld	r24, X
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8c 17       	cp	r24, r28
    1062:	9d 07       	cpc	r25, r29
    1064:	0c f0       	brlt	.+2      	; 0x1068 <update_step_board+0x23e>
    1066:	ad cf       	rjmp	.-166    	; 0xfc2 <update_step_board+0x198>
	} else {
		
		//handle what here? changing selected pattern or rhythm? 
		
	}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	bf 90       	pop	r11
    107a:	af 90       	pop	r10
    107c:	9f 90       	pop	r9
    107e:	8f 90       	pop	r8
    1080:	7f 90       	pop	r7
    1082:	6f 90       	pop	r6
    1084:	5f 90       	pop	r5
    1086:	4f 90       	pop	r4
    1088:	3f 90       	pop	r3
    108a:	08 95       	ret

0000108c <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    108c:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    1090:	ed ea       	ldi	r30, 0xAD	; 173
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	88 23       	and	r24, r24
    1098:	ec f7       	brge	.-6      	; 0x1094 <spi_shift_byte+0x8>
	return SPDR1;
    109a:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    109e:	08 95       	ret

000010a0 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    10a4:	c8 e6       	ldi	r28, 0x68	; 104
    10a6:	d2 e0       	ldi	r29, 0x02	; 2
    10a8:	88 81       	ld	r24, Y
    10aa:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    10d8:	88 85       	ldd	r24, Y+8	; 0x08
    10da:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    10de:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    10e0:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <read_switches>:

void read_switches(void) { //reads switch data
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    10ec:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
    10f4:	c3 e6       	ldi	r28, 0x63	; 99
    10f6:	d2 e0       	ldi	r29, 0x02	; 2
    10f8:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
    1100:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
    1108:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
    1110:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 46 08 	call	0x108c	; 0x108c <spi_shift_byte>
    1118:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    111a:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    111c:	28 81       	ld	r18, Y
    111e:	92 2f       	mov	r25, r18
    1120:	96 95       	lsr	r25
    1122:	e7 e7       	ldi	r30, 0x77	; 119
    1124:	f3 e0       	ldi	r31, 0x03	; 3
    1126:	30 81       	ld	r19, Z
    1128:	90 fb       	bst	r25, 0
    112a:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	49 2f       	mov	r20, r25
    1130:	42 95       	swap	r20
    1132:	4f 70       	andi	r20, 0x0F	; 15
    1134:	40 fb       	bst	r20, 0
    1136:	32 f9       	bld	r19, 2
    1138:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    113a:	ee e5       	ldi	r30, 0x5E	; 94
    113c:	f2 e0       	ldi	r31, 0x02	; 2
    113e:	30 81       	ld	r19, Z
    1140:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    1142:	32 27       	eor	r19, r18
    1144:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1146:	23 23       	and	r18, r19
    1148:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    114a:	31 81       	ldd	r19, Z+1	; 0x01
    114c:	29 81       	ldd	r18, Y+1	; 0x01
    114e:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    1150:	32 27       	eor	r19, r18
    1152:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    1154:	23 23       	and	r18, r19
    1156:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1158:	22 81       	ldd	r18, Z+2	; 0x02
    115a:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    115c:	29 27       	eor	r18, r25
    115e:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    1160:	92 23       	and	r25, r18
    1162:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    1164:	23 81       	ldd	r18, Z+3	; 0x03
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    116a:	29 27       	eor	r18, r25
    116c:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    116e:	92 23       	and	r25, r18
    1170:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    1172:	94 81       	ldd	r25, Z+4	; 0x04
    1174:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1176:	98 27       	eor	r25, r24
    1178:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    117a:	89 23       	and	r24, r25
    117c:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    1188:	da 01       	movw	r26, r20
    118a:	aa 0f       	add	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	ae 5e       	subi	r26, 0xEE	; 238
    1190:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    1192:	8c 91       	ld	r24, X
    1194:	e8 2f       	mov	r30, r24
    1196:	e6 95       	lsr	r30
    1198:	e6 95       	lsr	r30
    119a:	e6 95       	lsr	r30
    119c:	e7 70       	andi	r30, 0x07	; 7
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	ed 59       	subi	r30, 0x9D	; 157
    11a2:	fd 4f       	sbci	r31, 0xFD	; 253
    11a4:	20 81       	ld	r18, Z
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	98 2f       	mov	r25, r24
    11aa:	97 70       	andi	r25, 0x07	; 7
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <parse_switch_data+0x2e>
    11ae:	35 95       	asr	r19
    11b0:	27 95       	ror	r18
    11b2:	9a 95       	dec	r25
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <parse_switch_data+0x2a>
    11b6:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    11b8:	86 fb       	bst	r24, 6
    11ba:	99 27       	eor	r25, r25
    11bc:	90 f9       	bld	r25, 0
    11be:	29 27       	eor	r18, r25
    11c0:	20 fb       	bst	r18, 0
    11c2:	86 f9       	bld	r24, 6
    11c4:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    11c6:	4f 5f       	subi	r20, 0xFF	; 255
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	43 32       	cpi	r20, 0x23	; 35
    11cc:	51 05       	cpc	r21, r1
    11ce:	e1 f6       	brne	.-72     	; 0x1188 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    11d0:	08 95       	ret

000011d2 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    11d2:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    11d4:	80 91 71 02 	lds	r24, 0x0271
    11d8:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    11da:	89 27       	eor	r24, r25
    11dc:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    11e0:	89 23       	and	r24, r25
    11e2:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
    11e6:	e7 e7       	ldi	r30, 0x77	; 119
    11e8:	f3 e0       	ldi	r31, 0x03	; 3
    11ea:	90 81       	ld	r25, Z
    11ec:	91 fb       	bst	r25, 1
    11ee:	22 27       	eor	r18, r18
    11f0:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    11f2:	86 95       	lsr	r24
    11f4:	82 27       	eor	r24, r18
    11f6:	80 fb       	bst	r24, 0
    11f8:	91 f9       	bld	r25, 1
    11fa:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    11fc:	91 ff       	sbrs	r25, 1
    11fe:	34 c0       	rjmp	.+104    	; 0x1268 <check_start_stop_tap+0x96>
    1200:	21 11       	cpse	r18, r1
    1202:	34 c0       	rjmp	.+104    	; 0x126c <check_start_stop_tap+0x9a>
		
		sequencer.current_step = 0;
    1204:	e8 e4       	ldi	r30, 0x48	; 72
    1206:	f4 e0       	ldi	r31, 0x04	; 4
    1208:	81 81       	ldd	r24, Z+1	; 0x01
    120a:	8f 70       	andi	r24, 0x0F	; 15
    120c:	81 83       	std	Z+1, r24	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	82 83       	std	Z+2, r24	; 0x02
		flag.next_step = 1;
    1214:	80 91 75 03 	lds	r24, 0x0375
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1218:	10 92 74 02 	sts	0x0274, r1
		flag.variation_change = 0;
    121c:	81 60       	ori	r24, 0x01	; 1
    121e:	8b 7f       	andi	r24, 0xFB	; 251
    1220:	80 93 75 03 	sts	0x0375, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1224:	80 91 47 04 	lds	r24, 0x0447
    1228:	8d 7f       	andi	r24, 0xFD	; 253
    122a:	31 f4       	brne	.+12     	; 0x1238 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    122c:	e6 e4       	ldi	r30, 0x46	; 70
    122e:	f4 e0       	ldi	r31, 0x04	; 4
    1230:	80 81       	ld	r24, Z
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	80 83       	st	Z, r24
    1236:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
    1238:	e6 e4       	ldi	r30, 0x46	; 70
    123a:	f4 e0       	ldi	r31, 0x04	; 4
    123c:	80 81       	ld	r24, Z
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	80 83       	st	Z, r24
    1242:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
    1244:	0e 94 3f 04 	call	0x87e	; 0x87e <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1248:	80 91 4c 04 	lds	r24, 0x044C
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	fc 01       	movw	r30, r24
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	e0 50       	subi	r30, 0x00	; 0
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	85 81       	ldd	r24, Z+5	; 0x05
    1262:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
    1266:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1268:	21 30       	cpi	r18, 0x01	; 1
    126a:	61 f3       	breq	.-40     	; 0x1244 <check_start_stop_tap+0x72>
    126c:	08 95       	ret

0000126e <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
    126e:	3f 92       	push	r3
    1270:	4f 92       	push	r4
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	0f 2e       	mov	r0, r31
    1292:	f5 e0       	ldi	r31, 0x05	; 5
    1294:	ef 2e       	mov	r14, r31
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	ff 2e       	mov	r15, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	0f 2e       	mov	r0, r31
    129e:	fb e3       	ldi	r31, 0x3B	; 59
    12a0:	8f 2e       	mov	r8, r31
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	9f 2e       	mov	r9, r31
    12a6:	f0 2d       	mov	r31, r0
    12a8:	02 e1       	ldi	r16, 0x12	; 18
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	c1 e1       	ldi	r28, 0x11	; 17
    12ae:	d0 e0       	ldi	r29, 0x00	; 0
    12b0:	c1 2c       	mov	r12, r1
    12b2:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    12b4:	0f 2e       	mov	r0, r31
    12b6:	fc e4       	ldi	r31, 0x4C	; 76
    12b8:	af 2e       	mov	r10, r31
    12ba:	f4 e0       	ldi	r31, 0x04	; 4
    12bc:	bf 2e       	mov	r11, r31
    12be:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    12c0:	0f 2e       	mov	r0, r31
    12c2:	ff e5       	ldi	r31, 0x5F	; 95
    12c4:	4f 2e       	mov	r4, r31
    12c6:	f1 e0       	ldi	r31, 0x01	; 1
    12c8:	5f 2e       	mov	r5, r31
    12ca:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    12cc:	0f 2e       	mov	r0, r31
    12ce:	ff e0       	ldi	r31, 0x0F	; 15
    12d0:	3f 2e       	mov	r3, r31
    12d2:	f0 2d       	mov	r31, r0
    12d4:	0c c0       	rjmp	.+24     	; 0x12ee <check_inst_switches+0x80>
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	c8 1a       	sub	r12, r24
    12da:	d8 0a       	sbc	r13, r24
    12dc:	21 96       	adiw	r28, 0x01	; 1
    12de:	0f 5f       	subi	r16, 0xFF	; 255
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	a6 e0       	ldi	r26, 0x06	; 6
    12e4:	ea 0e       	add	r14, r26
    12e6:	f1 1c       	adc	r15, r1
    12e8:	b6 e0       	ldi	r27, 0x06	; 6
    12ea:	8b 0e       	add	r8, r27
    12ec:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    12ee:	fe 01       	movw	r30, r28
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	ee 5e       	subi	r30, 0xEE	; 238
    12f6:	fd 4f       	sbci	r31, 0xFD	; 253
    12f8:	80 81       	ld	r24, Z
    12fa:	86 ff       	sbrs	r24, 6
    12fc:	37 c0       	rjmp	.+110    	; 0x136c <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    12fe:	fe 01       	movw	r30, r28
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	ee 5e       	subi	r30, 0xEE	; 238
    1306:	fd 4f       	sbci	r31, 0xFD	; 253
    1308:	8f 7b       	andi	r24, 0xBF	; 191
    130a:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    130c:	0e 94 3f 04 	call	0x87e	; 0x87e <turn_off_all_inst_leds>
    1310:	f7 01       	movw	r30, r14
    1312:	d7 01       	movw	r26, r14
    1314:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1316:	8c 91       	ld	r24, X
    1318:	8f 3f       	cpi	r24, 0xFF	; 255
    131a:	a9 f0       	breq	.+42     	; 0x1346 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    131c:	d5 01       	movw	r26, r10
    131e:	8c 91       	ld	r24, X
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	c8 16       	cp	r12, r24
    1324:	d9 06       	cpc	r13, r25
    1326:	49 f4       	brne	.+18     	; 0x133a <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1328:	f4 01       	movw	r30, r8
    132a:	80 81       	ld	r24, Z
    132c:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    1334:	d5 01       	movw	r26, r10
    1336:	8c 93       	st	X, r24
    1338:	19 c0       	rjmp	.+50     	; 0x136c <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    133a:	80 81       	ld	r24, Z
    133c:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    1340:	f5 01       	movw	r30, r10
    1342:	c0 82       	st	Z, r12
    1344:	13 c0       	rjmp	.+38     	; 0x136c <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1346:	d5 01       	movw	r26, r10
    1348:	8c 91       	ld	r24, X
    134a:	86 30       	cpi	r24, 0x06	; 6
    134c:	51 f4       	brne	.+20     	; 0x1362 <check_inst_switches+0xf4>
    134e:	c7 31       	cpi	r28, 0x17	; 23
    1350:	d1 05       	cpc	r29, r1
    1352:	39 f4       	brne	.+14     	; 0x1362 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    1354:	f2 01       	movw	r30, r4
    1356:	80 81       	ld	r24, Z
    1358:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
					sequencer.current_inst = MA;
    135c:	d5 01       	movw	r26, r10
    135e:	3c 92       	st	X, r3
    1360:	ba cf       	rjmp	.-140    	; 0x12d6 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    1362:	80 81       	ld	r24, Z
    1364:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1368:	f5 01       	movw	r30, r10
    136a:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    136c:	0c 31       	cpi	r16, 0x1C	; 28
    136e:	11 05       	cpc	r17, r1
    1370:	0c f4       	brge	.+2      	; 0x1374 <check_inst_switches+0x106>
    1372:	b1 cf       	rjmp	.-158    	; 0x12d6 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    1374:	80 91 32 02 	lds	r24, 0x0232
    1378:	86 ff       	sbrs	r24, 6
    137a:	0c c0       	rjmp	.+24     	; 0x1394 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f2 e0       	ldi	r31, 0x02	; 2
    1380:	8f 7b       	andi	r24, 0xBF	; 191
    1382:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    1384:	0e 94 3f 04 	call	0x87e	; 0x87e <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    1388:	84 e1       	ldi	r24, 0x14	; 20
    138a:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
		sequencer.current_inst = AC;
    138e:	80 e1       	ldi	r24, 0x10	; 16
    1390:	80 93 4c 04 	sts	0x044C, r24
	}
	
}	
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
    13a4:	bf 90       	pop	r11
    13a6:	af 90       	pop	r10
    13a8:	9f 90       	pop	r9
    13aa:	8f 90       	pop	r8
    13ac:	7f 90       	pop	r7
    13ae:	6f 90       	pop	r6
    13b0:	5f 90       	pop	r5
    13b2:	4f 90       	pop	r4
    13b4:	3f 90       	pop	r3
    13b6:	08 95       	ret

000013b8 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    13b8:	80 91 4e 02 	lds	r24, 0x024E
    13bc:	86 ff       	sbrs	r24, 6
    13be:	29 c0       	rjmp	.+82     	; 0x1412 <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    13c0:	ee e4       	ldi	r30, 0x4E	; 78
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	8f 7b       	andi	r24, 0xBF	; 191
    13c6:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    13c8:	e7 e4       	ldi	r30, 0x47	; 71
    13ca:	f4 e0       	ldi	r31, 0x04	; 4
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	80 83       	st	Z, r24
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	39 f4       	brne	.+14     	; 0x13e4 <check_variation_switches+0x2c>
    13d6:	10 92 47 04 	sts	0x0447, r1
		if (sequencer.START) {
    13da:	80 91 77 03 	lds	r24, 0x0377
    13de:	81 ff       	sbrs	r24, 1
    13e0:	0d c0       	rjmp	.+26     	; 0x13fc <check_variation_switches+0x44>
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <check_variation_switches+0x34>
    13e4:	90 91 77 03 	lds	r25, 0x0377
    13e8:	91 ff       	sbrs	r25, 1
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    13ec:	80 91 75 03 	lds	r24, 0x0375
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	80 93 75 03 	sts	0x0375, r24
    13f6:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    13f8:	8d 7f       	andi	r24, 0xFD	; 253
    13fa:	31 f4       	brne	.+12     	; 0x1408 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    13fc:	e6 e4       	ldi	r30, 0x46	; 70
    13fe:	f4 e0       	ldi	r31, 0x04	; 4
    1400:	80 81       	ld	r24, Z
    1402:	8e 7f       	andi	r24, 0xFE	; 254
    1404:	80 83       	st	Z, r24
    1406:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1408:	e6 e4       	ldi	r30, 0x46	; 70
    140a:	f4 e0       	ldi	r31, 0x04	; 4
    140c:	80 81       	ld	r24, Z
    140e:	81 60       	ori	r24, 0x01	; 1
    1410:	80 83       	st	Z, r24
    1412:	08 95       	ret

00001414 <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    1420:	80 91 77 03 	lds	r24, 0x0377
    1424:	86 70       	andi	r24, 0x06	; 6
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	e1 f5       	brne	.+120    	; 0x14a2 <check_clear_switch+0x8e>
		
		switch (sequencer.mode) {
    142a:	80 91 76 03 	lds	r24, 0x0376
    142e:	81 11       	cpse	r24, r1
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <check_clear_switch+0x9c>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    1432:	8c e1       	ldi	r24, 0x1C	; 28
    1434:	0e 94 2c 04 	call	0x858	; 0x858 <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1438:	e6 e4       	ldi	r30, 0x46	; 70
    143a:	f4 e0       	ldi	r31, 0x04	; 4
    143c:	80 81       	ld	r24, Z
    143e:	80 fb       	bst	r24, 0
    1440:	ee 24       	eor	r14, r14
    1442:	e0 f8       	bld	r14, 0
    1444:	f1 2c       	mov	r15, r1
    1446:	87 e6       	ldi	r24, 0x67	; 103
    1448:	8e 9d       	mul	r24, r14
    144a:	d0 01       	movw	r26, r0
    144c:	8f 9d       	mul	r24, r15
    144e:	b0 0d       	add	r27, r0
    1450:	11 24       	eor	r1, r1
    1452:	a8 58       	subi	r26, 0x88	; 136
    1454:	bc 4f       	sbci	r27, 0xFC	; 252
    1456:	90 e4       	ldi	r25, 0x40	; 64
    1458:	ed 01       	movw	r28, r26
    145a:	19 92       	st	Y+, r1
    145c:	9a 95       	dec	r25
    145e:	e9 f7       	brne	.-6      	; 0x145a <check_clear_switch+0x46>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    1460:	90 81       	ld	r25, Z
    1462:	09 2f       	mov	r16, r25
    1464:	01 70       	andi	r16, 0x01	; 1
    1466:	10 e0       	ldi	r17, 0x00	; 0
    1468:	80 9f       	mul	r24, r16
    146a:	d0 01       	movw	r26, r0
    146c:	81 9f       	mul	r24, r17
    146e:	b0 0d       	add	r27, r0
    1470:	11 24       	eor	r1, r1
    1472:	a4 54       	subi	r26, 0x44	; 68
    1474:	bc 4f       	sbci	r27, 0xFC	; 252
    1476:	92 e2       	ldi	r25, 0x22	; 34
    1478:	ed 01       	movw	r28, r26
    147a:	19 92       	st	Y+, r1
    147c:	9a 95       	dec	r25
    147e:	e9 f7       	brne	.-6      	; 0x147a <check_clear_switch+0x66>
				sequencer.pattern[sequencer.variation].accent = 0;				
    1480:	90 81       	ld	r25, Z
    1482:	91 70       	andi	r25, 0x01	; 1
    1484:	c9 2f       	mov	r28, r25
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	d9 2f       	mov	r29, r25
    148a:	8c 9f       	mul	r24, r28
    148c:	f0 01       	movw	r30, r0
    148e:	8d 9f       	mul	r24, r29
    1490:	f0 0d       	add	r31, r0
    1492:	11 24       	eor	r1, r1
    1494:	e8 54       	subi	r30, 0x48	; 72
    1496:	fc 4f       	sbci	r31, 0xFC	; 252
    1498:	10 82       	st	Z, r1
    149a:	11 82       	std	Z+1, r1	; 0x01
    149c:	12 82       	std	Z+2, r1	; 0x02
    149e:	13 82       	std	Z+3, r1	; 0x03
				break;
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <check_clear_switch+0x9c>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    14a2:	80 91 76 03 	lds	r24, 0x0376
    14a6:	81 11       	cpse	r24, r1
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <check_clear_switch+0x9c>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    14aa:	8c e1       	ldi	r24, 0x1C	; 28
    14ac:	0e 94 ef 03 	call	0x7de	; 0x7de <turn_on>
		}
		
	}
	
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	08 95       	ret

000014be <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    14be:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    14c0:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    14c2:	74 83       	std	Z+4, r23	; 0x04
    14c4:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    14c6:	11 82       	std	Z+1, r1	; 0x01
    14c8:	10 82       	st	Z, r1
    14ca:	08 95       	ret

000014cc <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    14da:	0e 94 df 0a 	call	0x15be	; 0x15be <store_and_clear_interrupt>
    14de:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    14e0:	f9 80       	ldd	r15, Y+1	; 0x01
    14e2:	4f 2d       	mov	r20, r15
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	ca 01       	movw	r24, r20
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	2a 81       	ldd	r18, Y+2	; 0x02
    14ec:	62 2f       	mov	r22, r18
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    14f4:	28 81       	ld	r18, Y
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	82 17       	cp	r24, r18
    14fa:	93 07       	cpc	r25, r19
    14fc:	29 f4       	brne	.+10     	; 0x1508 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    14fe:	81 2f       	mov	r24, r17
    1500:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <restore_interrupt_setting>
      return false;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	12 c0       	rjmp	.+36     	; 0x152c <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1508:	eb 81       	ldd	r30, Y+3	; 0x03
    150a:	fc 81       	ldd	r31, Y+4	; 0x04
    150c:	ef 0d       	add	r30, r15
    150e:	f1 1d       	adc	r31, r1
    1510:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    1512:	29 81       	ldd	r18, Y+1	; 0x01
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	c9 01       	movw	r24, r18
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	6a 81       	ldd	r22, Y+2	; 0x02
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    1522:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1524:	81 2f       	mov	r24, r17
    1526:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <restore_interrupt_setting>
      return true;
    152a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	08 95       	ret

00001538 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    153e:	0e 94 df 0a 	call	0x15be	; 0x15be <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1542:	39 81       	ldd	r19, Y+1	; 0x01
    1544:	28 81       	ld	r18, Y
    1546:	32 17       	cp	r19, r18
    1548:	18 f0       	brcs	.+6      	; 0x1550 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    154a:	c3 2f       	mov	r28, r19
    154c:	c2 1b       	sub	r28, r18
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <bytequeue_length+0x20>
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	c3 2f       	mov	r28, r19
    1554:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1556:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1558:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <restore_interrupt_setting>
   return len;
}
    155c:	8c 2f       	mov	r24, r28
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1564:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1566:	80 81       	ld	r24, Z
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	9b 01       	movw	r18, r22
    156c:	28 0f       	add	r18, r24
    156e:	31 1d       	adc	r19, r1
    1570:	c9 01       	movw	r24, r18
    1572:	62 81       	ldd	r22, Z+2	; 0x02
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    157a:	03 80       	ldd	r0, Z+3	; 0x03
    157c:	f4 81       	ldd	r31, Z+4	; 0x04
    157e:	e0 2d       	mov	r30, r0
    1580:	e8 0f       	add	r30, r24
    1582:	f9 1f       	adc	r31, r25
}
    1584:	80 81       	ld	r24, Z
    1586:	08 95       	ret

00001588 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
    1590:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1592:	0e 94 df 0a 	call	0x15be	; 0x15be <store_and_clear_interrupt>
    1596:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1598:	88 81       	ld	r24, Y
    159a:	21 2f       	mov	r18, r17
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	b9 01       	movw	r22, r18
    15a0:	68 0f       	add	r22, r24
    15a2:	71 1d       	adc	r23, r1
    15a4:	cb 01       	movw	r24, r22
    15a6:	6a 81       	ldd	r22, Y+2	; 0x02
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    15ae:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    15b0:	84 2f       	mov	r24, r20
    15b2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <restore_interrupt_setting>
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	08 95       	ret

000015be <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    15be:	8f b7       	in	r24, 0x3f	; 63
   cli();
    15c0:	f8 94       	cli
   return sreg;
}
    15c2:	08 95       	ret

000015c4 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    15c4:	8f bf       	out	0x3f, r24	; 63
    15c6:	08 95       	ret

000015c8 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    15c8:	88 1f       	adc	r24, r24
    15ca:	88 27       	eor	r24, r24
    15cc:	88 1f       	adc	r24, r24
    15ce:	08 95       	ret

000015d0 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	88 3f       	cpi	r24, 0xF8	; 248
    15d4:	08 f4       	brcc	.+2      	; 0x15d8 <midi_is_realtime+0x8>
    15d6:	90 e0       	ldi	r25, 0x00	; 0
}
    15d8:	89 2f       	mov	r24, r25
    15da:	08 95       	ret

000015dc <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    15dc:	98 2f       	mov	r25, r24
    15de:	90 7f       	andi	r25, 0xF0	; 240
    15e0:	90 3c       	cpi	r25, 0xC0	; 192
    15e2:	b1 f0       	breq	.+44     	; 0x1610 <midi_packet_length+0x34>
    15e4:	58 f4       	brcc	.+22     	; 0x15fc <midi_packet_length+0x20>
    15e6:	90 39       	cpi	r25, 0x90	; 144
    15e8:	41 f1       	breq	.+80     	; 0x163a <midi_packet_length+0x5e>
    15ea:	18 f4       	brcc	.+6      	; 0x15f2 <midi_packet_length+0x16>
    15ec:	90 38       	cpi	r25, 0x80	; 128
    15ee:	19 f5       	brne	.+70     	; 0x1636 <midi_packet_length+0x5a>
    15f0:	24 c0       	rjmp	.+72     	; 0x163a <midi_packet_length+0x5e>
    15f2:	90 3a       	cpi	r25, 0xA0	; 160
    15f4:	11 f1       	breq	.+68     	; 0x163a <midi_packet_length+0x5e>
    15f6:	90 3b       	cpi	r25, 0xB0	; 176
    15f8:	f1 f4       	brne	.+60     	; 0x1636 <midi_packet_length+0x5a>
    15fa:	1f c0       	rjmp	.+62     	; 0x163a <midi_packet_length+0x5e>
    15fc:	90 3e       	cpi	r25, 0xE0	; 224
    15fe:	e9 f0       	breq	.+58     	; 0x163a <midi_packet_length+0x5e>
    1600:	18 f4       	brcc	.+6      	; 0x1608 <midi_packet_length+0x2c>
    1602:	90 3d       	cpi	r25, 0xD0	; 208
    1604:	29 f0       	breq	.+10     	; 0x1610 <midi_packet_length+0x34>
    1606:	17 c0       	rjmp	.+46     	; 0x1636 <midi_packet_length+0x5a>
    1608:	90 3f       	cpi	r25, 0xF0	; 240
    160a:	21 f0       	breq	.+8      	; 0x1614 <midi_packet_length+0x38>
    160c:	93 3f       	cpi	r25, 0xF3	; 243
    160e:	99 f4       	brne	.+38     	; 0x1636 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	08 95       	ret
      case 0xF0:
         switch(status) {
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	fc 01       	movw	r30, r24
    1618:	e1 5f       	subi	r30, 0xF1	; 241
    161a:	f1 09       	sbc	r31, r1
    161c:	ef 30       	cpi	r30, 0x0F	; 15
    161e:	f1 05       	cpc	r31, r1
    1620:	40 f4       	brcc	.+16     	; 0x1632 <midi_packet_length+0x56>
    1622:	e6 5a       	subi	r30, 0xA6	; 166
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1640:	08 95       	ret

00001642 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1642:	fc 01       	movw	r30, r24
    1644:	75 83       	std	Z+5, r23	; 0x05
    1646:	64 83       	std	Z+4, r22	; 0x04
    1648:	08 95       	ret

0000164a <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    164a:	fc 01       	movw	r30, r24
    164c:	77 83       	std	Z+7, r23	; 0x07
    164e:	66 83       	std	Z+6, r22	; 0x06
    1650:	08 95       	ret

00001652 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1652:	fc 01       	movw	r30, r24
    1654:	77 8b       	std	Z+23, r23	; 0x17
    1656:	66 8b       	std	Z+22, r22	; 0x16
    1658:	08 95       	ret

0000165a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1660:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    1662:	1f a2       	std	Y+39, r1	; 0x27
    1664:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1666:	bc 01       	movw	r22, r24
    1668:	68 5d       	subi	r22, 0xD8	; 216
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	40 ec       	ldi	r20, 0xC0	; 192
    166e:	88 51       	subi	r24, 0x18	; 24
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	0e 94 5f 0a 	call	0x14be	; 0x14be <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1676:	1b 82       	std	Y+3, r1	; 0x03
    1678:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    167a:	1d 82       	std	Y+5, r1	; 0x05
    167c:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    167e:	1f 82       	std	Y+7, r1	; 0x07
    1680:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1682:	19 86       	std	Y+9, r1	; 0x09
    1684:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1686:	1b 86       	std	Y+11, r1	; 0x0b
    1688:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    168a:	1d 86       	std	Y+13, r1	; 0x0d
    168c:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    168e:	1f 86       	std	Y+15, r1	; 0x0f
    1690:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1692:	19 8a       	std	Y+17, r1	; 0x11
    1694:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1696:	1b 8a       	std	Y+19, r1	; 0x13
    1698:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    169a:	1d 8a       	std	Y+21, r1	; 0x15
    169c:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    169e:	1f 8a       	std	Y+23, r1	; 0x17
    16a0:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    16a2:	19 8e       	std	Y+25, r1	; 0x19
    16a4:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    16a6:	1b 8e       	std	Y+27, r1	; 0x1b
    16a8:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    16aa:	1d 8e       	std	Y+29, r1	; 0x1d
    16ac:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    16ae:	1f 8e       	std	Y+31, r1	; 0x1f
    16b0:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    16b2:	19 a2       	std	Y+33, r1	; 0x21
    16b4:	18 a2       	std	Y+32, r1	; 0x20
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    16c8:	66 23       	and	r22, r22
    16ca:	99 f0       	breq	.+38     	; 0x16f2 <midi_device_input+0x36>
    16cc:	ea 01       	movw	r28, r20
    16ce:	61 50       	subi	r22, 0x01	; 1
    16d0:	06 2f       	mov	r16, r22
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	04 0f       	add	r16, r20
    16da:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    16dc:	7c 01       	movw	r14, r24
    16de:	28 ee       	ldi	r18, 0xE8	; 232
    16e0:	e2 0e       	add	r14, r18
    16e2:	f1 1c       	adc	r15, r1
    16e4:	69 91       	ld	r22, Y+
    16e6:	c7 01       	movw	r24, r14
    16e8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    16ec:	c0 17       	cp	r28, r16
    16ee:	d1 07       	cpc	r29, r17
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	08 95       	ret

00001700 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	00 d0       	rcall	.+0      	; 0x1716 <midi_input_callbacks+0x16>
    1716:	1f 92       	push	r1
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	7c 01       	movw	r14, r24
    171e:	6b 01       	movw	r12, r22
    1720:	14 2f       	mov	r17, r20
    1722:	b2 2e       	mov	r11, r18
    1724:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1726:	dc 01       	movw	r26, r24
    1728:	95 96       	adiw	r26, 0x25	; 37
    172a:	8c 91       	ld	r24, X
    172c:	95 97       	sbiw	r26, 0x25	; 37
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	11 f5       	brne	.+68     	; 0x1776 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    1732:	5a 96       	adiw	r26, 0x1a	; 26
    1734:	ed 91       	ld	r30, X+
    1736:	fc 91       	ld	r31, X
    1738:	5b 97       	sbiw	r26, 0x1b	; 27
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f4       	brne	.+2      	; 0x1740 <midi_input_callbacks+0x40>
    173e:	cc c0       	rjmp	.+408    	; 0x18d8 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1740:	9b 01       	movw	r18, r22
    1742:	21 50       	subi	r18, 0x01	; 1
    1744:	31 09       	sbc	r19, r1
    1746:	ab ea       	ldi	r26, 0xAB	; 171
    1748:	ba ea       	ldi	r27, 0xAA	; 170
    174a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__umulhisi3>
    174e:	96 95       	lsr	r25
    1750:	87 95       	ror	r24
    1752:	9c 01       	movw	r18, r24
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    175c:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    175e:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    1760:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1762:	4c 2d       	mov	r20, r12
    1764:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1766:	9e 01       	movw	r18, r28
    1768:	2f 5f       	subi	r18, 0xFF	; 255
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	68 2f       	mov	r22, r24
    176e:	79 2f       	mov	r23, r25
    1770:	c7 01       	movw	r24, r14
    1772:	09 95       	icall
    1774:	be c0       	rjmp	.+380    	; 0x18f2 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1776:	62 30       	cpi	r22, 0x02	; 2
    1778:	71 05       	cpc	r23, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <midi_input_callbacks+0x7e>
    177c:	55 c0       	rjmp	.+170    	; 0x1828 <midi_input_callbacks+0x128>
    177e:	63 30       	cpi	r22, 0x03	; 3
    1780:	71 05       	cpc	r23, r1
    1782:	29 f0       	breq	.+10     	; 0x178e <midi_input_callbacks+0x8e>
    1784:	61 30       	cpi	r22, 0x01	; 1
    1786:	71 05       	cpc	r23, r1
    1788:	09 f0       	breq	.+2      	; 0x178c <midi_input_callbacks+0x8c>
    178a:	a1 c0       	rjmp	.+322    	; 0x18ce <midi_input_callbacks+0x1ce>
    178c:	88 c0       	rjmp	.+272    	; 0x189e <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    178e:	84 2f       	mov	r24, r20
    1790:	80 7f       	andi	r24, 0xF0	; 240
    1792:	80 3a       	cpi	r24, 0xA0	; 160
    1794:	f1 f0       	breq	.+60     	; 0x17d2 <midi_input_callbacks+0xd2>
    1796:	28 f4       	brcc	.+10     	; 0x17a2 <midi_input_callbacks+0xa2>
    1798:	80 38       	cpi	r24, 0x80	; 128
    179a:	a9 f0       	breq	.+42     	; 0x17c6 <midi_input_callbacks+0xc6>
    179c:	80 39       	cpi	r24, 0x90	; 144
    179e:	69 f0       	breq	.+26     	; 0x17ba <midi_input_callbacks+0xba>
    17a0:	2f c0       	rjmp	.+94     	; 0x1800 <midi_input_callbacks+0x100>
    17a2:	80 3e       	cpi	r24, 0xE0	; 224
    17a4:	e1 f0       	breq	.+56     	; 0x17de <midi_input_callbacks+0xde>
    17a6:	80 3f       	cpi	r24, 0xF0	; 240
    17a8:	01 f1       	breq	.+64     	; 0x17ea <midi_input_callbacks+0xea>
    17aa:	80 3b       	cpi	r24, 0xB0	; 176
    17ac:	49 f5       	brne	.+82     	; 0x1800 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    17ae:	d7 01       	movw	r26, r14
    17b0:	12 96       	adiw	r26, 0x02	; 2
    17b2:	ed 91       	ld	r30, X+
    17b4:	fc 91       	ld	r31, X
    17b6:	13 97       	sbiw	r26, 0x03	; 3
              break;
    17b8:	25 c0       	rjmp	.+74     	; 0x1804 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    17ba:	d7 01       	movw	r26, r14
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	ed 91       	ld	r30, X+
    17c0:	fc 91       	ld	r31, X
    17c2:	15 97       	sbiw	r26, 0x05	; 5
              break;
    17c4:	1f c0       	rjmp	.+62     	; 0x1804 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    17c6:	d7 01       	movw	r26, r14
    17c8:	16 96       	adiw	r26, 0x06	; 6
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	17 97       	sbiw	r26, 0x07	; 7
              break;
    17d0:	19 c0       	rjmp	.+50     	; 0x1804 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    17d2:	d7 01       	movw	r26, r14
    17d4:	18 96       	adiw	r26, 0x08	; 8
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	19 97       	sbiw	r26, 0x09	; 9
              break;
    17dc:	13 c0       	rjmp	.+38     	; 0x1804 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    17de:	d7 01       	movw	r26, r14
    17e0:	1a 96       	adiw	r26, 0x0a	; 10
    17e2:	ed 91       	ld	r30, X+
    17e4:	fc 91       	ld	r31, X
    17e6:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    17e8:	0d c0       	rjmp	.+26     	; 0x1804 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    17ea:	42 3f       	cpi	r20, 0xF2	; 242
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <midi_input_callbacks+0xf0>
    17ee:	74 c0       	rjmp	.+232    	; 0x18d8 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    17f0:	d7 01       	movw	r26, r14
    17f2:	1c 96       	adiw	r26, 0x0c	; 12
    17f4:	ed 91       	ld	r30, X+
    17f6:	fc 91       	ld	r31, X
    17f8:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    17fa:	30 97       	sbiw	r30, 0x00	; 0
    17fc:	41 f4       	brne	.+16     	; 0x180e <midi_input_callbacks+0x10e>
    17fe:	6c c0       	rjmp	.+216    	; 0x18d8 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1800:	e0 e0       	ldi	r30, 0x00	; 0
    1802:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1804:	30 97       	sbiw	r30, 0x00	; 0
    1806:	09 f4       	brne	.+2      	; 0x180a <midi_input_callbacks+0x10a>
    1808:	67 c0       	rjmp	.+206    	; 0x18d8 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    180a:	12 3f       	cpi	r17, 0xF2	; 242
    180c:	31 f4       	brne	.+12     	; 0x181a <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    180e:	2a 2d       	mov	r18, r10
    1810:	4b 2d       	mov	r20, r11
    1812:	62 ef       	ldi	r22, 0xF2	; 242
    1814:	c7 01       	movw	r24, r14
    1816:	09 95       	icall
    1818:	6c c0       	rjmp	.+216    	; 0x18f2 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    181a:	2a 2d       	mov	r18, r10
    181c:	4b 2d       	mov	r20, r11
    181e:	61 2f       	mov	r22, r17
    1820:	6f 70       	andi	r22, 0x0F	; 15
    1822:	c7 01       	movw	r24, r14
    1824:	09 95       	icall
    1826:	65 c0       	rjmp	.+202    	; 0x18f2 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1828:	84 2f       	mov	r24, r20
    182a:	80 7f       	andi	r24, 0xF0	; 240
    182c:	80 3d       	cpi	r24, 0xD0	; 208
    182e:	51 f0       	breq	.+20     	; 0x1844 <midi_input_callbacks+0x144>
    1830:	80 3f       	cpi	r24, 0xF0	; 240
    1832:	71 f0       	breq	.+28     	; 0x1850 <midi_input_callbacks+0x150>
    1834:	80 3c       	cpi	r24, 0xC0	; 192
    1836:	01 f5       	brne	.+64     	; 0x1878 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1838:	d7 01       	movw	r26, r14
    183a:	1e 96       	adiw	r26, 0x0e	; 14
    183c:	ed 91       	ld	r30, X+
    183e:	fc 91       	ld	r31, X
    1840:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1842:	1c c0       	rjmp	.+56     	; 0x187c <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1844:	d7 01       	movw	r26, r14
    1846:	50 96       	adiw	r26, 0x10	; 16
    1848:	ed 91       	ld	r30, X+
    184a:	fc 91       	ld	r31, X
    184c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    184e:	16 c0       	rjmp	.+44     	; 0x187c <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1850:	43 3f       	cpi	r20, 0xF3	; 243
    1852:	41 f4       	brne	.+16     	; 0x1864 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    1854:	d7 01       	movw	r26, r14
    1856:	52 96       	adiw	r26, 0x12	; 18
    1858:	ed 91       	ld	r30, X+
    185a:	fc 91       	ld	r31, X
    185c:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    185e:	30 97       	sbiw	r30, 0x00	; 0
    1860:	99 f4       	brne	.+38     	; 0x1888 <midi_input_callbacks+0x188>
    1862:	3a c0       	rjmp	.+116    	; 0x18d8 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1864:	41 3f       	cpi	r20, 0xF1	; 241
    1866:	c1 f5       	brne	.+112    	; 0x18d8 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1868:	d7 01       	movw	r26, r14
    186a:	54 96       	adiw	r26, 0x14	; 20
    186c:	ed 91       	ld	r30, X+
    186e:	fc 91       	ld	r31, X
    1870:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    1872:	30 97       	sbiw	r30, 0x00	; 0
    1874:	49 f4       	brne	.+18     	; 0x1888 <midi_input_callbacks+0x188>
    1876:	30 c0       	rjmp	.+96     	; 0x18d8 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1878:	e0 e0       	ldi	r30, 0x00	; 0
    187a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	61 f1       	breq	.+88     	; 0x18d8 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1880:	81 2f       	mov	r24, r17
    1882:	8d 7f       	andi	r24, 0xFD	; 253
    1884:	81 3f       	cpi	r24, 0xF1	; 241
    1886:	29 f4       	brne	.+10     	; 0x1892 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1888:	4b 2d       	mov	r20, r11
    188a:	61 2f       	mov	r22, r17
    188c:	c7 01       	movw	r24, r14
    188e:	09 95       	icall
    1890:	30 c0       	rjmp	.+96     	; 0x18f2 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    1892:	4b 2d       	mov	r20, r11
    1894:	61 2f       	mov	r22, r17
    1896:	6f 70       	andi	r22, 0x0F	; 15
    1898:	c7 01       	movw	r24, r14
    189a:	09 95       	icall
    189c:	2a c0       	rjmp	.+84     	; 0x18f2 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    189e:	84 2f       	mov	r24, r20
    18a0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <midi_is_realtime>
    18a4:	88 23       	and	r24, r24
    18a6:	31 f0       	breq	.+12     	; 0x18b4 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    18a8:	d7 01       	movw	r26, r14
    18aa:	56 96       	adiw	r26, 0x16	; 22
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	57 97       	sbiw	r26, 0x17	; 23
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    18b4:	16 3f       	cpi	r17, 0xF6	; 246
    18b6:	81 f4       	brne	.+32     	; 0x18d8 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    18b8:	d7 01       	movw	r26, r14
    18ba:	58 96       	adiw	r26, 0x18	; 24
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	49 f0       	breq	.+18     	; 0x18d8 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    18c6:	61 2f       	mov	r22, r17
    18c8:	c7 01       	movw	r24, r14
    18ca:	09 95       	icall
    18cc:	12 c0       	rjmp	.+36     	; 0x18f2 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    18ce:	64 30       	cpi	r22, 0x04	; 4
    18d0:	71 05       	cpc	r23, r1
    18d2:	10 f0       	brcs	.+4      	; 0x18d8 <midi_input_callbacks+0x1d8>
          cnt = 0;
    18d4:	c1 2c       	mov	r12, r1
    18d6:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    18d8:	d7 01       	movw	r26, r14
    18da:	5c 96       	adiw	r26, 0x1c	; 28
    18dc:	ed 91       	ld	r30, X+
    18de:	fc 91       	ld	r31, X
    18e0:	5d 97       	sbiw	r26, 0x1d	; 29
    18e2:	30 97       	sbiw	r30, 0x00	; 0
    18e4:	31 f0       	breq	.+12     	; 0x18f2 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    18e6:	0a 2d       	mov	r16, r10
    18e8:	2b 2d       	mov	r18, r11
    18ea:	41 2f       	mov	r20, r17
    18ec:	b6 01       	movw	r22, r12
    18ee:	c7 01       	movw	r24, r14
    18f0:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    18f2:	d7 01       	movw	r26, r14
    18f4:	5e 96       	adiw	r26, 0x1e	; 30
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	5f 97       	sbiw	r26, 0x1f	; 31
    18fc:	30 97       	sbiw	r30, 0x00	; 0
    18fe:	31 f0       	breq	.+12     	; 0x190c <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1900:	0a 2d       	mov	r16, r10
    1902:	2b 2d       	mov	r18, r11
    1904:	41 2f       	mov	r20, r17
    1906:	b6 01       	movw	r22, r12
    1908:	c7 01       	movw	r24, r14
    190a:	09 95       	icall
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	df 90       	pop	r13
    1920:	cf 90       	pop	r12
    1922:	bf 90       	pop	r11
    1924:	af 90       	pop	r10
    1926:	08 95       	ret

00001928 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1936:	86 2f       	mov	r24, r22
    1938:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <midi_is_realtime>
    193c:	88 23       	and	r24, r24
    193e:	69 f0       	breq	.+26     	; 0x195a <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1940:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1946:	00 e0       	ldi	r16, 0x00	; 0
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	41 2f       	mov	r20, r17
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	ce 01       	movw	r24, r28
    1952:	0e 94 80 0b 	call	0x1700	; 0x1700 <midi_input_callbacks>
    device->input_state = state;
    1956:	fd a2       	std	Y+37, r15	; 0x25
    1958:	a4 c0       	rjmp	.+328    	; 0x1aa2 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    195a:	81 2f       	mov	r24, r17
    195c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <midi_is_statusbyte>
    1960:	88 23       	and	r24, r24
    1962:	09 f4       	brne	.+2      	; 0x1966 <midi_process_byte+0x3e>
    1964:	5d c0       	rjmp	.+186    	; 0x1a20 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1966:	8d a1       	ldd	r24, Y+37	; 0x25
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	29 f0       	breq	.+10     	; 0x1976 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    196c:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9f a3       	std	Y+39, r25	; 0x27
    1974:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1976:	81 2f       	mov	r24, r17
    1978:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <midi_packet_length>
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	31 f0       	breq	.+12     	; 0x198c <midi_process_byte+0x64>
    1980:	b8 f0       	brcs	.+46     	; 0x19b0 <midi_process_byte+0x88>
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	79 f0       	breq	.+30     	; 0x19a4 <midi_process_byte+0x7c>
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	81 f0       	breq	.+32     	; 0x19aa <midi_process_byte+0x82>
    198a:	46 c0       	rjmp	.+140    	; 0x1a18 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	41 2f       	mov	r20, r17
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	ce 01       	movw	r24, r28
    199c:	0e 94 80 0b 	call	0x1700	; 0x1700 <midi_input_callbacks>
        device->input_state = IDLE;
    19a0:	1d a2       	std	Y+37, r1	; 0x25
        break;
    19a2:	7f c0       	rjmp	.+254    	; 0x1aa2 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	8d a3       	std	Y+37, r24	; 0x25
        break;
    19a8:	7c c0       	rjmp	.+248    	; 0x1aa2 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	8d a3       	std	Y+37, r24	; 0x25
        break;
    19ae:	79 c0       	rjmp	.+242    	; 0x1aa2 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    19b0:	10 3f       	cpi	r17, 0xF0	; 240
    19b2:	19 f0       	breq	.+6      	; 0x19ba <midi_process_byte+0x92>
    19b4:	17 3f       	cpi	r17, 0xF7	; 247
    19b6:	51 f0       	breq	.+20     	; 0x19cc <midi_process_byte+0xa4>
    19b8:	2b c0       	rjmp	.+86     	; 0x1a10 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    19be:	80 ef       	ldi	r24, 0xF0	; 240
    19c0:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9f a3       	std	Y+39, r25	; 0x27
    19c8:	8e a3       	std	Y+38, r24	; 0x26
            break;
    19ca:	6b c0       	rjmp	.+214    	; 0x1aa2 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    19cc:	4e a1       	ldd	r20, Y+38	; 0x26
    19ce:	5f a1       	ldd	r21, Y+39	; 0x27
    19d0:	9a 01       	movw	r18, r20
    19d2:	ab ea       	ldi	r26, 0xAB	; 171
    19d4:	ba ea       	ldi	r27, 0xAA	; 170
    19d6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__umulhisi3>
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	9c 01       	movw	r18, r24
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	fa 01       	movw	r30, r20
    19ea:	e8 1b       	sub	r30, r24
    19ec:	f9 0b       	sbc	r31, r25
    19ee:	ec 0f       	add	r30, r28
    19f0:	fd 1f       	adc	r31, r29
    19f2:	87 ef       	ldi	r24, 0xF7	; 247
    19f4:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    19f6:	ba 01       	movw	r22, r20
    19f8:	6f 5f       	subi	r22, 0xFF	; 255
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	7f a3       	std	Y+39, r23	; 0x27
    19fe:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1a00:	0c a1       	ldd	r16, Y+36	; 0x24
    1a02:	2b a1       	ldd	r18, Y+35	; 0x23
    1a04:	4a a1       	ldd	r20, Y+34	; 0x22
    1a06:	ce 01       	movw	r24, r28
    1a08:	0e 94 80 0b 	call	0x1700	; 0x1700 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1a0c:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1a0e:	49 c0       	rjmp	.+146    	; 0x1aa2 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1a10:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1a12:	1f a2       	std	Y+39, r1	; 0x27
    1a14:	1e a2       	std	Y+38, r1	; 0x26
    1a16:	45 c0       	rjmp	.+138    	; 0x1aa2 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1a18:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1a1a:	1f a2       	std	Y+39, r1	; 0x27
    1a1c:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1a1e:	41 c0       	rjmp	.+130    	; 0x1aa2 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1a20:	ed a1       	ldd	r30, Y+37	; 0x25
    1a22:	ee 23       	and	r30, r30
    1a24:	f1 f1       	breq	.+124    	; 0x1aa2 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1a26:	4e a1       	ldd	r20, Y+38	; 0x26
    1a28:	5f a1       	ldd	r21, Y+39	; 0x27
    1a2a:	9a 01       	movw	r18, r20
    1a2c:	ab ea       	ldi	r26, 0xAB	; 171
    1a2e:	ba ea       	ldi	r27, 0xAA	; 170
    1a30:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__umulhisi3>
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	9c 01       	movw	r18, r24
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	9a 01       	movw	r18, r20
    1a44:	28 1b       	sub	r18, r24
    1a46:	39 0b       	sbc	r19, r25
    1a48:	de 01       	movw	r26, r28
    1a4a:	a2 0f       	add	r26, r18
    1a4c:	b3 1f       	adc	r27, r19
    1a4e:	92 96       	adiw	r26, 0x22	; 34
    1a50:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1a52:	ba 01       	movw	r22, r20
    1a54:	6f 5f       	subi	r22, 0xFF	; 255
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	7f a3       	std	Y+39, r23	; 0x27
    1a5a:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1a5c:	21 30       	cpi	r18, 0x01	; 1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	89 f0       	breq	.+34     	; 0x1a84 <midi_process_byte+0x15c>
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	e9 f4       	brne	.+58     	; 0x1aa2 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1a68:	0c a1       	ldd	r16, Y+36	; 0x24
    1a6a:	2b a1       	ldd	r18, Y+35	; 0x23
    1a6c:	4a a1       	ldd	r20, Y+34	; 0x22
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 80 0b 	call	0x1700	; 0x1700 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	a1 f0       	breq	.+40     	; 0x1aa2 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9f a3       	std	Y+39, r25	; 0x27
    1a80:	8e a3       	std	Y+38, r24	; 0x26
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1a84:	e2 30       	cpi	r30, 0x02	; 2
    1a86:	69 f4       	brne	.+26     	; 0x1aa2 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1a88:	00 e0       	ldi	r16, 0x00	; 0
    1a8a:	2b a1       	ldd	r18, Y+35	; 0x23
    1a8c:	4a a1       	ldd	r20, Y+34	; 0x22
    1a8e:	ce 01       	movw	r24, r28
    1a90:	0e 94 80 0b 	call	0x1700	; 0x1700 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1a94:	8d a1       	ldd	r24, Y+37	; 0x25
    1a96:	84 30       	cpi	r24, 0x04	; 4
    1a98:	21 f0       	breq	.+8      	; 0x1aa2 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9f a3       	std	Y+39, r25	; 0x27
    1aa0:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	08 95       	ret

00001aae <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	90 96       	adiw	r26, 0x20	; 32
    1ac4:	ed 91       	ld	r30, X+
    1ac6:	fc 91       	ld	r31, X
    1ac8:	91 97       	sbiw	r26, 0x21	; 33
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1ace:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1ad0:	86 01       	movw	r16, r12
    1ad2:	08 51       	subi	r16, 0x18	; 24
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1adc:	e8 2e       	mov	r14, r24
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	e1 14       	cp	r14, r1
    1ae2:	f1 04       	cpc	r15, r1
    1ae4:	91 f0       	breq	.+36     	; 0x1b0a <midi_device_process+0x5c>
    1ae6:	c0 e0       	ldi	r28, 0x00	; 0
    1ae8:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	c8 01       	movw	r24, r16
    1aee:	0e 94 b2 0a 	call	0x1564	; 0x1564 <bytequeue_get>
    1af2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1af4:	c6 01       	movw	r24, r12
    1af6:	0e 94 94 0c 	call	0x1928	; 0x1928 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	c8 01       	movw	r24, r16
    1afe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1b02:	21 96       	adiw	r28, 0x01	; 1
    1b04:	ce 15       	cp	r28, r14
    1b06:	df 05       	cpc	r29, r15
    1b08:	81 f7       	brne	.-32     	; 0x1aea <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	08 95       	ret

00001b1c <__divmodhi4>:
    1b1c:	97 fb       	bst	r25, 7
    1b1e:	07 2e       	mov	r0, r23
    1b20:	16 f4       	brtc	.+4      	; 0x1b26 <__divmodhi4+0xa>
    1b22:	00 94       	com	r0
    1b24:	07 d0       	rcall	.+14     	; 0x1b34 <__divmodhi4_neg1>
    1b26:	77 fd       	sbrc	r23, 7
    1b28:	09 d0       	rcall	.+18     	; 0x1b3c <__divmodhi4_neg2>
    1b2a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__udivmodhi4>
    1b2e:	07 fc       	sbrc	r0, 7
    1b30:	05 d0       	rcall	.+10     	; 0x1b3c <__divmodhi4_neg2>
    1b32:	3e f4       	brtc	.+14     	; 0x1b42 <__divmodhi4_exit>

00001b34 <__divmodhi4_neg1>:
    1b34:	90 95       	com	r25
    1b36:	81 95       	neg	r24
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__divmodhi4_neg2>:
    1b3c:	70 95       	com	r23
    1b3e:	61 95       	neg	r22
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255

00001b42 <__divmodhi4_exit>:
    1b42:	08 95       	ret

00001b44 <__tablejump2__>:
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	05 90       	lpm	r0, Z+
    1b4a:	f4 91       	lpm	r31, Z
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	09 94       	ijmp

00001b50 <__umulhisi3>:
    1b50:	a2 9f       	mul	r26, r18
    1b52:	b0 01       	movw	r22, r0
    1b54:	b3 9f       	mul	r27, r19
    1b56:	c0 01       	movw	r24, r0
    1b58:	a3 9f       	mul	r26, r19
    1b5a:	70 0d       	add	r23, r0
    1b5c:	81 1d       	adc	r24, r1
    1b5e:	11 24       	eor	r1, r1
    1b60:	91 1d       	adc	r25, r1
    1b62:	b2 9f       	mul	r27, r18
    1b64:	70 0d       	add	r23, r0
    1b66:	81 1d       	adc	r24, r1
    1b68:	11 24       	eor	r1, r1
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	08 95       	ret

00001b6e <__udivmodhi4>:
    1b6e:	aa 1b       	sub	r26, r26
    1b70:	bb 1b       	sub	r27, r27
    1b72:	51 e1       	ldi	r21, 0x11	; 17
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <__udivmodhi4_ep>

00001b76 <__udivmodhi4_loop>:
    1b76:	aa 1f       	adc	r26, r26
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	a6 17       	cp	r26, r22
    1b7c:	b7 07       	cpc	r27, r23
    1b7e:	10 f0       	brcs	.+4      	; 0x1b84 <__udivmodhi4_ep>
    1b80:	a6 1b       	sub	r26, r22
    1b82:	b7 0b       	sbc	r27, r23

00001b84 <__udivmodhi4_ep>:
    1b84:	88 1f       	adc	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	5a 95       	dec	r21
    1b8a:	a9 f7       	brne	.-22     	; 0x1b76 <__udivmodhi4_loop>
    1b8c:	80 95       	com	r24
    1b8e:	90 95       	com	r25
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	08 95       	ret

00001b96 <_exit>:
    1b96:	f8 94       	cli

00001b98 <__stop_program>:
    1b98:	ff cf       	rjmp	.-2      	; 0x1b98 <__stop_program>
