
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00001166  000011fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  00800252  00800252  0000134c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004236  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011db  00000000  00000000  000059d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f5  00000000  00000000  00006bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000994  00000000  00000000  00007ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f63  00000000  00000000  00008838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e0d  00000000  00000000  0000979b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	fd 05       	cpc	r31, r13
      b6:	fb 05       	cpc	r31, r11
      b8:	fd 05       	cpc	r31, r13
      ba:	ff 05       	cpc	r31, r15
      bc:	ff 05       	cpc	r31, r15
      be:	05 06       	cpc	r0, r21
      c0:	ff 05       	cpc	r31, r15
      c2:	05 06       	cpc	r0, r21
      c4:	05 06       	cpc	r0, r21
      c6:	05 06       	cpc	r0, r21
      c8:	05 06       	cpc	r0, r21
      ca:	05 06       	cpc	r0, r21
      cc:	ff 05       	cpc	r31, r15
      ce:	05 06       	cpc	r0, r21
      d0:	05 06       	cpc	r0, r21

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e6 e6       	ldi	r30, 0x66	; 102
      e6:	f1 e1       	ldi	r31, 0x11	; 17
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a2 35       	cpi	r26, 0x52	; 82
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	a2 e5       	ldi	r26, 0x52	; 82
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a1 3b       	cpi	r26, 0xB1	; 177
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 51 03 	call	0x6a2	; 0x6a2 <main>
     108:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     136:	8d e0       	ldi	r24, 0x0D	; 13
     138:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	80 93 6f 00 	sts	0x006F, r24
     142:	08 95       	ret

00000144 <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     144:	90 93 89 00 	sts	0x0089, r25
     148:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     14c:	20 91 84 00 	lds	r18, 0x0084
     150:	30 91 85 00 	lds	r19, 0x0085
     154:	82 17       	cp	r24, r18
     156:	93 07       	cpc	r25, r19
     158:	28 f4       	brcc	.+10     	; 0x164 <update_clock_rate+0x20>
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	90 93 85 00 	sts	0x0085, r25
     160:	80 93 84 00 	sts	0x0084, r24
     164:	08 95       	ret

00000166 <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, HC_LED},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, CL_LED},
	{15,7, 1<<MA_TRIG,255, 0, MA_LED}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	16 2f       	mov	r17, r22
	
		while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
     16e:	90 91 60 01 	lds	r25, 0x0160
     172:	99 23       	and	r25, r25
     174:	e1 f3       	breq	.-8      	; 0x16e <trigger_drum+0x8>
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     176:	80 93 52 02 	sts	0x0252, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     17a:	c8 2f       	mov	r28, r24
     17c:	d0 e0       	ldi	r29, 0x00	; 0
     17e:	fe 01       	movw	r30, r28
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	ec 0f       	add	r30, r28
     186:	fd 1f       	adc	r31, r29
     188:	ee 0f       	add	r30, r30
     18a:	ff 1f       	adc	r31, r31
     18c:	e0 50       	subi	r30, 0x00	; 0
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	a0 81       	ld	r26, Z
     192:	9a 2f       	mov	r25, r26
     194:	99 1f       	adc	r25, r25
     196:	99 27       	eor	r25, r25
     198:	99 1f       	adc	r25, r25
     19a:	a1 81       	ldd	r26, Z+1	; 0x01
     19c:	a7 70       	andi	r26, 0x07	; 7
     19e:	aa 0f       	add	r26, r26
     1a0:	a9 2b       	or	r26, r25
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	a2 5a       	subi	r26, 0xA2	; 162
     1a6:	bd 4f       	sbci	r27, 0xFD	; 253
     1a8:	9c 91       	ld	r25, X
     1aa:	82 81       	ldd	r24, Z+2	; 0x02
     1ac:	89 2b       	or	r24, r25
     1ae:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1b0:	83 81       	ldd	r24, Z+3	; 0x03
     1b2:	8f 3f       	cpi	r24, 0xFF	; 255
     1b4:	09 f1       	breq	.+66     	; 0x1f8 <trigger_drum+0x92>
				
			toggle(ACCENT_1_LED);	
     1b6:	84 e1       	ldi	r24, 0x14	; 20
     1b8:	0e 94 30 02 	call	0x460	; 0x460 <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1bc:	ae e5       	ldi	r26, 0x5E	; 94
     1be:	b2 e0       	ldi	r27, 0x02	; 2
     1c0:	13 96       	adiw	r26, 0x03	; 3
     1c2:	2c 91       	ld	r18, X
     1c4:	13 97       	sbiw	r26, 0x03	; 3
     1c6:	ae 01       	movw	r20, r28
     1c8:	44 0f       	add	r20, r20
     1ca:	55 1f       	adc	r21, r21
     1cc:	fa 01       	movw	r30, r20
     1ce:	ec 0f       	add	r30, r28
     1d0:	fd 1f       	adc	r31, r29
     1d2:	ee 0f       	add	r30, r30
     1d4:	ff 1f       	adc	r31, r31
     1d6:	ec 5f       	subi	r30, 0xFC	; 252
     1d8:	fe 4f       	sbci	r31, 0xFE	; 254
     1da:	90 81       	ld	r25, Z
     1dc:	91 70       	andi	r25, 0x01	; 1
     1de:	91 95       	neg	r25
     1e0:	92 27       	eor	r25, r18
     1e2:	c4 0f       	add	r28, r20
     1e4:	d5 1f       	adc	r29, r21
     1e6:	cc 0f       	add	r28, r28
     1e8:	dd 1f       	adc	r29, r29
     1ea:	c0 50       	subi	r28, 0x00	; 0
     1ec:	df 4f       	sbci	r29, 0xFF	; 255
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	98 23       	and	r25, r24
     1f2:	29 27       	eor	r18, r25
     1f4:	13 96       	adiw	r26, 0x03	; 3
     1f6:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     1f8:	11 34       	cpi	r17, 0x41	; 65
     1fa:	28 f0       	brcs	.+10     	; 0x206 <trigger_drum+0xa0>
			spi_data[8] |= (1<<ACCENT);
     1fc:	ee e5       	ldi	r30, 0x5E	; 94
     1fe:	f2 e0       	ldi	r31, 0x02	; 2
     200:	80 85       	ldd	r24, Z+8	; 0x08
     202:	81 60       	ori	r24, 0x01	; 1
     204:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     206:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
     208:	0e 94 ef 03 	call	0x7de	; 0x7de <update_spi>
			
		PORTD &= ~(1<<TRIG);
     20c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     20e:	ee e6       	ldi	r30, 0x6E	; 110
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     218:	85 b5       	in	r24, 0x25	; 37
     21a:	83 60       	ori	r24, 0x03	; 3
     21c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     21e:	10 92 60 01 	sts	0x0160, r1
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	08 95       	ret

0000022a <__vector_14>:
#include "drums.h"
#include "spi.h"
#include "clock.h"
#include "sequencer.h"

ISR (TIMER0_COMPA_vect) {
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	4f 93       	push	r20
     23a:	5f 93       	push	r21
     23c:	6f 93       	push	r22
     23e:	7f 93       	push	r23
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	af 93       	push	r26
     246:	bf 93       	push	r27
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ef 93       	push	r30
     24e:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     250:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     252:	ee e6       	ldi	r30, 0x6E	; 110
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	8d 7f       	andi	r24, 0xFD	; 253
     25a:	80 83       	st	Z, r24
	
	spi_data[drum_hit[current_drum_hit].spi_byte_num] &= ~(drum_hit[current_drum_hit].trig_bit);
     25c:	80 91 52 02 	lds	r24, 0x0252
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	dc 01       	movw	r26, r24
     264:	aa 0f       	add	r26, r26
     266:	bb 1f       	adc	r27, r27
     268:	ed 01       	movw	r28, r26
     26a:	c8 0f       	add	r28, r24
     26c:	d9 1f       	adc	r29, r25
     26e:	cc 0f       	add	r28, r28
     270:	dd 1f       	adc	r29, r29
     272:	c0 50       	subi	r28, 0x00	; 0
     274:	df 4f       	sbci	r29, 0xFF	; 255
     276:	e8 81       	ld	r30, Y
     278:	2e 2f       	mov	r18, r30
     27a:	22 1f       	adc	r18, r18
     27c:	22 27       	eor	r18, r18
     27e:	22 1f       	adc	r18, r18
     280:	e9 81       	ldd	r30, Y+1	; 0x01
     282:	e7 70       	andi	r30, 0x07	; 7
     284:	ee 0f       	add	r30, r30
     286:	e2 2b       	or	r30, r18
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	e2 5a       	subi	r30, 0xA2	; 162
     28c:	fd 4f       	sbci	r31, 0xFD	; 253
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	80 95       	com	r24
     292:	90 81       	ld	r25, Z
     294:	89 23       	and	r24, r25
     296:	80 83       	st	Z, r24
	//toggle(drum_hit[current_drum_hit].led_index);
	//toggle(ACCENT_1_LED);
	update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
     298:	0e 94 ef 03 	call	0x7de	; 0x7de <update_spi>
	trigger_finished = 1;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 60 01 	sts	0x0160, r24
	
}
     2a2:	ff 91       	pop	r31
     2a4:	ef 91       	pop	r30
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	bf 91       	pop	r27
     2ac:	af 91       	pop	r26
     2ae:	9f 91       	pop	r25
     2b0:	8f 91       	pop	r24
     2b2:	7f 91       	pop	r23
     2b4:	6f 91       	pop	r22
     2b6:	5f 91       	pop	r21
     2b8:	4f 91       	pop	r20
     2ba:	3f 91       	pop	r19
     2bc:	2f 91       	pop	r18
     2be:	0f 90       	pop	r0
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	0f 90       	pop	r0
     2c4:	1f 90       	pop	r1
     2c6:	18 95       	reti

000002c8 <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
	
	
	if (sequencer.START) { 
     2ea:	80 91 6c 03 	lds	r24, 0x036C
     2ee:	81 ff       	sbrs	r24, 1
     2f0:	0c c0       	rjmp	.+24     	; 0x30a <__vector_11+0x42>
		
		if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width
     2f2:	e9 e6       	ldi	r30, 0x69	; 105
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	80 81       	ld	r24, Z
     2f8:	86 95       	lsr	r24
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	98 13       	cpse	r25, r24
     2fe:	35 c0       	rjmp	.+106    	; 0x36a <__vector_11+0xa2>
			spi_data[1] = 0;
     300:	ee e5       	ldi	r30, 0x5E	; 94
     302:	f2 e0       	ldi	r31, 0x02	; 2
     304:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     306:	10 82       	st	Z, r1
     308:	30 c0       	rjmp	.+96     	; 0x36a <__vector_11+0xa2>
		}

	} else if ((internal_clock.beat_counter == 2) && (internal_clock.divider >> 1)) { //1/4 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     30a:	80 91 6b 02 	lds	r24, 0x026B
     30e:	83 70       	andi	r24, 0x03	; 3
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	09 f0       	breq	.+2      	; 0x316 <__vector_11+0x4e>
     314:	4f c0       	rjmp	.+158    	; 0x3b4 <__vector_11+0xec>
     316:	80 91 69 02 	lds	r24, 0x0269
     31a:	86 95       	lsr	r24
     31c:	09 f4       	brne	.+2      	; 0x320 <__vector_11+0x58>
     31e:	4a c0       	rjmp	.+148    	; 0x3b4 <__vector_11+0xec>
			spi_data[1] = 0;
     320:	ee e5       	ldi	r30, 0x5E	; 94
     322:	f2 e0       	ldi	r31, 0x02	; 2
     324:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     326:	10 82       	st	Z, r1
     328:	45 c0       	rjmp	.+138    	; 0x3b4 <__vector_11+0xec>
		
	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider) {
		
		internal_clock.beat_counter++;
     32a:	eb e6       	ldi	r30, 0x6B	; 107
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	90 81       	ld	r25, Z
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	89 0f       	add	r24, r25
     334:	83 70       	andi	r24, 0x03	; 3
     336:	9c 7f       	andi	r25, 0xFC	; 252
     338:	89 2b       	or	r24, r25
     33a:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     33c:	10 92 6a 02 	sts	0x026A, r1
		sequencer.current_step++; //hopefully this will overflow from 15 to 0 - it does!
     340:	ee ea       	ldi	r30, 0xAE	; 174
     342:	f3 e0       	ldi	r31, 0x03	; 3
     344:	80 81       	ld	r24, Z
     346:	21 e0       	ldi	r18, 0x01	; 1
     348:	28 0f       	add	r18, r24
     34a:	2f 70       	andi	r18, 0x0F	; 15
     34c:	80 7f       	andi	r24, 0xF0	; 240
     34e:	82 2b       	or	r24, r18
     350:	80 83       	st	Z, r24
		
		if (sequencer.START) {
			spi_data[1] = 1 << sequencer.current_step;// | sequencer.current_pattern.first_part[sequencer.current_inst];
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 c0       	rjmp	.+4      	; 0x35c <__vector_11+0x94>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	2a 95       	dec	r18
     35e:	e2 f7       	brpl	.-8      	; 0x358 <__vector_11+0x90>
     360:	ee e5       	ldi	r30, 0x5E	; 94
     362:	f2 e0       	ldi	r31, 0x02	; 2
     364:	81 83       	std	Z+1, r24	; 0x01
			spi_data[0] = (1 << sequencer.current_step) >> 8;// | (sequencer.current_pattern.first_part[sequencer.current_inst] >> 8);
     366:	90 83       	st	Z, r25
     368:	2d c0       	rjmp	.+90     	; 0x3c4 <__vector_11+0xfc>
			spi_data[1] = 0;
			spi_data[0] = 0;
		
	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider) {
     36a:	e9 e6       	ldi	r30, 0x69	; 105
     36c:	f2 e0       	ldi	r31, 0x02	; 2
     36e:	81 81       	ldd	r24, Z+1	; 0x01
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	81 83       	std	Z+1, r24	; 0x01
     374:	90 81       	ld	r25, Z
     376:	89 13       	cpse	r24, r25
     378:	25 c0       	rjmp	.+74     	; 0x3c4 <__vector_11+0xfc>
     37a:	d7 cf       	rjmp	.-82     	; 0x32a <__vector_11+0x62>
		
		internal_clock.beat_counter++;
     37c:	eb e6       	ldi	r30, 0x6B	; 107
     37e:	f2 e0       	ldi	r31, 0x02	; 2
     380:	90 81       	ld	r25, Z
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	89 0f       	add	r24, r25
     386:	83 70       	andi	r24, 0x03	; 3
     388:	9c 7f       	andi	r25, 0xFC	; 252
     38a:	89 2b       	or	r24, r25
     38c:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     38e:	10 92 6a 02 	sts	0x026A, r1
		sequencer.current_step++; //hopefully this will overflow from 15 to 0 - it does!
     392:	ee ea       	ldi	r30, 0xAE	; 174
     394:	f3 e0       	ldi	r31, 0x03	; 3
     396:	90 81       	ld	r25, Z
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	89 0f       	add	r24, r25
     39c:	8f 70       	andi	r24, 0x0F	; 15
     39e:	90 7f       	andi	r25, 0xF0	; 240
     3a0:	89 2b       	or	r24, r25
     3a2:	80 83       	st	Z, r24
			
		
		//now load current step's drum data into corresponding spi_data bytes:
		} else {
		
			spi_data[1] = 0;
     3a4:	ee e5       	ldi	r30, 0x5E	; 94
     3a6:	f2 e0       	ldi	r31, 0x02	; 2
     3a8:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     3aa:	10 82       	st	Z, r1
			turn_on(STEP_1_LED);	
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <__vector_11+0xfc>
			spi_data[1] = 0;
			spi_data[0] = 0;
		
	}
	
	if (++internal_clock.ppqn_counter == internal_clock.divider) {
     3b4:	e9 e6       	ldi	r30, 0x69	; 105
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	81 81       	ldd	r24, Z+1	; 0x01
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	81 83       	std	Z+1, r24	; 0x01
     3be:	90 81       	ld	r25, Z
     3c0:	89 17       	cp	r24, r25
     3c2:	e1 f2       	breq	.-72     	; 0x37c <__vector_11+0xb4>
		
		

	}
	
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	bf 91       	pop	r27
     3ca:	af 91       	pop	r26
     3cc:	9f 91       	pop	r25
     3ce:	8f 91       	pop	r24
     3d0:	7f 91       	pop	r23
     3d2:	6f 91       	pop	r22
     3d4:	5f 91       	pop	r21
     3d6:	4f 91       	pop	r20
     3d8:	3f 91       	pop	r19
     3da:	2f 91       	pop	r18
     3dc:	0f 90       	pop	r0
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	0f 90       	pop	r0
     3e2:	1f 90       	pop	r1
     3e4:	18 95       	reti

000003e6 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9c 01       	movw	r18, r24
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	dc 01       	movw	r26, r24
     3f8:	ae 59       	subi	r26, 0x9E	; 158
     3fa:	be 4f       	sbci	r27, 0xFE	; 254
     3fc:	2c 91       	ld	r18, X
     3fe:	e2 2f       	mov	r30, r18
     400:	ef 70       	andi	r30, 0x0F	; 15
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	e2 5a       	subi	r30, 0xA2	; 162
     406:	fd 4f       	sbci	r31, 0xFD	; 253
     408:	ec 01       	movw	r28, r24
     40a:	cf 59       	subi	r28, 0x9F	; 159
     40c:	de 4f       	sbci	r29, 0xFE	; 254
     40e:	30 81       	ld	r19, Z
     410:	88 81       	ld	r24, Y
     412:	83 2b       	or	r24, r19
     414:	80 83       	st	Z, r24
	led[led_index].state = 1;
     416:	82 2f       	mov	r24, r18
     418:	80 61       	ori	r24, 0x10	; 16
     41a:	8c 93       	st	X, r24

}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <turn_off>:

void turn_off(uint8_t led_index) {
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	9c 01       	movw	r18, r24
     42a:	22 0f       	add	r18, r18
     42c:	33 1f       	adc	r19, r19
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	dc 01       	movw	r26, r24
     434:	ae 59       	subi	r26, 0x9E	; 158
     436:	be 4f       	sbci	r27, 0xFE	; 254
     438:	2c 91       	ld	r18, X
     43a:	e2 2f       	mov	r30, r18
     43c:	ef 70       	andi	r30, 0x0F	; 15
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e2 5a       	subi	r30, 0xA2	; 162
     442:	fd 4f       	sbci	r31, 0xFD	; 253
     444:	ec 01       	movw	r28, r24
     446:	cf 59       	subi	r28, 0x9F	; 159
     448:	de 4f       	sbci	r29, 0xFE	; 254
     44a:	88 81       	ld	r24, Y
     44c:	80 95       	com	r24
     44e:	90 81       	ld	r25, Z
     450:	89 23       	and	r24, r25
     452:	80 83       	st	Z, r24
	led[led_index].state = 0;
     454:	82 2f       	mov	r24, r18
     456:	8f 7e       	andi	r24, 0xEF	; 239
     458:	8c 93       	st	X, r24
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     460:	28 2f       	mov	r18, r24
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	f9 01       	movw	r30, r18
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	2e 0f       	add	r18, r30
     46c:	3f 1f       	adc	r19, r31
     46e:	f9 01       	movw	r30, r18
     470:	ee 59       	subi	r30, 0x9E	; 158
     472:	fe 4f       	sbci	r31, 0xFE	; 254
     474:	90 81       	ld	r25, Z
     476:	94 ff       	sbrs	r25, 4
     478:	03 c0       	rjmp	.+6      	; 0x480 <toggle+0x20>
		
		turn_off(led_index);
     47a:	0e 94 11 02 	call	0x422	; 0x422 <turn_off>
     47e:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     480:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
     484:	08 95       	ret

00000486 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) {

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     486:	ee e5       	ldi	r30, 0x5E	; 94
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	8f 70       	andi	r24, 0x0F	; 15
     48e:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     490:	87 81       	ldd	r24, Z+7	; 0x07
     492:	80 72       	andi	r24, 0x20	; 32
     494:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     496:	83 81       	ldd	r24, Z+3	; 0x03
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     49c:	86 81       	ldd	r24, Z+6	; 0x06
     49e:	8f 7c       	andi	r24, 0xCF	; 207
     4a0:	86 83       	std	Z+6, r24	; 0x06
     4a2:	08 95       	ret

000004a4 <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     4a4:	08 95       	ret

000004a6 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     4a6:	08 95       	ret

000004a8 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn functiont to dynamically map notes to drum hits
     4a8:	40 31       	cpi	r20, 0x10	; 16
     4aa:	20 f4       	brcc	.+8      	; 0x4b4 <note_on_event+0xc>
     4ac:	62 2f       	mov	r22, r18
     4ae:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     4b0:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
     4b4:	08 95       	ret

000004b6 <update_step_board>:
	
	internal_clock.previous_rate = internal_clock.rate;	
	
}

void update_step_board() {
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
		
		
		//spi_data[0] = 1 << sequencer.current_step;
		//spi_data[1] = 1 << sequencer.current_inst)
	}
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (button[i].state) {
     4be:	fe 01       	movw	r30, r28
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	e4 5f       	subi	r30, 0xF4	; 244
     4c6:	fd 4f       	sbci	r31, 0xFD	; 253
     4c8:	80 81       	ld	r24, Z
     4ca:	86 ff       	sbrs	r24, 6
     4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <update_step_board+0x2e>
			
			toggle(i);
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 30 02 	call	0x460	; 0x460 <toggle>
			button[i].state ^= button[i].state;
     4d4:	fe 01       	movw	r30, r28
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e4 5f       	subi	r30, 0xF4	; 244
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	80 81       	ld	r24, Z
     4e0:	8f 7b       	andi	r24, 0xBF	; 191
     4e2:	80 83       	st	Z, r24
		
		
		//spi_data[0] = 1 << sequencer.current_step;
		//spi_data[1] = 1 << sequencer.current_inst)
	}
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
     4e4:	21 96       	adiw	r28, 0x01	; 1
     4e6:	c0 31       	cpi	r28, 0x10	; 16
     4e8:	d1 05       	cpc	r29, r1
     4ea:	49 f7       	brne	.-46     	; 0x4be <update_step_board+0x8>

	
	//update_spi();
	
	
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
     4f2:	80 91 2e 02 	lds	r24, 0x022E
     4f6:	86 ff       	sbrs	r24, 6
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     4fa:	ee e2       	ldi	r30, 0x2E	; 46
     4fc:	f2 e0       	ldi	r31, 0x02	; 2
     4fe:	8f 7b       	andi	r24, 0xBF	; 191
     500:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     50a:	80 91 30 02 	lds	r24, 0x0230
     50e:	86 ff       	sbrs	r24, 6
     510:	08 c0       	rjmp	.+16     	; 0x522 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     512:	e0 e3       	ldi	r30, 0x30	; 48
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	8f 7b       	andi	r24, 0xBF	; 191
     518:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     522:	80 91 32 02 	lds	r24, 0x0232
     526:	86 ff       	sbrs	r24, 6
     528:	08 c0       	rjmp	.+16     	; 0x53a <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     52a:	e2 e3       	ldi	r30, 0x32	; 50
     52c:	f2 e0       	ldi	r31, 0x02	; 2
     52e:	8f 7b       	andi	r24, 0xBF	; 191
     530:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     53a:	80 91 34 02 	lds	r24, 0x0234
     53e:	86 ff       	sbrs	r24, 6
     540:	08 c0       	rjmp	.+16     	; 0x552 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     542:	e4 e3       	ldi	r30, 0x34	; 52
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	8f 7b       	andi	r24, 0xBF	; 191
     548:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
     552:	80 91 36 02 	lds	r24, 0x0236
     556:	86 ff       	sbrs	r24, 6
     558:	08 c0       	rjmp	.+16     	; 0x56a <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     55a:	e6 e3       	ldi	r30, 0x36	; 54
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	8f 7b       	andi	r24, 0xBF	; 191
     560:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     56a:	80 91 38 02 	lds	r24, 0x0238
     56e:	86 ff       	sbrs	r24, 6
     570:	08 c0       	rjmp	.+16     	; 0x582 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     572:	e8 e3       	ldi	r30, 0x38	; 56
     574:	f2 e0       	ldi	r31, 0x02	; 2
     576:	8f 7b       	andi	r24, 0xBF	; 191
     578:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	85 e0       	ldi	r24, 0x05	; 5
     57e:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     582:	80 91 3a 02 	lds	r24, 0x023A
     586:	86 ff       	sbrs	r24, 6
     588:	08 c0       	rjmp	.+16     	; 0x59a <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     58a:	ea e3       	ldi	r30, 0x3A	; 58
     58c:	f2 e0       	ldi	r31, 0x02	; 2
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     59a:	80 91 3c 02 	lds	r24, 0x023C
     59e:	86 ff       	sbrs	r24, 6
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     5a2:	ec e3       	ldi	r30, 0x3C	; 60
     5a4:	f2 e0       	ldi	r31, 0x02	; 2
     5a6:	8f 7b       	andi	r24, 0xBF	; 191
     5a8:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	87 e0       	ldi	r24, 0x07	; 7
     5ae:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
     5b2:	80 91 3e 02 	lds	r24, 0x023E
     5b6:	86 ff       	sbrs	r24, 6
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     5ba:	ee e3       	ldi	r30, 0x3E	; 62
     5bc:	f2 e0       	ldi	r31, 0x02	; 2
     5be:	8f 7b       	andi	r24, 0xBF	; 191
     5c0:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     5ca:	80 91 40 02 	lds	r24, 0x0240
     5ce:	86 ff       	sbrs	r24, 6
     5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     5d2:	e0 e4       	ldi	r30, 0x40	; 64
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	8f 7b       	andi	r24, 0xBF	; 191
     5d8:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	89 e0       	ldi	r24, 0x09	; 9
     5de:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     5e2:	80 91 42 02 	lds	r24, 0x0242
     5e6:	86 ff       	sbrs	r24, 6
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     5ea:	e2 e4       	ldi	r30, 0x42	; 66
     5ec:	f2 e0       	ldi	r31, 0x02	; 2
     5ee:	8f 7b       	andi	r24, 0xBF	; 191
     5f0:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	0e 94 b3 00 	call	0x166	; 0x166 <trigger_drum>
     5fa:	08 95       	ret

000005fc <refresh>:



void refresh(void) {
	
	read_switches();
     5fc:	0e 94 13 04 	call	0x826	; 0x826 <read_switches>
	check_start_stop_tap();
     600:	0e 94 83 04 	call	0x906	; 0x906 <check_start_stop_tap>
	
	parse_switch_data();
     604:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     608:	80 91 6b 03 	lds	r24, 0x036B
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	11 f4       	brne	.+4      	; 0x614 <refresh+0x18>
     610:	0e 94 79 02 	call	0x4f2	; 0x4f2 <live_hits>
	update_mode();
     614:	0e 94 ac 03 	call	0x758	; 0x758 <update_mode>
	update_step_board();
     618:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <update_step_board>
	check_inst_switches();
     61c:	0e 94 a0 04 	call	0x940	; 0x940 <check_inst_switches>
	
	update_spi();
     620:	0e 94 ef 03 	call	0x7de	; 0x7de <update_spi>
     624:	08 95       	ret

00000626 <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     626:	8f e1       	ldi	r24, 0x1F	; 31
     628:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     62c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     630:	88 e9       	ldi	r24, 0x98	; 152
     632:	80 93 c1 00 	sts	0x00C1, r24
     636:	08 95       	ret

00000638 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     664:	80 91 c6 00 	lds	r24, 0x00C6
     668:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     66a:	ae 01       	movw	r20, r28
     66c:	4f 5f       	subi	r20, 0xFF	; 255
     66e:	5f 4f       	sbci	r21, 0xFF	; 255
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	8e e7       	ldi	r24, 0x7E	; 126
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	0e 94 44 06 	call	0xc88	; 0xc88 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     6a2:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     6a4:	8d b1       	in	r24, 0x0d	; 13
     6a6:	8c 60       	ori	r24, 0x0C	; 12
     6a8:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     6aa:	87 b1       	in	r24, 0x07	; 7
     6ac:	8e 60       	ori	r24, 0x0E	; 14
     6ae:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     6b0:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     6b2:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     6b4:	88 b1       	in	r24, 0x08	; 8
     6b6:	81 7f       	andi	r24, 0xF1	; 241
     6b8:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     6ba:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     6bc:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     6be:	80 e5       	ldi	r24, 0x50	; 80
     6c0:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     6c4:	ed ea       	ldi	r30, 0xAD	; 173
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	81 60       	ori	r24, 0x01	; 1
     6cc:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
     6d4:	8d e1       	ldi	r24, 0x1D	; 29
     6d6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
	turn_on(FILL_MANUAL);
     6da:	82 e2       	ldi	r24, 0x22	; 34
     6dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
	
	update_spi();
     6e0:	0e 94 ef 03 	call	0x7de	; 0x7de <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     6e4:	84 b5       	in	r24, 0x24	; 36
     6e6:	82 60       	ori	r24, 0x02	; 2
     6e8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     6ea:	81 ee       	ldi	r24, 0xE1	; 225
     6ec:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     6ee:	8e e7       	ldi	r24, 0x7E	; 126
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	0e 94 13 06 	call	0xc26	; 0xc26 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     6f6:	64 e5       	ldi	r22, 0x54	; 84
     6f8:	72 e0       	ldi	r23, 0x02	; 2
     6fa:	8e e7       	ldi	r24, 0x7E	; 126
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 07 06 	call	0xc0e	; 0xc0e <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     702:	62 e5       	ldi	r22, 0x52	; 82
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	8e e7       	ldi	r24, 0x7E	; 126
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	0e 94 0b 06 	call	0xc16	; 0xc16 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     70e:	63 e5       	ldi	r22, 0x53	; 83
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	8e e7       	ldi	r24, 0x7E	; 126
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 0f 06 	call	0xc1e	; 0xc1e <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     71a:	0e 94 13 03 	call	0x626	; 0x626 <setup_midi_usart>
	
	setup_internal_clock();
     71e:	0e 94 9b 00 	call	0x136	; 0x136 <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     722:	e9 e6       	ldi	r30, 0x69	; 105
     724:	f2 e0       	ldi	r31, 0x02	; 2
     726:	86 e0       	ldi	r24, 0x06	; 6
     728:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	81 83       	std	Z+1, r24	; 0x01
	internal_clock.rate = 500; //use fixed rate to get clock working
     72e:	84 ef       	ldi	r24, 0xF4	; 244
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	94 83       	std	Z+4, r25	; 0x04
     734:	83 83       	std	Z+3, r24	; 0x03
	update_clock_rate(internal_clock.rate);
     736:	0e 94 a2 00 	call	0x144	; 0x144 <update_clock_rate>
	setup_adc();
     73a:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	
	sequencer.START = 0;
     73e:	ec e6       	ldi	r30, 0x6C	; 108
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	80 81       	ld	r24, Z
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	80 83       	st	Z, r24
	//update_tempo();
	sei(); //enable global interrupts	
     748:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     74a:	8e e7       	ldi	r24, 0x7E	; 126
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	0e 94 3d 08 	call	0x107a	; 0x107a <midi_device_process>
	
	refresh();		
     752:	0e 94 fe 02 	call	0x5fc	; 0x5fc <refresh>

	
	}
     756:	f9 cf       	rjmp	.-14     	; 0x74a <main+0xa8>

00000758 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, PATTERN_FIRST, PATTERN_SECOND, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     758:	80 91 4c 02 	lds	r24, 0x024C
     75c:	86 ff       	sbrs	r24, 6
     75e:	34 c0       	rjmp	.+104    	; 0x7c8 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     760:	ec e4       	ldi	r30, 0x4C	; 76
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	8f 7b       	andi	r24, 0xBF	; 191
     766:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     768:	80 91 6c 03 	lds	r24, 0x036C
     76c:	80 ff       	sbrs	r24, 0
     76e:	0c c0       	rjmp	.+24     	; 0x788 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     770:	80 91 53 02 	lds	r24, 0x0253
     774:	88 23       	and	r24, r24
     776:	21 f0       	breq	.+8      	; 0x780 <update_mode+0x28>
     778:	81 50       	subi	r24, 0x01	; 1
     77a:	80 93 53 02 	sts	0x0253, r24
     77e:	0e c0       	rjmp	.+28     	; 0x79c <update_mode+0x44>
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	80 93 53 02 	sts	0x0253, r24
     786:	0a c0       	rjmp	.+20     	; 0x79c <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     788:	80 91 53 02 	lds	r24, 0x0253
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	86 30       	cpi	r24, 0x06	; 6
     790:	19 f0       	breq	.+6      	; 0x798 <update_mode+0x40>
     792:	80 93 53 02 	sts	0x0253, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <update_mode+0x44>
     798:	10 92 53 02 	sts	0x0253, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     79c:	20 91 53 02 	lds	r18, 0x0253
     7a0:	e2 2f       	mov	r30, r18
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ea 5f       	subi	r30, 0xFA	; 250
     7a6:	fd 4f       	sbci	r31, 0xFD	; 253
     7a8:	80 81       	ld	r24, Z
     7aa:	80 93 6b 03 	sts	0x036B, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     7ae:	ee e5       	ldi	r30, 0x5E	; 94
     7b0:	f2 e0       	ldi	r31, 0x02	; 2
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <update_mode+0x64>
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	2a 95       	dec	r18
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     7c0:	94 81       	ldd	r25, Z+4	; 0x04
     7c2:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     7c4:	89 2b       	or	r24, r25
     7c6:	84 83       	std	Z+4, r24	; 0x04
     7c8:	08 95       	ret

000007ca <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
     7ca:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
     7ce:	ed ea       	ldi	r30, 0xAD	; 173
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	88 23       	and	r24, r24
     7d6:	ec f7       	brge	.-6      	; 0x7d2 <spi_shift_byte+0x8>
	return SPDR1;
     7d8:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
     7dc:	08 95       	ret

000007de <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
     7e2:	ce e5       	ldi	r28, 0x5E	; 94
     7e4:	d2 e0       	ldi	r29, 0x02	; 2
     7e6:	88 81       	ld	r24, Y
     7e8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
     800:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
     804:	8d 81       	ldd	r24, Y+5	; 0x05
     806:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
     80a:	8e 81       	ldd	r24, Y+6	; 0x06
     80c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
     810:	8f 81       	ldd	r24, Y+7	; 0x07
     812:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
     816:	88 85       	ldd	r24, Y+8	; 0x08
     818:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
     81c:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
     81e:	43 9a       	sbi	0x08, 3	; 8
	
	
};
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <read_switches>:

void read_switches(void) { //reads switch data
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
     82a:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
     832:	c9 e5       	ldi	r28, 0x59	; 89
     834:	d2 e0       	ldi	r29, 0x02	; 2
     836:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
     83e:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
     846:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
     84e:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 e5 03 	call	0x7ca	; 0x7ca <spi_shift_byte>
     856:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
     858:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1);
     85a:	98 81       	ld	r25, Y
     85c:	39 2f       	mov	r19, r25
     85e:	36 95       	lsr	r19
     860:	ec e6       	ldi	r30, 0x6C	; 108
     862:	f3 e0       	ldi	r31, 0x03	; 3
     864:	20 81       	ld	r18, Z
     866:	30 fb       	bst	r19, 0
     868:	20 f9       	bld	r18, 0
     86a:	20 83       	st	Z, r18
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
     86c:	e4 e5       	ldi	r30, 0x54	; 84
     86e:	f2 e0       	ldi	r31, 0x02	; 2
     870:	20 81       	ld	r18, Z
     872:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
     874:	29 27       	eor	r18, r25
     876:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
     878:	92 23       	and	r25, r18
     87a:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
     87c:	21 81       	ldd	r18, Z+1	; 0x01
     87e:	99 81       	ldd	r25, Y+1	; 0x01
     880:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
     882:	29 27       	eor	r18, r25
     884:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
     886:	92 23       	and	r25, r18
     888:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
     88a:	22 81       	ldd	r18, Z+2	; 0x02
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
     890:	29 27       	eor	r18, r25
     892:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
     894:	92 23       	and	r25, r18
     896:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
     898:	23 81       	ldd	r18, Z+3	; 0x03
     89a:	9b 81       	ldd	r25, Y+3	; 0x03
     89c:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
     89e:	29 27       	eor	r18, r25
     8a0:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
     8a2:	92 23       	and	r25, r18
     8a4:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
     8a6:	94 81       	ldd	r25, Z+4	; 0x04
     8a8:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
     8aa:	98 27       	eor	r25, r24
     8ac:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
     8ae:	89 23       	and	r24, r25
     8b0:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
     8bc:	da 01       	movw	r26, r20
     8be:	aa 0f       	add	r26, r26
     8c0:	bb 1f       	adc	r27, r27
     8c2:	a4 5f       	subi	r26, 0xF4	; 244
     8c4:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
     8c6:	8c 91       	ld	r24, X
     8c8:	e8 2f       	mov	r30, r24
     8ca:	e6 95       	lsr	r30
     8cc:	e6 95       	lsr	r30
     8ce:	e6 95       	lsr	r30
     8d0:	e7 70       	andi	r30, 0x07	; 7
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e7 5a       	subi	r30, 0xA7	; 167
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	20 81       	ld	r18, Z
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	98 2f       	mov	r25, r24
     8de:	97 70       	andi	r25, 0x07	; 7
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <parse_switch_data+0x2e>
     8e2:	35 95       	asr	r19
     8e4:	27 95       	ror	r18
     8e6:	9a 95       	dec	r25
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <parse_switch_data+0x2a>
     8ea:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
     8ec:	86 fb       	bst	r24, 6
     8ee:	99 27       	eor	r25, r25
     8f0:	90 f9       	bld	r25, 0
     8f2:	29 27       	eor	r18, r25
     8f4:	20 fb       	bst	r18, 0
     8f6:	86 f9       	bld	r24, 6
     8f8:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
     8fa:	4f 5f       	subi	r20, 0xFF	; 255
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	43 32       	cpi	r20, 0x23	; 35
     900:	51 05       	cpc	r21, r1
     902:	e1 f6       	brne	.-72     	; 0x8bc <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
     904:	08 95       	ret

00000906 <check_start_stop_tap>:

void check_start_stop_tap(void) {
	
	current_start_stop_tap_state = PINB;
     906:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
     908:	80 91 67 02 	lds	r24, 0x0267
     90c:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
     90e:	89 27       	eor	r24, r25
     910:	80 93 67 02 	sts	0x0267, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
     914:	89 23       	and	r24, r25
     916:	80 93 68 02 	sts	0x0268, r24
	
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
     91a:	86 95       	lsr	r24
     91c:	ec e6       	ldi	r30, 0x6C	; 108
     91e:	f3 e0       	ldi	r31, 0x03	; 3
     920:	90 81       	ld	r25, Z
     922:	91 fb       	bst	r25, 1
     924:	22 27       	eor	r18, r18
     926:	20 f9       	bld	r18, 0
     928:	82 27       	eor	r24, r18
     92a:	80 fb       	bst	r24, 0
     92c:	91 f9       	bld	r25, 1
     92e:	90 83       	st	Z, r25
	if (!sequencer.START) {
     930:	91 fd       	sbrc	r25, 1
     932:	05 c0       	rjmp	.+10     	; 0x93e <check_start_stop_tap+0x38>
		sequencer.current_step = 0;
     934:	ee ea       	ldi	r30, 0xAE	; 174
     936:	f3 e0       	ldi	r31, 0x03	; 3
     938:	80 81       	ld	r24, Z
     93a:	80 7f       	andi	r24, 0xF0	; 240
     93c:	80 83       	st	Z, r24
     93e:	08 95       	ret

00000940 <check_inst_switches>:
	}
	
}
	
void check_inst_switches(void) {
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	0f 2e       	mov	r0, r31
     964:	f5 e0       	ldi	r31, 0x05	; 5
     966:	ef 2e       	mov	r14, r31
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0
     96e:	0f 2e       	mov	r0, r31
     970:	fb e3       	ldi	r31, 0x3B	; 59
     972:	8f 2e       	mov	r8, r31
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	9f 2e       	mov	r9, r31
     978:	f0 2d       	mov	r31, r0
     97a:	02 e1       	ldi	r16, 0x12	; 18
     97c:	10 e0       	ldi	r17, 0x00	; 0
     97e:	c1 e1       	ldi	r28, 0x11	; 17
     980:	d0 e0       	ldi	r29, 0x00	; 0
     982:	c1 2c       	mov	r12, r1
     984:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) {
     986:	0f 2e       	mov	r0, r31
     988:	f0 eb       	ldi	r31, 0xB0	; 176
     98a:	af 2e       	mov	r10, r31
     98c:	f3 e0       	ldi	r31, 0x03	; 3
     98e:	bf 2e       	mov	r11, r31
     990:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
     992:	0f 2e       	mov	r0, r31
     994:	ff e5       	ldi	r31, 0x5F	; 95
     996:	4f 2e       	mov	r4, r31
     998:	f1 e0       	ldi	r31, 0x01	; 1
     99a:	5f 2e       	mov	r5, r31
     99c:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
     99e:	0f 2e       	mov	r0, r31
     9a0:	ff e0       	ldi	r31, 0x0F	; 15
     9a2:	3f 2e       	mov	r3, r31
     9a4:	f0 2d       	mov	r31, r0
     9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <check_inst_switches+0x80>
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	c8 1a       	sub	r12, r24
     9ac:	d8 0a       	sbc	r13, r24
     9ae:	21 96       	adiw	r28, 0x01	; 1
     9b0:	0f 5f       	subi	r16, 0xFF	; 255
     9b2:	1f 4f       	sbci	r17, 0xFF	; 255
     9b4:	a6 e0       	ldi	r26, 0x06	; 6
     9b6:	ea 0e       	add	r14, r26
     9b8:	f1 1c       	adc	r15, r1
     9ba:	b6 e0       	ldi	r27, 0x06	; 6
     9bc:	8b 0e       	add	r8, r27
     9be:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
     9c0:	fe 01       	movw	r30, r28
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	e4 5f       	subi	r30, 0xF4	; 244
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	80 81       	ld	r24, Z
     9cc:	86 ff       	sbrs	r24, 6
     9ce:	37 c0       	rjmp	.+110    	; 0xa3e <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
     9d0:	fe 01       	movw	r30, r28
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	e4 5f       	subi	r30, 0xF4	; 244
     9d8:	fd 4f       	sbci	r31, 0xFD	; 253
     9da:	8f 7b       	andi	r24, 0xBF	; 191
     9dc:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
     9de:	0e 94 43 02 	call	0x486	; 0x486 <turn_off_all_inst_leds>
     9e2:	f7 01       	movw	r30, r14
     9e4:	d7 01       	movw	r26, r14
     9e6:	12 97       	sbiw	r26, 0x02	; 2

			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
     9e8:	8c 91       	ld	r24, X
     9ea:	8f 3f       	cpi	r24, 0xFF	; 255
     9ec:	a9 f0       	breq	.+42     	; 0xa18 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
     9ee:	d5 01       	movw	r26, r10
     9f0:	8c 91       	ld	r24, X
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	c8 16       	cp	r12, r24
     9f6:	d9 06       	cpc	r13, r25
     9f8:	49 f4       	brne	.+18     	; 0xa0c <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
     9fa:	f4 01       	movw	r30, r8
     9fc:	80 81       	ld	r24, Z
     9fe:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
     a06:	d5 01       	movw	r26, r10
     a08:	8c 93       	st	X, r24
     a0a:	19 c0       	rjmp	.+50     	; 0xa3e <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
     a0c:	80 81       	ld	r24, Z
     a0e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
     a12:	f5 01       	movw	r30, r10
     a14:	c0 82       	st	Z, r12
     a16:	13 c0       	rjmp	.+38     	; 0xa3e <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) {
     a18:	d5 01       	movw	r26, r10
     a1a:	8c 91       	ld	r24, X
     a1c:	86 30       	cpi	r24, 0x06	; 6
     a1e:	51 f4       	brne	.+20     	; 0xa34 <check_inst_switches+0xf4>
     a20:	c7 31       	cpi	r28, 0x17	; 23
     a22:	d1 05       	cpc	r29, r1
     a24:	39 f4       	brne	.+14     	; 0xa34 <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
     a26:	f2 01       	movw	r30, r4
     a28:	80 81       	ld	r24, Z
     a2a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
					sequencer.current_inst = MA;
     a2e:	d5 01       	movw	r26, r10
     a30:	3c 92       	st	X, r3
     a32:	ba cf       	rjmp	.-140    	; 0x9a8 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
     a34:	80 81       	ld	r24, Z
     a36:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
     a3a:	f5 01       	movw	r30, r10
     a3c:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
     a3e:	0c 31       	cpi	r16, 0x1C	; 28
     a40:	11 05       	cpc	r17, r1
     a42:	0c f4       	brge	.+2      	; 0xa46 <check_inst_switches+0x106>
     a44:	b1 cf       	rjmp	.-158    	; 0x9a8 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
     a46:	80 91 2c 02 	lds	r24, 0x022C
     a4a:	86 ff       	sbrs	r24, 6
     a4c:	0c c0       	rjmp	.+24     	; 0xa66 <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
     a4e:	ec e2       	ldi	r30, 0x2C	; 44
     a50:	f2 e0       	ldi	r31, 0x02	; 2
     a52:	8f 7b       	andi	r24, 0xBF	; 191
     a54:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
     a56:	0e 94 43 02 	call	0x486	; 0x486 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
     a5a:	84 e1       	ldi	r24, 0x14	; 20
     a5c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <turn_on>
		sequencer.current_inst = AC;
     a60:	80 e1       	ldi	r24, 0x10	; 16
     a62:	80 93 b0 03 	sts	0x03B0, r24
	}
}	
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	bf 90       	pop	r11
     a78:	af 90       	pop	r10
     a7a:	9f 90       	pop	r9
     a7c:	8f 90       	pop	r8
     a7e:	7f 90       	pop	r7
     a80:	6f 90       	pop	r6
     a82:	5f 90       	pop	r5
     a84:	4f 90       	pop	r4
     a86:	3f 90       	pop	r3
     a88:	08 95       	ret

00000a8a <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     a8a:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     a8c:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     a8e:	74 83       	std	Z+4, r23	; 0x04
     a90:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     a92:	11 82       	std	Z+1, r1	; 0x01
     a94:	10 82       	st	Z, r1
     a96:	08 95       	ret

00000a98 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ec 01       	movw	r28, r24
     aa4:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     aa6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <store_and_clear_interrupt>
     aaa:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     aac:	f9 80       	ldd	r15, Y+1	; 0x01
     aae:	4f 2d       	mov	r20, r15
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	ca 01       	movw	r24, r20
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	2a 81       	ldd	r18, Y+2	; 0x02
     ab8:	62 2f       	mov	r22, r18
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divmodhi4>
     ac0:	28 81       	ld	r18, Y
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	82 17       	cp	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	29 f4       	brne	.+10     	; 0xad4 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
     aca:	81 2f       	mov	r24, r17
     acc:	0e 94 c8 05 	call	0xb90	; 0xb90 <restore_interrupt_setting>
      return false;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
     ad4:	eb 81       	ldd	r30, Y+3	; 0x03
     ad6:	fc 81       	ldd	r31, Y+4	; 0x04
     ad8:	ef 0d       	add	r30, r15
     ada:	f1 1d       	adc	r31, r1
     adc:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
     ade:	29 81       	ldd	r18, Y+1	; 0x01
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	c9 01       	movw	r24, r18
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	6a 81       	ldd	r22, Y+2	; 0x02
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divmodhi4>
     aee:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     af0:	81 2f       	mov	r24, r17
     af2:	0e 94 c8 05 	call	0xb90	; 0xb90 <restore_interrupt_setting>
      return true;
     af6:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	08 95       	ret

00000b04 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     b0a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     b0e:	39 81       	ldd	r19, Y+1	; 0x01
     b10:	28 81       	ld	r18, Y
     b12:	32 17       	cp	r19, r18
     b14:	18 f0       	brcs	.+6      	; 0xb1c <bytequeue_length+0x18>
      len = queue->end - queue->start;
     b16:	c3 2f       	mov	r28, r19
     b18:	c2 1b       	sub	r28, r18
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <bytequeue_length+0x20>
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
     b1e:	c3 2f       	mov	r28, r19
     b20:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
     b22:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
     b24:	0e 94 c8 05 	call	0xb90	; 0xb90 <restore_interrupt_setting>
   return len;
}
     b28:	8c 2f       	mov	r24, r28
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     b30:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     b32:	80 81       	ld	r24, Z
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	9b 01       	movw	r18, r22
     b38:	28 0f       	add	r18, r24
     b3a:	31 1d       	adc	r19, r1
     b3c:	c9 01       	movw	r24, r18
     b3e:	62 81       	ldd	r22, Z+2	; 0x02
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divmodhi4>
     b46:	03 80       	ldd	r0, Z+3	; 0x03
     b48:	f4 81       	ldd	r31, Z+4	; 0x04
     b4a:	e0 2d       	mov	r30, r0
     b4c:	e8 0f       	add	r30, r24
     b4e:	f9 1f       	adc	r31, r25
}
     b50:	80 81       	ld	r24, Z
     b52:	08 95       	ret

00000b54 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ec 01       	movw	r28, r24
     b5c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     b5e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <store_and_clear_interrupt>
     b62:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     b64:	88 81       	ld	r24, Y
     b66:	21 2f       	mov	r18, r17
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	b9 01       	movw	r22, r18
     b6c:	68 0f       	add	r22, r24
     b6e:	71 1d       	adc	r23, r1
     b70:	cb 01       	movw	r24, r22
     b72:	6a 81       	ldd	r22, Y+2	; 0x02
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divmodhi4>
     b7a:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     b7c:	84 2f       	mov	r24, r20
     b7e:	0e 94 c8 05 	call	0xb90	; 0xb90 <restore_interrupt_setting>
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	08 95       	ret

00000b8a <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     b8a:	8f b7       	in	r24, 0x3f	; 63
   cli();
     b8c:	f8 94       	cli
   return sreg;
}
     b8e:	08 95       	ret

00000b90 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     b90:	8f bf       	out	0x3f, r24	; 63
     b92:	08 95       	ret

00000b94 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     b94:	88 1f       	adc	r24, r24
     b96:	88 27       	eor	r24, r24
     b98:	88 1f       	adc	r24, r24
     b9a:	08 95       	ret

00000b9c <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	88 3f       	cpi	r24, 0xF8	; 248
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <midi_is_realtime+0x8>
     ba2:	90 e0       	ldi	r25, 0x00	; 0
}
     ba4:	89 2f       	mov	r24, r25
     ba6:	08 95       	ret

00000ba8 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     ba8:	98 2f       	mov	r25, r24
     baa:	90 7f       	andi	r25, 0xF0	; 240
     bac:	90 3c       	cpi	r25, 0xC0	; 192
     bae:	b1 f0       	breq	.+44     	; 0xbdc <midi_packet_length+0x34>
     bb0:	58 f4       	brcc	.+22     	; 0xbc8 <midi_packet_length+0x20>
     bb2:	90 39       	cpi	r25, 0x90	; 144
     bb4:	41 f1       	breq	.+80     	; 0xc06 <midi_packet_length+0x5e>
     bb6:	18 f4       	brcc	.+6      	; 0xbbe <midi_packet_length+0x16>
     bb8:	90 38       	cpi	r25, 0x80	; 128
     bba:	19 f5       	brne	.+70     	; 0xc02 <midi_packet_length+0x5a>
     bbc:	24 c0       	rjmp	.+72     	; 0xc06 <midi_packet_length+0x5e>
     bbe:	90 3a       	cpi	r25, 0xA0	; 160
     bc0:	11 f1       	breq	.+68     	; 0xc06 <midi_packet_length+0x5e>
     bc2:	90 3b       	cpi	r25, 0xB0	; 176
     bc4:	f1 f4       	brne	.+60     	; 0xc02 <midi_packet_length+0x5a>
     bc6:	1f c0       	rjmp	.+62     	; 0xc06 <midi_packet_length+0x5e>
     bc8:	90 3e       	cpi	r25, 0xE0	; 224
     bca:	e9 f0       	breq	.+58     	; 0xc06 <midi_packet_length+0x5e>
     bcc:	18 f4       	brcc	.+6      	; 0xbd4 <midi_packet_length+0x2c>
     bce:	90 3d       	cpi	r25, 0xD0	; 208
     bd0:	29 f0       	breq	.+10     	; 0xbdc <midi_packet_length+0x34>
     bd2:	17 c0       	rjmp	.+46     	; 0xc02 <midi_packet_length+0x5a>
     bd4:	90 3f       	cpi	r25, 0xF0	; 240
     bd6:	21 f0       	breq	.+8      	; 0xbe0 <midi_packet_length+0x38>
     bd8:	93 3f       	cpi	r25, 0xF3	; 243
     bda:	99 f4       	brne	.+38     	; 0xc02 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	08 95       	ret
      case 0xF0:
         switch(status) {
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	e1 5f       	subi	r30, 0xF1	; 241
     be6:	f1 09       	sbc	r31, r1
     be8:	ef 30       	cpi	r30, 0x0F	; 15
     bea:	f1 05       	cpc	r31, r1
     bec:	40 f4       	brcc	.+16     	; 0xbfe <midi_packet_length+0x56>
     bee:	e6 5a       	subi	r30, 0xA6	; 166
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	08 95       	ret
         }
      default:
         return UNDEFINED;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     c0c:	08 95       	ret

00000c0e <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     c0e:	fc 01       	movw	r30, r24
     c10:	75 83       	std	Z+5, r23	; 0x05
     c12:	64 83       	std	Z+4, r22	; 0x04
     c14:	08 95       	ret

00000c16 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     c16:	fc 01       	movw	r30, r24
     c18:	77 83       	std	Z+7, r23	; 0x07
     c1a:	66 83       	std	Z+6, r22	; 0x06
     c1c:	08 95       	ret

00000c1e <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     c1e:	fc 01       	movw	r30, r24
     c20:	77 8b       	std	Z+23, r23	; 0x17
     c22:	66 8b       	std	Z+22, r22	; 0x16
     c24:	08 95       	ret

00000c26 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     c2c:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
     c2e:	1f a2       	std	Y+39, r1	; 0x27
     c30:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     c32:	bc 01       	movw	r22, r24
     c34:	68 5d       	subi	r22, 0xD8	; 216
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	40 ec       	ldi	r20, 0xC0	; 192
     c3a:	88 51       	subi	r24, 0x18	; 24
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	0e 94 45 05 	call	0xa8a	; 0xa8a <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     c42:	1b 82       	std	Y+3, r1	; 0x03
     c44:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     c46:	1d 82       	std	Y+5, r1	; 0x05
     c48:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     c4a:	1f 82       	std	Y+7, r1	; 0x07
     c4c:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     c4e:	19 86       	std	Y+9, r1	; 0x09
     c50:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     c52:	1b 86       	std	Y+11, r1	; 0x0b
     c54:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     c56:	1d 86       	std	Y+13, r1	; 0x0d
     c58:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     c5a:	1f 86       	std	Y+15, r1	; 0x0f
     c5c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     c5e:	19 8a       	std	Y+17, r1	; 0x11
     c60:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     c62:	1b 8a       	std	Y+19, r1	; 0x13
     c64:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     c66:	1d 8a       	std	Y+21, r1	; 0x15
     c68:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     c6a:	1f 8a       	std	Y+23, r1	; 0x17
     c6c:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     c6e:	19 8e       	std	Y+25, r1	; 0x19
     c70:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     c72:	1b 8e       	std	Y+27, r1	; 0x1b
     c74:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     c76:	1d 8e       	std	Y+29, r1	; 0x1d
     c78:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     c7a:	1f 8e       	std	Y+31, r1	; 0x1f
     c7c:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     c7e:	19 a2       	std	Y+33, r1	; 0x21
     c80:	18 a2       	std	Y+32, r1	; 0x20
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
     c94:	66 23       	and	r22, r22
     c96:	99 f0       	breq	.+38     	; 0xcbe <midi_device_input+0x36>
     c98:	ea 01       	movw	r28, r20
     c9a:	61 50       	subi	r22, 0x01	; 1
     c9c:	06 2f       	mov	r16, r22
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	0f 5f       	subi	r16, 0xFF	; 255
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	04 0f       	add	r16, r20
     ca6:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
     ca8:	7c 01       	movw	r14, r24
     caa:	28 ee       	ldi	r18, 0xE8	; 232
     cac:	e2 0e       	add	r14, r18
     cae:	f1 1c       	adc	r15, r1
     cb0:	69 91       	ld	r22, Y+
     cb2:	c7 01       	movw	r24, r14
     cb4:	0e 94 4c 05 	call	0xa98	; 0xa98 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     cb8:	c0 17       	cp	r28, r16
     cba:	d1 07       	cpc	r29, r17
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <midi_input_callbacks+0x16>
     ce2:	1f 92       	push	r1
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	7c 01       	movw	r14, r24
     cea:	6b 01       	movw	r12, r22
     cec:	14 2f       	mov	r17, r20
     cee:	b2 2e       	mov	r11, r18
     cf0:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     cf2:	dc 01       	movw	r26, r24
     cf4:	95 96       	adiw	r26, 0x25	; 37
     cf6:	8c 91       	ld	r24, X
     cf8:	95 97       	sbiw	r26, 0x25	; 37
     cfa:	84 30       	cpi	r24, 0x04	; 4
     cfc:	11 f5       	brne	.+68     	; 0xd42 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
     cfe:	5a 96       	adiw	r26, 0x1a	; 26
     d00:	ed 91       	ld	r30, X+
     d02:	fc 91       	ld	r31, X
     d04:	5b 97       	sbiw	r26, 0x1b	; 27
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	09 f4       	brne	.+2      	; 0xd0c <midi_input_callbacks+0x40>
     d0a:	cc c0       	rjmp	.+408    	; 0xea4 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     d0c:	9b 01       	movw	r18, r22
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	31 09       	sbc	r19, r1
     d12:	ab ea       	ldi	r26, 0xAB	; 171
     d14:	ba ea       	ldi	r27, 0xAA	; 170
     d16:	0e 94 8e 08 	call	0x111c	; 0x111c <__umulhisi3>
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	9c 01       	movw	r18, r24
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	82 0f       	add	r24, r18
     d26:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     d28:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     d2a:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
     d2c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     d2e:	4c 2d       	mov	r20, r12
     d30:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     d32:	9e 01       	movw	r18, r28
     d34:	2f 5f       	subi	r18, 0xFF	; 255
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	68 2f       	mov	r22, r24
     d3a:	79 2f       	mov	r23, r25
     d3c:	c7 01       	movw	r24, r14
     d3e:	09 95       	icall
     d40:	be c0       	rjmp	.+380    	; 0xebe <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
     d42:	62 30       	cpi	r22, 0x02	; 2
     d44:	71 05       	cpc	r23, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <midi_input_callbacks+0x7e>
     d48:	55 c0       	rjmp	.+170    	; 0xdf4 <midi_input_callbacks+0x128>
     d4a:	63 30       	cpi	r22, 0x03	; 3
     d4c:	71 05       	cpc	r23, r1
     d4e:	29 f0       	breq	.+10     	; 0xd5a <midi_input_callbacks+0x8e>
     d50:	61 30       	cpi	r22, 0x01	; 1
     d52:	71 05       	cpc	r23, r1
     d54:	09 f0       	breq	.+2      	; 0xd58 <midi_input_callbacks+0x8c>
     d56:	a1 c0       	rjmp	.+322    	; 0xe9a <midi_input_callbacks+0x1ce>
     d58:	88 c0       	rjmp	.+272    	; 0xe6a <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     d5a:	84 2f       	mov	r24, r20
     d5c:	80 7f       	andi	r24, 0xF0	; 240
     d5e:	80 3a       	cpi	r24, 0xA0	; 160
     d60:	f1 f0       	breq	.+60     	; 0xd9e <midi_input_callbacks+0xd2>
     d62:	28 f4       	brcc	.+10     	; 0xd6e <midi_input_callbacks+0xa2>
     d64:	80 38       	cpi	r24, 0x80	; 128
     d66:	a9 f0       	breq	.+42     	; 0xd92 <midi_input_callbacks+0xc6>
     d68:	80 39       	cpi	r24, 0x90	; 144
     d6a:	69 f0       	breq	.+26     	; 0xd86 <midi_input_callbacks+0xba>
     d6c:	2f c0       	rjmp	.+94     	; 0xdcc <midi_input_callbacks+0x100>
     d6e:	80 3e       	cpi	r24, 0xE0	; 224
     d70:	e1 f0       	breq	.+56     	; 0xdaa <midi_input_callbacks+0xde>
     d72:	80 3f       	cpi	r24, 0xF0	; 240
     d74:	01 f1       	breq	.+64     	; 0xdb6 <midi_input_callbacks+0xea>
     d76:	80 3b       	cpi	r24, 0xB0	; 176
     d78:	49 f5       	brne	.+82     	; 0xdcc <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
     d7a:	d7 01       	movw	r26, r14
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	ed 91       	ld	r30, X+
     d80:	fc 91       	ld	r31, X
     d82:	13 97       	sbiw	r26, 0x03	; 3
              break;
     d84:	25 c0       	rjmp	.+74     	; 0xdd0 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     d86:	d7 01       	movw	r26, r14
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	ed 91       	ld	r30, X+
     d8c:	fc 91       	ld	r31, X
     d8e:	15 97       	sbiw	r26, 0x05	; 5
              break;
     d90:	1f c0       	rjmp	.+62     	; 0xdd0 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     d92:	d7 01       	movw	r26, r14
     d94:	16 96       	adiw	r26, 0x06	; 6
     d96:	ed 91       	ld	r30, X+
     d98:	fc 91       	ld	r31, X
     d9a:	17 97       	sbiw	r26, 0x07	; 7
              break;
     d9c:	19 c0       	rjmp	.+50     	; 0xdd0 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     d9e:	d7 01       	movw	r26, r14
     da0:	18 96       	adiw	r26, 0x08	; 8
     da2:	ed 91       	ld	r30, X+
     da4:	fc 91       	ld	r31, X
     da6:	19 97       	sbiw	r26, 0x09	; 9
              break;
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     daa:	d7 01       	movw	r26, r14
     dac:	1a 96       	adiw	r26, 0x0a	; 10
     dae:	ed 91       	ld	r30, X+
     db0:	fc 91       	ld	r31, X
     db2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     db6:	42 3f       	cpi	r20, 0xF2	; 242
     db8:	09 f0       	breq	.+2      	; 0xdbc <midi_input_callbacks+0xf0>
     dba:	74 c0       	rjmp	.+232    	; 0xea4 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
     dbc:	d7 01       	movw	r26, r14
     dbe:	1c 96       	adiw	r26, 0x0c	; 12
     dc0:	ed 91       	ld	r30, X+
     dc2:	fc 91       	ld	r31, X
     dc4:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
     dc6:	30 97       	sbiw	r30, 0x00	; 0
     dc8:	41 f4       	brne	.+16     	; 0xdda <midi_input_callbacks+0x10e>
     dca:	6c c0       	rjmp	.+216    	; 0xea4 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     dcc:	e0 e0       	ldi	r30, 0x00	; 0
     dce:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
     dd0:	30 97       	sbiw	r30, 0x00	; 0
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <midi_input_callbacks+0x10a>
     dd4:	67 c0       	rjmp	.+206    	; 0xea4 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
     dd6:	12 3f       	cpi	r17, 0xF2	; 242
     dd8:	31 f4       	brne	.+12     	; 0xde6 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
     dda:	2a 2d       	mov	r18, r10
     ddc:	4b 2d       	mov	r20, r11
     dde:	62 ef       	ldi	r22, 0xF2	; 242
     de0:	c7 01       	movw	r24, r14
     de2:	09 95       	icall
     de4:	6c c0       	rjmp	.+216    	; 0xebe <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
     de6:	2a 2d       	mov	r18, r10
     de8:	4b 2d       	mov	r20, r11
     dea:	61 2f       	mov	r22, r17
     dec:	6f 70       	andi	r22, 0x0F	; 15
     dee:	c7 01       	movw	r24, r14
     df0:	09 95       	icall
     df2:	65 c0       	rjmp	.+202    	; 0xebe <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     df4:	84 2f       	mov	r24, r20
     df6:	80 7f       	andi	r24, 0xF0	; 240
     df8:	80 3d       	cpi	r24, 0xD0	; 208
     dfa:	51 f0       	breq	.+20     	; 0xe10 <midi_input_callbacks+0x144>
     dfc:	80 3f       	cpi	r24, 0xF0	; 240
     dfe:	71 f0       	breq	.+28     	; 0xe1c <midi_input_callbacks+0x150>
     e00:	80 3c       	cpi	r24, 0xC0	; 192
     e02:	01 f5       	brne	.+64     	; 0xe44 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
     e04:	d7 01       	movw	r26, r14
     e06:	1e 96       	adiw	r26, 0x0e	; 14
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
     e0e:	1c c0       	rjmp	.+56     	; 0xe48 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
     e10:	d7 01       	movw	r26, r14
     e12:	50 96       	adiw	r26, 0x10	; 16
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	51 97       	sbiw	r26, 0x11	; 17
              break;
     e1a:	16 c0       	rjmp	.+44     	; 0xe48 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
     e1c:	43 3f       	cpi	r20, 0xF3	; 243
     e1e:	41 f4       	brne	.+16     	; 0xe30 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
     e20:	d7 01       	movw	r26, r14
     e22:	52 96       	adiw	r26, 0x12	; 18
     e24:	ed 91       	ld	r30, X+
     e26:	fc 91       	ld	r31, X
     e28:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	99 f4       	brne	.+38     	; 0xe54 <midi_input_callbacks+0x188>
     e2e:	3a c0       	rjmp	.+116    	; 0xea4 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
     e30:	41 3f       	cpi	r20, 0xF1	; 241
     e32:	c1 f5       	brne	.+112    	; 0xea4 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
     e34:	d7 01       	movw	r26, r14
     e36:	54 96       	adiw	r26, 0x14	; 20
     e38:	ed 91       	ld	r30, X+
     e3a:	fc 91       	ld	r31, X
     e3c:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	49 f4       	brne	.+18     	; 0xe54 <midi_input_callbacks+0x188>
     e42:	30 c0       	rjmp	.+96     	; 0xea4 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
     e44:	e0 e0       	ldi	r30, 0x00	; 0
     e46:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
     e48:	30 97       	sbiw	r30, 0x00	; 0
     e4a:	61 f1       	breq	.+88     	; 0xea4 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
     e4c:	81 2f       	mov	r24, r17
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	81 3f       	cpi	r24, 0xF1	; 241
     e52:	29 f4       	brne	.+10     	; 0xe5e <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
     e54:	4b 2d       	mov	r20, r11
     e56:	61 2f       	mov	r22, r17
     e58:	c7 01       	movw	r24, r14
     e5a:	09 95       	icall
     e5c:	30 c0       	rjmp	.+96     	; 0xebe <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
     e5e:	4b 2d       	mov	r20, r11
     e60:	61 2f       	mov	r22, r17
     e62:	6f 70       	andi	r22, 0x0F	; 15
     e64:	c7 01       	movw	r24, r14
     e66:	09 95       	icall
     e68:	2a c0       	rjmp	.+84     	; 0xebe <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
     e6a:	84 2f       	mov	r24, r20
     e6c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <midi_is_realtime>
     e70:	88 23       	and	r24, r24
     e72:	31 f0       	breq	.+12     	; 0xe80 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
     e74:	d7 01       	movw	r26, r14
     e76:	56 96       	adiw	r26, 0x16	; 22
     e78:	ed 91       	ld	r30, X+
     e7a:	fc 91       	ld	r31, X
     e7c:	57 97       	sbiw	r26, 0x17	; 23
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
     e80:	16 3f       	cpi	r17, 0xF6	; 246
     e82:	81 f4       	brne	.+32     	; 0xea4 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
     e84:	d7 01       	movw	r26, r14
     e86:	58 96       	adiw	r26, 0x18	; 24
     e88:	ed 91       	ld	r30, X+
     e8a:	fc 91       	ld	r31, X
     e8c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	49 f0       	breq	.+18     	; 0xea4 <midi_input_callbacks+0x1d8>
            func(device, byte0);
     e92:	61 2f       	mov	r22, r17
     e94:	c7 01       	movw	r24, r14
     e96:	09 95       	icall
     e98:	12 c0       	rjmp	.+36     	; 0xebe <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
     e9a:	64 30       	cpi	r22, 0x04	; 4
     e9c:	71 05       	cpc	r23, r1
     e9e:	10 f0       	brcs	.+4      	; 0xea4 <midi_input_callbacks+0x1d8>
          cnt = 0;
     ea0:	c1 2c       	mov	r12, r1
     ea2:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
     ea4:	d7 01       	movw	r26, r14
     ea6:	5c 96       	adiw	r26, 0x1c	; 28
     ea8:	ed 91       	ld	r30, X+
     eaa:	fc 91       	ld	r31, X
     eac:	5d 97       	sbiw	r26, 0x1d	; 29
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	31 f0       	breq	.+12     	; 0xebe <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
     eb2:	0a 2d       	mov	r16, r10
     eb4:	2b 2d       	mov	r18, r11
     eb6:	41 2f       	mov	r20, r17
     eb8:	b6 01       	movw	r22, r12
     eba:	c7 01       	movw	r24, r14
     ebc:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
     ebe:	d7 01       	movw	r26, r14
     ec0:	5e 96       	adiw	r26, 0x1e	; 30
     ec2:	ed 91       	ld	r30, X+
     ec4:	fc 91       	ld	r31, X
     ec6:	5f 97       	sbiw	r26, 0x1f	; 31
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	31 f0       	breq	.+12     	; 0xed8 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
     ecc:	0a 2d       	mov	r16, r10
     ece:	2b 2d       	mov	r18, r11
     ed0:	41 2f       	mov	r20, r17
     ed2:	b6 01       	movw	r22, r12
     ed4:	c7 01       	movw	r24, r14
     ed6:	09 95       	icall
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	08 95       	ret

00000ef4 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	ec 01       	movw	r28, r24
     f00:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
     f02:	86 2f       	mov	r24, r22
     f04:	0e 94 ce 05 	call	0xb9c	; 0xb9c <midi_is_realtime>
     f08:	88 23       	and	r24, r24
     f0a:	69 f0       	breq	.+26     	; 0xf26 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
     f0c:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
     f12:	00 e0       	ldi	r16, 0x00	; 0
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	41 2f       	mov	r20, r17
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	ce 01       	movw	r24, r28
     f1e:	0e 94 66 06 	call	0xccc	; 0xccc <midi_input_callbacks>
    device->input_state = state;
     f22:	fd a2       	std	Y+37, r15	; 0x25
     f24:	a4 c0       	rjmp	.+328    	; 0x106e <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
     f26:	81 2f       	mov	r24, r17
     f28:	0e 94 ca 05 	call	0xb94	; 0xb94 <midi_is_statusbyte>
     f2c:	88 23       	and	r24, r24
     f2e:	09 f4       	brne	.+2      	; 0xf32 <midi_process_byte+0x3e>
     f30:	5d c0       	rjmp	.+186    	; 0xfec <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
     f32:	8d a1       	ldd	r24, Y+37	; 0x25
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	29 f0       	breq	.+10     	; 0xf42 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
     f38:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9f a3       	std	Y+39, r25	; 0x27
     f40:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
     f42:	81 2f       	mov	r24, r17
     f44:	0e 94 d4 05 	call	0xba8	; 0xba8 <midi_packet_length>
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	31 f0       	breq	.+12     	; 0xf58 <midi_process_byte+0x64>
     f4c:	b8 f0       	brcs	.+46     	; 0xf7c <midi_process_byte+0x88>
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	79 f0       	breq	.+30     	; 0xf70 <midi_process_byte+0x7c>
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	81 f0       	breq	.+32     	; 0xf76 <midi_process_byte+0x82>
     f56:	46 c0       	rjmp	.+140    	; 0xfe4 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	41 2f       	mov	r20, r17
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 66 06 	call	0xccc	; 0xccc <midi_input_callbacks>
        device->input_state = IDLE;
     f6c:	1d a2       	std	Y+37, r1	; 0x25
        break;
     f6e:	7f c0       	rjmp	.+254    	; 0x106e <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	8d a3       	std	Y+37, r24	; 0x25
        break;
     f74:	7c c0       	rjmp	.+248    	; 0x106e <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	8d a3       	std	Y+37, r24	; 0x25
        break;
     f7a:	79 c0       	rjmp	.+242    	; 0x106e <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
     f7c:	10 3f       	cpi	r17, 0xF0	; 240
     f7e:	19 f0       	breq	.+6      	; 0xf86 <midi_process_byte+0x92>
     f80:	17 3f       	cpi	r17, 0xF7	; 247
     f82:	51 f0       	breq	.+20     	; 0xf98 <midi_process_byte+0xa4>
     f84:	2b c0       	rjmp	.+86     	; 0xfdc <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
     f86:	84 e0       	ldi	r24, 0x04	; 4
     f88:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
     f8a:	80 ef       	ldi	r24, 0xF0	; 240
     f8c:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9f a3       	std	Y+39, r25	; 0x27
     f94:	8e a3       	std	Y+38, r24	; 0x26
            break;
     f96:	6b c0       	rjmp	.+214    	; 0x106e <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
     f98:	4e a1       	ldd	r20, Y+38	; 0x26
     f9a:	5f a1       	ldd	r21, Y+39	; 0x27
     f9c:	9a 01       	movw	r18, r20
     f9e:	ab ea       	ldi	r26, 0xAB	; 171
     fa0:	ba ea       	ldi	r27, 0xAA	; 170
     fa2:	0e 94 8e 08 	call	0x111c	; 0x111c <__umulhisi3>
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	9c 01       	movw	r18, r24
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	fa 01       	movw	r30, r20
     fb6:	e8 1b       	sub	r30, r24
     fb8:	f9 0b       	sbc	r31, r25
     fba:	ec 0f       	add	r30, r28
     fbc:	fd 1f       	adc	r31, r29
     fbe:	87 ef       	ldi	r24, 0xF7	; 247
     fc0:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
     fc2:	ba 01       	movw	r22, r20
     fc4:	6f 5f       	subi	r22, 0xFF	; 255
     fc6:	7f 4f       	sbci	r23, 0xFF	; 255
     fc8:	7f a3       	std	Y+39, r23	; 0x27
     fca:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
     fcc:	0c a1       	ldd	r16, Y+36	; 0x24
     fce:	2b a1       	ldd	r18, Y+35	; 0x23
     fd0:	4a a1       	ldd	r20, Y+34	; 0x22
     fd2:	ce 01       	movw	r24, r28
     fd4:	0e 94 66 06 	call	0xccc	; 0xccc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
     fd8:	1d a2       	std	Y+37, r1	; 0x25
            break;
     fda:	49 c0       	rjmp	.+146    	; 0x106e <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
     fdc:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
     fde:	1f a2       	std	Y+39, r1	; 0x27
     fe0:	1e a2       	std	Y+38, r1	; 0x26
     fe2:	45 c0       	rjmp	.+138    	; 0x106e <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
     fe4:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
     fe6:	1f a2       	std	Y+39, r1	; 0x27
     fe8:	1e a2       	std	Y+38, r1	; 0x26
        break;
     fea:	41 c0       	rjmp	.+130    	; 0x106e <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
     fec:	ed a1       	ldd	r30, Y+37	; 0x25
     fee:	ee 23       	and	r30, r30
     ff0:	f1 f1       	breq	.+124    	; 0x106e <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
     ff2:	4e a1       	ldd	r20, Y+38	; 0x26
     ff4:	5f a1       	ldd	r21, Y+39	; 0x27
     ff6:	9a 01       	movw	r18, r20
     ff8:	ab ea       	ldi	r26, 0xAB	; 171
     ffa:	ba ea       	ldi	r27, 0xAA	; 170
     ffc:	0e 94 8e 08 	call	0x111c	; 0x111c <__umulhisi3>
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	9c 01       	movw	r18, r24
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	9a 01       	movw	r18, r20
    1010:	28 1b       	sub	r18, r24
    1012:	39 0b       	sbc	r19, r25
    1014:	de 01       	movw	r26, r28
    1016:	a2 0f       	add	r26, r18
    1018:	b3 1f       	adc	r27, r19
    101a:	92 96       	adiw	r26, 0x22	; 34
    101c:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    101e:	ba 01       	movw	r22, r20
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	7f a3       	std	Y+39, r23	; 0x27
    1026:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1028:	21 30       	cpi	r18, 0x01	; 1
    102a:	31 05       	cpc	r19, r1
    102c:	89 f0       	breq	.+34     	; 0x1050 <midi_process_byte+0x15c>
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	31 05       	cpc	r19, r1
    1032:	e9 f4       	brne	.+58     	; 0x106e <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1034:	0c a1       	ldd	r16, Y+36	; 0x24
    1036:	2b a1       	ldd	r18, Y+35	; 0x23
    1038:	4a a1       	ldd	r20, Y+34	; 0x22
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 66 06 	call	0xccc	; 0xccc <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1040:	8d a1       	ldd	r24, Y+37	; 0x25
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	a1 f0       	breq	.+40     	; 0x106e <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9f a3       	std	Y+39, r25	; 0x27
    104c:	8e a3       	std	Y+38, r24	; 0x26
    104e:	0f c0       	rjmp	.+30     	; 0x106e <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1050:	e2 30       	cpi	r30, 0x02	; 2
    1052:	69 f4       	brne	.+26     	; 0x106e <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1054:	00 e0       	ldi	r16, 0x00	; 0
    1056:	2b a1       	ldd	r18, Y+35	; 0x23
    1058:	4a a1       	ldd	r20, Y+34	; 0x22
    105a:	ce 01       	movw	r24, r28
    105c:	0e 94 66 06 	call	0xccc	; 0xccc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1060:	8d a1       	ldd	r24, Y+37	; 0x25
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	21 f0       	breq	.+8      	; 0x106e <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9f a3       	std	Y+39, r25	; 0x27
    106c:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	08 95       	ret

0000107a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    108c:	dc 01       	movw	r26, r24
    108e:	90 96       	adiw	r26, 0x20	; 32
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	91 97       	sbiw	r26, 0x21	; 33
    1096:	30 97       	sbiw	r30, 0x00	; 0
    1098:	09 f0       	breq	.+2      	; 0x109c <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    109a:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    109c:	86 01       	movw	r16, r12
    109e:	08 51       	subi	r16, 0x18	; 24
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	c8 01       	movw	r24, r16
    10a4:	0e 94 82 05 	call	0xb04	; 0xb04 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    10a8:	e8 2e       	mov	r14, r24
    10aa:	f1 2c       	mov	r15, r1
    10ac:	e1 14       	cp	r14, r1
    10ae:	f1 04       	cpc	r15, r1
    10b0:	91 f0       	breq	.+36     	; 0x10d6 <midi_device_process+0x5c>
    10b2:	c0 e0       	ldi	r28, 0x00	; 0
    10b4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	c8 01       	movw	r24, r16
    10ba:	0e 94 98 05 	call	0xb30	; 0xb30 <bytequeue_get>
    10be:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    10c0:	c6 01       	movw	r24, r12
    10c2:	0e 94 7a 07 	call	0xef4	; 0xef4 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 aa 05 	call	0xb54	; 0xb54 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    10ce:	21 96       	adiw	r28, 0x01	; 1
    10d0:	ce 15       	cp	r28, r14
    10d2:	df 05       	cpc	r29, r15
    10d4:	81 f7       	brne	.-32     	; 0x10b6 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <__divmodhi4>:
    10e8:	97 fb       	bst	r25, 7
    10ea:	07 2e       	mov	r0, r23
    10ec:	16 f4       	brtc	.+4      	; 0x10f2 <__divmodhi4+0xa>
    10ee:	00 94       	com	r0
    10f0:	07 d0       	rcall	.+14     	; 0x1100 <__divmodhi4_neg1>
    10f2:	77 fd       	sbrc	r23, 7
    10f4:	09 d0       	rcall	.+18     	; 0x1108 <__divmodhi4_neg2>
    10f6:	0e 94 9d 08 	call	0x113a	; 0x113a <__udivmodhi4>
    10fa:	07 fc       	sbrc	r0, 7
    10fc:	05 d0       	rcall	.+10     	; 0x1108 <__divmodhi4_neg2>
    10fe:	3e f4       	brtc	.+14     	; 0x110e <__divmodhi4_exit>

00001100 <__divmodhi4_neg1>:
    1100:	90 95       	com	r25
    1102:	81 95       	neg	r24
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__divmodhi4_neg2>:
    1108:	70 95       	com	r23
    110a:	61 95       	neg	r22
    110c:	7f 4f       	sbci	r23, 0xFF	; 255

0000110e <__divmodhi4_exit>:
    110e:	08 95       	ret

00001110 <__tablejump2__>:
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	05 90       	lpm	r0, Z+
    1116:	f4 91       	lpm	r31, Z
    1118:	e0 2d       	mov	r30, r0
    111a:	09 94       	ijmp

0000111c <__umulhisi3>:
    111c:	a2 9f       	mul	r26, r18
    111e:	b0 01       	movw	r22, r0
    1120:	b3 9f       	mul	r27, r19
    1122:	c0 01       	movw	r24, r0
    1124:	a3 9f       	mul	r26, r19
    1126:	70 0d       	add	r23, r0
    1128:	81 1d       	adc	r24, r1
    112a:	11 24       	eor	r1, r1
    112c:	91 1d       	adc	r25, r1
    112e:	b2 9f       	mul	r27, r18
    1130:	70 0d       	add	r23, r0
    1132:	81 1d       	adc	r24, r1
    1134:	11 24       	eor	r1, r1
    1136:	91 1d       	adc	r25, r1
    1138:	08 95       	ret

0000113a <__udivmodhi4>:
    113a:	aa 1b       	sub	r26, r26
    113c:	bb 1b       	sub	r27, r27
    113e:	51 e1       	ldi	r21, 0x11	; 17
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <__udivmodhi4_ep>

00001142 <__udivmodhi4_loop>:
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	a6 17       	cp	r26, r22
    1148:	b7 07       	cpc	r27, r23
    114a:	10 f0       	brcs	.+4      	; 0x1150 <__udivmodhi4_ep>
    114c:	a6 1b       	sub	r26, r22
    114e:	b7 0b       	sbc	r27, r23

00001150 <__udivmodhi4_ep>:
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	5a 95       	dec	r21
    1156:	a9 f7       	brne	.-22     	; 0x1142 <__udivmodhi4_loop>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	08 95       	ret

00001162 <_exit>:
    1162:	f8 94       	cli

00001164 <__stop_program>:
    1164:	ff cf       	rjmp	.-2      	; 0x1164 <__stop_program>
