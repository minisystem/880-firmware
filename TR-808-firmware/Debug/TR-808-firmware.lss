
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001ba4  00001c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  00800258  00800258  00001d90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052d5  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001494  00000000  00000000  000074fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001554  00000000  00000000  00008991  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b40  00000000  00000000  00009ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a8  00000000  00000000  0000aa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002279  00000000  00000000  0000bad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000dd49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_14>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_18>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_20>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	1c 0b       	sbc	r17, r28
      b6:	1a 0b       	sbc	r17, r26
      b8:	1c 0b       	sbc	r17, r28
      ba:	1e 0b       	sbc	r17, r30
      bc:	1e 0b       	sbc	r17, r30
      be:	24 0b       	sbc	r18, r20
      c0:	1e 0b       	sbc	r17, r30
      c2:	24 0b       	sbc	r18, r20
      c4:	24 0b       	sbc	r18, r20
      c6:	24 0b       	sbc	r18, r20
      c8:	24 0b       	sbc	r18, r20
      ca:	24 0b       	sbc	r18, r20
      cc:	1e 0b       	sbc	r17, r30
      ce:	24 0b       	sbc	r18, r20
      d0:	24 0b       	sbc	r18, r20

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e4 ea       	ldi	r30, 0xA4	; 164
      e6:	fb e1       	ldi	r31, 0x1B	; 27
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a8 35       	cpi	r26, 0x58	; 88
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	a8 e5       	ldi	r26, 0x58	; 88
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ae 34       	cpi	r26, 0x4E	; 78
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
     108:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup_adc>:



void setup_adc(void) {
	
	ADCSRA |= (1<<ADPS2); // 16 MHz/16 = 1 MHz ADC clock, could go as high as 8 MHz (/2)
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
     11a:	ec e7       	ldi	r30, 0x7C	; 124
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	80 64       	ori	r24, 0x40	; 64
     122:	80 83       	st	Z, r24
	ADMUX |= TEMPO_POT; //select channel ADC6 (PE2)
     124:	80 81       	ld	r24, Z
     126:	86 60       	ori	r24, 0x06	; 6
     128:	80 83       	st	Z, r24
	DIDR0 |= (1<<6);	
     12a:	ee e7       	ldi	r30, 0x7E	; 126
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	80 83       	st	Z, r24
     134:	08 95       	ret

00000136 <read_tempo_pot>:
}

uint16_t read_tempo_pot() {
	
	SPCR1 = 0; //disable spi during adc read
     136:	10 92 ac 00 	sts	0x00AC, r1
	DDRE &= ~(1<<SPI_SS); //ADC input is shared with SPI slave select
     13a:	6a 98       	cbi	0x0d, 2	; 13
	ADCSRA |= (1<<ADEN); //enable ADC. Enabling here adds 12 cycles to ADC conversion, but can't see way to get around it because of shared SPI SS pin
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 68       	ori	r24, 0x80	; 128
     144:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); //start ADC conversion
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (25 cycles of ADC clock - 25 us for 1 MHz ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?	
     14c:	80 81       	ld	r24, Z
     14e:	86 fd       	sbrc	r24, 6
     150:	fd cf       	rjmp	.-6      	; 0x14c <read_tempo_pot+0x16>
	//maybe makes sense to wait because SPI won't work while SPI SS is set as input
	
	//uint16_t adc_read = ADCL;
	//adc_read = adc_read | (ADCH <<8);
	DDRE |= (1<<SPI_SS); //setup SPI SS as output again
     152:	6a 9a       	sbi	0x0d, 2	; 13
	ADCSRA &= ~(1<<ADEN);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 83       	st	Z, r24
	//SPCR1 |= (1<<MSTR1); //setting SPI SS to input requires resetting SPI as master
	SPCR1 = (1<<SPE1) | (1<<MSTR1) | (1<<SPI2X); //Start SPI as MASTER
     15e:	81 e5       	ldi	r24, 0x51	; 81
     160:	80 93 ac 00 	sts	0x00AC, r24
	return ADC;	
     164:	80 91 78 00 	lds	r24, 0x0078
     168:	90 91 79 00 	lds	r25, 0x0079
     16c:	08 95       	ret

0000016e <setup_internal_clock>:


void setup_internal_clock(void) {
	
	
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);//TIMER1_DIVIDE_1024, clear on output compare match
     16e:	8d e0       	ldi	r24, 0x0D	; 13
     170:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 6f 00 	sts	0x006F, r24
     17a:	08 95       	ret

0000017c <update_clock_rate>:
	
}

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     17c:	90 93 89 00 	sts	0x0089, r25
     180:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     184:	20 91 84 00 	lds	r18, 0x0084
     188:	30 91 85 00 	lds	r19, 0x0085
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	28 f4       	brcc	.+10     	; 0x19c <update_clock_rate+0x20>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	90 93 85 00 	sts	0x0085, r25
     198:	80 93 84 00 	sts	0x0084, r24
     19c:	08 95       	ret

0000019e <trigger_drum>:
	{15,7, 1<<MA_TRIG,255, 0, MA_LED},
	{16,8, 1<<ACCENT, 255, 0, ACCENT_1_LED} //this last accent element is a bit of a hack - not currently used to access accent, but useful to turn on accent LED when accent it triggered by step sequencer (see interrupt.c)
			
};

void trigger_drum(uint8_t note, uint8_t velocity) { //this needs rework to be compatible with synchronized spi updating
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	16 2f       	mov	r17, r22
	
		//while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before triggering new drum sound, otherwise new hits come and and 'overwrite' old hits, preventing their triggers from finishing
		//could implement a trigger queue instead of waiting but this is really more of a concern from simultaneous drum hits coming from MIDI or live play. Sequencer triggers won't have this problem unless 
		//individual accents are implemented for sequencer
		current_drum_hit = note;
     1a6:	80 93 58 02 	sts	0x0258, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
     1aa:	c8 2f       	mov	r28, r24
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	fe 01       	movw	r30, r28
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	ec 0f       	add	r30, r28
     1b6:	fd 1f       	adc	r31, r29
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 50       	subi	r30, 0x00	; 0
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	a0 81       	ld	r26, Z
     1c2:	9a 2f       	mov	r25, r26
     1c4:	99 1f       	adc	r25, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	99 1f       	adc	r25, r25
     1ca:	a1 81       	ldd	r26, Z+1	; 0x01
     1cc:	a7 70       	andi	r26, 0x07	; 7
     1ce:	aa 0f       	add	r26, r26
     1d0:	a9 2b       	or	r26, r25
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	a8 59       	subi	r26, 0x98	; 152
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	9c 91       	ld	r25, X
     1da:	82 81       	ldd	r24, Z+2	; 0x02
     1dc:	89 2b       	or	r24, r25
     1de:	8c 93       	st	X, r24
		//toggle(drum_hit[note].led_index);
		//spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
			
		if (drum_hit[note].switch_bit != 255) {//need to set instrument switch
     1e0:	83 81       	ldd	r24, Z+3	; 0x03
     1e2:	8f 3f       	cpi	r24, 0xFF	; 255
     1e4:	09 f1       	breq	.+66     	; 0x228 <trigger_drum+0x8a>
				
			toggle(ACCENT_1_LED); //TODO: make this optional. It's a bit of a distracting light show, so need to be able to let user turn it off	
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     1ec:	a8 e6       	ldi	r26, 0x68	; 104
     1ee:	b2 e0       	ldi	r27, 0x02	; 2
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	2c 91       	ld	r18, X
     1f4:	13 97       	sbiw	r26, 0x03	; 3
     1f6:	ae 01       	movw	r20, r28
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	fa 01       	movw	r30, r20
     1fe:	ec 0f       	add	r30, r28
     200:	fd 1f       	adc	r31, r29
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ec 5f       	subi	r30, 0xFC	; 252
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	90 81       	ld	r25, Z
     20c:	91 70       	andi	r25, 0x01	; 1
     20e:	91 95       	neg	r25
     210:	92 27       	eor	r25, r18
     212:	c4 0f       	add	r28, r20
     214:	d5 1f       	adc	r29, r21
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
     21a:	c0 50       	subi	r28, 0x00	; 0
     21c:	df 4f       	sbci	r29, 0xFF	; 255
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	98 23       	and	r25, r24
     222:	29 27       	eor	r18, r25
     224:	13 96       	adiw	r26, 0x03	; 3
     226:	2c 93       	st	X, r18
					
		}
			
		if (velocity > 64) {
     228:	11 34       	cpi	r17, 0x41	; 65
     22a:	28 f0       	brcs	.+10     	; 0x236 <trigger_drum+0x98>
			spi_data[8] |= (1<<ACCENT);
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	80 85       	ldd	r24, Z+8	; 0x08
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 87       	std	Z+8, r24	; 0x08
			//toggle(ACCENT_1_LED);
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
     236:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi(); //can't do this here, not synchronized. duh.
     238:	0e 94 55 08 	call	0x10aa	; 0x10aa <update_spi>
			
		PORTD &= ~(1<<TRIG);
     23c:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     23e:	ee e6       	ldi	r30, 0x6E	; 110
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	82 60       	ori	r24, 0x02	; 2
     246:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     248:	85 b5       	in	r24, 0x25	; 37
     24a:	83 60       	ori	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
     24e:	10 92 66 01 	sts	0x0166, r1
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <clear_all_trigs>:

void clear_all_trigs(void) {

	spi_data[8] = 0;
     25a:	e8 e6       	ldi	r30, 0x68	; 104
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	10 86       	std	Z+8, r1	; 0x08
	spi_data[6] &= 0b11110000; //make these masks constants
     260:	86 81       	ldd	r24, Z+6	; 0x06
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	86 83       	std	Z+6, r24	; 0x06
	spi_data[7] &= 0b11011111;	
     266:	87 81       	ldd	r24, Z+7	; 0x07
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	08 95       	ret

0000026e <trigger_step>:
	
}

void trigger_step(void) { //trigger all drums on current step
     26e:	7f 92       	push	r7
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29

	clear_all_trigs();
     288:	0e 94 2d 01 	call	0x25a	; 0x25a <clear_all_trigs>
     28c:	05 e0       	ldi	r16, 0x05	; 5
     28e:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = BD; i <= MA; i++) {
     290:	c0 e0       	ldi	r28, 0x00	; 0
     292:	d0 e0       	ldi	r29, 0x00	; 0
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     294:	0f 2e       	mov	r0, r31
     296:	f9 e4       	ldi	r31, 0x49	; 73
     298:	8f 2e       	mov	r8, r31
     29a:	f4 e0       	ldi	r31, 0x04	; 4
     29c:	9f 2e       	mov	r9, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fa e4       	ldi	r31, 0x4A	; 74
     2a4:	cf 2e       	mov	r12, r31
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	df 2e       	mov	r13, r31
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f6 e4       	ldi	r31, 0x46	; 70
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f7 e6       	ldi	r31, 0x67	; 103
     2bc:	7f 2e       	mov	r7, r31
     2be:	f0 2d       	mov	r31, r0
			turn_on(drum_hit[i].led_index);
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f8 e6       	ldi	r31, 0x68	; 104
     2c4:	af 2e       	mov	r10, r31
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
		
		if ((sequencer.pattern[sequencer.variation].part[sequencer.current_step] >> i) &1) {
     2cc:	d4 01       	movw	r26, r8
     2ce:	ec 91       	ld	r30, X
     2d0:	8e 2f       	mov	r24, r30
     2d2:	82 95       	swap	r24
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	d6 01       	movw	r26, r12
     2d8:	ec 91       	ld	r30, X
     2da:	e1 70       	andi	r30, 0x01	; 1
     2dc:	e2 95       	swap	r30
     2de:	e0 7f       	andi	r30, 0xF0	; 240
     2e0:	e8 2b       	or	r30, r24
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	d7 01       	movw	r26, r14
     2e6:	8c 91       	ld	r24, X
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	81 70       	andi	r24, 0x01	; 1
     2ee:	78 9e       	mul	r7, r24
     2f0:	e0 0d       	add	r30, r0
     2f2:	f1 1d       	adc	r31, r1
     2f4:	11 24       	eor	r1, r1
     2f6:	ea 58       	subi	r30, 0x8A	; 138
     2f8:	fc 4f       	sbci	r31, 0xFC	; 252
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	0c 2e       	mov	r0, r28
     300:	02 c0       	rjmp	.+4      	; 0x306 <trigger_step+0x98>
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	0a 94       	dec	r0
     308:	e2 f7       	brpl	.-8      	; 0x302 <trigger_step+0x94>
     30a:	80 ff       	sbrs	r24, 0
     30c:	3a c0       	rjmp	.+116    	; 0x382 <trigger_step+0x114>
			turn_on(drum_hit[i].led_index);
     30e:	f8 01       	movw	r30, r16
     310:	80 81       	ld	r24, Z
     312:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
			spi_data[drum_hit[i].spi_byte_num] |= drum_hit[i].trig_bit;
     316:	de 01       	movw	r26, r28
     318:	aa 0f       	add	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	ac 0f       	add	r26, r28
     31e:	bd 1f       	adc	r27, r29
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	a0 50       	subi	r26, 0x00	; 0
     326:	bf 4f       	sbci	r27, 0xFF	; 255
     328:	ec 91       	ld	r30, X
     32a:	8e 2f       	mov	r24, r30
     32c:	88 1f       	adc	r24, r24
     32e:	88 27       	eor	r24, r24
     330:	88 1f       	adc	r24, r24
     332:	11 96       	adiw	r26, 0x01	; 1
     334:	ec 91       	ld	r30, X
     336:	e7 70       	andi	r30, 0x07	; 7
     338:	ee 0f       	add	r30, r30
     33a:	e8 2b       	or	r30, r24
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	e8 59       	subi	r30, 0x98	; 152
     340:	fd 4f       	sbci	r31, 0xFD	; 253
     342:	d8 01       	movw	r26, r16
     344:	13 97       	sbiw	r26, 0x03	; 3
     346:	9c 91       	ld	r25, X
     348:	80 81       	ld	r24, Z
     34a:	89 2b       	or	r24, r25
     34c:	80 83       	st	Z, r24
     34e:	f8 01       	movw	r30, r16
     350:	32 97       	sbiw	r30, 0x02	; 2
			if (drum_hit[i].switch_bit != 255) {//need to set instrument switch
     352:	80 81       	ld	r24, Z
     354:	8f 3f       	cpi	r24, 0xFF	; 255
     356:	a9 f0       	breq	.+42     	; 0x382 <trigger_step+0x114>
						
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
     358:	d5 01       	movw	r26, r10
     35a:	13 96       	adiw	r26, 0x03	; 3
     35c:	2c 91       	ld	r18, X
     35e:	13 97       	sbiw	r26, 0x03	; 3
     360:	fe 01       	movw	r30, r28
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ec 0f       	add	r30, r28
     368:	fd 1f       	adc	r31, r29
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ec 5f       	subi	r30, 0xFC	; 252
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	90 81       	ld	r25, Z
     374:	91 70       	andi	r25, 0x01	; 1
     376:	91 95       	neg	r25
     378:	92 27       	eor	r25, r18
     37a:	89 23       	and	r24, r25
     37c:	82 27       	eor	r24, r18
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	8c 93       	st	X, r24
}

void trigger_step(void) { //trigger all drums on current step

	clear_all_trigs();
	for (int i = BD; i <= MA; i++) {
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	0a 5f       	subi	r16, 0xFA	; 250
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	c0 31       	cpi	r28, 0x10	; 16
     38a:	d1 05       	cpc	r29, r1
     38c:	09 f0       	breq	.+2      	; 0x390 <trigger_step+0x122>
     38e:	9e cf       	rjmp	.-196    	; 0x2cc <trigger_step+0x5e>
				spi_data[3] ^= (-(drum_hit[i].switch_value) ^ spi_data[3]) & drum_hit[i].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
						
			}		
		}
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	08 95       	ret

000003ac <live_hits>:

void live_hits(void) { //use switch case here you twit
	
	if (button[INST_BD_2_SW].state) {
     3ac:	80 91 34 02 	lds	r24, 0x0234
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
     3b4:	e4 e3       	ldi	r30, 0x34	; 52
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	8f 7b       	andi	r24, 0xBF	; 191
     3ba:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
     3c4:	80 91 36 02 	lds	r24, 0x0236
     3c8:	86 ff       	sbrs	r24, 6
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
     3cc:	e6 e3       	ldi	r30, 0x36	; 54
     3ce:	f2 e0       	ldi	r31, 0x02	; 2
     3d0:	8f 7b       	andi	r24, 0xBF	; 191
     3d2:	80 83       	st	Z, r24
		trigger_drum(SD,0);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
     3dc:	80 91 38 02 	lds	r24, 0x0238
     3e0:	86 ff       	sbrs	r24, 6
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
     3e4:	e8 e3       	ldi	r30, 0x38	; 56
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
     3f4:	80 91 3a 02 	lds	r24, 0x023A
     3f8:	86 ff       	sbrs	r24, 6
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
     3fc:	ea e3       	ldi	r30, 0x3A	; 58
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	8f 7b       	andi	r24, 0xBF	; 191
     402:	80 83       	st	Z, r24
		trigger_drum(MT,0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_HT_6_SW].state) {
     40c:	80 91 3c 02 	lds	r24, 0x023C
     410:	86 ff       	sbrs	r24, 6
     412:	08 c0       	rjmp	.+16     	; 0x424 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
     414:	ec e3       	ldi	r30, 0x3C	; 60
     416:	f2 e0       	ldi	r31, 0x02	; 2
     418:	8f 7b       	andi	r24, 0xBF	; 191
     41a:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
     424:	80 91 3e 02 	lds	r24, 0x023E
     428:	86 ff       	sbrs	r24, 6
     42a:	08 c0       	rjmp	.+16     	; 0x43c <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
     42c:	ee e3       	ldi	r30, 0x3E	; 62
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	8f 7b       	andi	r24, 0xBF	; 191
     432:	80 83       	st	Z, r24
		trigger_drum(RS,0);
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
     43c:	80 91 40 02 	lds	r24, 0x0240
     440:	86 ff       	sbrs	r24, 6
     442:	08 c0       	rjmp	.+16     	; 0x454 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
     444:	e0 e4       	ldi	r30, 0x40	; 64
     446:	f2 e0       	ldi	r31, 0x02	; 2
     448:	8f 7b       	andi	r24, 0xBF	; 191
     44a:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
     454:	80 91 42 02 	lds	r24, 0x0242
     458:	86 ff       	sbrs	r24, 6
     45a:	08 c0       	rjmp	.+16     	; 0x46c <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
     45c:	e2 e4       	ldi	r30, 0x42	; 66
     45e:	f2 e0       	ldi	r31, 0x02	; 2
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 83       	st	Z, r24
		trigger_drum(CB,0);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	if (button[INST_CY_10_SW].state) {
     46c:	80 91 44 02 	lds	r24, 0x0244
     470:	86 ff       	sbrs	r24, 6
     472:	08 c0       	rjmp	.+16     	; 0x484 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
     474:	e4 e4       	ldi	r30, 0x44	; 68
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	8f 7b       	andi	r24, 0xBF	; 191
     47a:	80 83       	st	Z, r24
		trigger_drum(CY,0);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
     484:	80 91 46 02 	lds	r24, 0x0246
     488:	86 ff       	sbrs	r24, 6
     48a:	08 c0       	rjmp	.+16     	; 0x49c <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
     48c:	e6 e4       	ldi	r30, 0x46	; 70
     48e:	f2 e0       	ldi	r31, 0x02	; 2
     490:	8f 7b       	andi	r24, 0xBF	; 191
     492:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	89 e0       	ldi	r24, 0x09	; 9
     498:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
     49c:	80 91 48 02 	lds	r24, 0x0248
     4a0:	86 ff       	sbrs	r24, 6
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
     4a4:	e8 e4       	ldi	r30, 0x48	; 72
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	8f 7b       	andi	r24, 0xBF	; 191
     4aa:	80 83       	st	Z, r24
		trigger_drum(CH,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	8a e0       	ldi	r24, 0x0A	; 10
     4b0:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     4b4:	08 95       	ret

000004b6 <__vector_14>:
#include "xnormidi-develop/midi.h"
#include "xnormidi-develop/midi_device.h"
#include "midi.h"


ISR (TIMER0_COMPA_vect) {
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
     4c6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
     4c8:	ee e6       	ldi	r30, 0x6E	; 110
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8d 7f       	andi	r24, 0xFD	; 253
     4d0:	80 83       	st	Z, r24
		//spi_data[8] = 0;
	//}
	////toggle(drum_hit[current_drum_hit].led_index);
	////toggle(ACCENT_1_LED);
	//update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
	flag.trig_finished = 1;
     4d2:	80 91 75 03 	lds	r24, 0x0375
     4d6:	88 60       	ori	r24, 0x08	; 8
     4d8:	80 93 75 03 	sts	0x0375, r24
	
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	8f 91       	pop	r24
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_11>:

ISR (TIMER1_COMPA_vect) { //output compare match for internal clock
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
	//midi_send_clock(&midi_device); //much more setup and overhead is required to send MIDI data
	if (++internal_clock.ppqn_counter == internal_clock.divider)
     512:	e3 e7       	ldi	r30, 0x73	; 115
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	81 83       	std	Z+1, r24	; 0x01
     51c:	90 81       	ld	r25, Z
     51e:	89 13       	cpse	r24, r25
     520:	71 c0       	rjmp	.+226    	; 0x604 <__vector_11+0x118>
	{
		flag.next_step = 1;
     522:	80 91 75 03 	lds	r24, 0x0375
     526:	81 60       	ori	r24, 0x01	; 1
     528:	80 93 75 03 	sts	0x0375, r24
		internal_clock.beat_counter++; //overflows every 4 beats
     52c:	e5 e7       	ldi	r30, 0x75	; 117
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	80 81       	ld	r24, Z
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	98 0f       	add	r25, r24
     536:	93 70       	andi	r25, 0x03	; 3
     538:	8c 7f       	andi	r24, 0xFC	; 252
     53a:	89 2b       	or	r24, r25
     53c:	80 83       	st	Z, r24
		internal_clock.ppqn_counter = 0;
     53e:	10 92 74 02 	sts	0x0274, r1
		if (sequencer.current_step++ == (sequencer.step_num_first + sequencer.step_num_second)) {  //TODO: handle switching between parts here. step_led_mask will need to be reconstructed when switching between parts.
     542:	20 91 49 04 	lds	r18, 0x0449
     546:	82 2f       	mov	r24, r18
     548:	82 95       	swap	r24
     54a:	8f 70       	andi	r24, 0x0F	; 15
     54c:	20 91 4a 04 	lds	r18, 0x044A
     550:	21 70       	andi	r18, 0x01	; 1
     552:	22 95       	swap	r18
     554:	20 7f       	andi	r18, 0xF0	; 240
     556:	28 2b       	or	r18, r24
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	82 0f       	add	r24, r18
     55c:	e8 e4       	ldi	r30, 0x48	; 72
     55e:	f4 e0       	ldi	r31, 0x04	; 4
     560:	38 2f       	mov	r19, r24
     562:	32 95       	swap	r19
     564:	30 7f       	andi	r19, 0xF0	; 240
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	93 2b       	or	r25, r19
     56c:	91 83       	std	Z+1, r25	; 0x01
     56e:	84 fb       	bst	r24, 4
     570:	99 27       	eor	r25, r25
     572:	90 f9       	bld	r25, 0
     574:	82 81       	ldd	r24, Z+2	; 0x02
     576:	8e 7f       	andi	r24, 0xFE	; 254
     578:	89 2b       	or	r24, r25
     57a:	82 83       	std	Z+2, r24	; 0x02
     57c:	80 81       	ld	r24, Z
     57e:	48 2f       	mov	r20, r24
     580:	4f 70       	andi	r20, 0x0F	; 15
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	82 95       	swap	r24
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	84 0f       	add	r24, r20
     58c:	91 1d       	adc	r25, r1
     58e:	28 17       	cp	r18, r24
     590:	39 07       	cpc	r19, r25
     592:	c1 f5       	brne	.+112    	; 0x604 <__vector_11+0x118>
			//maybe worth having 32 bit step_led mask? Extra 68 bytes, but more bitshifting. 
			flag.new_measure = 1;
     594:	80 91 75 03 	lds	r24, 0x0375
     598:	80 62       	ori	r24, 0x20	; 32
     59a:	80 93 75 03 	sts	0x0375, r24
			sequencer.current_step = 0;
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	8f 70       	andi	r24, 0x0F	; 15
     5a2:	81 83       	std	Z+1, r24	; 0x01
     5a4:	92 81       	ldd	r25, Z+2	; 0x02
     5a6:	9e 7f       	andi	r25, 0xFE	; 254
     5a8:	92 83       	std	Z+2, r25	; 0x02
			//update step number
			uint8_t old_step_num = sequencer.step_num_first;
			sequencer.step_num_first = sequencer.step_num_new; //temp test, will need to accommodate first and second part, maybe just by addition?
     5aa:	90 81       	ld	r25, Z
     5ac:	90 7f       	andi	r25, 0xF0	; 240
     5ae:	98 2b       	or	r25, r24
     5b0:	90 83       	st	Z, r25
			if (old_step_num != sequencer.step_num_first) update_step_led_mask();
     5b2:	48 13       	cpse	r20, r24
     5b4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <update_step_led_mask>
			if (flag.variation_change == 1) {
     5b8:	80 91 75 03 	lds	r24, 0x0375
     5bc:	82 ff       	sbrs	r24, 2
     5be:	16 c0       	rjmp	.+44     	; 0x5ec <__vector_11+0x100>
				flag.variation_change = 0;
     5c0:	8b 7f       	andi	r24, 0xFB	; 251
     5c2:	80 93 75 03 	sts	0x0375, r24
				switch (sequencer.variation_mode) {
     5c6:	80 91 47 04 	lds	r24, 0x0447
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	49 f0       	breq	.+18     	; 0x5e0 <__vector_11+0xf4>
     5ce:	10 f0       	brcs	.+4      	; 0x5d4 <__vector_11+0xe8>
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	c1 f4       	brne	.+48     	; 0x604 <__vector_11+0x118>
				
				case VAR_A: case VAR_AB:
					sequencer.variation = VAR_A;
     5d4:	e6 e4       	ldi	r30, 0x46	; 70
     5d6:	f4 e0       	ldi	r31, 0x04	; 4
     5d8:	80 81       	ld	r24, Z
     5da:	8e 7f       	andi	r24, 0xFE	; 254
     5dc:	80 83       	st	Z, r24
					break;
     5de:	12 c0       	rjmp	.+36     	; 0x604 <__vector_11+0x118>
				case VAR_B:
					sequencer.variation = VAR_B;
     5e0:	e6 e4       	ldi	r30, 0x46	; 70
     5e2:	f4 e0       	ldi	r31, 0x04	; 4
     5e4:	80 81       	ld	r24, Z
     5e6:	81 60       	ori	r24, 0x01	; 1
     5e8:	80 83       	st	Z, r24
					break;	
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <__vector_11+0x118>
				
					
				}
				
			} else if (sequencer.variation_mode == VAR_AB) {
     5ec:	80 91 47 04 	lds	r24, 0x0447
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	41 f4       	brne	.+16     	; 0x604 <__vector_11+0x118>
					
				sequencer.variation ^= 1<<0; //toggle state
     5f4:	e6 e4       	ldi	r30, 0x46	; 70
     5f6:	f4 e0       	ldi	r31, 0x04	; 4
     5f8:	80 81       	ld	r24, Z
     5fa:	98 2f       	mov	r25, r24
     5fc:	90 95       	com	r25
     5fe:	90 fb       	bst	r25, 0
     600:	80 f9       	bld	r24, 0
     602:	80 83       	st	Z, r24
			}
			//sequencer.current_measure++;
		}
	} //should make the else if so second condition doesn't need to be tested
	
	if (internal_clock.ppqn_counter == internal_clock.divider >> 1) { //50% step width, sort of - this is going to get long and complicated fast - need to set flag and handle in main loop refresh function
     604:	e3 e7       	ldi	r30, 0x73	; 115
     606:	f2 e0       	ldi	r31, 0x02	; 2
     608:	80 81       	ld	r24, Z
     60a:	86 95       	lsr	r24
     60c:	91 81       	ldd	r25, Z+1	; 0x01
     60e:	98 13       	cpse	r25, r24
     610:	dd c0       	rjmp	.+442    	; 0x7cc <__vector_11+0x2e0>
		flag.half_step = 1;
     612:	80 91 75 03 	lds	r24, 0x0375
     616:	82 60       	ori	r24, 0x02	; 2
     618:	80 93 75 03 	sts	0x0375, r24
		spi_data[5] &= ~(led[BASIC_VAR_A_LED].spi_bit | led[BASIC_VAR_B_LED].spi_bit); //this clears basic variation LEDs
     61c:	40 91 d3 01 	lds	r20, 0x01D3
     620:	30 91 d6 01 	lds	r19, 0x01D6
     624:	e8 e6       	ldi	r30, 0x68	; 104
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	83 2f       	mov	r24, r19
     62a:	84 2b       	or	r24, r20
     62c:	80 95       	com	r24
     62e:	95 81       	ldd	r25, Z+5	; 0x05
     630:	89 23       	and	r24, r25
     632:	85 83       	std	Z+5, r24	; 0x05
		if (sequencer.START) { 	
     634:	80 91 77 03 	lds	r24, 0x0377
     638:	81 ff       	sbrs	r24, 1
     63a:	9a c0       	rjmp	.+308    	; 0x770 <__vector_11+0x284>
			
			spi_data[1] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]; //this keeps inst lights on while blinking step light
     63c:	cc e4       	ldi	r28, 0x4C	; 76
     63e:	d4 e0       	ldi	r29, 0x04	; 4
     640:	e8 81       	ld	r30, Y
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	b2 96       	adiw	r30, 0x22	; 34
     646:	80 91 46 04 	lds	r24, 0x0446
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	81 70       	andi	r24, 0x01	; 1
     650:	97 e6       	ldi	r25, 0x67	; 103
     652:	89 9f       	mul	r24, r25
     654:	e0 0d       	add	r30, r0
     656:	f1 1d       	adc	r31, r1
     658:	11 24       	eor	r1, r1
     65a:	ea 58       	subi	r30, 0x8A	; 138
     65c:	fc 4f       	sbci	r31, 0xFC	; 252
     65e:	92 81       	ldd	r25, Z+2	; 0x02
     660:	83 81       	ldd	r24, Z+3	; 0x03
     662:	e8 e6       	ldi	r30, 0x68	; 104
     664:	f2 e0       	ldi	r31, 0x02	; 2
     666:	91 83       	std	Z+1, r25	; 0x01
			spi_data[0] = sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8;
     668:	80 83       	st	Z, r24

			turn_off_all_inst_leds();
     66a:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
			turn_on(drum_hit[sequencer.current_inst].led_index);
     66e:	88 81       	ld	r24, Y
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	e0 50       	subi	r30, 0x00	; 0
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	85 81       	ldd	r24, Z+5	; 0x05
     686:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
								
			switch (sequencer.variation_mode) {
     68a:	20 91 47 04 	lds	r18, 0x0447
     68e:	21 30       	cpi	r18, 0x01	; 1
     690:	49 f0       	breq	.+18     	; 0x6a4 <__vector_11+0x1b8>
     692:	18 f0       	brcs	.+6      	; 0x69a <__vector_11+0x1ae>
     694:	22 30       	cpi	r18, 0x02	; 2
     696:	a1 f0       	breq	.+40     	; 0x6c0 <__vector_11+0x1d4>
     698:	20 c0       	rjmp	.+64     	; 0x6da <__vector_11+0x1ee>
				
				case VAR_A:
					sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     69a:	80 91 d3 01 	lds	r24, 0x01D3
     69e:	80 93 4d 04 	sts	0x044D, r24
					break;					
     6a2:	1b c0       	rjmp	.+54     	; 0x6da <__vector_11+0x1ee>
				case VAR_B:
					if (flag.variation_change == 1) {
     6a4:	80 91 75 03 	lds	r24, 0x0375
     6a8:	82 ff       	sbrs	r24, 2
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__vector_11+0x1ca>
						
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     6ac:	80 91 d3 01 	lds	r24, 0x01D3
     6b0:	80 93 4d 04 	sts	0x044D, r24
     6b4:	12 c0       	rjmp	.+36     	; 0x6da <__vector_11+0x1ee>
						
					}else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     6b6:	80 91 d6 01 	lds	r24, 0x01D6
     6ba:	80 93 4d 04 	sts	0x044D, r24
     6be:	0d c0       	rjmp	.+26     	; 0x6da <__vector_11+0x1ee>
					}
					break;			
				case VAR_AB:
					if (sequencer.variation == VAR_A) {
     6c0:	80 91 46 04 	lds	r24, 0x0446
     6c4:	80 fd       	sbrc	r24, 0
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <__vector_11+0x1e6>
						sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;						
     6c8:	80 91 d3 01 	lds	r24, 0x01D3
     6cc:	80 93 4d 04 	sts	0x044D, r24
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <__vector_11+0x1ee>
					} else {
						sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;						
     6d2:	80 91 d6 01 	lds	r24, 0x01D6
     6d6:	80 93 4d 04 	sts	0x044D, r24
					}
					break;
			}
			
			if (internal_clock.beat_counter <2) {
     6da:	80 91 75 02 	lds	r24, 0x0275
     6de:	83 70       	andi	r24, 0x03	; 3
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	02 97       	sbiw	r24, 0x02	; 2
     6e4:	0c f0       	brlt	.+2      	; 0x6e8 <__vector_11+0x1fc>
     6e6:	6b c0       	rjmp	.+214    	; 0x7be <__vector_11+0x2d2>
				
				if (flag.variation_change == 1) {
     6e8:	80 91 75 03 	lds	r24, 0x0375
     6ec:	82 ff       	sbrs	r24, 2
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <__vector_11+0x258>
					
					switch (sequencer.variation_mode) {
     6f0:	21 30       	cpi	r18, 0x01	; 1
     6f2:	61 f0       	breq	.+24     	; 0x70c <__vector_11+0x220>
     6f4:	18 f0       	brcs	.+6      	; 0x6fc <__vector_11+0x210>
     6f6:	22 30       	cpi	r18, 0x02	; 2
     6f8:	89 f0       	breq	.+34     	; 0x71c <__vector_11+0x230>
     6fa:	24 c0       	rjmp	.+72     	; 0x744 <__vector_11+0x258>
						
						case VAR_A:
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     6fc:	ed e4       	ldi	r30, 0x4D	; 77
     6fe:	f4 e0       	ldi	r31, 0x04	; 4
     700:	90 91 d6 01 	lds	r25, 0x01D6
     704:	80 81       	ld	r24, Z
     706:	89 2b       	or	r24, r25
     708:	80 83       	st	Z, r24
							break;
     70a:	59 c0       	rjmp	.+178    	; 0x7be <__vector_11+0x2d2>
						case VAR_B:
							if (flag.variation_change == 1) {
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     70c:	ed e4       	ldi	r30, 0x4D	; 77
     70e:	f4 e0       	ldi	r31, 0x04	; 4
     710:	90 91 d6 01 	lds	r25, 0x01D6
     714:	80 81       	ld	r24, Z
     716:	89 2b       	or	r24, r25
     718:	80 83       	st	Z, r24
     71a:	51 c0       	rjmp	.+162    	; 0x7be <__vector_11+0x2d2>
							} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;	
							}
							break;
						case VAR_AB:
							if (sequencer.variation == VAR_A) {
     71c:	80 91 46 04 	lds	r24, 0x0446
     720:	80 fd       	sbrc	r24, 0
     722:	08 c0       	rjmp	.+16     	; 0x734 <__vector_11+0x248>
								sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     724:	ed e4       	ldi	r30, 0x4D	; 77
     726:	f4 e0       	ldi	r31, 0x04	; 4
     728:	90 91 d6 01 	lds	r25, 0x01D6
     72c:	80 81       	ld	r24, Z
     72e:	89 2b       	or	r24, r25
     730:	80 83       	st	Z, r24
     732:	0a c0       	rjmp	.+20     	; 0x748 <__vector_11+0x25c>
								} else {
								sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     734:	ed e4       	ldi	r30, 0x4D	; 77
     736:	f4 e0       	ldi	r31, 0x04	; 4
     738:	90 91 d3 01 	lds	r25, 0x01D3
     73c:	80 81       	ld	r24, Z
     73e:	89 2b       	or	r24, r25
     740:	80 83       	st	Z, r24
     742:	02 c0       	rjmp	.+4      	; 0x748 <__vector_11+0x25c>
					}				
	
				
				}
				
				if (sequencer.variation_mode == VAR_AB) {
     744:	22 30       	cpi	r18, 0x02	; 2
     746:	d9 f5       	brne	.+118    	; 0x7be <__vector_11+0x2d2>
						if (sequencer.variation == VAR_A) {
     748:	80 91 46 04 	lds	r24, 0x0446
     74c:	80 fd       	sbrc	r24, 0
     74e:	08 c0       	rjmp	.+16     	; 0x760 <__vector_11+0x274>
							sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;
     750:	ed e4       	ldi	r30, 0x4D	; 77
     752:	f4 e0       	ldi	r31, 0x04	; 4
     754:	90 91 d6 01 	lds	r25, 0x01D6
     758:	80 81       	ld	r24, Z
     75a:	89 2b       	or	r24, r25
     75c:	80 83       	st	Z, r24
     75e:	2f c0       	rjmp	.+94     	; 0x7be <__vector_11+0x2d2>
							} else {
							sequencer.var_led_mask |= led[BASIC_VAR_A_LED].spi_bit;
     760:	ed e4       	ldi	r30, 0x4D	; 77
     762:	f4 e0       	ldi	r31, 0x04	; 4
     764:	90 91 d3 01 	lds	r25, 0x01D3
     768:	80 81       	ld	r24, Z
     76a:	89 2b       	or	r24, r25
     76c:	80 83       	st	Z, r24
     76e:	27 c0       	rjmp	.+78     	; 0x7be <__vector_11+0x2d2>
				} 
			}
			
		} else {
			
			spi_data[1] = 0; 
     770:	e8 e6       	ldi	r30, 0x68	; 104
     772:	f2 e0       	ldi	r31, 0x02	; 2
     774:	11 82       	std	Z+1, r1	; 0x01
			spi_data[0] = 0;
     776:	10 82       	st	Z, r1
	
			switch (sequencer.variation_mode) {
     778:	20 91 47 04 	lds	r18, 0x0447
     77c:	21 30       	cpi	r18, 0x01	; 1
     77e:	31 f0       	breq	.+12     	; 0x78c <__vector_11+0x2a0>
     780:	10 f0       	brcs	.+4      	; 0x786 <__vector_11+0x29a>
     782:	22 30       	cpi	r18, 0x02	; 2
     784:	61 f4       	brne	.+24     	; 0x79e <__vector_11+0x2b2>
					
				case VAR_A: case VAR_AB:
				sequencer.var_led_mask = led[BASIC_VAR_A_LED].spi_bit;
     786:	40 93 4d 04 	sts	0x044D, r20
				break;
     78a:	09 c0       	rjmp	.+18     	; 0x79e <__vector_11+0x2b2>
					
				case VAR_B:
				sequencer.var_led_mask = led[BASIC_VAR_B_LED].spi_bit;
     78c:	30 93 4d 04 	sts	0x044D, r19
				break;
					
			}
		
			if (internal_clock.beat_counter <2) { //1/8 note, regardless of scale (based on original 808 behavior) - don't take this as gospel. may need to adjust with different pre-scales
     790:	80 91 75 02 	lds	r24, 0x0275
     794:	83 70       	andi	r24, 0x03	; 3
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 97       	sbiw	r24, 0x02	; 2
     79a:	8c f4       	brge	.+34     	; 0x7be <__vector_11+0x2d2>
     79c:	0d c0       	rjmp	.+26     	; 0x7b8 <__vector_11+0x2cc>
     79e:	80 91 75 02 	lds	r24, 0x0275
     7a2:	83 70       	andi	r24, 0x03	; 3
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	02 97       	sbiw	r24, 0x02	; 2
     7a8:	54 f4       	brge	.+20     	; 0x7be <__vector_11+0x2d2>
			

				if (sequencer.variation_mode == VAR_AB) sequencer.var_led_mask |= led[BASIC_VAR_B_LED].spi_bit;	//turn on VAR_B LED for flashing to indicate A/B mode
     7aa:	22 30       	cpi	r18, 0x02	; 2
     7ac:	29 f4       	brne	.+10     	; 0x7b8 <__vector_11+0x2cc>
     7ae:	ed e4       	ldi	r30, 0x4D	; 77
     7b0:	f4 e0       	ldi	r31, 0x04	; 4
     7b2:	80 81       	ld	r24, Z
     7b4:	38 2b       	or	r19, r24
     7b6:	30 83       	st	Z, r19
					

			
				turn_on(STEP_1_LED); //eventually need to turn on current pattern LED in pattern mode - other modes will require different behavior to be coded
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
			}
		}
		
		spi_data[5] |= sequencer.var_led_mask;
     7be:	e8 e6       	ldi	r30, 0x68	; 104
     7c0:	f2 e0       	ldi	r31, 0x02	; 2
     7c2:	90 91 4d 04 	lds	r25, 0x044D
     7c6:	85 81       	ldd	r24, Z+5	; 0x05
     7c8:	89 2b       	or	r24, r25
     7ca:	85 83       	std	Z+5, r24	; 0x05
	} 
	
	

	
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9c 01       	movw	r18, r24
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	dc 01       	movw	r26, r24
     804:	a8 59       	subi	r26, 0x98	; 152
     806:	be 4f       	sbci	r27, 0xFE	; 254
     808:	2c 91       	ld	r18, X
     80a:	e2 2f       	mov	r30, r18
     80c:	ef 70       	andi	r30, 0x0F	; 15
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	e8 59       	subi	r30, 0x98	; 152
     812:	fd 4f       	sbci	r31, 0xFD	; 253
     814:	ec 01       	movw	r28, r24
     816:	c9 59       	subi	r28, 0x99	; 153
     818:	de 4f       	sbci	r29, 0xFE	; 254
     81a:	30 81       	ld	r19, Z
     81c:	88 81       	ld	r24, Y
     81e:	83 2b       	or	r24, r19
     820:	80 83       	st	Z, r24
	led[led_index].state = 1;
     822:	82 2f       	mov	r24, r18
     824:	80 61       	ori	r24, 0x10	; 16
     826:	8c 93       	st	X, r24

}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <turn_off>:

void turn_off(uint8_t led_index) {
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	9c 01       	movw	r18, r24
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	dc 01       	movw	r26, r24
     840:	a8 59       	subi	r26, 0x98	; 152
     842:	be 4f       	sbci	r27, 0xFE	; 254
     844:	2c 91       	ld	r18, X
     846:	e2 2f       	mov	r30, r18
     848:	ef 70       	andi	r30, 0x0F	; 15
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	e8 59       	subi	r30, 0x98	; 152
     84e:	fd 4f       	sbci	r31, 0xFD	; 253
     850:	ec 01       	movw	r28, r24
     852:	c9 59       	subi	r28, 0x99	; 153
     854:	de 4f       	sbci	r29, 0xFE	; 254
     856:	88 81       	ld	r24, Y
     858:	80 95       	com	r24
     85a:	90 81       	ld	r25, Z
     85c:	89 23       	and	r24, r25
     85e:	80 83       	st	Z, r24
	led[led_index].state = 0;
     860:	82 2f       	mov	r24, r18
     862:	8f 7e       	andi	r24, 0xEF	; 239
     864:	8c 93       	st	X, r24
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
     86c:	28 2f       	mov	r18, r24
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	2e 0f       	add	r18, r30
     878:	3f 1f       	adc	r19, r31
     87a:	f9 01       	movw	r30, r18
     87c:	e8 59       	subi	r30, 0x98	; 152
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	90 81       	ld	r25, Z
     882:	94 ff       	sbrs	r25, 4
     884:	03 c0       	rjmp	.+6      	; 0x88c <toggle+0x20>
		
		turn_off(led_index);
     886:	0e 94 17 04 	call	0x82e	; 0x82e <turn_off>
     88a:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
     88c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
     890:	08 95       	ret

00000892 <turn_off_all_inst_leds>:
	}
}

void turn_off_all_inst_leds(void) { //TODO: make masks constants

	spi_data[2] &= spi_data[2] & 0b00001111; //turn off AC, BD, SD, LT
     892:	e8 e6       	ldi	r30, 0x68	; 104
     894:	f2 e0       	ldi	r31, 0x02	; 2
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	8f 70       	andi	r24, 0x0F	; 15
     89a:	82 83       	std	Z+2, r24	; 0x02
	spi_data[7] &= spi_data[7] & 0b00100000; // turn off MT, HT, RS, CP, MA, CB, CY
     89c:	87 81       	ldd	r24, Z+7	; 0x07
     89e:	80 72       	andi	r24, 0x20	; 32
     8a0:	87 83       	std	Z+7, r24	; 0x07
	spi_data[3] &= spi_data[3] & 0b00001111; // turn off LC, MC, HC, CL
     8a2:	83 81       	ldd	r24, Z+3	; 0x03
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	83 83       	std	Z+3, r24	; 0x03
	spi_data[6] &= spi_data[6] & 0b11001111; //turn off OH, CH	
     8a8:	86 81       	ldd	r24, Z+6	; 0x06
     8aa:	8f 7c       	andi	r24, 0xCF	; 207
     8ac:	86 83       	std	Z+6, r24	; 0x06
     8ae:	08 95       	ret

000008b0 <update_step_led_mask>:
	
}
	
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
     8b0:	2f 92       	push	r2
     8b2:	3f 92       	push	r3
     8b4:	4f 92       	push	r4
     8b6:	5f 92       	push	r5
     8b8:	6f 92       	push	r6
     8ba:	7f 92       	push	r7
     8bc:	8f 92       	push	r8
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <update_step_led_mask+0x26>
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <update_step_led_mask+0x28>
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
     8dc:	82 e2       	ldi	r24, 0x22	; 34
     8de:	ec eb       	ldi	r30, 0xBC	; 188
     8e0:	f3 e0       	ldi	r31, 0x03	; 3
     8e2:	df 01       	movw	r26, r30
     8e4:	98 2f       	mov	r25, r24
     8e6:	1d 92       	st	X+, r1
     8e8:	9a 95       	dec	r25
     8ea:	e9 f7       	brne	.-6      	; 0x8e6 <update_step_led_mask+0x36>
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
     8ec:	e3 e2       	ldi	r30, 0x23	; 35
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	df 01       	movw	r26, r30
     8f2:	1d 92       	st	X+, r1
     8f4:	8a 95       	dec	r24
     8f6:	e9 f7       	brne	.-6      	; 0x8f2 <update_step_led_mask+0x42>
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
     8f8:	80 91 48 04 	lds	r24, 0x0448
     8fc:	8f 70       	andi	r24, 0x0F	; 15
     8fe:	68 2e       	mov	r6, r24
     900:	71 2c       	mov	r7, r1
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     902:	c0 90 b8 03 	lds	r12, 0x03B8
     906:	d0 90 b9 03 	lds	r13, 0x03B9
     90a:	e0 90 ba 03 	lds	r14, 0x03BA
     90e:	f0 90 bb 03 	lds	r15, 0x03BB
		if ((sequencer.pattern[VAR_B].accent >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     912:	80 90 1f 04 	lds	r8, 0x041F
     916:	90 90 20 04 	lds	r9, 0x0420
     91a:	a0 90 21 04 	lds	r10, 0x0421
     91e:	b0 90 22 04 	lds	r11, 0x0422
     922:	e8 e7       	ldi	r30, 0x78	; 120
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	fa 83       	std	Y+2, r31	; 0x02
     928:	e9 83       	std	Y+1, r30	; 0x01
     92a:	0f 2e       	mov	r0, r31
     92c:	ff ed       	ldi	r31, 0xDF	; 223
     92e:	4f 2e       	mov	r4, r31
     930:	f3 e0       	ldi	r31, 0x03	; 3
     932:	5f 2e       	mov	r5, r31
     934:	f0 2d       	mov	r31, r0
     936:	00 e0       	ldi	r16, 0x00	; 0
     938:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     93a:	22 24       	eor	r2, r2
     93c:	23 94       	inc	r2
     93e:	31 2c       	mov	r3, r1
     940:	55 c0       	rjmp	.+170    	; 0x9ec <__stack+0xed>
     942:	2b 81       	ldd	r18, Y+3	; 0x03
     944:	3c 81       	ldd	r19, Y+4	; 0x04
     946:	08 2e       	mov	r0, r24
     948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
     94a:	36 95       	lsr	r19
     94c:	27 95       	ror	r18
     94e:	0a 94       	dec	r0
     950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0x4b>
     952:	20 ff       	sbrs	r18, 0
     954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
     956:	20 81       	ld	r18, Z
     958:	31 81       	ldd	r19, Z+1	; 0x01
     95a:	24 2b       	or	r18, r20
     95c:	35 2b       	or	r19, r21
     95e:	31 83       	std	Z+1, r19	; 0x01
     960:	20 83       	st	Z, r18
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     962:	9b 01       	movw	r18, r22
     964:	08 2e       	mov	r0, r24
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
     968:	36 95       	lsr	r19
     96a:	27 95       	ror	r18
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x69>
     970:	20 ff       	sbrs	r18, 0
     972:	08 c0       	rjmp	.+16     	; 0x984 <__stack+0x85>
     974:	2d 91       	ld	r18, X+
     976:	3c 91       	ld	r19, X
     978:	11 97       	sbiw	r26, 0x01	; 1
     97a:	24 2b       	or	r18, r20
     97c:	35 2b       	or	r19, r21
     97e:	11 96       	adiw	r26, 0x01	; 1
     980:	3c 93       	st	X, r19
     982:	2e 93       	st	-X, r18
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
		
		for (int inst = BD; inst <= MA; inst++) {
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	12 96       	adiw	r26, 0x02	; 2
     988:	32 96       	adiw	r30, 0x02	; 2
     98a:	80 31       	cpi	r24, 0x10	; 16
     98c:	91 05       	cpc	r25, r1
     98e:	c9 f6       	brne	.-78     	; 0x942 <__stack+0x43>
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
		}
		
		//also need to rebuild accent led_mask here:
		if ((sequencer.pattern[VAR_A].accent >> i) &1) sequencer.pattern[VAR_A].step_led_mask[AC] |= 1<<i;
     990:	d7 01       	movw	r26, r14
     992:	c6 01       	movw	r24, r12
     994:	00 2e       	mov	r0, r16
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__stack+0xa1>
     998:	b6 95       	lsr	r27
     99a:	a7 95       	ror	r26
     99c:	97 95       	ror	r25
     99e:	87 95       	ror	r24
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__stack+0x99>
     9a4:	80 ff       	sbrs	r24, 0
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <__stack+0xbb>
     9a8:	ac ed       	ldi	r26, 0xDC	; 220
     9aa:	b3 e0       	ldi	r27, 0x03	; 3
     9ac:	8d 91       	ld	r24, X+
     9ae:	9c 91       	ld	r25, X
     9b0:	11 97       	sbiw	r26, 0x01	; 1
     9b2:	84 2b       	or	r24, r20
     9b4:	95 2b       	or	r25, r21
     9b6:	8d 93       	st	X+, r24
     9b8:	9c 93       	st	X, r25
		if ((sequencer.pattern[VAR_B].accent >> i) &1) sequencer.pattern[VAR_B].step_led_mask[AC] |= 1<<i;
     9ba:	d5 01       	movw	r26, r10
     9bc:	c4 01       	movw	r24, r8
     9be:	00 2e       	mov	r0, r16
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__stack+0xcb>
     9c2:	b6 95       	lsr	r27
     9c4:	a7 95       	ror	r26
     9c6:	97 95       	ror	r25
     9c8:	87 95       	ror	r24
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__stack+0xc3>
     9ce:	80 ff       	sbrs	r24, 0
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <__stack+0xe3>
     9d2:	e3 e4       	ldi	r30, 0x43	; 67
     9d4:	f4 e0       	ldi	r31, 0x04	; 4
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	48 2b       	or	r20, r24
     9dc:	59 2b       	or	r21, r25
     9de:	51 83       	std	Z+1, r21	; 0x01
     9e0:	40 83       	st	Z, r20
void update_step_led_mask(void) { //this blanks step_led_mask and then restore it from pattern data to appropriate step number - use to adjust step led mask when step number is changed.
	
	memset(sequencer.pattern[VAR_A].step_led_mask, 0, sizeof(sequencer.pattern[VAR_A].step_led_mask));
	memset(sequencer.pattern[VAR_B].step_led_mask, 0, sizeof(sequencer.pattern[VAR_B].step_led_mask));
	
	for (int i = 0; i <= sequencer.step_num_first; i++) {
     9e2:	0f 5f       	subi	r16, 0xFF	; 255
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
     9e6:	60 16       	cp	r6, r16
     9e8:	71 06       	cpc	r7, r17
     9ea:	d4 f0       	brlt	.+52     	; 0xa20 <__stack+0x121>
		
		for (int inst = BD; inst <= MA; inst++) {
			//sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] |= ((sequencer.pattern[sequencer.variation].part[i]) & (1<<sequencer.current_inst)); //this doesn't work. not sure why not???
			if ((sequencer.pattern[VAR_A].part[i] >> inst) & 1) sequencer.pattern[VAR_A].step_led_mask[inst] |= 1<<i;
     9ec:	a9 81       	ldd	r26, Y+1	; 0x01
     9ee:	ba 81       	ldd	r27, Y+2	; 0x02
     9f0:	2d 91       	ld	r18, X+
     9f2:	3d 91       	ld	r19, X+
     9f4:	ba 83       	std	Y+2, r27	; 0x02
     9f6:	a9 83       	std	Y+1, r26	; 0x01
     9f8:	a1 01       	movw	r20, r2
     9fa:	00 2e       	mov	r0, r16
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <__stack+0x103>
     9fe:	44 0f       	add	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	0a 94       	dec	r0
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <__stack+0xff>
			if ((sequencer.pattern[VAR_B].part[i] >> inst) & 1) sequencer.pattern[VAR_B].step_led_mask[inst] |= 1<<i;
     a06:	f2 01       	movw	r30, r4
     a08:	61 91       	ld	r22, Z+
     a0a:	71 91       	ld	r23, Z+
     a0c:	2f 01       	movw	r4, r30
     a0e:	a3 e2       	ldi	r26, 0x23	; 35
     a10:	b4 e0       	ldi	r27, 0x04	; 4
     a12:	ec eb       	ldi	r30, 0xBC	; 188
     a14:	f3 e0       	ldi	r31, 0x03	; 3
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	3c 83       	std	Y+4, r19	; 0x04
     a1c:	2b 83       	std	Y+3, r18	; 0x03
     a1e:	91 cf       	rjmp	.-222    	; 0x942 <__stack+0x43>
		//
		//
	//}
	
	
}	
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	9f 90       	pop	r9
     a3e:	8f 90       	pop	r8
     a40:	7f 90       	pop	r7
     a42:	6f 90       	pop	r6
     a44:	5f 90       	pop	r5
     a46:	4f 90       	pop	r4
     a48:	3f 90       	pop	r3
     a4a:	2f 90       	pop	r2
     a4c:	08 95       	ret

00000a4e <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
     a4e:	08 95       	ret

00000a50 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
     a50:	08 95       	ret

00000a52 <note_on_event>:


void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	

	if (note < 16) { //TODO: implement MIDI learn function to dynamically map notes to drum hits
     a52:	40 31       	cpi	r20, 0x10	; 16
     a54:	20 f4       	brcc	.+8      	; 0xa5e <note_on_event+0xc>
     a56:	62 2f       	mov	r22, r18
     a58:	84 2f       	mov	r24, r20
		
		trigger_drum(note, velocity);
     a5a:	0e 94 cf 00 	call	0x19e	; 0x19e <trigger_drum>
     a5e:	08 95       	ret

00000a60 <refresh>:



void refresh(void) {
	//if (sequencer.SHIFT) update_tempo(); //this analog reading is noisy - need to do it less often, like maybe only when shift is pressed?
	update_tempo(); //meh, doesn't seem to make a huge difference.
     a60:	0e 94 42 06 	call	0xc84	; 0xc84 <update_tempo>
	read_switches();
     a64:	0e 94 79 08 	call	0x10f2	; 0x10f2 <read_switches>
	check_start_stop_tap();
     a68:	0e 94 ee 08 	call	0x11dc	; 0x11dc <check_start_stop_tap>
	
	parse_switch_data();
     a6c:	0e 94 c7 08 	call	0x118e	; 0x118e <parse_switch_data>
	if (sequencer.mode == MANUAL_PLAY) live_hits();
     a70:	80 91 76 03 	lds	r24, 0x0376
     a74:	83 30       	cpi	r24, 0x03	; 3
     a76:	11 f4       	brne	.+4      	; 0xa7c <refresh+0x1c>
     a78:	0e 94 d6 01 	call	0x3ac	; 0x3ac <live_hits>
	update_mode();
     a7c:	0e 94 09 06 	call	0xc12	; 0xc12 <update_mode>
	check_clear_switch();
     a80:	0e 94 0f 0a 	call	0x141e	; 0x141e <check_clear_switch>
	check_variation_switches();
     a84:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <check_variation_switches>
	//update_variation();
	check_inst_switches();	
     a88:	0e 94 3c 09 	call	0x1278	; 0x1278 <check_inst_switches>
	update_step_board();
     a8c:	0e 94 0a 07 	call	0xe14	; 0xe14 <update_step_board>
	//update_step_led_mask();
	process_step();
     a90:	0e 94 70 06 	call	0xce0	; 0xce0 <process_step>
		//flag.trig_finished = 0;
		//clear_all_trigs();
		//spi_data[8] = 0; //err wait a sec - this trigger only works for AC, BC...CP. Does this mean only rising edge matters? Need to look into this.
	}
	
	update_spi();
     a94:	0e 94 55 08 	call	0x10aa	; 0x10aa <update_spi>
	PORTD &= ~(1<<TRIG);
     a98:	5d 98       	cbi	0x0b, 5	; 11
     a9a:	08 95       	ret

00000a9c <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
     a9c:	8f e1       	ldi	r24, 0x1F	; 31
     a9e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
     aa2:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     aa6:	88 ed       	ldi	r24, 0xD8	; 216
     aa8:	80 93 c1 00 	sts	0x00C1, r24
	DDRD |= (1<<PD1); //set PD1 and UART TX
     aac:	51 9a       	sbi	0x0a, 1	; 10
     aae:	08 95       	ret

00000ab0 <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	2f 93       	push	r18
     abc:	3f 93       	push	r19
     abe:	4f 93       	push	r20
     ac0:	5f 93       	push	r21
     ac2:	6f 93       	push	r22
     ac4:	7f 93       	push	r23
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	af 93       	push	r26
     acc:	bf 93       	push	r27
     ace:	ef 93       	push	r30
     ad0:	ff 93       	push	r31
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	1f 92       	push	r1
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
     adc:	80 91 c6 00 	lds	r24, 0x00C6
     ae0:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
     ae2:	ae 01       	movw	r20, r28
     ae4:	4f 5f       	subi	r20, 0xFF	; 255
     ae6:	5f 4f       	sbci	r21, 0xFF	; 255
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	88 e8       	ldi	r24, 0x88	; 136
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_20>:

ISR (USART0_TX_vect) {
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1


	
}
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
     b2e:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
     b30:	8d b1       	in	r24, 0x0d	; 13
     b32:	8c 60       	ori	r24, 0x0C	; 12
     b34:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
     b36:	87 b1       	in	r24, 0x07	; 7
     b38:	8e 60       	ori	r24, 0x0E	; 14
     b3a:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
     b3c:	20 9a       	sbi	0x04, 0	; 4
	//DDRB &= ~((1<<TAP) | (1<<START_STOP)); //set start/stop tap pins as inputs
	
	PORTE &= ~(1<<SPI_MOSI );
     b3e:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
     b40:	88 b1       	in	r24, 0x08	; 8
     b42:	81 7f       	andi	r24, 0xF1	; 241
     b44:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
     b46:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
     b48:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
     b4a:	80 e5       	ldi	r24, 0x50	; 80
     b4c:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
     b50:	ed ea       	ldi	r30, 0xAD	; 173
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	81 60       	ori	r24, 0x01	; 1
     b58:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	turn_on(MODE_2_FIRST_PART_PART);
     b60:	8d e1       	ldi	r24, 0x1D	; 29
     b62:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	turn_on(FILL_MANUAL);
     b66:	82 e2       	ldi	r24, 0x22	; 34
     b68:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	
	update_spi();
     b6c:	0e 94 55 08 	call	0x10aa	; 0x10aa <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
     b70:	84 b5       	in	r24, 0x24	; 36
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
     b76:	81 ee       	ldi	r24, 0xE1	; 225
     b78:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     b7a:	88 e8       	ldi	r24, 0x88	; 136
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 32 0b 	call	0x1664	; 0x1664 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     b82:	69 e2       	ldi	r22, 0x29	; 41
     b84:	75 e0       	ldi	r23, 0x05	; 5
     b86:	88 e8       	ldi	r24, 0x88	; 136
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	0e 94 26 0b 	call	0x164c	; 0x164c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     b8e:	67 e2       	ldi	r22, 0x27	; 39
     b90:	75 e0       	ldi	r23, 0x05	; 5
     b92:	88 e8       	ldi	r24, 0x88	; 136
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 2a 0b 	call	0x1654	; 0x1654 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     b9a:	68 e2       	ldi	r22, 0x28	; 40
     b9c:	75 e0       	ldi	r23, 0x05	; 5
     b9e:	88 e8       	ldi	r24, 0x88	; 136
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 2e 0b 	call	0x165c	; 0x165c <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
     ba6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <setup_midi_usart>
	
	setup_internal_clock();
     baa:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_internal_clock>
	internal_clock.divider = 6; //6 pulses is 1/16th note - this is are default fundamental step
     bae:	e3 e7       	ldi	r30, 0x73	; 115
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	80 83       	st	Z, r24
	internal_clock.ppqn_counter = 1;
     bb6:	11 e0       	ldi	r17, 0x01	; 1
     bb8:	11 83       	std	Z+1, r17	; 0x01
	//internal_clock.rate = 400; //use fixed rate to get clock working
	//update_clock_rate(internal_clock.rate);
	setup_adc();
     bba:	0e 94 88 00 	call	0x110	; 0x110 <setup_adc>
	flag.trig_finished = 1;
     bbe:	80 91 75 03 	lds	r24, 0x0375
     bc2:	88 60       	ori	r24, 0x08	; 8
     bc4:	80 93 75 03 	sts	0x0375, r24
	sequencer.START = 0;
     bc8:	e7 e7       	ldi	r30, 0x77	; 119
     bca:	f3 e0       	ldi	r31, 0x03	; 3
     bcc:	80 81       	ld	r24, Z
     bce:	8d 7f       	andi	r24, 0xFD	; 253
     bd0:	80 83       	st	Z, r24
	//update_tempo();
	
	//set up default start up state. Eventually this should be recalled from EEPROM
	sequencer.step_num_first = 15; //0-15 - default 16 step sequence - will change with pre-scale? and can by dynamically changed while programming pattern
     bd2:	c8 e4       	ldi	r28, 0x48	; 72
     bd4:	d4 e0       	ldi	r29, 0x04	; 4
     bd6:	88 81       	ld	r24, Y
     bd8:	8f 60       	ori	r24, 0x0F	; 15
     bda:	88 83       	st	Y, r24
	sequencer.step_num_new = 15;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8f 60       	ori	r24, 0x0F	; 15
     be0:	89 83       	std	Y+1, r24	; 0x01
	sequencer.variation_mode = VAR_A;
     be2:	10 92 47 04 	sts	0x0447, r1
	turn_on(BASIC_VAR_A_LED);
     be6:	84 e2       	ldi	r24, 0x24	; 36
     be8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	sequencer.mode = FIRST_PART;
     bec:	10 93 76 03 	sts	0x0376, r17
	sequencer.part_num = FIRST;
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	8a 83       	std	Y+2, r24	; 0x02
	turn_on(FIRST_PART_LED);
     bf6:	8a e2       	ldi	r24, 0x2A	; 42
     bf8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	turn_on(SCALE_3_LED);
     bfc:	87 e2       	ldi	r24, 0x27	; 39
     bfe:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
	sei(); //enable global interrupts	
     c02:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     c04:	88 e8       	ldi	r24, 0x88	; 136
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <midi_device_process>
	
	refresh();		
     c0c:	0e 94 30 05 	call	0xa60	; 0xa60 <refresh>

	
	}
     c10:	f9 cf       	rjmp	.-14     	; 0xc04 <main+0xd6>

00000c12 <update_mode>:

enum global_mode current_mode[6] = {PATTERN_CLEAR, FIRST_PART, SECOND_PART, MANUAL_PLAY, PLAY_RHYTHM, COMPOSE_RHYTHM};

void update_mode(void) {
	
	if (button[MODE_SW].state) {
     c12:	80 91 52 02 	lds	r24, 0x0252
     c16:	86 ff       	sbrs	r24, 6
     c18:	34 c0       	rjmp	.+104    	; 0xc82 <update_mode+0x70>
		
		button[MODE_SW].state ^= button[MODE_SW].state; //toggle switch state
     c1a:	e2 e5       	ldi	r30, 0x52	; 82
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	8f 7b       	andi	r24, 0xBF	; 191
     c20:	80 83       	st	Z, r24
		
		if (sequencer.SHIFT) {
     c22:	80 91 77 03 	lds	r24, 0x0377
     c26:	80 ff       	sbrs	r24, 0
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <update_mode+0x30>
			
			
			if (mode_index-- == 0) mode_index = NUM_MODES -1;
     c2a:	80 91 59 02 	lds	r24, 0x0259
     c2e:	88 23       	and	r24, r24
     c30:	21 f0       	breq	.+8      	; 0xc3a <update_mode+0x28>
     c32:	81 50       	subi	r24, 0x01	; 1
     c34:	80 93 59 02 	sts	0x0259, r24
     c38:	0e c0       	rjmp	.+28     	; 0xc56 <update_mode+0x44>
     c3a:	85 e0       	ldi	r24, 0x05	; 5
     c3c:	80 93 59 02 	sts	0x0259, r24
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <update_mode+0x44>
			
		} else {
			
			 if (++mode_index == NUM_MODES) mode_index = 0;
     c42:	80 91 59 02 	lds	r24, 0x0259
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	86 30       	cpi	r24, 0x06	; 6
     c4a:	19 f0       	breq	.+6      	; 0xc52 <update_mode+0x40>
     c4c:	80 93 59 02 	sts	0x0259, r24
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <update_mode+0x44>
     c52:	10 92 59 02 	sts	0x0259, r1
			 
		}
		
		sequencer.mode = current_mode[mode_index];
     c56:	20 91 59 02 	lds	r18, 0x0259
     c5a:	e2 2f       	mov	r30, r18
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	e4 5f       	subi	r30, 0xF4	; 244
     c60:	fd 4f       	sbci	r31, 0xFD	; 253
     c62:	80 81       	ld	r24, Z
     c64:	80 93 76 03 	sts	0x0376, r24
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
		spi_data[4] = (1<< mode_index) | data_mask; 
     c68:	e8 e6       	ldi	r30, 0x68	; 104
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <update_mode+0x64>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	2a 95       	dec	r18
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <update_mode+0x60>
			 if (++mode_index == NUM_MODES) mode_index = 0;
			 
		}
		
		sequencer.mode = current_mode[mode_index];
		uint8_t data_mask = spi_data[4] & 0b11000000; //mask to preserve top two bits of SPI byte 4
     c7a:	94 81       	ldd	r25, Z+4	; 0x04
     c7c:	90 7c       	andi	r25, 0xC0	; 192
		spi_data[4] = (1<< mode_index) | data_mask; 
     c7e:	89 2b       	or	r24, r25
     c80:	84 83       	std	Z+4, r24	; 0x04
     c82:	08 95       	ret

00000c84 <update_tempo>:

void update_tempo(void) {
	static uint16_t new_tempo_adc = 0;
	static uint16_t current_tempo_adc = 0;
	int tempo_adc_change = 0;
	new_tempo_adc = read_tempo_pot();
     c84:	0e 94 9b 00 	call	0x136	; 0x136 <read_tempo_pot>
     c88:	90 93 5d 02 	sts	0x025D, r25
     c8c:	80 93 5c 02 	sts	0x025C, r24
	tempo_adc_change = new_tempo_adc - current_tempo_adc;
     c90:	20 91 5a 02 	lds	r18, 0x025A
     c94:	30 91 5b 02 	lds	r19, 0x025B
     c98:	82 1b       	sub	r24, r18
     c9a:	93 0b       	sbc	r25, r19
	current_tempo_adc = current_tempo_adc + (tempo_adc_change >>2);
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	95 95       	asr	r25
     ca2:	87 95       	ror	r24
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	90 93 5b 02 	sts	0x025B, r25
     cac:	80 93 5a 02 	sts	0x025A, r24
	
	internal_clock.rate = (1023 - current_tempo_adc) + TIMER_OFFSET; //offset to get desirable tempo range
     cb0:	23 e6       	ldi	r18, 0x63	; 99
     cb2:	34 e0       	ldi	r19, 0x04	; 4
     cb4:	a9 01       	movw	r20, r18
     cb6:	48 1b       	sub	r20, r24
     cb8:	59 0b       	sbc	r21, r25
     cba:	ca 01       	movw	r24, r20
     cbc:	e3 e7       	ldi	r30, 0x73	; 115
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
     cc0:	54 83       	std	Z+4, r21	; 0x04
     cc2:	43 83       	std	Z+3, r20	; 0x03

	if (internal_clock.rate != internal_clock.previous_rate) {
     cc4:	25 81       	ldd	r18, Z+5	; 0x05
     cc6:	36 81       	ldd	r19, Z+6	; 0x06
     cc8:	42 17       	cp	r20, r18
     cca:	53 07       	cpc	r21, r19
     ccc:	11 f0       	breq	.+4      	; 0xcd2 <update_tempo+0x4e>
		
		update_clock_rate(internal_clock.rate);
     cce:	0e 94 be 00 	call	0x17c	; 0x17c <update_clock_rate>
		
	}
	
	internal_clock.previous_rate = internal_clock.rate;
     cd2:	e3 e7       	ldi	r30, 0x73	; 115
     cd4:	f2 e0       	ldi	r31, 0x02	; 2
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
     cd8:	94 81       	ldd	r25, Z+4	; 0x04
     cda:	96 83       	std	Z+6, r25	; 0x06
     cdc:	85 83       	std	Z+5, r24	; 0x05
     cde:	08 95       	ret

00000ce0 <process_step>:
	//}
	//
	//return step_mask;
//}

void process_step(void) {
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
	
		if (sequencer.START) { //this is an effort to synchronize SPI update within main loop - basically manipulate SPI data bytes and then do one single update_spi() call per loop
     ce8:	80 91 77 03 	lds	r24, 0x0377
     cec:	81 ff       	sbrs	r24, 1
     cee:	86 c0       	rjmp	.+268    	; 0xdfc <process_step+0x11c>
			
			if (sequencer.mode == FIRST_PART) {	
     cf0:	80 91 76 03 	lds	r24, 0x0376
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	09 f0       	breq	.+2      	; 0xcfa <process_step+0x1a>
     cf8:	88 c0       	rjmp	.+272    	; 0xe0a <process_step+0x12a>
				if (flag.next_step) {
     cfa:	80 91 75 03 	lds	r24, 0x0375
     cfe:	80 ff       	sbrs	r24, 0
     d00:	84 c0       	rjmp	.+264    	; 0xe0a <process_step+0x12a>
					flag.next_step = 0;
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	80 93 75 03 	sts	0x0375, r24
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
     d08:	88 70       	andi	r24, 0x08	; 8
     d0a:	88 23       	and	r24, r24
     d0c:	f1 f3       	breq	.-4      	; 0xd0a <process_step+0x2a>
					PORTD |= (1<<TRIG);
     d0e:	5d 9a       	sbi	0x0b, 5	; 11
					
					if (sequencer.part_num == FIRST) { //only blink step LEDs if playing first part
     d10:	80 91 4a 04 	lds	r24, 0x044A
     d14:	81 fd       	sbrc	r24, 1
     d16:	32 c0       	rjmp	.+100    	; 0xd7c <process_step+0x9c>
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d18:	80 91 49 04 	lds	r24, 0x0449
     d1c:	98 2f       	mov	r25, r24
     d1e:	92 95       	swap	r25
     d20:	9f 70       	andi	r25, 0x0F	; 15
     d22:	80 91 4a 04 	lds	r24, 0x044A
     d26:	81 70       	andi	r24, 0x01	; 1
     d28:	82 95       	swap	r24
     d2a:	80 7f       	andi	r24, 0xF0	; 240
     d2c:	89 2b       	or	r24, r25
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <process_step+0x58>
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	8a 95       	dec	r24
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <process_step+0x54>
     d3c:	e0 91 4c 04 	lds	r30, 0x044C
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	b2 96       	adiw	r30, 0x22	; 34
     d44:	80 91 46 04 	lds	r24, 0x0446
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	81 70       	andi	r24, 0x01	; 1
     d4e:	07 e6       	ldi	r16, 0x67	; 103
     d50:	80 9f       	mul	r24, r16
     d52:	e0 0d       	add	r30, r0
     d54:	f1 1d       	adc	r31, r1
     d56:	11 24       	eor	r1, r1
     d58:	ea 58       	subi	r30, 0x8A	; 138
     d5a:	fc 4f       	sbci	r31, 0xFC	; 252
     d5c:	92 81       	ldd	r25, Z+2	; 0x02
     d5e:	83 81       	ldd	r24, Z+3	; 0x03
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));			
     d60:	e8 e6       	ldi	r30, 0x68	; 104
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	49 2f       	mov	r20, r25
     d66:	42 23       	and	r20, r18
     d68:	40 95       	com	r20
					flag.next_step = 0;
					while(flag.trig_finished == 0); //make sure previous instrument trigger is finished before initiating next one
					PORTD |= (1<<TRIG);
					
					if (sequencer.part_num == FIRST) { //only blink step LEDs if playing first part
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
     d6a:	92 2b       	or	r25, r18
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));			
     d6c:	94 23       	and	r25, r20
     d6e:	91 83       	std	Z+1, r25	; 0x01
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d70:	98 2f       	mov	r25, r24
     d72:	93 23       	and	r25, r19
     d74:	90 95       	com	r25
					PORTD |= (1<<TRIG);
					
					if (sequencer.part_num == FIRST) { //only blink step LEDs if playing first part
						spi_data[1] = (1 << sequencer.current_step) | sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst];
						spi_data[1] &= ~(sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] & (1<<sequencer.current_step));			
						spi_data[0] = ((1 << sequencer.current_step) >> 8) | (sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] >> 8);
     d76:	83 2b       	or	r24, r19
						spi_data[0] &= ~((sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst]>>8) & ((1<<sequencer.current_step) >>8));
     d78:	89 23       	and	r24, r25
     d7a:	80 83       	st	Z, r24
					}
					trigger_step();
     d7c:	0e 94 37 01 	call	0x26e	; 0x26e <trigger_step>
					if ((sequencer.pattern[sequencer.variation].accent >> sequencer.current_step) &1) {
     d80:	80 91 46 04 	lds	r24, 0x0446
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	c8 2f       	mov	r28, r24
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	d1 2f       	mov	r29, r17
     d8c:	87 e6       	ldi	r24, 0x67	; 103
     d8e:	8c 9f       	mul	r24, r28
     d90:	f0 01       	movw	r30, r0
     d92:	8d 9f       	mul	r24, r29
     d94:	f0 0d       	add	r31, r0
     d96:	11 24       	eor	r1, r1
     d98:	e8 54       	subi	r30, 0x48	; 72
     d9a:	fc 4f       	sbci	r31, 0xFC	; 252
     d9c:	80 91 49 04 	lds	r24, 0x0449
     da0:	98 2f       	mov	r25, r24
     da2:	92 95       	swap	r25
     da4:	9f 70       	andi	r25, 0x0F	; 15
     da6:	80 91 4a 04 	lds	r24, 0x044A
     daa:	81 70       	andi	r24, 0x01	; 1
     dac:	82 95       	swap	r24
     dae:	80 7f       	andi	r24, 0xF0	; 240
     db0:	89 2b       	or	r24, r25
     db2:	40 81       	ld	r20, Z
     db4:	51 81       	ldd	r21, Z+1	; 0x01
     db6:	62 81       	ldd	r22, Z+2	; 0x02
     db8:	73 81       	ldd	r23, Z+3	; 0x03
     dba:	8a 01       	movw	r16, r20
     dbc:	9b 01       	movw	r18, r22
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <process_step+0xe8>
     dc0:	36 95       	lsr	r19
     dc2:	27 95       	ror	r18
     dc4:	17 95       	ror	r17
     dc6:	07 95       	ror	r16
     dc8:	8a 95       	dec	r24
     dca:	d2 f7       	brpl	.-12     	; 0xdc0 <process_step+0xe0>
     dcc:	00 ff       	sbrs	r16, 0
     dce:	08 c0       	rjmp	.+16     	; 0xde0 <process_step+0x100>
						spi_data[8] |= 1<<ACCENT;
     dd0:	e8 e6       	ldi	r30, 0x68	; 104
     dd2:	f2 e0       	ldi	r31, 0x02	; 2
     dd4:	80 85       	ldd	r24, Z+8	; 0x08
     dd6:	81 60       	ori	r24, 0x01	; 1
     dd8:	80 87       	std	Z+8, r24	; 0x08
						turn_on(ACCENT_1_LED);
     dda:	84 e1       	ldi	r24, 0x14	; 20
     ddc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					}
					TIMSK0 |= (1<<OCIE0A); //enable output compare match A
     de0:	ee e6       	ldi	r30, 0x6E	; 110
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	80 83       	st	Z, r24
					TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
     dea:	85 b5       	in	r24, 0x25	; 37
     dec:	83 60       	ori	r24, 0x03	; 3
     dee:	85 bd       	out	0x25, r24	; 37
					flag.trig_finished = 0;
     df0:	80 91 75 03 	lds	r24, 0x0375
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	80 93 75 03 	sts	0x0375, r24
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <process_step+0x12a>
				
				//handle patterns >16 steps here
				
			}
				
		} else if (flag.next_step){
     dfc:	80 91 75 03 	lds	r24, 0x0375
     e00:	80 ff       	sbrs	r24, 0
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <process_step+0x12a>
			
			flag.next_step = 0;
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	80 93 75 03 	sts	0x0375, r24
			//spi_data[1] = 0;
			//spi_data[0] = 0;
			//turn_on(STEP_1_LED);
			
		}
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <update_step_board>:

void update_step_board() {
     e14:	2f 92       	push	r2
     e16:	3f 92       	push	r3
     e18:	4f 92       	push	r4
     e1a:	5f 92       	push	r5
     e1c:	6f 92       	push	r6
     e1e:	7f 92       	push	r7
     e20:	8f 92       	push	r8
     e22:	9f 92       	push	r9
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
	
	if (sequencer.START) {
     e38:	80 91 77 03 	lds	r24, 0x0377
     e3c:	81 ff       	sbrs	r24, 1
     e3e:	18 c1       	rjmp	.+560    	; 0x1070 <update_step_board+0x25c>
		
			switch (sequencer.mode) {		
     e40:	90 91 76 03 	lds	r25, 0x0376
     e44:	2f ef       	ldi	r18, 0xFF	; 255
     e46:	29 0f       	add	r18, r25
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <update_step_board+0x3a>
     e4c:	11 c1       	rjmp	.+546    	; 0x1070 <update_step_board+0x25c>
			
			case FIRST_PART: case SECOND_PART: //C grammar prevents label (SECOND_PART:) from preceding a declaration, so add a blank statement (;)
				//;//<- I am a blank statement
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
     e4e:	82 ff       	sbrs	r24, 2
     e50:	26 c0       	rjmp	.+76     	; 0xe9e <update_step_board+0x8a>
					
					for (int i = 0; i < 16; i++) {
						
							if (button[i].state) {
     e52:	80 91 12 02 	lds	r24, 0x0212
     e56:	86 fd       	sbrc	r24, 6
     e58:	0b c0       	rjmp	.+22     	; 0xe70 <update_step_board+0x5c>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	ee 5e       	subi	r30, 0xEE	; 238
     e66:	fd 4f       	sbci	r31, 0xFD	; 253
     e68:	20 81       	ld	r18, Z
     e6a:	26 ff       	sbrs	r18, 6
     e6c:	13 c0       	rjmp	.+38     	; 0xe94 <update_step_board+0x80>
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <update_step_board+0x60>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
								
								button[i].state ^= button[i].state;
     e74:	fc 01       	movw	r30, r24
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	ee 5e       	subi	r30, 0xEE	; 238
     e7c:	fd 4f       	sbci	r31, 0xFD	; 253
     e7e:	90 81       	ld	r25, Z
     e80:	9f 7b       	andi	r25, 0xBF	; 191
     e82:	90 83       	st	Z, r25
								sequencer.step_num_new = i;
     e84:	e8 e4       	ldi	r30, 0x48	; 72
     e86:	f4 e0       	ldi	r31, 0x04	; 4
     e88:	8f 70       	andi	r24, 0x0F	; 15
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	90 7f       	andi	r25, 0xF0	; 240
     e8e:	89 2b       	or	r24, r25
     e90:	81 83       	std	Z+1, r24	; 0x01
								break;// - should we break out of here? multiple presses will mess things up, right?
     e92:	ee c0       	rjmp	.+476    	; 0x1070 <update_step_board+0x25c>
			case FIRST_PART: case SECOND_PART: //C grammar prevents label (SECOND_PART:) from preceding a declaration, so add a blank statement (;)
				//;//<- I am a blank statement
				
				if (sequencer.CLEAR) { //clear button is pressed, check if step buttons are pressed and change step number accordingly
					
					for (int i = 0; i < 16; i++) {
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	80 31       	cpi	r24, 0x10	; 16
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f7       	brne	.-62     	; 0xe5e <update_step_board+0x4a>
     e9c:	e9 c0       	rjmp	.+466    	; 0x1070 <update_step_board+0x25c>
				}
				
				uint8_t step_num;
				uint8_t offset;
				
				if (sequencer.mode == FIRST_PART) {
     e9e:	91 30       	cpi	r25, 0x01	; 1
     ea0:	29 f4       	brne	.+10     	; 0xeac <update_step_board+0x98>
					
					step_num = sequencer.step_num_first;
     ea2:	00 91 48 04 	lds	r16, 0x0448
     ea6:	0f 70       	andi	r16, 0x0F	; 15
					offset = 0;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <update_step_board+0xa2>
				} else {
					
					step_num = sequencer.step_num_second;
     eac:	00 91 48 04 	lds	r16, 0x0448
     eb0:	02 95       	swap	r16
     eb2:	0f 70       	andi	r16, 0x0F	; 15
					offset = 16; //offset for steps 16-31
     eb4:	80 e1       	ldi	r24, 0x10	; 16
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
     eb6:	90 91 4c 04 	lds	r25, 0x044C
     eba:	90 31       	cpi	r25, 0x10	; 16
     ebc:	c9 f0       	breq	.+50     	; 0xef0 <update_step_board+0xdc>
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient.
     ebe:	10 e0       	ldi	r17, 0x00	; 0
     ec0:	c0 e0       	ldi	r28, 0x00	; 0
     ec2:	d0 e0       	ldi	r29, 0x00	; 0
			
					if (button[i].state) {
				
						toggle(i);
						button[i].state ^= button[i].state;
						sequencer.pattern[sequencer.variation].part[i + offset] ^= 1<<sequencer.current_inst; //offset accesses steps 16-32 of second part
     ec4:	0f 2e       	mov	r0, r31
     ec6:	f6 e4       	ldi	r31, 0x46	; 70
     ec8:	cf 2e       	mov	r12, r31
     eca:	f4 e0       	ldi	r31, 0x04	; 4
     ecc:	df 2e       	mov	r13, r31
     ece:	f0 2d       	mov	r31, r0
     ed0:	88 2e       	mov	r8, r24
     ed2:	91 2c       	mov	r9, r1
     ed4:	0f 2e       	mov	r0, r31
     ed6:	fc e4       	ldi	r31, 0x4C	; 76
     ed8:	6f 2e       	mov	r6, r31
     eda:	f4 e0       	ldi	r31, 0x04	; 4
     edc:	7f 2e       	mov	r7, r31
     ede:	f0 2d       	mov	r31, r0
     ee0:	0f 2e       	mov	r0, r31
     ee2:	f7 e6       	ldi	r31, 0x67	; 103
     ee4:	5f 2e       	mov	r5, r31
     ee6:	f0 2d       	mov	r31, r0
     ee8:	aa 24       	eor	r10, r10
     eea:	a3 94       	inc	r10
     eec:	b1 2c       	mov	r11, r1
     eee:	6d c0       	rjmp	.+218    	; 0xfca <update_step_board+0x1b6>
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
				
						if (button[i].state) {
					
							toggle(i);
							button[i].state ^= button[i].state;
							sequencer.pattern[sequencer.variation].accent ^= 1<<(i + offset); //offset accesses steps 16-32 of second part
     ef6:	0f 2e       	mov	r0, r31
     ef8:	f6 e4       	ldi	r31, 0x46	; 70
     efa:	af 2e       	mov	r10, r31
     efc:	f4 e0       	ldi	r31, 0x04	; 4
     efe:	bf 2e       	mov	r11, r31
     f00:	f0 2d       	mov	r31, r0
     f02:	e8 2e       	mov	r14, r24
     f04:	f1 2c       	mov	r15, r1
     f06:	88 24       	eor	r8, r8
     f08:	83 94       	inc	r8
     f0a:	91 2c       	mov	r9, r1
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f0c:	0f 2e       	mov	r0, r31
     f0e:	fc e4       	ldi	r31, 0x4C	; 76
     f10:	6f 2e       	mov	r6, r31
     f12:	f4 e0       	ldi	r31, 0x04	; 4
     f14:	7f 2e       	mov	r7, r31
     f16:	f0 2d       	mov	r31, r0
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
				
						if (button[i].state) {
     f18:	fe 01       	movw	r30, r28
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	ee 5e       	subi	r30, 0xEE	; 238
     f20:	fd 4f       	sbci	r31, 0xFD	; 253
     f22:	80 81       	ld	r24, Z
     f24:	86 ff       	sbrs	r24, 6
     f26:	4b c0       	rjmp	.+150    	; 0xfbe <update_step_board+0x1aa>
					
							toggle(i);
     f28:	8c 2f       	mov	r24, r28
     f2a:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
							button[i].state ^= button[i].state;
     f2e:	fe 01       	movw	r30, r28
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ee 5e       	subi	r30, 0xEE	; 238
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7b       	andi	r24, 0xBF	; 191
     f3c:	80 83       	st	Z, r24
							sequencer.pattern[sequencer.variation].accent ^= 1<<(i + offset); //offset accesses steps 16-32 of second part
     f3e:	d5 01       	movw	r26, r10
     f40:	8c 91       	ld	r24, X
     f42:	80 fb       	bst	r24, 0
     f44:	cc 24       	eor	r12, r12
     f46:	c0 f8       	bld	r12, 0
     f48:	d1 2c       	mov	r13, r1
     f4a:	b7 e6       	ldi	r27, 0x67	; 103
     f4c:	bc 9d       	mul	r27, r12
     f4e:	c0 01       	movw	r24, r0
     f50:	bd 9d       	mul	r27, r13
     f52:	90 0d       	add	r25, r0
     f54:	11 24       	eor	r1, r1
     f56:	fc 01       	movw	r30, r24
     f58:	e8 54       	subi	r30, 0x48	; 72
     f5a:	fc 4f       	sbci	r31, 0xFC	; 252
     f5c:	9e 01       	movw	r18, r28
     f5e:	2e 0d       	add	r18, r14
     f60:	3f 1d       	adc	r19, r15
     f62:	14 01       	movw	r2, r8
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <update_step_board+0x156>
     f66:	22 0c       	add	r2, r2
     f68:	33 1c       	adc	r3, r3
     f6a:	2a 95       	dec	r18
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <update_step_board+0x152>
     f6e:	03 2c       	mov	r0, r3
     f70:	00 0c       	add	r0, r0
     f72:	44 08       	sbc	r4, r4
     f74:	55 08       	sbc	r5, r5
     f76:	40 81       	ld	r20, Z
     f78:	51 81       	ldd	r21, Z+1	; 0x01
     f7a:	62 81       	ldd	r22, Z+2	; 0x02
     f7c:	73 81       	ldd	r23, Z+3	; 0x03
     f7e:	42 25       	eor	r20, r2
     f80:	53 25       	eor	r21, r3
     f82:	64 25       	eor	r22, r4
     f84:	75 25       	eor	r23, r5
     f86:	40 83       	st	Z, r20
     f88:	51 83       	std	Z+1, r21	; 0x01
     f8a:	62 83       	std	Z+2, r22	; 0x02
     f8c:	73 83       	std	Z+3, r23	; 0x03
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
     f8e:	d3 01       	movw	r26, r6
     f90:	ec 91       	ld	r30, X
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	b2 96       	adiw	r30, 0x22	; 34
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	8e 0f       	add	r24, r30
     f9c:	9f 1f       	adc	r25, r31
     f9e:	fc 01       	movw	r30, r24
     fa0:	ea 58       	subi	r30, 0x8A	; 138
     fa2:	fc 4f       	sbci	r31, 0xFC	; 252
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	94 01       	movw	r18, r8
     faa:	0c 2e       	mov	r0, r28
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <update_step_board+0x19e>
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <update_step_board+0x19a>
     fb6:	82 27       	eor	r24, r18
     fb8:	93 27       	eor	r25, r19
     fba:	93 83       	std	Z+3, r25	; 0x03
     fbc:	82 83       	std	Z+2, r24	; 0x02
					
				}
				
				if (sequencer.current_inst == AC) { //bah, inefficient duplicate code to handle ACCENT
			
					for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient. Will need to use offset of 16 for steps 17-32 of SECOND_PART
     fbe:	21 96       	adiw	r28, 0x01	; 1
     fc0:	0c 17       	cp	r16, r28
     fc2:	1d 07       	cpc	r17, r29
     fc4:	0c f0       	brlt	.+2      	; 0xfc8 <update_step_board+0x1b4>
     fc6:	a8 cf       	rjmp	.-176    	; 0xf18 <update_step_board+0x104>
     fc8:	53 c0       	rjmp	.+166    	; 0x1070 <update_step_board+0x25c>
					}
					return;
				}
				for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient.
			
					if (button[i].state) {
     fca:	fe 01       	movw	r30, r28
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	ee 5e       	subi	r30, 0xEE	; 238
     fd2:	fd 4f       	sbci	r31, 0xFD	; 253
     fd4:	80 81       	ld	r24, Z
     fd6:	86 ff       	sbrs	r24, 6
     fd8:	46 c0       	rjmp	.+140    	; 0x1066 <update_step_board+0x252>
				
						toggle(i);
     fda:	8c 2f       	mov	r24, r28
     fdc:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
						button[i].state ^= button[i].state;
     fe0:	fe 01       	movw	r30, r28
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ee 5e       	subi	r30, 0xEE	; 238
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	80 81       	ld	r24, Z
     fec:	8f 7b       	andi	r24, 0xBF	; 191
     fee:	80 83       	st	Z, r24
						sequencer.pattern[sequencer.variation].part[i + offset] ^= 1<<sequencer.current_inst; //offset accesses steps 16-32 of second part
     ff0:	f6 01       	movw	r30, r12
     ff2:	80 81       	ld	r24, Z
     ff4:	80 fb       	bst	r24, 0
     ff6:	ee 24       	eor	r14, r14
     ff8:	e0 f8       	bld	r14, 0
     ffa:	f1 2c       	mov	r15, r1
     ffc:	d3 01       	movw	r26, r6
     ffe:	4c 91       	ld	r20, X
    1000:	24 2f       	mov	r18, r20
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	fe 01       	movw	r30, r28
    1006:	e8 0d       	add	r30, r8
    1008:	f9 1d       	adc	r31, r9
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	5e 9c       	mul	r5, r14
    1010:	c0 01       	movw	r24, r0
    1012:	5f 9c       	mul	r5, r15
    1014:	90 0d       	add	r25, r0
    1016:	11 24       	eor	r1, r1
    1018:	e8 0f       	add	r30, r24
    101a:	f9 1f       	adc	r31, r25
    101c:	ea 58       	subi	r30, 0x8A	; 138
    101e:	fc 4f       	sbci	r31, 0xFC	; 252
    1020:	b5 01       	movw	r22, r10
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <update_step_board+0x214>
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	4a 95       	dec	r20
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <update_step_board+0x210>
    102c:	ab 01       	movw	r20, r22
    102e:	62 81       	ldd	r22, Z+2	; 0x02
    1030:	73 81       	ldd	r23, Z+3	; 0x03
    1032:	46 27       	eor	r20, r22
    1034:	57 27       	eor	r21, r23
    1036:	53 83       	std	Z+3, r21	; 0x03
    1038:	42 83       	std	Z+2, r20	; 0x02
						sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
    103a:	f9 01       	movw	r30, r18
    103c:	b2 96       	adiw	r30, 0x22	; 34
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	8e 0f       	add	r24, r30
    1044:	9f 1f       	adc	r25, r31
    1046:	fc 01       	movw	r30, r24
    1048:	ea 58       	subi	r30, 0x8A	; 138
    104a:	fc 4f       	sbci	r31, 0xFC	; 252
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	95 01       	movw	r18, r10
    1052:	0c 2e       	mov	r0, r28
    1054:	02 c0       	rjmp	.+4      	; 0x105a <update_step_board+0x246>
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <update_step_board+0x242>
    105e:	82 27       	eor	r24, r18
    1060:	93 27       	eor	r25, r19
    1062:	93 83       	std	Z+3, r25	; 0x03
    1064:	82 83       	std	Z+2, r24	; 0x02
							sequencer.pattern[sequencer.variation].step_led_mask[sequencer.current_inst] ^= 1<<i;
						}
					}
					return;
				}
				for (int i = 0; i <= step_num; i++) { //button and led indices match for 0-15. How convenient.
    1066:	21 96       	adiw	r28, 0x01	; 1
    1068:	0c 17       	cp	r16, r28
    106a:	1d 07       	cpc	r17, r29
    106c:	0c f0       	brlt	.+2      	; 0x1070 <update_step_board+0x25c>
    106e:	ad cf       	rjmp	.-166    	; 0xfca <update_step_board+0x1b6>
	} else {
		
		//handle what here? changing selected pattern or rhythm? 
		
	}
}
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	9f 90       	pop	r9
    1086:	8f 90       	pop	r8
    1088:	7f 90       	pop	r7
    108a:	6f 90       	pop	r6
    108c:	5f 90       	pop	r5
    108e:	4f 90       	pop	r4
    1090:	3f 90       	pop	r3
    1092:	2f 90       	pop	r2
    1094:	08 95       	ret

00001096 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
    1096:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
    109a:	ed ea       	ldi	r30, 0xAD	; 173
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	88 23       	and	r24, r24
    10a2:	ec f7       	brge	.-6      	; 0x109e <spi_shift_byte+0x8>
	return SPDR1;
    10a4:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
    10a8:	08 95       	ret

000010aa <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
    10ae:	c8 e6       	ldi	r28, 0x68	; 104
    10b0:	d2 e0       	ldi	r29, 0x02	; 2
    10b2:	88 81       	ld	r24, Y
    10b4:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
    10d6:	8e 81       	ldd	r24, Y+6	; 0x06
    10d8:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
    10e2:	88 85       	ldd	r24, Y+8	; 0x08
    10e4:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
    10e8:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
    10ea:	43 9a       	sbi	0x08, 3	; 8
	
	
};
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <read_switches>:

void read_switches(void) { //reads switch data
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
    10f6:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
    10fe:	c3 e6       	ldi	r28, 0x63	; 99
    1100:	d2 e0       	ldi	r29, 0x02	; 2
    1102:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
    110a:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
    1112:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
    111a:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 4b 08 	call	0x1096	; 0x1096 <spi_shift_byte>
    1122:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
    1124:	42 98       	cbi	0x08, 2	; 8
	
	sequencer.SHIFT = ((spi_current_switch_data[0] >> SHIFT_BIT) & 1); //this detects press and hold rather than a toggle, like most other switch handling
    1126:	28 81       	ld	r18, Y
    1128:	92 2f       	mov	r25, r18
    112a:	96 95       	lsr	r25
    112c:	e7 e7       	ldi	r30, 0x77	; 119
    112e:	f3 e0       	ldi	r31, 0x03	; 3
    1130:	30 81       	ld	r19, Z
    1132:	90 fb       	bst	r25, 0
    1134:	30 f9       	bld	r19, 0
	sequencer.CLEAR = ((spi_current_switch_data[2] >> CLEAR_BIT) & 1);
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	49 2f       	mov	r20, r25
    113a:	42 95       	swap	r20
    113c:	4f 70       	andi	r20, 0x0F	; 15
    113e:	40 fb       	bst	r20, 0
    1140:	32 f9       	bld	r19, 2
    1142:	30 83       	st	Z, r19
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
    1144:	ee e5       	ldi	r30, 0x5E	; 94
    1146:	f2 e0       	ldi	r31, 0x02	; 2
    1148:	30 81       	ld	r19, Z
    114a:	23 27       	eor	r18, r19
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
    114c:	32 27       	eor	r19, r18
    114e:	30 83       	st	Z, r19
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
    1150:	23 23       	and	r18, r19
    1152:	28 83       	st	Y, r18
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
    1154:	31 81       	ldd	r19, Z+1	; 0x01
    1156:	29 81       	ldd	r18, Y+1	; 0x01
    1158:	23 27       	eor	r18, r19
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
    115a:	32 27       	eor	r19, r18
    115c:	31 83       	std	Z+1, r19	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
    115e:	23 23       	and	r18, r19
    1160:	29 83       	std	Y+1, r18	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
    1162:	22 81       	ldd	r18, Z+2	; 0x02
    1164:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
    1166:	29 27       	eor	r18, r25
    1168:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
    116a:	92 23       	and	r25, r18
    116c:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
    116e:	23 81       	ldd	r18, Z+3	; 0x03
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
    1174:	29 27       	eor	r18, r25
    1176:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
    1178:	92 23       	and	r25, r18
    117a:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
    117c:	94 81       	ldd	r25, Z+4	; 0x04
    117e:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
    1180:	98 27       	eor	r25, r24
    1182:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
    1184:	89 23       	and	r24, r25
    1186:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	

	
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <parse_switch_data>:
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
    1192:	da 01       	movw	r26, r20
    1194:	aa 0f       	add	r26, r26
    1196:	bb 1f       	adc	r27, r27
    1198:	ae 5e       	subi	r26, 0xEE	; 238
    119a:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
    119c:	8c 91       	ld	r24, X
    119e:	e8 2f       	mov	r30, r24
    11a0:	e6 95       	lsr	r30
    11a2:	e6 95       	lsr	r30
    11a4:	e6 95       	lsr	r30
    11a6:	e7 70       	andi	r30, 0x07	; 7
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	ed 59       	subi	r30, 0x9D	; 157
    11ac:	fd 4f       	sbci	r31, 0xFD	; 253
    11ae:	20 81       	ld	r18, Z
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	98 2f       	mov	r25, r24
    11b4:	97 70       	andi	r25, 0x07	; 7
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <parse_switch_data+0x2e>
    11b8:	35 95       	asr	r19
    11ba:	27 95       	ror	r18
    11bc:	9a 95       	dec	r25
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <parse_switch_data+0x2a>
    11c0:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
    11c2:	86 fb       	bst	r24, 6
    11c4:	99 27       	eor	r25, r25
    11c6:	90 f9       	bld	r25, 0
    11c8:	29 27       	eor	r18, r25
    11ca:	20 fb       	bst	r18, 0
    11cc:	86 f9       	bld	r24, 6
    11ce:	8c 93       	st	X, r24
uint8_t current_start_stop_tap_state = 0;
uint8_t previous_start_stop_tap_state = 0;	
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
    11d0:	4f 5f       	subi	r20, 0xFF	; 255
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
    11d4:	43 32       	cpi	r20, 0x23	; 35
    11d6:	51 05       	cpc	r21, r1
    11d8:	e1 f6       	brne	.-72     	; 0x1192 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
}	
    11da:	08 95       	ret

000011dc <check_start_stop_tap>:

void check_start_stop_tap(void) {
	//if (sequencer.mode == PATTERN_CLEAR) return; //do nothing
	current_start_stop_tap_state = PINB;
    11dc:	93 b1       	in	r25, 0x03	; 3
	current_start_stop_tap_state ^= previous_start_stop_tap_state;
    11de:	80 91 71 02 	lds	r24, 0x0271
    11e2:	98 27       	eor	r25, r24
	previous_start_stop_tap_state ^= current_start_stop_tap_state;
    11e4:	89 27       	eor	r24, r25
    11e6:	80 93 71 02 	sts	0x0271, r24
	current_start_stop_tap_state &= previous_start_stop_tap_state;
    11ea:	89 23       	and	r24, r25
    11ec:	80 93 72 02 	sts	0x0272, r24
	uint8_t start_state = sequencer.START;
    11f0:	e7 e7       	ldi	r30, 0x77	; 119
    11f2:	f3 e0       	ldi	r31, 0x03	; 3
    11f4:	90 81       	ld	r25, Z
    11f6:	91 fb       	bst	r25, 1
    11f8:	22 27       	eor	r18, r18
    11fa:	20 f9       	bld	r18, 0
	sequencer.START ^= current_start_stop_tap_state >> START_STOP;
    11fc:	86 95       	lsr	r24
    11fe:	82 27       	eor	r24, r18
    1200:	80 fb       	bst	r24, 0
    1202:	91 f9       	bld	r25, 1
    1204:	90 83       	st	Z, r25
	
	if (sequencer.START && (start_state == 0)) { //initialize sequencer when start is detected
    1206:	91 ff       	sbrs	r25, 1
    1208:	34 c0       	rjmp	.+104    	; 0x1272 <check_start_stop_tap+0x96>
    120a:	21 11       	cpse	r18, r1
    120c:	34 c0       	rjmp	.+104    	; 0x1276 <check_start_stop_tap+0x9a>
		
		sequencer.current_step = 0;
    120e:	e8 e4       	ldi	r30, 0x48	; 72
    1210:	f4 e0       	ldi	r31, 0x04	; 4
    1212:	81 81       	ldd	r24, Z+1	; 0x01
    1214:	8f 70       	andi	r24, 0x0F	; 15
    1216:	81 83       	std	Z+1, r24	; 0x01
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	8e 7f       	andi	r24, 0xFE	; 254
    121c:	82 83       	std	Z+2, r24	; 0x02
		flag.next_step = 1;
    121e:	80 91 75 03 	lds	r24, 0x0375
		internal_clock.ppqn_counter = 0;//internal_clock.divider - 1;
    1222:	10 92 74 02 	sts	0x0274, r1
		flag.variation_change = 0;
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	80 93 75 03 	sts	0x0375, r24
		if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    122e:	80 91 47 04 	lds	r24, 0x0447
    1232:	8d 7f       	andi	r24, 0xFD	; 253
    1234:	31 f4       	brne	.+12     	; 0x1242 <check_start_stop_tap+0x66>
			
			sequencer.variation = VAR_A; //start on variation A
    1236:	e6 e4       	ldi	r30, 0x46	; 70
    1238:	f4 e0       	ldi	r31, 0x04	; 4
    123a:	80 81       	ld	r24, Z
    123c:	8e 7f       	andi	r24, 0xFE	; 254
    123e:	80 83       	st	Z, r24
    1240:	08 95       	ret
		} else {
			
			sequencer.variation = VAR_B;
    1242:	e6 e4       	ldi	r30, 0x46	; 70
    1244:	f4 e0       	ldi	r31, 0x04	; 4
    1246:	80 81       	ld	r24, Z
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	80 83       	st	Z, r24
    124c:	08 95       	ret
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
		
		turn_off_all_inst_leds();
    124e:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
		turn_on(drum_hit[sequencer.current_inst].led_index);
    1252:	80 91 4c 04 	lds	r24, 0x044C
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	fc 01       	movw	r30, r24
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	e8 0f       	add	r30, r24
    1260:	f9 1f       	adc	r31, r25
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	e0 50       	subi	r30, 0x00	; 0
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	85 81       	ldd	r24, Z+5	; 0x05
    126c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
    1270:	08 95       	ret
			
			sequencer.variation = VAR_B;
		}
	}
	
	if ((sequencer.START == 0) && (start_state == 1)) {//when stop is first pressed need to handle lingering instrument LEDs 
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	61 f3       	breq	.-40     	; 0x124e <check_start_stop_tap+0x72>
    1276:	08 95       	ret

00001278 <check_inst_switches>:
		
	} 
	
}
	
void check_inst_switches(void) {
    1278:	3f 92       	push	r3
    127a:	4f 92       	push	r4
    127c:	5f 92       	push	r5
    127e:	6f 92       	push	r6
    1280:	7f 92       	push	r7
    1282:	8f 92       	push	r8
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	0f 2e       	mov	r0, r31
    129c:	f5 e0       	ldi	r31, 0x05	; 5
    129e:	ef 2e       	mov	r14, r31
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	ff 2e       	mov	r15, r31
    12a4:	f0 2d       	mov	r31, r0
    12a6:	0f 2e       	mov	r0, r31
    12a8:	fb e3       	ldi	r31, 0x3B	; 59
    12aa:	8f 2e       	mov	r8, r31
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
    12ae:	9f 2e       	mov	r9, r31
    12b0:	f0 2d       	mov	r31, r0
    12b2:	02 e1       	ldi	r16, 0x12	; 18
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	c1 e1       	ldi	r28, 0x11	; 17
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
    12ba:	c1 2c       	mov	r12, r1
    12bc:	d1 2c       	mov	r13, r1
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    12be:	0f 2e       	mov	r0, r31
    12c0:	fc e4       	ldi	r31, 0x4C	; 76
    12c2:	af 2e       	mov	r10, r31
    12c4:	f4 e0       	ldi	r31, 0x04	; 4
    12c6:	bf 2e       	mov	r11, r31
    12c8:	f0 2d       	mov	r31, r0
					
					turn_on(drum_hit[MA].led_index);
    12ca:	0f 2e       	mov	r0, r31
    12cc:	ff e5       	ldi	r31, 0x5F	; 95
    12ce:	4f 2e       	mov	r4, r31
    12d0:	f1 e0       	ldi	r31, 0x01	; 1
    12d2:	5f 2e       	mov	r5, r31
    12d4:	f0 2d       	mov	r31, r0
					sequencer.current_inst = MA;
    12d6:	0f 2e       	mov	r0, r31
    12d8:	ff e0       	ldi	r31, 0x0F	; 15
    12da:	3f 2e       	mov	r3, r31
    12dc:	f0 2d       	mov	r31, r0
    12de:	0c c0       	rjmp	.+24     	; 0x12f8 <check_inst_switches+0x80>
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	c8 1a       	sub	r12, r24
    12e4:	d8 0a       	sbc	r13, r24
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	0f 5f       	subi	r16, 0xFF	; 255
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	a6 e0       	ldi	r26, 0x06	; 6
    12ee:	ea 0e       	add	r14, r26
    12f0:	f1 1c       	adc	r15, r1
    12f2:	b6 e0       	ldi	r27, 0x06	; 6
    12f4:	8b 0e       	add	r8, r27
    12f6:	91 1c       	adc	r9, r1
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
		
		if (button[i].state) {
    12f8:	fe 01       	movw	r30, r28
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ee 5e       	subi	r30, 0xEE	; 238
    1300:	fd 4f       	sbci	r31, 0xFD	; 253
    1302:	80 81       	ld	r24, Z
    1304:	86 ff       	sbrs	r24, 6
    1306:	37 c0       	rjmp	.+110    	; 0x1376 <check_inst_switches+0xfe>
			
			button[i].state ^= button[i].state; //toggle state
    1308:	fe 01       	movw	r30, r28
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	ee 5e       	subi	r30, 0xEE	; 238
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	8f 7b       	andi	r24, 0xBF	; 191
    1314:	80 83       	st	Z, r24
			turn_off_all_inst_leds();
    1316:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
    131a:	f7 01       	movw	r30, r14
    131c:	d7 01       	movw	r26, r14
    131e:	12 97       	sbiw	r26, 0x02	; 2
			
			
			if(drum_hit[i - INST_BD_2_SW].switch_bit != 255) { // need to handle instrument toggle here
    1320:	8c 91       	ld	r24, X
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	a9 f0       	breq	.+42     	; 0x1350 <check_inst_switches+0xd8>
				
				
				if (sequencer.current_inst == i - INST_BD_2_SW) {
    1326:	d5 01       	movw	r26, r10
    1328:	8c 91       	ld	r24, X
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	c8 16       	cp	r12, r24
    132e:	d9 06       	cpc	r13, r25
    1330:	49 f4       	brne	.+18     	; 0x1344 <check_inst_switches+0xcc>
					//alternative drum hits are offset by 9 places in drum_hit array
					turn_on(drum_hit[i-INST_BD_2_SW + 9].led_index);
    1332:	f4 01       	movw	r30, r8
    1334:	80 81       	ld	r24, Z
    1336:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
    133a:	89 e0       	ldi	r24, 0x09	; 9
    133c:	8c 0d       	add	r24, r12
					sequencer.current_inst = i - INST_BD_2_SW + 9;
    133e:	d5 01       	movw	r26, r10
    1340:	8c 93       	st	X, r24
    1342:	19 c0       	rjmp	.+50     	; 0x1376 <check_inst_switches+0xfe>
					
				} else {
					
					turn_on(drum_hit[i-INST_BD_2_SW].led_index);
    1344:	80 81       	ld	r24, Z
    1346:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW;
    134a:	f5 01       	movw	r30, r10
    134c:	c0 82       	st	Z, r12
    134e:	13 c0       	rjmp	.+38     	; 0x1376 <check_inst_switches+0xfe>
				}
				
				
			} else {
				
				if ((sequencer.current_inst == CP) && (i - INST_BD_2_SW == CP)) { //exception to handle CP/MA as they don't use a switch bit
    1350:	d5 01       	movw	r26, r10
    1352:	8c 91       	ld	r24, X
    1354:	86 30       	cpi	r24, 0x06	; 6
    1356:	51 f4       	brne	.+20     	; 0x136c <check_inst_switches+0xf4>
    1358:	c7 31       	cpi	r28, 0x17	; 23
    135a:	d1 05       	cpc	r29, r1
    135c:	39 f4       	brne	.+14     	; 0x136c <check_inst_switches+0xf4>
					
					turn_on(drum_hit[MA].led_index);
    135e:	f2 01       	movw	r30, r4
    1360:	80 81       	ld	r24, Z
    1362:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					sequencer.current_inst = MA;
    1366:	d5 01       	movw	r26, r10
    1368:	3c 92       	st	X, r3
    136a:	ba cf       	rjmp	.-140    	; 0x12e0 <check_inst_switches+0x68>
					
				} else {
					
					turn_on(drum_hit[i - INST_BD_2_SW].led_index);
    136c:	80 81       	ld	r24, Z
    136e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
					sequencer.current_inst = i - INST_BD_2_SW; //inst index starts with BD = 0
    1372:	f5 01       	movw	r30, r10
    1374:	c0 82       	st	Z, r12
	
}
	
void check_inst_switches(void) {
	
	for (int i = INST_BD_2_SW; i <= INST_CH_12_SW; i++) { //scan BD to CH
    1376:	0c 31       	cpi	r16, 0x1C	; 28
    1378:	11 05       	cpc	r17, r1
    137a:	0c f4       	brge	.+2      	; 0x137e <check_inst_switches+0x106>
    137c:	b1 cf       	rjmp	.-158    	; 0x12e0 <check_inst_switches+0x68>
			//return; //could break out here and not bother scanning everything - means only one button press can be detected
		}
		
	}
	
	if (button[INST_AC_1_SW].state) {
    137e:	80 91 32 02 	lds	r24, 0x0232
    1382:	86 ff       	sbrs	r24, 6
    1384:	0c c0       	rjmp	.+24     	; 0x139e <check_inst_switches+0x126>
		button[INST_AC_1_SW].state ^= button[INST_AC_1_SW].state; //toggle state
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f2 e0       	ldi	r31, 0x02	; 2
    138a:	8f 7b       	andi	r24, 0xBF	; 191
    138c:	80 83       	st	Z, r24
		turn_off_all_inst_leds();
    138e:	0e 94 49 04 	call	0x892	; 0x892 <turn_off_all_inst_leds>
		turn_on(ACCENT_1_LED);
    1392:	84 e1       	ldi	r24, 0x14	; 20
    1394:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
		sequencer.current_inst = AC;
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	80 93 4c 04 	sts	0x044C, r24
	}
	
}	
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	3f 90       	pop	r3
    13c0:	08 95       	ret

000013c2 <check_variation_switches>:

void check_variation_switches(void) { //at the moment, just check one switch and cycle through A, B and A/B
	
	if (button[BASIC_VAR_A_SW].state) {
    13c2:	80 91 4e 02 	lds	r24, 0x024E
    13c6:	86 ff       	sbrs	r24, 6
    13c8:	29 c0       	rjmp	.+82     	; 0x141c <check_variation_switches+0x5a>
		
		button[BASIC_VAR_A_SW].state ^= button[BASIC_VAR_A_SW].state; //toggle 
    13ca:	ee e4       	ldi	r30, 0x4E	; 78
    13cc:	f2 e0       	ldi	r31, 0x02	; 2
    13ce:	8f 7b       	andi	r24, 0xBF	; 191
    13d0:	80 83       	st	Z, r24
		if (++sequencer.variation_mode == 3) sequencer.variation_mode = 0; //cycle through the 3 modes
    13d2:	e7 e4       	ldi	r30, 0x47	; 71
    13d4:	f4 e0       	ldi	r31, 0x04	; 4
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	80 83       	st	Z, r24
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	39 f4       	brne	.+14     	; 0x13ee <check_variation_switches+0x2c>
    13e0:	10 92 47 04 	sts	0x0447, r1
		if (sequencer.START) {
    13e4:	80 91 77 03 	lds	r24, 0x0377
    13e8:	81 ff       	sbrs	r24, 1
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <check_variation_switches+0x44>
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <check_variation_switches+0x34>
    13ee:	90 91 77 03 	lds	r25, 0x0377
    13f2:	91 ff       	sbrs	r25, 1
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <check_variation_switches+0x40>
			
			 flag.variation_change = 1; //set change flag to be handled when new measure starts
    13f6:	80 91 75 03 	lds	r24, 0x0375
    13fa:	84 60       	ori	r24, 0x04	; 4
    13fc:	80 93 75 03 	sts	0x0375, r24
    1400:	08 95       	ret
		} else { //otherwise change immediately
			
			if (sequencer.variation_mode == VAR_A || sequencer.variation_mode == VAR_AB) {
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	31 f4       	brne	.+12     	; 0x1412 <check_variation_switches+0x50>
				
				sequencer.variation = VAR_A;
    1406:	e6 e4       	ldi	r30, 0x46	; 70
    1408:	f4 e0       	ldi	r31, 0x04	; 4
    140a:	80 81       	ld	r24, Z
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	80 83       	st	Z, r24
    1410:	08 95       	ret
				
			} else {
				
				sequencer.variation = VAR_B;
    1412:	e6 e4       	ldi	r30, 0x46	; 70
    1414:	f4 e0       	ldi	r31, 0x04	; 4
    1416:	80 81       	ld	r24, Z
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	80 83       	st	Z, r24
    141c:	08 95       	ret

0000141e <check_clear_switch>:
	}
	
	
}	

void check_clear_switch(void) {
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
	
	if (sequencer.CLEAR && sequencer.START == 0) {
    142a:	80 91 77 03 	lds	r24, 0x0377
    142e:	86 70       	andi	r24, 0x06	; 6
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	e1 f5       	brne	.+120    	; 0x14ac <check_clear_switch+0x8e>
		
		switch (sequencer.mode) {
    1434:	80 91 76 03 	lds	r24, 0x0376
    1438:	81 11       	cpse	r24, r1
    143a:	3f c0       	rjmp	.+126    	; 0x14ba <check_clear_switch+0x9c>
			
			case PATTERN_CLEAR:
			
				toggle(MODE_1_PATTERN_CLEAR);			
    143c:	8c e1       	ldi	r24, 0x1C	; 28
    143e:	0e 94 36 04 	call	0x86c	; 0x86c <toggle>
				memset(sequencer.pattern[sequencer.variation].part, 0, sizeof(sequencer.pattern[sequencer.variation].part));	
    1442:	e6 e4       	ldi	r30, 0x46	; 70
    1444:	f4 e0       	ldi	r31, 0x04	; 4
    1446:	80 81       	ld	r24, Z
    1448:	80 fb       	bst	r24, 0
    144a:	ee 24       	eor	r14, r14
    144c:	e0 f8       	bld	r14, 0
    144e:	f1 2c       	mov	r15, r1
    1450:	87 e6       	ldi	r24, 0x67	; 103
    1452:	8e 9d       	mul	r24, r14
    1454:	d0 01       	movw	r26, r0
    1456:	8f 9d       	mul	r24, r15
    1458:	b0 0d       	add	r27, r0
    145a:	11 24       	eor	r1, r1
    145c:	a8 58       	subi	r26, 0x88	; 136
    145e:	bc 4f       	sbci	r27, 0xFC	; 252
    1460:	90 e4       	ldi	r25, 0x40	; 64
    1462:	ed 01       	movw	r28, r26
    1464:	19 92       	st	Y+, r1
    1466:	9a 95       	dec	r25
    1468:	e9 f7       	brne	.-6      	; 0x1464 <check_clear_switch+0x46>
				memset(sequencer.pattern[sequencer.variation].step_led_mask, 0, sizeof(sequencer.pattern[sequencer.variation].step_led_mask));			
    146a:	90 81       	ld	r25, Z
    146c:	09 2f       	mov	r16, r25
    146e:	01 70       	andi	r16, 0x01	; 1
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	80 9f       	mul	r24, r16
    1474:	d0 01       	movw	r26, r0
    1476:	81 9f       	mul	r24, r17
    1478:	b0 0d       	add	r27, r0
    147a:	11 24       	eor	r1, r1
    147c:	a4 54       	subi	r26, 0x44	; 68
    147e:	bc 4f       	sbci	r27, 0xFC	; 252
    1480:	92 e2       	ldi	r25, 0x22	; 34
    1482:	ed 01       	movw	r28, r26
    1484:	19 92       	st	Y+, r1
    1486:	9a 95       	dec	r25
    1488:	e9 f7       	brne	.-6      	; 0x1484 <check_clear_switch+0x66>
				sequencer.pattern[sequencer.variation].accent = 0;				
    148a:	90 81       	ld	r25, Z
    148c:	91 70       	andi	r25, 0x01	; 1
    148e:	c9 2f       	mov	r28, r25
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	d9 2f       	mov	r29, r25
    1494:	8c 9f       	mul	r24, r28
    1496:	f0 01       	movw	r30, r0
    1498:	8d 9f       	mul	r24, r29
    149a:	f0 0d       	add	r31, r0
    149c:	11 24       	eor	r1, r1
    149e:	e8 54       	subi	r30, 0x48	; 72
    14a0:	fc 4f       	sbci	r31, 0xFC	; 252
    14a2:	10 82       	st	Z, r1
    14a4:	11 82       	std	Z+1, r1	; 0x01
    14a6:	12 82       	std	Z+2, r1	; 0x02
    14a8:	13 82       	std	Z+3, r1	; 0x03
				break;
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <check_clear_switch+0x9c>
			
		}
		
	} else {
		
		if (sequencer.mode == PATTERN_CLEAR) { //need to ensure LED is on after toggling while CLEAR button is held
    14ac:	80 91 76 03 	lds	r24, 0x0376
    14b0:	81 11       	cpse	r24, r1
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <check_clear_switch+0x9c>
			
			turn_on(MODE_1_PATTERN_CLEAR);
    14b4:	8c e1       	ldi	r24, 0x1C	; 28
    14b6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <turn_on>
		}
		
	}
	
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    14c8:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    14ca:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    14cc:	74 83       	std	Z+4, r23	; 0x04
    14ce:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    14d0:	11 82       	std	Z+1, r1	; 0x01
    14d2:	10 82       	st	Z, r1
    14d4:	08 95       	ret

000014d6 <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ec 01       	movw	r28, r24
    14e2:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    14e4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <store_and_clear_interrupt>
    14e8:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    14ea:	f9 80       	ldd	r15, Y+1	; 0x01
    14ec:	4f 2d       	mov	r20, r15
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	ca 01       	movw	r24, r20
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	2a 81       	ldd	r18, Y+2	; 0x02
    14f6:	62 2f       	mov	r22, r18
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divmodhi4>
    14fe:	28 81       	ld	r18, Y
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	82 17       	cp	r24, r18
    1504:	93 07       	cpc	r25, r19
    1506:	29 f4       	brne	.+10     	; 0x1512 <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
    1508:	81 2f       	mov	r24, r17
    150a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <restore_interrupt_setting>
      return false;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	12 c0       	rjmp	.+36     	; 0x1536 <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
    1512:	eb 81       	ldd	r30, Y+3	; 0x03
    1514:	fc 81       	ldd	r31, Y+4	; 0x04
    1516:	ef 0d       	add	r30, r15
    1518:	f1 1d       	adc	r31, r1
    151a:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	c9 01       	movw	r24, r18
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	6a 81       	ldd	r22, Y+2	; 0x02
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divmodhi4>
    152c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    152e:	81 2f       	mov	r24, r17
    1530:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <restore_interrupt_setting>
      return true;
    1534:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	08 95       	ret

00001542 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1548:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    154c:	39 81       	ldd	r19, Y+1	; 0x01
    154e:	28 81       	ld	r18, Y
    1550:	32 17       	cp	r19, r18
    1552:	18 f0       	brcs	.+6      	; 0x155a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1554:	c3 2f       	mov	r28, r19
    1556:	c2 1b       	sub	r28, r18
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <bytequeue_length+0x20>
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	c3 2f       	mov	r28, r19
    155e:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
    1560:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
    1562:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <restore_interrupt_setting>
   return len;
}
    1566:	8c 2f       	mov	r24, r28
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    156e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1570:	80 81       	ld	r24, Z
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	9b 01       	movw	r18, r22
    1576:	28 0f       	add	r18, r24
    1578:	31 1d       	adc	r19, r1
    157a:	c9 01       	movw	r24, r18
    157c:	62 81       	ldd	r22, Z+2	; 0x02
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divmodhi4>
    1584:	03 80       	ldd	r0, Z+3	; 0x03
    1586:	f4 81       	ldd	r31, Z+4	; 0x04
    1588:	e0 2d       	mov	r30, r0
    158a:	e8 0f       	add	r30, r24
    158c:	f9 1f       	adc	r31, r25
}
    158e:	80 81       	ld	r24, Z
    1590:	08 95       	ret

00001592 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
    159a:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    159c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <store_and_clear_interrupt>
    15a0:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    15a2:	88 81       	ld	r24, Y
    15a4:	21 2f       	mov	r18, r17
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	b9 01       	movw	r22, r18
    15aa:	68 0f       	add	r22, r24
    15ac:	71 1d       	adc	r23, r1
    15ae:	cb 01       	movw	r24, r22
    15b0:	6a 81       	ldd	r22, Y+2	; 0x02
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divmodhi4>
    15b8:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    15ba:	84 2f       	mov	r24, r20
    15bc:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <restore_interrupt_setting>
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	08 95       	ret

000015c8 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    15c8:	8f b7       	in	r24, 0x3f	; 63
   cli();
    15ca:	f8 94       	cli
   return sreg;
}
    15cc:	08 95       	ret

000015ce <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    15ce:	8f bf       	out	0x3f, r24	; 63
    15d0:	08 95       	ret

000015d2 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    15d2:	88 1f       	adc	r24, r24
    15d4:	88 27       	eor	r24, r24
    15d6:	88 1f       	adc	r24, r24
    15d8:	08 95       	ret

000015da <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	88 3f       	cpi	r24, 0xF8	; 248
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <midi_is_realtime+0x8>
    15e0:	90 e0       	ldi	r25, 0x00	; 0
}
    15e2:	89 2f       	mov	r24, r25
    15e4:	08 95       	ret

000015e6 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    15e6:	98 2f       	mov	r25, r24
    15e8:	90 7f       	andi	r25, 0xF0	; 240
    15ea:	90 3c       	cpi	r25, 0xC0	; 192
    15ec:	b1 f0       	breq	.+44     	; 0x161a <midi_packet_length+0x34>
    15ee:	58 f4       	brcc	.+22     	; 0x1606 <midi_packet_length+0x20>
    15f0:	90 39       	cpi	r25, 0x90	; 144
    15f2:	41 f1       	breq	.+80     	; 0x1644 <midi_packet_length+0x5e>
    15f4:	18 f4       	brcc	.+6      	; 0x15fc <midi_packet_length+0x16>
    15f6:	90 38       	cpi	r25, 0x80	; 128
    15f8:	19 f5       	brne	.+70     	; 0x1640 <midi_packet_length+0x5a>
    15fa:	24 c0       	rjmp	.+72     	; 0x1644 <midi_packet_length+0x5e>
    15fc:	90 3a       	cpi	r25, 0xA0	; 160
    15fe:	11 f1       	breq	.+68     	; 0x1644 <midi_packet_length+0x5e>
    1600:	90 3b       	cpi	r25, 0xB0	; 176
    1602:	f1 f4       	brne	.+60     	; 0x1640 <midi_packet_length+0x5a>
    1604:	1f c0       	rjmp	.+62     	; 0x1644 <midi_packet_length+0x5e>
    1606:	90 3e       	cpi	r25, 0xE0	; 224
    1608:	e9 f0       	breq	.+58     	; 0x1644 <midi_packet_length+0x5e>
    160a:	18 f4       	brcc	.+6      	; 0x1612 <midi_packet_length+0x2c>
    160c:	90 3d       	cpi	r25, 0xD0	; 208
    160e:	29 f0       	breq	.+10     	; 0x161a <midi_packet_length+0x34>
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <midi_packet_length+0x5a>
    1612:	90 3f       	cpi	r25, 0xF0	; 240
    1614:	21 f0       	breq	.+8      	; 0x161e <midi_packet_length+0x38>
    1616:	93 3f       	cpi	r25, 0xF3	; 243
    1618:	99 f4       	brne	.+38     	; 0x1640 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	08 95       	ret
      case 0xF0:
         switch(status) {
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	e1 5f       	subi	r30, 0xF1	; 241
    1624:	f1 09       	sbc	r31, r1
    1626:	ef 30       	cpi	r30, 0x0F	; 15
    1628:	f1 05       	cpc	r31, r1
    162a:	40 f4       	brcc	.+16     	; 0x163c <midi_packet_length+0x56>
    162c:	e6 5a       	subi	r30, 0xA6	; 166
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    164a:	08 95       	ret

0000164c <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    164c:	fc 01       	movw	r30, r24
    164e:	75 83       	std	Z+5, r23	; 0x05
    1650:	64 83       	std	Z+4, r22	; 0x04
    1652:	08 95       	ret

00001654 <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1654:	fc 01       	movw	r30, r24
    1656:	77 83       	std	Z+7, r23	; 0x07
    1658:	66 83       	std	Z+6, r22	; 0x06
    165a:	08 95       	ret

0000165c <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    165c:	fc 01       	movw	r30, r24
    165e:	77 8b       	std	Z+23, r23	; 0x17
    1660:	66 8b       	std	Z+22, r22	; 0x16
    1662:	08 95       	ret

00001664 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    166a:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
    166c:	1f a2       	std	Y+39, r1	; 0x27
    166e:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1670:	bc 01       	movw	r22, r24
    1672:	68 5d       	subi	r22, 0xD8	; 216
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	40 ec       	ldi	r20, 0xC0	; 192
    1678:	88 51       	subi	r24, 0x18	; 24
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1680:	1b 82       	std	Y+3, r1	; 0x03
    1682:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1684:	1d 82       	std	Y+5, r1	; 0x05
    1686:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1688:	1f 82       	std	Y+7, r1	; 0x07
    168a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    168c:	19 86       	std	Y+9, r1	; 0x09
    168e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1690:	1b 86       	std	Y+11, r1	; 0x0b
    1692:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1694:	1d 86       	std	Y+13, r1	; 0x0d
    1696:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1698:	1f 86       	std	Y+15, r1	; 0x0f
    169a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    169c:	19 8a       	std	Y+17, r1	; 0x11
    169e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    16a0:	1b 8a       	std	Y+19, r1	; 0x13
    16a2:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    16a4:	1d 8a       	std	Y+21, r1	; 0x15
    16a6:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    16a8:	1f 8a       	std	Y+23, r1	; 0x17
    16aa:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    16ac:	19 8e       	std	Y+25, r1	; 0x19
    16ae:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    16b0:	1b 8e       	std	Y+27, r1	; 0x1b
    16b2:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    16b4:	1d 8e       	std	Y+29, r1	; 0x1d
    16b6:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    16b8:	1f 8e       	std	Y+31, r1	; 0x1f
    16ba:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    16bc:	19 a2       	std	Y+33, r1	; 0x21
    16be:	18 a2       	std	Y+32, r1	; 0x20
}
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
    16d2:	66 23       	and	r22, r22
    16d4:	99 f0       	breq	.+38     	; 0x16fc <midi_device_input+0x36>
    16d6:	ea 01       	movw	r28, r20
    16d8:	61 50       	subi	r22, 0x01	; 1
    16da:	06 2f       	mov	r16, r22
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	0f 5f       	subi	r16, 0xFF	; 255
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	04 0f       	add	r16, r20
    16e4:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
    16e6:	7c 01       	movw	r14, r24
    16e8:	28 ee       	ldi	r18, 0xE8	; 232
    16ea:	e2 0e       	add	r14, r18
    16ec:	f1 1c       	adc	r15, r1
    16ee:	69 91       	ld	r22, Y+
    16f0:	c7 01       	movw	r24, r14
    16f2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    16f6:	c0 17       	cp	r28, r16
    16f8:	d1 07       	cpc	r29, r17
    16fa:	c9 f7       	brne	.-14     	; 0x16ee <midi_device_input+0x28>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	08 95       	ret

0000170a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <midi_input_callbacks+0x16>
    1720:	1f 92       	push	r1
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	7c 01       	movw	r14, r24
    1728:	6b 01       	movw	r12, r22
    172a:	14 2f       	mov	r17, r20
    172c:	b2 2e       	mov	r11, r18
    172e:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1730:	dc 01       	movw	r26, r24
    1732:	95 96       	adiw	r26, 0x25	; 37
    1734:	8c 91       	ld	r24, X
    1736:	95 97       	sbiw	r26, 0x25	; 37
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	11 f5       	brne	.+68     	; 0x1780 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
    173c:	5a 96       	adiw	r26, 0x1a	; 26
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	5b 97       	sbiw	r26, 0x1b	; 27
    1744:	30 97       	sbiw	r30, 0x00	; 0
    1746:	09 f4       	brne	.+2      	; 0x174a <midi_input_callbacks+0x40>
    1748:	cc c0       	rjmp	.+408    	; 0x18e2 <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    174a:	9b 01       	movw	r18, r22
    174c:	21 50       	subi	r18, 0x01	; 1
    174e:	31 09       	sbc	r19, r1
    1750:	ab ea       	ldi	r26, 0xAB	; 171
    1752:	ba ea       	ldi	r27, 0xAA	; 170
    1754:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__umulhisi3>
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	9c 01       	movw	r18, r24
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1766:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1768:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
    176a:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    176c:	4c 2d       	mov	r20, r12
    176e:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1770:	9e 01       	movw	r18, r28
    1772:	2f 5f       	subi	r18, 0xFF	; 255
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	68 2f       	mov	r22, r24
    1778:	79 2f       	mov	r23, r25
    177a:	c7 01       	movw	r24, r14
    177c:	09 95       	icall
    177e:	be c0       	rjmp	.+380    	; 0x18fc <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
    1780:	62 30       	cpi	r22, 0x02	; 2
    1782:	71 05       	cpc	r23, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <midi_input_callbacks+0x7e>
    1786:	55 c0       	rjmp	.+170    	; 0x1832 <midi_input_callbacks+0x128>
    1788:	63 30       	cpi	r22, 0x03	; 3
    178a:	71 05       	cpc	r23, r1
    178c:	29 f0       	breq	.+10     	; 0x1798 <midi_input_callbacks+0x8e>
    178e:	61 30       	cpi	r22, 0x01	; 1
    1790:	71 05       	cpc	r23, r1
    1792:	09 f0       	breq	.+2      	; 0x1796 <midi_input_callbacks+0x8c>
    1794:	a1 c0       	rjmp	.+322    	; 0x18d8 <midi_input_callbacks+0x1ce>
    1796:	88 c0       	rjmp	.+272    	; 0x18a8 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1798:	84 2f       	mov	r24, r20
    179a:	80 7f       	andi	r24, 0xF0	; 240
    179c:	80 3a       	cpi	r24, 0xA0	; 160
    179e:	f1 f0       	breq	.+60     	; 0x17dc <midi_input_callbacks+0xd2>
    17a0:	28 f4       	brcc	.+10     	; 0x17ac <midi_input_callbacks+0xa2>
    17a2:	80 38       	cpi	r24, 0x80	; 128
    17a4:	a9 f0       	breq	.+42     	; 0x17d0 <midi_input_callbacks+0xc6>
    17a6:	80 39       	cpi	r24, 0x90	; 144
    17a8:	69 f0       	breq	.+26     	; 0x17c4 <midi_input_callbacks+0xba>
    17aa:	2f c0       	rjmp	.+94     	; 0x180a <midi_input_callbacks+0x100>
    17ac:	80 3e       	cpi	r24, 0xE0	; 224
    17ae:	e1 f0       	breq	.+56     	; 0x17e8 <midi_input_callbacks+0xde>
    17b0:	80 3f       	cpi	r24, 0xF0	; 240
    17b2:	01 f1       	breq	.+64     	; 0x17f4 <midi_input_callbacks+0xea>
    17b4:	80 3b       	cpi	r24, 0xB0	; 176
    17b6:	49 f5       	brne	.+82     	; 0x180a <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
    17b8:	d7 01       	movw	r26, r14
    17ba:	12 96       	adiw	r26, 0x02	; 2
    17bc:	ed 91       	ld	r30, X+
    17be:	fc 91       	ld	r31, X
    17c0:	13 97       	sbiw	r26, 0x03	; 3
              break;
    17c2:	25 c0       	rjmp	.+74     	; 0x180e <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    17c4:	d7 01       	movw	r26, r14
    17c6:	14 96       	adiw	r26, 0x04	; 4
    17c8:	ed 91       	ld	r30, X+
    17ca:	fc 91       	ld	r31, X
    17cc:	15 97       	sbiw	r26, 0x05	; 5
              break;
    17ce:	1f c0       	rjmp	.+62     	; 0x180e <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    17d0:	d7 01       	movw	r26, r14
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	17 97       	sbiw	r26, 0x07	; 7
              break;
    17da:	19 c0       	rjmp	.+50     	; 0x180e <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    17dc:	d7 01       	movw	r26, r14
    17de:	18 96       	adiw	r26, 0x08	; 8
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	19 97       	sbiw	r26, 0x09	; 9
              break;
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    17e8:	d7 01       	movw	r26, r14
    17ea:	1a 96       	adiw	r26, 0x0a	; 10
    17ec:	ed 91       	ld	r30, X+
    17ee:	fc 91       	ld	r31, X
    17f0:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    17f2:	0d c0       	rjmp	.+26     	; 0x180e <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    17f4:	42 3f       	cpi	r20, 0xF2	; 242
    17f6:	09 f0       	breq	.+2      	; 0x17fa <midi_input_callbacks+0xf0>
    17f8:	74 c0       	rjmp	.+232    	; 0x18e2 <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
    17fa:	d7 01       	movw	r26, r14
    17fc:	1c 96       	adiw	r26, 0x0c	; 12
    17fe:	ed 91       	ld	r30, X+
    1800:	fc 91       	ld	r31, X
    1802:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
    1804:	30 97       	sbiw	r30, 0x00	; 0
    1806:	41 f4       	brne	.+16     	; 0x1818 <midi_input_callbacks+0x10e>
    1808:	6c c0       	rjmp	.+216    	; 0x18e2 <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    180a:	e0 e0       	ldi	r30, 0x00	; 0
    180c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	09 f4       	brne	.+2      	; 0x1814 <midi_input_callbacks+0x10a>
    1812:	67 c0       	rjmp	.+206    	; 0x18e2 <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1814:	12 3f       	cpi	r17, 0xF2	; 242
    1816:	31 f4       	brne	.+12     	; 0x1824 <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
    1818:	2a 2d       	mov	r18, r10
    181a:	4b 2d       	mov	r20, r11
    181c:	62 ef       	ldi	r22, 0xF2	; 242
    181e:	c7 01       	movw	r24, r14
    1820:	09 95       	icall
    1822:	6c c0       	rjmp	.+216    	; 0x18fc <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1824:	2a 2d       	mov	r18, r10
    1826:	4b 2d       	mov	r20, r11
    1828:	61 2f       	mov	r22, r17
    182a:	6f 70       	andi	r22, 0x0F	; 15
    182c:	c7 01       	movw	r24, r14
    182e:	09 95       	icall
    1830:	65 c0       	rjmp	.+202    	; 0x18fc <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1832:	84 2f       	mov	r24, r20
    1834:	80 7f       	andi	r24, 0xF0	; 240
    1836:	80 3d       	cpi	r24, 0xD0	; 208
    1838:	51 f0       	breq	.+20     	; 0x184e <midi_input_callbacks+0x144>
    183a:	80 3f       	cpi	r24, 0xF0	; 240
    183c:	71 f0       	breq	.+28     	; 0x185a <midi_input_callbacks+0x150>
    183e:	80 3c       	cpi	r24, 0xC0	; 192
    1840:	01 f5       	brne	.+64     	; 0x1882 <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1842:	d7 01       	movw	r26, r14
    1844:	1e 96       	adiw	r26, 0x0e	; 14
    1846:	ed 91       	ld	r30, X+
    1848:	fc 91       	ld	r31, X
    184a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    184c:	1c c0       	rjmp	.+56     	; 0x1886 <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    184e:	d7 01       	movw	r26, r14
    1850:	50 96       	adiw	r26, 0x10	; 16
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1858:	16 c0       	rjmp	.+44     	; 0x1886 <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    185a:	43 3f       	cpi	r20, 0xF3	; 243
    185c:	41 f4       	brne	.+16     	; 0x186e <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
    185e:	d7 01       	movw	r26, r14
    1860:	52 96       	adiw	r26, 0x12	; 18
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1868:	30 97       	sbiw	r30, 0x00	; 0
    186a:	99 f4       	brne	.+38     	; 0x1892 <midi_input_callbacks+0x188>
    186c:	3a c0       	rjmp	.+116    	; 0x18e2 <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    186e:	41 3f       	cpi	r20, 0xF1	; 241
    1870:	c1 f5       	brne	.+112    	; 0x18e2 <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
    1872:	d7 01       	movw	r26, r14
    1874:	54 96       	adiw	r26, 0x14	; 20
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	49 f4       	brne	.+18     	; 0x1892 <midi_input_callbacks+0x188>
    1880:	30 c0       	rjmp	.+96     	; 0x18e2 <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1886:	30 97       	sbiw	r30, 0x00	; 0
    1888:	61 f1       	breq	.+88     	; 0x18e2 <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    188a:	81 2f       	mov	r24, r17
    188c:	8d 7f       	andi	r24, 0xFD	; 253
    188e:	81 3f       	cpi	r24, 0xF1	; 241
    1890:	29 f4       	brne	.+10     	; 0x189c <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
    1892:	4b 2d       	mov	r20, r11
    1894:	61 2f       	mov	r22, r17
    1896:	c7 01       	movw	r24, r14
    1898:	09 95       	icall
    189a:	30 c0       	rjmp	.+96     	; 0x18fc <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
    189c:	4b 2d       	mov	r20, r11
    189e:	61 2f       	mov	r22, r17
    18a0:	6f 70       	andi	r22, 0x0F	; 15
    18a2:	c7 01       	movw	r24, r14
    18a4:	09 95       	icall
    18a6:	2a c0       	rjmp	.+84     	; 0x18fc <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    18a8:	84 2f       	mov	r24, r20
    18aa:	0e 94 ed 0a 	call	0x15da	; 0x15da <midi_is_realtime>
    18ae:	88 23       	and	r24, r24
    18b0:	31 f0       	breq	.+12     	; 0x18be <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
    18b2:	d7 01       	movw	r26, r14
    18b4:	56 96       	adiw	r26, 0x16	; 22
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	57 97       	sbiw	r26, 0x17	; 23
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
    18be:	16 3f       	cpi	r17, 0xF6	; 246
    18c0:	81 f4       	brne	.+32     	; 0x18e2 <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
    18c2:	d7 01       	movw	r26, r14
    18c4:	58 96       	adiw	r26, 0x18	; 24
    18c6:	ed 91       	ld	r30, X+
    18c8:	fc 91       	ld	r31, X
    18ca:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    18cc:	30 97       	sbiw	r30, 0x00	; 0
    18ce:	49 f0       	breq	.+18     	; 0x18e2 <midi_input_callbacks+0x1d8>
            func(device, byte0);
    18d0:	61 2f       	mov	r22, r17
    18d2:	c7 01       	movw	r24, r14
    18d4:	09 95       	icall
    18d6:	12 c0       	rjmp	.+36     	; 0x18fc <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    18d8:	64 30       	cpi	r22, 0x04	; 4
    18da:	71 05       	cpc	r23, r1
    18dc:	10 f0       	brcs	.+4      	; 0x18e2 <midi_input_callbacks+0x1d8>
          cnt = 0;
    18de:	c1 2c       	mov	r12, r1
    18e0:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    18e2:	d7 01       	movw	r26, r14
    18e4:	5c 96       	adiw	r26, 0x1c	; 28
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	5d 97       	sbiw	r26, 0x1d	; 29
    18ec:	30 97       	sbiw	r30, 0x00	; 0
    18ee:	31 f0       	breq	.+12     	; 0x18fc <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    18f0:	0a 2d       	mov	r16, r10
    18f2:	2b 2d       	mov	r18, r11
    18f4:	41 2f       	mov	r20, r17
    18f6:	b6 01       	movw	r22, r12
    18f8:	c7 01       	movw	r24, r14
    18fa:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    18fc:	d7 01       	movw	r26, r14
    18fe:	5e 96       	adiw	r26, 0x1e	; 30
    1900:	ed 91       	ld	r30, X+
    1902:	fc 91       	ld	r31, X
    1904:	5f 97       	sbiw	r26, 0x1f	; 31
    1906:	30 97       	sbiw	r30, 0x00	; 0
    1908:	31 f0       	breq	.+12     	; 0x1916 <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    190a:	0a 2d       	mov	r16, r10
    190c:	2b 2d       	mov	r18, r11
    190e:	41 2f       	mov	r20, r17
    1910:	b6 01       	movw	r22, r12
    1912:	c7 01       	movw	r24, r14
    1914:	09 95       	icall
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	08 95       	ret

00001932 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	ec 01       	movw	r28, r24
    193e:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
    1940:	86 2f       	mov	r24, r22
    1942:	0e 94 ed 0a 	call	0x15da	; 0x15da <midi_is_realtime>
    1946:	88 23       	and	r24, r24
    1948:	69 f0       	breq	.+26     	; 0x1964 <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    194a:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	41 2f       	mov	r20, r17
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	ce 01       	movw	r24, r28
    195c:	0e 94 85 0b 	call	0x170a	; 0x170a <midi_input_callbacks>
    device->input_state = state;
    1960:	fd a2       	std	Y+37, r15	; 0x25
    1962:	a4 c0       	rjmp	.+328    	; 0x1aac <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
    1964:	81 2f       	mov	r24, r17
    1966:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <midi_is_statusbyte>
    196a:	88 23       	and	r24, r24
    196c:	09 f4       	brne	.+2      	; 0x1970 <midi_process_byte+0x3e>
    196e:	5d c0       	rjmp	.+186    	; 0x1a2a <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1970:	8d a1       	ldd	r24, Y+37	; 0x25
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	29 f0       	breq	.+10     	; 0x1980 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
    1976:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9f a3       	std	Y+39, r25	; 0x27
    197e:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
    1980:	81 2f       	mov	r24, r17
    1982:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <midi_packet_length>
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	31 f0       	breq	.+12     	; 0x1996 <midi_process_byte+0x64>
    198a:	b8 f0       	brcs	.+46     	; 0x19ba <midi_process_byte+0x88>
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	79 f0       	breq	.+30     	; 0x19ae <midi_process_byte+0x7c>
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	81 f0       	breq	.+32     	; 0x19b4 <midi_process_byte+0x82>
    1994:	46 c0       	rjmp	.+140    	; 0x1a22 <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
    199a:	00 e0       	ldi	r16, 0x00	; 0
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	41 2f       	mov	r20, r17
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	ce 01       	movw	r24, r28
    19a6:	0e 94 85 0b 	call	0x170a	; 0x170a <midi_input_callbacks>
        device->input_state = IDLE;
    19aa:	1d a2       	std	Y+37, r1	; 0x25
        break;
    19ac:	7f c0       	rjmp	.+254    	; 0x1aac <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	8d a3       	std	Y+37, r24	; 0x25
        break;
    19b2:	7c c0       	rjmp	.+248    	; 0x1aac <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	8d a3       	std	Y+37, r24	; 0x25
        break;
    19b8:	79 c0       	rjmp	.+242    	; 0x1aac <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
    19ba:	10 3f       	cpi	r17, 0xF0	; 240
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <midi_process_byte+0x92>
    19be:	17 3f       	cpi	r17, 0xF7	; 247
    19c0:	51 f0       	breq	.+20     	; 0x19d6 <midi_process_byte+0xa4>
    19c2:	2b c0       	rjmp	.+86     	; 0x1a1a <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
    19c8:	80 ef       	ldi	r24, 0xF0	; 240
    19ca:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9f a3       	std	Y+39, r25	; 0x27
    19d2:	8e a3       	std	Y+38, r24	; 0x26
            break;
    19d4:	6b c0       	rjmp	.+214    	; 0x1aac <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    19d6:	4e a1       	ldd	r20, Y+38	; 0x26
    19d8:	5f a1       	ldd	r21, Y+39	; 0x27
    19da:	9a 01       	movw	r18, r20
    19dc:	ab ea       	ldi	r26, 0xAB	; 171
    19de:	ba ea       	ldi	r27, 0xAA	; 170
    19e0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__umulhisi3>
    19e4:	96 95       	lsr	r25
    19e6:	87 95       	ror	r24
    19e8:	9c 01       	movw	r18, r24
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	fa 01       	movw	r30, r20
    19f4:	e8 1b       	sub	r30, r24
    19f6:	f9 0b       	sbc	r31, r25
    19f8:	ec 0f       	add	r30, r28
    19fa:	fd 1f       	adc	r31, r29
    19fc:	87 ef       	ldi	r24, 0xF7	; 247
    19fe:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
    1a00:	ba 01       	movw	r22, r20
    1a02:	6f 5f       	subi	r22, 0xFF	; 255
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	7f a3       	std	Y+39, r23	; 0x27
    1a08:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1a0a:	0c a1       	ldd	r16, Y+36	; 0x24
    1a0c:	2b a1       	ldd	r18, Y+35	; 0x23
    1a0e:	4a a1       	ldd	r20, Y+34	; 0x22
    1a10:	ce 01       	movw	r24, r28
    1a12:	0e 94 85 0b 	call	0x170a	; 0x170a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1a16:	1d a2       	std	Y+37, r1	; 0x25
            break;
    1a18:	49 c0       	rjmp	.+146    	; 0x1aac <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
    1a1a:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
    1a1c:	1f a2       	std	Y+39, r1	; 0x27
    1a1e:	1e a2       	std	Y+38, r1	; 0x26
    1a20:	45 c0       	rjmp	.+138    	; 0x1aac <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
    1a22:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
    1a24:	1f a2       	std	Y+39, r1	; 0x27
    1a26:	1e a2       	std	Y+38, r1	; 0x26
        break;
    1a28:	41 c0       	rjmp	.+130    	; 0x1aac <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
    1a2a:	ed a1       	ldd	r30, Y+37	; 0x25
    1a2c:	ee 23       	and	r30, r30
    1a2e:	f1 f1       	breq	.+124    	; 0x1aac <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1a30:	4e a1       	ldd	r20, Y+38	; 0x26
    1a32:	5f a1       	ldd	r21, Y+39	; 0x27
    1a34:	9a 01       	movw	r18, r20
    1a36:	ab ea       	ldi	r26, 0xAB	; 171
    1a38:	ba ea       	ldi	r27, 0xAA	; 170
    1a3a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__umulhisi3>
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	9c 01       	movw	r18, r24
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	9a 01       	movw	r18, r20
    1a4e:	28 1b       	sub	r18, r24
    1a50:	39 0b       	sbc	r19, r25
    1a52:	de 01       	movw	r26, r28
    1a54:	a2 0f       	add	r26, r18
    1a56:	b3 1f       	adc	r27, r19
    1a58:	92 96       	adiw	r26, 0x22	; 34
    1a5a:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1a5c:	ba 01       	movw	r22, r20
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	7f a3       	std	Y+39, r23	; 0x27
    1a64:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
    1a66:	21 30       	cpi	r18, 0x01	; 1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	89 f0       	breq	.+34     	; 0x1a8e <midi_process_byte+0x15c>
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	e9 f4       	brne	.+58     	; 0x1aac <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1a72:	0c a1       	ldd	r16, Y+36	; 0x24
    1a74:	2b a1       	ldd	r18, Y+35	; 0x23
    1a76:	4a a1       	ldd	r20, Y+34	; 0x22
    1a78:	ce 01       	movw	r24, r28
    1a7a:	0e 94 85 0b 	call	0x170a	; 0x170a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	a1 f0       	breq	.+40     	; 0x1aac <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9f a3       	std	Y+39, r25	; 0x27
    1a8a:	8e a3       	std	Y+38, r24	; 0x26
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1a8e:	e2 30       	cpi	r30, 0x02	; 2
    1a90:	69 f4       	brne	.+26     	; 0x1aac <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1a92:	00 e0       	ldi	r16, 0x00	; 0
    1a94:	2b a1       	ldd	r18, Y+35	; 0x23
    1a96:	4a a1       	ldd	r20, Y+34	; 0x22
    1a98:	ce 01       	movw	r24, r28
    1a9a:	0e 94 85 0b 	call	0x170a	; 0x170a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa0:	84 30       	cpi	r24, 0x04	; 4
    1aa2:	21 f0       	breq	.+8      	; 0x1aac <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9f a3       	std	Y+39, r25	; 0x27
    1aaa:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	08 95       	ret

00001ab8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1aca:	dc 01       	movw	r26, r24
    1acc:	90 96       	adiw	r26, 0x20	; 32
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	91 97       	sbiw	r26, 0x21	; 33
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1ad8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1ada:	86 01       	movw	r16, r12
    1adc:	08 51       	subi	r16, 0x18	; 24
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1ae6:	e8 2e       	mov	r14, r24
    1ae8:	f1 2c       	mov	r15, r1
    1aea:	e1 14       	cp	r14, r1
    1aec:	f1 04       	cpc	r15, r1
    1aee:	91 f0       	breq	.+36     	; 0x1b14 <midi_device_process+0x5c>
    1af0:	c0 e0       	ldi	r28, 0x00	; 0
    1af2:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	c8 01       	movw	r24, r16
    1af8:	0e 94 b7 0a 	call	0x156e	; 0x156e <bytequeue_get>
    1afc:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1afe:	c6 01       	movw	r24, r12
    1b00:	0e 94 99 0c 	call	0x1932	; 0x1932 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	c8 01       	movw	r24, r16
    1b08:	0e 94 c9 0a 	call	0x1592	; 0x1592 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1b0c:	21 96       	adiw	r28, 0x01	; 1
    1b0e:	ce 15       	cp	r28, r14
    1b10:	df 05       	cpc	r29, r15
    1b12:	81 f7       	brne	.-32     	; 0x1af4 <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	08 95       	ret

00001b26 <__divmodhi4>:
    1b26:	97 fb       	bst	r25, 7
    1b28:	07 2e       	mov	r0, r23
    1b2a:	16 f4       	brtc	.+4      	; 0x1b30 <__divmodhi4+0xa>
    1b2c:	00 94       	com	r0
    1b2e:	07 d0       	rcall	.+14     	; 0x1b3e <__divmodhi4_neg1>
    1b30:	77 fd       	sbrc	r23, 7
    1b32:	09 d0       	rcall	.+18     	; 0x1b46 <__divmodhi4_neg2>
    1b34:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodhi4>
    1b38:	07 fc       	sbrc	r0, 7
    1b3a:	05 d0       	rcall	.+10     	; 0x1b46 <__divmodhi4_neg2>
    1b3c:	3e f4       	brtc	.+14     	; 0x1b4c <__divmodhi4_exit>

00001b3e <__divmodhi4_neg1>:
    1b3e:	90 95       	com	r25
    1b40:	81 95       	neg	r24
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	08 95       	ret

00001b46 <__divmodhi4_neg2>:
    1b46:	70 95       	com	r23
    1b48:	61 95       	neg	r22
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b4c <__divmodhi4_exit>:
    1b4c:	08 95       	ret

00001b4e <__tablejump2__>:
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	05 90       	lpm	r0, Z+
    1b54:	f4 91       	lpm	r31, Z
    1b56:	e0 2d       	mov	r30, r0
    1b58:	09 94       	ijmp

00001b5a <__umulhisi3>:
    1b5a:	a2 9f       	mul	r26, r18
    1b5c:	b0 01       	movw	r22, r0
    1b5e:	b3 9f       	mul	r27, r19
    1b60:	c0 01       	movw	r24, r0
    1b62:	a3 9f       	mul	r26, r19
    1b64:	70 0d       	add	r23, r0
    1b66:	81 1d       	adc	r24, r1
    1b68:	11 24       	eor	r1, r1
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	b2 9f       	mul	r27, r18
    1b6e:	70 0d       	add	r23, r0
    1b70:	81 1d       	adc	r24, r1
    1b72:	11 24       	eor	r1, r1
    1b74:	91 1d       	adc	r25, r1
    1b76:	08 95       	ret

00001b78 <__udivmodhi4>:
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	51 e1       	ldi	r21, 0x11	; 17
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <__udivmodhi4_ep>

00001b80 <__udivmodhi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	a6 17       	cp	r26, r22
    1b86:	b7 07       	cpc	r27, r23
    1b88:	10 f0       	brcs	.+4      	; 0x1b8e <__udivmodhi4_ep>
    1b8a:	a6 1b       	sub	r26, r22
    1b8c:	b7 0b       	sbc	r27, r23

00001b8e <__udivmodhi4_ep>:
    1b8e:	88 1f       	adc	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	5a 95       	dec	r21
    1b94:	a9 f7       	brne	.-22     	; 0x1b80 <__udivmodhi4_loop>
    1b96:	80 95       	com	r24
    1b98:	90 95       	com	r25
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	08 95       	ret

00001ba0 <_exit>:
    1ba0:	f8 94       	cli

00001ba2 <__stop_program>:
    1ba2:	ff cf       	rjmp	.-2      	; 0x1ba2 <__stop_program>
