
TR-808-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00000ddc  00000e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  0080024c  0080024c  00000fbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031b7  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfc  00000000  00000000  00004513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6c  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000081c  00000000  00000000  0000607c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce8  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b87  00000000  00000000  00007580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00009107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_14>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	38 04       	cpc	r3, r8
  b6:	36 04       	cpc	r3, r6
  b8:	38 04       	cpc	r3, r8
  ba:	3a 04       	cpc	r3, r10
  bc:	3a 04       	cpc	r3, r10
  be:	40 04       	cpc	r4, r0
  c0:	3a 04       	cpc	r3, r10
  c2:	40 04       	cpc	r4, r0
  c4:	40 04       	cpc	r4, r0
  c6:	40 04       	cpc	r4, r0
  c8:	40 04       	cpc	r4, r0
  ca:	40 04       	cpc	r4, r0
  cc:	3a 04       	cpc	r3, r10
  ce:	40 04       	cpc	r4, r0
  d0:	40 04       	cpc	r4, r0

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d8 e0       	ldi	r29, 0x08	; 8
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ec ed       	ldi	r30, 0xDC	; 220
  e6:	fd e0       	ldi	r31, 0x0D	; 13
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	ac 34       	cpi	r26, 0x4C	; 76
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	ac e4       	ldi	r26, 0x4C	; 76
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ad 34       	cpi	r26, 0x4D	; 77
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 a4 02 	call	0x548	; 0x548 <main>
 108:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <trigger_drum>:
	{13,8, 1<<HT_TRIG, 1<<HT_HC_SW, 0, 3, 1<<HC_LED_BIT},
	{14,8, 1<<RS_TRIG, 1<<RS_CL_SW, 1, 3, 1<<CL_LED_BIT},
	{15,7, 1<<MA_TRIG,-1, 0, 7, 1<<MA_LED_BIT}
};

void trigger_drum(uint8_t note, uint8_t velocity) {
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	
		while(trigger_finished == 0);	//need to wait until trigger interrupt is complete before trigger new drum sound
 118:	90 91 60 01 	lds	r25, 0x0160
 11c:	99 23       	and	r25, r25
 11e:	e1 f3       	breq	.-8      	; 0x118 <trigger_drum+0x8>
		current_drum_hit = note;
 120:	80 93 4c 02 	sts	0x024C, r24

		spi_data[drum_hit[note].spi_byte_num] |= drum_hit[note].trig_bit;
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	df 01       	movw	r26, r30
 12e:	a8 0f       	add	r26, r24
 130:	b9 1f       	adc	r27, r25
 132:	aa 0f       	add	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	af 5f       	subi	r26, 0xFF	; 255
 138:	be 4f       	sbci	r27, 0xFE	; 254
 13a:	ac 91       	ld	r26, X
 13c:	af 70       	andi	r26, 0x0F	; 15
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	c7 e5       	ldi	r28, 0x57	; 87
 142:	d2 e0       	ldi	r29, 0x02	; 2
 144:	8d 01       	movw	r16, r26
 146:	09 5a       	subi	r16, 0xA9	; 169
 148:	1d 4f       	sbci	r17, 0xFD	; 253
 14a:	af 01       	movw	r20, r30
 14c:	48 0f       	add	r20, r24
 14e:	59 1f       	adc	r21, r25
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	40 50       	subi	r20, 0x00	; 0
 156:	5f 4f       	sbci	r21, 0xFF	; 255
 158:	d8 01       	movw	r26, r16
 15a:	3c 91       	ld	r19, X
 15c:	da 01       	movw	r26, r20
 15e:	12 96       	adiw	r26, 0x02	; 2
 160:	2c 91       	ld	r18, X
 162:	23 2b       	or	r18, r19
 164:	d8 01       	movw	r26, r16
 166:	2c 93       	st	X, r18
		spi_data[drum_hit[note].spi_led_byte_num] |= drum_hit[note].led_bit;
 168:	df 01       	movw	r26, r30
 16a:	a8 0f       	add	r26, r24
 16c:	b9 1f       	adc	r27, r25
 16e:	aa 0f       	add	r26, r26
 170:	bb 1f       	adc	r27, r27
 172:	ac 5f       	subi	r26, 0xFC	; 252
 174:	be 4f       	sbci	r27, 0xFE	; 254
 176:	2c 91       	ld	r18, X
 178:	a2 2f       	mov	r26, r18
 17a:	a6 95       	lsr	r26
 17c:	af 70       	andi	r26, 0x0F	; 15
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	8d 01       	movw	r16, r26
 182:	09 5a       	subi	r16, 0xA9	; 169
 184:	1d 4f       	sbci	r17, 0xFD	; 253
 186:	d8 01       	movw	r26, r16
 188:	7c 91       	ld	r23, X
 18a:	da 01       	movw	r26, r20
 18c:	15 96       	adiw	r26, 0x05	; 5
 18e:	3c 91       	ld	r19, X
 190:	37 2b       	or	r19, r23
 192:	d8 01       	movw	r26, r16
 194:	3c 93       	st	X, r19
			
		if (drum_hit[note].switch_bit != -1) {//need to set instrument switch
				
				
			spi_data[3] ^= (-(drum_hit[note].switch_value) ^ spi_data[3]) & drum_hit[note].switch_bit; //this sets switch_value in spi_data byte to switch_value (0 or 1)
 196:	3b 81       	ldd	r19, Y+3	; 0x03
 198:	21 70       	andi	r18, 0x01	; 1
 19a:	21 95       	neg	r18
 19c:	23 27       	eor	r18, r19
 19e:	fa 01       	movw	r30, r20
 1a0:	83 81       	ldd	r24, Z+3	; 0x03
 1a2:	28 23       	and	r18, r24
 1a4:	32 27       	eor	r19, r18
 1a6:	3b 83       	std	Y+3, r19	; 0x03
				
		}
			
		if (velocity > 64) {
 1a8:	61 34       	cpi	r22, 0x41	; 65
 1aa:	30 f0       	brcs	.+12     	; 0x1b8 <trigger_drum+0xa8>
			spi_data[8] |= (1<<ACCENT);
 1ac:	88 85       	ldd	r24, Y+8	; 0x08
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	88 87       	std	Y+8, r24	; 0x08
			turn_on(ACCENT_1_LED);
 1b2:	84 e1       	ldi	r24, 0x14	; 20
 1b4:	0e 94 5f 01 	call	0x2be	; 0x2be <turn_on>
		}
		PORTD |= 1<<TRIG; //move all of this into one tidy function something like play_drum(drum_index) - this will then be applicable to sequencer as well
 1b8:	5d 9a       	sbi	0x0b, 5	; 11
			
		update_spi();
 1ba:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <update_spi>
			
		PORTD &= ~(1<<TRIG);
 1be:	5d 98       	cbi	0x0b, 5	; 11
		
		
		//now need to set up interrupt for roughly 1 ms. 
		//start timer
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A
 1c0:	ee e6       	ldi	r30, 0x6E	; 110
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24
		TCCR0B |= (1<<CS01) | (1<<CS00); //set to /64 of system clock start timer
 1ca:	85 b5       	in	r24, 0x25	; 37
 1cc:	83 60       	ori	r24, 0x03	; 3
 1ce:	85 bd       	out	0x25, r24	; 37
		trigger_finished = 0;
 1d0:	10 92 60 01 	sts	0x0160, r1
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <__vector_14>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "drums.h"
#include "spi.h"

ISR (TIMER0_COMPA_vect) {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	
	TCCR0B = 0; //turn off timer
 204:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<OCIE0A); //turn off output compare 
 206:	ee e6       	ldi	r30, 0x6E	; 110
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	80 83       	st	Z, r24
	
	spi_data[drum_hit[current_drum_hit].spi_byte_num] &= ~(drum_hit[current_drum_hit].trig_bit);
 210:	80 91 4c 02 	lds	r24, 0x024C
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	df 01       	movw	r26, r30
 21e:	a8 0f       	add	r26, r24
 220:	b9 1f       	adc	r27, r25
 222:	aa 0f       	add	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	af 5f       	subi	r26, 0xFF	; 255
 228:	be 4f       	sbci	r27, 0xFE	; 254
 22a:	ac 91       	ld	r26, X
 22c:	af 70       	andi	r26, 0x0F	; 15
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	c7 e5       	ldi	r28, 0x57	; 87
 232:	d2 e0       	ldi	r29, 0x02	; 2
 234:	ad 01       	movw	r20, r26
 236:	49 5a       	subi	r20, 0xA9	; 169
 238:	5d 4f       	sbci	r21, 0xFD	; 253
 23a:	9f 01       	movw	r18, r30
 23c:	28 0f       	add	r18, r24
 23e:	39 1f       	adc	r19, r25
 240:	22 0f       	add	r18, r18
 242:	33 1f       	adc	r19, r19
 244:	20 50       	subi	r18, 0x00	; 0
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	d9 01       	movw	r26, r18
 24a:	12 96       	adiw	r26, 0x02	; 2
 24c:	2c 91       	ld	r18, X
 24e:	20 95       	com	r18
 250:	da 01       	movw	r26, r20
 252:	3c 91       	ld	r19, X
 254:	23 23       	and	r18, r19
 256:	2c 93       	st	X, r18
	spi_data[drum_hit[current_drum_hit].spi_led_byte_num] &= ~(drum_hit[current_drum_hit].led_bit);
 258:	df 01       	movw	r26, r30
 25a:	a8 0f       	add	r26, r24
 25c:	b9 1f       	adc	r27, r25
 25e:	aa 0f       	add	r26, r26
 260:	bb 1f       	adc	r27, r27
 262:	ac 5f       	subi	r26, 0xFC	; 252
 264:	be 4f       	sbci	r27, 0xFE	; 254
 266:	ac 91       	ld	r26, X
 268:	a6 95       	lsr	r26
 26a:	af 70       	andi	r26, 0x0F	; 15
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	a9 5a       	subi	r26, 0xA9	; 169
 270:	bd 4f       	sbci	r27, 0xFD	; 253
 272:	e8 0f       	add	r30, r24
 274:	f9 1f       	adc	r31, r25
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e0 50       	subi	r30, 0x00	; 0
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	85 81       	ldd	r24, Z+5	; 0x05
 280:	80 95       	com	r24
 282:	9c 91       	ld	r25, X
 284:	89 23       	and	r24, r25
 286:	8c 93       	st	X, r24
	spi_data[8] &= ~(1<<ACCENT);
 288:	88 85       	ldd	r24, Y+8	; 0x08
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	88 87       	std	Y+8, r24	; 0x08
	update_spi(); //should set flag here and update SPI from main loop. SPI should take about 10 microseconds
 28e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <update_spi>
	trigger_finished = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 60 01 	sts	0x0160, r24
	
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <turn_on>:
	{	1<<6	,	7	,	0	,	NO_BLINK},
	{	1<<7	,	7	,	0	,	NO_BLINK}
	
};

void turn_on(uint8_t led_index) {
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] |= led[led_index].spi_bit;
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9c 01       	movw	r18, r24
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	dc 01       	movw	r26, r24
 2d0:	ae 59       	subi	r26, 0x9E	; 158
 2d2:	be 4f       	sbci	r27, 0xFE	; 254
 2d4:	2c 91       	ld	r18, X
 2d6:	e2 2f       	mov	r30, r18
 2d8:	ef 70       	andi	r30, 0x0F	; 15
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e9 5a       	subi	r30, 0xA9	; 169
 2de:	fd 4f       	sbci	r31, 0xFD	; 253
 2e0:	ec 01       	movw	r28, r24
 2e2:	cf 59       	subi	r28, 0x9F	; 159
 2e4:	de 4f       	sbci	r29, 0xFE	; 254
 2e6:	30 81       	ld	r19, Z
 2e8:	88 81       	ld	r24, Y
 2ea:	83 2b       	or	r24, r19
 2ec:	80 83       	st	Z, r24
	led[led_index].state = 1;
 2ee:	82 2f       	mov	r24, r18
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	8c 93       	st	X, r24

}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <turn_off>:

void turn_off(uint8_t led_index) {
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	
	spi_data[led[led_index].spi_byte] &= ~(led[led_index].spi_bit);
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	9c 01       	movw	r18, r24
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	82 0f       	add	r24, r18
 308:	93 1f       	adc	r25, r19
 30a:	dc 01       	movw	r26, r24
 30c:	ae 59       	subi	r26, 0x9E	; 158
 30e:	be 4f       	sbci	r27, 0xFE	; 254
 310:	2c 91       	ld	r18, X
 312:	e2 2f       	mov	r30, r18
 314:	ef 70       	andi	r30, 0x0F	; 15
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	e9 5a       	subi	r30, 0xA9	; 169
 31a:	fd 4f       	sbci	r31, 0xFD	; 253
 31c:	ec 01       	movw	r28, r24
 31e:	cf 59       	subi	r28, 0x9F	; 159
 320:	de 4f       	sbci	r29, 0xFE	; 254
 322:	88 81       	ld	r24, Y
 324:	80 95       	com	r24
 326:	90 81       	ld	r25, Z
 328:	89 23       	and	r24, r25
 32a:	80 83       	st	Z, r24
	led[led_index].state = 0;
 32c:	82 2f       	mov	r24, r18
 32e:	8f 7e       	andi	r24, 0xEF	; 239
 330:	8c 93       	st	X, r24
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <toggle>:

	//led[led_index].state ^= led[led_index].state;
	//
	//spi_data[led[led_index].spi_byte] ^= (-led[led_index].state^spi_data[led[led_index].spi_byte]) & led[led_index].spi_bit;
		
	if (led[led_index].state) {
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	f9 01       	movw	r30, r18
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	2e 0f       	add	r18, r30
 344:	3f 1f       	adc	r19, r31
 346:	f9 01       	movw	r30, r18
 348:	ee 59       	subi	r30, 0x9E	; 158
 34a:	fe 4f       	sbci	r31, 0xFE	; 254
 34c:	90 81       	ld	r25, Z
 34e:	94 ff       	sbrs	r25, 4
 350:	03 c0       	rjmp	.+6      	; 0x358 <toggle+0x20>
		
		turn_off(led_index);
 352:	0e 94 7d 01 	call	0x2fa	; 0x2fa <turn_off>
 356:	08 95       	ret
		
	} else { 
		
		turn_on(led_index);
 358:	0e 94 5f 01 	call	0x2be	; 0x2be <turn_on>
 35c:	08 95       	ret

0000035e <note_off_event>:
	}

		
}

void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {}
 35e:	08 95       	ret

00000360 <real_time_event>:

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {}
 360:	08 95       	ret

00000362 <note_on_event>:
void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	//spi_data[1] = 1<<step_number;
	//spi_data[0] = (1<<step_number)>>8;
	//if (step_number++ == 15) step_number = 0;
	if (note < 16) {
 362:	40 31       	cpi	r20, 0x10	; 16
 364:	20 f4       	brcc	.+8      	; 0x36e <note_on_event+0xc>
 366:	62 2f       	mov	r22, r18
 368:	84 2f       	mov	r24, r20
		
		//problem is hits can come in before trigger is finished. need to ensure that timer is done
		//while(current_drum_hit != -1 );//move this into trigger_drum()
		trigger_drum(note, velocity);
 36a:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
 36e:	08 95       	ret

00000370 <update_step_board>:
//step[0].button = &button[STEP_1_SW];

	
uint8_t step_number = 0;	

void update_step_board() {
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (button[i].state) {
 378:	fe 01       	movw	r30, r28
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	ea 5f       	subi	r30, 0xFA	; 250
 380:	fd 4f       	sbci	r31, 0xFD	; 253
 382:	80 81       	ld	r24, Z
 384:	86 ff       	sbrs	r24, 6
 386:	0b c0       	rjmp	.+22     	; 0x39e <update_step_board+0x2e>
			
			toggle(i);
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 9c 01 	call	0x338	; 0x338 <toggle>
			button[i].state ^= button[i].state;
 38e:	fe 01       	movw	r30, r28
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	ea 5f       	subi	r30, 0xFA	; 250
 396:	fd 4f       	sbci	r31, 0xFD	; 253
 398:	80 81       	ld	r24, Z
 39a:	8f 7b       	andi	r24, 0xBF	; 191
 39c:	80 83       	st	Z, r24
	
uint8_t step_number = 0;	

void update_step_board() {
	
	for (int i = 0; i < 16; i++) { //button and led indices match for 0-15. How convenient.
 39e:	21 96       	adiw	r28, 0x01	; 1
 3a0:	c0 31       	cpi	r28, 0x10	; 16
 3a2:	d1 05       	cpc	r29, r1
 3a4:	49 f7       	brne	.-46     	; 0x378 <update_step_board+0x8>
		}
		
	}

	
	update_spi();
 3a6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <update_spi>
	
	
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <live_hits>:

void live_hits(void) {
	
	if (button[INST_BD_2_SW].state) {
 3b0:	80 91 28 02 	lds	r24, 0x0228
 3b4:	86 ff       	sbrs	r24, 6
 3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <live_hits+0x18>
		
		button[INST_BD_2_SW].state ^= button[INST_BD_2_SW].state;
 3b8:	e8 e2       	ldi	r30, 0x28	; 40
 3ba:	f2 e0       	ldi	r31, 0x02	; 2
 3bc:	8f 7b       	andi	r24, 0xBF	; 191
 3be:	80 83       	st	Z, r24
		trigger_drum(BD, 0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_SD_3_SW].state) {
 3c8:	80 91 2a 02 	lds	r24, 0x022A
 3cc:	86 ff       	sbrs	r24, 6
 3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <live_hits+0x30>
		
		button[INST_SD_3_SW].state ^= button[INST_SD_3_SW].state;
 3d0:	ea e2       	ldi	r30, 0x2A	; 42
 3d2:	f2 e0       	ldi	r31, 0x02	; 2
 3d4:	8f 7b       	andi	r24, 0xBF	; 191
 3d6:	80 83       	st	Z, r24
		trigger_drum(SD,0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_LT_4_SW].state) {
 3e0:	80 91 2c 02 	lds	r24, 0x022C
 3e4:	86 ff       	sbrs	r24, 6
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <live_hits+0x48>
		
		button[INST_LT_4_SW].state ^= button[INST_LT_4_SW].state;
 3e8:	ec e2       	ldi	r30, 0x2C	; 44
 3ea:	f2 e0       	ldi	r31, 0x02	; 2
 3ec:	8f 7b       	andi	r24, 0xBF	; 191
 3ee:	80 83       	st	Z, r24
		trigger_drum(LT, 0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_MT_5_SW].state) {
 3f8:	80 91 2e 02 	lds	r24, 0x022E
 3fc:	86 ff       	sbrs	r24, 6
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <live_hits+0x60>
		
		button[INST_MT_5_SW].state ^= button[INST_MT_5_SW].state;
 400:	ee e2       	ldi	r30, 0x2E	; 46
 402:	f2 e0       	ldi	r31, 0x02	; 2
 404:	8f 7b       	andi	r24, 0xBF	; 191
 406:	80 83       	st	Z, r24
		trigger_drum(MT,0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}	
	
	if (button[INST_HT_6_SW].state) {
 410:	80 91 30 02 	lds	r24, 0x0230
 414:	86 ff       	sbrs	r24, 6
 416:	08 c0       	rjmp	.+16     	; 0x428 <live_hits+0x78>
		
		button[INST_HT_6_SW].state ^= button[INST_HT_6_SW].state;
 418:	e0 e3       	ldi	r30, 0x30	; 48
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	8f 7b       	andi	r24, 0xBF	; 191
 41e:	80 83       	st	Z, r24
		trigger_drum(HT, 0);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_RS_7_SW].state) {
 428:	80 91 32 02 	lds	r24, 0x0232
 42c:	86 ff       	sbrs	r24, 6
 42e:	08 c0       	rjmp	.+16     	; 0x440 <live_hits+0x90>
		
		button[INST_RS_7_SW].state ^= button[INST_RS_7_SW].state;
 430:	e2 e3       	ldi	r30, 0x32	; 50
 432:	f2 e0       	ldi	r31, 0x02	; 2
 434:	8f 7b       	andi	r24, 0xBF	; 191
 436:	80 83       	st	Z, r24
		trigger_drum(RS,0);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_CP_8_SW].state) {
 440:	80 91 34 02 	lds	r24, 0x0234
 444:	86 ff       	sbrs	r24, 6
 446:	08 c0       	rjmp	.+16     	; 0x458 <live_hits+0xa8>
		
		button[INST_CP_8_SW].state ^= button[INST_CP_8_SW].state;
 448:	e4 e3       	ldi	r30, 0x34	; 52
 44a:	f2 e0       	ldi	r31, 0x02	; 2
 44c:	8f 7b       	andi	r24, 0xBF	; 191
 44e:	80 83       	st	Z, r24
		trigger_drum(CP, 0);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	86 e0       	ldi	r24, 0x06	; 6
 454:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_CB_9_SW].state) {
 458:	80 91 36 02 	lds	r24, 0x0236
 45c:	86 ff       	sbrs	r24, 6
 45e:	08 c0       	rjmp	.+16     	; 0x470 <live_hits+0xc0>
		
		button[INST_CB_9_SW].state ^= button[INST_CB_9_SW].state;
 460:	e6 e3       	ldi	r30, 0x36	; 54
 462:	f2 e0       	ldi	r31, 0x02	; 2
 464:	8f 7b       	andi	r24, 0xBF	; 191
 466:	80 83       	st	Z, r24
		trigger_drum(CB,0);
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}	
	if (button[INST_CY_10_SW].state) {
 470:	80 91 38 02 	lds	r24, 0x0238
 474:	86 ff       	sbrs	r24, 6
 476:	08 c0       	rjmp	.+16     	; 0x488 <live_hits+0xd8>
		
		button[INST_CY_10_SW].state ^= button[INST_CY_10_SW].state;
 478:	e8 e3       	ldi	r30, 0x38	; 56
 47a:	f2 e0       	ldi	r31, 0x02	; 2
 47c:	8f 7b       	andi	r24, 0xBF	; 191
 47e:	80 83       	st	Z, r24
		trigger_drum(CY,0);
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_OH_11_SW].state) {
 488:	80 91 3a 02 	lds	r24, 0x023A
 48c:	86 ff       	sbrs	r24, 6
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <live_hits+0xf0>
		
		button[INST_OH_11_SW].state ^= button[INST_OH_11_SW].state;
 490:	ea e3       	ldi	r30, 0x3A	; 58
 492:	f2 e0       	ldi	r31, 0x02	; 2
 494:	8f 7b       	andi	r24, 0xBF	; 191
 496:	80 83       	st	Z, r24
		trigger_drum(OH, 0);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	89 e0       	ldi	r24, 0x09	; 9
 49c:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
	}
	
	if (button[INST_CH_12_SW].state) {
 4a0:	80 91 3c 02 	lds	r24, 0x023C
 4a4:	86 ff       	sbrs	r24, 6
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <live_hits+0x108>
		
		button[INST_CH_12_SW].state ^= button[INST_CH_12_SW].state;
 4a8:	ec e3       	ldi	r30, 0x3C	; 60
 4aa:	f2 e0       	ldi	r31, 0x02	; 2
 4ac:	8f 7b       	andi	r24, 0xBF	; 191
 4ae:	80 83       	st	Z, r24
		trigger_drum(CH,0);
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	8a e0       	ldi	r24, 0x0A	; 10
 4b4:	0e 94 88 00 	call	0x110	; 0x110 <trigger_drum>
 4b8:	08 95       	ret

000004ba <refresh>:



void refresh(void) {
	
	read_switches();
 4ba:	0e 94 18 03 	call	0x630	; 0x630 <read_switches>
	parse_switch_data();
 4be:	0e 94 59 03 	call	0x6b2	; 0x6b2 <parse_switch_data>
	live_hits();
 4c2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <live_hits>
	update_step_board();
 4c6:	0e 94 b8 01 	call	0x370	; 0x370 <update_step_board>
 4ca:	08 95       	ret

000004cc <setup_midi_usart>:

void setup_midi_usart(void)
{
	uint16_t ubbr_value = 31; //16MHz/(16*31250 BAUD) - 1
	//write ubbr_value to H and L UBBR1 registers:
	UBRR0L = (unsigned char) ubbr_value;
 4cc:	8f e1       	ldi	r24, 0x1F	; 31
 4ce:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (unsigned char) (ubbr_value >> 8);
 4d2:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 4d6:	88 e9       	ldi	r24, 0x98	; 152
 4d8:	80 93 c1 00 	sts	0x00C1, r24
 4dc:	08 95       	ret

000004de <__vector_18>:
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
}



ISR (USART0_RX_vect) { // USART receive interrupt
 4de:	1f 92       	push	r1
 4e0:	0f 92       	push	r0
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	0f 92       	push	r0
 4e6:	11 24       	eor	r1, r1
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	1f 92       	push	r1
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	uint8_t inByte = UDR0;
 50a:	80 91 c6 00 	lds	r24, 0x00C6
 50e:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);
 510:	ae 01       	movw	r20, r28
 512:	4f 5f       	subi	r20, 0xFF	; 255
 514:	5f 4f       	sbci	r21, 0xFF	; 255
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	80 e6       	ldi	r24, 0x60	; 96
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR
}
 520:	0f 90       	pop	r0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <main>:
int main(void)
{
	
	
	
    DDRD |= (1<<TRIG); //set PD5, TRIG to output
 548:	55 9a       	sbi	0x0a, 5	; 10
	
	//setup SPI
	DDRE |= (1<<SPI_MOSI) | (1<<SPI_SS); //set MOSI and SS as outs (SS needs to be set as output or it breaks SPI
 54a:	8d b1       	in	r24, 0x0d	; 13
 54c:	8c 60       	ori	r24, 0x0C	; 12
 54e:	8d b9       	out	0x0d, r24	; 13
	DDRC |= (1<<SPI_CLK) | (1<<SPI_LED_LATCH) | (1<<SPI_SW_LATCH);
 550:	87 b1       	in	r24, 0x07	; 7
 552:	8e 60       	ori	r24, 0x0E	; 14
 554:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<SPI_EN);
 556:	20 9a       	sbi	0x04, 0	; 4
	
	PORTE &= ~(1<<SPI_MOSI );
 558:	73 98       	cbi	0x0e, 3	; 14
	PORTC &= ~(1<<SPI_CLK | 1<<SPI_LED_LATCH | 1<<SPI_SW_LATCH);
 55a:	88 b1       	in	r24, 0x08	; 8
 55c:	81 7f       	andi	r24, 0xF1	; 241
 55e:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1<<SPI_EN); //active low
 560:	28 98       	cbi	0x05, 0	; 5
	
	PORTC |= (1<<SPI_LED_LATCH); //toggle LED LATCH HIGH (disabled)
 562:	43 9a       	sbi	0x08, 3	; 8
	
	SPCR1 = (1<<SPE1) | (1<<MSTR1); //Start SPI as MASTER
 564:	80 e5       	ldi	r24, 0x50	; 80
 566:	80 93 ac 00 	sts	0x00AC, r24
	SPSR1 |= (1<<SPI2X); //set clock rate to XTAL/2 (8 MHz)
 56a:	ed ea       	ldi	r30, 0xAD	; 173
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	81 60       	ori	r24, 0x01	; 1
 572:	80 83       	st	Z, r24
	
	
	
	turn_on(STEP_1_LED);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 5f 01 	call	0x2be	; 0x2be <turn_on>
	turn_on(MODE_2_PATTERN_FIRST_PART);
 57a:	8d e1       	ldi	r24, 0x1D	; 29
 57c:	0e 94 5f 01 	call	0x2be	; 0x2be <turn_on>
	turn_on(FILL_MANUAL);
 580:	82 e2       	ldi	r24, 0x22	; 34
 582:	0e 94 5f 01 	call	0x2be	; 0x2be <turn_on>
	
	update_spi();
 586:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <update_spi>
	
	
	//setup Timer0 for drum triggering interrupt
	
	TCCR0A |= (1<<WGM01); //clear on compare match A
 58a:	84 b5       	in	r24, 0x24	; 36
 58c:	82 60       	ori	r24, 0x02	; 2
 58e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 225; //gives period of about 0.9ms
 590:	81 ee       	ldi	r24, 0xE1	; 225
 592:	87 bd       	out	0x27, r24	; 39
	
	
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
 594:	80 e6       	ldi	r24, 0x60	; 96
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	0e 94 4e 04 	call	0x89c	; 0x89c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
 59c:	61 eb       	ldi	r22, 0xB1	; 177
 59e:	71 e0       	ldi	r23, 0x01	; 1
 5a0:	80 e6       	ldi	r24, 0x60	; 96
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	0e 94 42 04 	call	0x884	; 0x884 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
 5a8:	6f ea       	ldi	r22, 0xAF	; 175
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	80 e6       	ldi	r24, 0x60	; 96
 5ae:	92 e0       	ldi	r25, 0x02	; 2
 5b0:	0e 94 46 04 	call	0x88c	; 0x88c <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
 5b4:	60 eb       	ldi	r22, 0xB0	; 176
 5b6:	71 e0       	ldi	r23, 0x01	; 1
 5b8:	80 e6       	ldi	r24, 0x60	; 96
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	0e 94 4a 04 	call	0x894	; 0x894 <midi_register_realtime_callback>
	//midi_register_songposition_callback(&midi_device, song_position_event);
	//setup MIDI USART
	setup_midi_usart();
 5c0:	0e 94 66 02 	call	0x4cc	; 0x4cc <setup_midi_usart>
	
	sei(); //enable global interrupts	
 5c4:	78 94       	sei
	
    while (1) 
    {
	midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
 5c6:	80 e6       	ldi	r24, 0x60	; 96
 5c8:	92 e0       	ldi	r25, 0x02	; 2
 5ca:	0e 94 78 06 	call	0xcf0	; 0xcf0 <midi_device_process>
	refresh();		
 5ce:	0e 94 5d 02 	call	0x4ba	; 0x4ba <refresh>

	
	}
 5d2:	f9 cf       	rjmp	.-14     	; 0x5c6 <main+0x7e>

000005d4 <spi_shift_byte>:
uint8_t spi_previous_switch_data[5] = {0};
uint8_t switch_states[5] = {0};
	
uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR1 = byte;
 5d4:	80 93 ae 00 	sts	0x00AE, r24
	while (!(SPSR1 & (1<<SPIF1)));
 5d8:	ed ea       	ldi	r30, 0xAD	; 173
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	88 23       	and	r24, r24
 5e0:	ec f7       	brge	.-6      	; 0x5dc <spi_shift_byte+0x8>
	return SPDR1;
 5e2:	80 91 ae 00 	lds	r24, 0x00AE
	
}	
 5e6:	08 95       	ret

000005e8 <update_spi>:

void update_spi(void) { //updates LEDs and triggers, doesn't read data back
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
	
		spi_shift_byte(spi_data[0]);
 5ec:	c7 e5       	ldi	r28, 0x57	; 87
 5ee:	d2 e0       	ldi	r29, 0x02	; 2
 5f0:	88 81       	ld	r24, Y
 5f2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[1]);
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[2]);
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[3]);
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[4]);
 608:	8c 81       	ldd	r24, Y+4	; 0x04
 60a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[5]);
 60e:	8d 81       	ldd	r24, Y+5	; 0x05
 610:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[6]);
 614:	8e 81       	ldd	r24, Y+6	; 0x06
 616:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[7]);
 61a:	8f 81       	ldd	r24, Y+7	; 0x07
 61c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		spi_shift_byte(spi_data[8]);
 620:	88 85       	ldd	r24, Y+8	; 0x08
 622:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
		
		PORTC &= ~(1<<SPI_LED_LATCH);
 626:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<SPI_LED_LATCH);
 628:	43 9a       	sbi	0x08, 3	; 8
	
	
};
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <read_switches>:

void read_switches(void) { //reads switch data
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
	
	PORTC |= (1<<SPI_SW_LATCH); //latch switch data
 634:	42 9a       	sbi	0x08, 2	; 8
	
	spi_current_switch_data[0] = spi_shift_byte(0x00); //not toggling LED latches so doesn't matter what we send out
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
 63c:	c2 e5       	ldi	r28, 0x52	; 82
 63e:	d2 e0       	ldi	r29, 0x02	; 2
 640:	88 83       	st	Y, r24
	spi_current_switch_data[1] = spi_shift_byte(0x00);
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
 648:	89 83       	std	Y+1, r24	; 0x01
	spi_current_switch_data[2] = spi_shift_byte(0x00);
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
 650:	8a 83       	std	Y+2, r24	; 0x02
	spi_current_switch_data[3] = spi_shift_byte(0x00);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
 658:	8b 83       	std	Y+3, r24	; 0x03
	spi_current_switch_data[4] = spi_shift_byte(0x00);
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <spi_shift_byte>
 660:	8c 83       	std	Y+4, r24	; 0x04
	
	PORTC &= ~(1<<SPI_SW_LATCH);
 662:	42 98       	cbi	0x08, 2	; 8
	
	//debounce
	spi_current_switch_data[0] ^= spi_previous_switch_data[0];
 664:	ed e4       	ldi	r30, 0x4D	; 77
 666:	f2 e0       	ldi	r31, 0x02	; 2
 668:	20 81       	ld	r18, Z
 66a:	98 81       	ld	r25, Y
 66c:	92 27       	eor	r25, r18
	spi_previous_switch_data[0] ^= spi_current_switch_data[0];
 66e:	29 27       	eor	r18, r25
 670:	20 83       	st	Z, r18
	spi_current_switch_data[0] &= spi_previous_switch_data[0];
 672:	92 23       	and	r25, r18
 674:	98 83       	st	Y, r25
	
	spi_current_switch_data[1] ^= spi_previous_switch_data[1];
 676:	21 81       	ldd	r18, Z+1	; 0x01
 678:	99 81       	ldd	r25, Y+1	; 0x01
 67a:	92 27       	eor	r25, r18
	spi_previous_switch_data[1] ^= spi_current_switch_data[1];
 67c:	29 27       	eor	r18, r25
 67e:	21 83       	std	Z+1, r18	; 0x01
	spi_current_switch_data[1] &= spi_previous_switch_data[1];
 680:	92 23       	and	r25, r18
 682:	99 83       	std	Y+1, r25	; 0x01
	
	spi_current_switch_data[2] ^= spi_previous_switch_data[2];
 684:	22 81       	ldd	r18, Z+2	; 0x02
 686:	9a 81       	ldd	r25, Y+2	; 0x02
 688:	92 27       	eor	r25, r18
	spi_previous_switch_data[2] ^= spi_current_switch_data[2];
 68a:	29 27       	eor	r18, r25
 68c:	22 83       	std	Z+2, r18	; 0x02
	spi_current_switch_data[2] &= spi_previous_switch_data[2];
 68e:	92 23       	and	r25, r18
 690:	9a 83       	std	Y+2, r25	; 0x02
	
	spi_current_switch_data[3] ^= spi_previous_switch_data[3];
 692:	23 81       	ldd	r18, Z+3	; 0x03
 694:	9b 81       	ldd	r25, Y+3	; 0x03
 696:	92 27       	eor	r25, r18
	spi_previous_switch_data[3] ^= spi_current_switch_data[3];
 698:	29 27       	eor	r18, r25
 69a:	23 83       	std	Z+3, r18	; 0x03
	spi_current_switch_data[3] &= spi_previous_switch_data[3];			
 69c:	92 23       	and	r25, r18
 69e:	9b 83       	std	Y+3, r25	; 0x03
	
	spi_current_switch_data[4] ^= spi_previous_switch_data[4];
 6a0:	94 81       	ldd	r25, Z+4	; 0x04
 6a2:	89 27       	eor	r24, r25
	spi_previous_switch_data[4] ^= spi_current_switch_data[4];
 6a4:	98 27       	eor	r25, r24
 6a6:	94 83       	std	Z+4, r25	; 0x04
	spi_current_switch_data[4] &= spi_previous_switch_data[4];
 6a8:	89 23       	and	r24, r25
 6aa:	8c 83       	std	Y+4, r24	; 0x04
	//spi_shift_byte(spi_data[7]);
	//spi_shift_byte(spi_data[8]);
	
	
	
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <parse_switch_data>:
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	50 e0       	ldi	r21, 0x00	; 0
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
		button[i].state ^= current_state;
 6b6:	da 01       	movw	r26, r20
 6b8:	aa 0f       	add	r26, r26
 6ba:	bb 1f       	adc	r27, r27
 6bc:	aa 5f       	subi	r26, 0xFA	; 250
 6be:	bd 4f       	sbci	r27, 0xFD	; 253
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
		
		//button[i].current_state = (switch_states[button[i].spi_byte] & button[i].spi_bit) & 1; //need to fix this
		uint8_t current_state = (spi_current_switch_data[button[i].spi_byte] >> button[i].spi_bit) &1 ;
 6c0:	8c 91       	ld	r24, X
 6c2:	e8 2f       	mov	r30, r24
 6c4:	e6 95       	lsr	r30
 6c6:	e6 95       	lsr	r30
 6c8:	e6 95       	lsr	r30
 6ca:	e7 70       	andi	r30, 0x07	; 7
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	ee 5a       	subi	r30, 0xAE	; 174
 6d0:	fd 4f       	sbci	r31, 0xFD	; 253
 6d2:	20 81       	ld	r18, Z
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	98 2f       	mov	r25, r24
 6d8:	97 70       	andi	r25, 0x07	; 7
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <parse_switch_data+0x2e>
 6dc:	35 95       	asr	r19
 6de:	27 95       	ror	r18
 6e0:	9a 95       	dec	r25
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <parse_switch_data+0x2a>
 6e4:	21 70       	andi	r18, 0x01	; 1
		button[i].state ^= current_state;
 6e6:	86 fb       	bst	r24, 6
 6e8:	99 27       	eor	r25, r25
 6ea:	90 f9       	bld	r25, 0
 6ec:	29 27       	eor	r18, r25
 6ee:	20 fb       	bst	r18, 0
 6f0:	86 f9       	bld	r24, 6
 6f2:	8c 93       	st	X, r24
	
	};
	
void parse_switch_data(void) {
	
	for (int i = 0; i < NUM_BUTTONS; i++) {
 6f4:	4f 5f       	subi	r20, 0xFF	; 255
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	43 32       	cpi	r20, 0x23	; 35
 6fa:	51 05       	cpc	r21, r1
 6fc:	e1 f6       	brne	.-72     	; 0x6b6 <parse_switch_data+0x4>
		button[i].state ^= current_state;
		
	}
	
	
 6fe:	08 95       	ret

00000700 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
 700:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
 702:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
 704:	74 83       	std	Z+4, r23	; 0x04
 706:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
 708:	11 82       	std	Z+1, r1	; 0x01
 70a:	10 82       	st	Z, r1
 70c:	08 95       	ret

0000070e <bytequeue_enqueue>:
}

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
 70e:	ff 92       	push	r15
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	ec 01       	movw	r28, r24
 71a:	06 2f       	mov	r16, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 71c:	0e 94 00 04 	call	0x800	; 0x800 <store_and_clear_interrupt>
 720:	18 2f       	mov	r17, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
 722:	f9 80       	ldd	r15, Y+1	; 0x01
 724:	4f 2d       	mov	r20, r15
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	ca 01       	movw	r24, r20
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	2a 81       	ldd	r18, Y+2	; 0x02
 72e:	62 2f       	mov	r22, r18
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 736:	28 81       	ld	r18, Y
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	82 17       	cp	r24, r18
 73c:	93 07       	cpc	r25, r19
 73e:	29 f4       	brne	.+10     	; 0x74a <bytequeue_enqueue+0x3c>
      restore_interrupt_setting(setting);
 740:	81 2f       	mov	r24, r17
 742:	0e 94 03 04 	call	0x806	; 0x806 <restore_interrupt_setting>
      return false;
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	12 c0       	rjmp	.+36     	; 0x76e <bytequeue_enqueue+0x60>
   } else {
      queue->data[queue->end] = item;
 74a:	eb 81       	ldd	r30, Y+3	; 0x03
 74c:	fc 81       	ldd	r31, Y+4	; 0x04
 74e:	ef 0d       	add	r30, r15
 750:	f1 1d       	adc	r31, r1
 752:	00 83       	st	Z, r16
      queue->end = (queue->end + 1) % queue->length;
 754:	29 81       	ldd	r18, Y+1	; 0x01
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	c9 01       	movw	r24, r18
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	6a 81       	ldd	r22, Y+2	; 0x02
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 764:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
 766:	81 2f       	mov	r24, r17
 768:	0e 94 03 04 	call	0x806	; 0x806 <restore_interrupt_setting>
      return true;
 76c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	08 95       	ret

0000077a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
 780:	0e 94 00 04 	call	0x800	; 0x800 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
 784:	39 81       	ldd	r19, Y+1	; 0x01
 786:	28 81       	ld	r18, Y
 788:	32 17       	cp	r19, r18
 78a:	18 f0       	brcs	.+6      	; 0x792 <bytequeue_length+0x18>
      len = queue->end - queue->start;
 78c:	c3 2f       	mov	r28, r19
 78e:	c2 1b       	sub	r28, r18
 790:	04 c0       	rjmp	.+8      	; 0x79a <bytequeue_length+0x20>
 792:	9a 81       	ldd	r25, Y+2	; 0x02
 794:	c3 2f       	mov	r28, r19
 796:	c9 0f       	add	r28, r25
   else
      len = (queue->length - queue->start) + queue->end;
 798:	c2 1b       	sub	r28, r18
   restore_interrupt_setting(setting);
 79a:	0e 94 03 04 	call	0x806	; 0x806 <restore_interrupt_setting>
   return len;
}
 79e:	8c 2f       	mov	r24, r28
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
 7a6:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
 7a8:	80 81       	ld	r24, Z
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	9b 01       	movw	r18, r22
 7ae:	28 0f       	add	r18, r24
 7b0:	31 1d       	adc	r19, r1
 7b2:	c9 01       	movw	r24, r18
 7b4:	62 81       	ldd	r22, Z+2	; 0x02
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 7bc:	03 80       	ldd	r0, Z+3	; 0x03
 7be:	f4 81       	ldd	r31, Z+4	; 0x04
 7c0:	e0 2d       	mov	r30, r0
 7c2:	e8 0f       	add	r30, r24
 7c4:	f9 1f       	adc	r31, r25
}
 7c6:	80 81       	ld	r24, Z
 7c8:	08 95       	ret

000007ca <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	ec 01       	movw	r28, r24
 7d2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
 7d4:	0e 94 00 04 	call	0x800	; 0x800 <store_and_clear_interrupt>
 7d8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
 7da:	88 81       	ld	r24, Y
 7dc:	21 2f       	mov	r18, r17
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	b9 01       	movw	r22, r18
 7e2:	68 0f       	add	r22, r24
 7e4:	71 1d       	adc	r23, r1
 7e6:	cb 01       	movw	r24, r22
 7e8:	6a 81       	ldd	r22, Y+2	; 0x02
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 7f0:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
 7f2:	84 2f       	mov	r24, r20
 7f4:	0e 94 03 04 	call	0x806	; 0x806 <restore_interrupt_setting>
}
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	08 95       	ret

00000800 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
 800:	8f b7       	in	r24, 0x3f	; 63
   cli();
 802:	f8 94       	cli
   return sreg;
}
 804:	08 95       	ret

00000806 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
 806:	8f bf       	out	0x3f, r24	; 63
 808:	08 95       	ret

0000080a <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
 80a:	88 1f       	adc	r24, r24
 80c:	88 27       	eor	r24, r24
 80e:	88 1f       	adc	r24, r24
 810:	08 95       	ret

00000812 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	88 3f       	cpi	r24, 0xF8	; 248
 816:	08 f4       	brcc	.+2      	; 0x81a <midi_is_realtime+0x8>
 818:	90 e0       	ldi	r25, 0x00	; 0
}
 81a:	89 2f       	mov	r24, r25
 81c:	08 95       	ret

0000081e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
 81e:	98 2f       	mov	r25, r24
 820:	90 7f       	andi	r25, 0xF0	; 240
 822:	90 3c       	cpi	r25, 0xC0	; 192
 824:	b1 f0       	breq	.+44     	; 0x852 <midi_packet_length+0x34>
 826:	58 f4       	brcc	.+22     	; 0x83e <midi_packet_length+0x20>
 828:	90 39       	cpi	r25, 0x90	; 144
 82a:	41 f1       	breq	.+80     	; 0x87c <midi_packet_length+0x5e>
 82c:	18 f4       	brcc	.+6      	; 0x834 <midi_packet_length+0x16>
 82e:	90 38       	cpi	r25, 0x80	; 128
 830:	19 f5       	brne	.+70     	; 0x878 <midi_packet_length+0x5a>
 832:	24 c0       	rjmp	.+72     	; 0x87c <midi_packet_length+0x5e>
 834:	90 3a       	cpi	r25, 0xA0	; 160
 836:	11 f1       	breq	.+68     	; 0x87c <midi_packet_length+0x5e>
 838:	90 3b       	cpi	r25, 0xB0	; 176
 83a:	f1 f4       	brne	.+60     	; 0x878 <midi_packet_length+0x5a>
 83c:	1f c0       	rjmp	.+62     	; 0x87c <midi_packet_length+0x5e>
 83e:	90 3e       	cpi	r25, 0xE0	; 224
 840:	e9 f0       	breq	.+58     	; 0x87c <midi_packet_length+0x5e>
 842:	18 f4       	brcc	.+6      	; 0x84a <midi_packet_length+0x2c>
 844:	90 3d       	cpi	r25, 0xD0	; 208
 846:	29 f0       	breq	.+10     	; 0x852 <midi_packet_length+0x34>
 848:	17 c0       	rjmp	.+46     	; 0x878 <midi_packet_length+0x5a>
 84a:	90 3f       	cpi	r25, 0xF0	; 240
 84c:	21 f0       	breq	.+8      	; 0x856 <midi_packet_length+0x38>
 84e:	93 3f       	cpi	r25, 0xF3	; 243
 850:	99 f4       	brne	.+38     	; 0x878 <midi_packet_length+0x5a>
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
 852:	82 e0       	ldi	r24, 0x02	; 2
 854:	08 95       	ret
      case 0xF0:
         switch(status) {
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	fc 01       	movw	r30, r24
 85a:	e1 5f       	subi	r30, 0xF1	; 241
 85c:	f1 09       	sbc	r31, r1
 85e:	ef 30       	cpi	r30, 0x0F	; 15
 860:	f1 05       	cpc	r31, r1
 862:	40 f4       	brcc	.+16     	; 0x874 <midi_packet_length+0x56>
 864:	e6 5a       	subi	r30, 0xA6	; 166
 866:	ff 4f       	sbci	r31, 0xFF	; 255
 868:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__tablejump2__>
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	08 95       	ret
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	08 95       	ret
         }
      default:
         return UNDEFINED;
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	08 95       	ret
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
 87c:	83 e0       	ldi	r24, 0x03	; 3
 87e:	08 95       	ret
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
 880:	81 e0       	ldi	r24, 0x01	; 1
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
 882:	08 95       	ret

00000884 <midi_register_noteon_callback>:
void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
}

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
 884:	fc 01       	movw	r30, r24
 886:	75 83       	std	Z+5, r23	; 0x05
 888:	64 83       	std	Z+4, r22	; 0x04
 88a:	08 95       	ret

0000088c <midi_register_noteoff_callback>:
}

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
 88c:	fc 01       	movw	r30, r24
 88e:	77 83       	std	Z+7, r23	; 0x07
 890:	66 83       	std	Z+6, r22	; 0x06
 892:	08 95       	ret

00000894 <midi_register_realtime_callback>:
void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
}

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
 894:	fc 01       	movw	r30, r24
 896:	77 8b       	std	Z+23, r23	; 0x17
 898:	66 8b       	std	Z+22, r22	; 0x16
 89a:	08 95       	ret

0000089c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
 8a2:	1d a2       	std	Y+37, r1	; 0x25
  device->input_count = 0;
 8a4:	1f a2       	std	Y+39, r1	; 0x27
 8a6:	1e a2       	std	Y+38, r1	; 0x26
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
 8a8:	bc 01       	movw	r22, r24
 8aa:	68 5d       	subi	r22, 0xD8	; 216
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	40 ec       	ldi	r20, 0xC0	; 192
 8b0:	88 51       	subi	r24, 0x18	; 24
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	0e 94 80 03 	call	0x700	; 0x700 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
 8b8:	1b 82       	std	Y+3, r1	; 0x03
 8ba:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
 8bc:	1d 82       	std	Y+5, r1	; 0x05
 8be:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
 8c0:	1f 82       	std	Y+7, r1	; 0x07
 8c2:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
 8c4:	19 86       	std	Y+9, r1	; 0x09
 8c6:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
 8c8:	1b 86       	std	Y+11, r1	; 0x0b
 8ca:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
 8cc:	1d 86       	std	Y+13, r1	; 0x0d
 8ce:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
 8d0:	1f 86       	std	Y+15, r1	; 0x0f
 8d2:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
 8d4:	19 8a       	std	Y+17, r1	; 0x11
 8d6:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
 8d8:	1b 8a       	std	Y+19, r1	; 0x13
 8da:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
 8dc:	1d 8a       	std	Y+21, r1	; 0x15
 8de:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
 8e0:	1f 8a       	std	Y+23, r1	; 0x17
 8e2:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
 8e4:	19 8e       	std	Y+25, r1	; 0x19
 8e6:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
 8e8:	1b 8e       	std	Y+27, r1	; 0x1b
 8ea:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
 8ec:	1d 8e       	std	Y+29, r1	; 0x1d
 8ee:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
 8f0:	1f 8e       	std	Y+31, r1	; 0x1f
 8f2:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
 8f4:	19 a2       	std	Y+33, r1	; 0x21
 8f6:	18 a2       	std	Y+32, r1	; 0x20
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

000008fe <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
 8fe:	ef 92       	push	r14
 900:	ff 92       	push	r15
 902:	0f 93       	push	r16
 904:	1f 93       	push	r17
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < cnt; i++)
 90a:	66 23       	and	r22, r22
 90c:	99 f0       	breq	.+38     	; 0x934 <__stack+0x35>
 90e:	ea 01       	movw	r28, r20
 910:	61 50       	subi	r22, 0x01	; 1
 912:	06 2f       	mov	r16, r22
 914:	10 e0       	ldi	r17, 0x00	; 0
 916:	0f 5f       	subi	r16, 0xFF	; 255
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	04 0f       	add	r16, r20
 91c:	15 1f       	adc	r17, r21
    bytequeue_enqueue(&device->input_queue, input[i]);
 91e:	7c 01       	movw	r14, r24
 920:	28 ee       	ldi	r18, 0xE8	; 232
 922:	e2 0e       	add	r14, r18
 924:	f1 1c       	adc	r15, r1
 926:	69 91       	ld	r22, Y+
 928:	c7 01       	movw	r24, r14
 92a:	0e 94 87 03 	call	0x70e	; 0x70e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
 92e:	c0 17       	cp	r28, r16
 930:	d1 07       	cpc	r29, r17
 932:	c9 f7       	brne	.-14     	; 0x926 <__stack+0x27>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	ff 90       	pop	r15
 93e:	ef 90       	pop	r14
 940:	08 95       	ret

00000942 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
 942:	af 92       	push	r10
 944:	bf 92       	push	r11
 946:	cf 92       	push	r12
 948:	df 92       	push	r13
 94a:	ef 92       	push	r14
 94c:	ff 92       	push	r15
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	00 d0       	rcall	.+0      	; 0x958 <midi_input_callbacks+0x16>
 958:	1f 92       	push	r1
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	7c 01       	movw	r14, r24
 960:	6b 01       	movw	r12, r22
 962:	14 2f       	mov	r17, r20
 964:	b2 2e       	mov	r11, r18
 966:	a0 2e       	mov	r10, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
 968:	dc 01       	movw	r26, r24
 96a:	95 96       	adiw	r26, 0x25	; 37
 96c:	8c 91       	ld	r24, X
 96e:	95 97       	sbiw	r26, 0x25	; 37
 970:	84 30       	cpi	r24, 0x04	; 4
 972:	11 f5       	brne	.+68     	; 0x9b8 <midi_input_callbacks+0x76>
    if (device->input_sysex_callback) {
 974:	5a 96       	adiw	r26, 0x1a	; 26
 976:	ed 91       	ld	r30, X+
 978:	fc 91       	ld	r31, X
 97a:	5b 97       	sbiw	r26, 0x1b	; 27
 97c:	30 97       	sbiw	r30, 0x00	; 0
 97e:	09 f4       	brne	.+2      	; 0x982 <midi_input_callbacks+0x40>
 980:	cc c0       	rjmp	.+408    	; 0xb1a <midi_input_callbacks+0x1d8>
      const uint16_t start = ((cnt - 1) / 3) * 3;
 982:	9b 01       	movw	r18, r22
 984:	21 50       	subi	r18, 0x01	; 1
 986:	31 09       	sbc	r19, r1
 988:	ab ea       	ldi	r26, 0xAB	; 171
 98a:	ba ea       	ldi	r27, 0xAA	; 170
 98c:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 990:	96 95       	lsr	r25
 992:	87 95       	ror	r24
 994:	9c 01       	movw	r18, r24
 996:	22 0f       	add	r18, r18
 998:	33 1f       	adc	r19, r19
 99a:	82 0f       	add	r24, r18
 99c:	93 1f       	adc	r25, r19
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
 99e:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
 9a0:	ba 82       	std	Y+2, r11	; 0x02
      data[2] = byte2;
 9a2:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
 9a4:	4c 2d       	mov	r20, r12
 9a6:	48 1b       	sub	r20, r24
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
 9a8:	9e 01       	movw	r18, r28
 9aa:	2f 5f       	subi	r18, 0xFF	; 255
 9ac:	3f 4f       	sbci	r19, 0xFF	; 255
 9ae:	68 2f       	mov	r22, r24
 9b0:	79 2f       	mov	r23, r25
 9b2:	c7 01       	movw	r24, r14
 9b4:	09 95       	icall
 9b6:	be c0       	rjmp	.+380    	; 0xb34 <midi_input_callbacks+0x1f2>
      called = true;
    }
  } else {
    switch (cnt) {
 9b8:	62 30       	cpi	r22, 0x02	; 2
 9ba:	71 05       	cpc	r23, r1
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <midi_input_callbacks+0x7e>
 9be:	55 c0       	rjmp	.+170    	; 0xa6a <midi_input_callbacks+0x128>
 9c0:	63 30       	cpi	r22, 0x03	; 3
 9c2:	71 05       	cpc	r23, r1
 9c4:	29 f0       	breq	.+10     	; 0x9d0 <midi_input_callbacks+0x8e>
 9c6:	61 30       	cpi	r22, 0x01	; 1
 9c8:	71 05       	cpc	r23, r1
 9ca:	09 f0       	breq	.+2      	; 0x9ce <midi_input_callbacks+0x8c>
 9cc:	a1 c0       	rjmp	.+322    	; 0xb10 <midi_input_callbacks+0x1ce>
 9ce:	88 c0       	rjmp	.+272    	; 0xae0 <midi_input_callbacks+0x19e>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 9d0:	84 2f       	mov	r24, r20
 9d2:	80 7f       	andi	r24, 0xF0	; 240
 9d4:	80 3a       	cpi	r24, 0xA0	; 160
 9d6:	f1 f0       	breq	.+60     	; 0xa14 <midi_input_callbacks+0xd2>
 9d8:	28 f4       	brcc	.+10     	; 0x9e4 <midi_input_callbacks+0xa2>
 9da:	80 38       	cpi	r24, 0x80	; 128
 9dc:	a9 f0       	breq	.+42     	; 0xa08 <midi_input_callbacks+0xc6>
 9de:	80 39       	cpi	r24, 0x90	; 144
 9e0:	69 f0       	breq	.+26     	; 0x9fc <midi_input_callbacks+0xba>
 9e2:	2f c0       	rjmp	.+94     	; 0xa42 <midi_input_callbacks+0x100>
 9e4:	80 3e       	cpi	r24, 0xE0	; 224
 9e6:	e1 f0       	breq	.+56     	; 0xa20 <midi_input_callbacks+0xde>
 9e8:	80 3f       	cpi	r24, 0xF0	; 240
 9ea:	01 f1       	breq	.+64     	; 0xa2c <midi_input_callbacks+0xea>
 9ec:	80 3b       	cpi	r24, 0xB0	; 176
 9ee:	49 f5       	brne	.+82     	; 0xa42 <midi_input_callbacks+0x100>
            case MIDI_CC:
              func = device->input_cc_callback;
 9f0:	d7 01       	movw	r26, r14
 9f2:	12 96       	adiw	r26, 0x02	; 2
 9f4:	ed 91       	ld	r30, X+
 9f6:	fc 91       	ld	r31, X
 9f8:	13 97       	sbiw	r26, 0x03	; 3
              break;
 9fa:	25 c0       	rjmp	.+74     	; 0xa46 <midi_input_callbacks+0x104>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
 9fc:	d7 01       	movw	r26, r14
 9fe:	14 96       	adiw	r26, 0x04	; 4
 a00:	ed 91       	ld	r30, X+
 a02:	fc 91       	ld	r31, X
 a04:	15 97       	sbiw	r26, 0x05	; 5
              break;
 a06:	1f c0       	rjmp	.+62     	; 0xa46 <midi_input_callbacks+0x104>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
 a08:	d7 01       	movw	r26, r14
 a0a:	16 96       	adiw	r26, 0x06	; 6
 a0c:	ed 91       	ld	r30, X+
 a0e:	fc 91       	ld	r31, X
 a10:	17 97       	sbiw	r26, 0x07	; 7
              break;
 a12:	19 c0       	rjmp	.+50     	; 0xa46 <midi_input_callbacks+0x104>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
 a14:	d7 01       	movw	r26, r14
 a16:	18 96       	adiw	r26, 0x08	; 8
 a18:	ed 91       	ld	r30, X+
 a1a:	fc 91       	ld	r31, X
 a1c:	19 97       	sbiw	r26, 0x09	; 9
              break;
 a1e:	13 c0       	rjmp	.+38     	; 0xa46 <midi_input_callbacks+0x104>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
 a20:	d7 01       	movw	r26, r14
 a22:	1a 96       	adiw	r26, 0x0a	; 10
 a24:	ed 91       	ld	r30, X+
 a26:	fc 91       	ld	r31, X
 a28:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <midi_input_callbacks+0x104>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
 a2c:	42 3f       	cpi	r20, 0xF2	; 242
 a2e:	09 f0       	breq	.+2      	; 0xa32 <midi_input_callbacks+0xf0>
 a30:	74 c0       	rjmp	.+232    	; 0xb1a <midi_input_callbacks+0x1d8>
                func = device->input_songposition_callback;
 a32:	d7 01       	movw	r26, r14
 a34:	1c 96       	adiw	r26, 0x0c	; 12
 a36:	ed 91       	ld	r30, X+
 a38:	fc 91       	ld	r31, X
 a3a:	1d 97       	sbiw	r26, 0x0d	; 13
              break;
            default:
              break;
          }
          if(func) {
 a3c:	30 97       	sbiw	r30, 0x00	; 0
 a3e:	41 f4       	brne	.+16     	; 0xa50 <midi_input_callbacks+0x10e>
 a40:	6c c0       	rjmp	.+216    	; 0xb1a <midi_input_callbacks+0x1d8>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
 a42:	e0 e0       	ldi	r30, 0x00	; 0
 a44:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
 a46:	30 97       	sbiw	r30, 0x00	; 0
 a48:	09 f4       	brne	.+2      	; 0xa4c <midi_input_callbacks+0x10a>
 a4a:	67 c0       	rjmp	.+206    	; 0xb1a <midi_input_callbacks+0x1d8>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
 a4c:	12 3f       	cpi	r17, 0xF2	; 242
 a4e:	31 f4       	brne	.+12     	; 0xa5c <midi_input_callbacks+0x11a>
              func(device, byte0, byte1, byte2);
 a50:	2a 2d       	mov	r18, r10
 a52:	4b 2d       	mov	r20, r11
 a54:	62 ef       	ldi	r22, 0xF2	; 242
 a56:	c7 01       	movw	r24, r14
 a58:	09 95       	icall
 a5a:	6c c0       	rjmp	.+216    	; 0xb34 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
 a5c:	2a 2d       	mov	r18, r10
 a5e:	4b 2d       	mov	r20, r11
 a60:	61 2f       	mov	r22, r17
 a62:	6f 70       	andi	r22, 0x0F	; 15
 a64:	c7 01       	movw	r24, r14
 a66:	09 95       	icall
 a68:	65 c0       	rjmp	.+202    	; 0xb34 <midi_input_callbacks+0x1f2>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
 a6a:	84 2f       	mov	r24, r20
 a6c:	80 7f       	andi	r24, 0xF0	; 240
 a6e:	80 3d       	cpi	r24, 0xD0	; 208
 a70:	51 f0       	breq	.+20     	; 0xa86 <midi_input_callbacks+0x144>
 a72:	80 3f       	cpi	r24, 0xF0	; 240
 a74:	71 f0       	breq	.+28     	; 0xa92 <midi_input_callbacks+0x150>
 a76:	80 3c       	cpi	r24, 0xC0	; 192
 a78:	01 f5       	brne	.+64     	; 0xaba <midi_input_callbacks+0x178>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
 a7a:	d7 01       	movw	r26, r14
 a7c:	1e 96       	adiw	r26, 0x0e	; 14
 a7e:	ed 91       	ld	r30, X+
 a80:	fc 91       	ld	r31, X
 a82:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
 a84:	1c c0       	rjmp	.+56     	; 0xabe <midi_input_callbacks+0x17c>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
 a86:	d7 01       	movw	r26, r14
 a88:	50 96       	adiw	r26, 0x10	; 16
 a8a:	ed 91       	ld	r30, X+
 a8c:	fc 91       	ld	r31, X
 a8e:	51 97       	sbiw	r26, 0x11	; 17
              break;
 a90:	16 c0       	rjmp	.+44     	; 0xabe <midi_input_callbacks+0x17c>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
 a92:	43 3f       	cpi	r20, 0xF3	; 243
 a94:	41 f4       	brne	.+16     	; 0xaa6 <midi_input_callbacks+0x164>
                func = device->input_songselect_callback;
 a96:	d7 01       	movw	r26, r14
 a98:	52 96       	adiw	r26, 0x12	; 18
 a9a:	ed 91       	ld	r30, X+
 a9c:	fc 91       	ld	r31, X
 a9e:	53 97       	sbiw	r26, 0x13	; 19
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 aa0:	30 97       	sbiw	r30, 0x00	; 0
 aa2:	99 f4       	brne	.+38     	; 0xaca <midi_input_callbacks+0x188>
 aa4:	3a c0       	rjmp	.+116    	; 0xb1a <midi_input_callbacks+0x1d8>
              func = device->input_chanpressure_callback;
              break;
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
                func = device->input_songselect_callback;
              else if (byte0 == MIDI_TC_QUARTERFRAME)
 aa6:	41 3f       	cpi	r20, 0xF1	; 241
 aa8:	c1 f5       	brne	.+112    	; 0xb1a <midi_input_callbacks+0x1d8>
                func = device->input_tc_quarterframe_callback;
 aaa:	d7 01       	movw	r26, r14
 aac:	54 96       	adiw	r26, 0x14	; 20
 aae:	ed 91       	ld	r30, X+
 ab0:	fc 91       	ld	r31, X
 ab2:	55 97       	sbiw	r26, 0x15	; 21
              break;
            default:
              break;
          }
          if(func) {
 ab4:	30 97       	sbiw	r30, 0x00	; 0
 ab6:	49 f4       	brne	.+18     	; 0xaca <midi_input_callbacks+0x188>
 ab8:	30 c0       	rjmp	.+96     	; 0xb1a <midi_input_callbacks+0x1d8>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
 aba:	e0 e0       	ldi	r30, 0x00	; 0
 abc:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
 abe:	30 97       	sbiw	r30, 0x00	; 0
 ac0:	61 f1       	breq	.+88     	; 0xb1a <midi_input_callbacks+0x1d8>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
 ac2:	81 2f       	mov	r24, r17
 ac4:	8d 7f       	andi	r24, 0xFD	; 253
 ac6:	81 3f       	cpi	r24, 0xF1	; 241
 ac8:	29 f4       	brne	.+10     	; 0xad4 <midi_input_callbacks+0x192>
              func(device, byte0, byte1);
 aca:	4b 2d       	mov	r20, r11
 acc:	61 2f       	mov	r22, r17
 ace:	c7 01       	movw	r24, r14
 ad0:	09 95       	icall
 ad2:	30 c0       	rjmp	.+96     	; 0xb34 <midi_input_callbacks+0x1f2>
            else
              func(device, byte0 & 0x0F, byte1);
 ad4:	4b 2d       	mov	r20, r11
 ad6:	61 2f       	mov	r22, r17
 ad8:	6f 70       	andi	r22, 0x0F	; 15
 ada:	c7 01       	movw	r24, r14
 adc:	09 95       	icall
 ade:	2a c0       	rjmp	.+84     	; 0xb34 <midi_input_callbacks+0x1f2>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
 ae0:	84 2f       	mov	r24, r20
 ae2:	0e 94 09 04 	call	0x812	; 0x812 <midi_is_realtime>
 ae6:	88 23       	and	r24, r24
 ae8:	31 f0       	breq	.+12     	; 0xaf6 <midi_input_callbacks+0x1b4>
            func = device->input_realtime_callback;
 aea:	d7 01       	movw	r26, r14
 aec:	56 96       	adiw	r26, 0x16	; 22
 aee:	ed 91       	ld	r30, X+
 af0:	fc 91       	ld	r31, X
 af2:	57 97       	sbiw	r26, 0x17	; 23
 af4:	07 c0       	rjmp	.+14     	; 0xb04 <midi_input_callbacks+0x1c2>
          else if (byte0 == MIDI_TUNEREQUEST)
 af6:	16 3f       	cpi	r17, 0xF6	; 246
 af8:	81 f4       	brne	.+32     	; 0xb1a <midi_input_callbacks+0x1d8>
            func = device->input_tunerequest_callback;
 afa:	d7 01       	movw	r26, r14
 afc:	58 96       	adiw	r26, 0x18	; 24
 afe:	ed 91       	ld	r30, X+
 b00:	fc 91       	ld	r31, X
 b02:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
 b04:	30 97       	sbiw	r30, 0x00	; 0
 b06:	49 f0       	breq	.+18     	; 0xb1a <midi_input_callbacks+0x1d8>
            func(device, byte0);
 b08:	61 2f       	mov	r22, r17
 b0a:	c7 01       	movw	r24, r14
 b0c:	09 95       	icall
 b0e:	12 c0       	rjmp	.+36     	; 0xb34 <midi_input_callbacks+0x1f2>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
 b10:	64 30       	cpi	r22, 0x04	; 4
 b12:	71 05       	cpc	r23, r1
 b14:	10 f0       	brcs	.+4      	; 0xb1a <midi_input_callbacks+0x1d8>
          cnt = 0;
 b16:	c1 2c       	mov	r12, r1
 b18:	d1 2c       	mov	r13, r1
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
 b1a:	d7 01       	movw	r26, r14
 b1c:	5c 96       	adiw	r26, 0x1c	; 28
 b1e:	ed 91       	ld	r30, X+
 b20:	fc 91       	ld	r31, X
 b22:	5d 97       	sbiw	r26, 0x1d	; 29
 b24:	30 97       	sbiw	r30, 0x00	; 0
 b26:	31 f0       	breq	.+12     	; 0xb34 <midi_input_callbacks+0x1f2>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
 b28:	0a 2d       	mov	r16, r10
 b2a:	2b 2d       	mov	r18, r11
 b2c:	41 2f       	mov	r20, r17
 b2e:	b6 01       	movw	r22, r12
 b30:	c7 01       	movw	r24, r14
 b32:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
 b34:	d7 01       	movw	r26, r14
 b36:	5e 96       	adiw	r26, 0x1e	; 30
 b38:	ed 91       	ld	r30, X+
 b3a:	fc 91       	ld	r31, X
 b3c:	5f 97       	sbiw	r26, 0x1f	; 31
 b3e:	30 97       	sbiw	r30, 0x00	; 0
 b40:	31 f0       	breq	.+12     	; 0xb4e <midi_input_callbacks+0x20c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
 b42:	0a 2d       	mov	r16, r10
 b44:	2b 2d       	mov	r18, r11
 b46:	41 2f       	mov	r20, r17
 b48:	b6 01       	movw	r22, r12
 b4a:	c7 01       	movw	r24, r14
 b4c:	09 95       	icall
}
 b4e:	0f 90       	pop	r0
 b50:	0f 90       	pop	r0
 b52:	0f 90       	pop	r0
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	ff 90       	pop	r15
 b5e:	ef 90       	pop	r14
 b60:	df 90       	pop	r13
 b62:	cf 90       	pop	r12
 b64:	bf 90       	pop	r11
 b66:	af 90       	pop	r10
 b68:	08 95       	ret

00000b6a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
 b6a:	ff 92       	push	r15
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	ec 01       	movw	r28, r24
 b76:	16 2f       	mov	r17, r22
  if (midi_is_realtime(input)) {
 b78:	86 2f       	mov	r24, r22
 b7a:	0e 94 09 04 	call	0x812	; 0x812 <midi_is_realtime>
 b7e:	88 23       	and	r24, r24
 b80:	69 f0       	breq	.+26     	; 0xb9c <midi_process_byte+0x32>
    //call callback, store and restore state
    input_state_t state = device->input_state;
 b82:	fd a0       	ldd	r15, Y+37	; 0x25
    device->input_state = ONE_BYTE_MESSAGE;
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	8d a3       	std	Y+37, r24	; 0x25
    midi_input_callbacks(device, 1, input, 0, 0);
 b88:	00 e0       	ldi	r16, 0x00	; 0
 b8a:	20 e0       	ldi	r18, 0x00	; 0
 b8c:	41 2f       	mov	r20, r17
 b8e:	61 e0       	ldi	r22, 0x01	; 1
 b90:	70 e0       	ldi	r23, 0x00	; 0
 b92:	ce 01       	movw	r24, r28
 b94:	0e 94 a1 04 	call	0x942	; 0x942 <midi_input_callbacks>
    device->input_state = state;
 b98:	fd a2       	std	Y+37, r15	; 0x25
 b9a:	a4 c0       	rjmp	.+328    	; 0xce4 <midi_process_byte+0x17a>
  } else if (midi_is_statusbyte(input)) {
 b9c:	81 2f       	mov	r24, r17
 b9e:	0e 94 05 04 	call	0x80a	; 0x80a <midi_is_statusbyte>
 ba2:	88 23       	and	r24, r24
 ba4:	09 f4       	brne	.+2      	; 0xba8 <midi_process_byte+0x3e>
 ba6:	5d c0       	rjmp	.+186    	; 0xc62 <midi_process_byte+0xf8>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
 ba8:	8d a1       	ldd	r24, Y+37	; 0x25
 baa:	84 30       	cpi	r24, 0x04	; 4
 bac:	29 f0       	breq	.+10     	; 0xbb8 <midi_process_byte+0x4e>
      device->input_buffer[0] = input;
 bae:	1a a3       	std	Y+34, r17	; 0x22
      device->input_count = 1;
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	9f a3       	std	Y+39, r25	; 0x27
 bb6:	8e a3       	std	Y+38, r24	; 0x26
    }
    switch (midi_packet_length(input)) {
 bb8:	81 2f       	mov	r24, r17
 bba:	0e 94 0f 04 	call	0x81e	; 0x81e <midi_packet_length>
 bbe:	81 30       	cpi	r24, 0x01	; 1
 bc0:	31 f0       	breq	.+12     	; 0xbce <midi_process_byte+0x64>
 bc2:	b8 f0       	brcs	.+46     	; 0xbf2 <midi_process_byte+0x88>
 bc4:	82 30       	cpi	r24, 0x02	; 2
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <midi_process_byte+0x7c>
 bc8:	83 30       	cpi	r24, 0x03	; 3
 bca:	81 f0       	breq	.+32     	; 0xbec <midi_process_byte+0x82>
 bcc:	46 c0       	rjmp	.+140    	; 0xc5a <midi_process_byte+0xf0>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	8d a3       	std	Y+37, r24	; 0x25
        midi_input_callbacks(device, 1, input, 0, 0);
 bd2:	00 e0       	ldi	r16, 0x00	; 0
 bd4:	20 e0       	ldi	r18, 0x00	; 0
 bd6:	41 2f       	mov	r20, r17
 bd8:	61 e0       	ldi	r22, 0x01	; 1
 bda:	70 e0       	ldi	r23, 0x00	; 0
 bdc:	ce 01       	movw	r24, r28
 bde:	0e 94 a1 04 	call	0x942	; 0x942 <midi_input_callbacks>
        device->input_state = IDLE;
 be2:	1d a2       	std	Y+37, r1	; 0x25
        break;
 be4:	7f c0       	rjmp	.+254    	; 0xce4 <midi_process_byte+0x17a>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
 be6:	82 e0       	ldi	r24, 0x02	; 2
 be8:	8d a3       	std	Y+37, r24	; 0x25
        break;
 bea:	7c c0       	rjmp	.+248    	; 0xce4 <midi_process_byte+0x17a>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
 bec:	83 e0       	ldi	r24, 0x03	; 3
 bee:	8d a3       	std	Y+37, r24	; 0x25
        break;
 bf0:	79 c0       	rjmp	.+242    	; 0xce4 <midi_process_byte+0x17a>
      case UNDEFINED:
        switch(input) {
 bf2:	10 3f       	cpi	r17, 0xF0	; 240
 bf4:	19 f0       	breq	.+6      	; 0xbfc <midi_process_byte+0x92>
 bf6:	17 3f       	cpi	r17, 0xF7	; 247
 bf8:	51 f0       	breq	.+20     	; 0xc0e <midi_process_byte+0xa4>
 bfa:	2b c0       	rjmp	.+86     	; 0xc52 <midi_process_byte+0xe8>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
 bfc:	84 e0       	ldi	r24, 0x04	; 4
 bfe:	8d a3       	std	Y+37, r24	; 0x25
            device->input_buffer[0] = input;
 c00:	80 ef       	ldi	r24, 0xF0	; 240
 c02:	8a a3       	std	Y+34, r24	; 0x22
            device->input_count = 1;
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	9f a3       	std	Y+39, r25	; 0x27
 c0a:	8e a3       	std	Y+38, r24	; 0x26
            break;
 c0c:	6b c0       	rjmp	.+214    	; 0xce4 <midi_process_byte+0x17a>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
 c0e:	4e a1       	ldd	r20, Y+38	; 0x26
 c10:	5f a1       	ldd	r21, Y+39	; 0x27
 c12:	9a 01       	movw	r18, r20
 c14:	ab ea       	ldi	r26, 0xAB	; 171
 c16:	ba ea       	ldi	r27, 0xAA	; 170
 c18:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 c1c:	96 95       	lsr	r25
 c1e:	87 95       	ror	r24
 c20:	9c 01       	movw	r18, r24
 c22:	22 0f       	add	r18, r18
 c24:	33 1f       	adc	r19, r19
 c26:	82 0f       	add	r24, r18
 c28:	93 1f       	adc	r25, r19
 c2a:	fa 01       	movw	r30, r20
 c2c:	e8 1b       	sub	r30, r24
 c2e:	f9 0b       	sbc	r31, r25
 c30:	ec 0f       	add	r30, r28
 c32:	fd 1f       	adc	r31, r29
 c34:	87 ef       	ldi	r24, 0xF7	; 247
 c36:	82 a3       	std	Z+34, r24	; 0x22
            device->input_count += 1;
 c38:	ba 01       	movw	r22, r20
 c3a:	6f 5f       	subi	r22, 0xFF	; 255
 c3c:	7f 4f       	sbci	r23, 0xFF	; 255
 c3e:	7f a3       	std	Y+39, r23	; 0x27
 c40:	6e a3       	std	Y+38, r22	; 0x26
            //call the callback
            midi_input_callbacks(device, device->input_count, 
 c42:	0c a1       	ldd	r16, Y+36	; 0x24
 c44:	2b a1       	ldd	r18, Y+35	; 0x23
 c46:	4a a1       	ldd	r20, Y+34	; 0x22
 c48:	ce 01       	movw	r24, r28
 c4a:	0e 94 a1 04 	call	0x942	; 0x942 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
 c4e:	1d a2       	std	Y+37, r1	; 0x25
            break;
 c50:	49 c0       	rjmp	.+146    	; 0xce4 <midi_process_byte+0x17a>
          default:
            device->input_state = IDLE;
 c52:	1d a2       	std	Y+37, r1	; 0x25
            device->input_count = 0;
 c54:	1f a2       	std	Y+39, r1	; 0x27
 c56:	1e a2       	std	Y+38, r1	; 0x26
 c58:	45 c0       	rjmp	.+138    	; 0xce4 <midi_process_byte+0x17a>
        }

        break;
      default:
        device->input_state = IDLE;
 c5a:	1d a2       	std	Y+37, r1	; 0x25
        device->input_count = 0;
 c5c:	1f a2       	std	Y+39, r1	; 0x27
 c5e:	1e a2       	std	Y+38, r1	; 0x26
        break;
 c60:	41 c0       	rjmp	.+130    	; 0xce4 <midi_process_byte+0x17a>
    }
  } else {
    if (device->input_state != IDLE) {
 c62:	ed a1       	ldd	r30, Y+37	; 0x25
 c64:	ee 23       	and	r30, r30
 c66:	f1 f1       	breq	.+124    	; 0xce4 <midi_process_byte+0x17a>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
 c68:	4e a1       	ldd	r20, Y+38	; 0x26
 c6a:	5f a1       	ldd	r21, Y+39	; 0x27
 c6c:	9a 01       	movw	r18, r20
 c6e:	ab ea       	ldi	r26, 0xAB	; 171
 c70:	ba ea       	ldi	r27, 0xAA	; 170
 c72:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	9c 01       	movw	r18, r24
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	82 0f       	add	r24, r18
 c82:	93 1f       	adc	r25, r19
 c84:	9a 01       	movw	r18, r20
 c86:	28 1b       	sub	r18, r24
 c88:	39 0b       	sbc	r19, r25
 c8a:	de 01       	movw	r26, r28
 c8c:	a2 0f       	add	r26, r18
 c8e:	b3 1f       	adc	r27, r19
 c90:	92 96       	adiw	r26, 0x22	; 34
 c92:	1c 93       	st	X, r17
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
 c94:	ba 01       	movw	r22, r20
 c96:	6f 5f       	subi	r22, 0xFF	; 255
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	7f a3       	std	Y+39, r23	; 0x27
 c9c:	6e a3       	std	Y+38, r22	; 0x26

      switch(prev % 3) {
 c9e:	21 30       	cpi	r18, 0x01	; 1
 ca0:	31 05       	cpc	r19, r1
 ca2:	89 f0       	breq	.+34     	; 0xcc6 <midi_process_byte+0x15c>
 ca4:	22 30       	cpi	r18, 0x02	; 2
 ca6:	31 05       	cpc	r19, r1
 ca8:	e9 f4       	brne	.+58     	; 0xce4 <midi_process_byte+0x17a>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
 caa:	0c a1       	ldd	r16, Y+36	; 0x24
 cac:	2b a1       	ldd	r18, Y+35	; 0x23
 cae:	4a a1       	ldd	r20, Y+34	; 0x22
 cb0:	ce 01       	movw	r24, r28
 cb2:	0e 94 a1 04 	call	0x942	; 0x942 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
 cb6:	8d a1       	ldd	r24, Y+37	; 0x25
 cb8:	84 30       	cpi	r24, 0x04	; 4
 cba:	a1 f0       	breq	.+40     	; 0xce4 <midi_process_byte+0x17a>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
 cbc:	81 e0       	ldi	r24, 0x01	; 1
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	9f a3       	std	Y+39, r25	; 0x27
 cc2:	8e a3       	std	Y+38, r24	; 0x26
 cc4:	0f c0       	rjmp	.+30     	; 0xce4 <midi_process_byte+0x17a>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
 cc6:	e2 30       	cpi	r30, 0x02	; 2
 cc8:	69 f4       	brne	.+26     	; 0xce4 <midi_process_byte+0x17a>
            //call callback
            midi_input_callbacks(device, device->input_count,
 cca:	00 e0       	ldi	r16, 0x00	; 0
 ccc:	2b a1       	ldd	r18, Y+35	; 0x23
 cce:	4a a1       	ldd	r20, Y+34	; 0x22
 cd0:	ce 01       	movw	r24, r28
 cd2:	0e 94 a1 04 	call	0x942	; 0x942 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
 cd6:	8d a1       	ldd	r24, Y+37	; 0x25
 cd8:	84 30       	cpi	r24, 0x04	; 4
 cda:	21 f0       	breq	.+8      	; 0xce4 <midi_process_byte+0x17a>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	9f a3       	std	Y+39, r25	; 0x27
 ce2:	8e a3       	std	Y+38, r24	; 0x26
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
 ce4:	df 91       	pop	r29
 ce6:	cf 91       	pop	r28
 ce8:	1f 91       	pop	r17
 cea:	0f 91       	pop	r16
 cec:	ff 90       	pop	r15
 cee:	08 95       	ret

00000cf0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
 cf0:	cf 92       	push	r12
 cf2:	df 92       	push	r13
 cf4:	ef 92       	push	r14
 cf6:	ff 92       	push	r15
 cf8:	0f 93       	push	r16
 cfa:	1f 93       	push	r17
 cfc:	cf 93       	push	r28
 cfe:	df 93       	push	r29
 d00:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
 d02:	dc 01       	movw	r26, r24
 d04:	90 96       	adiw	r26, 0x20	; 32
 d06:	ed 91       	ld	r30, X+
 d08:	fc 91       	ld	r31, X
 d0a:	91 97       	sbiw	r26, 0x21	; 33
 d0c:	30 97       	sbiw	r30, 0x00	; 0
 d0e:	09 f0       	breq	.+2      	; 0xd12 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
 d10:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
 d12:	86 01       	movw	r16, r12
 d14:	08 51       	subi	r16, 0x18	; 24
 d16:	1f 4f       	sbci	r17, 0xFF	; 255
 d18:	c8 01       	movw	r24, r16
 d1a:	0e 94 bd 03 	call	0x77a	; 0x77a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 d1e:	e8 2e       	mov	r14, r24
 d20:	f1 2c       	mov	r15, r1
 d22:	e1 14       	cp	r14, r1
 d24:	f1 04       	cpc	r15, r1
 d26:	91 f0       	breq	.+36     	; 0xd4c <midi_device_process+0x5c>
 d28:	c0 e0       	ldi	r28, 0x00	; 0
 d2a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
 d2c:	60 e0       	ldi	r22, 0x00	; 0
 d2e:	c8 01       	movw	r24, r16
 d30:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <bytequeue_get>
 d34:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
 d36:	c6 01       	movw	r24, r12
 d38:	0e 94 b5 05 	call	0xb6a	; 0xb6a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
 d3c:	61 e0       	ldi	r22, 0x01	; 1
 d3e:	c8 01       	movw	r24, r16
 d40:	0e 94 e5 03 	call	0x7ca	; 0x7ca <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
 d44:	21 96       	adiw	r28, 0x01	; 1
 d46:	ce 15       	cp	r28, r14
 d48:	df 05       	cpc	r29, r15
 d4a:	81 f7       	brne	.-32     	; 0xd2c <midi_device_process+0x3c>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	1f 91       	pop	r17
 d52:	0f 91       	pop	r16
 d54:	ff 90       	pop	r15
 d56:	ef 90       	pop	r14
 d58:	df 90       	pop	r13
 d5a:	cf 90       	pop	r12
 d5c:	08 95       	ret

00000d5e <__divmodhi4>:
 d5e:	97 fb       	bst	r25, 7
 d60:	07 2e       	mov	r0, r23
 d62:	16 f4       	brtc	.+4      	; 0xd68 <__divmodhi4+0xa>
 d64:	00 94       	com	r0
 d66:	07 d0       	rcall	.+14     	; 0xd76 <__divmodhi4_neg1>
 d68:	77 fd       	sbrc	r23, 7
 d6a:	09 d0       	rcall	.+18     	; 0xd7e <__divmodhi4_neg2>
 d6c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__udivmodhi4>
 d70:	07 fc       	sbrc	r0, 7
 d72:	05 d0       	rcall	.+10     	; 0xd7e <__divmodhi4_neg2>
 d74:	3e f4       	brtc	.+14     	; 0xd84 <__divmodhi4_exit>

00000d76 <__divmodhi4_neg1>:
 d76:	90 95       	com	r25
 d78:	81 95       	neg	r24
 d7a:	9f 4f       	sbci	r25, 0xFF	; 255
 d7c:	08 95       	ret

00000d7e <__divmodhi4_neg2>:
 d7e:	70 95       	com	r23
 d80:	61 95       	neg	r22
 d82:	7f 4f       	sbci	r23, 0xFF	; 255

00000d84 <__divmodhi4_exit>:
 d84:	08 95       	ret

00000d86 <__tablejump2__>:
 d86:	ee 0f       	add	r30, r30
 d88:	ff 1f       	adc	r31, r31
 d8a:	05 90       	lpm	r0, Z+
 d8c:	f4 91       	lpm	r31, Z
 d8e:	e0 2d       	mov	r30, r0
 d90:	09 94       	ijmp

00000d92 <__umulhisi3>:
 d92:	a2 9f       	mul	r26, r18
 d94:	b0 01       	movw	r22, r0
 d96:	b3 9f       	mul	r27, r19
 d98:	c0 01       	movw	r24, r0
 d9a:	a3 9f       	mul	r26, r19
 d9c:	70 0d       	add	r23, r0
 d9e:	81 1d       	adc	r24, r1
 da0:	11 24       	eor	r1, r1
 da2:	91 1d       	adc	r25, r1
 da4:	b2 9f       	mul	r27, r18
 da6:	70 0d       	add	r23, r0
 da8:	81 1d       	adc	r24, r1
 daa:	11 24       	eor	r1, r1
 dac:	91 1d       	adc	r25, r1
 dae:	08 95       	ret

00000db0 <__udivmodhi4>:
 db0:	aa 1b       	sub	r26, r26
 db2:	bb 1b       	sub	r27, r27
 db4:	51 e1       	ldi	r21, 0x11	; 17
 db6:	07 c0       	rjmp	.+14     	; 0xdc6 <__udivmodhi4_ep>

00000db8 <__udivmodhi4_loop>:
 db8:	aa 1f       	adc	r26, r26
 dba:	bb 1f       	adc	r27, r27
 dbc:	a6 17       	cp	r26, r22
 dbe:	b7 07       	cpc	r27, r23
 dc0:	10 f0       	brcs	.+4      	; 0xdc6 <__udivmodhi4_ep>
 dc2:	a6 1b       	sub	r26, r22
 dc4:	b7 0b       	sbc	r27, r23

00000dc6 <__udivmodhi4_ep>:
 dc6:	88 1f       	adc	r24, r24
 dc8:	99 1f       	adc	r25, r25
 dca:	5a 95       	dec	r21
 dcc:	a9 f7       	brne	.-22     	; 0xdb8 <__udivmodhi4_loop>
 dce:	80 95       	com	r24
 dd0:	90 95       	com	r25
 dd2:	bc 01       	movw	r22, r24
 dd4:	cd 01       	movw	r24, r26
 dd6:	08 95       	ret

00000dd8 <_exit>:
 dd8:	f8 94       	cli

00000dda <__stop_program>:
 dda:	ff cf       	rjmp	.-2      	; 0xdda <__stop_program>
